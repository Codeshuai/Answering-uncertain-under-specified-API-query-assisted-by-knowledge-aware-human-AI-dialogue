{
    "javax.sql.rowset.setobject": [
        "javax.sql.RowSet.setObject(java.lang.String,java.lang.Object)",
        "javax.sql.RowSet.setObject(java.lang.String,java.lang.Object,int)",
        "javax.sql.RowSet.setObject(int,java.lang.Object)",
        "javax.sql.RowSet.setObject(int,java.lang.Object,int,int)",
        "javax.sql.RowSet.setObject(java.lang.String,java.lang.Object,int,int)",
        "javax.sql.RowSet.setObject(int,java.lang.Object,int)"
    ],
    "java.time.period.plusmonths": [
        "java.time.Period.plusMonths(long)"
    ],
    "org.w3c.dom.document.getelementbyid": [
        "org.w3c.dom.Document.getElementById(java.lang.String)"
    ],
    "java.time.temporal.temporalfield.resolve": [
        "java.time.temporal.TemporalField.resolve(,java.lang.Long>,java.time.temporal.TemporalAccessor,java.time.format.ResolverStyle)"
    ],
    "java.util.propertypermission.getactions": [
        "java.util.PropertyPermission.getActions()"
    ],
    "javax.swing.plaf.basic.basictreeui.updatelayoutcacheexpandednodes": [
        "javax.swing.plaf.basic.BasicTreeUI.updateLayoutCacheExpandedNodes()"
    ],
    "java.util.concurrent.timeunit.timedwait": [
        "java.util.concurrent.TimeUnit.timedWait(java.lang.Object,long)"
    ],
    "java.util.concurrent.delayqueue.peek": [
        "java.util.concurrent.DelayQueue.peek()"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getmenutextfont": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getMenuTextFont()"
    ],
    "javax.swing.tooltipmanager.sharedinstance": [
        "javax.swing.ToolTipManager.sharedInstance()"
    ],
    "javax.swing.jinternalframe.getlayer": [
        "javax.swing.JInternalFrame.getLayer()"
    ],
    "javax.swing.plaf.synth.synthspinnerui.uninstalldefaults": [
        "javax.swing.plaf.synth.SynthSpinnerUI.uninstallDefaults()"
    ],
    "java.lang.management.operatingsystemmxbean.getname": [
        "java.lang.management.OperatingSystemMXBean.getName()"
    ],
    "javax.swing.text.abstractwriter.getdocument": [
        "javax.swing.text.AbstractWriter.getDocument()"
    ],
    "javax.security.auth.subjectdomaincombiner.combine": [
        "javax.security.auth.SubjectDomainCombiner.combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])"
    ],
    "java.math.bigdecimal.precision": [
        "java.math.BigDecimal.precision()"
    ],
    "java.awt.checkbox.addnotify": [
        "java.awt.Checkbox.addNotify()"
    ],
    "javax.net.ssl.sslsessionbindingevent.getname": [
        "javax.net.ssl.SSLSessionBindingEvent.getName()"
    ],
    "org.omg.corba.objectholder._write": [
        "org.omg.CORBA.ObjectHolder._write(org.omg.CORBA.portable.OutputStream)"
    ],
    "javax.xml.parsers.documentbuilder.getdomimplementation": [
        "javax.xml.parsers.DocumentBuilder.getDOMImplementation()"
    ],
    "javax.swing.plaf.multi.multifilechooserui.update": [
        "javax.swing.plaf.multi.MultiFileChooserUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.plaf.multi.multitextui.getuis": [
        "javax.swing.plaf.multi.MultiTextUI.getUIs()"
    ],
    "javax.swing.jlist.createselectionmodel": [
        "javax.swing.JList.createSelectionModel()"
    ],
    "java.util.stream.intstream.max": [
        "java.util.stream.IntStream.max()"
    ],
    "java.util.concurrent.threadpoolexecutor.getcorepoolsize": [
        "java.util.concurrent.ThreadPoolExecutor.getCorePoolSize()"
    ],
    "java.security.cert.x509certselector.setprivatekeyvalid": [
        "java.security.cert.X509CertSelector.setPrivateKeyValid(java.util.Date)"
    ],
    "java.util.queue.remove": [
        "java.util.Queue.remove()"
    ],
    "java.time.clock.tick": [
        "java.time.Clock.tick(java.time.Clock,java.time.Duration)"
    ],
    "java.security.cert.certpathbuilderresult.getcertpath": [
        "java.security.cert.CertPathBuilderResult.getCertPath()"
    ],
    "javax.swing.jinternalframe.jdesktopicon.getdesktoppane": [
        "javax.swing.JInternalFrame.JDesktopIcon.getDesktopPane()"
    ],
    "javax.xml.bind.datatypeconverter.parselong": [
        "javax.xml.bind.DatatypeConverter.parseLong(java.lang.String)"
    ],
    "java.sql.connection.setnetworktimeout": [
        "java.sql.Connection.setNetworkTimeout(java.util.concurrent.Executor,int)"
    ],
    "javax.swing.plaf.multi.multitextui.modeltoview": [
        "javax.swing.plaf.multi.MultiTextUI.modelToView(javax.swing.text.JTextComponent,int)",
        "javax.swing.plaf.multi.MultiTextUI.modelToView(javax.swing.text.JTextComponent,int,javax.swing.text.Position.Bias)"
    ],
    "javax.swing.plaf.multi.multimenuitemui.createui": [
        "javax.swing.plaf.multi.MultiMenuItemUI.createUI(javax.swing.JComponent)"
    ],
    "javax.management.openmbean.openmbeanattributeinfosupport.equals": [
        "javax.management.openmbean.OpenMBeanAttributeInfoSupport.equals(java.lang.Object)"
    ],
    "org.omg.cosnaming._namingcontextstub.rebind_context": [
        "org.omg.CosNaming._NamingContextStub.rebind_context(org.omg.CosNaming.NameComponent[],org.omg.CosNaming.NamingContext)"
    ],
    "org.w3c.dom.ls.domimplementationls.createlsinput": [
        "org.w3c.dom.ls.DOMImplementationLS.createLSInput()"
    ],
    "javax.swing.plaf.synth.synthgraphicsutils.drawline": [
        "javax.swing.plaf.synth.SynthGraphicsUtils.drawLine(javax.swing.plaf.synth.SynthContext,java.lang.Object,java.awt.Graphics,int,int,int,int)",
        "javax.swing.plaf.synth.SynthGraphicsUtils.drawLine(javax.swing.plaf.synth.SynthContext,java.lang.Object,java.awt.Graphics,int,int,int,int,java.lang.Object)"
    ],
    "java.awt.graphics2d.getbackground": [
        "java.awt.Graphics2D.getBackground()"
    ],
    "java.beans.beancontext.beancontextservicessupport.fireservicerevoked": [
        "java.beans.beancontext.BeanContextServicesSupport.fireServiceRevoked(java.lang.Class,boolean)",
        "java.beans.beancontext.BeanContextServicesSupport.fireServiceRevoked(java.beans.beancontext.BeanContextServiceRevokedEvent)"
    ],
    "java.awt.cardlayout.first": [
        "java.awt.CardLayout.first(java.awt.Container)"
    ],
    "java.security.cert.x509certselector.match": [
        "java.security.cert.X509CertSelector.match(java.security.cert.Certificate)"
    ],
    "java.util.logging.level.tostring": [
        "java.util.logging.Level.toString()"
    ],
    "javax.swing.plaf.metal.metallookandfeel.initsystemcolordefaults": [
        "javax.swing.plaf.metal.MetalLookAndFeel.initSystemColorDefaults(javax.swing.UIDefaults)"
    ],
    "javax.crypto.exemptionmechanism.init": [
        "javax.crypto.ExemptionMechanism.init(java.security.Key,java.security.AlgorithmParameters)",
        "javax.crypto.ExemptionMechanism.init(java.security.Key,java.security.spec.AlgorithmParameterSpec)",
        "javax.crypto.ExemptionMechanism.init(java.security.Key)"
    ],
    "java.sql.statement.clearwarnings": [
        "java.sql.Statement.clearWarnings()"
    ],
    "java.time.localdatetime.parse": [
        "java.time.LocalDateTime.parse(java.lang.CharSequence)",
        "java.time.LocalDateTime.parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)"
    ],
    "java.sql.databasemetadata.getprocedurecolumns": [
        "java.sql.DatabaseMetaData.getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
    ],
    "javax.naming.spi.resolveresult.appendremainingcomponent": [
        "javax.naming.spi.ResolveResult.appendRemainingComponent(java.lang.String)"
    ],
    "java.util.concurrent.forkjointask.getsurplusqueuedtaskcount": [
        "java.util.concurrent.ForkJoinTask.getSurplusQueuedTaskCount()"
    ],
    "java.util.stream.stream.limit": [
        "java.util.stream.Stream.limit(long)"
    ],
    "javax.xml.ws.webservicecontext.getuserprincipal": [
        "javax.xml.ws.WebServiceContext.getUserPrincipal()"
    ],
    "java.awt.splashscreen.getbounds": [
        "java.awt.SplashScreen.getBounds()"
    ],
    "javax.swing.plaf.basic.basictreeui.getbaselineresizebehavior": [
        "javax.swing.plaf.basic.BasicTreeUI.getBaselineResizeBehavior(javax.swing.JComponent)"
    ],
    "java.lang.integer.parseint": [
        "java.lang.Integer.parseInt(java.lang.String)",
        "java.lang.Integer.parseInt(java.lang.String,int)"
    ],
    "javax.imageio.spi.imagereaderwriterspi.getextraimagemetadataformatnames": [
        "javax.imageio.spi.ImageReaderWriterSpi.getExtraImageMetadataFormatNames()"
    ],
    "java.lang.double.tohexstring": [
        "java.lang.Double.toHexString(double)"
    ],
    "java.util.prefs.abstractpreferences.remove": [
        "java.util.prefs.AbstractPreferences.remove(java.lang.String)"
    ],
    "javax.security.cert.certificate.hashcode": [
        "javax.security.cert.Certificate.hashCode()"
    ],
    "java.util.resourcebundle.control.needsreload": [
        "java.util.ResourceBundle.Control.needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)"
    ],
    "javax.swing.defaultlistmodel.removeallelements": [
        "javax.swing.DefaultListModel.removeAllElements()"
    ],
    "java.lang.management.monitorinfo.getlockedstackdepth": [
        "java.lang.management.MonitorInfo.getLockedStackDepth()"
    ],
    "java.awt.component.gethierarchylisteners": [
        "java.awt.Component.getHierarchyListeners()"
    ],
    "java.sql.sqlinput.readrowid": [
        "java.sql.SQLInput.readRowId()"
    ],
    "javax.swing.table.tablecolumn.getmaxwidth": [
        "javax.swing.table.TableColumn.getMaxWidth()"
    ],
    "java.util.concurrent.atomic.atomicinteger.set": [
        "java.util.concurrent.atomic.AtomicInteger.set(int)"
    ],
    "java.awt.event.mousewheelevent.getunitstoscroll": [
        "java.awt.event.MouseWheelEvent.getUnitsToScroll()"
    ],
    "javax.imageio.stream.filecacheimageinputstream.close": [
        "javax.imageio.stream.FileCacheImageInputStream.close()"
    ],
    "java.time.period.withdays": [
        "java.time.Period.withDays(int)"
    ],
    "javax.swing.jtree.droplocation.getchildindex": [
        "javax.swing.JTree.DropLocation.getChildIndex()"
    ],
    "java.lang.process.exitvalue": [
        "java.lang.Process.exitValue()"
    ],
    "java.lang.stringbuffer.appendcodepoint": [
        "java.lang.StringBuffer.appendCodePoint(int)"
    ],
    "javax.swing.plaf.multi.multitextui.contains": [
        "javax.swing.plaf.multi.MultiTextUI.contains(javax.swing.JComponent,int,int)"
    ],
    "javax.print.attribute.standard.printerstatereason.getenumvaluetable": [
        "javax.print.attribute.standard.PrinterStateReason.getEnumValueTable()"
    ],
    "java.nio.charset.charsetdecoder.replacement": [
        "java.nio.charset.CharsetDecoder.replacement()"
    ],
    "java.security.cert.certificate.verify": [
        "java.security.cert.Certificate.verify(java.security.PublicKey)",
        "java.security.cert.Certificate.verify(java.security.PublicKey,java.lang.String)",
        "java.security.cert.Certificate.verify(java.security.PublicKey,java.security.Provider)"
    ],
    "org.omg.dynamicany._dynarraystub.get_string": [
        "org.omg.DynamicAny._DynArrayStub.get_string()"
    ],
    "java.awt.datatransfer.clipboard.addflavorlistener": [
        "java.awt.datatransfer.Clipboard.addFlavorListener(java.awt.datatransfer.FlavorListener)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintbuttonbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintButtonBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.text.internationalformatter.clone": [
        "javax.swing.text.InternationalFormatter.clone()"
    ],
    "javax.lang.model.element.annotationvalue.getvalue": [
        "javax.lang.model.element.AnnotationValue.getValue()"
    ],
    "java.util.concurrent.atomic.atomicinteger.getandadd": [
        "java.util.concurrent.atomic.AtomicInteger.getAndAdd(int)"
    ],
    "javax.rmi.ssl.sslrmiserversocketfactory.hashcode": [
        "javax.rmi.ssl.SslRMIServerSocketFactory.hashCode()"
    ],
    "javax.management.mbeanfeatureinfo.getname": [
        "javax.management.MBeanFeatureInfo.getName()"
    ],
    "java.lang.management.memorypoolmxbean.gettype": [
        "java.lang.management.MemoryPoolMXBean.getType()"
    ],
    "javax.swing.jscrollpane.setverticalscrollbar": [
        "javax.swing.JScrollPane.setVerticalScrollBar(javax.swing.JScrollBar)"
    ],
    "org.omg.dynamicany._dynsequencestub.get_octet": [
        "org.omg.DynamicAny._DynSequenceStub.get_octet()"
    ],
    "java.time.yearmonth.atday": [
        "java.time.YearMonth.atDay(int)"
    ],
    "javax.xml.bind.marshaller.seteventhandler": [
        "javax.xml.bind.Marshaller.setEventHandler(javax.xml.bind.ValidationEventHandler)"
    ],
    "org.omg.corba.request.send_deferred": [
        "org.omg.CORBA.Request.send_deferred()"
    ],
    "java.awt.color.icc_profile.getcolorspacetype": [
        "java.awt.color.ICC_Profile.getColorSpaceType()"
    ],
    "javax.swing.tree.variableheightlayoutcache.getpathclosestto": [
        "javax.swing.tree.VariableHeightLayoutCache.getPathClosestTo(int,int)"
    ],
    "java.sql.resultset.rowdeleted": [
        "java.sql.ResultSet.rowDeleted()"
    ],
    "java.awt.image.memoryimagesource.removeconsumer": [
        "java.awt.image.MemoryImageSource.removeConsumer(java.awt.image.ImageConsumer)"
    ],
    "javax.net.ssl.sslengine.getsupportedciphersuites": [
        "javax.net.ssl.SSLEngine.getSupportedCipherSuites()"
    ],
    "javax.imageio.iioimage.getmetadata": [
        "javax.imageio.IIOImage.getMetadata()"
    ],
    "java.util.concurrent.forkjoinpool.draintasksto": [
        "java.util.concurrent.ForkJoinPool.drainTasksTo(java.util.Collection<? super java.util.concurrent.ForkJoinTask<?>>)"
    ],
    "javax.swing.jdialog.setglasspane": [
        "javax.swing.JDialog.setGlassPane(java.awt.Component)"
    ],
    "java.util.concurrent.concurrenthashmap.putifabsent": [
        "java.util.concurrent.ConcurrentHashMap.putIfAbsent(java.util.concurrent.ConcurrentHashMap,java.util.concurrent.ConcurrentHashMap)",
        "java.util.concurrent.ConcurrentHashMap.putIfAbsent(K,V)"
    ],
    "java.lang.classloader.setsigners": [
        "java.lang.ClassLoader.setSigners(java.lang.Class<?>,java.lang.Object[])",
        "java.lang.ClassLoader.setSigners(java.lang.Class<?>,java.lang.Object)"
    ],
    "java.time.chrono.minguodate.of": [
        "java.time.chrono.MinguoDate.of(int,int,int)"
    ],
    "java.rmi.server.rmiclassloader.getdefaultproviderinstance": [
        "java.rmi.server.RMIClassLoader.getDefaultProviderInstance()"
    ],
    "java.net.socket.shutdownoutput": [
        "java.net.Socket.shutdownOutput()"
    ],
    "java.time.zoneid.normalized": [
        "java.time.ZoneId.normalized()"
    ],
    "org.omg.dynamicany._dynanystub.get_ulonglong": [
        "org.omg.DynamicAny._DynAnyStub.get_ulonglong()"
    ],
    "org.omg.dynamicany._dynfixedstub.assign": [
        "org.omg.DynamicAny._DynFixedStub.assign(org.omg.DynamicAny.DynAny)"
    ],
    "javax.swing.lookandfeel.getdisabledselectedicon": [
        "javax.swing.LookAndFeel.getDisabledSelectedIcon(javax.swing.JComponent,javax.swing.Icon)"
    ],
    "java.awt.image.getcapabilities": [
        "java.awt.Image.getCapabilities(java.awt.GraphicsConfiguration)"
    ],
    "javax.swing.text.highlighter.removehighlight": [
        "javax.swing.text.Highlighter.removeHighlight(java.lang.Object)"
    ],
    "javax.swing.event.rowsorterevent.type.values": [
        "javax.swing.event.RowSorterEvent.Type.values()"
    ],
    "java.time.monthday.from": [
        "java.time.MonthDay.from(java.time.temporal.TemporalAccessor)"
    ],
    "java.awt.scrollbar.getmaximum": [
        "java.awt.Scrollbar.getMaximum()"
    ],
    "java.awt.textfield.processevent": [
        "java.awt.TextField.processEvent(java.awt.AWTEvent)"
    ],
    "javax.xml.bind.marshaller.getnode": [
        "javax.xml.bind.Marshaller.getNode(java.lang.Object)"
    ],
    "javax.swing.plaf.basic.basiclistui.uninstalldefaults": [
        "javax.swing.plaf.basic.BasicListUI.uninstallDefaults()"
    ],
    "org.omg.corba.anyholder._type": [
        "org.omg.CORBA.AnyHolder._type()"
    ],
    "java.util.collections.lastindexofsublist": [
        "java.util.Collections.lastIndexOfSubList(java.util.List<?>,java.util.List<?>)"
    ],
    "java.util.stream.streamsupport.longstream": [
        "java.util.stream.StreamSupport.longStream(java.util.Spliterator.OfLong,boolean)",
        "java.util.stream.StreamSupport.longStream(java.util.function.Supplier<? extends java.util.Spliterator.OfLong>,int,boolean)"
    ],
    "java.rmi.server.rmisocketfactory.createsocket": [
        "java.rmi.server.RMISocketFactory.createSocket(java.lang.String,int)"
    ],
    "java.awt.image.renderable.renderableimageproducer.setrendercontext": [
        "java.awt.image.renderable.RenderableImageProducer.setRenderContext(java.awt.image.renderable.RenderContext)"
    ],
    "javax.sql.rowset.spi.transactionalwriter.rollback": [
        "javax.sql.rowset.spi.TransactionalWriter.rollback()",
        "javax.sql.rowset.spi.TransactionalWriter.rollback(java.sql.Savepoint)"
    ],
    "java.util.logging.handler.publish": [
        "java.util.logging.Handler.publish(java.util.logging.LogRecord)"
    ],
    "java.lang.management.operatingsystemmxbean.getsystemloadaverage": [
        "java.lang.management.OperatingSystemMXBean.getSystemLoadAverage()"
    ],
    "java.nio.longbuffer.allocate": [
        "java.nio.LongBuffer.allocate(int)"
    ],
    "javax.swing.plaf.layerui.firepropertychange": [
        "javax.swing.plaf.LayerUI.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)"
    ],
    "javax.swing.text.asyncboxview.gettopinset": [
        "javax.swing.text.AsyncBoxView.getTopInset()"
    ],
    "java.awt.event.actionevent.getmodifiers": [
        "java.awt.event.ActionEvent.getModifiers()"
    ],
    "java.util.map.getordefault": [
        "java.util.Map.getOrDefault(java.lang.Object,V)",
        "java.util.Map.getOrDefault(java.lang.Object,java.util.Map)"
    ],
    "java.awt.image.imagefilter.sethints": [
        "java.awt.image.ImageFilter.setHints(int)"
    ],
    "java.text.bidi.getruncount": [
        "java.text.Bidi.getRunCount()"
    ],
    "javax.management.modelmbean.descriptorsupport.toxmlstring": [
        "javax.management.modelmbean.DescriptorSupport.toXMLString()"
    ],
    "javax.xml.transform.stream.streamsource.getsystemid": [
        "javax.xml.transform.stream.StreamSource.getSystemId()"
    ],
    "java.nio.channels.asynchronouschannelgroup.awaittermination": [
        "java.nio.channels.AsynchronousChannelGroup.awaitTermination(long,java.util.concurrent.TimeUnit)"
    ],
    "org.omg.corba.object._get_interface_def": [
        "org.omg.CORBA.Object._get_interface_def()"
    ],
    "java.lang.classloader.findlibrary": [
        "java.lang.ClassLoader.findLibrary(java.lang.String)"
    ],
    "java.lang.invoke.methodhandles.lookup.unreflectspecial": [
        "java.lang.invoke.MethodHandles.Lookup.unreflectSpecial(java.lang.reflect.Method,java.lang.Class<?>)"
    ],
    "java.util.navigableset.descendingset": [
        "java.util.NavigableSet.descendingSet()"
    ],
    "javax.swing.joptionpane.getframeforcomponent": [
        "javax.swing.JOptionPane.getFrameForComponent(java.awt.Component)"
    ],
    "java.awt.keyboardfocusmanager.getglobalactivewindow": [
        "java.awt.KeyboardFocusManager.getGlobalActiveWindow()"
    ],
    "javax.rmi.corba.valuehandlermultiformat.writevalue": [
        "javax.rmi.CORBA.ValueHandlerMultiFormat.writeValue(org.omg.CORBA.portable.OutputStream,java.io.Serializable,byte)"
    ],
    "java.lang.annotation.annotation.annotationtype": [
        "java.lang.annotation.Annotation.annotationType()"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writecharacterstream": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeCharacterStream(java.io.Reader)"
    ],
    "javax.swing.event.treemodelevent.gettreepath": [
        "javax.swing.event.TreeModelEvent.getTreePath()"
    ],
    "javax.swing.text.html.parser.dtd.defentity": [
        "javax.swing.text.html.parser.DTD.defEntity(java.lang.String,int,int)",
        "javax.swing.text.html.parser.DTD.defEntity(java.lang.String,int,java.lang.String)"
    ],
    "javax.swing.plaf.multi.multispinnerui.update": [
        "javax.swing.plaf.multi.MultiSpinnerUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.util.zip.deflater.deflate": [
        "java.util.zip.Deflater.deflate(byte[],int,int,int)",
        "java.util.zip.Deflater.deflate(byte[])",
        "java.util.zip.Deflater.deflate(byte[],int,int)"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.firevaluechanged": [
        "javax.swing.tree.DefaultTreeSelectionModel.fireValueChanged(javax.swing.event.TreeSelectionEvent)"
    ],
    "java.awt.image.componentsamplemodel.createsubsetsamplemodel": [
        "java.awt.image.ComponentSampleModel.createSubsetSampleModel(int[])"
    ],
    "java.net.urlconnection.getdefaultallowuserinteraction": [
        "java.net.URLConnection.getDefaultAllowUserInteraction()"
    ],
    "java.awt.image.colormodel.getnormalizedcomponents": [
        "java.awt.image.ColorModel.getNormalizedComponents(int[],int,float[],int)",
        "java.awt.image.ColorModel.getNormalizedComponents(java.lang.Object,float[],int)"
    ],
    "java.awt.geom.cubiccurve2d.float.gety1": [
        "java.awt.geom.CubicCurve2D.Float.getY1()"
    ],
    "java.util.longsummarystatistics.getmin": [
        "java.util.LongSummaryStatistics.getMin()"
    ],
    "javax.xml.transform.transformerfactory.newtransformer": [
        "javax.xml.transform.TransformerFactory.newTransformer()",
        "javax.xml.transform.TransformerFactory.newTransformer(javax.xml.transform.Source)"
    ],
    "javax.management.mbeanconstructorinfo.getsignature": [
        "javax.management.MBeanConstructorInfo.getSignature()"
    ],
    "java.awt.dimension.setsize": [
        "java.awt.Dimension.setSize(double,double)",
        "java.awt.Dimension.setSize(int,int)",
        "java.awt.Dimension.setSize(java.awt.Dimension)"
    ],
    "java.net.httpcookie.setversion": [
        "java.net.HttpCookie.setVersion(int)"
    ],
    "javax.management.openmbean.tabulardatasupport.get": [
        "javax.management.openmbean.TabularDataSupport.get(java.lang.Object[])"
    ],
    "java.awt.component.prepareimage": [
        "java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",
        "java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"
    ],
    "java.security.policy.gettype": [
        "java.security.Policy.getType()"
    ],
    "java.awt.borderlayout.addlayoutcomponent": [
        "java.awt.BorderLayout.addLayoutComponent(java.awt.Component,java.lang.Object)"
    ],
    "java.nio.file.spi.filesystemprovider.getscheme": [
        "java.nio.file.spi.FileSystemProvider.getScheme()"
    ],
    "java.util.concurrent.priorityblockingqueue.iterator": [
        "java.util.concurrent.PriorityBlockingQueue.iterator()"
    ],
    "javax.accessibility.accessibletable.getselectedaccessiblerows": [
        "javax.accessibility.AccessibleTable.getSelectedAccessibleRows()"
    ],
    "java.awt.layoutmanager.preferredlayoutsize": [
        "java.awt.LayoutManager.preferredLayoutSize(java.awt.Container)"
    ],
    "java.time.localtime.gethour": [
        "java.time.LocalTime.getHour()"
    ],
    "java.time.chrono.chronoperiod.between": [
        "java.time.chrono.ChronoPeriod.between(java.time.chrono.ChronoLocalDate,java.time.chrono.ChronoLocalDate)"
    ],
    "javax.swing.jcolorchooser.getuiclassid": [
        "javax.swing.JColorChooser.getUIClassID()"
    ],
    "java.sql.resultsetmetadata.getcolumntypename": [
        "java.sql.ResultSetMetaData.getColumnTypeName(int)"
    ],
    "javax.management.timer.timermbean.getnboccurences": [
        "javax.management.timer.TimerMBean.getNbOccurences(java.lang.Integer)"
    ],
    "javax.script.simplescriptcontext.getattributesscope": [
        "javax.script.SimpleScriptContext.getAttributesScope(java.lang.String)"
    ],
    "javax.net.ssl.trustmanagerfactory.getalgorithm": [
        "javax.net.ssl.TrustManagerFactory.getAlgorithm()"
    ],
    "java.io.randomaccessfile.write": [
        "java.io.RandomAccessFile.write(byte[],int,int)",
        "java.io.RandomAccessFile.write(int)"
    ],
    "java.net.httpurlconnection.getresponsecode": [
        "java.net.HttpURLConnection.getResponseCode()"
    ],
    "java.awt.im.inputmethodhighlight.getvariation": [
        "java.awt.im.InputMethodHighlight.getVariation()"
    ],
    "javax.imageio.imageio.getimagereadersbymimetype": [
        "javax.imageio.ImageIO.getImageReadersByMIMEType(java.lang.String)"
    ],
    "javax.swing.plaf.multi.multibuttonui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiButtonUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "java.sql.callablestatement.setclob": [
        "java.sql.CallableStatement.setClob(java.lang.String,java.io.Reader)",
        "java.sql.CallableStatement.setClob(java.lang.String,java.io.Reader,long)",
        "java.sql.CallableStatement.setClob(java.lang.String,java.sql.Clob)"
    ],
    "javax.management.loading.mlet.postregister": [
        "javax.management.loading.MLet.postRegister(java.lang.Boolean)"
    ],
    "java.nio.charset.coderresult.iserror": [
        "java.nio.charset.CoderResult.isError()"
    ],
    "java.awt.font.textlayout.getjustifiedlayout": [
        "java.awt.font.TextLayout.getJustifiedLayout(float)"
    ],
    "java.util.concurrent.atomic.atomiclong.weakcompareandset": [
        "java.util.concurrent.atomic.AtomicLong.weakCompareAndSet(long,long)"
    ],
    "java.awt.pageattributes.getcolor": [
        "java.awt.PageAttributes.getColor()"
    ],
    "java.util.optionallong.ifpresent": [
        "java.util.OptionalLong.ifPresent(java.util.function.LongConsumer)"
    ],
    "org.omg.dynamicany._dynfixedstub.insert_octet": [
        "org.omg.DynamicAny._DynFixedStub.insert_octet(byte)"
    ],
    "javax.swing.plaf.layerui.paintimmediately": [
        "javax.swing.plaf.LayerUI.paintImmediately(int,int,int,int,javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)"
    ],
    "javax.swing.plaf.basic.basictextui.update": [
        "javax.swing.plaf.basic.BasicTextUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.awt.im.spi.inputmethodcontext.dispatchinputmethodevent": [
        "java.awt.im.spi.InputMethodContext.dispatchInputMethodEvent(int,java.text.AttributedCharacterIterator,int,java.awt.font.TextHitInfo,java.awt.font.TextHitInfo)"
    ],
    "javax.swing.plaf.multi.multicomboboxui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiComboBoxUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "javax.script.scriptengine.createbindings": [
        "javax.script.ScriptEngine.createBindings()"
    ],
    "java.awt.adjustable.getorientation": [
        "java.awt.Adjustable.getOrientation()"
    ],
    "javax.swing.scrollable.getscrollableunitincrement": [
        "javax.swing.Scrollable.getScrollableUnitIncrement(java.awt.Rectangle,int,int)"
    ],
    "javax.xml.transform.errorlistener.warning": [
        "javax.xml.transform.ErrorListener.warning(javax.xml.transform.TransformerException)"
    ],
    "org.w3c.dom.ls.lsparserfilter.acceptnode": [
        "org.w3c.dom.ls.LSParserFilter.acceptNode(org.w3c.dom.Node)"
    ],
    "java.util.stack.search": [
        "java.util.Stack.search(java.lang.Object)"
    ],
    "javax.swing.jpopupmenu.setvisible": [
        "javax.swing.JPopupMenu.setVisible(boolean)"
    ],
    "org.w3c.dom.events.eventtarget.addeventlistener": [
        "org.w3c.dom.events.EventTarget.addEventListener(java.lang.String,org.w3c.dom.events.EventListener,boolean)"
    ],
    "java.sql.clob.setasciistream": [
        "java.sql.Clob.setAsciiStream(long)"
    ],
    "javax.swing.plaf.basic.basictableui.createkeylistener": [
        "javax.swing.plaf.basic.BasicTableUI.createKeyListener()"
    ],
    "java.math.bigdecimal.unscaledvalue": [
        "java.math.BigDecimal.unscaledValue()"
    ],
    "java.awt.cardlayout.show": [
        "java.awt.CardLayout.show(java.awt.Container,java.lang.String)"
    ],
    "javax.xml.stream.events.entitydeclaration.getbaseuri": [
        "javax.xml.stream.events.EntityDeclaration.getBaseURI()"
    ],
    "java.time.duration.getunits": [
        "java.time.Duration.getUnits()"
    ],
    "javax.swing.joptionpane.selectinitialvalue": [
        "javax.swing.JOptionPane.selectInitialValue()"
    ],
    "java.time.localtime.minusseconds": [
        "java.time.LocalTime.minusSeconds(long)"
    ],
    "javax.swing.text.html.htmleditorkit.createinputattributes": [
        "javax.swing.text.html.HTMLEditorKit.createInputAttributes(javax.swing.text.Element,javax.swing.text.MutableAttributeSet)"
    ],
    "java.lang.reflect.array.newinstance": [
        "java.lang.reflect.Array.newInstance(java.lang.Class<?>,int...)",
        "java.lang.reflect.Array.newInstance(java.lang.Class<?>,int)"
    ],
    "java.io.printwriter.write": [
        "java.io.PrintWriter.write(char[])",
        "java.io.PrintWriter.write(char[],int,int)",
        "java.io.PrintWriter.write(int)",
        "java.io.PrintWriter.write(java.lang.String)",
        "java.io.PrintWriter.write(java.lang.String,int,int)"
    ],
    "javax.swing.plaf.multi.multitooltipui.update": [
        "javax.swing.plaf.multi.MultiToolTipUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "org.omg.corba.portable.objectimpl._is_a": [
        "org.omg.CORBA.portable.ObjectImpl._is_a(java.lang.String)"
    ],
    "java.net.url.openconnection": [
        "java.net.URL.openConnection()"
    ],
    "java.awt.jobattributes.getsides": [
        "java.awt.JobAttributes.getSides()"
    ],
    "javax.sql.rowset.cachedrowset.setoriginalrow": [
        "javax.sql.rowset.CachedRowSet.setOriginalRow()"
    ],
    "javax.swing.scrollable.getscrollableblockincrement": [
        "javax.swing.Scrollable.getScrollableBlockIncrement(java.awt.Rectangle,int,int)"
    ],
    "java.awt.image.colormodel.getblue": [
        "java.awt.image.ColorModel.getBlue(int)",
        "java.awt.image.ColorModel.getBlue(java.lang.Object)"
    ],
    "java.security.permissions.elements": [
        "java.security.Permissions.elements()"
    ],
    "java.util.logging.logger.getresourcebundlename": [
        "java.util.logging.Logger.getResourceBundleName()"
    ],
    "java.awt.fontmetrics.charwidth": [
        "java.awt.FontMetrics.charWidth(char)",
        "java.awt.FontMetrics.charWidth(int)"
    ],
    "javax.swing.jfilechooser.getdescription": [
        "javax.swing.JFileChooser.getDescription(java.io.File)"
    ],
    "java.sql.databasemetadata.storeslowercaseidentifiers": [
        "java.sql.DatabaseMetaData.storesLowerCaseIdentifiers()"
    ],
    "javax.swing.border.titledborder.settitleposition": [
        "javax.swing.border.TitledBorder.setTitlePosition(int)"
    ],
    "javax.swing.plaf.basic.basictabbedpaneui.painttabarea": [
        "javax.swing.plaf.basic.BasicTabbedPaneUI.paintTabArea(java.awt.Graphics,int,int)"
    ],
    "javax.swing.plaf.synth.synthrootpaneui.paintborder": [
        "javax.swing.plaf.synth.SynthRootPaneUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.jfilechooser.setmultiselectionenabled": [
        "javax.swing.JFileChooser.setMultiSelectionEnabled(boolean)"
    ],
    "javax.swing.spinnermodel.addchangelistener": [
        "javax.swing.SpinnerModel.addChangeListener(javax.swing.event.ChangeListener)"
    ],
    "javax.imageio.imagereader.processimageupdate": [
        "javax.imageio.ImageReader.processImageUpdate(java.awt.image.BufferedImage,int,int,int,int,int,int,int[])"
    ],
    "java.util.concurrent.atomic.atomicintegerfieldupdater.lazyset": [
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.lazySet(java.util.concurrent.atomic.AtomicIntegerFieldUpdater,int)",
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.lazySet(T,int)"
    ],
    "java.util.duplicateformatflagsexception.getflags": [
        "java.util.DuplicateFormatFlagsException.getFlags()"
    ],
    "javax.swing.plaf.layerui.processmousemotionevent": [
        "javax.swing.plaf.LayerUI.processMouseMotionEvent(java.awt.event.MouseEvent,javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)"
    ],
    "java.lang.thread.currentthread": [
        "java.lang.Thread.currentThread()"
    ],
    "java.text.collationelementiterator.getoffset": [
        "java.text.CollationElementIterator.getOffset()"
    ],
    "java.time.chrono.hijrahdate.from": [
        "java.time.chrono.HijrahDate.from(java.time.temporal.TemporalAccessor)"
    ],
    "javax.swing.jtree.getdroplocation": [
        "javax.swing.JTree.getDropLocation()"
    ],
    "java.awt.keyboardfocusmanager.dispatchkeyevent": [
        "java.awt.KeyboardFocusManager.dispatchKeyEvent(java.awt.event.KeyEvent)"
    ],
    "org.omg.corba.portable.inputstream.read_any": [
        "org.omg.CORBA.portable.InputStream.read_any()"
    ],
    "javax.swing.text.boxview.replace": [
        "javax.swing.text.BoxView.replace(int,int,javax.swing.text.View[])"
    ],
    "javax.swing.plaf.synth.synthpainter.paintviewportbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintViewportBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.jviewport.toviewcoordinates": [
        "javax.swing.JViewport.toViewCoordinates(java.awt.Dimension)",
        "javax.swing.JViewport.toViewCoordinates(java.awt.Point)"
    ],
    "java.lang.long.valueof": [
        "java.lang.Long.valueOf(long)",
        "java.lang.Long.valueOf(java.lang.String,int)",
        "java.lang.Long.valueOf(java.lang.String)"
    ],
    "java.awt.image.multipixelpackedsamplemodel.getdataelements": [
        "java.awt.image.MultiPixelPackedSampleModel.getDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)"
    ],
    "java.time.localdatetime.minusminutes": [
        "java.time.LocalDateTime.minusMinutes(long)"
    ],
    "java.nio.file.attribute.basicfileattributes.lastaccesstime": [
        "java.nio.file.attribute.BasicFileAttributes.lastAccessTime()"
    ],
    "javax.swing.text.html.htmlwriter.text": [
        "javax.swing.text.html.HTMLWriter.text(javax.swing.text.Element)"
    ],
    "org.w3c.dom.node.getlocalname": [
        "org.w3c.dom.Node.getLocalName()"
    ],
    "org.omg.corba.dataoutputstream.write_value": [
        "org.omg.CORBA.DataOutputStream.write_Value(java.io.Serializable)"
    ],
    "java.beans.propertyeditorsupport.getcustomeditor": [
        "java.beans.PropertyEditorSupport.getCustomEditor()"
    ],
    "java.text.messageformat.hashcode": [
        "java.text.MessageFormat.hashCode()"
    ],
    "javax.management.standardemittermbean.sendnotification": [
        "javax.management.StandardEmitterMBean.sendNotification(javax.management.Notification)"
    ],
    "javax.swing.plaf.metal.metaltheme.getmenubackground": [
        "javax.swing.plaf.metal.MetalTheme.getMenuBackground()"
    ],
    "java.util.concurrent.atomic.atomicinteger.floatvalue": [
        "java.util.concurrent.atomic.AtomicInteger.floatValue()"
    ],
    "java.awt.image.databufferushort.setelem": [
        "java.awt.image.DataBufferUShort.setElem(int,int,int)"
    ],
    "org.w3c.dom.domstringlist.item": [
        "org.w3c.dom.DOMStringList.item(int)"
    ],
    "java.lang.management.operatingsystemmxbean.getavailableprocessors": [
        "java.lang.management.OperatingSystemMXBean.getAvailableProcessors()"
    ],
    "javax.swing.jtabbedpane.indexoftabcomponent": [
        "javax.swing.JTabbedPane.indexOfTabComponent(java.awt.Component)"
    ],
    "javax.management.objectname.getcanonicalname": [
        "javax.management.ObjectName.getCanonicalName()"
    ],
    "java.awt.color.getcolorspace": [
        "java.awt.Color.getColorSpace()"
    ],
    "org.omg.corba.nvlist.remove": [
        "org.omg.CORBA.NVList.remove(int)"
    ],
    "javax.swing.text.jtextcomponent.iseditable": [
        "javax.swing.text.JTextComponent.isEditable()"
    ],
    "java.util.comparator.comparing": [
        "java.util.Comparator.comparing(java.util.function.Function<? super,? extends U>)",
        "java.util.Comparator.comparing(java.util.function.Function<? super,? extends U>,java.util.Comparator<? super U>)"
    ],
    "java.util.abstractqueue.add": [
        "java.util.AbstractQueue.add(E)",
        "java.util.AbstractQueue.add(java.util.AbstractQueue)"
    ],
    "javax.swing.plaf.multi.multirootpaneui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiRootPaneUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "java.lang.byte.valueof": [
        "java.lang.Byte.valueOf(java.lang.String)",
        "java.lang.Byte.valueOf(java.lang.String,int)",
        "java.lang.Byte.valueOf(byte)"
    ],
    "javax.print.attribute.standard.numberup.equals": [
        "javax.print.attribute.standard.NumberUp.equals(java.lang.Object)"
    ],
    "org.omg.dynamicany._dynstructstub.insert_reference": [
        "org.omg.DynamicAny._DynStructStub.insert_reference(org.omg.CORBA.Object)"
    ],
    "java.awt.font.linebreakmeasurer.insertchar": [
        "java.awt.font.LineBreakMeasurer.insertChar(java.text.AttributedCharacterIterator,int)"
    ],
    "javax.lang.model.util.typekindvisitor6.visitnotypeaspackage": [
        "javax.lang.model.util.TypeKindVisitor6.visitNoTypeAsPackage(javax.lang.model.type.NoType,javax.lang.model.util.TypeKindVisitor6)"
    ],
    "javax.swing.text.defaulthighlighter.defaulthighlightpainter.paintlayer": [
        "javax.swing.text.DefaultHighlighter.DefaultHighlightPainter.paintLayer(java.awt.Graphics,int,int,java.awt.Shape,javax.swing.text.JTextComponent,javax.swing.text.View)"
    ],
    "javax.swing.text.tabstop.getalignment": [
        "javax.swing.text.TabStop.getAlignment()"
    ],
    "java.awt.gridbaglayout.getlayoutinfo": [
        "java.awt.GridBagLayout.GetLayoutInfo(java.awt.Container,int)",
        "java.awt.GridBagLayout.getLayoutInfo(java.awt.Container,int)"
    ],
    "javax.swing.text.defaultstyleddocument.elementspec.getdirection": [
        "javax.swing.text.DefaultStyledDocument.ElementSpec.getDirection()"
    ],
    "javax.swing.plaf.textui.damagerange": [
        "javax.swing.plaf.TextUI.damageRange(javax.swing.text.JTextComponent,int,int,javax.swing.text.Position.Bias,javax.swing.text.Position.Bias)",
        "javax.swing.plaf.TextUI.damageRange(javax.swing.text.JTextComponent,int,int)"
    ],
    "javax.imageio.stream.imageoutputstream.writebits": [
        "javax.imageio.stream.ImageOutputStream.writeBits(long,int)"
    ],
    "java.math.biginteger.setbit": [
        "java.math.BigInteger.setBit(int)"
    ],
    "java.io.dataoutputstream.writebytes": [
        "java.io.DataOutputStream.writeBytes(java.lang.String)"
    ],
    "javax.swing.swingworker.getpropertychangesupport": [
        "javax.swing.SwingWorker.getPropertyChangeSupport()"
    ],
    "java.nio.file.filesystems.newfilesystem": [
        "java.nio.file.FileSystems.newFileSystem(java.net.URI,,?>,java.lang.ClassLoader)",
        "java.nio.file.FileSystems.newFileSystem(java.net.URI,,?>)",
        "java.nio.file.FileSystems.newFileSystem(java.nio.file.Path,java.lang.ClassLoader)"
    ],
    "java.util.doublesummarystatistics.accept": [
        "java.util.DoubleSummaryStatistics.accept(double)"
    ],
    "java.util.concurrent.executors.privilegedcallableusingcurrentclassloader": [
        "java.util.concurrent.Executors.privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable<T>)"
    ],
    "javax.sound.sampled.floatcontrol.getvalue": [
        "javax.sound.sampled.FloatControl.getValue()"
    ],
    "java.beans.beancontext.beancontextsupport.getbeancontextpeer": [
        "java.beans.beancontext.BeanContextSupport.getBeanContextPeer()"
    ],
    "javax.swing.jcombobox.getprototypedisplayvalue": [
        "javax.swing.JComboBox.getPrototypeDisplayValue()"
    ],
    "java.time.monthday.withmonth": [
        "java.time.MonthDay.withMonth(int)"
    ],
    "java.time.offsettime.gethour": [
        "java.time.OffsetTime.getHour()"
    ],
    "java.util.function.intunaryoperator.identity": [
        "java.util.function.IntUnaryOperator.identity()"
    ],
    "javax.swing.jtabbedpane.settitleat": [
        "javax.swing.JTabbedPane.setTitleAt(int,java.lang.String)"
    ],
    "java.nio.channels.serversocketchannel.open": [
        "java.nio.channels.ServerSocketChannel.open()"
    ],
    "javax.swing.jslider.setpainttrack": [
        "javax.swing.JSlider.setPaintTrack(boolean)"
    ],
    "java.util.stream.stream.flatmaptoint": [
        "java.util.stream.Stream.flatMapToInt(java.util.function.Function<? super,? extends java.util.stream.IntStream>)"
    ],
    "javax.swing.event.eventlistenerlist.getlistenerlist": [
        "javax.swing.event.EventListenerList.getListenerList()"
    ],
    "java.time.period.minus": [
        "java.time.Period.minus(java.time.temporal.TemporalAmount)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintcheckboxborder": [
        "javax.swing.plaf.synth.SynthPainter.paintCheckBoxBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.text.stylecontext.addattributes": [
        "javax.swing.text.StyleContext.addAttributes(javax.swing.text.AttributeSet,javax.swing.text.AttributeSet)"
    ],
    "java.awt.jobattributes.setfilename": [
        "java.awt.JobAttributes.setFileName(java.lang.String)"
    ],
    "java.util.uuid.equals": [
        "java.util.UUID.equals(java.lang.Object)"
    ],
    "java.time.chrono.japanesedate.now": [
        "java.time.chrono.JapaneseDate.now()",
        "java.time.chrono.JapaneseDate.now(java.time.ZoneId)",
        "java.time.chrono.JapaneseDate.now(java.time.Clock)"
    ],
    "java.sql.resultset.getsqlxml": [
        "java.sql.ResultSet.getSQLXML(int)",
        "java.sql.ResultSet.getSQLXML(java.lang.String)"
    ],
    "java.io.file.getabsolutefile": [
        "java.io.File.getAbsoluteFile()"
    ],
    "javax.swing.plaf.multi.multioptionpaneui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiOptionPaneUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.basic.basictreeui.getleadselectionrow": [
        "javax.swing.plaf.basic.BasicTreeUI.getLeadSelectionRow()"
    ],
    "javax.swing.defaultrowsorter.setmaxsortkeys": [
        "javax.swing.DefaultRowSorter.setMaxSortKeys(int)"
    ],
    "javax.management.timer.timer.postregister": [
        "javax.management.timer.Timer.postRegister(java.lang.Boolean)"
    ],
    "java.util.zip.adler32.reset": [
        "java.util.zip.Adler32.reset()"
    ],
    "javax.swing.defaultbuttonmodel.setenabled": [
        "javax.swing.DefaultButtonModel.setEnabled(boolean)"
    ],
    "java.nio.charset.charsetencoder.implonmalformedinput": [
        "java.nio.charset.CharsetEncoder.implOnMalformedInput(java.nio.charset.CodingErrorAction)"
    ],
    "java.util.properties.storetoxml": [
        "java.util.Properties.storeToXML(java.io.OutputStream,java.lang.String,java.lang.String)",
        "java.util.Properties.storeToXML(java.io.OutputStream,java.lang.String)"
    ],
    "java.time.yearmonth.minusyears": [
        "java.time.YearMonth.minusYears(long)"
    ],
    "javax.swing.jtree.addselectionpaths": [
        "javax.swing.JTree.addSelectionPaths(javax.swing.tree.TreePath[])"
    ],
    "javax.swing.filechooser.filesystemview.isparent": [
        "javax.swing.filechooser.FileSystemView.isParent(java.io.File,java.io.File)"
    ],
    "org.omg.dynamicany._dynvaluestub.set_members": [
        "org.omg.DynamicAny._DynValueStub.set_members(org.omg.DynamicAny.NameValuePair[])"
    ],
    "javax.swing.table.tablerowsorter.getstringconverter": [
        "javax.swing.table.TableRowSorter.getStringConverter()"
    ],
    "org.omg.dynamicany._dynanystub.assign": [
        "org.omg.DynamicAny._DynAnyStub.assign(org.omg.DynamicAny.DynAny)"
    ],
    "java.awt.graphics2d.getpaint": [
        "java.awt.Graphics2D.getPaint()"
    ],
    "javax.swing.plaf.multi.multiseparatorui.getuis": [
        "javax.swing.plaf.multi.MultiSeparatorUI.getUIs()"
    ],
    "java.awt.component.setfocustraversalkeysenabled": [
        "java.awt.Component.setFocusTraversalKeysEnabled(boolean)"
    ],
    "javax.swing.jtable.createdefaultselectionmodel": [
        "javax.swing.JTable.createDefaultSelectionModel()"
    ],
    "javax.xml.parsers.documentbuilder.isxincludeaware": [
        "javax.xml.parsers.DocumentBuilder.isXIncludeAware()"
    ],
    "java.lang.invoke.methodtype.dropparametertypes": [
        "java.lang.invoke.MethodType.dropParameterTypes(int,int)"
    ],
    "org.omg.dynamicany._dynvaluestub.get_dyn_any": [
        "org.omg.DynamicAny._DynValueStub.get_dyn_any()"
    ],
    "javax.swing.text.caret.setmagiccaretposition": [
        "javax.swing.text.Caret.setMagicCaretPosition(java.awt.Point)"
    ],
    "java.lang.string.charat": [
        "java.lang.String.charAt(int)"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.getqueuedreaderthreads": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.getQueuedReaderThreads()"
    ],
    "javax.sql.rowset.spi.syncresolver.setresolvedvalue": [
        "javax.sql.rowset.spi.SyncResolver.setResolvedValue(java.lang.String,java.lang.Object)",
        "javax.sql.rowset.spi.SyncResolver.setResolvedValue(int,java.lang.Object)"
    ],
    "javax.xml.validation.schemafactory.setresourceresolver": [
        "javax.xml.validation.SchemaFactory.setResourceResolver(org.w3c.dom.ls.LSResourceResolver)"
    ],
    "javax.crypto.spec.secretkeyspec.getalgorithm": [
        "javax.crypto.spec.SecretKeySpec.getAlgorithm()"
    ],
    "java.awt.toolkit.loadsystemcolors": [
        "java.awt.Toolkit.loadSystemColors(int[])"
    ],
    "javax.sql.rowset.baserowset.setescapeprocessing": [
        "javax.sql.rowset.BaseRowSet.setEscapeProcessing(boolean)"
    ],
    "javax.print.attribute.standard.destination.getname": [
        "javax.print.attribute.standard.Destination.getName()"
    ],
    "javax.swing.joptionpane.setvalue": [
        "javax.swing.JOptionPane.setValue(java.lang.Object)"
    ],
    "java.sql.databasemetadata.nullplusnonnullisnull": [
        "java.sql.DatabaseMetaData.nullPlusNonNullIsNull()"
    ],
    "javax.swing.swingutilities.convertpointtoscreen": [
        "javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)"
    ],
    "javax.swing.text.html.parser.parser.endtag": [
        "javax.swing.text.html.parser.Parser.endTag(boolean)"
    ],
    "java.awt.button.getactioncommand": [
        "java.awt.Button.getActionCommand()"
    ],
    "java.lang.character.getnumericvalue": [
        "java.lang.Character.getNumericValue(char)"
    ],
    "javax.tools.standardlocation.values": [
        "javax.tools.StandardLocation.values()"
    ],
    "org.xml.sax.helpers.defaulthandler.characters": [
        "org.xml.sax.helpers.DefaultHandler.characters(char[],int,int)"
    ],
    "java.lang.math.decrementexact": [
        "java.lang.Math.decrementExact(int)",
        "java.lang.Math.decrementExact(long)"
    ],
    "javax.swing.defaultrowsorter.getcomparator": [
        "javax.swing.DefaultRowSorter.getComparator(int)"
    ],
    "java.sql.preparedstatement.execute": [
        "java.sql.PreparedStatement.execute()"
    ],
    "java.util.concurrent.threadpoolexecutor.setmaximumpoolsize": [
        "java.util.concurrent.ThreadPoolExecutor.setMaximumPoolSize(int)"
    ],
    "org.xml.sax.ext.defaulthandler2.resolveentity": [
        "org.xml.sax.ext.DefaultHandler2.resolveEntity(java.lang.String,java.lang.String)",
        "org.xml.sax.ext.DefaultHandler2.resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
    ],
    "java.awt.image.raster.createpackedraster": [
        "java.awt.image.Raster.createPackedRaster(int,int,int,int,int,java.awt.Point)",
        "java.awt.image.Raster.createPackedRaster(int,int,int,int[],java.awt.Point)",
        "java.awt.image.Raster.createPackedRaster(java.awt.image.DataBuffer,int,int,int,int[],java.awt.Point)",
        "java.awt.image.Raster.createPackedRaster(java.awt.image.DataBuffer,int,int,int,java.awt.Point)"
    ],
    "javax.sound.midi.midimessage.setmessage": [
        "javax.sound.midi.MidiMessage.setMessage(byte[],int)"
    ],
    "javax.swing.plaf.basic.basicoptionpaneui.addbuttoncomponents": [
        "javax.swing.plaf.basic.BasicOptionPaneUI.addButtonComponents(java.awt.Container,java.lang.Object[],int)"
    ],
    "javax.swing.undo.undomanager.getlimit": [
        "javax.swing.undo.UndoManager.getLimit()"
    ],
    "java.util.concurrent.forkjointask.fork": [
        "java.util.concurrent.ForkJoinTask.fork()"
    ],
    "javax.swing.jlabel.getdisplayedmnemonicindex": [
        "javax.swing.JLabel.getDisplayedMnemonicIndex()"
    ],
    "org.xml.sax.inputsource.getbytestream": [
        "org.xml.sax.InputSource.getByteStream()"
    ],
    "java.time.chrono.chronology.date": [
        "java.time.chrono.Chronology.date(int,int,int)",
        "java.time.chrono.Chronology.date(java.time.temporal.TemporalAccessor)",
        "java.time.chrono.Chronology.date(java.time.chrono.Era,int,int,int)"
    ],
    "java.time.instant.ofepochmilli": [
        "java.time.Instant.ofEpochMilli(long)"
    ],
    "javax.sql.rowset.setreadonly": [
        "javax.sql.RowSet.setReadOnly(boolean)"
    ],
    "javax.swing.plaf.multi.multiseparatorui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiSeparatorUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.basic.basicfilechooserui.getdialogtitle": [
        "javax.swing.plaf.basic.BasicFileChooserUI.getDialogTitle(javax.swing.JFileChooser)"
    ],
    "java.awt.gridbaglayout.getlayoutdimensions": [
        "java.awt.GridBagLayout.getLayoutDimensions()"
    ],
    "java.awt.geom.quadcurve2d.getctrlpt": [
        "java.awt.geom.QuadCurve2D.getCtrlPt()"
    ],
    "java.text.fieldposition.tostring": [
        "java.text.FieldPosition.toString()"
    ],
    "java.util.treeset.subset": [
        "java.util.TreeSet.subSet(E,E)",
        "java.util.TreeSet.subSet(E,boolean,E,boolean)"
    ],
    "java.awt.window.getwindowfocuslisteners": [
        "java.awt.Window.getWindowFocusListeners()"
    ],
    "javax.imageio.imagewriter.removeiiowriteprogresslistener": [
        "javax.imageio.ImageWriter.removeIIOWriteProgressListener(javax.imageio.event.IIOWriteProgressListener)"
    ],
    "org.omg.portableserver.poaoperations.create_request_processing_policy": [
        "org.omg.PortableServer.POAOperations.create_request_processing_policy(org.omg.PortableServer.RequestProcessingPolicyValue)"
    ],
    "java.math.bigdecimal.ulp": [
        "java.math.BigDecimal.ulp()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintviewportborder": [
        "javax.swing.plaf.synth.SynthPainter.paintViewportBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.text.html.htmldocument.insertafterstart": [
        "javax.swing.text.html.HTMLDocument.insertAfterStart(javax.swing.text.Element,java.lang.String)"
    ],
    "javax.imageio.imagewriteparam.setprogressivemode": [
        "javax.imageio.ImageWriteParam.setProgressiveMode(int)"
    ],
    "javax.lang.model.util.simpleelementvisitor6.visitvariable": [
        "javax.lang.model.util.SimpleElementVisitor6.visitVariable(javax.lang.model.element.VariableElement,javax.lang.model.util.SimpleElementVisitor6)"
    ],
    "org.omg.dynamicany._dynsequencestub.get_ulonglong": [
        "org.omg.DynamicAny._DynSequenceStub.get_ulonglong()"
    ],
    "java.time.zoneddatetime.range": [
        "java.time.ZonedDateTime.range(java.time.temporal.TemporalField)"
    ],
    "java.text.decimalformatsymbols.getcurrencysymbol": [
        "java.text.DecimalFormatSymbols.getCurrencySymbol()"
    ],
    "org.ietf.jgss.gsscontext.getwrapsizelimit": [
        "org.ietf.jgss.GSSContext.getWrapSizeLimit(int,boolean,int)"
    ],
    "java.beans.propertychangesupport.firepropertychange": [
        "java.beans.PropertyChangeSupport.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
        "java.beans.PropertyChangeSupport.firePropertyChange(java.lang.String,boolean,boolean)",
        "java.beans.PropertyChangeSupport.firePropertyChange(java.beans.PropertyChangeEvent)",
        "java.beans.PropertyChangeSupport.firePropertyChange(java.lang.String,int,int)"
    ],
    "javax.activation.commandmap.setdefaultcommandmap": [
        "javax.activation.CommandMap.setDefaultCommandMap(javax.activation.CommandMap)"
    ],
    "java.io.objectinputstream.resolveclass": [
        "java.io.ObjectInputStream.resolveClass(java.io.ObjectStreamClass)"
    ],
    "java.text.messageformat.parseobject": [
        "java.text.MessageFormat.parseObject(java.lang.String,java.text.ParsePosition)"
    ],
    "org.omg.corba.dataoutputstream.write_char": [
        "org.omg.CORBA.DataOutputStream.write_char(char)"
    ],
    "java.awt.jobattributes.setsides": [
        "java.awt.JobAttributes.setSides(java.awt.JobAttributes.SidesType)"
    ],
    "javax.swing.plaf.synth.synthprogressbarui.paintborder": [
        "javax.swing.plaf.synth.SynthProgressBarUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.text.decimalformat.setmaximumintegerdigits": [
        "java.text.DecimalFormat.setMaximumIntegerDigits(int)"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.paintcurrentvalue": [
        "javax.swing.plaf.basic.BasicComboBoxUI.paintCurrentValue(java.awt.Graphics,java.awt.Rectangle,boolean)"
    ],
    "javax.management.openmbean.openmbeanparameterinfosupport.getlegalvalues": [
        "javax.management.openmbean.OpenMBeanParameterInfoSupport.getLegalValues()"
    ],
    "org.omg.dynamicany._dynarraystub.copy": [
        "org.omg.DynamicAny._DynArrayStub.copy()"
    ],
    "javax.sound.midi.midichannel.setsolo": [
        "javax.sound.midi.MidiChannel.setSolo(boolean)"
    ],
    "java.awt.image.imageproducer.isconsumer": [
        "java.awt.image.ImageProducer.isConsumer(java.awt.image.ImageConsumer)"
    ],
    "java.sql.databasemetadata.supportsexpressionsinorderby": [
        "java.sql.DatabaseMetaData.supportsExpressionsInOrderBy()"
    ],
    "java.time.period.get": [
        "java.time.Period.get(java.time.temporal.TemporalUnit)"
    ],
    "javax.naming.name.addall": [
        "javax.naming.Name.addAll(int,javax.naming.Name)",
        "javax.naming.Name.addAll(javax.naming.Name)"
    ],
    "java.security.codesource.hashcode": [
        "java.security.CodeSource.hashCode()"
    ],
    "java.rmi.activation.activationsystem.unregistergroup": [
        "java.rmi.activation.ActivationSystem.unregisterGroup(java.rmi.activation.ActivationGroupID)"
    ],
    "java.time.format.decimalstyle.tostring": [
        "java.time.format.DecimalStyle.toString()"
    ],
    "java.awt.image.samplemodel.setpixels": [
        "java.awt.image.SampleModel.setPixels(int,int,int,int,double[],java.awt.image.DataBuffer)",
        "java.awt.image.SampleModel.setPixels(int,int,int,int,float[],java.awt.image.DataBuffer)",
        "java.awt.image.SampleModel.setPixels(int,int,int,int,int[],java.awt.image.DataBuffer)"
    ],
    "java.time.format.datetimeformatter.parsedexcessdays": [
        "java.time.format.DateTimeFormatter.parsedExcessDays()"
    ],
    "javax.swing.plaf.basic.basictreeui.startediting": [
        "javax.swing.plaf.basic.BasicTreeUI.startEditing(javax.swing.tree.TreePath,java.awt.event.MouseEvent)"
    ],
    "javax.net.ssl.snihostname.createsnimatcher": [
        "javax.net.ssl.SNIHostName.createSNIMatcher(java.lang.String)"
    ],
    "java.beans.eventsetdescriptor.getgetlistenermethod": [
        "java.beans.EventSetDescriptor.getGetListenerMethod()"
    ],
    "javax.swing.text.jtextcomponent.print": [
        "javax.swing.text.JTextComponent.print(java.text.MessageFormat,java.text.MessageFormat)",
        "javax.swing.text.JTextComponent.print(java.text.MessageFormat,java.text.MessageFormat,boolean,javax.print.PrintService,javax.print.attribute.PrintRequestAttributeSet,boolean)",
        "javax.swing.text.JTextComponent.print()"
    ],
    "java.nio.longbuffer.asreadonlybuffer": [
        "java.nio.LongBuffer.asReadOnlyBuffer()"
    ],
    "javax.naming.namingexception.getresolvedname": [
        "javax.naming.NamingException.getResolvedName()"
    ],
    "javax.swing.table.tablecolumn.setwidth": [
        "javax.swing.table.TableColumn.setWidth(int)"
    ],
    "javax.swing.jmenuitem.removemenudragmouselistener": [
        "javax.swing.JMenuItem.removeMenuDragMouseListener(javax.swing.event.MenuDragMouseListener)"
    ],
    "javax.swing.jtree.getmaxselectionrow": [
        "javax.swing.JTree.getMaxSelectionRow()"
    ],
    "javax.xml.transform.transformerfactory.newinstance": [
        "javax.xml.transform.TransformerFactory.newInstance()",
        "javax.xml.transform.TransformerFactory.newInstance(java.lang.String,java.lang.ClassLoader)"
    ],
    "javax.xml.validation.typeinfoprovider.getelementtypeinfo": [
        "javax.xml.validation.TypeInfoProvider.getElementTypeInfo()"
    ],
    "java.util.concurrent.completablefuture.get": [
        "java.util.concurrent.CompletableFuture.get()"
    ],
    "javax.sound.sampled.clip.setframeposition": [
        "javax.sound.sampled.Clip.setFramePosition(int)"
    ],
    "javax.naming.nameclasspair.setclassname": [
        "javax.naming.NameClassPair.setClassName(java.lang.String)"
    ],
    "java.awt.component.gettoolkit": [
        "java.awt.Component.getToolkit()"
    ],
    "javax.swing.jpopupmenu.islightweightpopupenabled": [
        "javax.swing.JPopupMenu.isLightWeightPopupEnabled()"
    ],
    "javax.activation.datacontenthandler.writeto": [
        "javax.activation.DataContentHandler.writeTo(java.lang.Object,java.lang.String,java.io.OutputStream)"
    ],
    "java.io.objectinputstream.readfloat": [
        "java.io.ObjectInputStream.readFloat()"
    ],
    "java.lang.integer.reverse": [
        "java.lang.Integer.reverse(int)"
    ],
    "org.omg.corba.exceptionlist.add": [
        "org.omg.CORBA.ExceptionList.add(org.omg.CORBA.TypeCode)"
    ],
    "javax.swing.jscrollbar.getmodel": [
        "javax.swing.JScrollBar.getModel()"
    ],
    "java.util.stream.doublestream.foreach": [
        "java.util.stream.DoubleStream.forEach(java.util.function.DoubleConsumer)"
    ],
    "javax.sound.midi.spi.midifilereader.getmidifileformat": [
        "javax.sound.midi.spi.MidiFileReader.getMidiFileFormat(java.net.URL)",
        "javax.sound.midi.spi.MidiFileReader.getMidiFileFormat(java.io.File)",
        "javax.sound.midi.spi.MidiFileReader.getMidiFileFormat(java.io.InputStream)"
    ],
    "org.xml.sax.entityresolver.resolveentity": [
        "org.xml.sax.EntityResolver.resolveEntity(java.lang.String,java.lang.String)"
    ],
    "javax.swing.jtextpane.setdocument": [
        "javax.swing.JTextPane.setDocument(javax.swing.text.Document)"
    ],
    "javax.swing.defaultsingleselectionmodel.removechangelistener": [
        "javax.swing.DefaultSingleSelectionModel.removeChangeListener(javax.swing.event.ChangeListener)"
    ],
    "java.time.offsetdatetime.withdayofmonth": [
        "java.time.OffsetDateTime.withDayOfMonth(int)"
    ],
    "java.lang.management.threadmxbean.getthreadusertime": [
        "java.lang.management.ThreadMXBean.getThreadUserTime(long)"
    ],
    "java.util.concurrent.scheduledthreadpoolexecutor.getexecuteexistingdelayedtasksaftershutdownpolicy": [
        "java.util.concurrent.ScheduledThreadPoolExecutor.getExecuteExistingDelayedTasksAfterShutdownPolicy()"
    ],
    "org.omg.dynamicany._dynfixedstub.get_dyn_any": [
        "org.omg.DynamicAny._DynFixedStub.get_dyn_any()"
    ],
    "java.util.navigablemap.navigablekeyset": [
        "java.util.NavigableMap.navigableKeySet()"
    ],
    "java.awt.window.setlocationrelativeto": [
        "java.awt.Window.setLocationRelativeTo(java.awt.Component)"
    ],
    "java.awt.flowlayout.setalignment": [
        "java.awt.FlowLayout.setAlignment(int)"
    ],
    "java.awt.toolkit.areextramousebuttonsenabled": [
        "java.awt.Toolkit.areExtraMouseButtonsEnabled()"
    ],
    "java.awt.displaymode.getwidth": [
        "java.awt.DisplayMode.getWidth()"
    ],
    "org.omg.cosnaming._namingcontextextstub.bind_new_context": [
        "org.omg.CosNaming._NamingContextExtStub.bind_new_context(org.omg.CosNaming.NameComponent[])"
    ],
    "org.omg.dynamicany._dynunionstub.set_to_default_member": [
        "org.omg.DynamicAny._DynUnionStub.set_to_default_member()"
    ],
    "java.nio.file.filestore.type": [
        "java.nio.file.FileStore.type()"
    ],
    "java.sql.databasemetadata.supportsgroupbybeyondselect": [
        "java.sql.DatabaseMetaData.supportsGroupByBeyondSelect()"
    ],
    "org.omg.dynamicany._dynanystub.next": [
        "org.omg.DynamicAny._DynAnyStub.next()"
    ],
    "org.omg.cosnaming.namingcontextoperations.destroy": [
        "org.omg.CosNaming.NamingContextOperations.destroy()"
    ],
    "java.awt.datatransfer.dataflavor.getmimetype": [
        "java.awt.datatransfer.DataFlavor.getMimeType()"
    ],
    "java.util.concurrent.copyonwritearraylist.size": [
        "java.util.concurrent.CopyOnWriteArrayList.size()"
    ],
    "java.lang.double.valueof": [
        "java.lang.Double.valueOf(double)",
        "java.lang.Double.valueOf(java.lang.String)"
    ],
    "org.omg.dynamicany._dynenumstub.copy": [
        "org.omg.DynamicAny._DynEnumStub.copy()"
    ],
    "javax.swing.jtable.getcolumncount": [
        "javax.swing.JTable.getColumnCount()"
    ],
    "javax.swing.jslider.setpaintticks": [
        "javax.swing.JSlider.setPaintTicks(boolean)"
    ],
    "java.util.collections.min": [
        "java.util.Collections.min(java.util.Collection<? extends T>)",
        "java.util.Collections.min(java.util.Collection<? extends T>,java.util.Comparator<? super T>)"
    ],
    "java.util.concurrent.scheduledthreadpoolexecutor.shutdown": [
        "java.util.concurrent.ScheduledThreadPoolExecutor.shutdown()"
    ],
    "javax.management.monitor.gaugemonitormbean.getdifferencemode": [
        "javax.management.monitor.GaugeMonitorMBean.getDifferenceMode()"
    ],
    "javax.script.scriptcontext.getscopes": [
        "javax.script.ScriptContext.getScopes()"
    ],
    "java.awt.alphacomposite.hashcode": [
        "java.awt.AlphaComposite.hashCode()"
    ],
    "java.awt.image.componentsamplemodel.getscanlinestride": [
        "java.awt.image.ComponentSampleModel.getScanlineStride()"
    ],
    "java.net.cookiestore.getcookies": [
        "java.net.CookieStore.getCookies()"
    ],
    "java.nio.file.standardopenoption.valueof": [
        "java.nio.file.StandardOpenOption.valueOf(java.lang.String)"
    ],
    "javax.swing.grouplayout.gethonorsvisibility": [
        "javax.swing.GroupLayout.getHonorsVisibility()"
    ],
    "org.w3c.dom.document.createelement": [
        "org.w3c.dom.Document.createElement(java.lang.String)"
    ],
    "javax.swing.plaf.nimbus.nimbusstyle.getpainter": [
        "javax.swing.plaf.nimbus.NimbusStyle.getPainter(javax.swing.plaf.synth.SynthContext)"
    ],
    "java.util.concurrent.concurrenthashmap.foreach": [
        "java.util.concurrent.ConcurrentHashMap.forEach(java.util.function.BiConsumer<? super,? super V>)"
    ],
    "java.util.concurrent.priorityblockingqueue.put": [
        "java.util.concurrent.PriorityBlockingQueue.put(E)",
        "java.util.concurrent.PriorityBlockingQueue.put(java.util.concurrent.PriorityBlockingQueue)"
    ],
    "java.time.duration.tomillis": [
        "java.time.Duration.toMillis()"
    ],
    "java.util.formatter.bigdecimallayoutform.valueof": [
        "java.util.Formatter.BigDecimalLayoutForm.valueOf(java.lang.String)"
    ],
    "javax.swing.text.gapcontent.insertstring": [
        "javax.swing.text.GapContent.insertString(int,java.lang.String)"
    ],
    "java.awt.texturepaint.createcontext": [
        "java.awt.TexturePaint.createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)"
    ],
    "javax.swing.jinternalframe.jdesktopicon.getui": [
        "javax.swing.JInternalFrame.JDesktopIcon.getUI()"
    ],
    "org.omg.corba.portable.outputstream.write_float_array": [
        "org.omg.CORBA.portable.OutputStream.write_float_array(float[],int,int)"
    ],
    "org.omg.cosnaming._namingcontextstub.list": [
        "org.omg.CosNaming._NamingContextStub.list(int,org.omg.CosNaming.BindingListHolder,org.omg.CosNaming.BindingIteratorHolder)"
    ],
    "java.security.algorithmparametergenerator.init": [
        "java.security.AlgorithmParameterGenerator.init(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
        "java.security.AlgorithmParameterGenerator.init(java.security.spec.AlgorithmParameterSpec)",
        "java.security.AlgorithmParameterGenerator.init(int)",
        "java.security.AlgorithmParameterGenerator.init(int,java.security.SecureRandom)"
    ],
    "java.awt.dnd.dragsourcedropevent.getdropaction": [
        "java.awt.dnd.DragSourceDropEvent.getDropAction()"
    ],
    "javax.imageio.metadata.iiometadata.getextrametadataformatnames": [
        "javax.imageio.metadata.IIOMetadata.getExtraMetadataFormatNames()"
    ],
    "java.util.scanner.close": [
        "java.util.Scanner.close()"
    ],
    "javax.net.ssl.sslsessionbindingevent.getsession": [
        "javax.net.ssl.SSLSessionBindingEvent.getSession()"
    ],
    "javax.swing.undo.undomanager.addedit": [
        "javax.swing.undo.UndoManager.addEdit(javax.swing.undo.UndoableEdit)"
    ],
    "java.awt.image.bufferedimage.gettilewidth": [
        "java.awt.image.BufferedImage.getTileWidth()"
    ],
    "javax.imageio.metadata.iiometadata.getastree": [
        "javax.imageio.metadata.IIOMetadata.getAsTree(java.lang.String)"
    ],
    "java.awt.image.colormodel.hasalpha": [
        "java.awt.image.ColorModel.hasAlpha()"
    ],
    "java.awt.image.memoryimagesource.startproduction": [
        "java.awt.image.MemoryImageSource.startProduction(java.awt.image.ImageConsumer)"
    ],
    "org.omg.dynamicany._dynarraystub.get_long": [
        "org.omg.DynamicAny._DynArrayStub.get_long()"
    ],
    "java.security.cert.pkixparameters.ispolicymappinginhibited": [
        "java.security.cert.PKIXParameters.isPolicyMappingInhibited()"
    ],
    "java.time.zone.zonerulesprovider.refresh": [
        "java.time.zone.ZoneRulesProvider.refresh()"
    ],
    "java.util.stream.intstream.filter": [
        "java.util.stream.IntStream.filter(java.util.function.IntPredicate)"
    ],
    "javax.management.openmbean.opentype.gettypename": [
        "javax.management.openmbean.OpenType.getTypeName()"
    ],
    "java.util.navigablemap.headmap": [
        "java.util.NavigableMap.headMap(K)",
        "java.util.NavigableMap.headMap(java.util.NavigableMap)"
    ],
    "javax.swing.plaf.multi.multicolorchooserui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiColorChooserUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "java.lang.long.divideunsigned": [
        "java.lang.Long.divideUnsigned(long,long)"
    ],
    "javax.management.monitor.gaugemonitor.getnotificationinfo": [
        "javax.management.monitor.GaugeMonitor.getNotificationInfo()"
    ],
    "java.lang.classloader.findsystemclass": [
        "java.lang.ClassLoader.findSystemClass(java.lang.String)"
    ],
    "org.omg.dynamicany._dynstructstub.assign": [
        "org.omg.DynamicAny._DynStructStub.assign(org.omg.DynamicAny.DynAny)"
    ],
    "javax.security.sasl.saslclient.evaluatechallenge": [
        "javax.security.sasl.SaslClient.evaluateChallenge(byte[])"
    ],
    "java.lang.invoke.methodtype.tomethoddescriptorstring": [
        "java.lang.invoke.MethodType.toMethodDescriptorString()"
    ],
    "java.util.function.todoublefunction.applyasdouble": [
        "java.util.function.ToDoubleFunction.applyAsDouble(T)",
        "java.util.function.ToDoubleFunction.applyAsDouble(java.util.function.ToDoubleFunction)"
    ],
    "javax.swing.plaf.basic.basicdesktoppaneui.uninstalllisteners": [
        "javax.swing.plaf.basic.BasicDesktopPaneUI.uninstallListeners()"
    ],
    "javax.swing.plaf.metal.metalbuttonui.update": [
        "javax.swing.plaf.metal.MetalButtonUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.nio.channels.asynchronoussocketchannel.shutdowninput": [
        "java.nio.channels.AsynchronousSocketChannel.shutdownInput()"
    ],
    "java.util.observable.notifyobservers": [
        "java.util.Observable.notifyObservers(java.lang.Object)",
        "java.util.Observable.notifyObservers()"
    ],
    "java.io.chararrayreader.read": [
        "java.io.CharArrayReader.read()",
        "java.io.CharArrayReader.read(char[],int,int)"
    ],
    "javax.lang.model.element.executableelement.gettypeparameters": [
        "javax.lang.model.element.ExecutableElement.getTypeParameters()"
    ],
    "java.awt.geom.pathiterator.getwindingrule": [
        "java.awt.geom.PathIterator.getWindingRule()"
    ],
    "javax.management.mbeanserverdelegatembean.getspecificationname": [
        "javax.management.MBeanServerDelegateMBean.getSpecificationName()"
    ],
    "java.awt.print.printerjob.getcopies": [
        "java.awt.print.PrinterJob.getCopies()"
    ],
    "java.util.stream.longstream.map": [
        "java.util.stream.LongStream.map(java.util.function.LongUnaryOperator)"
    ],
    "java.util.stream.longstream.reduce": [
        "java.util.stream.LongStream.reduce(long,java.util.function.LongBinaryOperator)",
        "java.util.stream.LongStream.reduce(java.util.function.LongBinaryOperator)"
    ],
    "javax.print.attribute.standard.printquality.getenumvaluetable": [
        "javax.print.attribute.standard.PrintQuality.getEnumValueTable()"
    ],
    "javax.net.ssl.sslengine.setenabledprotocols": [
        "javax.net.ssl.SSLEngine.setEnabledProtocols(java.lang.String[])",
        "javax.net.ssl.SSLEngine.setEnabledProtocols(java.lang.String)"
    ],
    "java.lang.float.max": [
        "java.lang.Float.max(float,float)"
    ],
    "java.lang.character.charvalue": [
        "java.lang.Character.charValue()"
    ],
    "java.util.stream.intstream.builder.accept": [
        "java.util.stream.IntStream.Builder.accept(int)"
    ],
    "javax.management.remote.jmxprincipal.hashcode": [
        "javax.management.remote.JMXPrincipal.hashCode()"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.error": [
        "org.xml.sax.helpers.XMLFilterImpl.error(org.xml.sax.SAXParseException)"
    ],
    "javax.print.attribute.integersyntax.tostring": [
        "javax.print.attribute.IntegerSyntax.toString()"
    ],
    "java.util.treeset.tailset": [
        "java.util.TreeSet.tailSet(E)"
    ],
    "javax.swing.text.html.parser.parser.markfirsttime": [
        "javax.swing.text.html.parser.Parser.markFirstTime(javax.swing.text.html.parser.Element)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getsystemtextfont": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getSystemTextFont()"
    ],
    "javax.swing.transferhandler.exportasdrag": [
        "javax.swing.TransferHandler.exportAsDrag(javax.swing.JComponent,java.awt.event.InputEvent,int)"
    ],
    "java.io.randomaccessfile.readdouble": [
        "java.io.RandomAccessFile.readDouble()"
    ],
    "java.net.proxy.equals": [
        "java.net.Proxy.equals(java.lang.Object)"
    ],
    "javax.sql.rowset.setmaxfieldsize": [
        "javax.sql.RowSet.setMaxFieldSize(int)"
    ],
    "java.util.locale.category.values": [
        "java.util.Locale.Category.values()"
    ],
    "java.time.zoneoffset.getid": [
        "java.time.ZoneOffset.getId()"
    ],
    "javax.swing.box.createverticalbox": [
        "javax.swing.Box.createVerticalBox()"
    ],
    "javax.net.ssl.sslcontext.getprovider": [
        "javax.net.ssl.SSLContext.getProvider()"
    ],
    "javax.swing.abstractaction.addpropertychangelistener": [
        "javax.swing.AbstractAction.addPropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "java.awt.keyboardfocusmanager.setglobalcurrentfocuscycleroot": [
        "java.awt.KeyboardFocusManager.setGlobalCurrentFocusCycleRoot(java.awt.Container)"
    ],
    "javax.swing.plaf.synth.synthdesktoppaneui.createui": [
        "javax.swing.plaf.synth.SynthDesktopPaneUI.createUI(javax.swing.JComponent)"
    ],
    "javax.swing.jfilechooser.showopendialog": [
        "javax.swing.JFileChooser.showOpenDialog(java.awt.Component)"
    ],
    "java.awt.geom.quadcurve2d.double.setcurve": [
        "java.awt.geom.QuadCurve2D.Double.setCurve(double,double,double,double,double,double)"
    ],
    "java.net.socketimpl.getport": [
        "java.net.SocketImpl.getPort()"
    ],
    "java.sql.databasemetadata.getschemas": [
        "java.sql.DatabaseMetaData.getSchemas(java.lang.String,java.lang.String)",
        "java.sql.DatabaseMetaData.getSchemas()"
    ],
    "java.awt.trayicon.gettooltip": [
        "java.awt.TrayIcon.getToolTip()"
    ],
    "javax.swing.jtable.geteditingcolumn": [
        "javax.swing.JTable.getEditingColumn()"
    ],
    "javax.swing.table.jtableheader.setdraggeddistance": [
        "javax.swing.table.JTableHeader.setDraggedDistance(int)"
    ],
    "java.io.objectoutputstream.writestreamheader": [
        "java.io.ObjectOutputStream.writeStreamHeader()"
    ],
    "javax.swing.plaf.layerui.processcomponentevent": [
        "javax.swing.plaf.LayerUI.processComponentEvent(java.awt.event.ComponentEvent,javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)"
    ],
    "java.net.urlconnection.connect": [
        "java.net.URLConnection.connect()"
    ],
    "java.awt.graphics.drawroundrect": [
        "java.awt.Graphics.drawRoundRect(int,int,int,int,int,int)"
    ],
    "java.time.yearmonth.lengthofyear": [
        "java.time.YearMonth.lengthOfYear()"
    ],
    "java.awt.dnd.draggesturelistener.draggesturerecognized": [
        "java.awt.dnd.DragGestureListener.dragGestureRecognized(java.awt.dnd.DragGestureEvent)"
    ],
    "java.nio.charset.charsetencoder.maxbytesperchar": [
        "java.nio.charset.CharsetEncoder.maxBytesPerChar()"
    ],
    "org.w3c.dom.node.getbaseuri": [
        "org.w3c.dom.Node.getBaseURI()"
    ],
    "javax.imageio.imageio.getimagetranscoders": [
        "javax.imageio.ImageIO.getImageTranscoders(javax.imageio.ImageReader,javax.imageio.ImageWriter)"
    ],
    "javax.swing.joptionpane.showinternalinputdialog": [
        "javax.swing.JOptionPane.showInternalInputDialog(java.awt.Component,java.lang.Object,java.lang.String,int)",
        "javax.swing.JOptionPane.showInternalInputDialog(java.awt.Component,java.lang.Object)",
        "javax.swing.JOptionPane.showInternalInputDialog(java.awt.Component,java.lang.Object,java.lang.String,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)"
    ],
    "org.omg.corba.orb.create_value_tc": [
        "org.omg.CORBA.ORB.create_value_tc(java.lang.String,java.lang.String,short,org.omg.CORBA.TypeCode,org.omg.CORBA.ValueMember[])"
    ],
    "java.lang.throwable.addsuppressed": [
        "java.lang.Throwable.addSuppressed(java.lang.Throwable)"
    ],
    "java.time.duration.plusdays": [
        "java.time.Duration.plusDays(long)"
    ],
    "javax.sound.midi.track.ticks": [
        "javax.sound.midi.Track.ticks()"
    ],
    "javax.swing.jframe.remove": [
        "javax.swing.JFrame.remove(java.awt.Component)"
    ],
    "javax.swing.plaf.basic.basiclistui.getrowheight": [
        "javax.swing.plaf.basic.BasicListUI.getRowHeight(int)"
    ],
    "java.util.concurrent.countedcompleter.exec": [
        "java.util.concurrent.CountedCompleter.exec()"
    ],
    "java.awt.font.imagegraphicattribute.equals": [
        "java.awt.font.ImageGraphicAttribute.equals(java.lang.Object)",
        "java.awt.font.ImageGraphicAttribute.equals(java.awt.font.ImageGraphicAttribute)"
    ],
    "javax.swing.uimanager.getlookandfeel": [
        "javax.swing.UIManager.getLookAndFeel()"
    ],
    "java.net.filenamemap.getcontenttypefor": [
        "java.net.FileNameMap.getContentTypeFor(java.lang.String)"
    ],
    "org.omg.dynamicany._dynenumstub.current_component": [
        "org.omg.DynamicAny._DynEnumStub.current_component()"
    ],
    "javax.swing.plaf.multi.multimenuitemui.uninstallui": [
        "javax.swing.plaf.multi.MultiMenuItemUI.uninstallUI(javax.swing.JComponent)"
    ],
    "java.awt.jobattributes.tostring": [
        "java.awt.JobAttributes.toString()"
    ],
    "java.sql.databasemetadata.getbestrowidentifier": [
        "java.sql.DatabaseMetaData.getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)"
    ],
    "javax.management.timer.timermbean.getfixedrate": [
        "javax.management.timer.TimerMBean.getFixedRate(java.lang.Integer)"
    ],
    "java.io.printstream.close": [
        "java.io.PrintStream.close()"
    ],
    "javax.swing.text.html.imageview.gettooltiptext": [
        "javax.swing.text.html.ImageView.getToolTipText(float,float,java.awt.Shape)"
    ],
    "java.lang.reflect.executable.getparametertypes": [
        "java.lang.reflect.Executable.getParameterTypes()"
    ],
    "java.time.monthday.atyear": [
        "java.time.MonthDay.atYear(int)"
    ],
    "java.time.chrono.minguoera.valueof": [
        "java.time.chrono.MinguoEra.valueOf(java.lang.String)"
    ],
    "java.nio.channels.socketchannel.validops": [
        "java.nio.channels.SocketChannel.validOps()"
    ],
    "java.rmi.server.rmiclassloaderspi.getclassannotation": [
        "java.rmi.server.RMIClassLoaderSpi.getClassAnnotation(java.lang.Class<?>)"
    ],
    "javax.print.attribute.standard.datetimeatcreation.getcategory": [
        "javax.print.attribute.standard.DateTimeAtCreation.getCategory()"
    ],
    "java.awt.image.bufferedimage.removetileobserver": [
        "java.awt.image.BufferedImage.removeTileObserver(java.awt.image.TileObserver)"
    ],
    "java.util.zip.deflateroutputstream.finish": [
        "java.util.zip.DeflaterOutputStream.finish()"
    ],
    "java.awt.font.glyphvector.getglyphpositions": [
        "java.awt.font.GlyphVector.getGlyphPositions(int,int,float[])"
    ],
    "java.awt.gridbaglayout.setconstraints": [
        "java.awt.GridBagLayout.setConstraints(java.awt.Component,java.awt.GridBagConstraints)"
    ],
    "java.awt.dnd.dragsource.startdrag": [
        "java.awt.dnd.DragSource.startDrag(java.awt.dnd.DragGestureEvent,java.awt.Cursor,java.awt.datatransfer.Transferable,java.awt.dnd.DragSourceListener)",
        "java.awt.dnd.DragSource.startDrag(java.awt.dnd.DragGestureEvent,java.awt.Cursor,java.awt.datatransfer.Transferable,java.awt.dnd.DragSourceListener,java.awt.datatransfer.FlavorMap)",
        "java.awt.dnd.DragSource.startDrag(java.awt.dnd.DragGestureEvent,java.awt.Cursor,java.awt.Image,java.awt.Point,java.awt.datatransfer.Transferable,java.awt.dnd.DragSourceListener)",
        "java.awt.dnd.DragSource.startDrag(java.awt.dnd.DragGestureEvent,java.awt.Cursor,java.awt.Image,java.awt.Point,java.awt.datatransfer.Transferable,java.awt.dnd.DragSourceListener,java.awt.datatransfer.FlavorMap)"
    ],
    "javax.swing.plaf.synth.synthtooltipui.propertychange": [
        "javax.swing.plaf.synth.SynthToolTipUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "javax.swing.spring.width": [
        "javax.swing.Spring.width(java.awt.Component)"
    ],
    "java.sql.callablestatement.getdouble": [
        "java.sql.CallableStatement.getDouble(java.lang.String)",
        "java.sql.CallableStatement.getDouble(int)"
    ],
    "java.nio.channels.spi.abstractselector.begin": [
        "java.nio.channels.spi.AbstractSelector.begin()"
    ],
    "java.beans.beancontext.beancontextevent.getpropagatedfrom": [
        "java.beans.beancontext.BeanContextEvent.getPropagatedFrom()"
    ],
    "javax.xml.soap.soapfactory.createfault": [
        "javax.xml.soap.SOAPFactory.createFault()",
        "javax.xml.soap.SOAPFactory.createFault(java.lang.String,javax.xml.namespace.QName)"
    ],
    "java.net.datagramsocket.setreceivebuffersize": [
        "java.net.DatagramSocket.setReceiveBufferSize(int)"
    ],
    "javax.sound.sampled.audioinputstream.read": [
        "javax.sound.sampled.AudioInputStream.read(byte[])",
        "javax.sound.sampled.AudioInputStream.read()",
        "javax.sound.sampled.AudioInputStream.read(byte[],int,int)"
    ],
    "javax.swing.plaf.synth.synthtextareaui.paint": [
        "javax.swing.plaf.synth.SynthTextAreaUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)"
    ],
    "java.security.keystore.trustedcertificateentry.gettrustedcertificate": [
        "java.security.KeyStore.TrustedCertificateEntry.getTrustedCertificate()"
    ],
    "javax.xml.soap.soappart.setmimeheader": [
        "javax.xml.soap.SOAPPart.setMimeHeader(java.lang.String,java.lang.String)"
    ],
    "java.io.objectstreamfield.gettypecode": [
        "java.io.ObjectStreamField.getTypeCode()"
    ],
    "javax.xml.bind.datatypeconverter.parsefloat": [
        "javax.xml.bind.DatatypeConverter.parseFloat(java.lang.String)"
    ],
    "javax.swing.rowfilter.notfilter": [
        "javax.swing.RowFilter.notFilter(,I>)"
    ],
    "java.util.concurrent.atomic.atomicreferencefieldupdater.get": [
        "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.get(java.util.concurrent.atomic.AtomicReferenceFieldUpdater)",
        "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.get(T)"
    ],
    "javax.imageio.imagewriteparam.getcompressionmode": [
        "javax.imageio.ImageWriteParam.getCompressionMode()"
    ],
    "javax.xml.ws.endpoint.create": [
        "javax.xml.ws.Endpoint.create(java.lang.Object)",
        "javax.xml.ws.Endpoint.create(java.lang.String,java.lang.Object,javax.xml.ws.WebServiceFeature...)",
        "javax.xml.ws.Endpoint.create(java.lang.String,java.lang.Object)",
        "javax.xml.ws.Endpoint.create(java.lang.Object,javax.xml.ws.WebServiceFeature...)"
    ],
    "java.awt.image.raster.createchild": [
        "java.awt.image.Raster.createChild(int,int,int,int,int,int,int[])"
    ],
    "java.time.localtime.withhour": [
        "java.time.LocalTime.withHour(int)"
    ],
    "javax.swing.jcombobox.getaction": [
        "javax.swing.JComboBox.getAction()"
    ],
    "java.util.concurrent.concurrentskiplistmap.getordefault": [
        "java.util.concurrent.ConcurrentSkipListMap.getOrDefault(java.lang.Object,V)",
        "java.util.concurrent.ConcurrentSkipListMap.getOrDefault(java.lang.Object,java.util.concurrent.ConcurrentSkipListMap)"
    ],
    "java.io.file.canwrite": [
        "java.io.File.canWrite()"
    ],
    "java.lang.strictmath.getexponent": [
        "java.lang.StrictMath.getExponent(float)"
    ],
    "java.io.filterinputstream.mark": [
        "java.io.FilterInputStream.mark(int)"
    ],
    "java.sql.date.tolocaldate": [
        "java.sql.Date.toLocalDate()"
    ],
    "javax.swing.text.abstractdocument.getdocumentlisteners": [
        "javax.swing.text.AbstractDocument.getDocumentListeners()"
    ],
    "org.w3c.dom.document.getelementsbytagnamens": [
        "org.w3c.dom.Document.getElementsByTagNameNS(java.lang.String,java.lang.String)"
    ],
    "java.awt.image.volatileimage.gettransparency": [
        "java.awt.image.VolatileImage.getTransparency()"
    ],
    "java.net.responsecache.put": [
        "java.net.ResponseCache.put(java.net.URI,java.net.URLConnection)"
    ],
    "java.lang.reflect.field.setint": [
        "java.lang.reflect.Field.setInt(java.lang.Object,int)"
    ],
    "java.util.zip.crc32.update": [
        "java.util.zip.CRC32.update(java.nio.ByteBuffer)",
        "java.util.zip.CRC32.update(byte[])",
        "java.util.zip.CRC32.update(byte[],int,int)"
    ],
    "javax.sound.sampled.dataline.getmicrosecondposition": [
        "javax.sound.sampled.DataLine.getMicrosecondPosition()"
    ],
    "java.util.intsummarystatistics.getmax": [
        "java.util.IntSummaryStatistics.getMax()"
    ],
    "java.util.concurrent.priorityblockingqueue.add": [
        "java.util.concurrent.PriorityBlockingQueue.add(E)",
        "java.util.concurrent.PriorityBlockingQueue.add(java.util.concurrent.PriorityBlockingQueue)"
    ],
    "java.awt.component.addmousemotionlistener": [
        "java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"
    ],
    "java.text.dateformatsymbols.setshortmonths": [
        "java.text.DateFormatSymbols.setShortMonths(java.lang.String[])",
        "java.text.DateFormatSymbols.setShortMonths(java.lang.String)"
    ],
    "javax.imageio.metadata.iiometadataformat.getattributevaluetype": [
        "javax.imageio.metadata.IIOMetadataFormat.getAttributeValueType(java.lang.String,java.lang.String)"
    ],
    "javax.sound.sampled.lineevent.tostring": [
        "javax.sound.sampled.LineEvent.toString()"
    ],
    "java.io.filteroutputstream.close": [
        "java.io.FilterOutputStream.close()"
    ],
    "javax.swing.plaf.treeui.cancelediting": [
        "javax.swing.plaf.TreeUI.cancelEditing(javax.swing.JTree)"
    ],
    "java.nio.charset.charset.displayname": [
        "java.nio.charset.Charset.displayName()",
        "java.nio.charset.Charset.displayName(java.util.Locale)"
    ],
    "java.util.stream.intstream.flatmap": [
        "java.util.stream.IntStream.flatMap(java.util.function.IntFunction<? extends java.util.stream.IntStream>)"
    ],
    "java.sql.resultset.getfetchsize": [
        "java.sql.ResultSet.getFetchSize()"
    ],
    "javax.swing.japplet.setglasspane": [
        "javax.swing.JApplet.setGlassPane(java.awt.Component)"
    ],
    "javax.sql.rowset.baserowset.getfetchdirection": [
        "javax.sql.rowset.BaseRowSet.getFetchDirection()"
    ],
    "java.awt.awteventmulticaster.removeinternal": [
        "java.awt.AWTEventMulticaster.removeInternal(java.util.EventListener,java.util.EventListener)"
    ],
    "java.util.jar.jaroutputstream.putnextentry": [
        "java.util.jar.JarOutputStream.putNextEntry(java.util.zip.ZipEntry)"
    ],
    "java.awt.scrollbar.setvalues": [
        "java.awt.Scrollbar.setValues(int,int,int,int)"
    ],
    "javax.swing.plaf.synth.synthlookandfeel.setstylefactory": [
        "javax.swing.plaf.synth.SynthLookAndFeel.setStyleFactory(javax.swing.plaf.synth.SynthStyleFactory)"
    ],
    "javax.swing.plaf.basic.basictabbedpaneui.painttabborder": [
        "javax.swing.plaf.basic.BasicTabbedPaneUI.paintTabBorder(java.awt.Graphics,int,int,int,int,int,int,boolean)"
    ],
    "javax.activation.mimetypesfiletypemap.getcontenttype": [
        "javax.activation.MimetypesFileTypeMap.getContentType(java.io.File)",
        "javax.activation.MimetypesFileTypeMap.getContentType(java.lang.String)"
    ],
    "org.omg.dynamicany.dynanyoperations.insert_reference": [
        "org.omg.DynamicAny.DynAnyOperations.insert_reference(org.omg.CORBA.Object)"
    ],
    "javax.swing.plaf.comboboxui.ispopupvisible": [
        "javax.swing.plaf.ComboBoxUI.isPopupVisible(javax.swing.JComboBox)"
    ],
    "java.awt.font.glyphvector.setglyphtransform": [
        "java.awt.font.GlyphVector.setGlyphTransform(int,java.awt.geom.AffineTransform)"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.clear": [
        "javax.xml.datatype.XMLGregorianCalendar.clear()"
    ],
    "javax.swing.border.etchedborder.gethighlightcolor": [
        "javax.swing.border.EtchedBorder.getHighlightColor(java.awt.Component)",
        "javax.swing.border.EtchedBorder.getHighlightColor()"
    ],
    "java.text.decimalformat.setnegativesuffix": [
        "java.text.DecimalFormat.setNegativeSuffix(java.lang.String)"
    ],
    "javax.swing.plaf.multi.multilabelui.paint": [
        "javax.swing.plaf.multi.MultiLabelUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.util.concurrent.locks.abstractqueuedsynchronizer.conditionobject.getwaitingthreads": [
        "java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.getWaitingThreads()"
    ],
    "java.io.console.writer": [
        "java.io.Console.writer()"
    ],
    "org.omg.dynamicany._dynsequencestub.next": [
        "org.omg.DynamicAny._DynSequenceStub.next()"
    ],
    "java.awt.geom.quadcurve2d.gety2": [
        "java.awt.geom.QuadCurve2D.getY2()"
    ],
    "java.io.bytearrayoutputstream.close": [
        "java.io.ByteArrayOutputStream.close()"
    ],
    "javax.management.remote.rmi.rmiconnection.removenotificationlisteners": [
        "javax.management.remote.rmi.RMIConnection.removeNotificationListeners(javax.management.ObjectName,java.lang.Integer[],javax.security.auth.Subject)"
    ],
    "java.util.sortedmap.values": [
        "java.util.SortedMap.values()"
    ],
    "javax.imageio.stream.memorycacheimageoutputstream.close": [
        "javax.imageio.stream.MemoryCacheImageOutputStream.close()"
    ],
    "javax.swing.text.html.parser.element.getattributes": [
        "javax.swing.text.html.parser.Element.getAttributes()"
    ],
    "javax.swing.plaf.basic.basicscrollpaneui.createpropertychangelistener": [
        "javax.swing.plaf.basic.BasicScrollPaneUI.createPropertyChangeListener()"
    ],
    "javax.accessibility.accessibletable.setaccessiblesummary": [
        "javax.accessibility.AccessibleTable.setAccessibleSummary(javax.accessibility.Accessible)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintsplitpaneborder": [
        "javax.swing.plaf.synth.SynthPainter.paintSplitPaneBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.xml.crypto.xmlcryptocontext.getdefaultnamespaceprefix": [
        "javax.xml.crypto.XMLCryptoContext.getDefaultNamespacePrefix()"
    ],
    "javax.swing.grouplayout.tostring": [
        "javax.swing.GroupLayout.toString()"
    ],
    "java.security.cert.certificaterevokedexception.getextensions": [
        "java.security.cert.CertificateRevokedException.getExtensions()"
    ],
    "java.beans.propertychangesupport.getpropertychangelisteners": [
        "java.beans.PropertyChangeSupport.getPropertyChangeListeners()",
        "java.beans.PropertyChangeSupport.getPropertyChangeListeners(java.lang.String)"
    ],
    "java.time.zone.zonerulesprovider.providerefresh": [
        "java.time.zone.ZoneRulesProvider.provideRefresh()"
    ],
    "javax.xml.ws.spi.http.httpexchange.getattribute": [
        "javax.xml.ws.spi.http.HttpExchange.getAttribute(java.lang.String)"
    ],
    "javax.management.attributevalueexp.getattributename": [
        "javax.management.AttributeValueExp.getAttributeName()"
    ],
    "javax.net.ssl.sslsessioncontext.getsessiontimeout": [
        "javax.net.ssl.SSLSessionContext.getSessionTimeout()"
    ],
    "javax.swing.menuselectionmanager.getselectedpath": [
        "javax.swing.MenuSelectionManager.getSelectedPath()"
    ],
    "java.awt.geom.rectangularshape.getbounds": [
        "java.awt.geom.RectangularShape.getBounds()"
    ],
    "javax.swing.border.lineborder.paintborder": [
        "javax.swing.border.LineBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.imageio.metadata.iiometadataformatimpl.getresourcebasename": [
        "javax.imageio.metadata.IIOMetadataFormatImpl.getResourceBaseName()"
    ],
    "java.awt.dialog.getaccessiblecontext": [
        "java.awt.Dialog.getAccessibleContext()"
    ],
    "javax.lang.model.element.annotationvaluevisitor.visitunknown": [
        "javax.lang.model.element.AnnotationValueVisitor.visitUnknown(javax.lang.model.element.AnnotationValue,javax.lang.model.element.AnnotationValueVisitor)"
    ],
    "javax.tools.javafileobject.getnestingkind": [
        "javax.tools.JavaFileObject.getNestingKind()"
    ],
    "java.util.stream.doublestream.min": [
        "java.util.stream.DoubleStream.min()"
    ],
    "javax.activation.activationdataflavor.getmimetype": [
        "javax.activation.ActivationDataFlavor.getMimeType()"
    ],
    "java.text.attributedcharacteriterator.getrunstart": [
        "java.text.AttributedCharacterIterator.getRunStart(java.util.Set<? extends java.text.AttributedCharacterIterator.Attribute>)",
        "java.text.AttributedCharacterIterator.getRunStart()",
        "java.text.AttributedCharacterIterator.getRunStart(java.text.AttributedCharacterIterator.Attribute)"
    ],
    "java.net.uri.create": [
        "java.net.URI.create(java.lang.String)"
    ],
    "javax.swing.jprogressbar.getvalue": [
        "javax.swing.JProgressBar.getValue()"
    ],
    "javax.xml.stream.xmlstreamwriter.writestartelement": [
        "javax.xml.stream.XMLStreamWriter.writeStartElement(java.lang.String,java.lang.String,java.lang.String)",
        "javax.xml.stream.XMLStreamWriter.writeStartElement(java.lang.String)",
        "javax.xml.stream.XMLStreamWriter.writeStartElement(java.lang.String,java.lang.String)"
    ],
    "org.omg.portableserver.servantactivatoroperations.incarnate": [
        "org.omg.PortableServer.ServantActivatorOperations.incarnate(byte[],org.omg.PortableServer.POA)"
    ],
    "java.lang.throwable.getstacktrace": [
        "java.lang.Throwable.getStackTrace()"
    ],
    "javax.swing.plaf.synth.synthlabelui.paint": [
        "javax.swing.plaf.synth.SynthLabelUI.paint(java.awt.Graphics,javax.swing.JComponent)",
        "javax.swing.plaf.synth.SynthLabelUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)"
    ],
    "javax.script.simplebindings.size": [
        "javax.script.SimpleBindings.size()"
    ],
    "java.net.multicastsocket.setloopbackmode": [
        "java.net.MulticastSocket.setLoopbackMode(boolean)"
    ],
    "javax.print.attribute.standard.mediaprintablearea.hashcode": [
        "javax.print.attribute.standard.MediaPrintableArea.hashCode()"
    ],
    "javax.swing.defaultlistmodel.get": [
        "javax.swing.DefaultListModel.get(int)"
    ],
    "javax.swing.jframe.setjmenubar": [
        "javax.swing.JFrame.setJMenuBar(javax.swing.JMenuBar)"
    ],
    "java.lang.strictmath.signum": [
        "java.lang.StrictMath.signum(float)",
        "java.lang.StrictMath.signum(double)"
    ],
    "java.security.acl.group.members": [
        "java.security.acl.Group.members()"
    ],
    "javax.swing.plaf.multi.multitreeui.getpathforrow": [
        "javax.swing.plaf.multi.MultiTreeUI.getPathForRow(javax.swing.JTree,int)"
    ],
    "javax.accessibility.accessiblecontext.getaccessiblestateset": [
        "javax.accessibility.AccessibleContext.getAccessibleStateSet()"
    ],
    "java.io.dataoutputstream.writebyte": [
        "java.io.DataOutputStream.writeByte(int)"
    ],
    "java.nio.file.attribute.aclentry.principal": [
        "java.nio.file.attribute.AclEntry.principal()"
    ],
    "java.util.concurrent.locks.abstractqueuedlongsynchronizer.conditionobject.signalall": [
        "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.signalAll()"
    ],
    "java.time.localtime.tonanoofday": [
        "java.time.LocalTime.toNanoOfDay()"
    ],
    "org.w3c.dom.node.lookupnamespaceuri": [
        "org.w3c.dom.Node.lookupNamespaceURI(java.lang.String)"
    ],
    "java.awt.image.singlepixelpackedsamplemodel.getsamplesize": [
        "java.awt.image.SinglePixelPackedSampleModel.getSampleSize(int)",
        "java.awt.image.SinglePixelPackedSampleModel.getSampleSize()"
    ],
    "javax.swing.plaf.synth.synthlabelui.update": [
        "javax.swing.plaf.synth.SynthLabelUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.awt.dnd.dragsource.removedragsourcelistener": [
        "java.awt.dnd.DragSource.removeDragSourceListener(java.awt.dnd.DragSourceListener)"
    ],
    "java.awt.window.getfocusablewindowstate": [
        "java.awt.Window.getFocusableWindowState()"
    ],
    "javax.print.attribute.standard.jobname.equals": [
        "javax.print.attribute.standard.JobName.equals(java.lang.Object)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintbuttonborder": [
        "javax.swing.plaf.synth.SynthPainter.paintButtonBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.awt.image.renderable.parameterblock.getparameters": [
        "java.awt.image.renderable.ParameterBlock.getParameters()"
    ],
    "javax.management.notification.gettype": [
        "javax.management.Notification.getType()"
    ],
    "java.awt.im.spi.inputmethod.hidewindows": [
        "java.awt.im.spi.InputMethod.hideWindows()"
    ],
    "java.lang.management.memoryusage.getinit": [
        "java.lang.management.MemoryUsage.getInit()"
    ],
    "org.omg.corba.dataoutputstream.write_double_array": [
        "org.omg.CORBA.DataOutputStream.write_double_array(double[],int,int)"
    ],
    "java.lang.math.log1p": [
        "java.lang.Math.log1p(double)"
    ],
    "java.io.objectstreamclass.getname": [
        "java.io.ObjectStreamClass.getName()"
    ],
    "javax.net.ssl.sslserversocket.getsupportedprotocols": [
        "javax.net.ssl.SSLServerSocket.getSupportedProtocols()"
    ],
    "javax.swing.plaf.basic.basictabbedpaneui.getrollovertab": [
        "javax.swing.plaf.basic.BasicTabbedPaneUI.getRolloverTab()"
    ],
    "java.time.format.datetimeformatter.tostring": [
        "java.time.format.DateTimeFormatter.toString()"
    ],
    "javax.swing.text.maskformatter.getmask": [
        "javax.swing.text.MaskFormatter.getMask()"
    ],
    "javax.swing.text.html.stylesheet.loadrules": [
        "javax.swing.text.html.StyleSheet.loadRules(java.io.Reader,java.net.URL)"
    ],
    "java.nio.bytebuffer.duplicate": [
        "java.nio.ByteBuffer.duplicate()"
    ],
    "org.omg.dynamicany._dynenumstub.insert_wstring": [
        "org.omg.DynamicAny._DynEnumStub.insert_wstring(java.lang.String)"
    ],
    "java.sql.databasemetadata.getmaxbinaryliterallength": [
        "java.sql.DatabaseMetaData.getMaxBinaryLiteralLength()"
    ],
    "java.awt.geom.line2d.gety1": [
        "java.awt.geom.Line2D.getY1()"
    ],
    "java.util.abstractlist.equals": [
        "java.util.AbstractList.equals(java.lang.Object)"
    ],
    "java.awt.menushortcut.tostring": [
        "java.awt.MenuShortcut.toString()"
    ],
    "javax.swing.plaf.synth.synthinternalframeui.createui": [
        "javax.swing.plaf.synth.SynthInternalFrameUI.createUI(javax.swing.JComponent)"
    ],
    "java.awt.keyboardfocusmanager.getglobalfocusowner": [
        "java.awt.KeyboardFocusManager.getGlobalFocusOwner()"
    ],
    "javax.swing.text.utilities.getwordstart": [
        "javax.swing.text.Utilities.getWordStart(javax.swing.text.JTextComponent,int)"
    ],
    "org.omg.dynamicany._dynenumstub.insert_long": [
        "org.omg.DynamicAny._DynEnumStub.insert_long(int)"
    ],
    "java.time.period.plus": [
        "java.time.Period.plus(java.time.temporal.TemporalAmount)"
    ],
    "java.util.prefs.abstractpreferences.childrennamesspi": [
        "java.util.prefs.AbstractPreferences.childrenNamesSpi()"
    ],
    "java.util.locale.getunicodelocalekeys": [
        "java.util.Locale.getUnicodeLocaleKeys()"
    ],
    "javax.swing.plaf.basic.basiclistui.paintcell": [
        "javax.swing.plaf.basic.BasicListUI.paintCell(java.awt.Graphics,int,java.awt.Rectangle,javax.swing.ListCellRenderer,javax.swing.ListModel,javax.swing.ListSelectionModel,int)"
    ],
    "java.util.concurrent.concurrentskiplistmap.clone": [
        "java.util.concurrent.ConcurrentSkipListMap.clone()"
    ],
    "javax.accessibility.accessibletablemodelchange.getfirstrow": [
        "javax.accessibility.AccessibleTableModelChange.getFirstRow()"
    ],
    "java.awt.geom.area.exclusiveor": [
        "java.awt.geom.Area.exclusiveOr(java.awt.geom.Area)"
    ],
    "org.omg.portableinterceptor.requestinfooperations.forward_reference": [
        "org.omg.PortableInterceptor.RequestInfoOperations.forward_reference()"
    ],
    "java.text.decimalformat.setnegativeprefix": [
        "java.text.DecimalFormat.setNegativePrefix(java.lang.String)"
    ],
    "java.awt.flowlayout.layoutcontainer": [
        "java.awt.FlowLayout.layoutContainer(java.awt.Container)"
    ],
    "javax.swing.text.abstractdocument.content.insertstring": [
        "javax.swing.text.AbstractDocument.Content.insertString(int,java.lang.String)"
    ],
    "javax.swing.text.defaultcaret.firestatechanged": [
        "javax.swing.text.DefaultCaret.fireStateChanged()"
    ],
    "java.time.localdate.minusdays": [
        "java.time.LocalDate.minusDays(long)"
    ],
    "javax.net.ssl.sslengineresult.bytesconsumed": [
        "javax.net.ssl.SSLEngineResult.bytesConsumed()"
    ],
    "java.util.bitset.tobytearray": [
        "java.util.BitSet.toByteArray()"
    ],
    "java.time.chrono.chronozoneddatetime.tolocaltime": [
        "java.time.chrono.ChronoZonedDateTime.toLocalTime()"
    ],
    "java.time.temporal.valuerange.getsmallestmaximum": [
        "java.time.temporal.ValueRange.getSmallestMaximum()"
    ],
    "java.sql.connection.setsavepoint": [
        "java.sql.Connection.setSavepoint(java.lang.String)",
        "java.sql.Connection.setSavepoint()"
    ],
    "org.w3c.dom.events.uievent.getview": [
        "org.w3c.dom.events.UIEvent.getView()"
    ],
    "java.security.cert.certpathchecker.init": [
        "java.security.cert.CertPathChecker.init(boolean)"
    ],
    "javax.management.reflectionexception.gettargetexception": [
        "javax.management.ReflectionException.getTargetException()"
    ],
    "java.awt.menuitem.getlabel": [
        "java.awt.MenuItem.getLabel()"
    ],
    "javax.swing.menuelement.getcomponent": [
        "javax.swing.MenuElement.getComponent()"
    ],
    "org.xml.sax.helpers.parseradapter.getcontenthandler": [
        "org.xml.sax.helpers.ParserAdapter.getContentHandler()"
    ],
    "javax.sound.midi.midisystem.getmidifiletypes": [
        "javax.sound.midi.MidiSystem.getMidiFileTypes()",
        "javax.sound.midi.MidiSystem.getMidiFileTypes(javax.sound.midi.Sequence)"
    ],
    "javax.swing.plaf.synth.synthsplitpaneui.createdefaultdivider": [
        "javax.swing.plaf.synth.SynthSplitPaneUI.createDefaultDivider()"
    ],
    "java.lang.math.scalb": [
        "java.lang.Math.scalb(double,int)",
        "java.lang.Math.scalb(float,int)"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.seterrorhandler": [
        "org.xml.sax.helpers.XMLFilterImpl.setErrorHandler(org.xml.sax.ErrorHandler)"
    ],
    "javax.xml.validation.validatorhandler.gettypeinfoprovider": [
        "javax.xml.validation.ValidatorHandler.getTypeInfoProvider()"
    ],
    "javax.swing.jspinner.getchangelisteners": [
        "javax.swing.JSpinner.getChangeListeners()"
    ],
    "javax.net.ssl.sslengineresult.handshakestatus.valueof": [
        "javax.net.ssl.SSLEngineResult.HandshakeStatus.valueOf(java.lang.String)"
    ],
    "java.lang.math.copysign": [
        "java.lang.Math.copySign(double,double)",
        "java.lang.Math.copySign(float,float)"
    ],
    "java.text.decimalformat.setroundingmode": [
        "java.text.DecimalFormat.setRoundingMode(java.math.RoundingMode)"
    ],
    "javax.swing.menuselectionmanager.addchangelistener": [
        "javax.swing.MenuSelectionManager.addChangeListener(javax.swing.event.ChangeListener)"
    ],
    "javax.swing.joptionpane.setmessage": [
        "javax.swing.JOptionPane.setMessage(java.lang.Object)"
    ],
    "javax.swing.plaf.nimbus.nimbuslookandfeel.getdescription": [
        "javax.swing.plaf.nimbus.NimbusLookAndFeel.getDescription()"
    ],
    "java.security.cert.trustanchor.gettrustedcert": [
        "java.security.cert.TrustAnchor.getTrustedCert()"
    ],
    "java.awt.dnd.droptarget.addnotify": [
        "java.awt.dnd.DropTarget.addNotify(java.awt.peer.ComponentPeer)"
    ],
    "javax.sql.rowset.serial.serialstruct.equals": [
        "javax.sql.rowset.serial.SerialStruct.equals(java.lang.Object)"
    ],
    "javax.swing.jtree.setui": [
        "javax.swing.JTree.setUI(javax.swing.plaf.TreeUI)"
    ],
    "java.awt.window.type.valueof": [
        "java.awt.Window.Type.valueOf(java.lang.String)"
    ],
    "java.util.concurrent.atomic.atomicinteger.lazyset": [
        "java.util.concurrent.atomic.AtomicInteger.lazySet(int)"
    ],
    "javax.security.auth.subject.getsubject": [
        "javax.security.auth.Subject.getSubject(java.security.AccessControlContext)"
    ],
    "java.awt.image.colorconvertop.createcompatibledestimage": [
        "java.awt.image.ColorConvertOp.createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)"
    ],
    "java.awt.scrollbar.setvalue": [
        "java.awt.Scrollbar.setValue(int)"
    ],
    "javax.swing.text.compositeview.childallocation": [
        "javax.swing.text.CompositeView.childAllocation(int,java.awt.Rectangle)"
    ],
    "javax.swing.jtoolbar.isfloatable": [
        "javax.swing.JToolBar.isFloatable()"
    ],
    "javax.print.attribute.standard.printerisacceptingjobs.getenumvaluetable": [
        "javax.print.attribute.standard.PrinterIsAcceptingJobs.getEnumValueTable()"
    ],
    "javax.print.printservice.getdefaultattributevalue": [
        "javax.print.PrintService.getDefaultAttributeValue(java.lang.Class<? extends javax.print.attribute.Attribute>)"
    ],
    "javax.swing.jtree.getpathforlocation": [
        "javax.swing.JTree.getPathForLocation(int,int)"
    ],
    "java.awt.borderlayout.maximumlayoutsize": [
        "java.awt.BorderLayout.maximumLayoutSize(java.awt.Container)"
    ],
    "java.awt.im.spi.inputmethoddescriptor.getinputmethodicon": [
        "java.awt.im.spi.InputMethodDescriptor.getInputMethodIcon(java.util.Locale)"
    ],
    "java.util.arraylist.set": [
        "java.util.ArrayList.set(int,E)",
        "java.util.ArrayList.set(int,java.util.ArrayList)"
    ],
    "javax.swing.listselectionmodel.clearselection": [
        "javax.swing.ListSelectionModel.clearSelection()"
    ],
    "javax.xml.soap.soapheader.extractheaderelements": [
        "javax.xml.soap.SOAPHeader.extractHeaderElements(java.lang.String)"
    ],
    "java.lang.character.iswhitespace": [
        "java.lang.Character.isWhitespace(char)"
    ],
    "java.util.scanner.locale": [
        "java.util.Scanner.locale()"
    ],
    "java.util.bitset.tostring": [
        "java.util.BitSet.toString()"
    ],
    "java.awt.font.fontrendercontext.usesfractionalmetrics": [
        "java.awt.font.FontRenderContext.usesFractionalMetrics()"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.setrowmapper": [
        "javax.swing.tree.DefaultTreeSelectionModel.setRowMapper(javax.swing.tree.RowMapper)"
    ],
    "java.util.concurrent.concurrentskiplistset.clone": [
        "java.util.concurrent.ConcurrentSkipListSet.clone()"
    ],
    "java.time.localdate.getyear": [
        "java.time.LocalDate.getYear()"
    ],
    "java.util.concurrent.concurrentnavigablemap.keyset": [
        "java.util.concurrent.ConcurrentNavigableMap.keySet()"
    ],
    "java.io.datainput.readfloat": [
        "java.io.DataInput.readFloat()"
    ],
    "javax.accessibility.accessibleeditabletext.selecttext": [
        "javax.accessibility.AccessibleEditableText.selectText(int,int)"
    ],
    "javax.swing.tree.defaulttreecellrenderer.paint": [
        "javax.swing.tree.DefaultTreeCellRenderer.paint(java.awt.Graphics)"
    ],
    "javax.naming.directory.basicattribute.hashcode": [
        "javax.naming.directory.BasicAttribute.hashCode()"
    ],
    "javax.xml.stream.events.startelement.getattributes": [
        "javax.xml.stream.events.StartElement.getAttributes()"
    ],
    "java.awt.event.keyevent.getkeychar": [
        "java.awt.event.KeyEvent.getKeyChar()"
    ],
    "java.awt.trayicon.getimage": [
        "java.awt.TrayIcon.getImage()"
    ],
    "javax.net.ssl.sslserversocket.tostring": [
        "javax.net.ssl.SSLServerSocket.toString()"
    ],
    "javax.xml.ws.webservicecontext.getmessagecontext": [
        "javax.xml.ws.WebServiceContext.getMessageContext()"
    ],
    "javax.print.attribute.standard.finishings.getstringtable": [
        "javax.print.attribute.standard.Finishings.getStringTable()"
    ],
    "java.nio.charbuffer.asreadonlybuffer": [
        "java.nio.CharBuffer.asReadOnlyBuffer()"
    ],
    "java.util.collections.unmodifiablesortedmap": [
        "java.util.Collections.unmodifiableSortedMap(,? extends V>)"
    ],
    "java.awt.dnd.droptarget.removenotify": [
        "java.awt.dnd.DropTarget.removeNotify(java.awt.peer.ComponentPeer)"
    ],
    "java.time.temporal.temporaladjusters.firstinmonth": [
        "java.time.temporal.TemporalAdjusters.firstInMonth(java.time.DayOfWeek)"
    ],
    "javax.xml.bind.datatypeconverterinterface.parsetime": [
        "javax.xml.bind.DatatypeConverterInterface.parseTime(java.lang.String)"
    ],
    "javax.swing.jpopupmenu.getaccessiblecontext": [
        "javax.swing.JPopupMenu.getAccessibleContext()"
    ],
    "java.time.localdate.range": [
        "java.time.LocalDate.range(java.time.temporal.TemporalField)"
    ],
    "javax.management.notification.getmessage": [
        "javax.management.Notification.getMessage()"
    ],
    "javax.swing.jtree.getdescendanttoggledpaths": [
        "javax.swing.JTree.getDescendantToggledPaths(javax.swing.tree.TreePath)"
    ],
    "javax.swing.plaf.synth.synthseparatorui.installlisteners": [
        "javax.swing.plaf.synth.SynthSeparatorUI.installListeners(javax.swing.JSeparator)"
    ],
    "javax.print.attribute.standard.joboriginatingusername.getcategory": [
        "javax.print.attribute.standard.JobOriginatingUserName.getCategory()"
    ],
    "javax.swing.jdialog.gettransferhandler": [
        "javax.swing.JDialog.getTransferHandler()"
    ],
    "org.omg.dynamicany._dynarraystub.get_boolean": [
        "org.omg.DynamicAny._DynArrayStub.get_boolean()"
    ],
    "javax.xml.soap.soappart.getenvelope": [
        "javax.xml.soap.SOAPPart.getEnvelope()"
    ],
    "java.rmi.dgc.vmid.equals": [
        "java.rmi.dgc.VMID.equals(java.lang.Object)"
    ],
    "javax.swing.plaf.basic.basiccomboboxeditor.setitem": [
        "javax.swing.plaf.basic.BasicComboBoxEditor.setItem(java.lang.Object)"
    ],
    "javax.swing.text.paragraphview.setpropertiesfromattributes": [
        "javax.swing.text.ParagraphView.setPropertiesFromAttributes()"
    ],
    "javax.lang.model.type.typevisitor.visitnotype": [
        "javax.lang.model.type.TypeVisitor.visitNoType(javax.lang.model.type.NoType,javax.lang.model.type.TypeVisitor)"
    ],
    "java.text.spi.breakiteratorprovider.getlineinstance": [
        "java.text.spi.BreakIteratorProvider.getLineInstance(java.util.Locale)"
    ],
    "javax.xml.bind.attachment.attachmentmarshaller.isxoppackage": [
        "javax.xml.bind.attachment.AttachmentMarshaller.isXOPPackage()"
    ],
    "javax.swing.text.abstractdocument.elementedit.getchildrenremoved": [
        "javax.swing.text.AbstractDocument.ElementEdit.getChildrenRemoved()"
    ],
    "java.util.concurrent.linkedtransferqueue.add": [
        "java.util.concurrent.LinkedTransferQueue.add(E)",
        "java.util.concurrent.LinkedTransferQueue.add(java.util.concurrent.LinkedTransferQueue)"
    ],
    "javax.swing.jlayer.setview": [
        "javax.swing.JLayer.setView(javax.swing.JLayer)"
    ],
    "javax.swing.desktopmanager.openframe": [
        "javax.swing.DesktopManager.openFrame(javax.swing.JInternalFrame)"
    ],
    "org.omg.dynamicany._dynsequencestub.get_short": [
        "org.omg.DynamicAny._DynSequenceStub.get_short()"
    ],
    "java.time.chrono.thaibuddhistera.values": [
        "java.time.chrono.ThaiBuddhistEra.values()"
    ],
    "javax.swing.jtree.setdragenabled": [
        "javax.swing.JTree.setDragEnabled(boolean)"
    ],
    "org.omg.portableserver.poamanageroperations.discard_requests": [
        "org.omg.PortableServer.POAManagerOperations.discard_requests(boolean)"
    ],
    "java.awt.window.getwarningstring": [
        "java.awt.Window.getWarningString()"
    ],
    "java.awt.image.imageconsumer.setpixels": [
        "java.awt.image.ImageConsumer.setPixels(int,int,int,int,java.awt.image.ColorModel,int[],int,int)",
        "java.awt.image.ImageConsumer.setPixels(int,int,int,int,java.awt.image.ColorModel,byte[],int,int)"
    ],
    "org.omg.corba.orb.create_exception_list": [
        "org.omg.CORBA.ORB.create_exception_list()"
    ],
    "java.io.pipedreader.read": [
        "java.io.PipedReader.read()",
        "java.io.PipedReader.read(char[],int,int)"
    ],
    "org.omg.dynamicany.dynvalueoperations.set_members_as_dyn_any": [
        "org.omg.DynamicAny.DynValueOperations.set_members_as_dyn_any(org.omg.DynamicAny.NameDynAnyPair[])"
    ],
    "java.awt.alphacomposite.createcontext": [
        "java.awt.AlphaComposite.createContext(java.awt.image.ColorModel,java.awt.image.ColorModel,java.awt.RenderingHints)"
    ],
    "javax.swing.table.defaulttablecolumnmodel.getcolumns": [
        "javax.swing.table.DefaultTableColumnModel.getColumns()"
    ],
    "java.lang.reflect.field.setchar": [
        "java.lang.reflect.Field.setChar(java.lang.Object,char)"
    ],
    "javax.swing.text.html.parser.element.gettype": [
        "javax.swing.text.html.parser.Element.getType()"
    ],
    "java.security.cert.x509crl.equals": [
        "java.security.cert.X509CRL.equals(java.lang.Object)"
    ],
    "java.applet.appletcontext.setstream": [
        "java.applet.AppletContext.setStream(java.lang.String,java.io.InputStream)"
    ],
    "javax.swing.text.tableview.getviewatposition": [
        "javax.swing.text.TableView.getViewAtPosition(int,java.awt.Rectangle)"
    ],
    "javax.sound.midi.soundbank.getversion": [
        "javax.sound.midi.Soundbank.getVersion()"
    ],
    "javax.management.query.gt": [
        "javax.management.Query.gt(javax.management.ValueExp,javax.management.ValueExp)"
    ],
    "java.awt.toolkit.ismodalitytypesupported": [
        "java.awt.Toolkit.isModalityTypeSupported(java.awt.Dialog.ModalityType)"
    ],
    "java.security.cert.pkixparameters.setcertstores": [
        "java.security.cert.PKIXParameters.setCertStores(java.util.List<java.security.cert.CertStore>)"
    ],
    "javax.swing.swingutilities.getuiactionmap": [
        "javax.swing.SwingUtilities.getUIActionMap(javax.swing.JComponent)"
    ],
    "java.sql.resultset.close": [
        "java.sql.ResultSet.close()"
    ],
    "java.awt.event.focusevent.getoppositecomponent": [
        "java.awt.event.FocusEvent.getOppositeComponent()"
    ],
    "javax.imageio.imagereader.getavailablelocales": [
        "javax.imageio.ImageReader.getAvailableLocales()"
    ],
    "javax.print.multidocprintservice.createmultidocprintjob": [
        "javax.print.MultiDocPrintService.createMultiDocPrintJob()"
    ],
    "javax.swing.text.html.minimalhtmlwriter.writeimage": [
        "javax.swing.text.html.MinimalHTMLWriter.writeImage(javax.swing.text.Element)"
    ],
    "javax.swing.jlist.getfixedcellheight": [
        "javax.swing.JList.getFixedCellHeight()"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.readlock.newcondition": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.newCondition()"
    ],
    "java.util.arraylist.add": [
        "java.util.ArrayList.add(E)",
        "java.util.ArrayList.add(java.util.ArrayList)",
        "java.util.ArrayList.add(int,java.util.ArrayList)",
        "java.util.ArrayList.add(int,E)"
    ],
    "org.omg.dynamicany._dynfixedstub.get_reference": [
        "org.omg.DynamicAny._DynFixedStub.get_reference()"
    ],
    "javax.swing.springlayout.constraints.setconstraint": [
        "javax.swing.SpringLayout.Constraints.setConstraint(java.lang.String,javax.swing.Spring)"
    ],
    "java.time.localdate.getdayofyear": [
        "java.time.LocalDate.getDayOfYear()"
    ],
    "java.security.cert.certificatefactory.getprovider": [
        "java.security.cert.CertificateFactory.getProvider()"
    ],
    "java.util.concurrent.atomic.atomicintegerarray.set": [
        "java.util.concurrent.atomic.AtomicIntegerArray.set(int,int)"
    ],
    "javax.security.auth.kerberos.kerberosticket.getflags": [
        "javax.security.auth.kerberos.KerberosTicket.getFlags()"
    ],
    "java.util.locale.lookup": [
        "java.util.Locale.lookup(java.util.List<java.util.Locale.LanguageRange>,java.util.Collection<java.util.Locale>)"
    ],
    "java.nio.doublebuffer.hasarray": [
        "java.nio.DoubleBuffer.hasArray()"
    ],
    "java.awt.font.getstringbounds": [
        "java.awt.Font.getStringBounds(java.lang.String,int,int,java.awt.font.FontRenderContext)",
        "java.awt.Font.getStringBounds(java.lang.String,java.awt.font.FontRenderContext)",
        "java.awt.Font.getStringBounds(java.text.CharacterIterator,int,int,java.awt.font.FontRenderContext)",
        "java.awt.Font.getStringBounds(char[],int,int,java.awt.font.FontRenderContext)"
    ],
    "javax.swing.jeditorpane.geteditorkit": [
        "javax.swing.JEditorPane.getEditorKit()"
    ],
    "javax.naming.directory.searchcontrols.setreturningattributes": [
        "javax.naming.directory.SearchControls.setReturningAttributes(java.lang.String[])"
    ],
    "java.time.zoneddatetime.getmonth": [
        "java.time.ZonedDateTime.getMonth()"
    ],
    "javax.print.attribute.standard.presentationdirection.getenumvaluetable": [
        "javax.print.attribute.standard.PresentationDirection.getEnumValueTable()"
    ],
    "javax.sql.rowset.serial.serialstruct.getsqltypename": [
        "javax.sql.rowset.serial.SerialStruct.getSQLTypeName()"
    ],
    "javax.swing.abstractbutton.getdisabledselectedicon": [
        "javax.swing.AbstractButton.getDisabledSelectedIcon()"
    ],
    "java.net.inetaddress.getbyaddress": [
        "java.net.InetAddress.getByAddress(byte[])",
        "java.net.InetAddress.getByAddress(java.lang.String,byte[])"
    ],
    "java.lang.long.compareto": [
        "java.lang.Long.compareTo(java.lang.Long)"
    ],
    "java.io.streamtokenizer.slashstarcomments": [
        "java.io.StreamTokenizer.slashStarComments(boolean)"
    ],
    "javax.xml.transform.stax.staxsource.getxmleventreader": [
        "javax.xml.transform.stax.StAXSource.getXMLEventReader()"
    ],
    "java.awt.component.processhierarchyboundsevent": [
        "java.awt.Component.processHierarchyBoundsEvent(java.awt.event.HierarchyEvent)"
    ],
    "java.math.biginteger.longvalue": [
        "java.math.BigInteger.longValue()"
    ],
    "javax.management.query.initialsubstring": [
        "javax.management.Query.initialSubString(javax.management.AttributeValueExp,javax.management.StringValueExp)"
    ],
    "javax.swing.plaf.synth.synthtextareaui.update": [
        "javax.swing.plaf.synth.SynthTextAreaUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.util.concurrent.locks.stampedlock.tryunlockwrite": [
        "java.util.concurrent.locks.StampedLock.tryUnlockWrite()"
    ],
    "java.awt.print.pageformat.setpaper": [
        "java.awt.print.PageFormat.setPaper(java.awt.print.Paper)"
    ],
    "javax.accessibility.accessiblekeybinding.getaccessiblekeybinding": [
        "javax.accessibility.AccessibleKeyBinding.getAccessibleKeyBinding(int)"
    ],
    "javax.imageio.spi.imagereaderwriterspi.getimagemetadataformat": [
        "javax.imageio.spi.ImageReaderWriterSpi.getImageMetadataFormat(java.lang.String)"
    ],
    "javax.swing.rowsorter.convertrowindextomodel": [
        "javax.swing.RowSorter.convertRowIndexToModel(int)"
    ],
    "java.awt.checkboxmenuitem.processitemevent": [
        "java.awt.CheckboxMenuItem.processItemEvent(java.awt.event.ItemEvent)"
    ],
    "java.util.gregoriancalendar.getmaximum": [
        "java.util.GregorianCalendar.getMaximum(int)"
    ],
    "javax.swing.plaf.basic.basiclistui.getpreferredsize": [
        "javax.swing.plaf.basic.BasicListUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "java.nio.channels.datagramchannel.open": [
        "java.nio.channels.DatagramChannel.open()",
        "java.nio.channels.DatagramChannel.open(java.net.ProtocolFamily)"
    ],
    "java.awt.geom.line2d.double.setline": [
        "java.awt.geom.Line2D.Double.setLine(double,double,double,double)"
    ],
    "javax.imageio.plugins.jpeg.jpegimagereadparam.setdecodetables": [
        "javax.imageio.plugins.jpeg.JPEGImageReadParam.setDecodeTables(javax.imageio.plugins.jpeg.JPEGQTable[],javax.imageio.plugins.jpeg.JPEGHuffmanTable[],javax.imageio.plugins.jpeg.JPEGHuffmanTable[])"
    ],
    "java.util.concurrent.synchronousqueue.iterator": [
        "java.util.concurrent.SynchronousQueue.iterator()"
    ],
    "java.sql.callablestatement.setstring": [
        "java.sql.CallableStatement.setString(java.lang.String,java.lang.String)"
    ],
    "java.awt.im.spi.inputmethod.setcharactersubsets": [
        "java.awt.im.spi.InputMethod.setCharacterSubsets(java.lang.Character.Subset[])"
    ],
    "javax.swing.jtextarea.settabsize": [
        "javax.swing.JTextArea.setTabSize(int)"
    ],
    "javax.swing.text.maskformatter.getplaceholdercharacter": [
        "javax.swing.text.MaskFormatter.getPlaceholderCharacter()"
    ],
    "java.security.spec.dsagenparameterspec.getseedlength": [
        "java.security.spec.DSAGenParameterSpec.getSeedLength()"
    ],
    "javax.naming.event.namingexceptionevent.getexception": [
        "javax.naming.event.NamingExceptionEvent.getException()"
    ],
    "javax.xml.bind.datatypeconverter.printbase64binary": [
        "javax.xml.bind.DatatypeConverter.printBase64Binary(byte[])"
    ],
    "java.awt.graphics.clearrect": [
        "java.awt.Graphics.clearRect(int,int,int,int)"
    ],
    "java.awt.image.writableraster.setpixel": [
        "java.awt.image.WritableRaster.setPixel(int,int,float[])",
        "java.awt.image.WritableRaster.setPixel(int,int,double[])",
        "java.awt.image.WritableRaster.setPixel(int,int,int[])"
    ],
    "java.util.function.bifunction.andthen": [
        "java.util.function.BiFunction.andThen(java.util.function.Function<? super,? extends V>)"
    ],
    "java.lang.classloader.getsystemresources": [
        "java.lang.ClassLoader.getSystemResources(java.lang.String)"
    ],
    "java.sql.databasemetadata.gettabletypes": [
        "java.sql.DatabaseMetaData.getTableTypes()"
    ],
    "javax.xml.ws.wsaddressing.w3cendpointreferencebuilder.element": [
        "javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.element(org.w3c.dom.Element)"
    ],
    "java.security.allpermission.getactions": [
        "java.security.AllPermission.getActions()"
    ],
    "javax.accessibility.accessiblecontext.getaccessibletext": [
        "javax.accessibility.AccessibleContext.getAccessibleText()"
    ],
    "javax.swing.table.tablecolumn.getidentifier": [
        "javax.swing.table.TableColumn.getIdentifier()"
    ],
    "org.xml.sax.ext.declhandler.attributedecl": [
        "org.xml.sax.ext.DeclHandler.attributeDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
    ],
    "java.nio.channels.socketchannel.write": [
        "java.nio.channels.SocketChannel.write(java.nio.ByteBuffer,int,int)"
    ],
    "java.util.function.inttodoublefunction.applyasdouble": [
        "java.util.function.IntToDoubleFunction.applyAsDouble(int)"
    ],
    "javax.naming.compositename.tostring": [
        "javax.naming.CompositeName.toString()"
    ],
    "java.util.zip.crc32.getvalue": [
        "java.util.zip.CRC32.getValue()"
    ],
    "org.omg.dynamicany._dynenumstub.insert_double": [
        "org.omg.DynamicAny._DynEnumStub.insert_double(double)"
    ],
    "javax.naming.spi.objectfactorybuilder.createobjectfactory": [
        "javax.naming.spi.ObjectFactoryBuilder.createObjectFactory(java.lang.Object,,?>)"
    ],
    "javax.xml.ws.endpoint.setproperties": [
        "javax.xml.ws.Endpoint.setProperties(,java.lang.Object>)"
    ],
    "org.omg.corba.portable.outputstream.write_ulong_array": [
        "org.omg.CORBA.portable.OutputStream.write_ulong_array(int[],int,int)"
    ],
    "java.util.concurrent.concurrentlinkedqueue.toarray": [
        "java.util.concurrent.ConcurrentLinkedQueue.toArray()",
        "java.util.concurrent.ConcurrentLinkedQueue.toArray(T[])"
    ],
    "javax.swing.text.html.stylesheet.getviewattributes": [
        "javax.swing.text.html.StyleSheet.getViewAttributes(javax.swing.text.View)"
    ],
    "javax.accessibility.accessibleicon.setaccessibleicondescription": [
        "javax.accessibility.AccessibleIcon.setAccessibleIconDescription(java.lang.String)"
    ],
    "java.time.instant.adjustinto": [
        "java.time.Instant.adjustInto(java.time.temporal.Temporal)"
    ],
    "java.lang.object.tostring": [
        "java.lang.Object.toString()"
    ],
    "java.util.gregoriancalendar.equals": [
        "java.util.GregorianCalendar.equals(java.lang.Object)"
    ],
    "java.sql.connection.setclientinfo": [
        "java.sql.Connection.setClientInfo(java.util.Properties)",
        "java.sql.Connection.setClientInfo(java.lang.String,java.lang.String)"
    ],
    "javax.swing.table.defaulttablecolumnmodel.firecolumnadded": [
        "javax.swing.table.DefaultTableColumnModel.fireColumnAdded(javax.swing.event.TableColumnModelEvent)"
    ],
    "javax.swing.plaf.synth.synthscrollpaneui.paintborder": [
        "javax.swing.plaf.synth.SynthScrollPaneUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.management.openmbean.openmbeanoperationinfosupport.equals": [
        "javax.management.openmbean.OpenMBeanOperationInfoSupport.equals(java.lang.Object)"
    ],
    "javax.swing.text.view.getgraphics": [
        "javax.swing.text.View.getGraphics()"
    ],
    "java.net.urlconnection.getlastmodified": [
        "java.net.URLConnection.getLastModified()"
    ],
    "org.w3c.dom.characterdata.substringdata": [
        "org.w3c.dom.CharacterData.substringData(int,int)"
    ],
    "java.util.prefs.abstractpreferences.putlong": [
        "java.util.prefs.AbstractPreferences.putLong(java.lang.String,long)"
    ],
    "javax.swing.text.abstractdocument.setasynchronousloadpriority": [
        "javax.swing.text.AbstractDocument.setAsynchronousLoadPriority(int)"
    ],
    "java.awt.geom.point2d.float.gety": [
        "java.awt.geom.Point2D.Float.getY()"
    ],
    "java.nio.file.path.iterator": [
        "java.nio.file.Path.iterator()"
    ],
    "javax.management.relation.relation.getrelationservicename": [
        "javax.management.relation.Relation.getRelationServiceName()"
    ],
    "java.util.function.bipredicate.or": [
        "java.util.function.BiPredicate.or(java.util.function.BiPredicate<? super,? super java.util.function.BiPredicate>)",
        "java.util.function.BiPredicate.or(java.util.function.BiPredicate<? super,? super U>)"
    ],
    "javax.swing.jfilechooser.changetoparentdirectory": [
        "javax.swing.JFileChooser.changeToParentDirectory()"
    ],
    "java.util.concurrent.blockingqueue.drainto": [
        "java.util.concurrent.BlockingQueue.drainTo(java.util.Collection<? super java.util.concurrent.BlockingQueue>,int)",
        "java.util.concurrent.BlockingQueue.drainTo(java.util.Collection<? super E>,int)",
        "java.util.concurrent.BlockingQueue.drainTo(java.util.Collection<? super java.util.concurrent.BlockingQueue>)",
        "java.util.concurrent.BlockingQueue.drainTo(java.util.Collection<? super E>)"
    ],
    "java.awt.image.renderedimage.gettilewidth": [
        "java.awt.image.RenderedImage.getTileWidth()"
    ],
    "java.lang.invoke.constantcallsite.settarget": [
        "java.lang.invoke.ConstantCallSite.setTarget(java.lang.invoke.MethodHandle)"
    ],
    "javax.swing.plaf.basic.basiccombopopup.configurelist": [
        "javax.swing.plaf.basic.BasicComboPopup.configureList()"
    ],
    "java.awt.component.getsize": [
        "java.awt.Component.getSize()"
    ],
    "javax.imageio.spi.imagereaderspi.getinputtypes": [
        "javax.imageio.spi.ImageReaderSpi.getInputTypes()"
    ],
    "org.ietf.jgss.oid.tostring": [
        "org.ietf.jgss.Oid.toString()"
    ],
    "java.awt.window.getmodalexclusiontype": [
        "java.awt.Window.getModalExclusionType()"
    ],
    "java.awt.scrollpaneadjustable.addadjustmentlistener": [
        "java.awt.ScrollPaneAdjustable.addAdjustmentListener(java.awt.event.AdjustmentListener)"
    ],
    "javax.swing.defaultbuttonmodel.setselected": [
        "javax.swing.DefaultButtonModel.setSelected(boolean)"
    ],
    "javax.security.sasl.saslserver.wrap": [
        "javax.security.sasl.SaslServer.wrap(byte[],int,int)"
    ],
    "javax.imageio.imagewriteparam.gettilegridxoffset": [
        "javax.imageio.ImageWriteParam.getTileGridXOffset()"
    ],
    "java.util.unknownformatconversionexception.getconversion": [
        "java.util.UnknownFormatConversionException.getConversion()"
    ],
    "java.sql.databasemetadata.supportsbatchupdates": [
        "java.sql.DatabaseMetaData.supportsBatchUpdates()"
    ],
    "java.awt.textcomponent.getselectedtext": [
        "java.awt.TextComponent.getSelectedText()"
    ],
    "javax.swing.jpopupmenu.processkeyevent": [
        "javax.swing.JPopupMenu.processKeyEvent(java.awt.event.KeyEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)",
        "javax.swing.JPopupMenu.processKeyEvent(java.awt.event.KeyEvent)"
    ],
    "org.omg.corba.localobject._orb": [
        "org.omg.CORBA.LocalObject._orb()"
    ],
    "org.omg.portableserver.poamanageroperations.hold_requests": [
        "org.omg.PortableServer.POAManagerOperations.hold_requests(boolean)"
    ],
    "javax.management.modelmbean.modelmbeaninfo.setdescriptor": [
        "javax.management.modelmbean.ModelMBeanInfo.setDescriptor(javax.management.Descriptor,java.lang.String)"
    ],
    "javax.swing.text.view.getresizeweight": [
        "javax.swing.text.View.getResizeWeight(int)"
    ],
    "java.util.concurrent.locks.locksupport.park": [
        "java.util.concurrent.locks.LockSupport.park(java.lang.Object)",
        "java.util.concurrent.locks.LockSupport.park()"
    ],
    "javax.swing.colorchooser.colorselectionmodel.getselectedcolor": [
        "javax.swing.colorchooser.ColorSelectionModel.getSelectedColor()"
    ],
    "javax.swing.jpopupmenu.setlightweightpopupenabled": [
        "javax.swing.JPopupMenu.setLightWeightPopupEnabled(boolean)"
    ],
    "org.omg.dynamicany._dynanystub.insert_ulong": [
        "org.omg.DynamicAny._DynAnyStub.insert_ulong(int)"
    ],
    "java.time.zone.zonerules.getstandardoffset": [
        "java.time.zone.ZoneRules.getStandardOffset(java.time.Instant)"
    ],
    "org.omg.corba.portable.delegate.request": [
        "org.omg.CORBA.portable.Delegate.request(org.omg.CORBA.Object,java.lang.String,boolean)",
        "org.omg.CORBA.portable.Delegate.request(org.omg.CORBA.Object,java.lang.String)"
    ],
    "javax.accessibility.accessibleicon.getaccessibleiconwidth": [
        "javax.accessibility.AccessibleIcon.getAccessibleIconWidth()"
    ],
    "javax.security.auth.kerberos.servicepermission.equals": [
        "javax.security.auth.kerberos.ServicePermission.equals(java.lang.Object)"
    ],
    "javax.xml.stream.xmlstreamreader.getnamespacecontext": [
        "javax.xml.stream.XMLStreamReader.getNamespaceContext()"
    ],
    "javax.imageio.iioparam.getsourcebands": [
        "javax.imageio.IIOParam.getSourceBands()"
    ],
    "java.awt.scrollbar.setorientation": [
        "java.awt.Scrollbar.setOrientation(int)"
    ],
    "javax.swing.text.styleddocument.getbackground": [
        "javax.swing.text.StyledDocument.getBackground(javax.swing.text.AttributeSet)"
    ],
    "javax.xml.bind.annotation.adapters.collapsedstringadapter.unmarshal": [
        "javax.xml.bind.annotation.adapters.CollapsedStringAdapter.unmarshal(java.lang.String)"
    ],
    "javax.management.modelmbean.requiredmodelmbean.postderegister": [
        "javax.management.modelmbean.RequiredModelMBean.postDeregister()"
    ],
    "javax.management.notification.getsequencenumber": [
        "javax.management.Notification.getSequenceNumber()"
    ],
    "javax.swing.text.glyphview.glyphpainter.viewtomodel": [
        "javax.swing.text.GlyphView.GlyphPainter.viewToModel(javax.swing.text.GlyphView,float,float,java.awt.Shape,javax.swing.text.Position.Bias[])"
    ],
    "org.omg.dynamicany._dynstructstub.current_member_name": [
        "org.omg.DynamicAny._DynStructStub.current_member_name()"
    ],
    "java.awt.font.linemetrics.getunderlinethickness": [
        "java.awt.font.LineMetrics.getUnderlineThickness()"
    ],
    "java.awt.choice.processitemevent": [
        "java.awt.Choice.processItemEvent(java.awt.event.ItemEvent)"
    ],
    "java.lang.reflect.constructor.gettypeparameters": [
        "java.lang.reflect.Constructor.getTypeParameters()"
    ],
    "java.util.function.predicate.isequal": [
        "java.util.function.Predicate.isEqual(java.lang.Object)"
    ],
    "javax.management.relation.relationsupport.setroles": [
        "javax.management.relation.RelationSupport.setRoles(javax.management.relation.RoleList)"
    ],
    "java.security.cert.certstoreparameters.clone": [
        "java.security.cert.CertStoreParameters.clone()"
    ],
    "javax.sound.midi.spi.midifilereader.getsequence": [
        "javax.sound.midi.spi.MidiFileReader.getSequence(java.io.File)",
        "javax.sound.midi.spi.MidiFileReader.getSequence(java.net.URL)",
        "javax.sound.midi.spi.MidiFileReader.getSequence(java.io.InputStream)"
    ],
    "javax.net.ssl.sslparameters.setwantclientauth": [
        "javax.net.ssl.SSLParameters.setWantClientAuth(boolean)"
    ],
    "javax.xml.crypto.dsig.xmlsignature.signaturevalue.getvalue": [
        "javax.xml.crypto.dsig.XMLSignature.SignatureValue.getValue()"
    ],
    "java.nio.channels.channel.close": [
        "java.nio.channels.Channel.close()"
    ],
    "java.security.interfaces.rsaprivatecrtkey.getprimeexponentp": [
        "java.security.interfaces.RSAPrivateCrtKey.getPrimeExponentP()"
    ],
    "javax.activation.urldatasource.geturl": [
        "javax.activation.URLDataSource.getURL()"
    ],
    "javax.swing.filechooser.filesystemview.ishiddenfile": [
        "javax.swing.filechooser.FileSystemView.isHiddenFile(java.io.File)"
    ],
    "javax.swing.plaf.multi.multiscrollpaneui.installui": [
        "javax.swing.plaf.multi.MultiScrollPaneUI.installUI(javax.swing.JComponent)"
    ],
    "javax.swing.jtable.geteditorcomponent": [
        "javax.swing.JTable.getEditorComponent()"
    ],
    "javax.swing.plaf.synth.synthgraphicsutils.computestringwidth": [
        "javax.swing.plaf.synth.SynthGraphicsUtils.computeStringWidth(javax.swing.plaf.synth.SynthContext,java.awt.Font,java.awt.FontMetrics,java.lang.String)"
    ],
    "java.util.logging.logger.setparent": [
        "java.util.logging.Logger.setParent(java.util.logging.Logger)"
    ],
    "java.text.breakiterator.first": [
        "java.text.BreakIterator.first()"
    ],
    "javax.swing.text.stylecontext.getstaticattribute": [
        "javax.swing.text.StyleContext.getStaticAttribute(java.lang.Object)"
    ],
    "java.sql.preparedstatement.setblob": [
        "java.sql.PreparedStatement.setBlob(int,java.io.InputStream)",
        "java.sql.PreparedStatement.setBlob(int,java.sql.Blob)",
        "java.sql.PreparedStatement.setBlob(int,java.io.InputStream,long)"
    ],
    "java.rmi.server.servercloneexception.getcause": [
        "java.rmi.server.ServerCloneException.getCause()"
    ],
    "javax.sql.rowset.setconcurrency": [
        "javax.sql.RowSet.setConcurrency(int)"
    ],
    "java.awt.fontmetrics.getheight": [
        "java.awt.FontMetrics.getHeight()"
    ],
    "javax.swing.plaf.basic.basictreeui.setselectionmodel": [
        "javax.swing.plaf.basic.BasicTreeUI.setSelectionModel(javax.swing.tree.TreeSelectionModel)"
    ],
    "java.awt.renderinghints.clone": [
        "java.awt.RenderingHints.clone()"
    ],
    "java.time.format.datetimeformatter.withresolverstyle": [
        "java.time.format.DateTimeFormatter.withResolverStyle(java.time.format.ResolverStyle)"
    ],
    "javax.xml.soap.soapfault.addfaultreasontext": [
        "javax.xml.soap.SOAPFault.addFaultReasonText(java.lang.String,java.util.Locale)"
    ],
    "javax.swing.undo.undomanager.redo": [
        "javax.swing.undo.UndoManager.redo()"
    ],
    "java.nio.file.attribute.userdefinedfileattributeview.read": [
        "java.nio.file.attribute.UserDefinedFileAttributeView.read(java.lang.String,java.nio.ByteBuffer)"
    ],
    "java.util.deque.iterator": [
        "java.util.Deque.iterator()"
    ],
    "javax.swing.uimanager.lookandfeelinfo.getclassname": [
        "javax.swing.UIManager.LookAndFeelInfo.getClassName()"
    ],
    "javax.script.abstractscriptengine.get": [
        "javax.script.AbstractScriptEngine.get(java.lang.String)"
    ],
    "javax.swing.plaf.multi.multidesktoppaneui.uninstallui": [
        "javax.swing.plaf.multi.MultiDesktopPaneUI.uninstallUI(javax.swing.JComponent)"
    ],
    "java.text.messageformat.getformats": [
        "java.text.MessageFormat.getFormats()"
    ],
    "java.util.concurrent.executorservice.awaittermination": [
        "java.util.concurrent.ExecutorService.awaitTermination(long,java.util.concurrent.TimeUnit)"
    ],
    "javax.sql.rowset.setdouble": [
        "javax.sql.RowSet.setDouble(java.lang.String,double)",
        "javax.sql.RowSet.setDouble(int,double)"
    ],
    "javax.swing.japplet.getglasspane": [
        "javax.swing.JApplet.getGlassPane()"
    ],
    "javax.swing.plaf.basic.basictextui.paintbackground": [
        "javax.swing.plaf.basic.BasicTextUI.paintBackground(java.awt.Graphics)"
    ],
    "javax.swing.jtree.getrowbounds": [
        "javax.swing.JTree.getRowBounds(int)"
    ],
    "java.awt.dnd.dragsourcecontext.dragover": [
        "java.awt.dnd.DragSourceContext.dragOver(java.awt.dnd.DragSourceDragEvent)"
    ],
    "javax.xml.ws.dispatch.invokeoneway": [
        "javax.xml.ws.Dispatch.invokeOneWay(javax.xml.ws.Dispatch)"
    ],
    "java.lang.reflect.field.setdouble": [
        "java.lang.reflect.Field.setDouble(java.lang.Object,double)"
    ],
    "javax.swing.text.styleconstants.setforeground": [
        "javax.swing.text.StyleConstants.setForeground(javax.swing.text.MutableAttributeSet,java.awt.Color)"
    ],
    "java.io.bytearrayinputstream.marksupported": [
        "java.io.ByteArrayInputStream.markSupported()"
    ],
    "java.util.concurrent.concurrenthashmap.reduceentriestoint": [
        "java.util.concurrent.ConcurrentHashMap.reduceEntriesToInt(long,,java.util.concurrent.ConcurrentHashMap>>,int,java.util.function.IntBinaryOperator)"
    ],
    "java.math.biginteger.intvalue": [
        "java.math.BigInteger.intValue()"
    ],
    "javax.swing.jcolorchooser.getaccessiblecontext": [
        "javax.swing.JColorChooser.getAccessibleContext()"
    ],
    "java.sql.resultset.updateclob": [
        "java.sql.ResultSet.updateClob(java.lang.String,java.io.Reader)",
        "java.sql.ResultSet.updateClob(java.lang.String,java.io.Reader,long)",
        "java.sql.ResultSet.updateClob(int,java.io.Reader,long)",
        "java.sql.ResultSet.updateClob(int,java.io.Reader)",
        "java.sql.ResultSet.updateClob(java.lang.String,java.sql.Clob)",
        "java.sql.ResultSet.updateClob(int,java.sql.Clob)"
    ],
    "java.awt.keyboardfocusmanager.addkeyeventdispatcher": [
        "java.awt.KeyboardFocusManager.addKeyEventDispatcher(java.awt.KeyEventDispatcher)"
    ],
    "java.awt.image.renderable.contextualrenderedimagefactory.create": [
        "java.awt.image.renderable.ContextualRenderedImageFactory.create(java.awt.image.renderable.RenderContext,java.awt.image.renderable.ParameterBlock)"
    ],
    "javax.swing.plaf.multi.multitoolbarui.getuis": [
        "javax.swing.plaf.multi.MultiToolBarUI.getUIs()"
    ],
    "java.nio.channels.filechannel.mapmode.tostring": [
        "java.nio.channels.FileChannel.MapMode.toString()"
    ],
    "org.omg.dynamicany.dynanyoperations.insert_float": [
        "org.omg.DynamicAny.DynAnyOperations.insert_float(float)"
    ],
    "org.omg.corba.portable.inputstream.read_ushort_array": [
        "org.omg.CORBA.portable.InputStream.read_ushort_array(short[],int,int)"
    ],
    "java.awt.font.textlayout.getvisualhighlightshape": [
        "java.awt.font.TextLayout.getVisualHighlightShape(java.awt.font.TextHitInfo,java.awt.font.TextHitInfo,java.awt.geom.Rectangle2D)",
        "java.awt.font.TextLayout.getVisualHighlightShape(java.awt.font.TextHitInfo,java.awt.font.TextHitInfo)"
    ],
    "java.time.zoneoffset.ofhoursminutes": [
        "java.time.ZoneOffset.ofHoursMinutes(int,int)"
    ],
    "javax.swing.jprogressbar.paramstring": [
        "javax.swing.JProgressBar.paramString()"
    ],
    "javax.sound.sampled.audioformat.encoding.tostring": [
        "javax.sound.sampled.AudioFormat.Encoding.toString()"
    ],
    "java.awt.graphics2d.getrenderinghint": [
        "java.awt.Graphics2D.getRenderingHint(java.awt.RenderingHints.Key)"
    ],
    "javax.net.serversocketfactory.getdefault": [
        "javax.net.ServerSocketFactory.getDefault()"
    ],
    "javax.swing.defaultboundedrangemodel.setmaximum": [
        "javax.swing.DefaultBoundedRangeModel.setMaximum(int)"
    ],
    "java.lang.instrument.instrumentation.getinitiatedclasses": [
        "java.lang.instrument.Instrumentation.getInitiatedClasses(java.lang.ClassLoader)"
    ],
    "java.awt.image.indexcolormodel.tostring": [
        "java.awt.image.IndexColorModel.toString()"
    ],
    "java.awt.systemtray.gettrayiconsize": [
        "java.awt.SystemTray.getTrayIconSize()"
    ],
    "java.io.bytearrayinputstream.close": [
        "java.io.ByteArrayInputStream.close()"
    ],
    "java.io.pushbackreader.read": [
        "java.io.PushbackReader.read()",
        "java.io.PushbackReader.read(char[],int,int)"
    ],
    "javax.print.event.printjobattributeevent.getattributes": [
        "javax.print.event.PrintJobAttributeEvent.getAttributes()"
    ],
    "javax.swing.jpopupmenu.addmenukeylistener": [
        "javax.swing.JPopupMenu.addMenuKeyListener(javax.swing.event.MenuKeyListener)"
    ],
    "java.util.concurrent.completionstage.runafterbothasync": [
        "java.util.concurrent.CompletionStage.runAfterBothAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable,java.util.concurrent.Executor)",
        "java.util.concurrent.CompletionStage.runAfterBothAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)"
    ],
    "javax.management.timer.timer.postderegister": [
        "javax.management.timer.Timer.postDeregister()"
    ],
    "java.util.stream.intstream.average": [
        "java.util.stream.IntStream.average()"
    ],
    "javax.management.mbeanpermission.hashcode": [
        "javax.management.MBeanPermission.hashCode()"
    ],
    "java.nio.buffer.hasarray": [
        "java.nio.Buffer.hasArray()"
    ],
    "java.sql.rowid.equals": [
        "java.sql.RowId.equals(java.lang.Object)"
    ],
    "org.omg.dynamicany._dynunionstub.get_octet": [
        "org.omg.DynamicAny._DynUnionStub.get_octet()"
    ],
    "javax.security.auth.kerberos.servicepermission.implies": [
        "javax.security.auth.kerberos.ServicePermission.implies(java.security.Permission)"
    ],
    "javax.swing.text.view.getchildallocation": [
        "javax.swing.text.View.getChildAllocation(int,java.awt.Shape)"
    ],
    "org.omg.dynamicany._dynvaluestub.from_any": [
        "org.omg.DynamicAny._DynValueStub.from_any(org.omg.CORBA.Any)"
    ],
    "javax.swing.abstractaction.putvalue": [
        "javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)"
    ],
    "javax.swing.plaf.synth.synthtreeui.update": [
        "javax.swing.plaf.synth.SynthTreeUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.sql.statement.getlargemaxrows": [
        "java.sql.Statement.getLargeMaxRows()"
    ],
    "javax.lang.model.util.simpleannotationvaluevisitor6.visitfloat": [
        "javax.lang.model.util.SimpleAnnotationValueVisitor6.visitFloat(float,javax.lang.model.util.SimpleAnnotationValueVisitor6)"
    ],
    "javax.swing.event.rowsorterevent.getsource": [
        "javax.swing.event.RowSorterEvent.getSource()"
    ],
    "java.awt.font.texthitinfo.leading": [
        "java.awt.font.TextHitInfo.leading(int)"
    ],
    "java.time.yearmonth.from": [
        "java.time.YearMonth.from(java.time.temporal.TemporalAccessor)"
    ],
    "org.w3c.dom.events.mutationevent.getrelatednode": [
        "org.w3c.dom.events.MutationEvent.getRelatedNode()"
    ],
    "org.omg.portableserver.portable.delegate.this_object": [
        "org.omg.PortableServer.portable.Delegate.this_object(org.omg.PortableServer.Servant)"
    ],
    "javax.net.ssl.handshakecompletedevent.getciphersuite": [
        "javax.net.ssl.HandshakeCompletedEvent.getCipherSuite()"
    ],
    "javax.rmi.corba.utildelegate.writeany": [
        "javax.rmi.CORBA.UtilDelegate.writeAny(org.omg.CORBA.portable.OutputStream,java.lang.Object)"
    ],
    "java.awt.image.volatileimage.getheight": [
        "java.awt.image.VolatileImage.getHeight()"
    ],
    "java.security.cert.certificate.certificaterep.readresolve": [
        "java.security.cert.Certificate.CertificateRep.readResolve()"
    ],
    "javax.swing.jspinner.getmodel": [
        "javax.swing.JSpinner.getModel()"
    ],
    "java.awt.dnd.droptargetdropevent.getcurrentdataflavorsaslist": [
        "java.awt.dnd.DropTargetDropEvent.getCurrentDataFlavorsAsList()"
    ],
    "javax.imageio.spi.imagereaderspi.getimagewriterspinames": [
        "javax.imageio.spi.ImageReaderSpi.getImageWriterSpiNames()"
    ],
    "javax.imageio.metadata.iiometadata.getstandardcompressionnode": [
        "javax.imageio.metadata.IIOMetadata.getStandardCompressionNode()"
    ],
    "javax.swing.plaf.multi.multidesktopiconui.getuis": [
        "javax.swing.plaf.multi.MultiDesktopIconUI.getUIs()"
    ],
    "java.awt.image.singlepixelpackedsamplemodel.createdatabuffer": [
        "java.awt.image.SinglePixelPackedSampleModel.createDataBuffer()"
    ],
    "java.util.concurrent.phaser.getroot": [
        "java.util.concurrent.Phaser.getRoot()"
    ],
    "java.util.list.sublist": [
        "java.util.List.subList(int,int)"
    ],
    "javax.print.attribute.hashattributeset.hashcode": [
        "javax.print.attribute.HashAttributeSet.hashCode()"
    ],
    "javax.swing.abstractbutton.setmnemonic": [
        "javax.swing.AbstractButton.setMnemonic(int)"
    ],
    "java.util.linkedlist.add": [
        "java.util.LinkedList.add(int,java.util.LinkedList)",
        "java.util.LinkedList.add(int,E)",
        "java.util.LinkedList.add(E)",
        "java.util.LinkedList.add(java.util.LinkedList)"
    ],
    "java.time.chrono.isoera.getvalue": [
        "java.time.chrono.IsoEra.getValue()"
    ],
    "java.lang.string.codepointcount": [
        "java.lang.String.codePointCount(int,int)"
    ],
    "javax.swing.jeditorpane.seteditorkit": [
        "javax.swing.JEditorPane.setEditorKit(javax.swing.text.EditorKit)"
    ],
    "javax.swing.defaultbuttonmodel.fireitemstatechanged": [
        "javax.swing.DefaultButtonModel.fireItemStateChanged(java.awt.event.ItemEvent)"
    ],
    "javax.management.mbeanoperationinfo.getreturntype": [
        "javax.management.MBeanOperationInfo.getReturnType()"
    ],
    "javax.swing.plaf.synth.synthsplitpaneui.paintborder": [
        "javax.swing.plaf.synth.SynthSplitPaneUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.jspinner.seteditor": [
        "javax.swing.JSpinner.setEditor(javax.swing.JComponent)"
    ],
    "java.net.interfaceaddress.getnetworkprefixlength": [
        "java.net.InterfaceAddress.getNetworkPrefixLength()"
    ],
    "java.text.decimalformatsymbols.setpermill": [
        "java.text.DecimalFormatSymbols.setPerMill(char)"
    ],
    "java.time.duration.dividedby": [
        "java.time.Duration.dividedBy(long)"
    ],
    "java.net.urlconnection.getcontent": [
        "java.net.URLConnection.getContent(java.lang.Class[])",
        "java.net.URLConnection.getContent(java.lang.Class)",
        "java.net.URLConnection.getContent()"
    ],
    "java.awt.image.writableraster.createwritabletranslatedchild": [
        "java.awt.image.WritableRaster.createWritableTranslatedChild(int,int)"
    ],
    "javax.imageio.imagewriteparam.getcompressiontype": [
        "javax.imageio.ImageWriteParam.getCompressionType()"
    ],
    "javax.swing.grouplayout.sethonorsvisibility": [
        "javax.swing.GroupLayout.setHonorsVisibility(java.awt.Component,java.lang.Boolean)",
        "javax.swing.GroupLayout.setHonorsVisibility(boolean)"
    ],
    "javax.sound.midi.transmitter.close": [
        "javax.sound.midi.Transmitter.close()"
    ],
    "java.nio.channels.selectablechannel.isregistered": [
        "java.nio.channels.SelectableChannel.isRegistered()"
    ],
    "javax.swing.plaf.multi.multifilechooserui.getapprovebuttontext": [
        "javax.swing.plaf.multi.MultiFileChooserUI.getApproveButtonText(javax.swing.JFileChooser)"
    ],
    "javax.script.abstractscriptengine.getcontext": [
        "javax.script.AbstractScriptEngine.getContext()"
    ],
    "org.omg.corba.typecodeholder._read": [
        "org.omg.CORBA.TypeCodeHolder._read(org.omg.CORBA.portable.InputStream)"
    ],
    "java.time.offsetdatetime.plusweeks": [
        "java.time.OffsetDateTime.plusWeeks(long)"
    ],
    "java.security.signaturespi.enginesign": [
        "java.security.SignatureSpi.engineSign()",
        "java.security.SignatureSpi.engineSign(byte[],int,int)"
    ],
    "java.util.function.doublepredicate.or": [
        "java.util.function.DoublePredicate.or(java.util.function.DoublePredicate)"
    ],
    "javax.management.openmbean.tabulardata.get": [
        "javax.management.openmbean.TabularData.get(java.lang.Object[])"
    ],
    "java.awt.toolkit.createscrollpane": [
        "java.awt.Toolkit.createScrollPane(java.awt.ScrollPane)"
    ],
    "java.awt.image.pixelgrabber.setcolormodel": [
        "java.awt.image.PixelGrabber.setColorModel(java.awt.image.ColorModel)"
    ],
    "java.net.serversocket.getinetaddress": [
        "java.net.ServerSocket.getInetAddress()"
    ],
    "javax.swing.text.jtextcomponent.getmargin": [
        "javax.swing.text.JTextComponent.getMargin()"
    ],
    "javax.swing.plaf.multi.multiinternalframeui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiInternalFrameUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "java.security.cert.x509certselector.getauthoritykeyidentifier": [
        "java.security.cert.X509CertSelector.getAuthorityKeyIdentifier()"
    ],
    "java.nio.channels.asynchronoussocketchannel.open": [
        "java.nio.channels.AsynchronousSocketChannel.open(java.nio.channels.AsynchronousChannelGroup)",
        "java.nio.channels.AsynchronousSocketChannel.open()"
    ],
    "javax.management.modelmbean.modelmbeannotificationbroadcaster.removeattributechangenotificationlistener": [
        "javax.management.modelmbean.ModelMBeanNotificationBroadcaster.removeAttributeChangeNotificationListener(javax.management.NotificationListener,java.lang.String)"
    ],
    "java.sql.parametermetadata.getparametertype": [
        "java.sql.ParameterMetaData.getParameterType(int)"
    ],
    "java.lang.reflect.typevariable.getname": [
        "java.lang.reflect.TypeVariable.getName()"
    ],
    "javax.print.attribute.standard.colorsupported.getenumvaluetable": [
        "javax.print.attribute.standard.ColorSupported.getEnumValueTable()"
    ],
    "java.beans.eventhandler.geteventpropertyname": [
        "java.beans.EventHandler.getEventPropertyName()"
    ],
    "javax.naming.spi.dirstatefactory.getstatetobind": [
        "javax.naming.spi.DirStateFactory.getStateToBind(java.lang.Object,javax.naming.Name,javax.naming.Context,,?>,javax.naming.directory.Attributes)"
    ],
    "java.awt.checkboxgroup.getselectedcheckbox": [
        "java.awt.CheckboxGroup.getSelectedCheckbox()"
    ],
    "java.util.stream.longstream.asdoublestream": [
        "java.util.stream.LongStream.asDoubleStream()"
    ],
    "javax.swing.plaf.multi.multibuttonui.getminimumsize": [
        "javax.swing.plaf.multi.MultiButtonUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "javax.sound.midi.sequencer.start": [
        "javax.sound.midi.Sequencer.start()"
    ],
    "java.awt.im.spi.inputmethod.getcontrolobject": [
        "java.awt.im.spi.InputMethod.getControlObject()"
    ],
    "javax.swing.text.html.listview.paintchild": [
        "javax.swing.text.html.ListView.paintChild(java.awt.Graphics,java.awt.Rectangle,int)"
    ],
    "javax.sound.midi.midichannel.getpitchbend": [
        "javax.sound.midi.MidiChannel.getPitchBend()"
    ],
    "java.util.prefs.abstractpreferences.flush": [
        "java.util.prefs.AbstractPreferences.flush()"
    ],
    "java.awt.geom.line2d.relativeccw": [
        "java.awt.geom.Line2D.relativeCCW(java.awt.geom.Point2D)"
    ],
    "java.awt.font.opentype.getfonttable": [
        "java.awt.font.OpenType.getFontTable(java.lang.String)",
        "java.awt.font.OpenType.getFontTable(int)",
        "java.awt.font.OpenType.getFontTable(int,int,int)",
        "java.awt.font.OpenType.getFontTable(java.lang.String,int,int)"
    ],
    "javax.imageio.imagetypespecifier.createpacked": [
        "javax.imageio.ImageTypeSpecifier.createPacked(java.awt.color.ColorSpace,int,int,int,int,int,boolean)"
    ],
    "javax.management.openmbean.tabulardata.remove": [
        "javax.management.openmbean.TabularData.remove(java.lang.Object[])"
    ],
    "javax.lang.model.util.elements.getbinaryname": [
        "javax.lang.model.util.Elements.getBinaryName(javax.lang.model.element.TypeElement)"
    ],
    "javax.swing.event.documentevent.getoffset": [
        "javax.swing.event.DocumentEvent.getOffset()"
    ],
    "java.util.logging.logmanager.reset": [
        "java.util.logging.LogManager.reset()"
    ],
    "org.omg.dynamicany._dynvaluestub.get_members": [
        "org.omg.DynamicAny._DynValueStub.get_members()"
    ],
    "javax.accessibility.accessiblebundle.todisplaystring": [
        "javax.accessibility.AccessibleBundle.toDisplayString(java.lang.String,java.util.Locale)",
        "javax.accessibility.AccessibleBundle.toDisplayString()",
        "javax.accessibility.AccessibleBundle.toDisplayString(java.util.Locale)"
    ],
    "javax.swing.grouplayout.minimumlayoutsize": [
        "javax.swing.GroupLayout.minimumLayoutSize(java.awt.Container)"
    ],
    "javax.swing.jtable.getdefaulteditor": [
        "javax.swing.JTable.getDefaultEditor(java.lang.Class<?>)"
    ],
    "java.sql.databasemetadata.supportsnamedparameters": [
        "java.sql.DatabaseMetaData.supportsNamedParameters()"
    ],
    "java.util.vector.capacity": [
        "java.util.Vector.capacity()"
    ],
    "javax.swing.scrollpanelayout.preferredlayoutsize": [
        "javax.swing.ScrollPaneLayout.preferredLayoutSize(java.awt.Container)"
    ],
    "javax.swing.tree.variableheightlayoutcache.getpreferredheight": [
        "javax.swing.tree.VariableHeightLayoutCache.getPreferredHeight()"
    ],
    "java.time.chrono.isochronology.resolvedate": [
        "java.time.chrono.IsoChronology.resolveDate(,java.lang.Long>,java.time.format.ResolverStyle)"
    ],
    "javax.swing.filechooser.filesystemview.createfileobject": [
        "javax.swing.filechooser.FileSystemView.createFileObject(java.io.File,java.lang.String)",
        "javax.swing.filechooser.FileSystemView.createFileObject(java.lang.String)"
    ],
    "java.lang.classloader.getresource": [
        "java.lang.ClassLoader.getResource(java.lang.String)"
    ],
    "java.rmi.activation.activationgroupid.hashcode": [
        "java.rmi.activation.ActivationGroupID.hashCode()"
    ],
    "java.time.zone.zoneoffsettransitionrule.getmonth": [
        "java.time.zone.ZoneOffsetTransitionRule.getMonth()"
    ],
    "java.beans.beancontext.beancontextevent.setpropagatedfrom": [
        "java.beans.beancontext.BeanContextEvent.setPropagatedFrom(java.beans.beancontext.BeanContext)"
    ],
    "java.util.zip.inflater.setinput": [
        "java.util.zip.Inflater.setInput(byte[])",
        "java.util.zip.Inflater.setInput(byte[],int,int)"
    ],
    "javax.swing.plaf.synth.synthpainter.painttextareabackground": [
        "javax.swing.plaf.synth.SynthPainter.paintTextAreaBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.accessibility.accessiblecontext.getaccessibledescription": [
        "javax.accessibility.AccessibleContext.getAccessibleDescription()"
    ],
    "javax.management.timer.timernotification.getnotificationid": [
        "javax.management.timer.TimerNotification.getNotificationID()"
    ],
    "java.awt.dnd.droptargetcontext.gettargetactions": [
        "java.awt.dnd.DropTargetContext.getTargetActions()"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getlayoutstyle": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getLayoutStyle()"
    ],
    "javax.swing.plaf.synth.synthstyle.getcolor": [
        "javax.swing.plaf.synth.SynthStyle.getColor(javax.swing.plaf.synth.SynthContext,javax.swing.plaf.synth.ColorType)"
    ],
    "java.awt.event.paintevent.setupdaterect": [
        "java.awt.event.PaintEvent.setUpdateRect(java.awt.Rectangle)"
    ],
    "javax.swing.plaf.multi.multitextui.geteditorkit": [
        "javax.swing.plaf.multi.MultiTextUI.getEditorKit(javax.swing.text.JTextComponent)"
    ],
    "java.awt.adjustable.setunitincrement": [
        "java.awt.Adjustable.setUnitIncrement(int)"
    ],
    "java.awt.scrollbar.getvisibleamount": [
        "java.awt.Scrollbar.getVisibleAmount()"
    ],
    "java.time.offsetdatetime.tolocaldatetime": [
        "java.time.OffsetDateTime.toLocalDateTime()"
    ],
    "java.awt.component.getforeground": [
        "java.awt.Component.getForeground()"
    ],
    "javax.script.simplescriptcontext.getattribute": [
        "javax.script.SimpleScriptContext.getAttribute(java.lang.String,int)",
        "javax.script.SimpleScriptContext.getAttribute(java.lang.String)"
    ],
    "java.sql.statement.setescapeprocessing": [
        "java.sql.Statement.setEscapeProcessing(boolean)"
    ],
    "java.awt.splashscreen.getsize": [
        "java.awt.SplashScreen.getSize()"
    ],
    "java.util.concurrent.executors.privilegedthreadfactory": [
        "java.util.concurrent.Executors.privilegedThreadFactory()"
    ],
    "javax.xml.ws.spi.http.httpexchange.getattributenames": [
        "javax.xml.ws.spi.http.HttpExchange.getAttributeNames()"
    ],
    "javax.swing.plaf.synth.synthmenuui.paint": [
        "javax.swing.plaf.synth.SynthMenuUI.paint(java.awt.Graphics,javax.swing.JComponent)",
        "javax.swing.plaf.synth.SynthMenuUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)"
    ],
    "javax.swing.plaf.synth.synthpopupmenuui.paint": [
        "javax.swing.plaf.synth.SynthPopupMenuUI.paint(java.awt.Graphics,javax.swing.JComponent)",
        "javax.swing.plaf.synth.SynthPopupMenuUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)"
    ],
    "org.w3c.dom.events.mutationevent.getprevvalue": [
        "org.w3c.dom.events.MutationEvent.getPrevValue()"
    ],
    "javax.swing.text.defaultstyleddocument.getstylenames": [
        "javax.swing.text.DefaultStyledDocument.getStyleNames()"
    ],
    "java.sql.resultset.updatebinarystream": [
        "java.sql.ResultSet.updateBinaryStream(int,java.io.InputStream)",
        "java.sql.ResultSet.updateBinaryStream(java.lang.String,java.io.InputStream,int)",
        "java.sql.ResultSet.updateBinaryStream(int,java.io.InputStream,int)",
        "java.sql.ResultSet.updateBinaryStream(java.lang.String,java.io.InputStream)",
        "java.sql.ResultSet.updateBinaryStream(int,java.io.InputStream,long)",
        "java.sql.ResultSet.updateBinaryStream(java.lang.String,java.io.InputStream,long)"
    ],
    "javax.imageio.stream.imageoutputstream.writelong": [
        "javax.imageio.stream.ImageOutputStream.writeLong(long)"
    ],
    "javax.management.openmbean.openmbeaninfo.tostring": [
        "javax.management.openmbean.OpenMBeanInfo.toString()"
    ],
    "javax.swing.defaultlistselectionmodel.insertindexinterval": [
        "javax.swing.DefaultListSelectionModel.insertIndexInterval(int,int,boolean)"
    ],
    "java.util.abstractlist.indexof": [
        "java.util.AbstractList.indexOf(java.lang.Object)"
    ],
    "javax.management.openmbean.tabulartype.tostring": [
        "javax.management.openmbean.TabularType.toString()"
    ],
    "org.w3c.dom.element.getschematypeinfo": [
        "org.w3c.dom.Element.getSchemaTypeInfo()"
    ],
    "java.security.cert.x509crl.getthisupdate": [
        "java.security.cert.X509CRL.getThisUpdate()"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.getleadselectionrow": [
        "javax.swing.tree.DefaultTreeSelectionModel.getLeadSelectionRow()"
    ],
    "java.lang.long.compareunsigned": [
        "java.lang.Long.compareUnsigned(long,long)"
    ],
    "java.awt.image.singlepixelpackedsamplemodel.getbitmasks": [
        "java.awt.image.SinglePixelPackedSampleModel.getBitMasks()"
    ],
    "javax.print.attribute.standard.colorsupported.getstringtable": [
        "javax.print.attribute.standard.ColorSupported.getStringTable()"
    ],
    "javax.xml.stream.xmlinputfactory.newinstance": [
        "javax.xml.stream.XMLInputFactory.newInstance()"
    ],
    "javax.sound.midi.spi.midideviceprovider.getdevice": [
        "javax.sound.midi.spi.MidiDeviceProvider.getDevice(javax.sound.midi.MidiDevice.Info)"
    ],
    "java.security.cert.certificatefactoryspi.enginegetcertpathencodings": [
        "java.security.cert.CertificateFactorySpi.engineGetCertPathEncodings()"
    ],
    "javax.print.attribute.standard.printerisacceptingjobs.getstringtable": [
        "javax.print.attribute.standard.PrinterIsAcceptingJobs.getStringTable()"
    ],
    "javax.swing.plaf.synth.synthcheckboxmenuitemui.createui": [
        "javax.swing.plaf.synth.SynthCheckBoxMenuItemUI.createUI(javax.swing.JComponent)"
    ],
    "java.net.inetaddress.tostring": [
        "java.net.InetAddress.toString()"
    ],
    "javax.swing.jdesktoppane.getallframes": [
        "javax.swing.JDesktopPane.getAllFrames()"
    ],
    "javax.xml.ws.spi.http.httpcontext.getattribute": [
        "javax.xml.ws.spi.http.HttpContext.getAttribute(java.lang.String)"
    ],
    "java.awt.image.flush": [
        "java.awt.Image.flush()"
    ],
    "java.sql.resultset.getbinarystream": [
        "java.sql.ResultSet.getBinaryStream(int)",
        "java.sql.ResultSet.getBinaryStream(java.lang.String)"
    ],
    "java.awt.dnd.draggesturerecognizer.getcomponent": [
        "java.awt.dnd.DragGestureRecognizer.getComponent()"
    ],
    "org.ietf.jgss.gsscontext.unwrap": [
        "org.ietf.jgss.GSSContext.unwrap(java.io.InputStream,java.io.OutputStream,org.ietf.jgss.MessageProp)",
        "org.ietf.jgss.GSSContext.unwrap(byte[],int,int,org.ietf.jgss.MessageProp)"
    ],
    "javax.security.sasl.saslserverfactory.getmechanismnames": [
        "javax.security.sasl.SaslServerFactory.getMechanismNames(,?>)"
    ],
    "javax.imageio.imageio.setusecache": [
        "javax.imageio.ImageIO.setUseCache(boolean)"
    ],
    "java.awt.container.isfocustraversalpolicyprovider": [
        "java.awt.Container.isFocusTraversalPolicyProvider()"
    ],
    "org.omg.corba.nvlist.count": [
        "org.omg.CORBA.NVList.count()"
    ],
    "java.util.function.predicate.test": [
        "java.util.function.Predicate.test(T)",
        "java.util.function.Predicate.test(java.util.function.Predicate)"
    ],
    "java.lang.thread.activecount": [
        "java.lang.Thread.activeCount()"
    ],
    "javax.print.attribute.standard.datetimeatcompleted.getname": [
        "javax.print.attribute.standard.DateTimeAtCompleted.getName()"
    ],
    "javax.swing.plaf.synth.synthdesktoppaneui.paintborder": [
        "javax.swing.plaf.synth.SynthDesktopPaneUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.util.function.longbinaryoperator.applyaslong": [
        "java.util.function.LongBinaryOperator.applyAsLong(long,long)"
    ],
    "javax.xml.datatype.datatypefactory.newduration": [
        "javax.xml.datatype.DatatypeFactory.newDuration(boolean,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigDecimal)",
        "javax.xml.datatype.DatatypeFactory.newDuration(long)",
        "javax.xml.datatype.DatatypeFactory.newDuration(boolean,int,int,int,int,int,int)",
        "javax.xml.datatype.DatatypeFactory.newDuration(java.lang.String)"
    ],
    "javax.sound.sampled.audioinputstream.getformat": [
        "javax.sound.sampled.AudioInputStream.getFormat()"
    ],
    "javax.swing.plaf.multi.multicomboboxui.installui": [
        "javax.swing.plaf.multi.MultiComboBoxUI.installUI(javax.swing.JComponent)"
    ],
    "java.nio.file.spi.filesystemprovider.setattribute": [
        "java.nio.file.spi.FileSystemProvider.setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption)",
        "java.nio.file.spi.FileSystemProvider.setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption...)"
    ],
    "javax.swing.plaf.basic.basiccombopopup.createlist": [
        "javax.swing.plaf.basic.BasicComboPopup.createList()"
    ],
    "javax.rmi.corba.util.loadclass": [
        "javax.rmi.CORBA.Util.loadClass(java.lang.String,java.lang.String,java.lang.ClassLoader)"
    ],
    "javax.management.relation.rolelist.set": [
        "javax.management.relation.RoleList.set(int,javax.management.relation.Role)"
    ],
    "java.security.spec.ecfieldfp.getfieldsize": [
        "java.security.spec.ECFieldFp.getFieldSize()"
    ],
    "javax.swing.plaf.synth.synthtabbedpaneui.paint": [
        "javax.swing.plaf.synth.SynthTabbedPaneUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",
        "javax.swing.plaf.synth.SynthTabbedPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.text.html.stylesheet.removestylesheet": [
        "javax.swing.text.html.StyleSheet.removeStyleSheet(javax.swing.text.html.StyleSheet)"
    ],
    "java.time.duration.addto": [
        "java.time.Duration.addTo(java.time.temporal.Temporal)"
    ],
    "java.awt.toolkit.createcanvas": [
        "java.awt.Toolkit.createCanvas(java.awt.Canvas)"
    ],
    "java.util.stream.doublestream.concat": [
        "java.util.stream.DoubleStream.concat(java.util.stream.DoubleStream,java.util.stream.DoubleStream)"
    ],
    "javax.swing.defaultbuttonmodel.getmnemonic": [
        "javax.swing.DefaultButtonModel.getMnemonic()"
    ],
    "java.awt.graphics.dispose": [
        "java.awt.Graphics.dispose()"
    ],
    "javax.accessibility.accessibletable.getaccessiblecolumndescription": [
        "javax.accessibility.AccessibleTable.getAccessibleColumnDescription(int)"
    ],
    "java.nio.channels.seekablebytechannel.size": [
        "java.nio.channels.SeekableByteChannel.size()"
    ],
    "javax.tools.javafileobject.getaccesslevel": [
        "javax.tools.JavaFileObject.getAccessLevel()"
    ],
    "java.lang.long.sum": [
        "java.lang.Long.sum(long,long)"
    ],
    "javax.swing.jcomponent.isdoublebuffered": [
        "javax.swing.JComponent.isDoubleBuffered()"
    ],
    "java.util.locale.tolanguagetag": [
        "java.util.Locale.toLanguageTag()"
    ],
    "javax.swing.boundedrangemodel.setextent": [
        "javax.swing.BoundedRangeModel.setExtent(int)"
    ],
    "javax.swing.tree.defaulttreecelleditor.stopcellediting": [
        "javax.swing.tree.DefaultTreeCellEditor.stopCellEditing()"
    ],
    "javax.swing.jtabbedpane.inserttab": [
        "javax.swing.JTabbedPane.insertTab(java.lang.String,javax.swing.Icon,java.awt.Component,java.lang.String,int)"
    ],
    "javax.sql.rowset.baserowset.setpassword": [
        "javax.sql.rowset.BaseRowSet.setPassword(java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthtableui.paint": [
        "javax.swing.plaf.synth.SynthTableUI.paint(java.awt.Graphics,javax.swing.JComponent)",
        "javax.swing.plaf.synth.SynthTableUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)"
    ],
    "java.awt.shape.getbounds": [
        "java.awt.Shape.getBounds()"
    ],
    "java.time.period.withyears": [
        "java.time.Period.withYears(int)"
    ],
    "javax.xml.crypto.dsig.spec.xpathfilterparameterspec.getxpath": [
        "javax.xml.crypto.dsig.spec.XPathFilterParameterSpec.getXPath()"
    ],
    "java.rmi.activation.activationgroup.inactiveobject": [
        "java.rmi.activation.ActivationGroup.inactiveObject(java.rmi.activation.ActivationID)"
    ],
    "javax.swing.jlist.setlayoutorientation": [
        "javax.swing.JList.setLayoutOrientation(int)"
    ],
    "java.awt.list.removeitemlistener": [
        "java.awt.List.removeItemListener(java.awt.event.ItemListener)"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.getdefaultsize": [
        "javax.swing.plaf.basic.BasicComboBoxUI.getDefaultSize()"
    ],
    "org.omg.corba.request.invoke": [
        "org.omg.CORBA.Request.invoke()"
    ],
    "java.awt.event.inputevent.isconsumed": [
        "java.awt.event.InputEvent.isConsumed()"
    ],
    "javax.xml.crypto.dom.domurireference.gethere": [
        "javax.xml.crypto.dom.DOMURIReference.getHere()"
    ],
    "javax.swing.plaf.metal.metaltheme.getprimarycontrolhighlight": [
        "javax.swing.plaf.metal.MetalTheme.getPrimaryControlHighlight()"
    ],
    "java.time.chrono.japanesedate.with": [
        "java.time.chrono.JapaneseDate.with(java.time.temporal.TemporalAdjuster)"
    ],
    "java.time.format.resolverstyle.values": [
        "java.time.format.ResolverStyle.values()"
    ],
    "javax.swing.jcombobox.getitemlisteners": [
        "javax.swing.JComboBox.getItemListeners()"
    ],
    "javax.print.docflavor.getmimetype": [
        "javax.print.DocFlavor.getMimeType()"
    ],
    "java.sql.preparedstatement.setnstring": [
        "java.sql.PreparedStatement.setNString(int,java.lang.String)"
    ],
    "javax.swing.plaf.multi.multitreeui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiTreeUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "java.security.cert.certificate.getpublickey": [
        "java.security.cert.Certificate.getPublicKey()"
    ],
    "java.beans.beandescriptor.getcustomizerclass": [
        "java.beans.BeanDescriptor.getCustomizerClass()"
    ],
    "org.xml.sax.helpers.xmlreaderadapter.setdocumentlocator": [
        "org.xml.sax.helpers.XMLReaderAdapter.setDocumentLocator(org.xml.sax.Locator)"
    ],
    "org.omg.dynamicany._dynfixedstub.get_octet": [
        "org.omg.DynamicAny._DynFixedStub.get_octet()"
    ],
    "java.io.chararraywriter.append": [
        "java.io.CharArrayWriter.append(java.lang.CharSequence,int,int)",
        "java.io.CharArrayWriter.append(char)",
        "java.io.CharArrayWriter.append(java.lang.CharSequence)"
    ],
    "javax.swing.jtoolbar.createactioncomponent": [
        "javax.swing.JToolBar.createActionComponent(javax.swing.Action)"
    ],
    "javax.swing.plaf.multi.multitreeui.stopediting": [
        "javax.swing.plaf.multi.MultiTreeUI.stopEditing(javax.swing.JTree)"
    ],
    "java.time.instant.plus": [
        "java.time.Instant.plus(java.time.temporal.TemporalAmount)",
        "java.time.Instant.plus(long,java.time.temporal.TemporalUnit)"
    ],
    "javax.swing.text.compositeview.getleftinset": [
        "javax.swing.text.CompositeView.getLeftInset()"
    ],
    "java.util.prefs.preferences.importpreferences": [
        "java.util.prefs.Preferences.importPreferences(java.io.InputStream)"
    ],
    "javax.swing.text.compositeview.getview": [
        "javax.swing.text.CompositeView.getView(int)"
    ],
    "javax.sound.sampled.audioformat.getproperty": [
        "javax.sound.sampled.AudioFormat.getProperty(java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthinternalframeui.getcontext": [
        "javax.swing.plaf.synth.SynthInternalFrameUI.getContext(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.multi.multispinnerui.installui": [
        "javax.swing.plaf.multi.MultiSpinnerUI.installUI(javax.swing.JComponent)"
    ],
    "javax.swing.text.html.htmleditorkit.parser.parse": [
        "javax.swing.text.html.HTMLEditorKit.Parser.parse(java.io.Reader,javax.swing.text.html.HTMLEditorKit.ParserCallback,boolean)"
    ],
    "java.awt.geom.affinetransform.gettranslateinstance": [
        "java.awt.geom.AffineTransform.getTranslateInstance(double,double)"
    ],
    "javax.print.attribute.standard.jobmediasheets.getname": [
        "javax.print.attribute.standard.JobMediaSheets.getName()"
    ],
    "java.security.cert.x509certselector.getissuerasbytes": [
        "java.security.cert.X509CertSelector.getIssuerAsBytes()"
    ],
    "java.lang.management.memorymxbean.getobjectpendingfinalizationcount": [
        "java.lang.management.MemoryMXBean.getObjectPendingFinalizationCount()"
    ],
    "javax.management.dynamicmbean.getattribute": [
        "javax.management.DynamicMBean.getAttribute(java.lang.String)"
    ],
    "java.io.bufferedreader.reset": [
        "java.io.BufferedReader.reset()"
    ],
    "javax.print.printservicelookup.lookupprintservices": [
        "javax.print.PrintServiceLookup.lookupPrintServices(javax.print.DocFlavor,javax.print.attribute.AttributeSet)"
    ],
    "javax.rmi.corba.utildelegate.writeabstractobject": [
        "javax.rmi.CORBA.UtilDelegate.writeAbstractObject(org.omg.CORBA.portable.OutputStream,java.lang.Object)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.initcomponentdefaults": [
        "javax.swing.plaf.metal.MetalLookAndFeel.initComponentDefaults(javax.swing.UIDefaults)"
    ],
    "javax.swing.plaf.metal.metaltheme.getwindowtitlefont": [
        "javax.swing.plaf.metal.MetalTheme.getWindowTitleFont()"
    ],
    "javax.swing.jcolorchooser.paramstring": [
        "javax.swing.JColorChooser.paramString()"
    ],
    "org.omg.portableinterceptor.requestinfooperations.arguments": [
        "org.omg.PortableInterceptor.RequestInfoOperations.arguments()"
    ],
    "java.lang.management.memorypoolmxbean.setusagethreshold": [
        "java.lang.management.MemoryPoolMXBean.setUsageThreshold(long)"
    ],
    "java.io.file.getname": [
        "java.io.File.getName()"
    ],
    "java.util.concurrent.locks.readwritelock.writelock": [
        "java.util.concurrent.locks.ReadWriteLock.writeLock()"
    ],
    "javax.print.attribute.printjobattributeset.addall": [
        "javax.print.attribute.PrintJobAttributeSet.addAll(javax.print.attribute.AttributeSet)"
    ],
    "javax.swing.plaf.basic.basictreeui.updatedepthoffset": [
        "javax.swing.plaf.basic.BasicTreeUI.updateDepthOffset()"
    ],
    "java.text.decimalformat.setcurrency": [
        "java.text.DecimalFormat.setCurrency(java.util.Currency)"
    ],
    "java.util.concurrent.atomic.atomiclongfieldupdater.newupdater": [
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater(java.lang.Class<U>,java.lang.String)"
    ],
    "java.net.socket.setsolinger": [
        "java.net.Socket.setSoLinger(boolean,int)"
    ],
    "java.beans.beancontext.beancontextsupport.childjustremovedhook": [
        "java.beans.beancontext.BeanContextSupport.childJustRemovedHook(java.lang.Object,java.beans.beancontext.BeanContextSupport.BCSChild)"
    ],
    "javax.net.serversocketfactory.createserversocket": [
        "javax.net.ServerSocketFactory.createServerSocket(int)",
        "javax.net.ServerSocketFactory.createServerSocket(int,int)",
        "javax.net.ServerSocketFactory.createServerSocket(int,int,java.net.InetAddress)",
        "javax.net.ServerSocketFactory.createServerSocket()"
    ],
    "javax.swing.plaf.synth.synthpainter.painttoolbarcontentborder": [
        "javax.swing.plaf.synth.SynthPainter.paintToolBarContentBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",
        "javax.swing.plaf.synth.SynthPainter.paintToolBarContentBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)"
    ],
    "java.awt.gridbaglayout.arrangegrid": [
        "java.awt.GridBagLayout.ArrangeGrid(java.awt.Container)",
        "java.awt.GridBagLayout.arrangeGrid(java.awt.Container)"
    ],
    "javax.swing.text.keymap.setdefaultaction": [
        "javax.swing.text.Keymap.setDefaultAction(javax.swing.Action)"
    ],
    "java.awt.canvas.getbufferstrategy": [
        "java.awt.Canvas.getBufferStrategy()"
    ],
    "org.omg.dynamicany._dynfixedstub.next": [
        "org.omg.DynamicAny._DynFixedStub.next()"
    ],
    "java.time.offsetdatetime.with": [
        "java.time.OffsetDateTime.with(java.time.temporal.TemporalField,long)",
        "java.time.OffsetDateTime.with(java.time.temporal.TemporalAdjuster)"
    ],
    "java.awt.image.renderable.contextualrenderedimagefactory.getpropertynames": [
        "java.awt.image.renderable.ContextualRenderedImageFactory.getPropertyNames()"
    ],
    "javax.swing.plaf.basic.basicpanelui.getbaselineresizebehavior": [
        "javax.swing.plaf.basic.BasicPanelUI.getBaselineResizeBehavior(javax.swing.JComponent)"
    ],
    "java.time.offsetdatetime.plusdays": [
        "java.time.OffsetDateTime.plusDays(long)"
    ],
    "javax.swing.jcombobox.removepopupmenulistener": [
        "javax.swing.JComboBox.removePopupMenuListener(javax.swing.event.PopupMenuListener)"
    ],
    "java.security.cert.x509crlentry.getrevocationreason": [
        "java.security.cert.X509CRLEntry.getRevocationReason()"
    ],
    "javax.activation.mimetype.setprimarytype": [
        "javax.activation.MimeType.setPrimaryType(java.lang.String)"
    ],
    "org.omg.dynamicany._dynfixedstub.get_string": [
        "org.omg.DynamicAny._DynFixedStub.get_string()"
    ],
    "java.lang.stringbuilder.charat": [
        "java.lang.StringBuilder.charAt(int)"
    ],
    "java.lang.management.lockinfo.from": [
        "java.lang.management.LockInfo.from(javax.management.openmbean.CompositeData)"
    ],
    "javax.imageio.metadata.iiometadataformat.getobjectdefaultvalue": [
        "javax.imageio.metadata.IIOMetadataFormat.getObjectDefaultValue(java.lang.String)"
    ],
    "javax.swing.buttonmodel.setenabled": [
        "javax.swing.ButtonModel.setEnabled(boolean)"
    ],
    "javax.swing.jscrollbar.setminimum": [
        "javax.swing.JScrollBar.setMinimum(int)"
    ],
    "java.util.stream.doublestream.reduce": [
        "java.util.stream.DoubleStream.reduce(double,java.util.function.DoubleBinaryOperator)",
        "java.util.stream.DoubleStream.reduce(java.util.function.DoubleBinaryOperator)"
    ],
    "javax.swing.imageicon.setimage": [
        "javax.swing.ImageIcon.setImage(java.awt.Image)"
    ],
    "java.awt.list.getvisibleindex": [
        "java.awt.List.getVisibleIndex()"
    ],
    "org.w3c.dom.element.setattributenode": [
        "org.w3c.dom.Element.setAttributeNode(org.w3c.dom.Attr)"
    ],
    "java.net.socketimpl.getlocalport": [
        "java.net.SocketImpl.getLocalPort()"
    ],
    "java.awt.geom.quadcurve2d.getflatnesssq": [
        "java.awt.geom.QuadCurve2D.getFlatnessSq()",
        "java.awt.geom.QuadCurve2D.getFlatnessSq(double,double,double,double,double,double)",
        "java.awt.geom.QuadCurve2D.getFlatnessSq(double[],int)"
    ],
    "javax.swing.table.defaulttablecolumnmodel.getcolumnmodellisteners": [
        "javax.swing.table.DefaultTableColumnModel.getColumnModelListeners()"
    ],
    "javax.imageio.metadata.iiometadatanode.appendchild": [
        "javax.imageio.metadata.IIOMetadataNode.appendChild(org.w3c.dom.Node)"
    ],
    "javax.annotation.processing.completion.getmessage": [
        "javax.annotation.processing.Completion.getMessage()"
    ],
    "java.io.linenumberreader.getlinenumber": [
        "java.io.LineNumberReader.getLineNumber()"
    ],
    "javax.swing.sizerequirements.calculatetiledpositions": [
        "javax.swing.SizeRequirements.calculateTiledPositions(int,javax.swing.SizeRequirements,javax.swing.SizeRequirements[],int[],int[])",
        "javax.swing.SizeRequirements.calculateTiledPositions(int,javax.swing.SizeRequirements,javax.swing.SizeRequirements[],int[],int[],boolean)"
    ],
    "javax.swing.text.documentfilter.filterbypass.remove": [
        "javax.swing.text.DocumentFilter.FilterBypass.remove(int,int)"
    ],
    "java.lang.object.notifyall": [
        "java.lang.Object.notifyAll()"
    ],
    "javax.swing.text.compositeview.setinsets": [
        "javax.swing.text.CompositeView.setInsets(short,short,short,short)"
    ],
    "java.util.concurrent.threadpoolexecutor.getpoolsize": [
        "java.util.concurrent.ThreadPoolExecutor.getPoolSize()"
    ],
    "java.lang.throwable.printstacktrace": [
        "java.lang.Throwable.printStackTrace()"
    ],
    "java.text.collationelementiterator.settext": [
        "java.text.CollationElementIterator.setText(java.lang.String)",
        "java.text.CollationElementIterator.setText(java.text.CharacterIterator)"
    ],
    "javax.swing.buttonmodel.ispressed": [
        "javax.swing.ButtonModel.isPressed()"
    ],
    "java.util.concurrent.locks.reentrantlock.lockinterruptibly": [
        "java.util.concurrent.locks.ReentrantLock.lockInterruptibly()"
    ],
    "java.lang.management.runtimemxbean.getbootclasspath": [
        "java.lang.management.RuntimeMXBean.getBootClassPath()"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.uninstalllisteners": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.uninstallListeners()"
    ],
    "org.omg.dynamicany._dynstructstub.get_boolean": [
        "org.omg.DynamicAny._DynStructStub.get_boolean()"
    ],
    "java.time.offsettime.isafter": [
        "java.time.OffsetTime.isAfter(java.time.OffsetTime)"
    ],
    "java.util.concurrent.threadfactory.newthread": [
        "java.util.concurrent.ThreadFactory.newThread(java.lang.Runnable)"
    ],
    "javax.lang.model.type.typemirror.tostring": [
        "javax.lang.model.type.TypeMirror.toString()"
    ],
    "java.net.urlconnection.getallowuserinteraction": [
        "java.net.URLConnection.getAllowUserInteraction()"
    ],
    "javax.swing.uimanager.geticon": [
        "javax.swing.UIManager.getIcon(java.lang.Object,java.util.Locale)",
        "javax.swing.UIManager.getIcon(java.lang.Object)"
    ],
    "javax.swing.text.wrappedplainview.calculatebreakposition": [
        "javax.swing.text.WrappedPlainView.calculateBreakPosition(int,int)"
    ],
    "java.nio.file.filesystems.getdefault": [
        "java.nio.file.FileSystems.getDefault()"
    ],
    "java.util.logging.handler.getformatter": [
        "java.util.logging.Handler.getFormatter()"
    ],
    "org.omg.cosnaming._bindingiteratorstub.next_one": [
        "org.omg.CosNaming._BindingIteratorStub.next_one(org.omg.CosNaming.BindingHolder)"
    ],
    "javax.swing.plaf.basic.basicradiobuttonui.getdefaulticon": [
        "javax.swing.plaf.basic.BasicRadioButtonUI.getDefaultIcon()"
    ],
    "javax.swing.plaf.basic.basicfilechooserui.getacceptallfilefilter": [
        "javax.swing.plaf.basic.BasicFileChooserUI.getAcceptAllFileFilter(javax.swing.JFileChooser)"
    ],
    "javax.swing.abstractbutton.getmnemonic": [
        "javax.swing.AbstractButton.getMnemonic()"
    ],
    "javax.annotation.processing.processingenvironment.getsourceversion": [
        "javax.annotation.processing.ProcessingEnvironment.getSourceVersion()"
    ],
    "org.omg.dynamicany._dynvaluestub.insert_string": [
        "org.omg.DynamicAny._DynValueStub.insert_string(java.lang.String)"
    ],
    "java.awt.textfield.getactionlisteners": [
        "java.awt.TextField.getActionListeners()"
    ],
    "java.util.concurrent.threadpoolexecutor.allowcorethreadtimeout": [
        "java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)"
    ],
    "javax.swing.spinnernumbermodel.setstepsize": [
        "javax.swing.SpinnerNumberModel.setStepSize(java.lang.Number)"
    ],
    "javax.swing.text.glyphview.removeupdate": [
        "javax.swing.text.GlyphView.removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "java.security.domainloadstoreparameter.getconfiguration": [
        "java.security.DomainLoadStoreParameter.getConfiguration()"
    ],
    "javax.naming.event.namingevent.gettype": [
        "javax.naming.event.NamingEvent.getType()"
    ],
    "javax.security.auth.login.appconfigurationentry.getloginmodulename": [
        "javax.security.auth.login.AppConfigurationEntry.getLoginModuleName()"
    ],
    "java.nio.intbuffer.slice": [
        "java.nio.IntBuffer.slice()"
    ],
    "javax.script.scriptcontext.geterrorwriter": [
        "javax.script.ScriptContext.getErrorWriter()"
    ],
    "javax.swing.jpopupmenu.getinvoker": [
        "javax.swing.JPopupMenu.getInvoker()"
    ],
    "javax.management.dynamicmbean.getmbeaninfo": [
        "javax.management.DynamicMBean.getMBeanInfo()"
    ],
    "javax.swing.defaultbuttonmodel.getchangelisteners": [
        "javax.swing.DefaultButtonModel.getChangeListeners()"
    ],
    "java.sql.databasemetadata.getprimarykeys": [
        "java.sql.DatabaseMetaData.getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)"
    ],
    "java.util.stream.collectors.mapping": [
        "java.util.stream.Collectors.mapping(java.util.function.Function<? super,? extends U>,java.util.stream.Collector<? super,,R>)"
    ],
    "javax.management.modelmbean.requiredmodelmbean.addnotificationlistener": [
        "javax.management.modelmbean.RequiredModelMBean.addNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)"
    ],
    "java.awt.geom.affinetransform.settoquadrantrotation": [
        "java.awt.geom.AffineTransform.setToQuadrantRotation(int)",
        "java.awt.geom.AffineTransform.setToQuadrantRotation(int,double,double)"
    ],
    "java.awt.list.makevisible": [
        "java.awt.List.makeVisible(int)"
    ],
    "java.nio.floatbuffer.hasarray": [
        "java.nio.FloatBuffer.hasArray()"
    ],
    "java.util.concurrent.locks.abstractqueuedlongsynchronizer.conditionobject.await": [
        "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.await()"
    ],
    "java.util.concurrent.atomic.atomiclongarray.addandget": [
        "java.util.concurrent.atomic.AtomicLongArray.addAndGet(int,long)"
    ],
    "java.awt.font.linebreakmeasurer.nextlayout": [
        "java.awt.font.LineBreakMeasurer.nextLayout(float,int,boolean)",
        "java.awt.font.LineBreakMeasurer.nextLayout(float)"
    ],
    "java.awt.image.bufferedimage.istilewritable": [
        "java.awt.image.BufferedImage.isTileWritable(int,int)"
    ],
    "java.util.concurrent.atomic.atomicstampedreference.getstamp": [
        "java.util.concurrent.atomic.AtomicStampedReference.getStamp()"
    ],
    "javax.swing.jtree.createtreemodellistener": [
        "javax.swing.JTree.createTreeModelListener()"
    ],
    "javax.naming.directory.dircontext.modifyattributes": [
        "javax.naming.directory.DirContext.modifyAttributes(javax.naming.Name,javax.naming.directory.ModificationItem[])",
        "javax.naming.directory.DirContext.modifyAttributes(java.lang.String,int,javax.naming.directory.Attributes)",
        "javax.naming.directory.DirContext.modifyAttributes(java.lang.String,javax.naming.directory.ModificationItem[])",
        "javax.naming.directory.DirContext.modifyAttributes(javax.naming.Name,int,javax.naming.directory.Attributes)"
    ],
    "javax.swing.defaultrowsorter.modelwrapper.getcolumncount": [
        "javax.swing.DefaultRowSorter.ModelWrapper.getColumnCount()"
    ],
    "java.awt.geom.affinetransform.inversetransform": [
        "java.awt.geom.AffineTransform.inverseTransform(double[],int,double[],int,int)",
        "java.awt.geom.AffineTransform.inverseTransform(java.awt.geom.Point2D,java.awt.geom.Point2D)"
    ],
    "java.awt.image.raster.getpixel": [
        "java.awt.image.Raster.getPixel(int,int,int[])",
        "java.awt.image.Raster.getPixel(int,int,double[])",
        "java.awt.image.Raster.getPixel(int,int,float[])"
    ],
    "javax.swing.text.html.htmleditorkit.inserthtmltextaction.insertatboundary": [
        "javax.swing.text.html.HTMLEditorKit.InsertHTMLTextAction.insertAtBoundary(javax.swing.JEditorPane,javax.swing.text.html.HTMLDocument,int,javax.swing.text.Element,java.lang.String,javax.swing.text.html.HTML.Tag,javax.swing.text.html.HTML.Tag)"
    ],
    "javax.swing.plaf.multi.multidesktoppaneui.update": [
        "javax.swing.plaf.multi.MultiDesktopPaneUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.naming.context.addtoenvironment": [
        "javax.naming.Context.addToEnvironment(java.lang.String,java.lang.Object)"
    ],
    "javax.swing.plaf.optionpaneui.selectinitialvalue": [
        "javax.swing.plaf.OptionPaneUI.selectInitialValue(javax.swing.JOptionPane)"
    ],
    "javax.swing.plaf.basic.basicarrowbutton.getpreferredsize": [
        "javax.swing.plaf.basic.BasicArrowButton.getPreferredSize()"
    ],
    "org.w3c.dom.document.createattributens": [
        "org.w3c.dom.Document.createAttributeNS(java.lang.String,java.lang.String)"
    ],
    "javax.swing.swingworker.execute": [
        "javax.swing.SwingWorker.execute()"
    ],
    "java.awt.event.containerevent.paramstring": [
        "java.awt.event.ContainerEvent.paramString()"
    ],
    "java.util.concurrent.atomic.atomicintegerfieldupdater.getandaccumulate": [
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndAccumulate(T,int,java.util.function.IntBinaryOperator)",
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndAccumulate(java.util.concurrent.atomic.AtomicIntegerFieldUpdater,int,java.util.function.IntBinaryOperator)"
    ],
    "javax.swing.abstractbutton.getitemlisteners": [
        "javax.swing.AbstractButton.getItemListeners()"
    ],
    "java.util.concurrent.locks.reentrantlock.unlock": [
        "java.util.concurrent.locks.ReentrantLock.unlock()"
    ],
    "java.text.decimalformat.setmaximumfractiondigits": [
        "java.text.DecimalFormat.setMaximumFractionDigits(int)"
    ],
    "java.lang.classloader.findclass": [
        "java.lang.ClassLoader.findClass(java.lang.String)"
    ],
    "javax.imageio.metadata.iiometadata.getmetadataformat": [
        "javax.imageio.metadata.IIOMetadata.getMetadataFormat(java.lang.String)"
    ],
    "javax.naming.spi.namingmanager.getstatetobind": [
        "javax.naming.spi.NamingManager.getStateToBind(java.lang.Object,javax.naming.Name,javax.naming.Context,,?>)"
    ],
    "java.awt.scrollpane.iswheelscrollingenabled": [
        "java.awt.ScrollPane.isWheelScrollingEnabled()"
    ],
    "org.omg.corba.datainputstream.read_typecode": [
        "org.omg.CORBA.DataInputStream.read_TypeCode()"
    ],
    "java.util.concurrent.locks.abstractqueuedsynchronizer.hascontended": [
        "java.util.concurrent.locks.AbstractQueuedSynchronizer.hasContended()"
    ],
    "java.security.cert.x509crlentry.tostring": [
        "java.security.cert.X509CRLEntry.toString()"
    ],
    "javax.swing.jtextpane.setstyleddocument": [
        "javax.swing.JTextPane.setStyledDocument(javax.swing.text.StyledDocument)"
    ],
    "javax.swing.plaf.basic.basicsliderui.valueforxposition": [
        "javax.swing.plaf.basic.BasicSliderUI.valueForXPosition(int)"
    ],
    "javax.script.scriptenginemanager.getenginefactories": [
        "javax.script.ScriptEngineManager.getEngineFactories()"
    ],
    "java.awt.datatransfer.systemflavormap.decodejavamimetype": [
        "java.awt.datatransfer.SystemFlavorMap.decodeJavaMIMEType(java.lang.String)"
    ],
    "javax.crypto.secretkeyfactory.getinstance": [
        "javax.crypto.SecretKeyFactory.getInstance(java.lang.String)",
        "javax.crypto.SecretKeyFactory.getInstance(java.lang.String,java.lang.String)",
        "javax.crypto.SecretKeyFactory.getInstance(java.lang.String,java.security.Provider)"
    ],
    "java.net.urlconnection.getheaderfieldlong": [
        "java.net.URLConnection.getHeaderFieldLong(java.lang.String,long)"
    ],
    "javax.swing.text.html.stylesheet.getboxpainter": [
        "javax.swing.text.html.StyleSheet.getBoxPainter(javax.swing.text.AttributeSet)"
    ],
    "javax.imageio.stream.fileimageoutputstream.seek": [
        "javax.imageio.stream.FileImageOutputStream.seek(long)"
    ],
    "java.lang.reflect.field.getdouble": [
        "java.lang.reflect.Field.getDouble(java.lang.Object)"
    ],
    "java.awt.image.bufferedimage.getnumxtiles": [
        "java.awt.image.BufferedImage.getNumXTiles()"
    ],
    "java.util.deque.size": [
        "java.util.Deque.size()"
    ],
    "java.io.file.getcanonicalfile": [
        "java.io.File.getCanonicalFile()"
    ],
    "javax.xml.bind.datatypeconverterinterface.parseqname": [
        "javax.xml.bind.DatatypeConverterInterface.parseQName(java.lang.String,javax.xml.namespace.NamespaceContext)"
    ],
    "javax.swing.plaf.basic.basictreeui.getrowforpath": [
        "javax.swing.plaf.basic.BasicTreeUI.getRowForPath(javax.swing.JTree,javax.swing.tree.TreePath)"
    ],
    "javax.swing.text.stylecontext.writeattributeset": [
        "javax.swing.text.StyleContext.writeAttributeSet(java.io.ObjectOutputStream,javax.swing.text.AttributeSet)"
    ],
    "javax.swing.text.html.htmldocument.iterator.isvalid": [
        "javax.swing.text.html.HTMLDocument.Iterator.isValid()"
    ],
    "javax.swing.listmodel.removelistdatalistener": [
        "javax.swing.ListModel.removeListDataListener(javax.swing.event.ListDataListener)"
    ],
    "javax.print.attribute.standard.medianame.getenumvaluetable": [
        "javax.print.attribute.standard.MediaName.getEnumValueTable()"
    ],
    "java.net.socketimpl.shutdownoutput": [
        "java.net.SocketImpl.shutdownOutput()"
    ],
    "javax.print.attribute.standard.printermakeandmodel.getname": [
        "javax.print.attribute.standard.PrinterMakeAndModel.getName()"
    ],
    "javax.swing.plaf.basic.basiclistui.locationtoindex": [
        "javax.swing.plaf.basic.BasicListUI.locationToIndex(javax.swing.JList,java.awt.Point)"
    ],
    "java.nio.file.filesystem.provider": [
        "java.nio.file.FileSystem.provider()"
    ],
    "javax.swing.plaf.metal.metaltheme.getprimarycontrolinfo": [
        "javax.swing.plaf.metal.MetalTheme.getPrimaryControlInfo()"
    ],
    "javax.swing.plaf.basic.basicdirectorymodel.renamefile": [
        "javax.swing.plaf.basic.BasicDirectoryModel.renameFile(java.io.File,java.io.File)"
    ],
    "java.sql.resultset.getbytes": [
        "java.sql.ResultSet.getBytes(int)",
        "java.sql.ResultSet.getBytes(java.lang.String)"
    ],
    "java.awt.cursor.getsystemcustomcursor": [
        "java.awt.Cursor.getSystemCustomCursor(java.lang.String)"
    ],
    "javax.imageio.metadata.iiometadatanode.comparedocumentposition": [
        "javax.imageio.metadata.IIOMetadataNode.compareDocumentPosition(org.w3c.dom.Node)"
    ],
    "java.beans.propertychangesupport.haslisteners": [
        "java.beans.PropertyChangeSupport.hasListeners(java.lang.String)"
    ],
    "java.awt.container.getcontainerlisteners": [
        "java.awt.Container.getContainerListeners()"
    ],
    "java.security.spec.pssparameterspec.getmgfparameters": [
        "java.security.spec.PSSParameterSpec.getMGFParameters()"
    ],
    "javax.accessibility.accessiblehypertext.getlinkindex": [
        "javax.accessibility.AccessibleHypertext.getLinkIndex(int)"
    ],
    "javax.swing.defaultboundedrangemodel.addchangelistener": [
        "javax.swing.DefaultBoundedRangeModel.addChangeListener(javax.swing.event.ChangeListener)"
    ],
    "javax.management.timer.timer.removenotification": [
        "javax.management.timer.Timer.removeNotification(java.lang.Integer)"
    ],
    "javax.management.mbeanserverconnection.querymbeans": [
        "javax.management.MBeanServerConnection.queryMBeans(javax.management.ObjectName,javax.management.QueryExp)"
    ],
    "javax.swing.jtree.getmodel": [
        "javax.swing.JTree.getModel()"
    ],
    "java.sql.resultset.getconcurrency": [
        "java.sql.ResultSet.getConcurrency()"
    ],
    "javax.swing.jtree.getclosestrowforlocation": [
        "javax.swing.JTree.getClosestRowForLocation(int,int)"
    ],
    "java.io.file.getusablespace": [
        "java.io.File.getUsableSpace()"
    ],
    "org.xml.sax.helpers.attributesimpl.clear": [
        "org.xml.sax.helpers.AttributesImpl.clear()"
    ],
    "javax.swing.jscrollpane.updateui": [
        "javax.swing.JScrollPane.updateUI()"
    ],
    "java.awt.geom.cubiccurve2d.float.setcurve": [
        "java.awt.geom.CubicCurve2D.Float.setCurve(float,float,float,float,float,float,float,float)",
        "java.awt.geom.CubicCurve2D.Float.setCurve(double,double,double,double,double,double,double,double)"
    ],
    "javax.management.mbeanattributeinfo.iswritable": [
        "javax.management.MBeanAttributeInfo.isWritable()"
    ],
    "java.util.longsummarystatistics.getcount": [
        "java.util.LongSummaryStatistics.getCount()"
    ],
    "javax.swing.text.html.imageview.getimageurl": [
        "javax.swing.text.html.ImageView.getImageURL()"
    ],
    "org.omg.corba.typecode.name": [
        "org.omg.CORBA.TypeCode.name()"
    ],
    "java.net.socket.setsotimeout": [
        "java.net.Socket.setSoTimeout(int)"
    ],
    "javax.swing.plaf.basic.basiccombopopup.delegatefocus": [
        "javax.swing.plaf.basic.BasicComboPopup.delegateFocus(java.awt.event.MouseEvent)"
    ],
    "javax.management.openmbean.compositedataview.tocompositedata": [
        "javax.management.openmbean.CompositeDataView.toCompositeData(javax.management.openmbean.CompositeType)"
    ],
    "javax.lang.model.util.types.issametype": [
        "javax.lang.model.util.Types.isSameType(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)"
    ],
    "javax.swing.table.defaulttablecolumnmodel.setselectionmodel": [
        "javax.swing.table.DefaultTableColumnModel.setSelectionModel(javax.swing.ListSelectionModel)"
    ],
    "java.awt.geom.cubiccurve2d.getp2": [
        "java.awt.geom.CubicCurve2D.getP2()"
    ],
    "java.nio.file.invalidpathexception.getreason": [
        "java.nio.file.InvalidPathException.getReason()"
    ],
    "java.awt.pageattributes.getorientationrequested": [
        "java.awt.PageAttributes.getOrientationRequested()"
    ],
    "org.xml.sax.helpers.defaulthandler.processinginstruction": [
        "org.xml.sax.helpers.DefaultHandler.processingInstruction(java.lang.String,java.lang.String)"
    ],
    "javax.swing.uidefaults.activevalue.createvalue": [
        "javax.swing.UIDefaults.ActiveValue.createValue(javax.swing.UIDefaults)"
    ],
    "javax.swing.jcomponent.getvetoablechangelisteners": [
        "javax.swing.JComponent.getVetoableChangeListeners()"
    ],
    "java.security.keystore.setentry": [
        "java.security.KeyStore.setEntry(java.lang.String,java.security.KeyStore.Entry,java.security.KeyStore.ProtectionParameter)"
    ],
    "javax.crypto.exemptionmechanism.getname": [
        "javax.crypto.ExemptionMechanism.getName()"
    ],
    "java.sql.databasemetadata.supportsopenstatementsacrossrollback": [
        "java.sql.DatabaseMetaData.supportsOpenStatementsAcrossRollback()"
    ],
    "javax.management.loading.mlet.prederegister": [
        "javax.management.loading.MLet.preDeregister()"
    ],
    "java.awt.dnd.draggesturerecognizer.gettriggerevent": [
        "java.awt.dnd.DragGestureRecognizer.getTriggerEvent()"
    ],
    "javax.swing.plaf.basic.basiccombopopup.configurepopup": [
        "javax.swing.plaf.basic.BasicComboPopup.configurePopup()"
    ],
    "javax.accessibility.accessiblehypertext.getlink": [
        "javax.accessibility.AccessibleHypertext.getLink(int)"
    ],
    "javax.swing.jdialog.getaccessiblecontext": [
        "javax.swing.JDialog.getAccessibleContext()"
    ],
    "java.lang.boolean.compare": [
        "java.lang.Boolean.compare(boolean,boolean)"
    ],
    "java.io.objectoutputstream.writeobjectoverride": [
        "java.io.ObjectOutputStream.writeObjectOverride(java.lang.Object)"
    ],
    "javax.swing.overlaylayout.getlayoutalignmentx": [
        "javax.swing.OverlayLayout.getLayoutAlignmentX(java.awt.Container)"
    ],
    "java.util.navigableset.subset": [
        "java.util.NavigableSet.subSet(java.util.NavigableSet,java.util.NavigableSet)",
        "java.util.NavigableSet.subSet(java.util.NavigableSet,boolean,java.util.NavigableSet,boolean)",
        "java.util.NavigableSet.subSet(E,E)",
        "java.util.NavigableSet.subSet(E,boolean,E,boolean)"
    ],
    "javax.management.remote.rmi.rmiserverimpl.getdefaultclassloader": [
        "javax.management.remote.rmi.RMIServerImpl.getDefaultClassLoader()"
    ],
    "java.util.function.doubleconsumer.andthen": [
        "java.util.function.DoubleConsumer.andThen(java.util.function.DoubleConsumer)"
    ],
    "javax.xml.datatype.datatypefactory.newdurationyearmonth": [
        "javax.xml.datatype.DatatypeFactory.newDurationYearMonth(boolean,int,int)",
        "javax.xml.datatype.DatatypeFactory.newDurationYearMonth(java.lang.String)",
        "javax.xml.datatype.DatatypeFactory.newDurationYearMonth(long)",
        "javax.xml.datatype.DatatypeFactory.newDurationYearMonth(boolean,java.math.BigInteger,java.math.BigInteger)"
    ],
    "java.util.zip.gzipinputstream.read": [
        "java.util.zip.GZIPInputStream.read(byte[],int,int)"
    ],
    "java.time.chrono.japanesedate.of": [
        "java.time.chrono.JapaneseDate.of(int,int,int)",
        "java.time.chrono.JapaneseDate.of(java.time.chrono.JapaneseEra,int,int,int)"
    ],
    "javax.swing.defaultboundedrangemodel.getextent": [
        "javax.swing.DefaultBoundedRangeModel.getExtent()"
    ],
    "javax.crypto.keygenerator.getalgorithm": [
        "javax.crypto.KeyGenerator.getAlgorithm()"
    ],
    "java.awt.geom.arc2d.setarcbycenter": [
        "java.awt.geom.Arc2D.setArcByCenter(double,double,double,double,double,int)"
    ],
    "org.omg.dynamicany.dynanyoperations.copy": [
        "org.omg.DynamicAny.DynAnyOperations.copy()"
    ],
    "java.util.hashmap.replace": [
        "java.util.HashMap.replace(K,V)",
        "java.util.HashMap.replace(K,V,V)"
    ],
    "java.time.format.datetimeformatterbuilder.optionalend": [
        "java.time.format.DateTimeFormatterBuilder.optionalEnd()"
    ],
    "javax.transaction.xa.xaresource.commit": [
        "javax.transaction.xa.XAResource.commit(javax.transaction.xa.Xid,boolean)"
    ],
    "javax.swing.joptionpane.setoptiontype": [
        "javax.swing.JOptionPane.setOptionType(int)"
    ],
    "java.util.concurrent.concurrentskiplistmap.ceilingentry": [
        "java.util.concurrent.ConcurrentSkipListMap.ceilingEntry(java.util.concurrent.ConcurrentSkipListMap)",
        "java.util.concurrent.ConcurrentSkipListMap.ceilingEntry(K)"
    ],
    "java.util.concurrent.atomic.atomiclongfieldupdater.decrementandget": [
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.decrementAndGet(T)",
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.decrementAndGet(java.util.concurrent.atomic.AtomicLongFieldUpdater)"
    ],
    "javax.sound.sampled.mixer.gettargetlineinfo": [
        "javax.sound.sampled.Mixer.getTargetLineInfo()",
        "javax.sound.sampled.Mixer.getTargetLineInfo(javax.sound.sampled.Line.Info)"
    ],
    "org.w3c.dom.text.getwholetext": [
        "org.w3c.dom.Text.getWholeText()"
    ],
    "java.awt.dnd.dragsourcedropevent.getdropsuccess": [
        "java.awt.dnd.DragSourceDropEvent.getDropSuccess()"
    ],
    "java.io.objectoutputstream.drain": [
        "java.io.ObjectOutputStream.drain()"
    ],
    "java.util.scanner.nextboolean": [
        "java.util.Scanner.nextBoolean()"
    ],
    "java.nio.file.spi.filesystemprovider.readattributes": [
        "java.nio.file.spi.FileSystemProvider.readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption...)",
        "java.nio.file.spi.FileSystemProvider.readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption)",
        "java.nio.file.spi.FileSystemProvider.readAttributes(java.nio.file.Path,java.lang.Class<A>,java.nio.file.LinkOption...)"
    ],
    "javax.swing.jtabbedpane.setdisplayedmnemonicindexat": [
        "javax.swing.JTabbedPane.setDisplayedMnemonicIndexAt(int,int)"
    ],
    "javax.management.remote.rmi.rmiconnectionimpl.tostring": [
        "javax.management.remote.rmi.RMIConnectionImpl.toString()"
    ],
    "java.awt.scrollbar.getlisteners": [
        "java.awt.Scrollbar.getListeners(java.lang.Class<T>)"
    ],
    "javax.swing.text.stylecontext.createsmallattributeset": [
        "javax.swing.text.StyleContext.createSmallAttributeSet(javax.swing.text.AttributeSet)"
    ],
    "java.awt.checkbox.setcheckboxgroup": [
        "java.awt.Checkbox.setCheckboxGroup(java.awt.CheckboxGroup)"
    ],
    "javax.swing.text.glyphview.getglyphpainter": [
        "javax.swing.text.GlyphView.getGlyphPainter()"
    ],
    "java.io.filepermission.hashcode": [
        "java.io.FilePermission.hashCode()"
    ],
    "javax.swing.plaf.basic.basictextui.geteditorkit": [
        "javax.swing.plaf.basic.BasicTextUI.getEditorKit(javax.swing.text.JTextComponent)"
    ],
    "javax.management.objectname.getdomain": [
        "javax.management.ObjectName.getDomain()"
    ],
    "java.awt.awteventmulticaster.mousewheelmoved": [
        "java.awt.AWTEventMulticaster.mouseWheelMoved(java.awt.event.MouseWheelEvent)"
    ],
    "javax.naming.refaddr.getcontent": [
        "javax.naming.RefAddr.getContent()"
    ],
    "javax.xml.parsers.saxparser.isxincludeaware": [
        "javax.xml.parsers.SAXParser.isXIncludeAware()"
    ],
    "java.security.cert.x509certificate.getissueralternativenames": [
        "java.security.cert.X509Certificate.getIssuerAlternativeNames()"
    ],
    "java.awt.image.imageproducer.requesttopdownleftrightresend": [
        "java.awt.image.ImageProducer.requestTopDownLeftRightResend(java.awt.image.ImageConsumer)"
    ],
    "javax.swing.plaf.multi.multitooltipui.createui": [
        "javax.swing.plaf.multi.MultiToolTipUI.createUI(javax.swing.JComponent)"
    ],
    "java.util.concurrent.executors.newworkstealingpool": [
        "java.util.concurrent.Executors.newWorkStealingPool()",
        "java.util.concurrent.Executors.newWorkStealingPool(int)"
    ],
    "java.nio.charset.charsetdecoder.flush": [
        "java.nio.charset.CharsetDecoder.flush(java.nio.CharBuffer)"
    ],
    "java.util.concurrent.locks.reentrantlock.isheldbycurrentthread": [
        "java.util.concurrent.locks.ReentrantLock.isHeldByCurrentThread()"
    ],
    "javax.swing.grouplayout.getlayoutalignmentx": [
        "javax.swing.GroupLayout.getLayoutAlignmentX(java.awt.Container)"
    ],
    "org.omg.corba.localobject._set_policy_override": [
        "org.omg.CORBA.LocalObject._set_policy_override(org.omg.CORBA.Policy[],org.omg.CORBA.SetOverrideType)"
    ],
    "javax.management.openmbean.opentype.tostring": [
        "javax.management.openmbean.OpenType.toString()"
    ],
    "java.lang.classloader.clearassertionstatus": [
        "java.lang.ClassLoader.clearAssertionStatus()"
    ],
    "javax.swing.swingutilities.invokelater": [
        "javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)"
    ],
    "javax.swing.plaf.synth.synthpainter.painttoolbardragwindowbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintToolBarDragWindowBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",
        "javax.swing.plaf.synth.SynthPainter.paintToolBarDragWindowBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)"
    ],
    "java.sql.sqlinput.readbinarystream": [
        "java.sql.SQLInput.readBinaryStream()"
    ],
    "javax.sql.rowset.serial.serialjavaobject.getobject": [
        "javax.sql.rowset.serial.SerialJavaObject.getObject()"
    ],
    "java.lang.math.negateexact": [
        "java.lang.Math.negateExact(int)",
        "java.lang.Math.negateExact(long)"
    ],
    "java.util.concurrent.completablefuture.anyof": [
        "java.util.concurrent.CompletableFuture.anyOf(java.util.concurrent.CompletableFuture<?>...)",
        "java.util.concurrent.CompletableFuture.anyOf(java.util.concurrent.CompletableFuture<?>)"
    ],
    "org.omg.corba.dataoutputstream.write_short_array": [
        "org.omg.CORBA.DataOutputStream.write_short_array(short[],int,int)"
    ],
    "javax.sound.midi.mididevice.getmicrosecondposition": [
        "javax.sound.midi.MidiDevice.getMicrosecondPosition()"
    ],
    "javax.swing.jcombobox.setmaximumrowcount": [
        "javax.swing.JComboBox.setMaximumRowCount(int)"
    ],
    "java.awt.image.databufferbyte.getbankdata": [
        "java.awt.image.DataBufferByte.getBankData()"
    ],
    "java.text.decimalformatsymbols.getpatternseparator": [
        "java.text.DecimalFormatSymbols.getPatternSeparator()"
    ],
    "java.util.locale.builder.setextension": [
        "java.util.Locale.Builder.setExtension(char,java.lang.String)"
    ],
    "javax.swing.tree.defaulttreecelleditor.starteditingtimer": [
        "javax.swing.tree.DefaultTreeCellEditor.startEditingTimer()"
    ],
    "java.net.urlconnection.geturl": [
        "java.net.URLConnection.getURL()"
    ],
    "javax.swing.jpopupmenu.setdefaultlightweightpopupenabled": [
        "javax.swing.JPopupMenu.setDefaultLightWeightPopupEnabled(boolean)"
    ],
    "javax.naming.ldap.ldapcontext.getresponsecontrols": [
        "javax.naming.ldap.LdapContext.getResponseControls()"
    ],
    "java.util.timezone.usedaylighttime": [
        "java.util.TimeZone.useDaylightTime()"
    ],
    "java.io.reader.reset": [
        "java.io.Reader.reset()"
    ],
    "javax.swing.jcomponent.getpopuplocation": [
        "javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"
    ],
    "java.util.logging.logrecord.getparameters": [
        "java.util.logging.LogRecord.getParameters()"
    ],
    "javax.management.modelmbean.modelmbeaninfo.setmbeandescriptor": [
        "javax.management.modelmbean.ModelMBeanInfo.setMBeanDescriptor(javax.management.Descriptor)"
    ],
    "org.omg.dynamicany._dynstructstub.equal": [
        "org.omg.DynamicAny._DynStructStub.equal(org.omg.DynamicAny.DynAny)"
    ],
    "java.awt.keyboardfocusmanager.addvetoablechangelistener": [
        "java.awt.KeyboardFocusManager.addVetoableChangeListener(java.beans.VetoableChangeListener)",
        "java.awt.KeyboardFocusManager.addVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)"
    ],
    "org.omg.dynamicany._dynarraystub.get_char": [
        "org.omg.DynamicAny._DynArrayStub.get_char()"
    ],
    "java.awt.font.glyphvector.getlayoutflags": [
        "java.awt.font.GlyphVector.getLayoutFlags()"
    ],
    "javax.swing.text.plaindocument.insertstring": [
        "javax.swing.text.PlainDocument.insertString(int,java.lang.String,javax.swing.text.AttributeSet)"
    ],
    "java.time.offsetdatetime.withyear": [
        "java.time.OffsetDateTime.withYear(int)"
    ],
    "java.sql.parametermetadata.isnullable": [
        "java.sql.ParameterMetaData.isNullable(int)"
    ],
    "javax.xml.crypto.algorithmmethod.getalgorithm": [
        "javax.xml.crypto.AlgorithmMethod.getAlgorithm()"
    ],
    "javax.rmi.corba.utildelegate.getcodebase": [
        "javax.rmi.CORBA.UtilDelegate.getCodebase(java.lang.Class)"
    ],
    "org.xml.sax.helpers.parseradapter.getproperty": [
        "org.xml.sax.helpers.ParserAdapter.getProperty(java.lang.String)"
    ],
    "javax.swing.text.glyphview.getalignment": [
        "javax.swing.text.GlyphView.getAlignment(int)"
    ],
    "javax.swing.buttonmodel.isenabled": [
        "javax.swing.ButtonModel.isEnabled()"
    ],
    "javax.swing.text.html.htmleditorkit.htmltextaction.getelementsat": [
        "javax.swing.text.html.HTMLEditorKit.HTMLTextAction.getElementsAt(javax.swing.text.html.HTMLDocument,int)"
    ],
    "javax.xml.ws.spi.provider.getport": [
        "javax.xml.ws.spi.Provider.getPort(javax.xml.ws.EndpointReference,java.lang.Class<T>,javax.xml.ws.WebServiceFeature...)"
    ],
    "java.text.dateformat.getcalendar": [
        "java.text.DateFormat.getCalendar()"
    ],
    "javax.swing.plaf.metal.metalscrollbarui.createdecreasebutton": [
        "javax.swing.plaf.metal.MetalScrollBarUI.createDecreaseButton(int)"
    ],
    "java.util.stream.intstream.empty": [
        "java.util.stream.IntStream.empty()"
    ],
    "java.awt.borderlayout.getvgap": [
        "java.awt.BorderLayout.getVgap()"
    ],
    "javax.swing.plaf.synth.synthgraphicsutils.getmaximumcharheight": [
        "javax.swing.plaf.synth.SynthGraphicsUtils.getMaximumCharHeight(javax.swing.plaf.synth.SynthContext)"
    ],
    "java.awt.datatransfer.stringselection.gettransferdata": [
        "java.awt.datatransfer.StringSelection.getTransferData(java.awt.datatransfer.DataFlavor)"
    ],
    "javax.swing.undo.undoableedit.die": [
        "javax.swing.undo.UndoableEdit.die()"
    ],
    "javax.swing.border.lineborder.getroundedcorners": [
        "javax.swing.border.LineBorder.getRoundedCorners()"
    ],
    "java.util.function.tolongbifunction.applyaslong": [
        "java.util.function.ToLongBiFunction.applyAsLong(java.util.function.ToLongBiFunction,java.util.function.ToLongBiFunction)",
        "java.util.function.ToLongBiFunction.applyAsLong(T,U)"
    ],
    "javax.activation.filedatasource.getcontenttype": [
        "javax.activation.FileDataSource.getContentType()"
    ],
    "java.util.concurrent.locks.abstractownablesynchronizer.getexclusiveownerthread": [
        "java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread()"
    ],
    "java.awt.dnd.draggestureevent.getdragorigin": [
        "java.awt.dnd.DragGestureEvent.getDragOrigin()"
    ],
    "javax.naming.ldap.starttlsresponse.getencodedvalue": [
        "javax.naming.ldap.StartTlsResponse.getEncodedValue()"
    ],
    "javax.print.attribute.attributeset.toarray": [
        "javax.print.attribute.AttributeSet.toArray()"
    ],
    "javax.swing.jlist.setlistdata": [
        "javax.swing.JList.setListData(java.util.Vector<? extends javax.swing.JList>)",
        "javax.swing.JList.setListData(javax.swing.JList[])"
    ],
    "java.sql.databasemetadata.supportscolumnaliasing": [
        "java.sql.DatabaseMetaData.supportsColumnAliasing()"
    ],
    "java.lang.math.toradians": [
        "java.lang.Math.toRadians(double)"
    ],
    "java.awt.toolkit.sync": [
        "java.awt.Toolkit.sync()"
    ],
    "java.nio.charset.codingerroraction.tostring": [
        "java.nio.charset.CodingErrorAction.toString()"
    ],
    "javax.accessibility.accessiblecomponent.addfocuslistener": [
        "javax.accessibility.AccessibleComponent.addFocusListener(java.awt.event.FocusListener)"
    ],
    "java.rmi.server.objid.hashcode": [
        "java.rmi.server.ObjID.hashCode()"
    ],
    "org.w3c.dom.ls.lsparser.getfilter": [
        "org.w3c.dom.ls.LSParser.getFilter()"
    ],
    "java.awt.color.icc_colorspace.getmaxvalue": [
        "java.awt.color.ICC_ColorSpace.getMaxValue(int)"
    ],
    "java.util.resourcebundle.keyset": [
        "java.util.ResourceBundle.keySet()"
    ],
    "javax.swing.plaf.basic.basicdirectorymodel.getpropertychangelisteners": [
        "javax.swing.plaf.basic.BasicDirectoryModel.getPropertyChangeListeners()"
    ],
    "java.math.bigdecimal.toplainstring": [
        "java.math.BigDecimal.toPlainString()"
    ],
    "org.omg.dynamicany._dynfixedstub.insert_boolean": [
        "org.omg.DynamicAny._DynFixedStub.insert_boolean(boolean)"
    ],
    "java.awt.container.transferfocusdowncycle": [
        "java.awt.Container.transferFocusDownCycle()"
    ],
    "javax.net.ssl.keymanagerfactory.getprovider": [
        "javax.net.ssl.KeyManagerFactory.getProvider()"
    ],
    "java.security.keystore.builder.getkeystore": [
        "java.security.KeyStore.Builder.getKeyStore()"
    ],
    "org.omg.dynamicany.dynanyoperations.get_short": [
        "org.omg.DynamicAny.DynAnyOperations.get_short()"
    ],
    "java.util.concurrent.scheduledthreadpoolexecutor.getqueue": [
        "java.util.concurrent.ScheduledThreadPoolExecutor.getQueue()"
    ],
    "javax.management.remote.rmi.rmiconnection.getmbeancount": [
        "javax.management.remote.rmi.RMIConnection.getMBeanCount(javax.security.auth.Subject)"
    ],
    "javax.swing.plaf.multi.multitreeui.cancelediting": [
        "javax.swing.plaf.multi.MultiTreeUI.cancelEditing(javax.swing.JTree)"
    ],
    "javax.swing.jbutton.paramstring": [
        "javax.swing.JButton.paramString()"
    ],
    "java.net.jarurlconnection.getcertificates": [
        "java.net.JarURLConnection.getCertificates()"
    ],
    "java.awt.image.colormodel.getunnormalizedcomponents": [
        "java.awt.image.ColorModel.getUnnormalizedComponents(float[],int,int[],int)"
    ],
    "javax.xml.parsers.saxparserfactory.setnamespaceaware": [
        "javax.xml.parsers.SAXParserFactory.setNamespaceAware(boolean)"
    ],
    "java.util.function.doublesupplier.getasdouble": [
        "java.util.function.DoubleSupplier.getAsDouble()"
    ],
    "java.time.year.minus": [
        "java.time.Year.minus(java.time.temporal.TemporalAmount)",
        "java.time.Year.minus(long,java.time.temporal.TemporalUnit)"
    ],
    "java.awt.image.databufferfloat.setelemdouble": [
        "java.awt.image.DataBufferFloat.setElemDouble(int,int,double)"
    ],
    "java.util.concurrent.synchronousqueue.toarray": [
        "java.util.concurrent.SynchronousQueue.toArray()"
    ],
    "javax.xml.ws.spi.http.httpexchange.getrequestmethod": [
        "javax.xml.ws.spi.http.HttpExchange.getRequestMethod()"
    ],
    "javax.imageio.iioparam.getsubsamplingxoffset": [
        "javax.imageio.IIOParam.getSubsamplingXOffset()"
    ],
    "javax.swing.uidefaults.getuierror": [
        "javax.swing.UIDefaults.getUIError(java.lang.String)"
    ],
    "java.text.numberformat.getinstance": [
        "java.text.NumberFormat.getInstance()",
        "java.text.NumberFormat.getInstance(java.util.Locale)"
    ],
    "javax.swing.abstractbutton.setverticalalignment": [
        "javax.swing.AbstractButton.setVerticalAlignment(int)"
    ],
    "java.lang.float.sum": [
        "java.lang.Float.sum(float,float)"
    ],
    "javax.swing.abstractbutton.getmodel": [
        "javax.swing.AbstractButton.getModel()"
    ],
    "javax.swing.swingworker.getstate": [
        "javax.swing.SwingWorker.getState()"
    ],
    "java.text.simpledateformat.equals": [
        "java.text.SimpleDateFormat.equals(java.lang.Object)"
    ],
    "javax.swing.text.dateformatter.setformat": [
        "javax.swing.text.DateFormatter.setFormat(java.text.DateFormat)"
    ],
    "java.awt.image.pixelgrabber.grabpixels": [
        "java.awt.image.PixelGrabber.grabPixels(long)",
        "java.awt.image.PixelGrabber.grabPixels()"
    ],
    "java.net.interfaceaddress.tostring": [
        "java.net.InterfaceAddress.toString()"
    ],
    "javax.swing.plaf.synth.synthsplitpaneui.getcontext": [
        "javax.swing.plaf.synth.SynthSplitPaneUI.getContext(javax.swing.JComponent)"
    ],
    "org.omg.corba.typecode.type_modifier": [
        "org.omg.CORBA.TypeCode.type_modifier()"
    ],
    "java.lang.thread.yield": [
        "java.lang.Thread.yield()"
    ],
    "java.lang.runtime.halt": [
        "java.lang.Runtime.halt(int)"
    ],
    "java.security.messagedigest.isequal": [
        "java.security.MessageDigest.isEqual(byte[],byte[])"
    ],
    "javax.swing.border.strokeborder.getborderinsets": [
        "javax.swing.border.StrokeBorder.getBorderInsets(java.awt.Component,java.awt.Insets)"
    ],
    "java.nio.channels.asynchronousfilechannel.trylock": [
        "java.nio.channels.AsynchronousFileChannel.tryLock()",
        "java.nio.channels.AsynchronousFileChannel.tryLock(long,long,boolean)"
    ],
    "java.util.zip.deflater.getadler": [
        "java.util.zip.Deflater.getAdler()"
    ],
    "java.util.concurrent.atomic.atomicinteger.intvalue": [
        "java.util.concurrent.atomic.AtomicInteger.intValue()"
    ],
    "org.omg.corba.portable.objectimpl.hashcode": [
        "org.omg.CORBA.portable.ObjectImpl.hashCode()"
    ],
    "org.omg.dynamicany._dynunionstub.insert_boolean": [
        "org.omg.DynamicAny._DynUnionStub.insert_boolean(boolean)"
    ],
    "java.awt.component.paintall": [
        "java.awt.Component.paintAll(java.awt.Graphics)"
    ],
    "java.time.chrono.thaibuddhistera.of": [
        "java.time.chrono.ThaiBuddhistEra.of(int)"
    ],
    "java.security.accesscontroller.doprivileged": [
        "java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction<T>,java.security.AccessControlContext,java.security.Permission...)",
        "java.security.AccessController.doPrivileged(java.security.PrivilegedAction<T>)",
        "java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction<T>,java.security.AccessControlContext)",
        "java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction<T>)",
        "java.security.AccessController.doPrivileged(java.security.PrivilegedAction<T>,java.security.AccessControlContext,java.security.Permission...)",
        "java.security.AccessController.doPrivileged(java.security.PrivilegedAction<T>,java.security.AccessControlContext)"
    ],
    "java.time.year.get": [
        "java.time.Year.get(java.time.temporal.TemporalField)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintprogressbarbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintProgressBarBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",
        "javax.swing.plaf.synth.SynthPainter.paintProgressBarBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.time.localtime.plusnanos": [
        "java.time.LocalTime.plusNanos(long)"
    ],
    "javax.swing.jcomponent.setrequestfocusenabled": [
        "javax.swing.JComponent.setRequestFocusEnabled(boolean)"
    ],
    "java.awt.image.bufferedimagefilter.getbufferedimageop": [
        "java.awt.image.BufferedImageFilter.getBufferedImageOp()"
    ],
    "java.lang.character.ismirrored": [
        "java.lang.Character.isMirrored(char)"
    ],
    "javax.swing.plaf.synth.synthtooltipui.getcontext": [
        "javax.swing.plaf.synth.SynthToolTipUI.getContext(javax.swing.JComponent)"
    ],
    "javax.swing.icon.painticon": [
        "javax.swing.Icon.paintIcon(java.awt.Component,java.awt.Graphics,int,int)"
    ],
    "java.awt.container.remove": [
        "java.awt.Container.remove(int)",
        "java.awt.Container.remove(java.awt.Component)"
    ],
    "java.awt.font.textlayout.getcharacterlevel": [
        "java.awt.font.TextLayout.getCharacterLevel(int)"
    ],
    "javax.script.simplescriptcontext.getwriter": [
        "javax.script.SimpleScriptContext.getWriter()"
    ],
    "org.omg.corba.nvlist.add_value": [
        "org.omg.CORBA.NVList.add_value(java.lang.String,org.omg.CORBA.Any,int)"
    ],
    "javax.naming.directory.attribute.isordered": [
        "javax.naming.directory.Attribute.isOrdered()"
    ],
    "java.awt.dnd.droptargetcontext.createtransferableproxy": [
        "java.awt.dnd.DropTargetContext.createTransferableProxy(java.awt.datatransfer.Transferable,boolean)"
    ],
    "java.awt.component.getgraphics": [
        "java.awt.Component.getGraphics()"
    ],
    "javax.swing.text.html.parser.entity.name2type": [
        "javax.swing.text.html.parser.Entity.name2type(java.lang.String)"
    ],
    "javax.swing.actionmap.size": [
        "javax.swing.ActionMap.size()"
    ],
    "java.net.datagrampacket.getlength": [
        "java.net.DatagramPacket.getLength()"
    ],
    "javax.swing.debuggraphics.logstream": [
        "javax.swing.DebugGraphics.logStream()"
    ],
    "java.sql.wrapper.unwrap": [
        "java.sql.Wrapper.unwrap(java.lang.Class<T>)"
    ],
    "java.time.chrono.japanesechronology.dateepochday": [
        "java.time.chrono.JapaneseChronology.dateEpochDay(long)"
    ],
    "java.awt.keyboardfocusmanager.getpermanentfocusowner": [
        "java.awt.KeyboardFocusManager.getPermanentFocusOwner()"
    ],
    "java.time.localdatetime.getsecond": [
        "java.time.LocalDateTime.getSecond()"
    ],
    "org.omg.dynamicany._dynenumstub.insert_ushort": [
        "org.omg.DynamicAny._DynEnumStub.insert_ushort(short)"
    ],
    "java.beans.beancontext.beancontextsupport.serialize": [
        "java.beans.beancontext.BeanContextSupport.serialize(java.io.ObjectOutputStream,java.util.Collection)"
    ],
    "javax.swing.buttongroup.getselection": [
        "javax.swing.ButtonGroup.getSelection()"
    ],
    "javax.swing.jframe.update": [
        "javax.swing.JFrame.update(java.awt.Graphics)"
    ],
    "java.util.splittablerandom.nextlong": [
        "java.util.SplittableRandom.nextLong()"
    ],
    "java.security.cert.policynode.getvalidpolicy": [
        "java.security.cert.PolicyNode.getValidPolicy()"
    ],
    "javax.management.loading.mlet.findclass": [
        "javax.management.loading.MLet.findClass(java.lang.String)"
    ],
    "java.util.concurrent.threadlocalrandom.nextdouble": [
        "java.util.concurrent.ThreadLocalRandom.nextDouble(double)"
    ],
    "org.omg.dynamicany.dynvalueoperations.get_members_as_dyn_any": [
        "org.omg.DynamicAny.DynValueOperations.get_members_as_dyn_any()"
    ],
    "java.awt.dnd.dragsourcecontext.dragexit": [
        "java.awt.dnd.DragSourceContext.dragExit(java.awt.dnd.DragSourceEvent)"
    ],
    "java.applet.applet.getappletcontext": [
        "java.applet.Applet.getAppletContext()"
    ],
    "java.awt.image.renderable.parameterblock.getnumsources": [
        "java.awt.image.renderable.ParameterBlock.getNumSources()"
    ],
    "java.awt.trayicon.settooltip": [
        "java.awt.TrayIcon.setToolTip(java.lang.String)"
    ],
    "javax.swing.plaf.multi.multitableui.paint": [
        "javax.swing.plaf.multi.MultiTableUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.boundedrangemodel.getextent": [
        "javax.swing.BoundedRangeModel.getExtent()"
    ],
    "java.awt.trayicon.removeactionlistener": [
        "java.awt.TrayIcon.removeActionListener(java.awt.event.ActionListener)"
    ],
    "org.omg.dynamicany._dynfixedstub.to_any": [
        "org.omg.DynamicAny._DynFixedStub.to_any()"
    ],
    "java.awt.adjustable.setminimum": [
        "java.awt.Adjustable.setMinimum(int)"
    ],
    "javax.swing.jcomponent.getactionmap": [
        "javax.swing.JComponent.getActionMap()"
    ],
    "java.util.concurrent.linkedblockingqueue.toarray": [
        "java.util.concurrent.LinkedBlockingQueue.toArray(T[])",
        "java.util.concurrent.LinkedBlockingQueue.toArray()"
    ],
    "java.util.function.doublefunction.apply": [
        "java.util.function.DoubleFunction.apply(double)"
    ],
    "java.text.collationelementiterator.primaryorder": [
        "java.text.CollationElementIterator.primaryOrder(int)"
    ],
    "javax.swing.plaf.multi.multitooltipui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiToolTipUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "java.lang.reflect.typevariable.getgenericdeclaration": [
        "java.lang.reflect.TypeVariable.getGenericDeclaration()"
    ],
    "java.sql.blob.position": [
        "java.sql.Blob.position(byte[],long)",
        "java.sql.Blob.position(java.sql.Blob,long)"
    ],
    "java.util.concurrent.atomic.doubleaccumulator.get": [
        "java.util.concurrent.atomic.DoubleAccumulator.get()"
    ],
    "java.security.cert.x509crl.gettbscertlist": [
        "java.security.cert.X509CRL.getTBSCertList()"
    ],
    "java.awt.geom.arc2d.getstartpoint": [
        "java.awt.geom.Arc2D.getStartPoint()"
    ],
    "javax.swing.plaf.synth.synthtooltipui.createui": [
        "javax.swing.plaf.synth.SynthToolTipUI.createUI(javax.swing.JComponent)"
    ],
    "javax.swing.rowsorter.getviewrowcount": [
        "javax.swing.RowSorter.getViewRowCount()"
    ],
    "javax.swing.jtable.getselectedrows": [
        "javax.swing.JTable.getSelectedRows()"
    ],
    "java.awt.defaultkeyboardfocusmanager.focusnextcomponent": [
        "java.awt.DefaultKeyboardFocusManager.focusNextComponent(java.awt.Component)"
    ],
    "java.util.spliterator.characteristics": [
        "java.util.Spliterator.characteristics()"
    ],
    "java.time.chrono.minguoera.values": [
        "java.time.chrono.MinguoEra.values()"
    ],
    "javax.swing.spinnernumbermodel.getnextvalue": [
        "javax.swing.SpinnerNumberModel.getNextValue()"
    ],
    "java.awt.image.pixelgrabber.setpixels": [
        "java.awt.image.PixelGrabber.setPixels(int,int,int,int,java.awt.image.ColorModel,int[],int,int)",
        "java.awt.image.PixelGrabber.setPixels(int,int,int,int,java.awt.image.ColorModel,byte[],int,int)"
    ],
    "javax.xml.crypto.dom.domcryptocontext.getelementbyid": [
        "javax.xml.crypto.dom.DOMCryptoContext.getElementById(java.lang.String)"
    ],
    "java.time.format.datetimeformatter.parsebest": [
        "java.time.format.DateTimeFormatter.parseBest(java.lang.CharSequence,java.time.temporal.TemporalQuery<?>)",
        "java.time.format.DateTimeFormatter.parseBest(java.lang.CharSequence,java.time.temporal.TemporalQuery<?>...)"
    ],
    "java.nio.file.attribute.fileattribute.value": [
        "java.nio.file.attribute.FileAttribute.value()"
    ],
    "javax.swing.plaf.multi.multitableui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiTableUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "javax.swing.plaf.synth.synthseparatorui.paint": [
        "javax.swing.plaf.synth.SynthSeparatorUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",
        "javax.swing.plaf.synth.SynthSeparatorUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.plaf.multi.multitoolbarui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiToolBarUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "javax.swing.plaf.synth.synthtoolbarui.getcontext": [
        "javax.swing.plaf.synth.SynthToolBarUI.getContext(javax.swing.JComponent)"
    ],
    "java.sql.callablestatement.getbigdecimal": [
        "java.sql.CallableStatement.getBigDecimal(java.lang.String)",
        "java.sql.CallableStatement.getBigDecimal(int)"
    ],
    "javax.lang.model.util.abstracttypevisitor6.visitunknown": [
        "javax.lang.model.util.AbstractTypeVisitor6.visitUnknown(javax.lang.model.type.TypeMirror,javax.lang.model.util.AbstractTypeVisitor6)"
    ],
    "java.nio.channels.writablebytechannel.write": [
        "java.nio.channels.WritableByteChannel.write(java.nio.ByteBuffer)"
    ],
    "java.awt.graphics2d.setstroke": [
        "java.awt.Graphics2D.setStroke(java.awt.Stroke)"
    ],
    "java.util.concurrent.atomic.atomicinteger.weakcompareandset": [
        "java.util.concurrent.atomic.AtomicInteger.weakCompareAndSet(int,int)"
    ],
    "javax.management.loading.mletmbean.geturls": [
        "javax.management.loading.MLetMBean.getURLs()"
    ],
    "java.awt.image.renderable.parameterblock.getcharparameter": [
        "java.awt.image.renderable.ParameterBlock.getCharParameter(int)"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.readlock.trylock": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.tryLock(long,java.util.concurrent.TimeUnit)",
        "java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.tryLock()"
    ],
    "java.security.cert.x509certselector.setserialnumber": [
        "java.security.cert.X509CertSelector.setSerialNumber(java.math.BigInteger)"
    ],
    "javax.swing.text.mutableattributeset.removeattribute": [
        "javax.swing.text.MutableAttributeSet.removeAttribute(java.lang.Object)"
    ],
    "javax.swing.jprogressbar.addchangelistener": [
        "javax.swing.JProgressBar.addChangeListener(javax.swing.event.ChangeListener)"
    ],
    "javax.naming.cannotproceedexception.getenvironment": [
        "javax.naming.CannotProceedException.getEnvironment()"
    ],
    "java.net.urlclassloader.getresourceasstream": [
        "java.net.URLClassLoader.getResourceAsStream(java.lang.String)"
    ],
    "java.math.biginteger.equals": [
        "java.math.BigInteger.equals(java.lang.Object)"
    ],
    "java.util.resourcebundle.clearcache": [
        "java.util.ResourceBundle.clearCache(java.lang.ClassLoader)",
        "java.util.ResourceBundle.clearCache()"
    ],
    "java.awt.image.renderable.parameterblock.setparameters": [
        "java.awt.image.renderable.ParameterBlock.setParameters(java.util.Vector<java.lang.Object>)"
    ],
    "java.awt.insets.hashcode": [
        "java.awt.Insets.hashCode()"
    ],
    "javax.swing.table.defaulttablemodel.insertrow": [
        "javax.swing.table.DefaultTableModel.insertRow(int,java.lang.Object[])",
        "javax.swing.table.DefaultTableModel.insertRow(int,java.util.Vector)"
    ],
    "java.time.offsetdatetime.minus": [
        "java.time.OffsetDateTime.minus(java.time.temporal.TemporalAmount)",
        "java.time.OffsetDateTime.minus(long,java.time.temporal.TemporalUnit)"
    ],
    "java.awt.geom.rectangle2d.add": [
        "java.awt.geom.Rectangle2D.add(double,double)",
        "java.awt.geom.Rectangle2D.add(java.awt.geom.Rectangle2D)",
        "java.awt.geom.Rectangle2D.add(java.awt.geom.Point2D)"
    ],
    "javax.swing.jtree.setmodel": [
        "javax.swing.JTree.setModel(javax.swing.tree.TreeModel)"
    ],
    "java.time.chrono.minguodate.from": [
        "java.time.chrono.MinguoDate.from(java.time.temporal.TemporalAccessor)"
    ],
    "java.lang.system.setout": [
        "java.lang.System.setOut(java.io.PrintStream)"
    ],
    "java.awt.datatransfer.clipboard.getflavorlisteners": [
        "java.awt.datatransfer.Clipboard.getFlavorListeners()"
    ],
    "org.w3c.dom.events.event.stoppropagation": [
        "org.w3c.dom.events.Event.stopPropagation()"
    ],
    "javax.naming.ldap.extendedrequest.getid": [
        "javax.naming.ldap.ExtendedRequest.getID()"
    ],
    "java.security.cert.certpathvalidatorexception.getreason": [
        "java.security.cert.CertPathValidatorException.getReason()"
    ],
    "javax.print.attribute.standard.printerresolution.getname": [
        "javax.print.attribute.standard.PrinterResolution.getName()"
    ],
    "javax.imageio.metadata.iiometadata.getmetadataformatnames": [
        "javax.imageio.metadata.IIOMetadata.getMetadataFormatNames()"
    ],
    "javax.swing.text.navigationfilter.filterbypass.setdot": [
        "javax.swing.text.NavigationFilter.FilterBypass.setDot(int,javax.swing.text.Position.Bias)"
    ],
    "javax.swing.defaultboundedrangemodel.tostring": [
        "javax.swing.DefaultBoundedRangeModel.toString()"
    ],
    "java.sql.drivermanager.getdriver": [
        "java.sql.DriverManager.getDriver(java.lang.String)"
    ],
    "javax.naming.ldap.unsolicitednotificationevent.getnotification": [
        "javax.naming.ldap.UnsolicitedNotificationEvent.getNotification()"
    ],
    "javax.swing.jtable.convertcolumnindextomodel": [
        "javax.swing.JTable.convertColumnIndexToModel(int)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintslidertrackborder": [
        "javax.swing.plaf.synth.SynthPainter.paintSliderTrackBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",
        "javax.swing.plaf.synth.SynthPainter.paintSliderTrackBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)"
    ],
    "java.awt.canvas.createbufferstrategy": [
        "java.awt.Canvas.createBufferStrategy(int,java.awt.BufferCapabilities)",
        "java.awt.Canvas.createBufferStrategy(int)"
    ],
    "javax.xml.bind.datatypeconverter.parseqname": [
        "javax.xml.bind.DatatypeConverter.parseQName(java.lang.String,javax.xml.namespace.NamespaceContext)"
    ],
    "java.nio.channels.spi.asynchronouschannelprovider.openasynchronousserversocketchannel": [
        "java.nio.channels.spi.AsynchronousChannelProvider.openAsynchronousServerSocketChannel(java.nio.channels.AsynchronousChannelGroup)"
    ],
    "javax.swing.jcomponent.createtooltip": [
        "javax.swing.JComponent.createToolTip()"
    ],
    "javax.lang.model.element.executableelement.getreceivertype": [
        "javax.lang.model.element.ExecutableElement.getReceiverType()"
    ],
    "javax.swing.tree.defaulttreecellrenderer.getbackgroundselectioncolor": [
        "javax.swing.tree.DefaultTreeCellRenderer.getBackgroundSelectionColor()"
    ],
    "javax.swing.plaf.basic.basictreeui.getverticallegbuffer": [
        "javax.swing.plaf.basic.BasicTreeUI.getVerticalLegBuffer()"
    ],
    "java.awt.font.glyphvector.performdefaultlayout": [
        "java.awt.font.GlyphVector.performDefaultLayout()"
    ],
    "org.omg.portableinterceptor.requestinfooperations.request_id": [
        "org.omg.PortableInterceptor.RequestInfoOperations.request_id()"
    ],
    "java.io.stringreader.reset": [
        "java.io.StringReader.reset()"
    ],
    "java.util.abstractmap.simpleimmutableentry.tostring": [
        "java.util.AbstractMap.SimpleImmutableEntry.toString()"
    ],
    "javax.swing.text.glyphview.gettabbedspan": [
        "javax.swing.text.GlyphView.getTabbedSpan(float,javax.swing.text.TabExpander)"
    ],
    "java.net.urisyntaxexception.getreason": [
        "java.net.URISyntaxException.getReason()"
    ],
    "java.util.vector.addelement": [
        "java.util.Vector.addElement(E)",
        "java.util.Vector.addElement(java.util.Vector)"
    ],
    "javax.imageio.stream.imageinputstream.seek": [
        "javax.imageio.stream.ImageInputStream.seek(long)"
    ],
    "javax.swing.singleselectionmodel.setselectedindex": [
        "javax.swing.SingleSelectionModel.setSelectedIndex(int)"
    ],
    "java.security.spec.dsapublickeyspec.gety": [
        "java.security.spec.DSAPublicKeySpec.getY()"
    ],
    "javax.management.relation.roleunresolved.getproblemtype": [
        "javax.management.relation.RoleUnresolved.getProblemType()"
    ],
    "java.io.randomaccessfile.writedouble": [
        "java.io.RandomAccessFile.writeDouble(double)"
    ],
    "java.util.enumset.copyof": [
        "java.util.EnumSet.copyOf(java.util.Collection<E>)"
    ],
    "javax.lang.model.type.typevisitor.visitdeclared": [
        "javax.lang.model.type.TypeVisitor.visitDeclared(javax.lang.model.type.DeclaredType,javax.lang.model.type.TypeVisitor)"
    ],
    "java.nio.file.attribute.userprincipalnotfoundexception.getname": [
        "java.nio.file.attribute.UserPrincipalNotFoundException.getName()"
    ],
    "java.lang.class.getenumconstants": [
        "java.lang.Class.getEnumConstants()"
    ],
    "javax.swing.text.defaultstyleddocument.elementspec.getattributes": [
        "javax.swing.text.DefaultStyledDocument.ElementSpec.getAttributes()"
    ],
    "javax.accessibility.accessiblehyperlink.getaccessibleactiondescription": [
        "javax.accessibility.AccessibleHyperlink.getAccessibleActionDescription(int)"
    ],
    "javax.swing.jlayer.getui": [
        "javax.swing.JLayer.getUI()"
    ],
    "javax.net.ssl.trustmanagerfactory.getprovider": [
        "javax.net.ssl.TrustManagerFactory.getProvider()"
    ],
    "javax.security.auth.destroyable.destroy": [
        "javax.security.auth.Destroyable.destroy()"
    ],
    "java.lang.invoke.callsite.type": [
        "java.lang.invoke.CallSite.type()"
    ],
    "org.w3c.dom.bootstrap.domimplementationregistry.getdomimplementationlist": [
        "org.w3c.dom.bootstrap.DOMImplementationRegistry.getDOMImplementationList(java.lang.String)"
    ],
    "javax.swing.plaf.multi.multilistui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiListUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "java.math.bigdecimal.bytevalueexact": [
        "java.math.BigDecimal.byteValueExact()"
    ],
    "javax.swing.uidefaults.lazyinputmap.createvalue": [
        "javax.swing.UIDefaults.LazyInputMap.createValue(javax.swing.UIDefaults)"
    ],
    "java.lang.reflect.genericdeclaration.gettypeparameters": [
        "java.lang.reflect.GenericDeclaration.getTypeParameters()"
    ],
    "java.util.stream.collectors.minby": [
        "java.util.stream.Collectors.minBy(java.util.Comparator<? super T>)"
    ],
    "java.util.spliterators.emptyspliterator": [
        "java.util.Spliterators.emptySpliterator()"
    ],
    "javax.swing.text.compositeview.getviewatposition": [
        "javax.swing.text.CompositeView.getViewAtPosition(int,java.awt.Rectangle)"
    ],
    "javax.swing.jeditorpane.getpreferredsize": [
        "javax.swing.JEditorPane.getPreferredSize()"
    ],
    "javax.swing.border.emptyborder.getborderinsets": [
        "javax.swing.border.EmptyBorder.getBorderInsets()",
        "javax.swing.border.EmptyBorder.getBorderInsets(java.awt.Component,java.awt.Insets)"
    ],
    "javax.swing.text.view.getviewindex": [
        "javax.swing.text.View.getViewIndex(int,javax.swing.text.Position.Bias)",
        "javax.swing.text.View.getViewIndex(float,float,java.awt.Shape)"
    ],
    "javax.swing.table.tablecolumnmodel.getcolumnmargin": [
        "javax.swing.table.TableColumnModel.getColumnMargin()"
    ],
    "java.beans.propertychangeevent.setpropagationid": [
        "java.beans.PropertyChangeEvent.setPropagationId(java.lang.Object)"
    ],
    "javax.swing.jradiobuttonmenuitem.paramstring": [
        "javax.swing.JRadioButtonMenuItem.paramString()"
    ],
    "javax.imageio.imagewriter.getnumthumbnailssupported": [
        "javax.imageio.ImageWriter.getNumThumbnailsSupported(javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam,javax.imageio.metadata.IIOMetadata,javax.imageio.metadata.IIOMetadata)"
    ],
    "java.nio.file.attribute.filetime.equals": [
        "java.nio.file.attribute.FileTime.equals(java.lang.Object)"
    ],
    "javax.lang.model.element.annotationvaluevisitor.visitdouble": [
        "javax.lang.model.element.AnnotationValueVisitor.visitDouble(double,javax.lang.model.element.AnnotationValueVisitor)"
    ],
    "java.security.cert.crl.gettype": [
        "java.security.cert.CRL.getType()"
    ],
    "javax.swing.jviewport.getview": [
        "javax.swing.JViewport.getView()"
    ],
    "java.time.chrono.chronoperiod.negated": [
        "java.time.chrono.ChronoPeriod.negated()"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.endelement": [
        "org.xml.sax.helpers.XMLFilterImpl.endElement(java.lang.String,java.lang.String,java.lang.String)"
    ],
    "javax.xml.stream.xmlstreamexception.getnestedexception": [
        "javax.xml.stream.XMLStreamException.getNestedException()"
    ],
    "javax.swing.plaf.metal.metalsliderui.getthumboverhang": [
        "javax.swing.plaf.metal.MetalSliderUI.getThumbOverhang()"
    ],
    "java.time.yearmonth.minusmonths": [
        "java.time.YearMonth.minusMonths(long)"
    ],
    "javax.sound.sampled.dataline.info.isformatsupported": [
        "javax.sound.sampled.DataLine.Info.isFormatSupported(javax.sound.sampled.AudioFormat)"
    ],
    "java.util.zip.zipoutputstream.finish": [
        "java.util.zip.ZipOutputStream.finish()"
    ],
    "javax.sql.rowset.baserowset.gettype": [
        "javax.sql.rowset.BaseRowSet.getType()"
    ],
    "javax.swing.text.segment.tostring": [
        "javax.swing.text.Segment.toString()"
    ],
    "javax.swing.event.celleditorlistener.editingstopped": [
        "javax.swing.event.CellEditorListener.editingStopped(javax.swing.event.ChangeEvent)"
    ],
    "javax.swing.jtable.removecolumnselectioninterval": [
        "javax.swing.JTable.removeColumnSelectionInterval(int,int)"
    ],
    "java.beans.beans.instantiate": [
        "java.beans.Beans.instantiate(java.lang.ClassLoader,java.lang.String,java.beans.beancontext.BeanContext)",
        "java.beans.Beans.instantiate(java.lang.ClassLoader,java.lang.String)",
        "java.beans.Beans.instantiate(java.lang.ClassLoader,java.lang.String,java.beans.beancontext.BeanContext,java.beans.AppletInitializer)"
    ],
    "javax.sql.rowset.baserowset.setlong": [
        "javax.sql.rowset.BaseRowSet.setLong(java.lang.String,long)",
        "javax.sql.rowset.BaseRowSet.setLong(int,long)"
    ],
    "javax.swing.text.flowview.getflowstart": [
        "javax.swing.text.FlowView.getFlowStart(int)"
    ],
    "org.w3c.dom.ls.lsloadevent.getinput": [
        "org.w3c.dom.ls.LSLoadEvent.getInput()"
    ],
    "javax.swing.box.createrigidarea": [
        "javax.swing.Box.createRigidArea(java.awt.Dimension)"
    ],
    "java.util.longsummarystatistics.getaverage": [
        "java.util.LongSummaryStatistics.getAverage()"
    ],
    "javax.management.monitor.stringmonitor.setstringtocompare": [
        "javax.management.monitor.StringMonitor.setStringToCompare(java.lang.String)"
    ],
    "javax.swing.plaf.componentui.getbaseline": [
        "javax.swing.plaf.ComponentUI.getBaseline(javax.swing.JComponent,int,int)"
    ],
    "java.net.urlclassloader.newinstance": [
        "java.net.URLClassLoader.newInstance(java.net.URL)",
        "java.net.URLClassLoader.newInstance(java.net.URL,java.lang.ClassLoader)",
        "java.net.URLClassLoader.newInstance(java.net.URL[],java.lang.ClassLoader)",
        "java.net.URLClassLoader.newInstance(java.net.URL[])"
    ],
    "javax.swing.defaultbuttonmodel.getlisteners": [
        "javax.swing.DefaultButtonModel.getListeners(java.lang.Class<T>)"
    ],
    "javax.swing.text.editorkit.getactions": [
        "javax.swing.text.EditorKit.getActions()"
    ],
    "java.time.monthday.now": [
        "java.time.MonthDay.now()",
        "java.time.MonthDay.now(java.time.Clock)",
        "java.time.MonthDay.now(java.time.ZoneId)"
    ],
    "javax.accessibility.accessiblecomponent.getbackground": [
        "javax.accessibility.AccessibleComponent.getBackground()"
    ],
    "javax.swing.layoutstyle.getinstance": [
        "javax.swing.LayoutStyle.getInstance()"
    ],
    "javax.swing.jlist.getselectionforeground": [
        "javax.swing.JList.getSelectionForeground()"
    ],
    "java.security.cert.pkixparameters.setrevocationenabled": [
        "java.security.cert.PKIXParameters.setRevocationEnabled(boolean)"
    ],
    "org.omg.portableinterceptor.clientrequestinterceptoroperations.receive_exception": [
        "org.omg.PortableInterceptor.ClientRequestInterceptorOperations.receive_exception(org.omg.PortableInterceptor.ClientRequestInfo)"
    ],
    "javax.imageio.plugins.jpeg.jpegimagewriteparam.setencodetables": [
        "javax.imageio.plugins.jpeg.JPEGImageWriteParam.setEncodeTables(javax.imageio.plugins.jpeg.JPEGQTable[],javax.imageio.plugins.jpeg.JPEGHuffmanTable[],javax.imageio.plugins.jpeg.JPEGHuffmanTable[])"
    ],
    "java.util.map.keyset": [
        "java.util.Map.keySet()"
    ],
    "javax.xml.transform.templates.getoutputproperties": [
        "javax.xml.transform.Templates.getOutputProperties()"
    ],
    "java.io.reader.close": [
        "java.io.Reader.close()"
    ],
    "javax.sql.rowset.serial.serialdatalink.hashcode": [
        "javax.sql.rowset.serial.SerialDatalink.hashCode()"
    ],
    "java.awt.image.bandedsamplemodel.getdataelements": [
        "java.awt.image.BandedSampleModel.getDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)"
    ],
    "java.security.keyrep.type.values": [
        "java.security.KeyRep.Type.values()"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writenstring": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeNString(java.lang.String)"
    ],
    "java.time.offsettime.plushours": [
        "java.time.OffsetTime.plusHours(long)"
    ],
    "javax.xml.parsers.documentbuilderfactory.getschema": [
        "javax.xml.parsers.DocumentBuilderFactory.getSchema()"
    ],
    "javax.management.openmbean.openmbeanparameterinfo.getmaxvalue": [
        "javax.management.openmbean.OpenMBeanParameterInfo.getMaxValue()"
    ],
    "javax.swing.jprogressbar.setindeterminate": [
        "javax.swing.JProgressBar.setIndeterminate(boolean)"
    ],
    "java.nio.file.attribute.aclentrypermission.values": [
        "java.nio.file.attribute.AclEntryPermission.values()"
    ],
    "javax.swing.text.boxview.getaxis": [
        "javax.swing.text.BoxView.getAxis()"
    ],
    "javax.management.standardmbean.postderegister": [
        "javax.management.StandardMBean.postDeregister()"
    ],
    "javax.management.modelmbean.descriptorsupport.clone": [
        "javax.management.modelmbean.DescriptorSupport.clone()"
    ],
    "java.beans.xmlencoder.writestatement": [
        "java.beans.XMLEncoder.writeStatement(java.beans.Statement)"
    ],
    "java.util.concurrent.locks.abstractqueuedlongsynchronizer.getexclusivequeuedthreads": [
        "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getExclusiveQueuedThreads()"
    ],
    "javax.swing.tree.treeselectionmodel.setselectionmode": [
        "javax.swing.tree.TreeSelectionModel.setSelectionMode(int)"
    ],
    "java.util.treemap.tailmap": [
        "java.util.TreeMap.tailMap(K)"
    ],
    "java.nio.file.path.register": [
        "java.nio.file.Path.register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>,java.nio.file.WatchEvent.Modifier)",
        "java.nio.file.Path.register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>)",
        "java.nio.file.Path.register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>[],java.nio.file.WatchEvent.Modifier...)",
        "java.nio.file.Path.register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>...)"
    ],
    "javax.swing.tree.abstractlayoutcache.getvisiblepathsfrom": [
        "javax.swing.tree.AbstractLayoutCache.getVisiblePathsFrom(javax.swing.tree.TreePath)"
    ],
    "java.text.simpledateformat.hashcode": [
        "java.text.SimpleDateFormat.hashCode()"
    ],
    "java.time.clock.instant": [
        "java.time.Clock.instant()"
    ],
    "java.time.year.plus": [
        "java.time.Year.plus(long,java.time.temporal.TemporalUnit)",
        "java.time.Year.plus(java.time.temporal.TemporalAmount)"
    ],
    "javax.swing.text.jtextcomponent.getdocument": [
        "javax.swing.text.JTextComponent.getDocument()"
    ],
    "java.awt.graphicsenvironment.preferlocalefonts": [
        "java.awt.GraphicsEnvironment.preferLocaleFonts()"
    ],
    "java.applet.applet.newaudioclip": [
        "java.applet.Applet.newAudioClip(java.net.URL)"
    ],
    "java.nio.longbuffer.tostring": [
        "java.nio.LongBuffer.toString()"
    ],
    "java.awt.keyboardfocusmanager.getactivewindow": [
        "java.awt.KeyboardFocusManager.getActiveWindow()"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.readlock.unlock": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.unlock()"
    ],
    "java.util.concurrent.concurrentskiplistmap.values": [
        "java.util.concurrent.ConcurrentSkipListMap.values()"
    ],
    "java.math.biginteger.valueof": [
        "java.math.BigInteger.valueOf(long)"
    ],
    "java.net.httpurlconnection.setrequestmethod": [
        "java.net.HttpURLConnection.setRequestMethod(java.lang.String)"
    ],
    "java.awt.event.inputevent.getwhen": [
        "java.awt.event.InputEvent.getWhen()"
    ],
    "javax.swing.defaultlistmodel.copyinto": [
        "javax.swing.DefaultListModel.copyInto(java.lang.Object[])"
    ],
    "javax.naming.initialcontext.composename": [
        "javax.naming.InitialContext.composeName(java.lang.String,java.lang.String)",
        "javax.naming.InitialContext.composeName(javax.naming.Name,javax.naming.Name)"
    ],
    "javax.swing.jcombobox.updateui": [
        "javax.swing.JComboBox.updateUI()"
    ],
    "javax.swing.text.abstractdocument.getparagraphelement": [
        "javax.swing.text.AbstractDocument.getParagraphElement(int)"
    ],
    "java.net.securecacheresponse.getlocalprincipal": [
        "java.net.SecureCacheResponse.getLocalPrincipal()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintdesktoppanebackground": [
        "javax.swing.plaf.synth.SynthPainter.paintDesktopPaneBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.uimanager.removeauxiliarylookandfeel": [
        "javax.swing.UIManager.removeAuxiliaryLookAndFeel(javax.swing.LookAndFeel)"
    ],
    "org.omg.dynamicany._dynunionstub.insert_long": [
        "org.omg.DynamicAny._DynUnionStub.insert_long(int)"
    ],
    "javax.sql.pooledconnection.close": [
        "javax.sql.PooledConnection.close()"
    ],
    "java.io.datainputstream.read": [
        "java.io.DataInputStream.read(byte[],int,int)",
        "java.io.DataInputStream.read(byte[])"
    ],
    "java.lang.strictmath.addexact": [
        "java.lang.StrictMath.addExact(int,int)",
        "java.lang.StrictMath.addExact(long,long)"
    ],
    "org.omg.dynamicany._dynstructstub.get_val": [
        "org.omg.DynamicAny._DynStructStub.get_val()"
    ],
    "javax.swing.plaf.basic.basictabbedpaneui.getfocusindex": [
        "javax.swing.plaf.basic.BasicTabbedPaneUI.getFocusIndex()"
    ],
    "javax.print.doc.getdocflavor": [
        "javax.print.Doc.getDocFlavor()"
    ],
    "javax.swing.text.view.getcontainer": [
        "javax.swing.text.View.getContainer()"
    ],
    "java.time.format.resolverstyle.valueof": [
        "java.time.format.ResolverStyle.valueOf(java.lang.String)"
    ],
    "java.awt.component.getcomponentat": [
        "java.awt.Component.getComponentAt(java.awt.Point)"
    ],
    "java.util.zip.zipfile.getentry": [
        "java.util.zip.ZipFile.getEntry(java.lang.String)"
    ],
    "java.awt.im.inputmethodhighlight.getstate": [
        "java.awt.im.InputMethodHighlight.getState()"
    ],
    "javax.swing.jlist.getvisiblerowcount": [
        "javax.swing.JList.getVisibleRowCount()"
    ],
    "java.security.cert.pkixparameters.addcertstore": [
        "java.security.cert.PKIXParameters.addCertStore(java.security.cert.CertStore)"
    ],
    "java.net.proxy.tostring": [
        "java.net.Proxy.toString()"
    ],
    "javax.xml.crypto.urireferenceexception.getcause": [
        "javax.xml.crypto.URIReferenceException.getCause()"
    ],
    "javax.crypto.keyagreement.getprovider": [
        "javax.crypto.KeyAgreement.getProvider()"
    ],
    "org.omg.portableserver.poaoperations.activate_object": [
        "org.omg.PortableServer.POAOperations.activate_object(org.omg.PortableServer.Servant)"
    ],
    "javax.activation.commandmap.getpreferredcommands": [
        "javax.activation.CommandMap.getPreferredCommands(java.lang.String,javax.activation.DataSource)",
        "javax.activation.CommandMap.getPreferredCommands(java.lang.String)"
    ],
    "java.awt.textfield.getlisteners": [
        "java.awt.TextField.getListeners(java.lang.Class<T>)"
    ],
    "java.util.concurrent.atomic.atomicinteger.decrementandget": [
        "java.util.concurrent.atomic.AtomicInteger.decrementAndGet()"
    ],
    "javax.swing.text.jtextcomponent.gethighlighter": [
        "javax.swing.text.JTextComponent.getHighlighter()"
    ],
    "java.security.cert.pkixparameters.setpolicyqualifiersrejected": [
        "java.security.cert.PKIXParameters.setPolicyQualifiersRejected(boolean)"
    ],
    "java.util.hashtable.keys": [
        "java.util.Hashtable.keys()"
    ],
    "java.net.httpcookie.setmaxage": [
        "java.net.HttpCookie.setMaxAge(long)"
    ],
    "java.awt.component.update": [
        "java.awt.Component.update(java.awt.Graphics)"
    ],
    "java.net.socket.bind": [
        "java.net.Socket.bind(java.net.SocketAddress)"
    ],
    "java.awt.event.invocationevent.getexception": [
        "java.awt.event.InvocationEvent.getException()"
    ],
    "javax.swing.undo.undoableedit.getundopresentationname": [
        "javax.swing.undo.UndoableEdit.getUndoPresentationName()"
    ],
    "javax.management.notification.settimestamp": [
        "javax.management.Notification.setTimeStamp(long)"
    ],
    "javax.swing.plaf.multi.multidesktopiconui.contains": [
        "javax.swing.plaf.multi.MultiDesktopIconUI.contains(javax.swing.JComponent,int,int)"
    ],
    "javax.swing.plaf.multi.multipopupmenuui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiPopupMenuUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "org.omg.portableserver.poamanageroperations.get_state": [
        "org.omg.PortableServer.POAManagerOperations.get_state()"
    ],
    "java.awt.window.setopacity": [
        "java.awt.Window.setOpacity(float)"
    ],
    "javax.management.mbeanserverdelegate.getmbeanserverid": [
        "javax.management.MBeanServerDelegate.getMBeanServerId()"
    ],
    "javax.script.scriptenginemanager.setbindings": [
        "javax.script.ScriptEngineManager.setBindings(javax.script.Bindings)"
    ],
    "java.security.cert.x509certselector.clone": [
        "java.security.cert.X509CertSelector.clone()"
    ],
    "java.nio.channels.filechannel.read": [
        "java.nio.channels.FileChannel.read(java.nio.ByteBuffer,int,int)",
        "java.nio.channels.FileChannel.read(java.nio.ByteBuffer)",
        "java.nio.channels.FileChannel.read(java.nio.ByteBuffer,long)",
        "java.nio.channels.FileChannel.read(java.nio.ByteBuffer[],int,int)",
        "java.nio.channels.FileChannel.read(java.nio.ByteBuffer[])"
    ],
    "java.util.concurrent.locks.abstractqueuedlongsynchronizer.haswaiters": [
        "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasWaiters(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject)"
    ],
    "javax.swing.plaf.synth.synthcontext.getstyle": [
        "javax.swing.plaf.synth.SynthContext.getStyle()"
    ],
    "java.beans.beancontext.beancontextsupport.size": [
        "java.beans.beancontext.BeanContextSupport.size()"
    ],
    "javax.swing.rowsorter.sortkey.hashcode": [
        "javax.swing.RowSorter.SortKey.hashCode()"
    ],
    "javax.swing.jsplitpane.getorientation": [
        "javax.swing.JSplitPane.getOrientation()"
    ],
    "org.omg.dynamicany._dynvaluestub.get_double": [
        "org.omg.DynamicAny._DynValueStub.get_double()"
    ],
    "java.security.keystore.getcreationdate": [
        "java.security.KeyStore.getCreationDate(java.lang.String)"
    ],
    "java.awt.list.getselectedobjects": [
        "java.awt.List.getSelectedObjects()"
    ],
    "java.util.sortedset.headset": [
        "java.util.SortedSet.headSet(java.util.SortedSet)",
        "java.util.SortedSet.headSet(E)"
    ],
    "javax.swing.plaf.metal.metaltheme.getacceleratorforeground": [
        "javax.swing.plaf.metal.MetalTheme.getAcceleratorForeground()"
    ],
    "java.awt.dnd.droptarget.getflavormap": [
        "java.awt.dnd.DropTarget.getFlavorMap()"
    ],
    "java.lang.readable.read": [
        "java.lang.Readable.read(java.nio.CharBuffer)"
    ],
    "java.time.localdate.of": [
        "java.time.LocalDate.of(int,int,int)",
        "java.time.LocalDate.of(int,java.time.Month,int)"
    ],
    "javax.management.openmbean.tabulardatasupport.size": [
        "javax.management.openmbean.TabularDataSupport.size()"
    ],
    "java.rmi.server.remoteobject.tostring": [
        "java.rmi.server.RemoteObject.toString()"
    ],
    "java.util.formatter.bigdecimallayoutform.values": [
        "java.util.Formatter.BigDecimalLayoutForm.values()"
    ],
    "java.time.zone.zoneoffsettransitionrule.timedefinition.createdatetime": [
        "java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.createDateTime(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneOffset)"
    ],
    "javax.security.sasl.authorizecallback.setauthorized": [
        "javax.security.sasl.AuthorizeCallback.setAuthorized(boolean)"
    ],
    "java.nio.channels.spi.selectorprovider.provider": [
        "java.nio.channels.spi.SelectorProvider.provider()"
    ],
    "java.time.localdatetime.atzone": [
        "java.time.LocalDateTime.atZone(java.time.ZoneId)"
    ],
    "javax.management.relation.relationservice.getrelationtypename": [
        "javax.management.relation.RelationService.getRelationTypeName(java.lang.String)"
    ],
    "java.security.interfaces.ecprivatekey.gets": [
        "java.security.interfaces.ECPrivateKey.getS()"
    ],
    "java.security.cert.pkixrevocationchecker.setocsprespondercert": [
        "java.security.cert.PKIXRevocationChecker.setOcspResponderCert(java.security.cert.X509Certificate)"
    ],
    "org.omg.dynamicany._dynfixedstub.get_short": [
        "org.omg.DynamicAny._DynFixedStub.get_short()"
    ],
    "java.util.locale.languagerange.equals": [
        "java.util.Locale.LanguageRange.equals(java.lang.Object)"
    ],
    "java.awt.cardlayout.addlayoutcomponent": [
        "java.awt.CardLayout.addLayoutComponent(java.awt.Component,java.lang.Object)"
    ],
    "java.util.linkedlist.size": [
        "java.util.LinkedList.size()"
    ],
    "java.awt.geom.area.intersects": [
        "java.awt.geom.Area.intersects(double,double,double,double)",
        "java.awt.geom.Area.intersects(java.awt.geom.Rectangle2D)"
    ],
    "java.lang.integer.floatvalue": [
        "java.lang.Integer.floatValue()"
    ],
    "java.awt.defaultkeyboardfocusmanager.dispatchevent": [
        "java.awt.DefaultKeyboardFocusManager.dispatchEvent(java.awt.AWTEvent)"
    ],
    "javax.swing.tree.defaulttreemodel.getpathtoroot": [
        "javax.swing.tree.DefaultTreeModel.getPathToRoot(javax.swing.tree.TreeNode,int)",
        "javax.swing.tree.DefaultTreeModel.getPathToRoot(javax.swing.tree.TreeNode)"
    ],
    "java.util.hashtable.foreach": [
        "java.util.Hashtable.forEach(java.util.function.BiConsumer<? super,? super V>)"
    ],
    "javax.swing.progressmonitor.setmillistodecidetopopup": [
        "javax.swing.ProgressMonitor.setMillisToDecideToPopup(int)"
    ],
    "java.util.concurrent.atomic.atomicintegerfieldupdater.getandupdate": [
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndUpdate(java.util.concurrent.atomic.AtomicIntegerFieldUpdater,java.util.function.IntUnaryOperator)",
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndUpdate(T,java.util.function.IntUnaryOperator)"
    ],
    "javax.swing.swingworker.statevalue.values": [
        "javax.swing.SwingWorker.StateValue.values()"
    ],
    "javax.xml.transform.stax.staxsource.setsystemid": [
        "javax.xml.transform.stax.StAXSource.setSystemId(java.lang.String)"
    ],
    "javax.imageio.spi.serviceregistry.setordering": [
        "javax.imageio.spi.ServiceRegistry.setOrdering(java.lang.Class<T>,T,T)"
    ],
    "javax.swing.jpopupmenu.add": [
        "javax.swing.JPopupMenu.add(java.lang.String)",
        "javax.swing.JPopupMenu.add(javax.swing.Action)",
        "javax.swing.JPopupMenu.add(javax.swing.JMenuItem)"
    ],
    "javax.sound.sampled.clip.getmicrosecondlength": [
        "javax.sound.sampled.Clip.getMicrosecondLength()"
    ],
    "javax.swing.text.abstractdocument.removeundoableeditlistener": [
        "javax.swing.text.AbstractDocument.removeUndoableEditListener(javax.swing.event.UndoableEditListener)"
    ],
    "java.util.stream.doublestream.iterate": [
        "java.util.stream.DoubleStream.iterate(double,java.util.function.DoubleUnaryOperator)"
    ],
    "java.lang.reflect.array.getboolean": [
        "java.lang.reflect.Array.getBoolean(java.lang.Object,int)"
    ],
    "javax.swing.plaf.basic.basictabbedpaneui.getbaseline": [
        "javax.swing.plaf.basic.BasicTabbedPaneUI.getBaseline(javax.swing.JComponent,int,int)",
        "javax.swing.plaf.basic.BasicTabbedPaneUI.getBaseline(int)"
    ],
    "javax.accessibility.accessibletable.setaccessiblecaption": [
        "javax.accessibility.AccessibleTable.setAccessibleCaption(javax.accessibility.Accessible)"
    ],
    "javax.swing.jspinner.numbereditor.getformat": [
        "javax.swing.JSpinner.NumberEditor.getFormat()"
    ],
    "java.time.zoneid.from": [
        "java.time.ZoneId.from(java.time.temporal.TemporalAccessor)"
    ],
    "javax.management.query.classattr": [
        "javax.management.Query.classattr()"
    ],
    "java.awt.component.setbackground": [
        "java.awt.Component.setBackground(java.awt.Color)"
    ],
    "javax.swing.text.html.stylesheet.removestyle": [
        "javax.swing.text.html.StyleSheet.removeStyle(java.lang.String)"
    ],
    "org.omg.dynamicany.dynvalueoperations.set_members": [
        "org.omg.DynamicAny.DynValueOperations.set_members(org.omg.DynamicAny.NameValuePair[])"
    ],
    "java.awt.image.affinetransformop.createcompatibledestraster": [
        "java.awt.image.AffineTransformOp.createCompatibleDestRaster(java.awt.image.Raster)"
    ],
    "java.nio.file.attribute.basicfileattributes.creationtime": [
        "java.nio.file.attribute.BasicFileAttributes.creationTime()"
    ],
    "javax.swing.jtable.droplocation.getrow": [
        "javax.swing.JTable.DropLocation.getRow()"
    ],
    "java.awt.image.samplemodel.gettransfertype": [
        "java.awt.image.SampleModel.getTransferType()"
    ],
    "org.omg.corba.nvlist.add_item": [
        "org.omg.CORBA.NVList.add_item(java.lang.String,int)"
    ],
    "java.awt.font.opentype.getversion": [
        "java.awt.font.OpenType.getVersion()"
    ],
    "java.lang.invoke.methodhandles.lookup.unreflectconstructor": [
        "java.lang.invoke.MethodHandles.Lookup.unreflectConstructor(java.lang.reflect.Constructor)",
        "java.lang.invoke.MethodHandles.Lookup.unreflectConstructor(java.lang.reflect.Constructor<?>)"
    ],
    "javax.security.cert.x509certificate.getserialnumber": [
        "javax.security.cert.X509Certificate.getSerialNumber()"
    ],
    "java.util.concurrent.linkedblockingdeque.descendingiterator": [
        "java.util.concurrent.LinkedBlockingDeque.descendingIterator()"
    ],
    "java.util.spliterator.ofprimitive.foreachremaining": [
        "java.util.Spliterator.OfPrimitive.forEachRemaining(java.util.Spliterator.OfPrimitive)",
        "java.util.Spliterator.OfPrimitive.forEachRemaining(T_CONS)"
    ],
    "javax.swing.text.document.getstartposition": [
        "javax.swing.text.Document.getStartPosition()"
    ],
    "java.util.calendar.builder.settimezone": [
        "java.util.Calendar.Builder.setTimeZone(java.util.TimeZone)"
    ],
    "java.text.breakiterator.getcharacterinstance": [
        "java.text.BreakIterator.getCharacterInstance()",
        "java.text.BreakIterator.getCharacterInstance(java.util.Locale)"
    ],
    "javax.imageio.imagereader.getdefaultreadparam": [
        "javax.imageio.ImageReader.getDefaultReadParam()"
    ],
    "java.time.offsetdatetime.range": [
        "java.time.OffsetDateTime.range(java.time.temporal.TemporalField)"
    ],
    "java.time.chrono.japaneseera.range": [
        "java.time.chrono.JapaneseEra.range(java.time.temporal.TemporalField)"
    ],
    "javax.swing.plaf.basic.basicsplitpanedivider.finishdraggingto": [
        "javax.swing.plaf.basic.BasicSplitPaneDivider.finishDraggingTo(int)"
    ],
    "javax.swing.plaf.metal.metallabelui.paintdisabledtext": [
        "javax.swing.plaf.metal.MetalLabelUI.paintDisabledText(javax.swing.JLabel,java.awt.Graphics,java.lang.String,int,int)"
    ],
    "javax.swing.jdesktoppane.selectframe": [
        "javax.swing.JDesktopPane.selectFrame(boolean)"
    ],
    "java.awt.frame.setundecorated": [
        "java.awt.Frame.setUndecorated(boolean)"
    ],
    "java.net.urlconnection.getdooutput": [
        "java.net.URLConnection.getDoOutput()"
    ],
    "java.util.serviceloader.loadinstalled": [
        "java.util.ServiceLoader.loadInstalled(java.lang.Class<S>)"
    ],
    "javax.swing.jtable.setrowselectionallowed": [
        "javax.swing.JTable.setRowSelectionAllowed(boolean)"
    ],
    "javax.lang.model.util.abstractannotationvaluevisitor6.visit": [
        "javax.lang.model.util.AbstractAnnotationValueVisitor6.visit(javax.lang.model.element.AnnotationValue)",
        "javax.lang.model.util.AbstractAnnotationValueVisitor6.visit(javax.lang.model.element.AnnotationValue,javax.lang.model.util.AbstractAnnotationValueVisitor6)"
    ],
    "javax.swing.text.html.stylesheet.removeattributes": [
        "javax.swing.text.html.StyleSheet.removeAttributes(javax.swing.text.AttributeSet,javax.swing.text.AttributeSet)",
        "javax.swing.text.html.StyleSheet.removeAttributes(javax.swing.text.AttributeSet,java.util.Enumeration<?>)"
    ],
    "javax.swing.text.html.htmldocument.iterator.getattributes": [
        "javax.swing.text.html.HTMLDocument.Iterator.getAttributes()"
    ],
    "java.beans.propertyeditorsupport.getsource": [
        "java.beans.PropertyEditorSupport.getSource()"
    ],
    "org.omg.corba.context.create_child": [
        "org.omg.CORBA.Context.create_child(java.lang.String)"
    ],
    "java.security.cert.certstore.getcertstoreparameters": [
        "java.security.cert.CertStore.getCertStoreParameters()"
    ],
    "java.util.concurrent.executorservice.submit": [
        "java.util.concurrent.ExecutorService.submit(java.lang.Runnable,T)",
        "java.util.concurrent.ExecutorService.submit(java.util.concurrent.Callable<T>)",
        "java.util.concurrent.ExecutorService.submit(java.lang.Runnable)"
    ],
    "java.util.calendar.builder.set": [
        "java.util.Calendar.Builder.set(int,int)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintcheckboxbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintCheckBoxBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.xml.transform.stax.staxresult.getxmlstreamwriter": [
        "javax.xml.transform.stax.StAXResult.getXMLStreamWriter()"
    ],
    "org.omg.corba.portable.delegate.equals": [
        "org.omg.CORBA.portable.Delegate.equals(org.omg.CORBA.Object,java.lang.Object)"
    ],
    "java.util.hashmap.replaceall": [
        "java.util.HashMap.replaceAll(java.util.function.BiFunction<? super,? super,? extends V>)"
    ],
    "javax.tools.standardjavafilemanager.getlocation": [
        "javax.tools.StandardJavaFileManager.getLocation(javax.tools.JavaFileManager.Location)"
    ],
    "java.util.concurrent.atomic.atomicintegerarray.get": [
        "java.util.concurrent.atomic.AtomicIntegerArray.get(int)"
    ],
    "java.time.offsetdatetime.adjustinto": [
        "java.time.OffsetDateTime.adjustInto(java.time.temporal.Temporal)"
    ],
    "java.time.offsettime.of": [
        "java.time.OffsetTime.of(java.time.LocalTime,java.time.ZoneOffset)",
        "java.time.OffsetTime.of(int,int,int,int,java.time.ZoneOffset)"
    ],
    "javax.swing.abstractspinnermodel.addchangelistener": [
        "javax.swing.AbstractSpinnerModel.addChangeListener(javax.swing.event.ChangeListener)"
    ],
    "javax.swing.text.keymap.getname": [
        "javax.swing.text.Keymap.getName()"
    ],
    "javax.swing.tree.abstractlayoutcache.getpreferredwidth": [
        "javax.swing.tree.AbstractLayoutCache.getPreferredWidth(java.awt.Rectangle)"
    ],
    "javax.lang.model.type.unknowntypeexception.getunknowntype": [
        "javax.lang.model.type.UnknownTypeException.getUnknownType()"
    ],
    "java.util.calendar.getdisplaynames": [
        "java.util.Calendar.getDisplayNames(int,int,java.util.Locale)"
    ],
    "java.util.stream.stream.flatmap": [
        "java.util.stream.Stream.flatMap(java.util.function.Function<? super,? extends java.util.stream.Stream<? extends R>>)"
    ],
    "java.util.prefs.abstractpreferences.putbytearray": [
        "java.util.prefs.AbstractPreferences.putByteArray(java.lang.String,byte[])"
    ],
    "javax.swing.plaf.synth.synthsliderui.getpreferredsize": [
        "javax.swing.plaf.synth.SynthSliderUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "org.omg.dynamicany._dynenumstub.insert_longlong": [
        "org.omg.DynamicAny._DynEnumStub.insert_longlong(long)"
    ],
    "javax.swing.focusmanager.getcurrentmanager": [
        "javax.swing.FocusManager.getCurrentManager()"
    ],
    "java.util.jar.jarinputstream.getnextjarentry": [
        "java.util.jar.JarInputStream.getNextJarEntry()"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.writelock.unlock": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.unlock()"
    ],
    "javax.swing.plaf.synth.synthcomboboxui.getcontext": [
        "javax.swing.plaf.synth.SynthComboBoxUI.getContext(javax.swing.JComponent)"
    ],
    "javax.swing.text.html.htmldocument.getbase": [
        "javax.swing.text.html.HTMLDocument.getBase()"
    ],
    "java.awt.event.itemevent.paramstring": [
        "java.awt.event.ItemEvent.paramString()"
    ],
    "java.nio.bytebuffer.asfloatbuffer": [
        "java.nio.ByteBuffer.asFloatBuffer()"
    ],
    "javax.swing.jpanel.updateui": [
        "javax.swing.JPanel.updateUI()"
    ],
    "java.awt.im.inputcontext.endcomposition": [
        "java.awt.im.InputContext.endComposition()"
    ],
    "java.lang.package.getspecificationversion": [
        "java.lang.Package.getSpecificationVersion()"
    ],
    "java.security.cert.pkixrevocationchecker.setocspresponder": [
        "java.security.cert.PKIXRevocationChecker.setOcspResponder(java.net.URI)"
    ],
    "java.time.zoneddatetime.withfixedoffsetzone": [
        "java.time.ZonedDateTime.withFixedOffsetZone()"
    ],
    "javax.swing.jtabbedpane.getui": [
        "javax.swing.JTabbedPane.getUI()"
    ],
    "java.util.logging.logrecord.getlevel": [
        "java.util.logging.LogRecord.getLevel()"
    ],
    "javax.swing.defaultrowsorter.modelwrapper.getidentifier": [
        "javax.swing.DefaultRowSorter.ModelWrapper.getIdentifier(int)"
    ],
    "org.omg.dynamicany.dynanyoperations.next": [
        "org.omg.DynamicAny.DynAnyOperations.next()"
    ],
    "java.lang.stringbuilder.deletecharat": [
        "java.lang.StringBuilder.deleteCharAt(int)"
    ],
    "javax.swing.plaf.basic.basiclistui.indextolocation": [
        "javax.swing.plaf.basic.BasicListUI.indexToLocation(javax.swing.JList,int)"
    ],
    "java.util.concurrent.atomic.atomicreferencearray.length": [
        "java.util.concurrent.atomic.AtomicReferenceArray.length()"
    ],
    "javax.net.ssl.sslsession.invalidate": [
        "javax.net.ssl.SSLSession.invalidate()"
    ],
    "javax.swing.jtoolbar.paintborder": [
        "javax.swing.JToolBar.paintBorder(java.awt.Graphics)"
    ],
    "javax.xml.bind.binder.setproperty": [
        "javax.xml.bind.Binder.setProperty(java.lang.String,java.lang.Object)"
    ],
    "javax.swing.text.html.stylesheet.addrule": [
        "javax.swing.text.html.StyleSheet.addRule(java.lang.String)"
    ],
    "java.nio.file.files.list": [
        "java.nio.file.Files.list(java.nio.file.Path)"
    ],
    "java.sql.callablestatement.getfloat": [
        "java.sql.CallableStatement.getFloat(java.lang.String)",
        "java.sql.CallableStatement.getFloat(int)"
    ],
    "java.lang.management.memorypoolmxbean.getcollectionusagethresholdcount": [
        "java.lang.management.MemoryPoolMXBean.getCollectionUsageThresholdCount()"
    ],
    "java.util.list.replaceall": [
        "java.util.List.replaceAll(java.util.function.UnaryOperator<E>)",
        "java.util.List.replaceAll(java.util.function.UnaryOperator<java.util.List>)"
    ],
    "javax.naming.referralexception.getreferralcontext": [
        "javax.naming.ReferralException.getReferralContext()",
        "javax.naming.ReferralException.getReferralContext(,?>)"
    ],
    "javax.xml.parsers.documentbuilderfactory.isvalidating": [
        "javax.xml.parsers.DocumentBuilderFactory.isValidating()"
    ],
    "javax.swing.text.html.option.setselection": [
        "javax.swing.text.html.Option.setSelection(boolean)"
    ],
    "javax.swing.plaf.synth.synthcomboboxui.installlisteners": [
        "javax.swing.plaf.synth.SynthComboBoxUI.installListeners()"
    ],
    "javax.swing.tree.treepath.getparentpath": [
        "javax.swing.tree.TreePath.getParentPath()"
    ],
    "javax.swing.defaultboundedrangemodel.removechangelistener": [
        "javax.swing.DefaultBoundedRangeModel.removeChangeListener(javax.swing.event.ChangeListener)"
    ],
    "java.util.function.predicate.or": [
        "java.util.function.Predicate.or(java.util.function.Predicate<? super T>)",
        "java.util.function.Predicate.or(java.util.function.Predicate<? super java.util.function.Predicate>)"
    ],
    "java.util.stream.doublestream.empty": [
        "java.util.stream.DoubleStream.empty()"
    ],
    "java.util.logging.logrecord.setthreadid": [
        "java.util.logging.LogRecord.setThreadID(int)"
    ],
    "javax.xml.crypto.dsig.transformservice.getmechanismtype": [
        "javax.xml.crypto.dsig.TransformService.getMechanismType()"
    ],
    "java.awt.geom.arc2d.setarctype": [
        "java.awt.geom.Arc2D.setArcType(int)"
    ],
    "javax.swing.transferhandler.getcutaction": [
        "javax.swing.TransferHandler.getCutAction()"
    ],
    "javax.xml.crypto.dsig.signedinfo.getsignaturemethod": [
        "javax.xml.crypto.dsig.SignedInfo.getSignatureMethod()"
    ],
    "javax.sound.midi.mididevice.info.hashcode": [
        "javax.sound.midi.MidiDevice.Info.hashCode()"
    ],
    "javax.swing.tree.mutabletreenode.remove": [
        "javax.swing.tree.MutableTreeNode.remove(int)",
        "javax.swing.tree.MutableTreeNode.remove(javax.swing.tree.MutableTreeNode)"
    ],
    "javax.management.monitor.countermonitormbean.setinitthreshold": [
        "javax.management.monitor.CounterMonitorMBean.setInitThreshold(java.lang.Number)"
    ],
    "java.math.bigdecimal.hashcode": [
        "java.math.BigDecimal.hashCode()"
    ],
    "java.rmi.registry.locateregistry.createregistry": [
        "java.rmi.registry.LocateRegistry.createRegistry(int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)",
        "java.rmi.registry.LocateRegistry.createRegistry(int)"
    ],
    "javax.swing.plaf.componentui.createui": [
        "javax.swing.plaf.ComponentUI.createUI(javax.swing.JComponent)"
    ],
    "javax.management.monitor.monitormbean.isactive": [
        "javax.management.monitor.MonitorMBean.isActive()"
    ],
    "javax.swing.sortingfocustraversalpolicy.setimplicitdowncycletraversal": [
        "javax.swing.SortingFocusTraversalPolicy.setImplicitDownCycleTraversal(boolean)"
    ],
    "java.util.jar.manifest.getentries": [
        "java.util.jar.Manifest.getEntries()"
    ],
    "javax.sql.pooledconnection.removestatementeventlistener": [
        "javax.sql.PooledConnection.removeStatementEventListener(javax.sql.StatementEventListener)"
    ],
    "java.util.collection.hashcode": [
        "java.util.Collection.hashCode()"
    ],
    "java.time.localdatetime.minusweeks": [
        "java.time.LocalDateTime.minusWeeks(long)"
    ],
    "java.lang.integer.tounsignedlong": [
        "java.lang.Integer.toUnsignedLong(int)"
    ],
    "org.xml.sax.dtdhandler.unparsedentitydecl": [
        "org.xml.sax.DTDHandler.unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
    ],
    "java.sql.timestamp.toinstant": [
        "java.sql.Timestamp.toInstant()"
    ],
    "javax.swing.plaf.basic.basiccombopopup.createmousemotionlistener": [
        "javax.swing.plaf.basic.BasicComboPopup.createMouseMotionListener()"
    ],
    "java.security.cert.x509certificate.getissueruniqueid": [
        "java.security.cert.X509Certificate.getIssuerUniqueID()"
    ],
    "javax.swing.border.titledborder.settitlecolor": [
        "javax.swing.border.TitledBorder.setTitleColor(java.awt.Color)"
    ],
    "java.awt.image.getaccelerationpriority": [
        "java.awt.Image.getAccelerationPriority()"
    ],
    "java.nio.file.filesystemexception.getmessage": [
        "java.nio.file.FileSystemException.getMessage()"
    ],
    "javax.management.mbeanattributeinfo.gettype": [
        "javax.management.MBeanAttributeInfo.getType()"
    ],
    "javax.naming.directory.dircontext.createsubcontext": [
        "javax.naming.directory.DirContext.createSubcontext(javax.naming.Name,javax.naming.directory.Attributes)",
        "javax.naming.directory.DirContext.createSubcontext(java.lang.String,javax.naming.directory.Attributes)"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.uninstallui": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.uninstallUI(javax.swing.JComponent)"
    ],
    "javax.management.remote.rmi.rmiconnection.querynames": [
        "javax.management.remote.rmi.RMIConnection.queryNames(javax.management.ObjectName,java.rmi.MarshalledObject,javax.security.auth.Subject)"
    ],
    "java.time.chrono.thaibuddhistdate.minus": [
        "java.time.chrono.ThaiBuddhistDate.minus(java.time.temporal.TemporalAmount)"
    ],
    "java.beans.introspector.flushfromcaches": [
        "java.beans.Introspector.flushFromCaches(java.lang.Class<?>)"
    ],
    "javax.imageio.stream.imageinputstreamimpl.finalize": [
        "javax.imageio.stream.ImageInputStreamImpl.finalize()"
    ],
    "java.text.collationkey.compareto": [
        "java.text.CollationKey.compareTo(java.text.CollationKey)"
    ],
    "java.text.dateformatsymbols.getshortweekdays": [
        "java.text.DateFormatSymbols.getShortWeekdays()"
    ],
    "javax.swing.jscrollpane.getviewport": [
        "javax.swing.JScrollPane.getViewport()"
    ],
    "java.io.dataoutput.writechar": [
        "java.io.DataOutput.writeChar(int)"
    ],
    "java.lang.math.sqrt": [
        "java.lang.Math.sqrt(double)"
    ],
    "javax.management.mbeanserverdelegate.sendnotification": [
        "javax.management.MBeanServerDelegate.sendNotification(javax.management.Notification)"
    ],
    "javax.swing.plaf.synth.synthmenubarui.getcontext": [
        "javax.swing.plaf.synth.SynthMenuBarUI.getContext(javax.swing.JComponent)"
    ],
    "java.lang.management.runtimemxbean.getvmvendor": [
        "java.lang.management.RuntimeMXBean.getVmVendor()"
    ],
    "javax.management.timer.timer.getfixedrate": [
        "javax.management.timer.Timer.getFixedRate(java.lang.Integer)"
    ],
    "java.util.stream.collectors.partitioningby": [
        "java.util.stream.Collectors.partitioningBy(java.util.function.Predicate<? super T>)",
        "java.util.stream.Collectors.partitioningBy(java.util.function.Predicate<? super T>,java.util.stream.Collector<? super,,D>)"
    ],
    "javax.swing.plaf.treeui.geteditingpath": [
        "javax.swing.plaf.TreeUI.getEditingPath(javax.swing.JTree)"
    ],
    "java.sql.databasemetadata.storesuppercasequotedidentifiers": [
        "java.sql.DatabaseMetaData.storesUpperCaseQuotedIdentifiers()"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.clone": [
        "javax.swing.tree.DefaultTreeSelectionModel.clone()"
    ],
    "javax.swing.plaf.multi.multiviewportui.paint": [
        "javax.swing.plaf.multi.MultiViewportUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.awt.font.textlayout.getadvance": [
        "java.awt.font.TextLayout.getAdvance()"
    ],
    "javax.xml.stream.events.startdocument.getversion": [
        "javax.xml.stream.events.StartDocument.getVersion()"
    ],
    "javax.swing.jlabel.gethorizontaltextposition": [
        "javax.swing.JLabel.getHorizontalTextPosition()"
    ],
    "javax.print.attribute.standard.referenceurischemessupported.getcategory": [
        "javax.print.attribute.standard.ReferenceUriSchemesSupported.getCategory()"
    ],
    "java.security.cert.pkixparameters.gettrustanchors": [
        "java.security.cert.PKIXParameters.getTrustAnchors()"
    ],
    "javax.management.monitor.gaugemonitor.stop": [
        "javax.management.monitor.GaugeMonitor.stop()"
    ],
    "java.util.concurrent.atomic.doubleadder.floatvalue": [
        "java.util.concurrent.atomic.DoubleAdder.floatValue()"
    ],
    "javax.xml.xpath.xpathexception.getcause": [
        "javax.xml.xpath.XPathException.getCause()"
    ],
    "javax.sound.sampled.floatcontrol.shift": [
        "javax.sound.sampled.FloatControl.shift(float,float,int)"
    ],
    "javax.swing.jcomponent.setalignmenty": [
        "javax.swing.JComponent.setAlignmentY(float)"
    ],
    "java.util.spi.resourcebundlecontrolprovider.getcontrol": [
        "java.util.spi.ResourceBundleControlProvider.getControl(java.lang.String)"
    ],
    "javax.xml.soap.mimeheaders.getallheaders": [
        "javax.xml.soap.MimeHeaders.getAllHeaders()"
    ],
    "javax.print.attribute.standard.jobkoctets.getcategory": [
        "javax.print.attribute.standard.JobKOctets.getCategory()"
    ],
    "java.sql.databasemetadata.insertsaredetected": [
        "java.sql.DatabaseMetaData.insertsAreDetected(int)"
    ],
    "java.time.month.getlong": [
        "java.time.Month.getLong(java.time.temporal.TemporalField)"
    ],
    "javax.swing.plaf.metal.metaltheme.getsystemtextcolor": [
        "javax.swing.plaf.metal.MetalTheme.getSystemTextColor()"
    ],
    "java.awt.image.bandedsamplemodel.setdataelements": [
        "java.awt.image.BandedSampleModel.setDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)"
    ],
    "java.lang.appendable.append": [
        "java.lang.Appendable.append(java.lang.CharSequence,int,int)",
        "java.lang.Appendable.append(char)",
        "java.lang.Appendable.append(java.lang.CharSequence)"
    ],
    "javax.swing.text.stylecontext.addchangelistener": [
        "javax.swing.text.StyleContext.addChangeListener(javax.swing.event.ChangeListener)"
    ],
    "java.util.identityhashmap.entryset": [
        "java.util.IdentityHashMap.entrySet()"
    ],
    "java.util.stream.doublestream.collect": [
        "java.util.stream.DoubleStream.collect(java.util.function.Supplier<R>,java.util.function.ObjDoubleConsumer<R>,,R>)"
    ],
    "java.time.format.decimalstyle.getpositivesign": [
        "java.time.format.DecimalStyle.getPositiveSign()"
    ],
    "java.util.zip.deflater.gettotalin": [
        "java.util.zip.Deflater.getTotalIn()"
    ],
    "javax.swing.jmenubar.getselectionmodel": [
        "javax.swing.JMenuBar.getSelectionModel()"
    ],
    "javax.xml.soap.attachmentpart.getbase64content": [
        "javax.xml.soap.AttachmentPart.getBase64Content()"
    ],
    "javax.naming.ldap.starttlsresponse.sethostnameverifier": [
        "javax.naming.ldap.StartTlsResponse.setHostnameVerifier(javax.net.ssl.HostnameVerifier)"
    ],
    "java.awt.textarea.getaccessiblecontext": [
        "java.awt.TextArea.getAccessibleContext()"
    ],
    "java.util.regex.matcher.hastransparentbounds": [
        "java.util.regex.Matcher.hasTransparentBounds()"
    ],
    "javax.swing.plaf.basic.combopopup.getmousemotionlistener": [
        "javax.swing.plaf.basic.ComboPopup.getMouseMotionListener()"
    ],
    "java.lang.stacktraceelement.getmethodname": [
        "java.lang.StackTraceElement.getMethodName()"
    ],
    "java.awt.mediatracker.statusall": [
        "java.awt.MediaTracker.statusAll(boolean)"
    ],
    "org.omg.corba.portable.applicationexception.getinputstream": [
        "org.omg.CORBA.portable.ApplicationException.getInputStream()"
    ],
    "javax.swing.text.html.inlineview.insertupdate": [
        "javax.swing.text.html.InlineView.insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "javax.accessibility.accessiblecomponent.isfocustraversable": [
        "javax.accessibility.AccessibleComponent.isFocusTraversable()"
    ],
    "org.xml.sax.helpers.attributesimpl.getvalue": [
        "org.xml.sax.helpers.AttributesImpl.getValue(int)",
        "org.xml.sax.helpers.AttributesImpl.getValue(java.lang.String,java.lang.String)"
    ],
    "java.util.spliterators.emptydoublespliterator": [
        "java.util.Spliterators.emptyDoubleSpliterator()"
    ],
    "java.applet.appletcontext.getstreamkeys": [
        "java.applet.AppletContext.getStreamKeys()"
    ],
    "java.util.bitset.clone": [
        "java.util.BitSet.clone()"
    ],
    "java.awt.scrollpaneadjustable.setvisibleamount": [
        "java.awt.ScrollPaneAdjustable.setVisibleAmount(int)"
    ],
    "java.awt.print.printerjob.lookupstreamprintservices": [
        "java.awt.print.PrinterJob.lookupStreamPrintServices(java.lang.String)"
    ],
    "javax.print.attribute.standard.printerlocation.getcategory": [
        "javax.print.attribute.standard.PrinterLocation.getCategory()"
    ],
    "java.awt.image.memoryimagesource.newpixels": [
        "java.awt.image.MemoryImageSource.newPixels(int,int,int,int)",
        "java.awt.image.MemoryImageSource.newPixels()",
        "java.awt.image.MemoryImageSource.newPixels(int[],java.awt.image.ColorModel,int,int)",
        "java.awt.image.MemoryImageSource.newPixels(int,int,int,int,boolean)",
        "java.awt.image.MemoryImageSource.newPixels(byte[],java.awt.image.ColorModel,int,int)"
    ],
    "javax.management.timer.timer.getnotificationuserdata": [
        "javax.management.timer.Timer.getNotificationUserData(java.lang.Integer)"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.setautoincrement": [
        "javax.sql.rowset.RowSetMetaDataImpl.setAutoIncrement(int,boolean)"
    ],
    "java.time.zoneddatetime.gethour": [
        "java.time.ZonedDateTime.getHour()"
    ],
    "java.util.function.inttolongfunction.applyaslong": [
        "java.util.function.IntToLongFunction.applyAsLong(int)"
    ],
    "javax.print.attribute.standard.printername.getname": [
        "javax.print.attribute.standard.PrinterName.getName()"
    ],
    "java.io.randomaccessfile.seek": [
        "java.io.RandomAccessFile.seek(long)"
    ],
    "org.w3c.dom.node.isdefaultnamespace": [
        "org.w3c.dom.Node.isDefaultNamespace(java.lang.String)"
    ],
    "org.omg.dynamicany._dynarraystub.insert_wstring": [
        "org.omg.DynamicAny._DynArrayStub.insert_wstring(java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintcheckboxmenuitemborder": [
        "javax.swing.plaf.synth.SynthPainter.paintCheckBoxMenuItemBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.time.year.getvalue": [
        "java.time.Year.getValue()"
    ],
    "javax.swing.event.hyperlinkevent.geturl": [
        "javax.swing.event.HyperlinkEvent.getURL()"
    ],
    "javax.swing.text.styleconstants.setbackground": [
        "javax.swing.text.StyleConstants.setBackground(javax.swing.text.MutableAttributeSet,java.awt.Color)"
    ],
    "java.lang.runtime.load": [
        "java.lang.Runtime.load(java.lang.String)"
    ],
    "java.util.zip.inflaterinputstream.marksupported": [
        "java.util.zip.InflaterInputStream.markSupported()"
    ],
    "java.security.cert.pkixparameters.getcertpathcheckers": [
        "java.security.cert.PKIXParameters.getCertPathCheckers()"
    ],
    "javax.swing.plaf.multi.multiinternalframeui.update": [
        "javax.swing.plaf.multi.MultiInternalFrameUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.text.defaulthighlighter.changehighlight": [
        "javax.swing.text.DefaultHighlighter.changeHighlight(java.lang.Object,int,int)"
    ],
    "javax.swing.plaf.textui.gettooltiptext": [
        "javax.swing.plaf.TextUI.getToolTipText(javax.swing.text.JTextComponent,java.awt.Point)"
    ],
    "javax.swing.text.maskformatter.setvalidcharacters": [
        "javax.swing.text.MaskFormatter.setValidCharacters(java.lang.String)"
    ],
    "java.security.securerandom.getalgorithm": [
        "java.security.SecureRandom.getAlgorithm()"
    ],
    "java.sql.databasemetadata.getdriverminorversion": [
        "java.sql.DatabaseMetaData.getDriverMinorVersion()"
    ],
    "javax.management.runtimembeanexception.gettargetexception": [
        "javax.management.RuntimeMBeanException.getTargetException()"
    ],
    "org.w3c.dom.ls.lsprogressevent.getposition": [
        "org.w3c.dom.ls.LSProgressEvent.getPosition()"
    ],
    "java.awt.geom.rectangle2d.double.createunion": [
        "java.awt.geom.Rectangle2D.Double.createUnion(java.awt.geom.Rectangle2D)"
    ],
    "javax.swing.buttonmodel.isselected": [
        "javax.swing.ButtonModel.isSelected()"
    ],
    "javax.xml.ws.spi.servicedelegate.gethandlerresolver": [
        "javax.xml.ws.spi.ServiceDelegate.getHandlerResolver()"
    ],
    "java.awt.im.inputcontext.dispose": [
        "java.awt.im.InputContext.dispose()"
    ],
    "javax.swing.actionmap.get": [
        "javax.swing.ActionMap.get(java.lang.Object)"
    ],
    "java.net.jarurlconnection.getjarfile": [
        "java.net.JarURLConnection.getJarFile()"
    ],
    "javax.management.dynamicmbean.setattributes": [
        "javax.management.DynamicMBean.setAttributes(javax.management.AttributeList)"
    ],
    "java.rmi.server.unicastremoteobject.unexportobject": [
        "java.rmi.server.UnicastRemoteObject.unexportObject(java.rmi.Remote,boolean)"
    ],
    "java.awt.color.gettransparency": [
        "java.awt.Color.getTransparency()"
    ],
    "java.time.period.normalized": [
        "java.time.Period.normalized()"
    ],
    "org.omg.dynamicany._dynenumstub.get_ulonglong": [
        "org.omg.DynamicAny._DynEnumStub.get_ulonglong()"
    ],
    "java.awt.geom.quadcurve2d.float.gety2": [
        "java.awt.geom.QuadCurve2D.Float.getY2()"
    ],
    "javax.swing.text.abstractdocument.getrootelements": [
        "javax.swing.text.AbstractDocument.getRootElements()"
    ],
    "java.awt.checkbox.getlisteners": [
        "java.awt.Checkbox.getListeners(java.lang.Class<T>)"
    ],
    "java.awt.toolkit.checkimage": [
        "java.awt.Toolkit.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"
    ],
    "java.beans.beancontext.beancontextserviceavailableevent.getserviceclass": [
        "java.beans.beancontext.BeanContextServiceAvailableEvent.getServiceClass()"
    ],
    "java.awt.checkboxgroup.tostring": [
        "java.awt.CheckboxGroup.toString()"
    ],
    "java.sql.resultset.relative": [
        "java.sql.ResultSet.relative(int)"
    ],
    "javax.swing.text.defaultstyleddocument.elementspec.gettype": [
        "javax.swing.text.DefaultStyledDocument.ElementSpec.getType()"
    ],
    "javax.swing.jlist.setselectedindices": [
        "javax.swing.JList.setSelectedIndices(int[])"
    ],
    "javax.swing.plaf.multi.multisplitpaneui.update": [
        "javax.swing.plaf.multi.MultiSplitPaneUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.util.calendar.before": [
        "java.util.Calendar.before(java.lang.Object)"
    ],
    "java.awt.window.getaccessiblecontext": [
        "java.awt.Window.getAccessibleContext()"
    ],
    "javax.swing.text.abstractdocument.firechangedupdate": [
        "javax.swing.text.AbstractDocument.fireChangedUpdate(javax.swing.event.DocumentEvent)"
    ],
    "javax.accessibility.accessibletext.getcharacterbounds": [
        "javax.accessibility.AccessibleText.getCharacterBounds(int)"
    ],
    "java.awt.image.databufferint.getdata": [
        "java.awt.image.DataBufferInt.getData(int)"
    ],
    "java.lang.management.memorynotificationinfo.getpoolname": [
        "java.lang.management.MemoryNotificationInfo.getPoolName()"
    ],
    "java.time.offsetdatetime.getdayofweek": [
        "java.time.OffsetDateTime.getDayOfWeek()"
    ],
    "javax.swing.plaf.synth.synthmenubarui.paint": [
        "javax.swing.plaf.synth.SynthMenuBarUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",
        "javax.swing.plaf.synth.SynthMenuBarUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.sql.rowsetwriter.writedata": [
        "javax.sql.RowSetWriter.writeData(javax.sql.RowSetInternal)"
    ],
    "javax.swing.jspinner.getnextvalue": [
        "javax.swing.JSpinner.getNextValue()"
    ],
    "java.awt.print.pageable.getnumberofpages": [
        "java.awt.print.Pageable.getNumberOfPages()"
    ],
    "java.io.objectinputstream.available": [
        "java.io.ObjectInputStream.available()"
    ],
    "java.time.year.plusyears": [
        "java.time.Year.plusYears(long)"
    ],
    "java.time.chrono.chronolocaldatetime.with": [
        "java.time.chrono.ChronoLocalDateTime.with(java.time.temporal.TemporalField,long)",
        "java.time.chrono.ChronoLocalDateTime.with(java.time.temporal.TemporalAdjuster)"
    ],
    "javax.swing.table.jtableheader.setresizingallowed": [
        "javax.swing.table.JTableHeader.setResizingAllowed(boolean)"
    ],
    "java.nio.shortbuffer.hashcode": [
        "java.nio.ShortBuffer.hashCode()"
    ],
    "javax.swing.text.html.parser.element.getcontent": [
        "javax.swing.text.html.parser.Element.getContent()"
    ],
    "java.sql.databasemetadata.getmaxcolumnsingroupby": [
        "java.sql.DatabaseMetaData.getMaxColumnsInGroupBy()"
    ],
    "java.time.chrono.japaneseera.of": [
        "java.time.chrono.JapaneseEra.of(int)"
    ],
    "java.io.objectoutputstream.putfields": [
        "java.io.ObjectOutputStream.putFields()"
    ],
    "java.util.concurrent.locks.reentrantlock.getqueuedthreads": [
        "java.util.concurrent.locks.ReentrantLock.getQueuedThreads()"
    ],
    "javax.accessibility.accessiblecomponent.getlocationonscreen": [
        "javax.accessibility.AccessibleComponent.getLocationOnScreen()"
    ],
    "javax.security.auth.callback.textinputcallback.getdefaulttext": [
        "javax.security.auth.callback.TextInputCallback.getDefaultText()"
    ],
    "java.sql.connection.getmetadata": [
        "java.sql.Connection.getMetaData()"
    ],
    "javax.xml.soap.mimeheaders.setheader": [
        "javax.xml.soap.MimeHeaders.setHeader(java.lang.String,java.lang.String)"
    ],
    "java.sql.sqloutput.writebigdecimal": [
        "java.sql.SQLOutput.writeBigDecimal(java.math.BigDecimal)"
    ],
    "java.time.period.minusmonths": [
        "java.time.Period.minusMonths(long)"
    ],
    "javax.management.relation.mbeanservernotificationfilter.disableobjectname": [
        "javax.management.relation.MBeanServerNotificationFilter.disableObjectName(javax.management.ObjectName)"
    ],
    "java.util.concurrent.blockingdeque.takelast": [
        "java.util.concurrent.BlockingDeque.takeLast()"
    ],
    "java.util.logging.logrecord.setloggername": [
        "java.util.logging.LogRecord.setLoggerName(java.lang.String)"
    ],
    "java.security.messagedigest.getinstance": [
        "java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider)",
        "java.security.MessageDigest.getInstance(java.lang.String,java.lang.String)",
        "java.security.MessageDigest.getInstance(java.lang.String)"
    ],
    "javax.imageio.metadata.iiometadataformatimpl.addelement": [
        "javax.imageio.metadata.IIOMetadataFormatImpl.addElement(java.lang.String,java.lang.String,int,int)",
        "javax.imageio.metadata.IIOMetadataFormatImpl.addElement(java.lang.String,java.lang.String,int)"
    ],
    "java.util.concurrent.scheduledthreadpoolexecutor.execute": [
        "java.util.concurrent.ScheduledThreadPoolExecutor.execute(java.lang.Runnable)"
    ],
    "javax.swing.plaf.synth.synthgraphicsutils.getmaximumsize": [
        "javax.swing.plaf.synth.SynthGraphicsUtils.getMaximumSize(javax.swing.plaf.synth.SynthContext,java.awt.Font,java.lang.String,javax.swing.Icon,int,int,int,int,int,int)"
    ],
    "javax.swing.text.styleconstants.setfirstlineindent": [
        "javax.swing.text.StyleConstants.setFirstLineIndent(javax.swing.text.MutableAttributeSet,float)"
    ],
    "java.lang.reflect.executable.getexceptiontypes": [
        "java.lang.reflect.Executable.getExceptionTypes()"
    ],
    "javax.management.loading.mlet.getlibrarydirectory": [
        "javax.management.loading.MLet.getLibraryDirectory()"
    ],
    "javax.management.openmbean.compositedatainvocationhandler.getcompositedata": [
        "javax.management.openmbean.CompositeDataInvocationHandler.getCompositeData()"
    ],
    "java.awt.layoutmanager.removelayoutcomponent": [
        "java.awt.LayoutManager.removeLayoutComponent(java.awt.Component)"
    ],
    "javax.naming.spi.directorymanager.getcontinuationdircontext": [
        "javax.naming.spi.DirectoryManager.getContinuationDirContext(javax.naming.CannotProceedException)"
    ],
    "java.util.concurrent.atomic.atomicintegerfieldupdater.addandget": [
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.addAndGet(java.util.concurrent.atomic.AtomicIntegerFieldUpdater,int)",
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.addAndGet(T,int)"
    ],
    "javax.swing.plaf.basic.basictextfieldui.getbaseline": [
        "javax.swing.plaf.basic.BasicTextFieldUI.getBaseline(javax.swing.JComponent,int,int)"
    ],
    "javax.swing.plaf.multi.multipopupmenuui.installui": [
        "javax.swing.plaf.multi.MultiPopupMenuUI.installUI(javax.swing.JComponent)"
    ],
    "javax.xml.soap.soapenvelope.addheader": [
        "javax.xml.soap.SOAPEnvelope.addHeader()"
    ],
    "javax.naming.directory.dircontext.bind": [
        "javax.naming.directory.DirContext.bind(java.lang.String,java.lang.Object,javax.naming.directory.Attributes)",
        "javax.naming.directory.DirContext.bind(javax.naming.Name,java.lang.Object,javax.naming.directory.Attributes)"
    ],
    "javax.swing.plaf.metal.metaltheme.getprimarycontroldarkshadow": [
        "javax.swing.plaf.metal.MetalTheme.getPrimaryControlDarkShadow()"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.add": [
        "javax.xml.datatype.XMLGregorianCalendar.add(javax.xml.datatype.Duration)"
    ],
    "java.awt.font.graphicattribute.getascent": [
        "java.awt.font.GraphicAttribute.getAscent()"
    ],
    "java.util.simpletimezone.setstartyear": [
        "java.util.SimpleTimeZone.setStartYear(int)"
    ],
    "java.sql.sqloutput.writebytes": [
        "java.sql.SQLOutput.writeBytes(byte[])"
    ],
    "javax.xml.bind.datatypeconverterinterface.printbase64binary": [
        "javax.xml.bind.DatatypeConverterInterface.printBase64Binary(byte[])"
    ],
    "java.net.uri.getscheme": [
        "java.net.URI.getScheme()"
    ],
    "javax.swing.jtoolbar.updateui": [
        "javax.swing.JToolBar.updateUI()"
    ],
    "javax.accessibility.accessiblecomponent.requestfocus": [
        "javax.accessibility.AccessibleComponent.requestFocus()"
    ],
    "java.net.cookiestore.removeall": [
        "java.net.CookieStore.removeAll()"
    ],
    "java.awt.toolkit.getimage": [
        "java.awt.Toolkit.getImage(java.net.URL)",
        "java.awt.Toolkit.getImage(java.lang.String)"
    ],
    "javax.swing.text.jtextcomponent.getprintable": [
        "javax.swing.text.JTextComponent.getPrintable(java.text.MessageFormat,java.text.MessageFormat)"
    ],
    "javax.swing.table.tablecolumn.getheaderrenderer": [
        "javax.swing.table.TableColumn.getHeaderRenderer()"
    ],
    "javax.swing.plaf.basic.basiceditorpaneui.getpropertyprefix": [
        "javax.swing.plaf.basic.BasicEditorPaneUI.getPropertyPrefix()"
    ],
    "javax.swing.text.html.parser.element.getname": [
        "javax.swing.text.html.parser.Element.getName()"
    ],
    "javax.accessibility.accessibleeditabletext.inserttextatindex": [
        "javax.accessibility.AccessibleEditableText.insertTextAtIndex(int,java.lang.String)"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.paintcurrentvaluebackground": [
        "javax.swing.plaf.basic.BasicComboBoxUI.paintCurrentValueBackground(java.awt.Graphics,java.awt.Rectangle,boolean)"
    ],
    "java.awt.toolkit.createdraggesturerecognizer": [
        "java.awt.Toolkit.createDragGestureRecognizer(java.lang.Class<T>,java.awt.dnd.DragSource,java.awt.Component,int,java.awt.dnd.DragGestureListener)"
    ],
    "javax.xml.soap.soapelement.removeattribute": [
        "javax.xml.soap.SOAPElement.removeAttribute(javax.xml.namespace.QName)",
        "javax.xml.soap.SOAPElement.removeAttribute(javax.xml.soap.Name)"
    ],
    "java.security.spec.mgf1parameterspec.getdigestalgorithm": [
        "java.security.spec.MGF1ParameterSpec.getDigestAlgorithm()"
    ],
    "java.awt.component.list": [
        "java.awt.Component.list(java.io.PrintStream)",
        "java.awt.Component.list()"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.setcolumnname": [
        "javax.sql.rowset.RowSetMetaDataImpl.setColumnName(int,java.lang.String)"
    ],
    "java.sql.callablestatement.getncharacterstream": [
        "java.sql.CallableStatement.getNCharacterStream(java.lang.String)",
        "java.sql.CallableStatement.getNCharacterStream(int)"
    ],
    "javax.security.auth.callback.textinputcallback.settext": [
        "javax.security.auth.callback.TextInputCallback.setText(java.lang.String)"
    ],
    "javax.script.scriptenginefactory.getlanguagename": [
        "javax.script.ScriptEngineFactory.getLanguageName()"
    ],
    "javax.swing.jinternalframe.setdefaultcloseoperation": [
        "javax.swing.JInternalFrame.setDefaultCloseOperation(int)"
    ],
    "javax.swing.text.stylecontext.getstylenames": [
        "javax.swing.text.StyleContext.getStyleNames()"
    ],
    "java.awt.dnd.dragsourcecontext.gettrigger": [
        "java.awt.dnd.DragSourceContext.getTrigger()"
    ],
    "java.beans.beancontext.beancontext.addbeancontextmembershiplistener": [
        "java.beans.beancontext.BeanContext.addBeanContextMembershipListener(java.beans.beancontext.BeanContextMembershipListener)"
    ],
    "javax.print.attribute.standard.pdloverridesupported.getcategory": [
        "javax.print.attribute.standard.PDLOverrideSupported.getCategory()"
    ],
    "javax.sql.rowset.webrowset.writexml": [
        "javax.sql.rowset.WebRowSet.writeXml(java.io.OutputStream)",
        "javax.sql.rowset.WebRowSet.writeXml(java.io.Writer)"
    ],
    "javax.swing.jtable.setdefaulteditor": [
        "javax.swing.JTable.setDefaultEditor(java.lang.Class<?>,javax.swing.table.TableCellEditor)"
    ],
    "javax.management.openmbean.opentype.getclassname": [
        "javax.management.openmbean.OpenType.getClassName()"
    ],
    "javax.xml.xpath.xpath.setnamespacecontext": [
        "javax.xml.xpath.XPath.setNamespaceContext(javax.xml.namespace.NamespaceContext)"
    ],
    "javax.naming.context.getenvironment": [
        "javax.naming.Context.getEnvironment()"
    ],
    "org.omg.corba.portable.outputstream.write_typecode": [
        "org.omg.CORBA.portable.OutputStream.write_TypeCode(org.omg.CORBA.TypeCode)"
    ],
    "javax.net.ssl.trustmanagerfactory.getdefaultalgorithm": [
        "javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm()"
    ],
    "java.time.localtime.getlong": [
        "java.time.LocalTime.getLong(java.time.temporal.TemporalField)"
    ],
    "javax.sql.rowset.setarray": [
        "javax.sql.RowSet.setArray(int,java.sql.Array)"
    ],
    "java.util.calendar.gettimeinmillis": [
        "java.util.Calendar.getTimeInMillis()"
    ],
    "java.util.concurrent.atomic.atomicintegerfieldupdater.updateandget": [
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.updateAndGet(T,java.util.function.IntUnaryOperator)",
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.updateAndGet(java.util.concurrent.atomic.AtomicIntegerFieldUpdater,java.util.function.IntUnaryOperator)"
    ],
    "java.util.concurrent.arrayblockingqueue.drainto": [
        "java.util.concurrent.ArrayBlockingQueue.drainTo(java.util.Collection<? super E>)",
        "java.util.concurrent.ArrayBlockingQueue.drainTo(java.util.Collection<? super E>,int)"
    ],
    "javax.management.openmbean.openmbeanparameterinfosupport.tostring": [
        "javax.management.openmbean.OpenMBeanParameterInfoSupport.toString()"
    ],
    "java.lang.reflect.proxy.getproxyclass": [
        "java.lang.reflect.Proxy.getProxyClass(java.lang.ClassLoader,java.lang.Class<?>...)",
        "java.lang.reflect.Proxy.getProxyClass(java.lang.ClassLoader,java.lang.Class<?>)"
    ],
    "javax.management.openmbean.openmbeaninfo.equals": [
        "javax.management.openmbean.OpenMBeanInfo.equals(java.lang.Object)"
    ],
    "java.nio.file.attribute.fileattribute.name": [
        "java.nio.file.attribute.FileAttribute.name()"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.hasqueuedthread": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.hasQueuedThread(java.lang.Thread)"
    ],
    "java.lang.math.incrementexact": [
        "java.lang.Math.incrementExact(long)",
        "java.lang.Math.incrementExact(int)"
    ],
    "java.awt.print.printerjob.pagedialog": [
        "java.awt.print.PrinterJob.pageDialog(java.awt.print.PageFormat)",
        "java.awt.print.PrinterJob.pageDialog(javax.print.attribute.PrintRequestAttributeSet)"
    ],
    "java.awt.event.inputmethodevent.consume": [
        "java.awt.event.InputMethodEvent.consume()"
    ],
    "java.nio.file.spi.filesystemprovider.newfilesystem": [
        "java.nio.file.spi.FileSystemProvider.newFileSystem(java.net.URI,,?>)",
        "java.nio.file.spi.FileSystemProvider.newFileSystem(java.nio.file.Path,,?>)"
    ],
    "javax.swing.jinternalframe.ismaximizable": [
        "javax.swing.JInternalFrame.isMaximizable()"
    ],
    "javax.swing.text.style.getname": [
        "javax.swing.text.Style.getName()"
    ],
    "java.awt.gridlayout.sethgap": [
        "java.awt.GridLayout.setHgap(int)"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.addselectionpaths": [
        "javax.swing.tree.DefaultTreeSelectionModel.addSelectionPaths(javax.swing.tree.TreePath[])"
    ],
    "java.nio.file.attribute.aclentrytype.values": [
        "java.nio.file.attribute.AclEntryType.values()"
    ],
    "javax.swing.text.stylededitorkit.getactions": [
        "javax.swing.text.StyledEditorKit.getActions()"
    ],
    "javax.swing.text.styleconstants.setbidilevel": [
        "javax.swing.text.StyleConstants.setBidiLevel(javax.swing.text.MutableAttributeSet,int)"
    ],
    "java.math.bigdecimal.round": [
        "java.math.BigDecimal.round(java.math.MathContext)"
    ],
    "java.sql.resultsetmetadata.getcolumnclassname": [
        "java.sql.ResultSetMetaData.getColumnClassName(int)"
    ],
    "javax.imageio.spi.imagewriterspi.getoutputtypes": [
        "javax.imageio.spi.ImageWriterSpi.getOutputTypes()"
    ],
    "java.security.keystore.trustedcertificateentry.getattributes": [
        "java.security.KeyStore.TrustedCertificateEntry.getAttributes()"
    ],
    "javax.swing.text.html.blockview.getpreferredspan": [
        "javax.swing.text.html.BlockView.getPreferredSpan(int)"
    ],
    "javax.crypto.spec.dhgenparameterspec.getprimesize": [
        "javax.crypto.spec.DHGenParameterSpec.getPrimeSize()"
    ],
    "javax.swing.text.paragraphview.getflowstart": [
        "javax.swing.text.ParagraphView.getFlowStart(int)"
    ],
    "java.util.simpletimezone.clone": [
        "java.util.SimpleTimeZone.clone()"
    ],
    "javax.swing.plaf.basic.basiclookandfeel.playsound": [
        "javax.swing.plaf.basic.BasicLookAndFeel.playSound(javax.swing.Action)"
    ],
    "java.util.function.longpredicate.or": [
        "java.util.function.LongPredicate.or(java.util.function.LongPredicate)"
    ],
    "java.lang.strictmath.max": [
        "java.lang.StrictMath.max(double,double)",
        "java.lang.StrictMath.max(float,float)",
        "java.lang.StrictMath.max(long,long)",
        "java.lang.StrictMath.max(int,int)"
    ],
    "java.awt.graphicsdevice.getdisplaymode": [
        "java.awt.GraphicsDevice.getDisplayMode()"
    ],
    "java.lang.reflect.constructor.getparameterannotations": [
        "java.lang.reflect.Constructor.getParameterAnnotations()"
    ],
    "javax.swing.plaf.multi.multiscrollpaneui.getuis": [
        "javax.swing.plaf.multi.MultiScrollPaneUI.getUIs()"
    ],
    "javax.rmi.corba.stubdelegate.connect": [
        "javax.rmi.CORBA.StubDelegate.connect(javax.rmi.CORBA.Stub,org.omg.CORBA.ORB)"
    ],
    "javax.swing.jrootpane.addimpl": [
        "javax.swing.JRootPane.addImpl(java.awt.Component,java.lang.Object,int)"
    ],
    "java.util.concurrent.atomic.atomicreferencearray.compareandset": [
        "java.util.concurrent.atomic.AtomicReferenceArray.compareAndSet(int,java.util.concurrent.atomic.AtomicReferenceArray,java.util.concurrent.atomic.AtomicReferenceArray)",
        "java.util.concurrent.atomic.AtomicReferenceArray.compareAndSet(int,E,E)"
    ],
    "javax.script.simplescriptcontext.seterrorwriter": [
        "javax.script.SimpleScriptContext.setErrorWriter(java.io.Writer)"
    ],
    "org.omg.dynamicany._dynsequencestub.insert_wstring": [
        "org.omg.DynamicAny._DynSequenceStub.insert_wstring(java.lang.String)"
    ],
    "java.util.zip.deflaterinputstream.reset": [
        "java.util.zip.DeflaterInputStream.reset()"
    ],
    "java.util.dictionary.get": [
        "java.util.Dictionary.get(java.lang.Object)"
    ],
    "javax.print.attribute.attributeset.size": [
        "javax.print.attribute.AttributeSet.size()"
    ],
    "org.omg.corba.any.extract_ulong": [
        "org.omg.CORBA.Any.extract_ulong()"
    ],
    "javax.naming.ldap.rdn.toattributes": [
        "javax.naming.ldap.Rdn.toAttributes()"
    ],
    "javax.security.sasl.authorizecallback.isauthorized": [
        "javax.security.sasl.AuthorizeCallback.isAuthorized()"
    ],
    "javax.management.mbeanserverdelegatembean.getspecificationversion": [
        "javax.management.MBeanServerDelegateMBean.getSpecificationVersion()"
    ],
    "java.rmi.server.objid.equals": [
        "java.rmi.server.ObjID.equals(java.lang.Object)"
    ],
    "javax.swing.plaf.nimbus.nimbusstyle.getbackgroundpainter": [
        "javax.swing.plaf.nimbus.NimbusStyle.getBackgroundPainter(javax.swing.plaf.synth.SynthContext)"
    ],
    "java.time.duration.plusseconds": [
        "java.time.Duration.plusSeconds(long)"
    ],
    "javax.swing.text.stylecontext.removeattribute": [
        "javax.swing.text.StyleContext.removeAttribute(javax.swing.text.AttributeSet,java.lang.Object)"
    ],
    "javax.swing.defaultboundedrangemodel.getminimum": [
        "javax.swing.DefaultBoundedRangeModel.getMinimum()"
    ],
    "javax.annotation.processing.abstractprocessor.getsupportedoptions": [
        "javax.annotation.processing.AbstractProcessor.getSupportedOptions()"
    ],
    "java.util.stream.basestream.onclose": [
        "java.util.stream.BaseStream.onClose(java.lang.Runnable)"
    ],
    "java.util.stream.intstream.allmatch": [
        "java.util.stream.IntStream.allMatch(java.util.function.IntPredicate)"
    ],
    "java.util.concurrent.atomic.doubleadder.sum": [
        "java.util.concurrent.atomic.DoubleAdder.sum()"
    ],
    "java.text.collationelementiterator.secondaryorder": [
        "java.text.CollationElementIterator.secondaryOrder(int)"
    ],
    "java.util.concurrent.synchronousqueue.poll": [
        "java.util.concurrent.SynchronousQueue.poll(long,java.util.concurrent.TimeUnit)",
        "java.util.concurrent.SynchronousQueue.poll()"
    ],
    "javax.swing.text.maskformatter.stringtovalue": [
        "javax.swing.text.MaskFormatter.stringToValue(java.lang.String)"
    ],
    "javax.naming.referenceable.getreference": [
        "javax.naming.Referenceable.getReference()"
    ],
    "javax.swing.plaf.synth.synthpainter.painteditorpanebackground": [
        "javax.swing.plaf.synth.SynthPainter.paintEditorPaneBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.awt.image.kernel.getwidth": [
        "java.awt.image.Kernel.getWidth()"
    ],
    "java.awt.font.shapegraphicattribute.equals": [
        "java.awt.font.ShapeGraphicAttribute.equals(java.awt.font.ShapeGraphicAttribute)",
        "java.awt.font.ShapeGraphicAttribute.equals(java.lang.Object)"
    ],
    "javax.swing.tree.defaulttreemodel.reload": [
        "javax.swing.tree.DefaultTreeModel.reload(javax.swing.tree.TreeNode)",
        "javax.swing.tree.DefaultTreeModel.reload()"
    ],
    "java.util.scanner.nextlong": [
        "java.util.Scanner.nextLong()",
        "java.util.Scanner.nextLong(int)"
    ],
    "javax.net.ssl.sslsocket.addhandshakecompletedlistener": [
        "javax.net.ssl.SSLSocket.addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)"
    ],
    "java.nio.charset.charset.aliases": [
        "java.nio.charset.Charset.aliases()"
    ],
    "java.lang.invoke.methodtype.appendparametertypes": [
        "java.lang.invoke.MethodType.appendParameterTypes(java.lang.Class<?>)",
        "java.lang.invoke.MethodType.appendParameterTypes(java.util.List<java.lang.Class<?>>)",
        "java.lang.invoke.MethodType.appendParameterTypes(java.lang.Class<?>...)"
    ],
    "javax.swing.sizerequirements.adjustsizes": [
        "javax.swing.SizeRequirements.adjustSizes(int,javax.swing.SizeRequirements[])"
    ],
    "javax.swing.plaf.synth.synthpainter.paintarrowbuttonbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintArrowButtonBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.plaf.multi.multitreeui.geteditingpath": [
        "javax.swing.plaf.multi.MultiTreeUI.getEditingPath(javax.swing.JTree)"
    ],
    "java.util.concurrent.executor.execute": [
        "java.util.concurrent.Executor.execute(java.lang.Runnable)"
    ],
    "java.awt.image.indexcolormodel.getblues": [
        "java.awt.image.IndexColorModel.getBlues(byte[])"
    ],
    "javax.sql.rowset.baserowset.setshowdeleted": [
        "javax.sql.rowset.BaseRowSet.setShowDeleted(boolean)"
    ],
    "javax.xml.transform.sourcelocator.getpublicid": [
        "javax.xml.transform.SourceLocator.getPublicId()"
    ],
    "javax.swing.defaultbuttonmodel.getgroup": [
        "javax.swing.DefaultButtonModel.getGroup()"
    ],
    "java.nio.file.filestore.getusablespace": [
        "java.nio.file.FileStore.getUsableSpace()"
    ],
    "javax.swing.plaf.basic.basiceditorpaneui.uninstallui": [
        "javax.swing.plaf.basic.BasicEditorPaneUI.uninstallUI(javax.swing.JComponent)"
    ],
    "java.nio.file.attribute.aclentry.newbuilder": [
        "java.nio.file.attribute.AclEntry.newBuilder(java.nio.file.attribute.AclEntry)",
        "java.nio.file.attribute.AclEntry.newBuilder()"
    ],
    "javax.swing.text.html.minimalhtmlwriter.writeleaf": [
        "javax.swing.text.html.MinimalHTMLWriter.writeLeaf(javax.swing.text.Element)"
    ],
    "javax.swing.plaf.basic.basicsplitpanedivider.preparefordragging": [
        "javax.swing.plaf.basic.BasicSplitPaneDivider.prepareForDragging()"
    ],
    "java.math.roundingmode.values": [
        "java.math.RoundingMode.values()"
    ],
    "java.net.socketimpl.accept": [
        "java.net.SocketImpl.accept(java.net.SocketImpl)"
    ],
    "java.awt.image.colorconvertop.createcompatibledestraster": [
        "java.awt.image.ColorConvertOp.createCompatibleDestRaster(java.awt.image.Raster)"
    ],
    "java.security.cryptoprimitive.valueof": [
        "java.security.CryptoPrimitive.valueOf(java.lang.String)"
    ],
    "javax.swing.jscrollbar.setvalues": [
        "javax.swing.JScrollBar.setValues(int,int,int,int)"
    ],
    "javax.transaction.xa.xaresource.issamerm": [
        "javax.transaction.xa.XAResource.isSameRM(javax.transaction.xa.XAResource)"
    ],
    "java.awt.graphics2d.setpaint": [
        "java.awt.Graphics2D.setPaint(java.awt.Paint)"
    ],
    "javax.lang.model.element.annotationvaluevisitor.visitstring": [
        "javax.lang.model.element.AnnotationValueVisitor.visitString(java.lang.String,javax.lang.model.element.AnnotationValueVisitor)"
    ],
    "javax.rmi.corba.tie.gettarget": [
        "javax.rmi.CORBA.Tie.getTarget()"
    ],
    "javax.swing.jtabbedpane.setmnemonicat": [
        "javax.swing.JTabbedPane.setMnemonicAt(int,int)"
    ],
    "java.util.arrays.spliterator": [
        "java.util.Arrays.spliterator(long[],int,int)",
        "java.util.Arrays.spliterator(T[],int,int)",
        "java.util.Arrays.spliterator(double[])",
        "java.util.Arrays.spliterator(int[],int,int)",
        "java.util.Arrays.spliterator(T[])",
        "java.util.Arrays.spliterator(double[],int,int)",
        "java.util.Arrays.spliterator(int[])",
        "java.util.Arrays.spliterator(long[])"
    ],
    "javax.swing.tree.defaulttreemodel.getlisteners": [
        "javax.swing.tree.DefaultTreeModel.getListeners(java.lang.Class<T>)"
    ],
    "javax.rmi.corba.portableremoteobjectdelegate.unexportobject": [
        "javax.rmi.CORBA.PortableRemoteObjectDelegate.unexportObject(java.rmi.Remote)"
    ],
    "javax.xml.crypto.dsig.dom.domsigncontext.setparent": [
        "javax.xml.crypto.dsig.dom.DOMSignContext.setParent(org.w3c.dom.Node)"
    ],
    "javax.tools.tool.run": [
        "javax.tools.Tool.run(java.io.InputStream,java.io.OutputStream,java.io.OutputStream,java.lang.String...)"
    ],
    "java.lang.iterable.spliterator": [
        "java.lang.Iterable.spliterator()"
    ],
    "java.net.datagramsocket.getchannel": [
        "java.net.DatagramSocket.getChannel()"
    ],
    "javax.management.notificationfiltersupport.disabletype": [
        "javax.management.NotificationFilterSupport.disableType(java.lang.String)"
    ],
    "java.util.spliterators.emptylongspliterator": [
        "java.util.Spliterators.emptyLongSpliterator()"
    ],
    "java.awt.image.convolveop.getpoint2d": [
        "java.awt.image.ConvolveOp.getPoint2D(java.awt.geom.Point2D,java.awt.geom.Point2D)"
    ],
    "javax.sound.sampled.line.getlineinfo": [
        "javax.sound.sampled.Line.getLineInfo()"
    ],
    "javax.swing.jtable.setpreferredscrollableviewportsize": [
        "javax.swing.JTable.setPreferredScrollableViewportSize(java.awt.Dimension)"
    ],
    "java.awt.datatransfer.dataflavor.readexternal": [
        "java.awt.datatransfer.DataFlavor.readExternal(java.io.ObjectInput)"
    ],
    "javax.swing.jtable.unconfigureenclosingscrollpane": [
        "javax.swing.JTable.unconfigureEnclosingScrollPane()"
    ],
    "java.beans.simplebeaninfo.getdefaultpropertyindex": [
        "java.beans.SimpleBeanInfo.getDefaultPropertyIndex()"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.getxmlschematype": [
        "javax.xml.datatype.XMLGregorianCalendar.getXMLSchemaType()"
    ],
    "org.w3c.dom.attr.getname": [
        "org.w3c.dom.Attr.getName()"
    ],
    "javax.swing.jspinner.getpreviousvalue": [
        "javax.swing.JSpinner.getPreviousValue()"
    ],
    "javax.xml.ws.wsaddressing.w3cendpointreferencebuilder.wsdldocumentlocation": [
        "javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.wsdlDocumentLocation(java.lang.String)"
    ],
    "java.security.pkcs12attribute.getencoded": [
        "java.security.PKCS12Attribute.getEncoded()"
    ],
    "java.lang.management.memorytype.values": [
        "java.lang.management.MemoryType.values()"
    ],
    "javax.swing.jtabbedpane.removechangelistener": [
        "javax.swing.JTabbedPane.removeChangeListener(javax.swing.event.ChangeListener)"
    ],
    "javax.swing.plaf.metal.metaltheme.getcontroldarkshadow": [
        "javax.swing.plaf.metal.MetalTheme.getControlDarkShadow()"
    ],
    "javax.imageio.imagereader.checkreadparambandsettings": [
        "javax.imageio.ImageReader.checkReadParamBandSettings(javax.imageio.ImageReadParam,int,int)"
    ],
    "javax.swing.plaf.synth.synthpainter.painttableborder": [
        "javax.swing.plaf.synth.SynthPainter.paintTableBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "org.omg.dynamicany._dynanystub.get_val": [
        "org.omg.DynamicAny._DynAnyStub.get_val()"
    ],
    "java.awt.graphicsconfiguration.getbuffercapabilities": [
        "java.awt.GraphicsConfiguration.getBufferCapabilities()"
    ],
    "javax.swing.text.tabableview.gettabbedspan": [
        "javax.swing.text.TabableView.getTabbedSpan(float,javax.swing.text.TabExpander)"
    ],
    "javax.xml.crypto.dsig.transformservice.getalgorithm": [
        "javax.xml.crypto.dsig.TransformService.getAlgorithm()"
    ],
    "org.xml.sax.helpers.xmlreaderadapter.seterrorhandler": [
        "org.xml.sax.helpers.XMLReaderAdapter.setErrorHandler(org.xml.sax.ErrorHandler)"
    ],
    "javax.swing.jtree.getpathbounds": [
        "javax.swing.JTree.getPathBounds(javax.swing.tree.TreePath)"
    ],
    "javax.naming.initialcontext.dolookup": [
        "javax.naming.InitialContext.doLookup(java.lang.String)",
        "javax.naming.InitialContext.doLookup(javax.naming.Name)"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.iswritelocked": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.isWriteLocked()"
    ],
    "java.net.socketimpl.getoutputstream": [
        "java.net.SocketImpl.getOutputStream()"
    ],
    "java.util.concurrent.atomic.atomiclongfieldupdater.accumulateandget": [
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.accumulateAndGet(java.util.concurrent.atomic.AtomicLongFieldUpdater,long,java.util.function.LongBinaryOperator)",
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.accumulateAndGet(T,long,java.util.function.LongBinaryOperator)"
    ],
    "java.text.dateformatsymbols.setshortweekdays": [
        "java.text.DateFormatSymbols.setShortWeekdays(java.lang.String[])",
        "java.text.DateFormatSymbols.setShortWeekdays(java.lang.String)"
    ],
    "javax.swing.text.abstractwriter.getstartoffset": [
        "javax.swing.text.AbstractWriter.getStartOffset()"
    ],
    "java.awt.button.getlabel": [
        "java.awt.Button.getLabel()"
    ],
    "java.util.concurrent.atomic.atomiclong.floatvalue": [
        "java.util.concurrent.atomic.AtomicLong.floatValue()"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writeref": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeRef(java.sql.Ref)"
    ],
    "javax.swing.plaf.basic.basicspinnerui.getbaselineresizebehavior": [
        "javax.swing.plaf.basic.BasicSpinnerUI.getBaselineResizeBehavior(javax.swing.JComponent)"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.getrowmapper": [
        "javax.swing.tree.DefaultTreeSelectionModel.getRowMapper()"
    ],
    "java.lang.invoke.methodhandleinfo.referencekindtostring": [
        "java.lang.invoke.MethodHandleInfo.referenceKindToString(int)"
    ],
    "javax.swing.plaf.synth.synthpopupmenuui.getcontext": [
        "javax.swing.plaf.synth.SynthPopupMenuUI.getContext(javax.swing.JComponent)"
    ],
    "java.util.optionallong.tostring": [
        "java.util.OptionalLong.toString()"
    ],
    "java.awt.renderinghints.add": [
        "java.awt.RenderingHints.add(java.awt.RenderingHints)"
    ],
    "java.awt.textarea.getpreferredsize": [
        "java.awt.TextArea.getPreferredSize(int,int)",
        "java.awt.TextArea.getPreferredSize()"
    ],
    "javax.management.timer.timer.start": [
        "javax.management.timer.Timer.start()"
    ],
    "javax.activation.mimetype.getbasetype": [
        "javax.activation.MimeType.getBaseType()"
    ],
    "javax.swing.colorchooser.defaultcolorselectionmodel.firestatechanged": [
        "javax.swing.colorchooser.DefaultColorSelectionModel.fireStateChanged()"
    ],
    "org.xml.sax.helpers.parseradapter.getentityresolver": [
        "org.xml.sax.helpers.ParserAdapter.getEntityResolver()"
    ],
    "java.awt.scrollpane.getaccessiblecontext": [
        "java.awt.ScrollPane.getAccessibleContext()"
    ],
    "javax.naming.ldap.sortresponsecontrol.getattributeid": [
        "javax.naming.ldap.SortResponseControl.getAttributeID()"
    ],
    "javax.swing.jmenu.getmenucomponents": [
        "javax.swing.JMenu.getMenuComponents()"
    ],
    "javax.rmi.ssl.sslrmiserversocketfactory.getenabledprotocols": [
        "javax.rmi.ssl.SslRMIServerSocketFactory.getEnabledProtocols()"
    ],
    "javax.activation.filetypemap.getdefaultfiletypemap": [
        "javax.activation.FileTypeMap.getDefaultFileTypeMap()"
    ],
    "org.omg.dynamicany._dynsequencestub.from_any": [
        "org.omg.DynamicAny._DynSequenceStub.from_any(org.omg.CORBA.Any)"
    ],
    "java.io.chararraywriter.tostring": [
        "java.io.CharArrayWriter.toString()"
    ],
    "javax.swing.plaf.multi.multiviewportui.contains": [
        "javax.swing.plaf.multi.MultiViewportUI.contains(javax.swing.JComponent,int,int)"
    ],
    "javax.swing.debuggraphics.getdebugoptions": [
        "javax.swing.DebugGraphics.getDebugOptions()"
    ],
    "javax.print.attribute.standard.sides.getstringtable": [
        "javax.print.attribute.standard.Sides.getStringTable()"
    ],
    "java.math.mathcontext.tostring": [
        "java.math.MathContext.toString()"
    ],
    "java.security.spec.ellipticcurve.equals": [
        "java.security.spec.EllipticCurve.equals(java.lang.Object)"
    ],
    "java.nio.channels.asynchronousfilechannel.force": [
        "java.nio.channels.AsynchronousFileChannel.force(boolean)"
    ],
    "javax.management.monitor.monitormbean.start": [
        "javax.management.monitor.MonitorMBean.start()"
    ],
    "javax.activation.mimetype.match": [
        "javax.activation.MimeType.match(java.lang.String)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getname": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getName()"
    ],
    "java.util.concurrent.concurrenthashmap.keysetview.addall": [
        "java.util.concurrent.ConcurrentHashMap.KeySetView.addAll(java.util.Collection<? extends K>)",
        "java.util.concurrent.ConcurrentHashMap.KeySetView.addAll(java.util.Collection<? extends java.util.concurrent.ConcurrentHashMap.KeySetView>)"
    ],
    "javax.sound.sampled.audiosystem.islinesupported": [
        "javax.sound.sampled.AudioSystem.isLineSupported(javax.sound.sampled.Line.Info)"
    ],
    "javax.accessibility.accessiblecontext.getaccessibleeditabletext": [
        "javax.accessibility.AccessibleContext.getAccessibleEditableText()"
    ],
    "javax.swing.jlist.getdragenabled": [
        "javax.swing.JList.getDragEnabled()"
    ],
    "javax.swing.jsplitpane.getbottomcomponent": [
        "javax.swing.JSplitPane.getBottomComponent()"
    ],
    "javax.management.openmbean.openmbeaninfo.getclassname": [
        "javax.management.openmbean.OpenMBeanInfo.getClassName()"
    ],
    "java.security.cert.crlselector.clone": [
        "java.security.cert.CRLSelector.clone()"
    ],
    "javax.swing.tree.variableheightlayoutcache.setmodel": [
        "javax.swing.tree.VariableHeightLayoutCache.setModel(javax.swing.tree.TreeModel)"
    ],
    "javax.swing.plaf.basic.basictableheaderui.getmaximumsize": [
        "javax.swing.plaf.basic.BasicTableHeaderUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "java.util.abstractmap.equals": [
        "java.util.AbstractMap.equals(java.lang.Object)"
    ],
    "java.nio.channels.spi.selectorprovider.opendatagramchannel": [
        "java.nio.channels.spi.SelectorProvider.openDatagramChannel(java.net.ProtocolFamily)",
        "java.nio.channels.spi.SelectorProvider.openDatagramChannel()"
    ],
    "javax.sql.rowsetinternal.getoriginalrow": [
        "javax.sql.RowSetInternal.getOriginalRow()"
    ],
    "java.lang.reflect.constructor.getdeclaringclass": [
        "java.lang.reflect.Constructor.getDeclaringClass()"
    ],
    "javax.sql.rowset.serial.serialdatalink.equals": [
        "javax.sql.rowset.serial.SerialDatalink.equals(java.lang.Object)"
    ],
    "javax.net.ssl.sslsocket.setwantclientauth": [
        "javax.net.ssl.SSLSocket.setWantClientAuth(boolean)"
    ],
    "org.w3c.dom.ls.lsinput.setcertifiedtext": [
        "org.w3c.dom.ls.LSInput.setCertifiedText(boolean)"
    ],
    "java.security.cert.certpathchecker.isforwardcheckingsupported": [
        "java.security.cert.CertPathChecker.isForwardCheckingSupported()"
    ],
    "java.time.monthday.parse": [
        "java.time.MonthDay.parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)",
        "java.time.MonthDay.parse(java.lang.CharSequence)"
    ],
    "javax.swing.text.compositeview.getchildallocation": [
        "javax.swing.text.CompositeView.getChildAllocation(int,java.awt.Shape)"
    ],
    "java.util.prefs.abstractpreferences.getdouble": [
        "java.util.prefs.AbstractPreferences.getDouble(java.lang.String,double)"
    ],
    "java.util.splittablerandom.split": [
        "java.util.SplittableRandom.split()"
    ],
    "javax.net.ssl.sslcontext.getdefaultsslparameters": [
        "javax.net.ssl.SSLContext.getDefaultSSLParameters()"
    ],
    "org.omg.portableserver.poaoperations.destroy": [
        "org.omg.PortableServer.POAOperations.destroy(boolean,boolean)"
    ],
    "javax.swing.text.styleddocument.getstyle": [
        "javax.swing.text.StyledDocument.getStyle(java.lang.String)"
    ],
    "java.nio.file.attribute.filetime.hashcode": [
        "java.nio.file.attribute.FileTime.hashCode()"
    ],
    "javax.swing.jlist.getlistselectionlisteners": [
        "javax.swing.JList.getListSelectionListeners()"
    ],
    "java.awt.component.getaccessiblecontext": [
        "java.awt.Component.getAccessibleContext()"
    ],
    "javax.accessibility.accessiblerelationset.clear": [
        "javax.accessibility.AccessibleRelationSet.clear()"
    ],
    "javax.swing.plaf.multi.multimenuitemui.paint": [
        "javax.swing.plaf.multi.MultiMenuItemUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.plaf.multi.multirootpaneui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiRootPaneUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "java.awt.awtevent.tostring": [
        "java.awt.AWTEvent.toString()"
    ],
    "javax.print.attribute.attribute.getname": [
        "javax.print.attribute.Attribute.getName()"
    ],
    "javax.swing.jslider.getmodel": [
        "javax.swing.JSlider.getModel()"
    ],
    "javax.swing.jtooltip.getuiclassid": [
        "javax.swing.JToolTip.getUIClassID()"
    ],
    "javax.swing.undo.undoableeditsupport.getundoableeditlisteners": [
        "javax.swing.undo.UndoableEditSupport.getUndoableEditListeners()"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.tostring": [
        "javax.xml.datatype.XMLGregorianCalendar.toString()"
    ],
    "java.awt.dnd.droptarget.dragover": [
        "java.awt.dnd.DropTarget.dragOver(java.awt.dnd.DropTargetDragEvent)"
    ],
    "javax.swing.defaultlistmodel.lastindexof": [
        "javax.swing.DefaultListModel.lastIndexOf(java.lang.Object,int)",
        "javax.swing.DefaultListModel.lastIndexOf(java.lang.Object)"
    ],
    "java.security.protectiondomain.implies": [
        "java.security.ProtectionDomain.implies(java.security.Permission)"
    ],
    "javax.activation.mimetype.readexternal": [
        "javax.activation.MimeType.readExternal(java.io.ObjectInput)"
    ],
    "javax.swing.defaultlistselectionmodel.addselectioninterval": [
        "javax.swing.DefaultListSelectionModel.addSelectionInterval(int,int)"
    ],
    "javax.swing.text.caret.setvisible": [
        "javax.swing.text.Caret.setVisible(boolean)"
    ],
    "javax.xml.crypto.dsig.reference.getid": [
        "javax.xml.crypto.dsig.Reference.getId()"
    ],
    "javax.swing.jscrollpane.getcolumnheader": [
        "javax.swing.JScrollPane.getColumnHeader()"
    ],
    "javax.swing.text.html.htmldocument.createbranchelement": [
        "javax.swing.text.html.HTMLDocument.createBranchElement(javax.swing.text.Element,javax.swing.text.AttributeSet)"
    ],
    "java.util.concurrent.atomic.atomicintegerarray.accumulateandget": [
        "java.util.concurrent.atomic.AtomicIntegerArray.accumulateAndGet(int,int,java.util.function.IntBinaryOperator)"
    ],
    "java.awt.geom.roundrectangle2d.getpathiterator": [
        "java.awt.geom.RoundRectangle2D.getPathIterator(java.awt.geom.AffineTransform)"
    ],
    "javax.sql.rowset.cachedrowset.createcopyschema": [
        "javax.sql.rowset.CachedRowSet.createCopySchema()"
    ],
    "java.sql.databasemetadata.supportslimitedouterjoins": [
        "java.sql.DatabaseMetaData.supportsLimitedOuterJoins()"
    ],
    "javax.accessibility.accessiblecontext.getaccessibleicon": [
        "javax.accessibility.AccessibleContext.getAccessibleIcon()"
    ],
    "java.awt.graphics2d.clip": [
        "java.awt.Graphics2D.clip(java.awt.Shape)"
    ],
    "javax.swing.jtextarea.replacerange": [
        "javax.swing.JTextArea.replaceRange(java.lang.String,int,int)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintformattedtextfieldbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintFormattedTextFieldBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.text.bidi.getlength": [
        "java.text.Bidi.getLength()"
    ],
    "javax.sound.midi.mididevice.open": [
        "javax.sound.midi.MidiDevice.open()"
    ],
    "javax.swing.plaf.multi.multiscrollpaneui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiScrollPaneUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "java.awt.flowlayout.setalignonbaseline": [
        "java.awt.FlowLayout.setAlignOnBaseline(boolean)"
    ],
    "javax.print.attribute.standard.printername.getcategory": [
        "javax.print.attribute.standard.PrinterName.getCategory()"
    ],
    "java.awt.image.samplemodel.createsubsetsamplemodel": [
        "java.awt.image.SampleModel.createSubsetSampleModel(int[])"
    ],
    "java.awt.container.setfocustraversalpolicyprovider": [
        "java.awt.Container.setFocusTraversalPolicyProvider(boolean)"
    ],
    "javax.swing.jtree.getrowheight": [
        "javax.swing.JTree.getRowHeight()"
    ],
    "javax.management.modelmbean.requiredmodelmbean.getmbeaninfo": [
        "javax.management.modelmbean.RequiredModelMBean.getMBeanInfo()"
    ],
    "java.text.stringcharacteriterator.previous": [
        "java.text.StringCharacterIterator.previous()"
    ],
    "javax.print.attribute.standard.severity.getname": [
        "javax.print.attribute.standard.Severity.getName()"
    ],
    "java.sql.resultset.getstatement": [
        "java.sql.ResultSet.getStatement()"
    ],
    "java.sql.preparedstatement.setnull": [
        "java.sql.PreparedStatement.setNull(int,int)",
        "java.sql.PreparedStatement.setNull(int,int,java.lang.String)"
    ],
    "javax.xml.ws.wsaddressing.w3cendpointreferencebuilder.build": [
        "javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.build()"
    ],
    "org.omg.dynamicany._dynunionstub.get_float": [
        "org.omg.DynamicAny._DynUnionStub.get_float()"
    ],
    "javax.swing.spinnernumbermodel.getstepsize": [
        "javax.swing.SpinnerNumberModel.getStepSize()"
    ],
    "java.lang.invoke.methodhandles.lookup.unreflectsetter": [
        "java.lang.invoke.MethodHandles.Lookup.unreflectSetter(java.lang.reflect.Field)"
    ],
    "java.io.filepermission.getactions": [
        "java.io.FilePermission.getActions()"
    ],
    "org.w3c.dom.characterdata.deletedata": [
        "org.w3c.dom.CharacterData.deleteData(int,int)"
    ],
    "javax.sql.rowset.cachedrowset.getshowdeleted": [
        "javax.sql.rowset.CachedRowSet.getShowDeleted()"
    ],
    "javax.swing.tree.defaulttreemodel.nodeschanged": [
        "javax.swing.tree.DefaultTreeModel.nodesChanged(javax.swing.tree.TreeNode,int[])"
    ],
    "javax.swing.plaf.multi.multitableui.contains": [
        "javax.swing.plaf.multi.MultiTableUI.contains(javax.swing.JComponent,int,int)"
    ],
    "javax.management.monitor.gaugemonitormbean.setdifferencemode": [
        "javax.management.monitor.GaugeMonitorMBean.setDifferenceMode(boolean)"
    ],
    "java.awt.keyboardfocusmanager.firevetoablechange": [
        "java.awt.KeyboardFocusManager.fireVetoableChange(java.lang.String,java.lang.Object,java.lang.Object)"
    ],
    "javax.management.relation.rolelist.add": [
        "javax.management.relation.RoleList.add(int,javax.management.relation.Role)",
        "javax.management.relation.RoleList.add(javax.management.relation.Role)"
    ],
    "java.util.concurrent.atomic.atomicintegerfieldupdater.newupdater": [
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater(java.lang.Class<U>,java.lang.String)"
    ],
    "java.util.logging.handler.getlevel": [
        "java.util.logging.Handler.getLevel()"
    ],
    "java.awt.font.numericshaper.getranges": [
        "java.awt.font.NumericShaper.getRanges()"
    ],
    "javax.swing.plaf.basic.basictoolbarui.createrolloverborder": [
        "javax.swing.plaf.basic.BasicToolBarUI.createRolloverBorder()"
    ],
    "java.time.localtime.ofnanoofday": [
        "java.time.LocalTime.ofNanoOfDay(long)"
    ],
    "java.util.zip.deflaterinputstream.mark": [
        "java.util.zip.DeflaterInputStream.mark(int)"
    ],
    "javax.swing.jcombobox.setpopupvisible": [
        "javax.swing.JComboBox.setPopupVisible(boolean)"
    ],
    "javax.management.remote.rmi.rmiconnector.tostring": [
        "javax.management.remote.rmi.RMIConnector.toString()"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.createlistdatalistener": [
        "javax.swing.plaf.basic.BasicComboBoxUI.createListDataListener()"
    ],
    "java.lang.reflect.field.gettype": [
        "java.lang.reflect.Field.getType()"
    ],
    "javax.swing.text.abstractdocument.getbidirootelement": [
        "javax.swing.text.AbstractDocument.getBidiRootElement()"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.parse": [
        "org.xml.sax.helpers.XMLFilterImpl.parse(org.xml.sax.InputSource)",
        "org.xml.sax.helpers.XMLFilterImpl.parse(java.lang.String)"
    ],
    "javax.swing.text.view.getdocument": [
        "javax.swing.text.View.getDocument()"
    ],
    "javax.lang.model.util.typekindvisitor6.visitprimitiveasboolean": [
        "javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsBoolean(javax.lang.model.type.PrimitiveType,javax.lang.model.util.TypeKindVisitor6)"
    ],
    "javax.swing.plaf.multi.multipopupmenuui.contains": [
        "javax.swing.plaf.multi.MultiPopupMenuUI.contains(javax.swing.JComponent,int,int)"
    ],
    "javax.swing.plaf.splitpaneui.setdividerlocation": [
        "javax.swing.plaf.SplitPaneUI.setDividerLocation(javax.swing.JSplitPane,int)"
    ],
    "javax.swing.plaf.multi.multisplitpaneui.getminimumsize": [
        "javax.swing.plaf.multi.MultiSplitPaneUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "javax.swing.text.jtextcomponent.addkeymap": [
        "javax.swing.text.JTextComponent.addKeymap(java.lang.String,javax.swing.text.Keymap)"
    ],
    "javax.swing.jdesktoppane.setselectedframe": [
        "javax.swing.JDesktopPane.setSelectedFrame(javax.swing.JInternalFrame)"
    ],
    "java.time.chrono.chronolocaldatetime.tolocaldate": [
        "java.time.chrono.ChronoLocalDateTime.toLocalDate()"
    ],
    "org.omg.portableserver.servantretentionpolicyoperations.value": [
        "org.omg.PortableServer.ServantRetentionPolicyOperations.value()"
    ],
    "java.sql.databasemetadata.supportspositioneddelete": [
        "java.sql.DatabaseMetaData.supportsPositionedDelete()"
    ],
    "javax.swing.jscrollbar.getvalue": [
        "javax.swing.JScrollBar.getValue()"
    ],
    "java.io.objectoutputstream.useprotocolversion": [
        "java.io.ObjectOutputStream.useProtocolVersion(int)"
    ],
    "java.sql.time.settime": [
        "java.sql.Time.setTime(long)"
    ],
    "java.time.format.textstyle.asstandalone": [
        "java.time.format.TextStyle.asStandalone()"
    ],
    "javax.sql.rowset.spi.xmlreader.readxml": [
        "javax.sql.rowset.spi.XmlReader.readXML(javax.sql.rowset.WebRowSet,java.io.Reader)"
    ],
    "java.util.concurrent.threadpoolexecutor.shutdownnow": [
        "java.util.concurrent.ThreadPoolExecutor.shutdownNow()"
    ],
    "java.lang.invoke.methodhandle.asspreader": [
        "java.lang.invoke.MethodHandle.asSpreader(java.lang.Class<?>,int)"
    ],
    "java.io.file.exists": [
        "java.io.File.exists()"
    ],
    "java.util.formatter.ioexception": [
        "java.util.Formatter.ioException()"
    ],
    "javax.swing.plaf.basic.basictextui.getrootview": [
        "javax.swing.plaf.basic.BasicTextUI.getRootView(javax.swing.text.JTextComponent)"
    ],
    "java.nio.channels.selectionkey.channel": [
        "java.nio.channels.SelectionKey.channel()"
    ],
    "javax.swing.text.defaultcaret.setselectionvisible": [
        "javax.swing.text.DefaultCaret.setSelectionVisible(boolean)"
    ],
    "java.awt.polygon.getbounds2d": [
        "java.awt.Polygon.getBounds2D()"
    ],
    "java.awt.awteventmulticaster.windowstatechanged": [
        "java.awt.AWTEventMulticaster.windowStateChanged(java.awt.event.WindowEvent)"
    ],
    "javax.swing.uidefaults.getdefaultlocale": [
        "javax.swing.UIDefaults.getDefaultLocale()"
    ],
    "java.util.concurrent.concurrentskiplistmap.pollfirstentry": [
        "java.util.concurrent.ConcurrentSkipListMap.pollFirstEntry()"
    ],
    "java.util.logging.formatter.gettail": [
        "java.util.logging.Formatter.getTail(java.util.logging.Handler)"
    ],
    "java.beans.propertyeditorsupport.setastext": [
        "java.beans.PropertyEditorSupport.setAsText(java.lang.String)"
    ],
    "javax.management.remote.jmxconnectorserver.getmbeanserver": [
        "javax.management.remote.JMXConnectorServer.getMBeanServer()"
    ],
    "javax.xml.parsers.saxparser.getproperty": [
        "javax.xml.parsers.SAXParser.getProperty(java.lang.String)"
    ],
    "java.net.httpcookie.setportlist": [
        "java.net.HttpCookie.setPortlist(java.lang.String)"
    ],
    "javax.swing.jdialog.setdefaultlookandfeeldecorated": [
        "javax.swing.JDialog.setDefaultLookAndFeelDecorated(boolean)"
    ],
    "javax.swing.jtree.addtreeselectionlistener": [
        "javax.swing.JTree.addTreeSelectionListener(javax.swing.event.TreeSelectionListener)"
    ],
    "java.util.concurrent.atomic.atomicreferencefieldupdater.compareandset": [
        "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.compareAndSet(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater)",
        "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.compareAndSet(T,V,V)"
    ],
    "java.nio.file.path.touri": [
        "java.nio.file.Path.toUri()"
    ],
    "javax.swing.jsplitpane.removeall": [
        "javax.swing.JSplitPane.removeAll()"
    ],
    "javax.crypto.spec.deskeyspec.getkey": [
        "javax.crypto.spec.DESKeySpec.getKey()"
    ],
    "javax.swing.jpasswordfield.setechochar": [
        "javax.swing.JPasswordField.setEchoChar(char)"
    ],
    "javax.imageio.imagereadparam.setdestinationbands": [
        "javax.imageio.ImageReadParam.setDestinationBands(int[])"
    ],
    "org.omg.corba.portable.outputstream.write_ulonglong_array": [
        "org.omg.CORBA.portable.OutputStream.write_ulonglong_array(long[],int,int)"
    ],
    "javax.swing.text.defaultstyleddocument.create": [
        "javax.swing.text.DefaultStyledDocument.create(javax.swing.text.DefaultStyledDocument.ElementSpec[])"
    ],
    "javax.swing.text.html.htmldocument.insertbeforestart": [
        "javax.swing.text.html.HTMLDocument.insertBeforeStart(javax.swing.text.Element,java.lang.String)"
    ],
    "javax.sql.rowset.cachedrowset.createcopy": [
        "javax.sql.rowset.CachedRowSet.createCopy()"
    ],
    "java.util.concurrent.atomic.atomicintegerarray.tostring": [
        "java.util.concurrent.atomic.AtomicIntegerArray.toString()"
    ],
    "java.util.concurrent.atomic.longadder.add": [
        "java.util.concurrent.atomic.LongAdder.add(long)"
    ],
    "javax.crypto.mac.reset": [
        "javax.crypto.Mac.reset()"
    ],
    "javax.swing.text.fieldview.removeupdate": [
        "javax.swing.text.FieldView.removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "javax.activation.mailcapcommandmap.createdatacontenthandler": [
        "javax.activation.MailcapCommandMap.createDataContentHandler(java.lang.String)"
    ],
    "org.omg.dynamicany.dynunionoperations.get_discriminator": [
        "org.omg.DynamicAny.DynUnionOperations.get_discriminator()"
    ],
    "java.time.chrono.chronology.compareto": [
        "java.time.chrono.Chronology.compareTo(java.time.chrono.Chronology)"
    ],
    "java.nio.file.simplefilevisitor.visitfile": [
        "java.nio.file.SimpleFileVisitor.visitFile(java.nio.file.SimpleFileVisitor,java.nio.file.attribute.BasicFileAttributes)",
        "java.nio.file.SimpleFileVisitor.visitFile(T,java.nio.file.attribute.BasicFileAttributes)"
    ],
    "javax.print.attribute.standard.printerresolution.equals": [
        "javax.print.attribute.standard.PrinterResolution.equals(java.lang.Object)"
    ],
    "java.security.cert.pkixcertpathbuilderresult.getcertpath": [
        "java.security.cert.PKIXCertPathBuilderResult.getCertPath()"
    ],
    "javax.xml.ws.spi.invoker.invoke": [
        "javax.xml.ws.spi.Invoker.invoke(java.lang.reflect.Method,java.lang.Object...)"
    ],
    "java.util.concurrent.copyonwritearrayset.retainall": [
        "java.util.concurrent.CopyOnWriteArraySet.retainAll(java.util.Collection<?>)"
    ],
    "javax.sql.rowset.serial.serialref.getobject": [
        "javax.sql.rowset.serial.SerialRef.getObject()",
        "javax.sql.rowset.serial.SerialRef.getObject(,java.lang.Class<?>>)"
    ],
    "java.time.localdatetime.plushours": [
        "java.time.LocalDateTime.plusHours(long)"
    ],
    "java.awt.print.pageformat.clone": [
        "java.awt.print.PageFormat.clone()"
    ],
    "java.awt.window.removewindowstatelistener": [
        "java.awt.Window.removeWindowStateListener(java.awt.event.WindowStateListener)"
    ],
    "java.net.urlconnection.getpermission": [
        "java.net.URLConnection.getPermission()"
    ],
    "javax.swing.jinternalframe.setmaximum": [
        "javax.swing.JInternalFrame.setMaximum(boolean)"
    ],
    "javax.xml.transform.transformer.geterrorlistener": [
        "javax.xml.transform.Transformer.getErrorListener()"
    ],
    "java.io.objectinputstream.readlong": [
        "java.io.ObjectInputStream.readLong()"
    ],
    "java.sql.sqloutput.writeboolean": [
        "java.sql.SQLOutput.writeBoolean(boolean)"
    ],
    "java.awt.font.gettransform": [
        "java.awt.Font.getTransform()"
    ],
    "java.util.observable.setchanged": [
        "java.util.Observable.setChanged()"
    ],
    "java.nio.buffer.capacity": [
        "java.nio.Buffer.capacity()"
    ],
    "javax.swing.plaf.basic.basicsliderui.gethighestvaluelabel": [
        "javax.swing.plaf.basic.BasicSliderUI.getHighestValueLabel()"
    ],
    "javax.imageio.imagewriter.setlocale": [
        "javax.imageio.ImageWriter.setLocale(java.util.Locale)"
    ],
    "javax.swing.jscrollpane.getverticalscrollbarpolicy": [
        "javax.swing.JScrollPane.getVerticalScrollBarPolicy()"
    ],
    "javax.swing.plaf.metal.metalfilechooserui.setdirectoryselected": [
        "javax.swing.plaf.metal.MetalFileChooserUI.setDirectorySelected(boolean)"
    ],
    "javax.swing.abstractbutton.seticontextgap": [
        "javax.swing.AbstractButton.setIconTextGap(int)"
    ],
    "javax.sql.rowset.serial.serialclob.position": [
        "javax.sql.rowset.serial.SerialClob.position(java.lang.String,long)",
        "javax.sql.rowset.serial.SerialClob.position(java.sql.Clob,long)"
    ],
    "javax.xml.ws.service.getports": [
        "javax.xml.ws.Service.getPorts()"
    ],
    "java.awt.awtevent.getid": [
        "java.awt.AWTEvent.getID()"
    ],
    "javax.swing.plaf.synth.synthlookandfeel.getstylefactory": [
        "javax.swing.plaf.synth.SynthLookAndFeel.getStyleFactory()"
    ],
    "javax.xml.ws.handler.portinfo.getportname": [
        "javax.xml.ws.handler.PortInfo.getPortName()"
    ],
    "javax.swing.text.html.parser.contentmodel.first": [
        "javax.swing.text.html.parser.ContentModel.first()"
    ],
    "java.sql.preparedstatement.setrowid": [
        "java.sql.PreparedStatement.setRowId(int,java.sql.RowId)"
    ],
    "java.security.spec.ecfieldfp.hashcode": [
        "java.security.spec.ECFieldFp.hashCode()"
    ],
    "java.lang.management.memorypoolmxbean.getname": [
        "java.lang.management.MemoryPoolMXBean.getName()"
    ],
    "javax.swing.plaf.multi.multiscrollpaneui.update": [
        "javax.swing.plaf.multi.MultiScrollPaneUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.plaf.multi.multitextui.update": [
        "javax.swing.plaf.multi.MultiTextUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.lang.invoke.methodhandles.throwexception": [
        "java.lang.invoke.MethodHandles.throwException(java.lang.Class<?>,java.lang.Class<? extends java.lang.Throwable>)"
    ],
    "javax.swing.text.boxview.getpreferredspan": [
        "javax.swing.text.BoxView.getPreferredSpan(int)"
    ],
    "java.awt.robot.isautowaitforidle": [
        "java.awt.Robot.isAutoWaitForIdle()"
    ],
    "javax.swing.jtable.setcelleditor": [
        "javax.swing.JTable.setCellEditor(javax.swing.table.TableCellEditor)"
    ],
    "javax.swing.jcomponent.setcomponentpopupmenu": [
        "javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"
    ],
    "java.beans.propertyeditorsupport.getjavainitializationstring": [
        "java.beans.PropertyEditorSupport.getJavaInitializationString()"
    ],
    "javax.script.scriptcontext.getattribute": [
        "javax.script.ScriptContext.getAttribute(java.lang.String,int)",
        "javax.script.ScriptContext.getAttribute(java.lang.String)"
    ],
    "javax.swing.jdesktoppane.removeall": [
        "javax.swing.JDesktopPane.removeAll()"
    ],
    "java.beans.beancontext.beancontextserviceavailableevent.getcurrentserviceselectors": [
        "java.beans.beancontext.BeanContextServiceAvailableEvent.getCurrentServiceSelectors()"
    ],
    "javax.swing.plaf.basic.basicradiobuttonui.createui": [
        "javax.swing.plaf.basic.BasicRadioButtonUI.createUI(javax.swing.JComponent)"
    ],
    "javax.sound.midi.sequencer.removecontrollereventlistener": [
        "javax.sound.midi.Sequencer.removeControllerEventListener(javax.sound.midi.ControllerEventListener,int[])"
    ],
    "java.util.concurrent.priorityblockingqueue.toarray": [
        "java.util.concurrent.PriorityBlockingQueue.toArray()",
        "java.util.concurrent.PriorityBlockingQueue.toArray(T[])"
    ],
    "java.util.stack.push": [
        "java.util.Stack.push(E)",
        "java.util.Stack.push(java.util.Stack)"
    ],
    "javax.crypto.cipher.getmaxallowedparameterspec": [
        "javax.crypto.Cipher.getMaxAllowedParameterSpec(java.lang.String)"
    ],
    "javax.swing.text.asyncboxview.getmaximumspan": [
        "javax.swing.text.AsyncBoxView.getMaximumSpan(int)"
    ],
    "java.time.duration.negated": [
        "java.time.Duration.negated()"
    ],
    "javax.swing.text.componentview.getminimumspan": [
        "javax.swing.text.ComponentView.getMinimumSpan(int)"
    ],
    "javax.naming.linkexception.getlinkresolvedobj": [
        "javax.naming.LinkException.getLinkResolvedObj()"
    ],
    "javax.swing.filechooser.filesystemview.createnewfolder": [
        "javax.swing.filechooser.FileSystemView.createNewFolder(java.io.File)"
    ],
    "java.lang.stringbuilder.codepointcount": [
        "java.lang.StringBuilder.codePointCount(int,int)"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.uninstallcomponents": [
        "javax.swing.plaf.basic.BasicComboBoxUI.uninstallComponents()"
    ],
    "java.beans.propertydescriptor.createpropertyeditor": [
        "java.beans.PropertyDescriptor.createPropertyEditor(java.lang.Object)"
    ],
    "org.omg.iop.codecoperations.encode": [
        "org.omg.IOP.CodecOperations.encode(org.omg.CORBA.Any)"
    ],
    "javax.imageio.stream.imageinputstream.length": [
        "javax.imageio.stream.ImageInputStream.length()"
    ],
    "javax.swing.scrollpanelayout.getverticalscrollbarpolicy": [
        "javax.swing.ScrollPaneLayout.getVerticalScrollBarPolicy()"
    ],
    "java.util.doublesummarystatistics.getsum": [
        "java.util.DoubleSummaryStatistics.getSum()"
    ],
    "javax.print.attribute.standard.copiessupported.equals": [
        "javax.print.attribute.standard.CopiesSupported.equals(java.lang.Object)"
    ],
    "javax.sound.midi.patch.getprogram": [
        "javax.sound.midi.Patch.getProgram()"
    ],
    "javax.swing.plaf.basic.basicdirectorymodel.addpropertychangelistener": [
        "javax.swing.plaf.basic.BasicDirectoryModel.addPropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "java.awt.menuitem.getlisteners": [
        "java.awt.MenuItem.getListeners(java.lang.Class<T>)"
    ],
    "java.time.month.values": [
        "java.time.Month.values()"
    ],
    "java.awt.keyboardfocusmanager.getcurrentfocuscycleroot": [
        "java.awt.KeyboardFocusManager.getCurrentFocusCycleRoot()"
    ],
    "java.awt.window.gettoolkit": [
        "java.awt.Window.getToolkit()"
    ],
    "java.net.jarurlconnection.getmanifest": [
        "java.net.JarURLConnection.getManifest()"
    ],
    "org.omg.dynamicany._dynanystub.get_string": [
        "org.omg.DynamicAny._DynAnyStub.get_string()"
    ],
    "org.w3c.dom.document.createelementns": [
        "org.w3c.dom.Document.createElementNS(java.lang.String,java.lang.String)"
    ],
    "javax.swing.plaf.basic.basictreeui.installcomponents": [
        "javax.swing.plaf.basic.BasicTreeUI.installComponents()"
    ],
    "javax.xml.ws.logicalmessage.setpayload": [
        "javax.xml.ws.LogicalMessage.setPayload(javax.xml.transform.Source)",
        "javax.xml.ws.LogicalMessage.setPayload(java.lang.Object,javax.xml.bind.JAXBContext)"
    ],
    "javax.xml.soap.soappart.getnonmatchingmimeheaders": [
        "javax.xml.soap.SOAPPart.getNonMatchingMimeHeaders(java.lang.String[])"
    ],
    "javax.swing.repaintmanager.addinvalidcomponent": [
        "javax.swing.RepaintManager.addInvalidComponent(javax.swing.JComponent)"
    ],
    "java.security.cert.x509crl.getsigalgname": [
        "java.security.cert.X509CRL.getSigAlgName()"
    ],
    "java.awt.geom.cubiccurve2d.getctrlx2": [
        "java.awt.geom.CubicCurve2D.getCtrlX2()"
    ],
    "javax.swing.jcolorchooser.removechooserpanel": [
        "javax.swing.JColorChooser.removeChooserPanel(javax.swing.colorchooser.AbstractColorChooserPanel)"
    ],
    "javax.swing.jlist.setvalueisadjusting": [
        "javax.swing.JList.setValueIsAdjusting(boolean)"
    ],
    "javax.swing.text.editorkit.write": [
        "javax.swing.text.EditorKit.write(java.io.Writer,javax.swing.text.Document,int,int)",
        "javax.swing.text.EditorKit.write(java.io.OutputStream,javax.swing.text.Document,int,int)"
    ],
    "javax.management.openmbean.opentype.getdescription": [
        "javax.management.openmbean.OpenType.getDescription()"
    ],
    "javax.management.standardmbean.getparametername": [
        "javax.management.StandardMBean.getParameterName(javax.management.MBeanConstructorInfo,javax.management.MBeanParameterInfo,int)",
        "javax.management.StandardMBean.getParameterName(javax.management.MBeanOperationInfo,javax.management.MBeanParameterInfo,int)"
    ],
    "java.awt.trayicon.setimageautosize": [
        "java.awt.TrayIcon.setImageAutoSize(boolean)"
    ],
    "javax.swing.jcomponent.repaint": [
        "javax.swing.JComponent.repaint(java.awt.Rectangle)",
        "javax.swing.JComponent.repaint(long,int,int,int,int)"
    ],
    "java.io.pushbackinputstream.reset": [
        "java.io.PushbackInputStream.reset()"
    ],
    "java.util.weakhashmap.size": [
        "java.util.WeakHashMap.size()"
    ],
    "org.w3c.dom.node.normalize": [
        "org.w3c.dom.Node.normalize()"
    ],
    "java.time.zoneoffset.getrules": [
        "java.time.ZoneOffset.getRules()"
    ],
    "java.lang.runtime.availableprocessors": [
        "java.lang.Runtime.availableProcessors()"
    ],
    "java.time.instant.truncatedto": [
        "java.time.Instant.truncatedTo(java.time.temporal.TemporalUnit)"
    ],
    "java.awt.event.invocationevent.getthrowable": [
        "java.awt.event.InvocationEvent.getThrowable()"
    ],
    "javax.swing.tree.defaulttreecellrenderer.getdefaultclosedicon": [
        "javax.swing.tree.DefaultTreeCellRenderer.getDefaultClosedIcon()"
    ],
    "java.awt.graphics2d.setrenderinghint": [
        "java.awt.Graphics2D.setRenderingHint(java.awt.RenderingHints.Key,java.lang.Object)"
    ],
    "java.net.serversocket.getchannel": [
        "java.net.ServerSocket.getChannel()"
    ],
    "javax.swing.box.createhorizontalstrut": [
        "javax.swing.Box.createHorizontalStrut(int)"
    ],
    "java.sql.databasemetadata.supportsgetgeneratedkeys": [
        "java.sql.DatabaseMetaData.supportsGetGeneratedKeys()"
    ],
    "javax.accessibility.accessibletable.getaccessiblerowdescription": [
        "javax.accessibility.AccessibleTable.getAccessibleRowDescription(int)"
    ],
    "org.xml.sax.helpers.namespacesupport.processname": [
        "org.xml.sax.helpers.NamespaceSupport.processName(java.lang.String,java.lang.String[],boolean)",
        "org.xml.sax.helpers.NamespaceSupport.processName(java.lang.String,java.lang.String,boolean)"
    ],
    "java.beans.eventhandler.gettarget": [
        "java.beans.EventHandler.getTarget()"
    ],
    "java.util.logging.logrecord.getloggername": [
        "java.util.logging.LogRecord.getLoggerName()"
    ],
    "javax.xml.transform.stream.streamresult.getwriter": [
        "javax.xml.transform.stream.StreamResult.getWriter()"
    ],
    "javax.swing.table.abstracttablemodel.setvalueat": [
        "javax.swing.table.AbstractTableModel.setValueAt(java.lang.Object,int,int)"
    ],
    "org.omg.corba.datainputstream.read_double": [
        "org.omg.CORBA.DataInputStream.read_double()"
    ],
    "javax.sql.rowset.baserowset.setblob": [
        "javax.sql.rowset.BaseRowSet.setBlob(int,java.io.InputStream,long)",
        "javax.sql.rowset.BaseRowSet.setBlob(java.lang.String,java.sql.Blob)",
        "javax.sql.rowset.BaseRowSet.setBlob(int,java.io.InputStream)",
        "javax.sql.rowset.BaseRowSet.setBlob(int,java.sql.Blob)",
        "javax.sql.rowset.BaseRowSet.setBlob(java.lang.String,java.io.InputStream,long)",
        "javax.sql.rowset.BaseRowSet.setBlob(java.lang.String,java.io.InputStream)"
    ],
    "javax.swing.plaf.basic.basicdirectorymodel.invalidatefilecache": [
        "javax.swing.plaf.basic.BasicDirectoryModel.invalidateFileCache()"
    ],
    "java.util.locale.getisocountries": [
        "java.util.Locale.getISOCountries()"
    ],
    "org.omg.portableserver.currentoperations.get_object_id": [
        "org.omg.PortableServer.CurrentOperations.get_object_id()"
    ],
    "javax.swing.jcombobox.setaction": [
        "javax.swing.JComboBox.setAction(javax.swing.Action)"
    ],
    "java.time.zoneid.getrules": [
        "java.time.ZoneId.getRules()"
    ],
    "javax.swing.plaf.multi.multitextui.paint": [
        "javax.swing.plaf.multi.MultiTextUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.plaf.multi.multitextui.viewtomodel": [
        "javax.swing.plaf.multi.MultiTextUI.viewToModel(javax.swing.text.JTextComponent,java.awt.Point)",
        "javax.swing.plaf.multi.MultiTextUI.viewToModel(javax.swing.text.JTextComponent,java.awt.Point,javax.swing.text.Position.Bias[])"
    ],
    "java.awt.color.brighter": [
        "java.awt.Color.brighter()"
    ],
    "javax.xml.parsers.saxparserfactory.setvalidating": [
        "javax.xml.parsers.SAXParserFactory.setValidating(boolean)"
    ],
    "java.lang.math.subtractexact": [
        "java.lang.Math.subtractExact(int,int)",
        "java.lang.Math.subtractExact(long,long)"
    ],
    "javax.imageio.stream.imageinputstream.reset": [
        "javax.imageio.stream.ImageInputStream.reset()"
    ],
    "java.security.signaturespi.enginegetparameters": [
        "java.security.SignatureSpi.engineGetParameters()"
    ],
    "java.awt.geom.rectangle2d.float.getheight": [
        "java.awt.geom.Rectangle2D.Float.getHeight()"
    ],
    "javax.swing.jtree.gettoggleclickcount": [
        "javax.swing.JTree.getToggleClickCount()"
    ],
    "java.util.map.equals": [
        "java.util.Map.equals(java.lang.Object)"
    ],
    "java.util.stringjoiner.setemptyvalue": [
        "java.util.StringJoiner.setEmptyValue(java.lang.CharSequence)"
    ],
    "java.awt.toolkit.getsystemclipboard": [
        "java.awt.Toolkit.getSystemClipboard()"
    ],
    "javax.swing.plaf.synth.synthspinnerui.paint": [
        "javax.swing.plaf.synth.SynthSpinnerUI.paint(java.awt.Graphics,javax.swing.JComponent)",
        "javax.swing.plaf.synth.SynthSpinnerUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)"
    ],
    "javax.swing.plaf.multi.multitoolbarui.paint": [
        "javax.swing.plaf.multi.MultiToolBarUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.lang.strictmath.tan": [
        "java.lang.StrictMath.tan(double)"
    ],
    "javax.xml.crypto.dsig.keyinfo.keyinfofactory.newretrievalmethod": [
        "javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newRetrievalMethod(java.lang.String)",
        "javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newRetrievalMethod(java.lang.String,java.lang.String,java.util.List)"
    ],
    "org.omg.dynamicany._dynunionstub.get_boolean": [
        "org.omg.DynamicAny._DynUnionStub.get_boolean()"
    ],
    "org.omg.corba.any.extract_ushort": [
        "org.omg.CORBA.Any.extract_ushort()"
    ],
    "javax.crypto.cipherinputstream.available": [
        "javax.crypto.CipherInputStream.available()"
    ],
    "javax.swing.border.titledborder.getbaselineresizebehavior": [
        "javax.swing.border.TitledBorder.getBaselineResizeBehavior(java.awt.Component)"
    ],
    "java.util.concurrent.threadpoolexecutor.tostring": [
        "java.util.concurrent.ThreadPoolExecutor.toString()"
    ],
    "javax.sql.rowset.geturl": [
        "javax.sql.RowSet.getUrl()"
    ],
    "java.time.offsetdatetime.tooffsettime": [
        "java.time.OffsetDateTime.toOffsetTime()"
    ],
    "java.util.calendar.settimeinmillis": [
        "java.util.Calendar.setTimeInMillis(long)"
    ],
    "java.util.stringjoiner.add": [
        "java.util.StringJoiner.add(java.lang.CharSequence)"
    ],
    "javax.swing.jlayer.getpreferredscrollableviewportsize": [
        "javax.swing.JLayer.getPreferredScrollableViewportSize()"
    ],
    "javax.naming.ldap.pagedresultsresponsecontrol.getcookie": [
        "javax.naming.ldap.PagedResultsResponseControl.getCookie()"
    ],
    "java.util.concurrent.atomic.longadder.sum": [
        "java.util.concurrent.atomic.LongAdder.sum()"
    ],
    "java.security.policyspi.enginerefresh": [
        "java.security.PolicySpi.engineRefresh()"
    ],
    "javax.xml.bind.util.jaxbresult.getresult": [
        "javax.xml.bind.util.JAXBResult.getResult()"
    ],
    "org.omg.corba.policyoperations.copy": [
        "org.omg.CORBA.PolicyOperations.copy()"
    ],
    "org.omg.dynamicany._dynunionstub.type": [
        "org.omg.DynamicAny._DynUnionStub.type()"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.setproperty": [
        "org.xml.sax.helpers.XMLFilterImpl.setProperty(java.lang.String,java.lang.Object)"
    ],
    "javax.swing.plaf.basic.basictabbedpaneui.setrollovertab": [
        "javax.swing.plaf.basic.BasicTabbedPaneUI.setRolloverTab(int)"
    ],
    "java.util.identityhashmap.remove": [
        "java.util.IdentityHashMap.remove(java.lang.Object)"
    ],
    "javax.net.ssl.sslserversocketfactory.getdefault": [
        "javax.net.ssl.SSLServerSocketFactory.getDefault()"
    ],
    "javax.print.printservice.getunsupportedattributes": [
        "javax.print.PrintService.getUnsupportedAttributes(javax.print.DocFlavor,javax.print.attribute.AttributeSet)"
    ],
    "java.net.url.getdefaultport": [
        "java.net.URL.getDefaultPort()"
    ],
    "javax.swing.jtabbedpane.getcomponentat": [
        "javax.swing.JTabbedPane.getComponentAt(int)"
    ],
    "java.beans.vetoablechangesupport.addvetoablechangelistener": [
        "java.beans.VetoableChangeSupport.addVetoableChangeListener(java.beans.VetoableChangeListener)",
        "java.beans.VetoableChangeSupport.addVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)"
    ],
    "javax.print.attribute.standard.chromaticity.getname": [
        "javax.print.attribute.standard.Chromaticity.getName()"
    ],
    "javax.xml.soap.mimeheaders.removeheader": [
        "javax.xml.soap.MimeHeaders.removeHeader(java.lang.String)"
    ],
    "java.sql.driver.getmajorversion": [
        "java.sql.Driver.getMajorVersion()"
    ],
    "javax.management.mbeanparameterinfo.equals": [
        "javax.management.MBeanParameterInfo.equals(java.lang.Object)"
    ],
    "java.awt.fontmetrics.getstringbounds": [
        "java.awt.FontMetrics.getStringBounds(java.lang.String,int,int,java.awt.Graphics)",
        "java.awt.FontMetrics.getStringBounds(java.lang.String,java.awt.Graphics)",
        "java.awt.FontMetrics.getStringBounds(java.text.CharacterIterator,int,int,java.awt.Graphics)",
        "java.awt.FontMetrics.getStringBounds(char[],int,int,java.awt.Graphics)"
    ],
    "java.sql.callablestatement.setbinarystream": [
        "java.sql.CallableStatement.setBinaryStream(java.lang.String,java.io.InputStream)",
        "java.sql.CallableStatement.setBinaryStream(java.lang.String,java.io.InputStream,long)",
        "java.sql.CallableStatement.setBinaryStream(java.lang.String,java.io.InputStream,int)"
    ],
    "javax.swing.text.flowview.getviewindexatposition": [
        "javax.swing.text.FlowView.getViewIndexAtPosition(int)"
    ],
    "java.text.rulebasedcollator.getcollationkey": [
        "java.text.RuleBasedCollator.getCollationKey(java.lang.String)"
    ],
    "javax.swing.tree.abstractlayoutcache.setrowheight": [
        "javax.swing.tree.AbstractLayoutCache.setRowHeight(int)"
    ],
    "javax.net.ssl.sslsocketfactory.createsocket": [
        "javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket,java.lang.String,int,boolean)",
        "javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket,java.io.InputStream,boolean)"
    ],
    "javax.swing.plaf.synth.synthlookandfeel.getname": [
        "javax.swing.plaf.synth.SynthLookAndFeel.getName()"
    ],
    "java.awt.image.renderable.renderableimageop.getwidth": [
        "java.awt.image.renderable.RenderableImageOp.getWidth()"
    ],
    "java.awt.scrollpane.getvscrollbarwidth": [
        "java.awt.ScrollPane.getVScrollbarWidth()"
    ],
    "javax.swing.tree.fixedheightlayoutcache.getpathclosestto": [
        "javax.swing.tree.FixedHeightLayoutCache.getPathClosestTo(int,int)"
    ],
    "java.time.temporal.temporalfield.isdatebased": [
        "java.time.temporal.TemporalField.isDateBased()"
    ],
    "javax.sound.sampled.audioformat.encoding.hashcode": [
        "javax.sound.sampled.AudioFormat.Encoding.hashCode()"
    ],
    "javax.xml.validation.validatorhandler.setcontenthandler": [
        "javax.xml.validation.ValidatorHandler.setContentHandler(org.xml.sax.ContentHandler)"
    ],
    "javax.naming.spi.resolveresult.getremainingname": [
        "javax.naming.spi.ResolveResult.getRemainingName()"
    ],
    "java.security.cert.x509certificate.gettbscertificate": [
        "java.security.cert.X509Certificate.getTBSCertificate()"
    ],
    "org.omg.dynamicany.dynanyoperations.get_ushort": [
        "org.omg.DynamicAny.DynAnyOperations.get_ushort()"
    ],
    "java.awt.event.keyevent.getextendedkeycodeforchar": [
        "java.awt.event.KeyEvent.getExtendedKeyCodeForChar(int)"
    ],
    "java.time.zoneddatetime.tolocaldatetime": [
        "java.time.ZonedDateTime.toLocalDateTime()"
    ],
    "java.util.concurrent.threadpoolexecutor.getlargestpoolsize": [
        "java.util.concurrent.ThreadPoolExecutor.getLargestPoolSize()"
    ],
    "java.net.urlconnection.getexpiration": [
        "java.net.URLConnection.getExpiration()"
    ],
    "javax.swing.plaf.metal.metalrootpaneui.installui": [
        "javax.swing.plaf.metal.MetalRootPaneUI.installUI(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.synth.synthpainter.painttextareaborder": [
        "javax.swing.plaf.synth.SynthPainter.paintTextAreaBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.imageio.metadata.iiometadataformatimpl.removeobjectvalue": [
        "javax.imageio.metadata.IIOMetadataFormatImpl.removeObjectValue(java.lang.String)"
    ],
    "java.awt.robot.mousewheel": [
        "java.awt.Robot.mouseWheel(int)"
    ],
    "javax.security.auth.kerberos.kerberoskey.getalgorithm": [
        "javax.security.auth.kerberos.KerberosKey.getAlgorithm()"
    ],
    "javax.print.attribute.hashattributeset.clear": [
        "javax.print.attribute.HashAttributeSet.clear()"
    ],
    "org.w3c.dom.document.createdocumentfragment": [
        "org.w3c.dom.Document.createDocumentFragment()"
    ],
    "java.awt.datatransfer.dataflavor.selectbesttextflavor": [
        "java.awt.datatransfer.DataFlavor.selectBestTextFlavor(java.awt.datatransfer.DataFlavor[])"
    ],
    "javax.swing.menuelement.getsubelements": [
        "javax.swing.MenuElement.getSubElements()"
    ],
    "java.lang.long.compare": [
        "java.lang.Long.compare(long,long)"
    ],
    "javax.swing.event.listdataevent.tostring": [
        "javax.swing.event.ListDataEvent.toString()"
    ],
    "javax.xml.crypto.dom.domcryptocontext.getnamespaceprefix": [
        "javax.xml.crypto.dom.DOMCryptoContext.getNamespacePrefix(java.lang.String,java.lang.String)"
    ],
    "java.awt.cursor.getpredefinedcursor": [
        "java.awt.Cursor.getPredefinedCursor(int)"
    ],
    "java.util.concurrent.atomic.longaccumulator.doublevalue": [
        "java.util.concurrent.atomic.LongAccumulator.doubleValue()"
    ],
    "javax.management.monitor.gaugemonitormbean.getderivedgauge": [
        "javax.management.monitor.GaugeMonitorMBean.getDerivedGauge(javax.management.ObjectName)"
    ],
    "java.nio.charset.charsetencoder.encode": [
        "java.nio.charset.CharsetEncoder.encode(java.nio.CharBuffer)"
    ],
    "java.nio.channels.asynchronoussocketchannel.connect": [
        "java.nio.channels.AsynchronousSocketChannel.connect(java.net.SocketAddress,A,,? super A>)",
        "java.nio.channels.AsynchronousSocketChannel.connect(java.net.SocketAddress)"
    ],
    "java.awt.font.transformattribute.gettransform": [
        "java.awt.font.TransformAttribute.getTransform()"
    ],
    "java.io.stringwriter.append": [
        "java.io.StringWriter.append(java.lang.CharSequence,int,int)",
        "java.io.StringWriter.append(java.lang.CharSequence)",
        "java.io.StringWriter.append(char)"
    ],
    "org.omg.corba.datainputstream.read_ushort": [
        "org.omg.CORBA.DataInputStream.read_ushort()"
    ],
    "java.nio.longbuffer.slice": [
        "java.nio.LongBuffer.slice()"
    ],
    "javax.swing.layoutstyle.getpreferredgap": [
        "javax.swing.LayoutStyle.getPreferredGap(javax.swing.JComponent,javax.swing.JComponent,javax.swing.LayoutStyle.ComponentPlacement,int,java.awt.Container)"
    ],
    "javax.swing.spinnerdatemodel.setvalue": [
        "javax.swing.SpinnerDateModel.setValue(java.lang.Object)"
    ],
    "javax.sql.rowset.baserowset.setfloat": [
        "javax.sql.rowset.BaseRowSet.setFloat(int,float)",
        "javax.sql.rowset.BaseRowSet.setFloat(java.lang.String,float)"
    ],
    "org.omg.corba.datainputstream.read_long": [
        "org.omg.CORBA.DataInputStream.read_long()"
    ],
    "javax.swing.plaf.nimbus.abstractregionpainter.decodex": [
        "javax.swing.plaf.nimbus.AbstractRegionPainter.decodeX(float)"
    ],
    "javax.swing.uimanager.getdefaults": [
        "javax.swing.UIManager.getDefaults()"
    ],
    "java.lang.thread.getstate": [
        "java.lang.Thread.getState()"
    ],
    "javax.swing.text.stylecontext.writeattributes": [
        "javax.swing.text.StyleContext.writeAttributes(java.io.ObjectOutputStream,javax.swing.text.AttributeSet)"
    ],
    "java.nio.channels.seekablebytechannel.truncate": [
        "java.nio.channels.SeekableByteChannel.truncate(long)"
    ],
    "java.awt.list.processevent": [
        "java.awt.List.processEvent(java.awt.AWTEvent)"
    ],
    "java.util.concurrent.atomic.atomicstampedreference.weakcompareandset": [
        "java.util.concurrent.atomic.AtomicStampedReference.weakCompareAndSet(V,V,int,int)",
        "java.util.concurrent.atomic.AtomicStampedReference.weakCompareAndSet(java.util.concurrent.atomic.AtomicStampedReference,java.util.concurrent.atomic.AtomicStampedReference,int,int)"
    ],
    "javax.management.modelmbean.requiredmodelmbean.setattributes": [
        "javax.management.modelmbean.RequiredModelMBean.setAttributes(javax.management.AttributeList)"
    ],
    "javax.swing.plaf.textui.viewtomodel": [
        "javax.swing.plaf.TextUI.viewToModel(javax.swing.text.JTextComponent,java.awt.Point)",
        "javax.swing.plaf.TextUI.viewToModel(javax.swing.text.JTextComponent,java.awt.Point,javax.swing.text.Position.Bias[])"
    ],
    "javax.xml.soap.soappart.getallmimeheaders": [
        "javax.xml.soap.SOAPPart.getAllMimeHeaders()"
    ],
    "java.awt.geom.path2d.getcurrentpoint": [
        "java.awt.geom.Path2D.getCurrentPoint()"
    ],
    "javax.sql.xaconnection.getxaresource": [
        "javax.sql.XAConnection.getXAResource()"
    ],
    "java.time.zoneddatetime.getyear": [
        "java.time.ZonedDateTime.getYear()"
    ],
    "javax.swing.text.defaultstyleddocument.elementspec.settype": [
        "javax.swing.text.DefaultStyledDocument.ElementSpec.setType(short)"
    ],
    "javax.swing.jtable.getprintable": [
        "javax.swing.JTable.getPrintable(javax.swing.JTable.PrintMode,java.text.MessageFormat,java.text.MessageFormat)"
    ],
    "java.awt.panel.addnotify": [
        "java.awt.Panel.addNotify()"
    ],
    "java.lang.class.newinstance": [
        "java.lang.Class.newInstance()"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writeobject": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeObject(java.sql.SQLData)"
    ],
    "java.lang.management.classloadingmxbean.getunloadedclasscount": [
        "java.lang.management.ClassLoadingMXBean.getUnloadedClassCount()"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writestruct": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeStruct(java.sql.Struct)"
    ],
    "org.omg.dynamicany._dynstructstub.get_ulong": [
        "org.omg.DynamicAny._DynStructStub.get_ulong()"
    ],
    "org.omg.dynamicany._dynarraystub.to_any": [
        "org.omg.DynamicAny._DynArrayStub.to_any()"
    ],
    "javax.crypto.mac.dofinal": [
        "javax.crypto.Mac.doFinal(byte[])",
        "javax.crypto.Mac.doFinal(byte[],int)",
        "javax.crypto.Mac.doFinal()"
    ],
    "javax.swing.rootpanecontainer.getrootpane": [
        "javax.swing.RootPaneContainer.getRootPane()"
    ],
    "java.util.concurrent.threadpoolexecutor.setthreadfactory": [
        "java.util.concurrent.ThreadPoolExecutor.setThreadFactory(java.util.concurrent.ThreadFactory)"
    ],
    "javax.swing.plaf.synth.synthrootpaneui.getcontext": [
        "javax.swing.plaf.synth.SynthRootPaneUI.getContext(javax.swing.JComponent)"
    ],
    "java.awt.font.fontrendercontext.getfractionalmetricshint": [
        "java.awt.font.FontRenderContext.getFractionalMetricsHint()"
    ],
    "java.util.zip.zipentry.getcreationtime": [
        "java.util.zip.ZipEntry.getCreationTime()"
    ],
    "java.util.prefs.abstractpreferences.getspi": [
        "java.util.prefs.AbstractPreferences.getSpi(java.lang.String)"
    ],
    "java.lang.string.replaceall": [
        "java.lang.String.replaceAll(java.lang.String,java.lang.String)"
    ],
    "javax.xml.soap.soapelement.getattributevalue": [
        "javax.xml.soap.SOAPElement.getAttributeValue(javax.xml.namespace.QName)",
        "javax.xml.soap.SOAPElement.getAttributeValue(javax.xml.soap.Name)"
    ],
    "java.nio.channels.selectablechannel.keyfor": [
        "java.nio.channels.SelectableChannel.keyFor(java.nio.channels.Selector)"
    ],
    "java.beans.beaninfo.getdefaultpropertyindex": [
        "java.beans.BeanInfo.getDefaultPropertyIndex()"
    ],
    "javax.swing.plaf.multi.multicomboboxui.uninstallui": [
        "javax.swing.plaf.multi.MultiComboBoxUI.uninstallUI(javax.swing.JComponent)"
    ],
    "java.awt.geom.rectangle2d.intersect": [
        "java.awt.geom.Rectangle2D.intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)"
    ],
    "java.awt.component.getheight": [
        "java.awt.Component.getHeight()"
    ],
    "java.lang.thread.setname": [
        "java.lang.Thread.setName(java.lang.String)"
    ],
    "javax.swing.text.html.htmleditorkit.createdefaultdocument": [
        "javax.swing.text.html.HTMLEditorKit.createDefaultDocument()"
    ],
    "javax.annotation.processing.processingenvironment.getelementutils": [
        "javax.annotation.processing.ProcessingEnvironment.getElementUtils()"
    ],
    "java.util.zip.zipoutputstream.setmethod": [
        "java.util.zip.ZipOutputStream.setMethod(int)"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.setorientation": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.setOrientation(int)"
    ],
    "javax.swing.plaf.multi.multidesktopiconui.createui": [
        "javax.swing.plaf.multi.MultiDesktopIconUI.createUI(javax.swing.JComponent)"
    ],
    "java.awt.dnd.autoscroll.getautoscrollinsets": [
        "java.awt.dnd.Autoscroll.getAutoscrollInsets()"
    ],
    "javax.imageio.stream.imageoutputstream.writedoubles": [
        "javax.imageio.stream.ImageOutputStream.writeDoubles(double[],int,int)"
    ],
    "javax.swing.plaf.basic.basiclistui.getbaseline": [
        "javax.swing.plaf.basic.BasicListUI.getBaseline(javax.swing.JComponent,int,int)"
    ],
    "java.awt.geom.arc2d.double.makebounds": [
        "java.awt.geom.Arc2D.Double.makeBounds(double,double,double,double)"
    ],
    "java.nio.file.attribute.dosfileattributes.ishidden": [
        "java.nio.file.attribute.DosFileAttributes.isHidden()"
    ],
    "java.security.cert.certpathbuilder.getinstance": [
        "java.security.cert.CertPathBuilder.getInstance(java.lang.String)",
        "java.security.cert.CertPathBuilder.getInstance(java.lang.String,java.lang.String)",
        "java.security.cert.CertPathBuilder.getInstance(java.lang.String,java.security.Provider)"
    ],
    "org.xml.sax.helpers.defaulthandler.endprefixmapping": [
        "org.xml.sax.helpers.DefaultHandler.endPrefixMapping(java.lang.String)"
    ],
    "javax.naming.event.eventcontext.targetmustexist": [
        "javax.naming.event.EventContext.targetMustExist()"
    ],
    "java.util.function.doubleunaryoperator.applyasdouble": [
        "java.util.function.DoubleUnaryOperator.applyAsDouble(double)"
    ],
    "java.beans.encoder.setexceptionlistener": [
        "java.beans.Encoder.setExceptionListener(java.beans.ExceptionListener)"
    ],
    "javax.swing.tree.defaulttreecellrenderer.getopenicon": [
        "javax.swing.tree.DefaultTreeCellRenderer.getOpenIcon()"
    ],
    "javax.xml.ws.bindingprovider.getbinding": [
        "javax.xml.ws.BindingProvider.getBinding()"
    ],
    "javax.xml.parsers.documentbuilder.isvalidating": [
        "javax.xml.parsers.DocumentBuilder.isValidating()"
    ],
    "javax.swing.plaf.multi.multifilechooserui.contains": [
        "javax.swing.plaf.multi.MultiFileChooserUI.contains(javax.swing.JComponent,int,int)"
    ],
    "java.beans.featuredescriptor.isexpert": [
        "java.beans.FeatureDescriptor.isExpert()"
    ],
    "org.omg.dynamicany._dynstructstub.insert_long": [
        "org.omg.DynamicAny._DynStructStub.insert_long(int)"
    ],
    "javax.naming.compositename.compareto": [
        "javax.naming.CompositeName.compareTo(java.lang.Object)"
    ],
    "javax.xml.soap.soapmessage.writeto": [
        "javax.xml.soap.SOAPMessage.writeTo(java.io.OutputStream)"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.createfocuslistener": [
        "javax.swing.plaf.basic.BasicComboBoxUI.createFocusListener()"
    ],
    "java.util.function.doublepredicate.test": [
        "java.util.function.DoublePredicate.test(double)"
    ],
    "java.util.function.longpredicate.negate": [
        "java.util.function.LongPredicate.negate()"
    ],
    "java.lang.processbuilder.environment": [
        "java.lang.ProcessBuilder.environment()"
    ],
    "java.awt.awteventmulticaster.addinternal": [
        "java.awt.AWTEventMulticaster.addInternal(java.util.EventListener,java.util.EventListener)"
    ],
    "java.text.attributedstring.addattribute": [
        "java.text.AttributedString.addAttribute(java.text.AttributedCharacterIterator.Attribute,java.lang.Object,int,int)",
        "java.text.AttributedString.addAttribute(java.text.AttributedCharacterIterator.Attribute,java.lang.Object)"
    ],
    "javax.swing.jpopupmenu.firepopupmenucanceled": [
        "javax.swing.JPopupMenu.firePopupMenuCanceled()"
    ],
    "java.nio.file.attribute.fileownerattributeview.setowner": [
        "java.nio.file.attribute.FileOwnerAttributeView.setOwner(java.nio.file.attribute.UserPrincipal)"
    ],
    "javax.annotation.processing.filer.createclassfile": [
        "javax.annotation.processing.Filer.createClassFile(java.lang.CharSequence,javax.lang.model.element.Element...)"
    ],
    "java.lang.inheritablethreadlocal.childvalue": [
        "java.lang.InheritableThreadLocal.childValue(T)",
        "java.lang.InheritableThreadLocal.childValue(java.lang.InheritableThreadLocal)"
    ],
    "javax.naming.linkexception.setlinkremainingname": [
        "javax.naming.LinkException.setLinkRemainingName(javax.naming.Name)"
    ],
    "org.omg.portableserver.poaoperations.the_activator": [
        "org.omg.PortableServer.POAOperations.the_activator(org.omg.PortableServer.AdapterActivator)",
        "org.omg.PortableServer.POAOperations.the_activator()"
    ],
    "java.util.list.size": [
        "java.util.List.size()"
    ],
    "javax.xml.stream.location.getsystemid": [
        "javax.xml.stream.Location.getSystemId()"
    ],
    "java.awt.fontmetrics.stringwidth": [
        "java.awt.FontMetrics.stringWidth(java.lang.String)"
    ],
    "java.util.prefs.nodechangelistener.childadded": [
        "java.util.prefs.NodeChangeListener.childAdded(java.util.prefs.NodeChangeEvent)"
    ],
    "org.omg.portableserver.servant._all_interfaces": [
        "org.omg.PortableServer.Servant._all_interfaces(org.omg.PortableServer.POA,byte[])"
    ],
    "javax.swing.jspinner.setmodel": [
        "javax.swing.JSpinner.setModel(javax.swing.SpinnerModel)"
    ],
    "java.awt.dnd.dragsourcecontext.getdragsource": [
        "java.awt.dnd.DragSourceContext.getDragSource()"
    ],
    "java.util.stream.longstream.findfirst": [
        "java.util.stream.LongStream.findFirst()"
    ],
    "javax.swing.plaf.synth.synthpainter.painttabbedpaneborder": [
        "javax.swing.plaf.synth.SynthPainter.paintTabbedPaneBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.plaf.multi.multiprogressbarui.uninstallui": [
        "javax.swing.plaf.multi.MultiProgressBarUI.uninstallUI(javax.swing.JComponent)"
    ],
    "javax.xml.crypto.dsig.reference.validate": [
        "javax.xml.crypto.dsig.Reference.validate(javax.xml.crypto.dsig.XMLValidateContext)"
    ],
    "java.util.concurrent.arrayblockingqueue.add": [
        "java.util.concurrent.ArrayBlockingQueue.add(E)",
        "java.util.concurrent.ArrayBlockingQueue.add(java.util.concurrent.ArrayBlockingQueue)"
    ],
    "java.nio.file.spi.filesystemprovider.newbytechannel": [
        "java.nio.file.spi.FileSystemProvider.newByteChannel(java.nio.file.Path,java.util.Set<? extends java.nio.file.OpenOption>,java.nio.file.attribute.FileAttribute<?>)",
        "java.nio.file.spi.FileSystemProvider.newByteChannel(java.nio.file.Path,java.util.Set<? extends java.nio.file.OpenOption>,java.nio.file.attribute.FileAttribute<?>...)"
    ],
    "java.awt.image.componentcolormodel.getcomponents": [
        "java.awt.image.ComponentColorModel.getComponents(java.lang.Object,int[],int)",
        "java.awt.image.ComponentColorModel.getComponents(int,int[],int)"
    ],
    "java.security.interfaces.rsamultiprimeprivatecrtkey.getprimeq": [
        "java.security.interfaces.RSAMultiPrimePrivateCrtKey.getPrimeQ()"
    ],
    "java.awt.image.renderable.parameterblock.getbyteparameter": [
        "java.awt.image.renderable.ParameterBlock.getByteParameter(int)"
    ],
    "javax.sound.midi.mididevice.info.getdescription": [
        "javax.sound.midi.MidiDevice.Info.getDescription()"
    ],
    "java.security.keystore.gettype": [
        "java.security.KeyStore.getType()"
    ],
    "org.omg.dynamicany.dynanyoperations.insert_any": [
        "org.omg.DynamicAny.DynAnyOperations.insert_any(org.omg.CORBA.Any)"
    ],
    "java.sql.clob.getasciistream": [
        "java.sql.Clob.getAsciiStream()"
    ],
    "javax.swing.plaf.synth.synthscrollbarui.getminimumthumbsize": [
        "javax.swing.plaf.synth.SynthScrollBarUI.getMinimumThumbSize()"
    ],
    "javax.swing.plaf.basic.basiccombopopup.configurescroller": [
        "javax.swing.plaf.basic.BasicComboPopup.configureScroller()"
    ],
    "java.util.function.intunaryoperator.applyasint": [
        "java.util.function.IntUnaryOperator.applyAsInt(int)"
    ],
    "javax.script.scriptengine.getbindings": [
        "javax.script.ScriptEngine.getBindings(int)"
    ],
    "javax.swing.text.html.minimalhtmlwriter.writestyles": [
        "javax.swing.text.html.MinimalHTMLWriter.writeStyles()"
    ],
    "javax.net.ssl.trustmanagerfactory.init": [
        "javax.net.ssl.TrustManagerFactory.init(javax.net.ssl.ManagerFactoryParameters)",
        "javax.net.ssl.TrustManagerFactory.init(java.security.KeyStore)"
    ],
    "javax.swing.plaf.synth.synthpainter.painttreecellborder": [
        "javax.swing.plaf.synth.SynthPainter.paintTreeCellBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.awt.geom.affinetransform.getquadrantrotateinstance": [
        "java.awt.geom.AffineTransform.getQuadrantRotateInstance(int)",
        "java.awt.geom.AffineTransform.getQuadrantRotateInstance(int,double,double)"
    ],
    "java.awt.geom.area.ispolygonal": [
        "java.awt.geom.Area.isPolygonal()"
    ],
    "javax.swing.event.tablecolumnmodellistener.columnselectionchanged": [
        "javax.swing.event.TableColumnModelListener.columnSelectionChanged(javax.swing.event.ListSelectionEvent)"
    ],
    "javax.swing.plaf.multi.multirootpaneui.getminimumsize": [
        "javax.swing.plaf.multi.MultiRootPaneUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "java.util.concurrent.transferqueue.trytransfer": [
        "java.util.concurrent.TransferQueue.tryTransfer(java.util.concurrent.TransferQueue)",
        "java.util.concurrent.TransferQueue.tryTransfer(E)"
    ],
    "java.awt.dnd.autoscroll.autoscroll": [
        "java.awt.dnd.Autoscroll.autoscroll(java.awt.Point)"
    ],
    "java.sql.connection.getautocommit": [
        "java.sql.Connection.getAutoCommit()"
    ],
    "java.awt.geom.pathiterator.next": [
        "java.awt.geom.PathIterator.next()"
    ],
    "javax.swing.jtable.createdefaulttableheader": [
        "javax.swing.JTable.createDefaultTableHeader()"
    ],
    "java.util.concurrent.forkjoinpool.commonpool": [
        "java.util.concurrent.ForkJoinPool.commonPool()"
    ],
    "javax.swing.plaf.basic.basiccomboboxeditor.createeditorcomponent": [
        "javax.swing.plaf.basic.BasicComboBoxEditor.createEditorComponent()"
    ],
    "java.io.objectoutputstream.writechar": [
        "java.io.ObjectOutputStream.writeChar(int)"
    ],
    "java.util.calendar.settimezone": [
        "java.util.Calendar.setTimeZone(java.util.TimeZone)"
    ],
    "java.awt.font.texthitinfo.getinsertionindex": [
        "java.awt.font.TextHitInfo.getInsertionIndex()"
    ],
    "javax.swing.plaf.synth.synthviewportui.getcontext": [
        "javax.swing.plaf.synth.SynthViewportUI.getContext(javax.swing.JComponent)"
    ],
    "java.lang.reflect.executable.getname": [
        "java.lang.reflect.Executable.getName()"
    ],
    "java.text.numberformat.field.readresolve": [
        "java.text.NumberFormat.Field.readResolve()"
    ],
    "java.net.urlconnection.getdoinput": [
        "java.net.URLConnection.getDoInput()"
    ],
    "java.awt.font.linebreakmeasurer.getposition": [
        "java.awt.font.LineBreakMeasurer.getPosition()"
    ],
    "java.util.navigableset.lower": [
        "java.util.NavigableSet.lower(java.util.NavigableSet)",
        "java.util.NavigableSet.lower(E)"
    ],
    "java.rmi.server.rmisocketfactory.getfailurehandler": [
        "java.rmi.server.RMISocketFactory.getFailureHandler()"
    ],
    "java.util.collections.enumeration": [
        "java.util.Collections.enumeration(java.util.Collection<T>)"
    ],
    "java.lang.processbuilder.redirect.equals": [
        "java.lang.ProcessBuilder.Redirect.equals(java.lang.Object)"
    ],
    "java.sql.sqlinput.readnclob": [
        "java.sql.SQLInput.readNClob()"
    ],
    "java.awt.dialog.setmodalitytype": [
        "java.awt.Dialog.setModalityType(java.awt.Dialog.ModalityType)"
    ],
    "java.security.cert.certselector.clone": [
        "java.security.cert.CertSelector.clone()"
    ],
    "java.util.concurrent.atomic.atomicintegerfieldupdater.incrementandget": [
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.incrementAndGet(T)",
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.incrementAndGet(java.util.concurrent.atomic.AtomicIntegerFieldUpdater)"
    ],
    "java.time.localdate.attime": [
        "java.time.LocalDate.atTime(int,int)",
        "java.time.LocalDate.atTime(int,int,int,int)",
        "java.time.LocalDate.atTime(java.time.OffsetTime)",
        "java.time.LocalDate.atTime(int,int,int)",
        "java.time.LocalDate.atTime(java.time.LocalTime)"
    ],
    "java.time.chrono.chronozoneddatetime.withearlieroffsetatoverlap": [
        "java.time.chrono.ChronoZonedDateTime.withEarlierOffsetAtOverlap()"
    ],
    "javax.swing.plaf.synth.synthradiobuttonmenuitemui.paintborder": [
        "javax.swing.plaf.synth.SynthRadioButtonMenuItemUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.jtable.editcellat": [
        "javax.swing.JTable.editCellAt(int,int)",
        "javax.swing.JTable.editCellAt(int,int,java.util.EventObject)"
    ],
    "javax.print.printservice.isattributevaluesupported": [
        "javax.print.PrintService.isAttributeValueSupported(javax.print.attribute.Attribute,javax.print.DocFlavor,javax.print.attribute.AttributeSet)"
    ],
    "javax.swing.plaf.basic.basictableui.createmouseinputlistener": [
        "javax.swing.plaf.basic.BasicTableUI.createMouseInputListener()"
    ],
    "org.omg.dynamicany._dynsequencestub.get_ulong": [
        "org.omg.DynamicAny._DynSequenceStub.get_ulong()"
    ],
    "javax.net.ssl.sslengine.setenablesessioncreation": [
        "javax.net.ssl.SSLEngine.setEnableSessionCreation(boolean)"
    ],
    "java.util.spliterator.trysplit": [
        "java.util.Spliterator.trySplit()"
    ],
    "java.awt.component.enableevents": [
        "java.awt.Component.enableEvents(long)"
    ],
    "java.time.clock.millis": [
        "java.time.Clock.millis()"
    ],
    "javax.xml.parsers.saxparser.setproperty": [
        "javax.xml.parsers.SAXParser.setProperty(java.lang.String,java.lang.Object)"
    ],
    "java.lang.threadgroup.isdestroyed": [
        "java.lang.ThreadGroup.isDestroyed()"
    ],
    "java.lang.reflect.genericarraytype.getgenericcomponenttype": [
        "java.lang.reflect.GenericArrayType.getGenericComponentType()"
    ],
    "javax.swing.defaultsingleselectionmodel.getchangelisteners": [
        "javax.swing.DefaultSingleSelectionModel.getChangeListeners()"
    ],
    "java.util.optionalint.of": [
        "java.util.OptionalInt.of(int)"
    ],
    "java.text.decimalformat.applypattern": [
        "java.text.DecimalFormat.applyPattern(java.lang.String)"
    ],
    "java.io.objectoutputstream.writeboolean": [
        "java.io.ObjectOutputStream.writeBoolean(boolean)"
    ],
    "javax.print.attribute.standard.multipledocumenthandling.getname": [
        "javax.print.attribute.standard.MultipleDocumentHandling.getName()"
    ],
    "javax.swing.jcombobox.getuiclassid": [
        "javax.swing.JComboBox.getUIClassID()"
    ],
    "javax.swing.jinternalframe.setrootpanecheckingenabled": [
        "javax.swing.JInternalFrame.setRootPaneCheckingEnabled(boolean)"
    ],
    "org.omg.dynamicany._dynarraystub.type": [
        "org.omg.DynamicAny._DynArrayStub.type()"
    ],
    "javax.imageio.imagetypespecifier.getbufferedimagetype": [
        "javax.imageio.ImageTypeSpecifier.getBufferedImageType()"
    ],
    "javax.swing.text.plainview.getpreferredspan": [
        "javax.swing.text.PlainView.getPreferredSpan(int)"
    ],
    "java.io.inputstream.mark": [
        "java.io.InputStream.mark(int)"
    ],
    "javax.activation.mimetypeparameterlist.getnames": [
        "javax.activation.MimeTypeParameterList.getNames()"
    ],
    "org.omg.dynamicany.dynanyoperations.get_typecode": [
        "org.omg.DynamicAny.DynAnyOperations.get_typecode()"
    ],
    "java.awt.datatransfer.clipboard.getdata": [
        "java.awt.datatransfer.Clipboard.getData(java.awt.datatransfer.DataFlavor)"
    ],
    "javax.swing.text.defaultstyleddocument.setlogicalstyle": [
        "javax.swing.text.DefaultStyledDocument.setLogicalStyle(int,javax.swing.text.Style)"
    ],
    "javax.swing.plaf.metal.metaltheme.getcontroldisabled": [
        "javax.swing.plaf.metal.MetalTheme.getControlDisabled()"
    ],
    "javax.swing.event.documentevent.getchange": [
        "javax.swing.event.DocumentEvent.getChange(javax.swing.text.Element)"
    ],
    "javax.xml.soap.node.getvalue": [
        "javax.xml.soap.Node.getValue()"
    ],
    "javax.management.remote.rmi.rmiserverimpl.close": [
        "javax.management.remote.rmi.RMIServerImpl.close()"
    ],
    "java.awt.component.gety": [
        "java.awt.Component.getY()"
    ],
    "javax.accessibility.accessiblestateset.addall": [
        "javax.accessibility.AccessibleStateSet.addAll(javax.accessibility.AccessibleState[])"
    ],
    "java.util.primitiveiterator.ofint.foreachremaining": [
        "java.util.PrimitiveIterator.OfInt.forEachRemaining(java.util.function.IntConsumer)",
        "java.util.PrimitiveIterator.OfInt.forEachRemaining(java.util.function.Consumer<? super java.lang.Integer>)"
    ],
    "org.omg.corba.localobject._hash": [
        "org.omg.CORBA.LocalObject._hash(int)"
    ],
    "java.awt.gridbaglayout.getconstraints": [
        "java.awt.GridBagLayout.getConstraints(java.awt.Component)"
    ],
    "javax.security.auth.kerberos.servicepermission.hashcode": [
        "javax.security.auth.kerberos.ServicePermission.hashCode()"
    ],
    "javax.naming.event.namingevent.getchangeinfo": [
        "javax.naming.event.NamingEvent.getChangeInfo()"
    ],
    "javax.swing.text.html.htmldocument.insertafterend": [
        "javax.swing.text.html.HTMLDocument.insertAfterEnd(javax.swing.text.Element,java.lang.String)"
    ],
    "javax.swing.progressmonitor.setnote": [
        "javax.swing.ProgressMonitor.setNote(java.lang.String)"
    ],
    "org.xml.sax.ext.declhandler.externalentitydecl": [
        "org.xml.sax.ext.DeclHandler.externalEntityDecl(java.lang.String,java.lang.String,java.lang.String)"
    ],
    "java.awt.im.spi.inputmethod.iscompositionenabled": [
        "java.awt.im.spi.InputMethod.isCompositionEnabled()"
    ],
    "java.util.regex.matchresult.end": [
        "java.util.regex.MatchResult.end(int)",
        "java.util.regex.MatchResult.end()"
    ],
    "java.awt.font.texthitinfo.getoffsethit": [
        "java.awt.font.TextHitInfo.getOffsetHit(int)"
    ],
    "java.awt.dnd.draggesturerecognizer.getsourceactions": [
        "java.awt.dnd.DragGestureRecognizer.getSourceActions()"
    ],
    "javax.swing.plaf.metal.metalmenubarui.uninstallui": [
        "javax.swing.plaf.metal.MetalMenuBarUI.uninstallUI(javax.swing.JComponent)"
    ],
    "java.lang.management.monitorinfo.from": [
        "java.lang.management.MonitorInfo.from(javax.management.openmbean.CompositeData)"
    ],
    "java.security.security.addprovider": [
        "java.security.Security.addProvider(java.security.Provider)"
    ],
    "java.net.url.getuserinfo": [
        "java.net.URL.getUserInfo()"
    ],
    "javax.swing.plaf.multi.multidesktoppaneui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiDesktopPaneUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "java.time.zone.zonerules.of": [
        "java.time.zone.ZoneRules.of(java.time.ZoneOffset,java.time.ZoneOffset,java.util.List<java.time.zone.ZoneOffsetTransition>,java.util.List<java.time.zone.ZoneOffsetTransition>,java.util.List<java.time.zone.ZoneOffsetTransitionRule>)",
        "java.time.zone.ZoneRules.of(java.time.ZoneOffset)"
    ],
    "java.time.temporal.temporalfield.istimebased": [
        "java.time.temporal.TemporalField.isTimeBased()"
    ],
    "java.awt.geom.line2d.getp2": [
        "java.awt.geom.Line2D.getP2()"
    ],
    "java.awt.image.volatileimage.getwidth": [
        "java.awt.image.VolatileImage.getWidth()"
    ],
    "javax.sql.rowset.baserowset.setnclob": [
        "javax.sql.rowset.BaseRowSet.setNClob(java.lang.String,java.sql.NClob)",
        "javax.sql.rowset.BaseRowSet.setNClob(java.lang.String,java.io.Reader)",
        "javax.sql.rowset.BaseRowSet.setNClob(java.lang.String,java.io.Reader,long)",
        "javax.sql.rowset.BaseRowSet.setNClob(int,java.sql.NClob)",
        "javax.sql.rowset.BaseRowSet.setNClob(int,java.io.Reader,long)",
        "javax.sql.rowset.BaseRowSet.setNClob(int,java.io.Reader)"
    ],
    "java.nio.bytebuffer.compareto": [
        "java.nio.ByteBuffer.compareTo(java.nio.ByteBuffer)"
    ],
    "javax.lang.model.util.simpleelementvisitor6.visittype": [
        "javax.lang.model.util.SimpleElementVisitor6.visitType(javax.lang.model.element.TypeElement,javax.lang.model.util.SimpleElementVisitor6)"
    ],
    "javax.accessibility.accessiblevalue.getmaximumaccessiblevalue": [
        "javax.accessibility.AccessibleValue.getMaximumAccessibleValue()"
    ],
    "javax.print.attribute.standard.jobimpressionscompleted.getname": [
        "javax.print.attribute.standard.JobImpressionsCompleted.getName()"
    ],
    "java.text.numberformat.setminimumintegerdigits": [
        "java.text.NumberFormat.setMinimumIntegerDigits(int)"
    ],
    "java.lang.management.threadmxbean.getcurrentthreadcputime": [
        "java.lang.management.ThreadMXBean.getCurrentThreadCpuTime()"
    ],
    "javax.xml.stream.location.getpublicid": [
        "javax.xml.stream.Location.getPublicId()"
    ],
    "javax.swing.tree.treeselectionmodel.setselectionpaths": [
        "javax.swing.tree.TreeSelectionModel.setSelectionPaths(javax.swing.tree.TreePath[])"
    ],
    "javax.management.monitor.countermonitor.getderivedgaugetimestamp": [
        "javax.management.monitor.CounterMonitor.getDerivedGaugeTimeStamp(javax.management.ObjectName)"
    ],
    "javax.swing.plaf.multi.multiinternalframeui.paint": [
        "javax.swing.plaf.multi.MultiInternalFrameUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.util.treeset.headset": [
        "java.util.TreeSet.headSet(E)"
    ],
    "java.awt.image.bandedsamplemodel.getpixel": [
        "java.awt.image.BandedSampleModel.getPixel(int,int,int[],java.awt.image.DataBuffer)"
    ],
    "java.util.base64.encoder.withoutpadding": [
        "java.util.Base64.Encoder.withoutPadding()"
    ],
    "javax.swing.plaf.synth.synthseparatorui.uninstalldefaults": [
        "javax.swing.plaf.synth.SynthSeparatorUI.uninstallDefaults(javax.swing.JSeparator)"
    ],
    "javax.xml.crypto.nosuchmechanismexception.getcause": [
        "javax.xml.crypto.NoSuchMechanismException.getCause()"
    ],
    "java.awt.layoutmanager2.maximumlayoutsize": [
        "java.awt.LayoutManager2.maximumLayoutSize(java.awt.Container)"
    ],
    "javax.swing.text.html.htmldocument.iterator.getendoffset": [
        "javax.swing.text.html.HTMLDocument.Iterator.getEndOffset()"
    ],
    "java.awt.geom.cubiccurve2d.gety1": [
        "java.awt.geom.CubicCurve2D.getY1()"
    ],
    "java.util.logging.sockethandler.publish": [
        "java.util.logging.SocketHandler.publish(java.util.logging.LogRecord)"
    ],
    "javax.xml.bind.datatypeconverterinterface.printdecimal": [
        "javax.xml.bind.DatatypeConverterInterface.printDecimal(java.math.BigDecimal)"
    ],
    "org.omg.dynamicany.dynanyoperations.insert_wstring": [
        "org.omg.DynamicAny.DynAnyOperations.insert_wstring(java.lang.String)"
    ],
    "java.lang.reflect.proxy.getinvocationhandler": [
        "java.lang.reflect.Proxy.getInvocationHandler(java.lang.Object)"
    ],
    "javax.imageio.imagereader.readtile": [
        "javax.imageio.ImageReader.readTile(int,int,int)"
    ],
    "javax.swing.text.paragraphview.getclosestpositionto": [
        "javax.swing.text.ParagraphView.getClosestPositionTo(int,javax.swing.text.Position.Bias,java.awt.Shape,int,javax.swing.text.Position.Bias[],int,int)"
    ],
    "java.awt.awteventmulticaster.keyreleased": [
        "java.awt.AWTEventMulticaster.keyReleased(java.awt.event.KeyEvent)"
    ],
    "java.lang.long.tooctalstring": [
        "java.lang.Long.toOctalString(long)"
    ],
    "org.omg.corba.contextlist.count": [
        "org.omg.CORBA.ContextList.count()"
    ],
    "javax.accessibility.accessibleextendedtable.getaccessiblerow": [
        "javax.accessibility.AccessibleExtendedTable.getAccessibleRow(int)"
    ],
    "java.lang.byte.intvalue": [
        "java.lang.Byte.intValue()"
    ],
    "java.time.offsettime.parse": [
        "java.time.OffsetTime.parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)",
        "java.time.OffsetTime.parse(java.lang.CharSequence)"
    ],
    "java.util.concurrent.concurrentlinkeddeque.removelastoccurrence": [
        "java.util.concurrent.ConcurrentLinkedDeque.removeLastOccurrence(java.lang.Object)"
    ],
    "java.lang.math.tointexact": [
        "java.lang.Math.toIntExact(long)"
    ],
    "java.lang.object.hashcode": [
        "java.lang.Object.hashCode()"
    ],
    "javax.print.docflavor.tostring": [
        "javax.print.DocFlavor.toString()"
    ],
    "javax.swing.text.segment.first": [
        "javax.swing.text.Segment.first()"
    ],
    "javax.swing.text.defaultstyleddocument.elementspec.tostring": [
        "javax.swing.text.DefaultStyledDocument.ElementSpec.toString()"
    ],
    "javax.swing.jtable.prepareeditor": [
        "javax.swing.JTable.prepareEditor(javax.swing.table.TableCellEditor,int,int)"
    ],
    "java.awt.component.removemouselistener": [
        "java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"
    ],
    "org.omg.dynamicany._dynanystub.get_wstring": [
        "org.omg.DynamicAny._DynAnyStub.get_wstring()"
    ],
    "javax.swing.table.tablecolumnmodel.getselectionmodel": [
        "javax.swing.table.TableColumnModel.getSelectionModel()"
    ],
    "javax.rmi.corba.valuehandlermultiformat.getmaximumstreamformatversion": [
        "javax.rmi.CORBA.ValueHandlerMultiFormat.getMaximumStreamFormatVersion()"
    ],
    "java.io.outputstreamwriter.flush": [
        "java.io.OutputStreamWriter.flush()"
    ],
    "javax.swing.tree.defaultmutabletreenode.getpreviousnode": [
        "javax.swing.tree.DefaultMutableTreeNode.getPreviousNode()"
    ],
    "java.awt.pageattributes.setprintqualitytodefault": [
        "java.awt.PageAttributes.setPrintQualityToDefault()"
    ],
    "java.math.bigdecimal.longvalue": [
        "java.math.BigDecimal.longValue()"
    ],
    "java.text.numberformat.getmaximumfractiondigits": [
        "java.text.NumberFormat.getMaximumFractionDigits()"
    ],
    "java.awt.image.indexcolormodel.getalpha": [
        "java.awt.image.IndexColorModel.getAlpha(int)"
    ],
    "javax.swing.timer.addactionlistener": [
        "javax.swing.Timer.addActionListener(java.awt.event.ActionListener)"
    ],
    "javax.swing.sizesequence.getsizes": [
        "javax.swing.SizeSequence.getSizes()"
    ],
    "javax.swing.jcomponent.setpreferredsize": [
        "javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"
    ],
    "javax.swing.listselectionmodel.removelistselectionlistener": [
        "javax.swing.ListSelectionModel.removeListSelectionListener(javax.swing.event.ListSelectionListener)"
    ],
    "javax.swing.plaf.basic.basicprogressbarui.setanimationindex": [
        "javax.swing.plaf.basic.BasicProgressBarUI.setAnimationIndex(int)"
    ],
    "javax.swing.table.abstracttablemodel.findcolumn": [
        "javax.swing.table.AbstractTableModel.findColumn(java.lang.String)"
    ],
    "javax.accessibility.accessiblehyperlink.getaccessibleactionobject": [
        "javax.accessibility.AccessibleHyperlink.getAccessibleActionObject(int)"
    ],
    "javax.management.mbeanoperationinfo.getimpact": [
        "javax.management.MBeanOperationInfo.getImpact()"
    ],
    "org.omg.dynamicany._dynsequencestub.set_elements": [
        "org.omg.DynamicAny._DynSequenceStub.set_elements(org.omg.CORBA.Any[])"
    ],
    "java.io.objectinput.skip": [
        "java.io.ObjectInput.skip(long)"
    ],
    "javax.xml.crypto.dsig.keyinfo.keyinfofactory.newpgpdata": [
        "javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newPGPData(byte[],byte[],java.util.List)",
        "javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newPGPData(byte[],java.util.List)",
        "javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newPGPData(byte[])"
    ],
    "java.util.logging.logmanager.getloggernames": [
        "java.util.logging.LogManager.getLoggerNames()"
    ],
    "org.omg.dynamicany.dynanyoperations.insert_typecode": [
        "org.omg.DynamicAny.DynAnyOperations.insert_typecode(org.omg.CORBA.TypeCode)"
    ],
    "javax.xml.parsers.documentbuilderfactory.isignoringcomments": [
        "javax.xml.parsers.DocumentBuilderFactory.isIgnoringComments()"
    ],
    "java.beans.beancontext.beancontextmembershipevent.toarray": [
        "java.beans.beancontext.BeanContextMembershipEvent.toArray()"
    ],
    "javax.swing.border.titledborder.settitlejustification": [
        "javax.swing.border.TitledBorder.setTitleJustification(int)"
    ],
    "javax.swing.jtextarea.getrowheight": [
        "javax.swing.JTextArea.getRowHeight()"
    ],
    "javax.swing.jwindow.getgraphics": [
        "javax.swing.JWindow.getGraphics()"
    ],
    "javax.tools.javafilemanager.haslocation": [
        "javax.tools.JavaFileManager.hasLocation(javax.tools.JavaFileManager.Location)"
    ],
    "org.omg.dynamicany._dynvaluestub.seek": [
        "org.omg.DynamicAny._DynValueStub.seek(int)"
    ],
    "java.util.stream.collectors.averagingint": [
        "java.util.stream.Collectors.averagingInt(java.util.function.ToIntFunction<? super T>)"
    ],
    "javax.management.relation.relationsupport.getrelationservicename": [
        "javax.management.relation.RelationSupport.getRelationServiceName()"
    ],
    "javax.management.relation.relationservice.setrole": [
        "javax.management.relation.RelationService.setRole(java.lang.String,javax.management.relation.Role)"
    ],
    "javax.swing.jcombobox.ispopupvisible": [
        "javax.swing.JComboBox.isPopupVisible()"
    ],
    "javax.swing.scrollpanelayout.removelayoutcomponent": [
        "javax.swing.ScrollPaneLayout.removeLayoutComponent(java.awt.Component)"
    ],
    "java.lang.annotation.elementtype.values": [
        "java.lang.annotation.ElementType.values()"
    ],
    "java.awt.font.textlayout.hittopoint": [
        "java.awt.font.TextLayout.hitToPoint(java.awt.font.TextHitInfo,java.awt.geom.Point2D)"
    ],
    "java.net.urlconnection.guesscontenttypefromstream": [
        "java.net.URLConnection.guessContentTypeFromStream(java.io.InputStream)"
    ],
    "javax.swing.text.iconview.modeltoview": [
        "javax.swing.text.IconView.modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)"
    ],
    "javax.swing.plaf.basic.basictreeui.createcellrendererpane": [
        "javax.swing.plaf.basic.BasicTreeUI.createCellRendererPane()"
    ],
    "javax.swing.plaf.basic.basiclabelui.getbaseline": [
        "javax.swing.plaf.basic.BasicLabelUI.getBaseline(javax.swing.JComponent,int,int)"
    ],
    "java.awt.component.isshowing": [
        "java.awt.Component.isShowing()"
    ],
    "javax.swing.defaultlistmodel.size": [
        "javax.swing.DefaultListModel.size()"
    ],
    "java.lang.stringbuffer.substring": [
        "java.lang.StringBuffer.substring(int,int)",
        "java.lang.StringBuffer.substring(int)"
    ],
    "java.time.zoneddatetime.getdayofweek": [
        "java.time.ZonedDateTime.getDayOfWeek()"
    ],
    "javax.xml.bind.unmarshaller.setattachmentunmarshaller": [
        "javax.xml.bind.Unmarshaller.setAttachmentUnmarshaller(javax.xml.bind.attachment.AttachmentUnmarshaller)"
    ],
    "javax.imageio.imageio.getusecache": [
        "javax.imageio.ImageIO.getUseCache()"
    ],
    "java.nio.file.attribute.aclentry.type": [
        "java.nio.file.attribute.AclEntry.type()"
    ],
    "java.util.prefs.preferences.putboolean": [
        "java.util.prefs.Preferences.putBoolean(java.lang.String,boolean)"
    ],
    "java.util.prefs.abstractpreferences.absolutepath": [
        "java.util.prefs.AbstractPreferences.absolutePath()"
    ],
    "javax.swing.defaultlistmodel.add": [
        "javax.swing.DefaultListModel.add(int,javax.swing.DefaultListModel)"
    ],
    "javax.sound.midi.midisystem.getsynthesizer": [
        "javax.sound.midi.MidiSystem.getSynthesizer()"
    ],
    "javax.imageio.imagewriter.processwriteaborted": [
        "javax.imageio.ImageWriter.processWriteAborted()"
    ],
    "java.sql.databasemetadata.getmaxcolumnsinselect": [
        "java.sql.DatabaseMetaData.getMaxColumnsInSelect()"
    ],
    "java.nio.charset.charsetdecoder.malformedinputaction": [
        "java.nio.charset.CharsetDecoder.malformedInputAction()"
    ],
    "javax.swing.undo.undoableedit.addedit": [
        "javax.swing.undo.UndoableEdit.addEdit(javax.swing.undo.UndoableEdit)"
    ],
    "java.io.objectoutputstream.writeobject": [
        "java.io.ObjectOutputStream.writeObject(java.lang.Object)"
    ],
    "javax.swing.text.html.htmldocument.getreader": [
        "javax.swing.text.html.HTMLDocument.getReader(int)",
        "javax.swing.text.html.HTMLDocument.getReader(int,int,int,javax.swing.text.html.HTML.Tag)"
    ],
    "java.lang.invoke.serializedlambda.getimplmethodname": [
        "java.lang.invoke.SerializedLambda.getImplMethodName()"
    ],
    "javax.print.attribute.standard.destination.equals": [
        "javax.print.attribute.standard.Destination.equals(java.lang.Object)"
    ],
    "java.util.concurrent.atomic.atomicreferencearray.getandaccumulate": [
        "java.util.concurrent.atomic.AtomicReferenceArray.getAndAccumulate(int,E,java.util.function.BinaryOperator<E>)",
        "java.util.concurrent.atomic.AtomicReferenceArray.getAndAccumulate(int,java.util.concurrent.atomic.AtomicReferenceArray,java.util.function.BinaryOperator<java.util.concurrent.atomic.AtomicReferenceArray>)"
    ],
    "java.text.numberformat.setminimumfractiondigits": [
        "java.text.NumberFormat.setMinimumFractionDigits(int)"
    ],
    "javax.sound.sampled.compoundcontrol.getmembercontrols": [
        "javax.sound.sampled.CompoundControl.getMemberControls()"
    ],
    "java.util.collection.equals": [
        "java.util.Collection.equals(java.lang.Object)"
    ],
    "org.xml.sax.ext.lexicalhandler.enddtd": [
        "org.xml.sax.ext.LexicalHandler.endDTD()"
    ],
    "javax.swing.text.utilities.getbreaklocation": [
        "javax.swing.text.Utilities.getBreakLocation(javax.swing.text.Segment,java.awt.FontMetrics,int,int,javax.swing.text.TabExpander,int)"
    ],
    "java.time.format.formatstyle.values": [
        "java.time.format.FormatStyle.values()"
    ],
    "java.security.spec.rsaprivatecrtkeyspec.getprimeexponentp": [
        "java.security.spec.RSAPrivateCrtKeySpec.getPrimeExponentP()"
    ],
    "java.awt.geom.line2d.getpathiterator": [
        "java.awt.geom.Line2D.getPathIterator(java.awt.geom.AffineTransform)",
        "java.awt.geom.Line2D.getPathIterator(java.awt.geom.AffineTransform,double)"
    ],
    "java.util.concurrent.concurrenthashmap.reducevaluestoint": [
        "java.util.concurrent.ConcurrentHashMap.reduceValuesToInt(long,java.util.function.ToIntFunction<? super java.util.concurrent.ConcurrentHashMap>,int,java.util.function.IntBinaryOperator)",
        "java.util.concurrent.ConcurrentHashMap.reduceValuesToInt(long,java.util.function.ToIntFunction<? super V>,int,java.util.function.IntBinaryOperator)"
    ],
    "javax.swing.jformattedtextfield.abstractformatter.uninstall": [
        "javax.swing.JFormattedTextField.AbstractFormatter.uninstall()"
    ],
    "java.util.concurrent.arrayblockingqueue.put": [
        "java.util.concurrent.ArrayBlockingQueue.put(java.util.concurrent.ArrayBlockingQueue)",
        "java.util.concurrent.ArrayBlockingQueue.put(E)"
    ],
    "javax.swing.jframe.getcontentpane": [
        "javax.swing.JFrame.getContentPane()"
    ],
    "java.net.socket.connect": [
        "java.net.Socket.connect(java.net.SocketAddress)",
        "java.net.Socket.connect(java.net.SocketAddress,int)"
    ],
    "java.security.algorithmparametergeneratorspi.enginegenerateparameters": [
        "java.security.AlgorithmParameterGeneratorSpi.engineGenerateParameters()"
    ],
    "javax.swing.tree.treeselectionmodel.getrowmapper": [
        "javax.swing.tree.TreeSelectionModel.getRowMapper()"
    ],
    "java.time.yearmonth.plus": [
        "java.time.YearMonth.plus(java.time.temporal.TemporalAmount)",
        "java.time.YearMonth.plus(long,java.time.temporal.TemporalUnit)"
    ],
    "org.omg.dynamicany._dynenumstub.insert_string": [
        "org.omg.DynamicAny._DynEnumStub.insert_string(java.lang.String)"
    ],
    "javax.swing.jtabbedpane.indexoftab": [
        "javax.swing.JTabbedPane.indexOfTab(java.lang.String)",
        "javax.swing.JTabbedPane.indexOfTab(javax.swing.Icon)"
    ],
    "javax.management.openmbean.openmbeanoperationinfo.tostring": [
        "javax.management.openmbean.OpenMBeanOperationInfo.toString()"
    ],
    "javax.swing.jtabbedpane.addchangelistener": [
        "javax.swing.JTabbedPane.addChangeListener(javax.swing.event.ChangeListener)"
    ],
    "org.omg.iop.codecfactoryoperations.create_codec": [
        "org.omg.IOP.CodecFactoryOperations.create_codec(org.omg.IOP.Encoding)"
    ],
    "java.lang.double.tostring": [
        "java.lang.Double.toString(double)",
        "java.lang.Double.toString()"
    ],
    "java.time.localdate.plusdays": [
        "java.time.LocalDate.plusDays(long)"
    ],
    "java.awt.textarea.setcolumns": [
        "java.awt.TextArea.setColumns(int)"
    ],
    "org.omg.dynamicany._dynstructstub.get_typecode": [
        "org.omg.DynamicAny._DynStructStub.get_typecode()"
    ],
    "java.rmi.server.rmisocketfactory.getdefaultsocketfactory": [
        "java.rmi.server.RMISocketFactory.getDefaultSocketFactory()"
    ],
    "java.util.prefs.abstractpreferences.childrennames": [
        "java.util.prefs.AbstractPreferences.childrenNames()"
    ],
    "javax.swing.plaf.synth.synthradiobuttonui.getsizingicon": [
        "javax.swing.plaf.synth.SynthRadioButtonUI.getSizingIcon(javax.swing.AbstractButton)"
    ],
    "javax.swing.jpopupmenu.isborderpainted": [
        "javax.swing.JPopupMenu.isBorderPainted()"
    ],
    "org.omg.corba.namedvalue.flags": [
        "org.omg.CORBA.NamedValue.flags()"
    ],
    "java.security.policyspi.engineimplies": [
        "java.security.PolicySpi.engineImplies(java.security.ProtectionDomain,java.security.Permission)"
    ],
    "org.xml.sax.ext.locator2.getencoding": [
        "org.xml.sax.ext.Locator2.getEncoding()"
    ],
    "java.math.biginteger.max": [
        "java.math.BigInteger.max(java.math.BigInteger)"
    ],
    "org.omg.dynamicany._dynunionstub.insert_reference": [
        "org.omg.DynamicAny._DynUnionStub.insert_reference(org.omg.CORBA.Object)"
    ],
    "java.awt.print.paper.getimageabley": [
        "java.awt.print.Paper.getImageableY()"
    ],
    "java.awt.rectangle.tostring": [
        "java.awt.Rectangle.toString()"
    ],
    "java.security.cert.x509crlselector.setdateandtime": [
        "java.security.cert.X509CRLSelector.setDateAndTime(java.util.Date)"
    ],
    "java.lang.character.codepointat": [
        "java.lang.Character.codePointAt(java.lang.CharSequence,int)",
        "java.lang.Character.codePointAt(char[],int)",
        "java.lang.Character.codePointAt(char[],int,int)"
    ],
    "java.net.responsecache.getdefault": [
        "java.net.ResponseCache.getDefault()"
    ],
    "java.sql.resultset.getobject": [
        "java.sql.ResultSet.getObject(java.lang.String)",
        "java.sql.ResultSet.getObject(java.lang.String,java.lang.Class<T>)",
        "java.sql.ResultSet.getObject(int)",
        "java.sql.ResultSet.getObject(int,,java.lang.Class<?>>)",
        "java.sql.ResultSet.getObject(int,java.lang.Class<T>)",
        "java.sql.ResultSet.getObject(java.lang.String,,java.lang.Class<?>>)"
    ],
    "javax.swing.plaf.basic.basiccolorchooserui.uninstallpreviewpanel": [
        "javax.swing.plaf.basic.BasicColorChooserUI.uninstallPreviewPanel()"
    ],
    "java.awt.dnd.draggesturerecognizer.adddraggesturelistener": [
        "java.awt.dnd.DragGestureRecognizer.addDragGestureListener(java.awt.dnd.DragGestureListener)"
    ],
    "java.awt.textfield.getechochar": [
        "java.awt.TextField.getEchoChar()"
    ],
    "javax.management.timer.timer.getdate": [
        "javax.management.timer.Timer.getDate(java.lang.Integer)"
    ],
    "javax.swing.text.flowview.flowstrategy.adjustrow": [
        "javax.swing.text.FlowView.FlowStrategy.adjustRow(javax.swing.text.FlowView,int,int,int)"
    ],
    "javax.management.remote.rmi.rmiconnectorserver.stop": [
        "javax.management.remote.rmi.RMIConnectorServer.stop()"
    ],
    "javax.swing.text.labelview.issuperscript": [
        "javax.swing.text.LabelView.isSuperscript()"
    ],
    "javax.swing.jbutton.updateui": [
        "javax.swing.JButton.updateUI()"
    ],
    "java.nio.intbuffer.wrap": [
        "java.nio.IntBuffer.wrap(int[])",
        "java.nio.IntBuffer.wrap(int[],int,int)"
    ],
    "javax.swing.plaf.multi.multicolorchooserui.installui": [
        "javax.swing.plaf.multi.MultiColorChooserUI.installUI(javax.swing.JComponent)"
    ],
    "java.util.linkedlist.spliterator": [
        "java.util.LinkedList.spliterator()"
    ],
    "javax.xml.transform.transformer.transform": [
        "javax.xml.transform.Transformer.transform(javax.xml.transform.Source,javax.xml.transform.Result)"
    ],
    "java.net.urlclassloader.findresources": [
        "java.net.URLClassLoader.findResources(java.lang.String)"
    ],
    "javax.swing.jtabbedpane.getaccessiblecontext": [
        "javax.swing.JTabbedPane.getAccessibleContext()"
    ],
    "javax.swing.table.tablecolumnmodel.removecolumn": [
        "javax.swing.table.TableColumnModel.removeColumn(javax.swing.table.TableColumn)"
    ],
    "javax.swing.text.jtextcomponent.setselectioncolor": [
        "javax.swing.text.JTextComponent.setSelectionColor(java.awt.Color)"
    ],
    "java.lang.invoke.methodhandle.asfixedarity": [
        "java.lang.invoke.MethodHandle.asFixedArity()"
    ],
    "javax.imageio.imagewriteparam.getcompressionqualitydescriptions": [
        "javax.imageio.ImageWriteParam.getCompressionQualityDescriptions()"
    ],
    "javax.swing.jbutton.isdefaultcapable": [
        "javax.swing.JButton.isDefaultCapable()"
    ],
    "javax.xml.ws.spi.http.httpexchange.gethttpcontext": [
        "javax.xml.ws.spi.http.HttpExchange.getHttpContext()"
    ],
    "java.lang.long.rotateright": [
        "java.lang.Long.rotateRight(long,int)"
    ],
    "javax.swing.jprogressbar.setvalue": [
        "javax.swing.JProgressBar.setValue(int)"
    ],
    "org.omg.dynamicany._dynstructstub.get_dyn_any": [
        "org.omg.DynamicAny._DynStructStub.get_dyn_any()"
    ],
    "org.ietf.jgss.channelbinding.equals": [
        "org.ietf.jgss.ChannelBinding.equals(java.lang.Object)"
    ],
    "java.net.passwordauthentication.getusername": [
        "java.net.PasswordAuthentication.getUserName()"
    ],
    "java.awt.geom.quadcurve2d.getx1": [
        "java.awt.geom.QuadCurve2D.getX1()"
    ],
    "org.xml.sax.contenthandler.ignorablewhitespace": [
        "org.xml.sax.ContentHandler.ignorableWhitespace(char[],int,int)"
    ],
    "javax.crypto.spec.rc2parameterspec.geteffectivekeybits": [
        "javax.crypto.spec.RC2ParameterSpec.getEffectiveKeyBits()"
    ],
    "java.nio.charbuffer.length": [
        "java.nio.CharBuffer.length()"
    ],
    "org.omg.corba.request.send_oneway": [
        "org.omg.CORBA.Request.send_oneway()"
    ],
    "javax.management.relation.relationsupport.getrole": [
        "javax.management.relation.RelationSupport.getRole(java.lang.String)"
    ],
    "javax.management.timer.timer.prederegister": [
        "javax.management.timer.Timer.preDeregister()"
    ],
    "javax.management.timer.timer.removenotifications": [
        "javax.management.timer.Timer.removeNotifications(java.lang.String)"
    ],
    "javax.swing.jscrollbar.paramstring": [
        "javax.swing.JScrollBar.paramString()"
    ],
    "javax.xml.crypto.keyselector.singletonkeyselector": [
        "javax.xml.crypto.KeySelector.singletonKeySelector(java.security.Key)"
    ],
    "javax.management.standardmbean.setimplementation": [
        "javax.management.StandardMBean.setImplementation(java.lang.Object)"
    ],
    "java.lang.securitymanager.checkpropertiesaccess": [
        "java.lang.SecurityManager.checkPropertiesAccess()"
    ],
    "java.awt.checkbox.getaccessiblecontext": [
        "java.awt.Checkbox.getAccessibleContext()"
    ],
    "javax.print.attribute.standard.multipledocumenthandling.getstringtable": [
        "javax.print.attribute.standard.MultipleDocumentHandling.getStringTable()"
    ],
    "org.xml.sax.xmlreader.setfeature": [
        "org.xml.sax.XMLReader.setFeature(java.lang.String,boolean)"
    ],
    "javax.imageio.stream.imageinputstreamimpl.read": [
        "javax.imageio.stream.ImageInputStreamImpl.read(byte[],int,int)",
        "javax.imageio.stream.ImageInputStreamImpl.read()"
    ],
    "javax.imageio.metadata.iiometadatanode.getuserobject": [
        "javax.imageio.metadata.IIOMetadataNode.getUserObject()"
    ],
    "javax.swing.tree.treepath.getpathcomponent": [
        "javax.swing.tree.TreePath.getPathComponent(int)"
    ],
    "java.util.date.gettime": [
        "java.util.Date.getTime()"
    ],
    "java.security.interfaces.dsakey.getparams": [
        "java.security.interfaces.DSAKey.getParams()"
    ],
    "javax.swing.plaf.basic.basictextui.uninstalldefaults": [
        "javax.swing.plaf.basic.BasicTextUI.uninstallDefaults()"
    ],
    "java.awt.image.bufferstrategy.getdrawgraphics": [
        "java.awt.image.BufferStrategy.getDrawGraphics()"
    ],
    "java.beans.propertyeditorsupport.supportscustomeditor": [
        "java.beans.PropertyEditorSupport.supportsCustomEditor()"
    ],
    "javax.swing.text.utilities.getrowstart": [
        "javax.swing.text.Utilities.getRowStart(javax.swing.text.JTextComponent,int)"
    ],
    "java.nio.file.files.createdirectory": [
        "java.nio.file.Files.createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>...)",
        "java.nio.file.Files.createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>)"
    ],
    "java.lang.math.abs": [
        "java.lang.Math.abs(float)",
        "java.lang.Math.abs(double)",
        "java.lang.Math.abs(long)",
        "java.lang.Math.abs(int)"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.getfeature": [
        "org.xml.sax.helpers.XMLFilterImpl.getFeature(java.lang.String)"
    ],
    "java.util.function.longtodoublefunction.applyasdouble": [
        "java.util.function.LongToDoubleFunction.applyAsDouble(long)"
    ],
    "java.awt.component.setcursor": [
        "java.awt.Component.setCursor(java.awt.Cursor)"
    ],
    "javax.swing.swingutilities.computedifference": [
        "javax.swing.SwingUtilities.computeDifference(java.awt.Rectangle,java.awt.Rectangle)"
    ],
    "java.util.stream.longstream.builder.build": [
        "java.util.stream.LongStream.Builder.build()"
    ],
    "org.omg.cosnaming.namingcontextoperations.bind": [
        "org.omg.CosNaming.NamingContextOperations.bind(org.omg.CosNaming.NameComponent[],org.omg.CORBA.Object)"
    ],
    "javax.activation.datahandler.gettransferdataflavors": [
        "javax.activation.DataHandler.getTransferDataFlavors()"
    ],
    "java.security.cert.pkixrevocationchecker.setocspresponses": [
        "java.security.cert.PKIXRevocationChecker.setOcspResponses(,byte[]>)"
    ],
    "javax.swing.table.defaulttablemodel.getcolumncount": [
        "javax.swing.table.DefaultTableModel.getColumnCount()"
    ],
    "java.awt.jobattributes.getcopies": [
        "java.awt.JobAttributes.getCopies()"
    ],
    "javax.naming.reference.hashcode": [
        "javax.naming.Reference.hashCode()"
    ],
    "java.io.linenumberreader.setlinenumber": [
        "java.io.LineNumberReader.setLineNumber(int)"
    ],
    "javax.tools.javacompiler.compilationtask.setlocale": [
        "javax.tools.JavaCompiler.CompilationTask.setLocale(java.util.Locale)"
    ],
    "java.security.cert.pkixcertpathchecker.check": [
        "java.security.cert.PKIXCertPathChecker.check(java.security.cert.Certificate)",
        "java.security.cert.PKIXCertPathChecker.check(java.security.cert.Certificate,java.util.Collection<java.lang.String>)"
    ],
    "javax.print.attribute.standard.datetimeatcompleted.getcategory": [
        "javax.print.attribute.standard.DateTimeAtCompleted.getCategory()"
    ],
    "javax.xml.stream.xmleventwriter.getprefix": [
        "javax.xml.stream.XMLEventWriter.getPrefix(java.lang.String)"
    ],
    "java.awt.geom.cubiccurve2d.double.gety1": [
        "java.awt.geom.CubicCurve2D.Double.getY1()"
    ],
    "javax.xml.soap.soappart.getmimeheader": [
        "javax.xml.soap.SOAPPart.getMimeHeader(java.lang.String)"
    ],
    "javax.xml.bind.helpers.abstractmarshallerimpl.getjavaencoding": [
        "javax.xml.bind.helpers.AbstractMarshallerImpl.getJavaEncoding(java.lang.String)"
    ],
    "org.omg.dynamicany._dynstructstub.get_octet": [
        "org.omg.DynamicAny._DynStructStub.get_octet()"
    ],
    "javax.swing.jspinner.defaulteditor.getbaseline": [
        "javax.swing.JSpinner.DefaultEditor.getBaseline(int,int)"
    ],
    "javax.sound.sampled.lineevent.gettype": [
        "javax.sound.sampled.LineEvent.getType()"
    ],
    "javax.swing.sortingfocustraversalpolicy.getfirstcomponent": [
        "javax.swing.SortingFocusTraversalPolicy.getFirstComponent(java.awt.Container)"
    ],
    "javax.swing.plaf.metal.metaltheme.getmenuforeground": [
        "javax.swing.plaf.metal.MetalTheme.getMenuForeground()"
    ],
    "javax.imageio.iioparam.getdestinationtype": [
        "javax.imageio.IIOParam.getDestinationType()"
    ],
    "java.time.offsetdatetime.getmonth": [
        "java.time.OffsetDateTime.getMonth()"
    ],
    "java.util.concurrent.linkedtransferqueue.put": [
        "java.util.concurrent.LinkedTransferQueue.put(E)",
        "java.util.concurrent.LinkedTransferQueue.put(java.util.concurrent.LinkedTransferQueue)"
    ],
    "javax.swing.text.styleconstants.isitalic": [
        "javax.swing.text.StyleConstants.isItalic(javax.swing.text.AttributeSet)"
    ],
    "java.sql.batchupdateexception.getupdatecounts": [
        "java.sql.BatchUpdateException.getUpdateCounts()"
    ],
    "java.awt.graphicsenvironment.getavailablefontfamilynames": [
        "java.awt.GraphicsEnvironment.getAvailableFontFamilyNames()",
        "java.awt.GraphicsEnvironment.getAvailableFontFamilyNames(java.util.Locale)"
    ],
    "javax.swing.plaf.basic.basictreeui.setcelleditor": [
        "javax.swing.plaf.basic.BasicTreeUI.setCellEditor(javax.swing.tree.TreeCellEditor)"
    ],
    "javax.swing.plaf.basic.basictableui.createfocuslistener": [
        "javax.swing.plaf.basic.BasicTableUI.createFocusListener()"
    ],
    "java.lang.runtime.traceinstructions": [
        "java.lang.Runtime.traceInstructions(boolean)"
    ],
    "java.text.numberformat.getnumberinstance": [
        "java.text.NumberFormat.getNumberInstance()",
        "java.text.NumberFormat.getNumberInstance(java.util.Locale)"
    ],
    "javax.swing.joptionpane.getrootframe": [
        "javax.swing.JOptionPane.getRootFrame()"
    ],
    "java.lang.management.garbagecollectormxbean.getcollectiontime": [
        "java.lang.management.GarbageCollectorMXBean.getCollectionTime()"
    ],
    "java.util.treemap.higherkey": [
        "java.util.TreeMap.higherKey(K)"
    ],
    "java.awt.graphics.drawarc": [
        "java.awt.Graphics.drawArc(int,int,int,int,int,int)"
    ],
    "java.util.navigablemap.submap": [
        "java.util.NavigableMap.subMap(K,boolean,K,boolean)",
        "java.util.NavigableMap.subMap(java.util.NavigableMap,boolean,java.util.NavigableMap,boolean)",
        "java.util.NavigableMap.subMap(java.util.NavigableMap,java.util.NavigableMap)",
        "java.util.NavigableMap.subMap(K,K)"
    ],
    "org.omg.portableinterceptor.serverrequestinfooperations.object_id": [
        "org.omg.PortableInterceptor.ServerRequestInfoOperations.object_id()"
    ],
    "javax.lang.model.type.typevariable.aselement": [
        "javax.lang.model.type.TypeVariable.asElement()"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.toggleopenclose": [
        "javax.swing.plaf.basic.BasicComboBoxUI.toggleOpenClose()"
    ],
    "java.io.filterinputstream.marksupported": [
        "java.io.FilterInputStream.markSupported()"
    ],
    "java.awt.event.invocationevent.paramstring": [
        "java.awt.event.InvocationEvent.paramString()"
    ],
    "javax.swing.text.jtextcomponent.viewtomodel": [
        "javax.swing.text.JTextComponent.viewToModel(java.awt.Point)"
    ],
    "javax.swing.plaf.synth.synthrootpaneui.createui": [
        "javax.swing.plaf.synth.SynthRootPaneUI.createUI(javax.swing.JComponent)"
    ],
    "javax.swing.jtextarea.setfont": [
        "javax.swing.JTextArea.setFont(java.awt.Font)"
    ],
    "org.omg.portableinterceptor.clientrequestinterceptoroperations.receive_other": [
        "org.omg.PortableInterceptor.ClientRequestInterceptorOperations.receive_other(org.omg.PortableInterceptor.ClientRequestInfo)"
    ],
    "javax.rmi.corba.util.writeremoteobject": [
        "javax.rmi.CORBA.Util.writeRemoteObject(org.omg.CORBA.portable.OutputStream,java.lang.Object)"
    ],
    "javax.security.auth.kerberos.keytab.getprincipal": [
        "javax.security.auth.kerberos.KeyTab.getPrincipal()"
    ],
    "javax.swing.event.documentevent.eventtype.tostring": [
        "javax.swing.event.DocumentEvent.EventType.toString()"
    ],
    "javax.net.ssl.sslsessioncontext.getids": [
        "javax.net.ssl.SSLSessionContext.getIds()"
    ],
    "java.util.concurrent.concurrentskiplistmap.replaceall": [
        "java.util.concurrent.ConcurrentSkipListMap.replaceAll(java.util.function.BiFunction<? super,? super,? extends V>)"
    ],
    "java.lang.reflect.method.hashcode": [
        "java.lang.reflect.Method.hashCode()"
    ],
    "java.util.regex.matcher.appendtail": [
        "java.util.regex.Matcher.appendTail(java.lang.StringBuffer)"
    ],
    "javax.xml.crypto.urireferenceexception.printstacktrace": [
        "javax.xml.crypto.URIReferenceException.printStackTrace()"
    ],
    "javax.swing.event.internalframeevent.paramstring": [
        "javax.swing.event.InternalFrameEvent.paramString()"
    ],
    "org.w3c.dom.element.removeattribute": [
        "org.w3c.dom.Element.removeAttribute(java.lang.String)"
    ],
    "java.awt.image.writablerenderedimage.getwritabletileindices": [
        "java.awt.image.WritableRenderedImage.getWritableTileIndices()"
    ],
    "java.security.interfaces.rsamultiprimeprivatecrtkey.getprimep": [
        "java.security.interfaces.RSAMultiPrimePrivateCrtKey.getPrimeP()"
    ],
    "javax.swing.text.element.getname": [
        "javax.swing.text.Element.getName()"
    ],
    "java.util.concurrent.locks.reentrantlock.getowner": [
        "java.util.concurrent.locks.ReentrantLock.getOwner()"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.getqueuedthreads": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.getQueuedThreads()"
    ],
    "java.nio.channels.spi.selectorprovider.openselector": [
        "java.nio.channels.spi.SelectorProvider.openSelector()"
    ],
    "javax.swing.text.boxview.isafter": [
        "javax.swing.text.BoxView.isAfter(int,int,java.awt.Rectangle)"
    ],
    "javax.net.ssl.handshakecompletedevent.getsession": [
        "javax.net.ssl.HandshakeCompletedEvent.getSession()"
    ],
    "javax.swing.plaf.metal.oceantheme.getdesktopcolor": [
        "javax.swing.plaf.metal.OceanTheme.getDesktopColor()"
    ],
    "javax.swing.sizesequence.removeentries": [
        "javax.swing.SizeSequence.removeEntries(int,int)"
    ],
    "javax.swing.plaf.synth.synthmenuui.uninstallui": [
        "javax.swing.plaf.synth.SynthMenuUI.uninstallUI(javax.swing.JComponent)"
    ],
    "javax.swing.jmenubar.getaccessiblecontext": [
        "javax.swing.JMenuBar.getAccessibleContext()"
    ],
    "javax.imageio.spi.imagewriterspi.createwriterinstance": [
        "javax.imageio.spi.ImageWriterSpi.createWriterInstance()",
        "javax.imageio.spi.ImageWriterSpi.createWriterInstance(java.lang.Object)"
    ],
    "javax.swing.tree.abstractlayoutcache.setnodedimensions": [
        "javax.swing.tree.AbstractLayoutCache.setNodeDimensions(javax.swing.tree.AbstractLayoutCache.NodeDimensions)"
    ],
    "javax.imageio.plugins.jpeg.jpegqtable.tostring": [
        "javax.imageio.plugins.jpeg.JPEGQTable.toString()"
    ],
    "java.util.prefs.abstractpreferences.removenode": [
        "java.util.prefs.AbstractPreferences.removeNode()"
    ],
    "javax.sound.midi.midifileformat.gettype": [
        "javax.sound.midi.MidiFileFormat.getType()"
    ],
    "java.awt.datatransfer.systemflavormap.getnativesforflavor": [
        "java.awt.datatransfer.SystemFlavorMap.getNativesForFlavor(java.awt.datatransfer.DataFlavor)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getdescription": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getDescription()"
    ],
    "javax.swing.plaf.multi.multilabelui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiLabelUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "javax.sql.rowset.serial.serialclob.getsubstring": [
        "javax.sql.rowset.serial.SerialClob.getSubString(long,int)"
    ],
    "javax.management.loading.mlet.findlibrary": [
        "javax.management.loading.MLet.findLibrary(java.lang.String)"
    ],
    "java.lang.management.threadmxbean.getdaemonthreadcount": [
        "java.lang.management.ThreadMXBean.getDaemonThreadCount()"
    ],
    "org.omg.portableinterceptor.orbinitinfooperations.add_client_request_interceptor": [
        "org.omg.PortableInterceptor.ORBInitInfoOperations.add_client_request_interceptor(org.omg.PortableInterceptor.ClientRequestInterceptor)"
    ],
    "javax.activation.urldatasource.getname": [
        "javax.activation.URLDataSource.getName()"
    ],
    "javax.imageio.imagewriter.writetosequence": [
        "javax.imageio.ImageWriter.writeToSequence(javax.imageio.IIOImage,javax.imageio.ImageWriteParam)"
    ],
    "java.time.zone.zoneoffsettransition.equals": [
        "java.time.zone.ZoneOffsetTransition.equals(java.lang.Object)"
    ],
    "javax.swing.jtoolbar.separator.getuiclassid": [
        "javax.swing.JToolBar.Separator.getUIClassID()"
    ],
    "java.beans.beancontext.beancontextsupport.addbeancontextmembershiplistener": [
        "java.beans.beancontext.BeanContextSupport.addBeanContextMembershipListener(java.beans.beancontext.BeanContextMembershipListener)"
    ],
    "javax.swing.jradiobuttonmenuitem.getuiclassid": [
        "javax.swing.JRadioButtonMenuItem.getUIClassID()"
    ],
    "javax.swing.event.hyperlinkevent.getdescription": [
        "javax.swing.event.HyperlinkEvent.getDescription()"
    ],
    "java.awt.keyboardfocusmanager.getkeyeventpostprocessors": [
        "java.awt.KeyboardFocusManager.getKeyEventPostProcessors()"
    ],
    "javax.swing.tree.abstractlayoutcache.getselectionmodel": [
        "javax.swing.tree.AbstractLayoutCache.getSelectionModel()"
    ],
    "javax.swing.plaf.synth.synthtoolbarui.createlayout": [
        "javax.swing.plaf.synth.SynthToolBarUI.createLayout()"
    ],
    "javax.swing.plaf.multi.multisliderui.installui": [
        "javax.swing.plaf.multi.MultiSliderUI.installUI(javax.swing.JComponent)"
    ],
    "java.net.proxyselector.getdefault": [
        "java.net.ProxySelector.getDefault()"
    ],
    "java.sql.statement.close": [
        "java.sql.Statement.close()"
    ],
    "java.io.pushbackinputstream.close": [
        "java.io.PushbackInputStream.close()"
    ],
    "javax.swing.text.abstractwriter.decrindent": [
        "javax.swing.text.AbstractWriter.decrIndent()"
    ],
    "java.util.formatter.tostring": [
        "java.util.Formatter.toString()"
    ],
    "javax.xml.bind.helpers.abstractmarshallerimpl.getproperty": [
        "javax.xml.bind.helpers.AbstractMarshallerImpl.getProperty(java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthscrollpaneui.paint": [
        "javax.swing.plaf.synth.SynthScrollPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)",
        "javax.swing.plaf.synth.SynthScrollPaneUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)"
    ],
    "javax.xml.crypto.dsig.spec.xpathfilterparameterspec.getnamespacemap": [
        "javax.xml.crypto.dsig.spec.XPathFilterParameterSpec.getNamespaceMap()"
    ],
    "javax.print.attribute.standard.severity.getstringtable": [
        "javax.print.attribute.standard.Severity.getStringTable()"
    ],
    "java.awt.keyboardfocusmanager.addpropertychangelistener": [
        "java.awt.KeyboardFocusManager.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",
        "java.awt.KeyboardFocusManager.addPropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "javax.security.auth.subject.setreadonly": [
        "javax.security.auth.Subject.setReadOnly()"
    ],
    "javax.swing.defaultrowsorter.getmodelwrapper": [
        "javax.swing.DefaultRowSorter.getModelWrapper()"
    ],
    "java.awt.datatransfer.clipboard.getcontents": [
        "java.awt.datatransfer.Clipboard.getContents(java.lang.Object)"
    ],
    "java.io.dataoutput.writebyte": [
        "java.io.DataOutput.writeByte(int)"
    ],
    "java.util.concurrent.atomic.doubleaccumulator.reset": [
        "java.util.concurrent.atomic.DoubleAccumulator.reset()"
    ],
    "java.nio.channels.filechannel.force": [
        "java.nio.channels.FileChannel.force(boolean)"
    ],
    "java.lang.threadgroup.checkaccess": [
        "java.lang.ThreadGroup.checkAccess()"
    ],
    "java.io.inputstream.close": [
        "java.io.InputStream.close()"
    ],
    "java.net.serversocket.getlocalsocketaddress": [
        "java.net.ServerSocket.getLocalSocketAddress()"
    ],
    "javax.xml.parsers.saxparserfactory.setxincludeaware": [
        "javax.xml.parsers.SAXParserFactory.setXIncludeAware(boolean)"
    ],
    "javax.lang.model.util.simpleannotationvaluevisitor6.visitint": [
        "javax.lang.model.util.SimpleAnnotationValueVisitor6.visitInt(int,javax.lang.model.util.SimpleAnnotationValueVisitor6)"
    ],
    "javax.accessibility.accessibletablemodelchange.getlastrow": [
        "javax.accessibility.AccessibleTableModelChange.getLastRow()"
    ],
    "java.awt.toolkit.mapinputmethodhighlight": [
        "java.awt.Toolkit.mapInputMethodHighlight(java.awt.im.InputMethodHighlight)"
    ],
    "javax.sound.midi.sequencer.setloopstartpoint": [
        "javax.sound.midi.Sequencer.setLoopStartPoint(long)"
    ],
    "javax.swing.table.defaulttablecolumnmodel.valuechanged": [
        "javax.swing.table.DefaultTableColumnModel.valueChanged(javax.swing.event.ListSelectionEvent)"
    ],
    "javax.sound.sampled.audiofileformat.gettype": [
        "javax.sound.sampled.AudioFileFormat.getType()"
    ],
    "java.text.decimalformat.setparsebigdecimal": [
        "java.text.DecimalFormat.setParseBigDecimal(boolean)"
    ],
    "javax.swing.jtree.setselectionpaths": [
        "javax.swing.JTree.setSelectionPaths(javax.swing.tree.TreePath[])"
    ],
    "java.beans.propertyeditor.getcustomeditor": [
        "java.beans.PropertyEditor.getCustomEditor()"
    ],
    "org.omg.corba.request.exceptions": [
        "org.omg.CORBA.Request.exceptions()"
    ],
    "java.sql.sqloutput.writeint": [
        "java.sql.SQLOutput.writeInt(int)"
    ],
    "java.awt.trayicon.removemousemotionlistener": [
        "java.awt.TrayIcon.removeMouseMotionListener(java.awt.event.MouseMotionListener)"
    ],
    "javax.swing.plaf.basic.basicscrollbarui.setthumbbounds": [
        "javax.swing.plaf.basic.BasicScrollBarUI.setThumbBounds(int,int,int,int)"
    ],
    "java.lang.management.threadinfo.getlockedmonitors": [
        "java.lang.management.ThreadInfo.getLockedMonitors()"
    ],
    "java.io.linenumberreader.mark": [
        "java.io.LineNumberReader.mark(int)"
    ],
    "javax.swing.plaf.multi.multicolorchooserui.getminimumsize": [
        "javax.swing.plaf.multi.MultiColorChooserUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.synth.synthtoolbarui.paintborder": [
        "javax.swing.plaf.synth.SynthToolBarUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.plaf.multi.multibuttonui.createui": [
        "javax.swing.plaf.multi.MultiButtonUI.createUI(javax.swing.JComponent)"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.enddocument": [
        "org.xml.sax.helpers.XMLFilterImpl.endDocument()"
    ],
    "javax.imageio.stream.imageinputstream.getflushedposition": [
        "javax.imageio.stream.ImageInputStream.getFlushedPosition()"
    ],
    "javax.swing.action.removepropertychangelistener": [
        "javax.swing.Action.removePropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "java.nio.channels.networkchannel.getlocaladdress": [
        "java.nio.channels.NetworkChannel.getLocalAddress()"
    ],
    "java.lang.math.multiplyexact": [
        "java.lang.Math.multiplyExact(long,long)",
        "java.lang.Math.multiplyExact(int,int)"
    ],
    "java.util.concurrent.concurrentskiplistmap.higherentry": [
        "java.util.concurrent.ConcurrentSkipListMap.higherEntry(java.util.concurrent.ConcurrentSkipListMap)",
        "java.util.concurrent.ConcurrentSkipListMap.higherEntry(K)"
    ],
    "javax.swing.inputmap.getparent": [
        "javax.swing.InputMap.getParent()"
    ],
    "javax.swing.plaf.metal.metaltheme.getsecondary2": [
        "javax.swing.plaf.metal.MetalTheme.getSecondary2()"
    ],
    "javax.swing.plaf.multi.multispinnerui.createui": [
        "javax.swing.plaf.multi.MultiSpinnerUI.createUI(javax.swing.JComponent)"
    ],
    "java.awt.splashscreen.getsplashscreen": [
        "java.awt.SplashScreen.getSplashScreen()"
    ],
    "javax.swing.progressmonitor.getmaximum": [
        "javax.swing.ProgressMonitor.getMaximum()"
    ],
    "javax.swing.tree.defaulttreecellrenderer.settextselectioncolor": [
        "javax.swing.tree.DefaultTreeCellRenderer.setTextSelectionColor(java.awt.Color)"
    ],
    "java.util.prefs.preferences.systemroot": [
        "java.util.prefs.Preferences.systemRoot()"
    ],
    "javax.swing.jtable.getselectedcolumn": [
        "javax.swing.JTable.getSelectedColumn()"
    ],
    "java.lang.threadlocal.withinitial": [
        "java.lang.ThreadLocal.withInitial(java.util.function.Supplier<? extends S>)"
    ],
    "javax.sound.sampled.audiosystem.write": [
        "javax.sound.sampled.AudioSystem.write(javax.sound.sampled.AudioInputStream,javax.sound.sampled.AudioFileFormat.Type,java.io.OutputStream)",
        "javax.sound.sampled.AudioSystem.write(javax.sound.sampled.AudioInputStream,javax.sound.sampled.AudioFileFormat.Type,java.io.File)"
    ],
    "java.net.uri.tourl": [
        "java.net.URI.toURL()"
    ],
    "javax.swing.sizerequirements.gettiledsizerequirements": [
        "javax.swing.SizeRequirements.getTiledSizeRequirements(javax.swing.SizeRequirements[])"
    ],
    "javax.swing.jcombobox.getpopupmenulisteners": [
        "javax.swing.JComboBox.getPopupMenuListeners()"
    ],
    "java.security.cert.x509crlentry.getserialnumber": [
        "java.security.cert.X509CRLEntry.getSerialNumber()"
    ],
    "javax.security.auth.refreshable.refresh": [
        "javax.security.auth.Refreshable.refresh()"
    ],
    "javax.swing.plaf.multi.multitabbedpaneui.update": [
        "javax.swing.plaf.multi.MultiTabbedPaneUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.print.printservice.addprintserviceattributelistener": [
        "javax.print.PrintService.addPrintServiceAttributeListener(javax.print.event.PrintServiceAttributeListener)"
    ],
    "java.util.prefs.abstractpreferences.isusernode": [
        "java.util.prefs.AbstractPreferences.isUserNode()"
    ],
    "javax.swing.text.glyphview.glyphpainter.modeltoview": [
        "javax.swing.text.GlyphView.GlyphPainter.modelToView(javax.swing.text.GlyphView,int,javax.swing.text.Position.Bias,java.awt.Shape)"
    ],
    "javax.swing.jinternalframe.seticonifiable": [
        "javax.swing.JInternalFrame.setIconifiable(boolean)"
    ],
    "java.awt.graphics2d.rotate": [
        "java.awt.Graphics2D.rotate(double,double,double)",
        "java.awt.Graphics2D.rotate(double)"
    ],
    "javax.swing.text.html.htmldocument.insertupdate": [
        "javax.swing.text.html.HTMLDocument.insertUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent,javax.swing.text.AttributeSet)"
    ],
    "java.security.keystore.getinstance": [
        "java.security.KeyStore.getInstance(java.lang.String,java.security.Provider)",
        "java.security.KeyStore.getInstance(java.lang.String)",
        "java.security.KeyStore.getInstance(java.lang.String,java.lang.String)"
    ],
    "java.sql.blob.setbinarystream": [
        "java.sql.Blob.setBinaryStream(long)"
    ],
    "javax.swing.plaf.basic.basicinternalframeui.closeframe": [
        "javax.swing.plaf.basic.BasicInternalFrameUI.closeFrame(javax.swing.JInternalFrame)"
    ],
    "javax.swing.jtree.updateui": [
        "javax.swing.JTree.updateUI()"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.getqueuedwriterthreads": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.getQueuedWriterThreads()"
    ],
    "javax.management.mbeanexception.gettargetexception": [
        "javax.management.MBeanException.getTargetException()"
    ],
    "javax.swing.japplet.setrootpanecheckingenabled": [
        "javax.swing.JApplet.setRootPaneCheckingEnabled(boolean)"
    ],
    "javax.swing.japplet.getgraphics": [
        "javax.swing.JApplet.getGraphics()"
    ],
    "javax.swing.plaf.metal.defaultmetaltheme.getmenutextfont": [
        "javax.swing.plaf.metal.DefaultMetalTheme.getMenuTextFont()"
    ],
    "javax.swing.plaf.synth.synthlookandfeel.shouldupdatestyleonevent": [
        "javax.swing.plaf.synth.SynthLookAndFeel.shouldUpdateStyleOnEvent(java.beans.PropertyChangeEvent)"
    ],
    "java.awt.menucomponent.paramstring": [
        "java.awt.MenuComponent.paramString()"
    ],
    "java.awt.image.bufferedimage.getsamplemodel": [
        "java.awt.image.BufferedImage.getSampleModel()"
    ],
    "java.nio.channels.socketchannel.connect": [
        "java.nio.channels.SocketChannel.connect(java.net.SocketAddress)"
    ],
    "java.util.locale.getscript": [
        "java.util.Locale.getScript()"
    ],
    "javax.print.simpledoc.getstreamforbytes": [
        "javax.print.SimpleDoc.getStreamForBytes()"
    ],
    "java.util.stream.longstream.anymatch": [
        "java.util.stream.LongStream.anyMatch(java.util.function.LongPredicate)"
    ],
    "java.awt.color.colorspace.gettype": [
        "java.awt.color.ColorSpace.getType()"
    ],
    "javax.rmi.corba.util.writeabstractobject": [
        "javax.rmi.CORBA.Util.writeAbstractObject(org.omg.CORBA.portable.OutputStream,java.lang.Object)"
    ],
    "java.net.datagramsocket.getbroadcast": [
        "java.net.DatagramSocket.getBroadcast()"
    ],
    "javax.swing.jrootpane.paramstring": [
        "javax.swing.JRootPane.paramString()"
    ],
    "java.security.cert.pkixreason.valueof": [
        "java.security.cert.PKIXReason.valueOf(java.lang.String)"
    ],
    "java.sql.date.toinstant": [
        "java.sql.Date.toInstant()"
    ],
    "javax.print.attribute.size2dsyntax.getx": [
        "javax.print.attribute.Size2DSyntax.getX(int)"
    ],
    "javax.swing.plaf.synth.synthdesktoppaneui.paint": [
        "javax.swing.plaf.synth.SynthDesktopPaneUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",
        "javax.swing.plaf.synth.SynthDesktopPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.awt.image.bufferedimagefilter.setdimensions": [
        "java.awt.image.BufferedImageFilter.setDimensions(int,int)"
    ],
    "javax.print.attribute.hashattributeset.size": [
        "javax.print.attribute.HashAttributeSet.size()"
    ],
    "javax.swing.abstractbutton.addchangelistener": [
        "javax.swing.AbstractButton.addChangeListener(javax.swing.event.ChangeListener)"
    ],
    "javax.swing.border.etchedborder.paintborder": [
        "javax.swing.border.EtchedBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.text.internationalformatter.getfields": [
        "javax.swing.text.InternationalFormatter.getFields(int)"
    ],
    "java.util.concurrent.delayqueue.offer": [
        "java.util.concurrent.DelayQueue.offer(E)",
        "java.util.concurrent.DelayQueue.offer(E,long,java.util.concurrent.TimeUnit)",
        "java.util.concurrent.DelayQueue.offer(java.util.concurrent.DelayQueue)",
        "java.util.concurrent.DelayQueue.offer(java.util.concurrent.DelayQueue,long,java.util.concurrent.TimeUnit)"
    ],
    "org.omg.dynamicany._dynsequencestub.get_elements_as_dyn_any": [
        "org.omg.DynamicAny._DynSequenceStub.get_elements_as_dyn_any()"
    ],
    "javax.naming.ldap.extendedresponse.getid": [
        "javax.naming.ldap.ExtendedResponse.getID()"
    ],
    "javax.swing.text.defaultstyleddocument.removedocumentlistener": [
        "javax.swing.text.DefaultStyledDocument.removeDocumentListener(javax.swing.event.DocumentListener)"
    ],
    "javax.management.remote.rmi.rmijrmpserverimpl.makeclient": [
        "javax.management.remote.rmi.RMIJRMPServerImpl.makeClient(java.lang.String,javax.security.auth.Subject)"
    ],
    "java.security.keystore.privatekeyentry.getattributes": [
        "java.security.KeyStore.PrivateKeyEntry.getAttributes()"
    ],
    "java.rmi.activation.activatable.unexportobject": [
        "java.rmi.activation.Activatable.unexportObject(java.rmi.Remote,boolean)"
    ],
    "javax.management.mbeanserverconnection.unregistermbean": [
        "javax.management.MBeanServerConnection.unregisterMBean(javax.management.ObjectName)"
    ],
    "java.awt.dnd.droptargetdropevent.dropcomplete": [
        "java.awt.dnd.DropTargetDropEvent.dropComplete(boolean)"
    ],
    "java.text.spi.dateformatprovider.gettimeinstance": [
        "java.text.spi.DateFormatProvider.getTimeInstance(int,java.util.Locale)"
    ],
    "javax.swing.plaf.synth.synthsplitpaneui.paint": [
        "javax.swing.plaf.synth.SynthSplitPaneUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",
        "javax.swing.plaf.synth.SynthSplitPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.awt.graphics.getcolor": [
        "java.awt.Graphics.getColor()"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writearray": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeArray(java.sql.Array)"
    ],
    "java.util.simpletimezone.getrawoffset": [
        "java.util.SimpleTimeZone.getRawOffset()"
    ],
    "javax.swing.plaf.metal.metaltheme.getacceleratorselectedforeground": [
        "javax.swing.plaf.metal.MetalTheme.getAcceleratorSelectedForeground()"
    ],
    "org.omg.corba.datainputstream.read_string": [
        "org.omg.CORBA.DataInputStream.read_string()"
    ],
    "javax.swing.jrootpane.updateui": [
        "javax.swing.JRootPane.updateUI()"
    ],
    "java.util.concurrent.locks.reentrantlock.islocked": [
        "java.util.concurrent.locks.ReentrantLock.isLocked()"
    ],
    "org.omg.portableserver.poaoperations.create_reference_with_id": [
        "org.omg.PortableServer.POAOperations.create_reference_with_id(byte[],java.lang.String)"
    ],
    "java.util.concurrent.concurrentskiplistset.remove": [
        "java.util.concurrent.ConcurrentSkipListSet.remove(java.lang.Object)"
    ],
    "javax.swing.jdesktoppane.setcomponentzorder": [
        "javax.swing.JDesktopPane.setComponentZOrder(java.awt.Component,int)"
    ],
    "java.util.zip.zipoutputstream.closeentry": [
        "java.util.zip.ZipOutputStream.closeEntry()"
    ],
    "javax.xml.ws.spi.servicedelegate.addport": [
        "javax.xml.ws.spi.ServiceDelegate.addPort(javax.xml.namespace.QName,java.lang.String,java.lang.String)"
    ],
    "javax.print.attribute.standard.datetimeatprocessing.getname": [
        "javax.print.attribute.standard.DateTimeAtProcessing.getName()"
    ],
    "java.io.pushbackinputstream.unread": [
        "java.io.PushbackInputStream.unread(byte[])",
        "java.io.PushbackInputStream.unread(int)",
        "java.io.PushbackInputStream.unread(byte[],int,int)"
    ],
    "java.awt.geom.roundrectangle2d.hashcode": [
        "java.awt.geom.RoundRectangle2D.hashCode()"
    ],
    "java.sql.sqlinput.readurl": [
        "java.sql.SQLInput.readURL()"
    ],
    "javax.swing.jslider.setmaximum": [
        "javax.swing.JSlider.setMaximum(int)"
    ],
    "org.ietf.jgss.messageprop.isunseqtoken": [
        "org.ietf.jgss.MessageProp.isUnseqToken()"
    ],
    "javax.sql.rowset.spi.syncfactory.unregisterprovider": [
        "javax.sql.rowset.spi.SyncFactory.unregisterProvider(java.lang.String)"
    ],
    "java.awt.renderinghints.remove": [
        "java.awt.RenderingHints.remove(java.lang.Object)"
    ],
    "javax.print.attribute.enumsyntax.clone": [
        "javax.print.attribute.EnumSyntax.clone()"
    ],
    "javax.swing.jtable.setselectionmodel": [
        "javax.swing.JTable.setSelectionModel(javax.swing.ListSelectionModel)"
    ],
    "java.util.stream.stream.filter": [
        "java.util.stream.Stream.filter(java.util.function.Predicate<? super java.util.stream.Stream>)",
        "java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)"
    ],
    "java.util.primitiveiterator.ofint.next": [
        "java.util.PrimitiveIterator.OfInt.next()"
    ],
    "java.security.messagedigest.getalgorithm": [
        "java.security.MessageDigest.getAlgorithm()"
    ],
    "javax.swing.text.html.htmlwriter.starttag": [
        "javax.swing.text.html.HTMLWriter.startTag(javax.swing.text.Element)"
    ],
    "java.lang.character.getdirectionality": [
        "java.lang.Character.getDirectionality(char)"
    ],
    "javax.swing.plaf.basic.basictableui.getbaseline": [
        "javax.swing.plaf.basic.BasicTableUI.getBaseline(javax.swing.JComponent,int,int)"
    ],
    "java.lang.float.compareto": [
        "java.lang.Float.compareTo(java.lang.Float)"
    ],
    "java.util.map.entry.comparingbykey": [
        "java.util.Map.Entry.comparingByKey(java.util.Comparator<? super K>)",
        "java.util.Map.Entry.comparingByKey()"
    ],
    "javax.swing.text.view.isvisible": [
        "javax.swing.text.View.isVisible()"
    ],
    "java.nio.channels.selectablechannel.register": [
        "java.nio.channels.SelectableChannel.register(java.nio.channels.Selector,int)",
        "java.nio.channels.SelectableChannel.register(java.nio.channels.Selector,int,java.lang.Object)"
    ],
    "java.util.gregoriancalendar.getcalendartype": [
        "java.util.GregorianCalendar.getCalendarType()"
    ],
    "java.awt.toolkit.getsystemeventqueue": [
        "java.awt.Toolkit.getSystemEventQueue()"
    ],
    "java.net.urlclassloader.geturls": [
        "java.net.URLClassLoader.getURLs()"
    ],
    "java.util.vector.add": [
        "java.util.Vector.add(int,java.util.Vector)",
        "java.util.Vector.add(E)",
        "java.util.Vector.add(int,E)",
        "java.util.Vector.add(java.util.Vector)"
    ],
    "java.time.duration.ofmillis": [
        "java.time.Duration.ofMillis(long)"
    ],
    "java.awt.geom.rectangle2d.double.tostring": [
        "java.awt.geom.Rectangle2D.Double.toString()"
    ],
    "javax.management.timer.timermbean.start": [
        "javax.management.timer.TimerMBean.start()"
    ],
    "javax.swing.plaf.basic.basicinternalframeui.minimizeframe": [
        "javax.swing.plaf.basic.BasicInternalFrameUI.minimizeFrame(javax.swing.JInternalFrame)"
    ],
    "java.awt.list.getitems": [
        "java.awt.List.getItems()"
    ],
    "java.sql.sqlxml.free": [
        "java.sql.SQLXML.free()"
    ],
    "javax.management.dynamicmbean.setattribute": [
        "javax.management.DynamicMBean.setAttribute(javax.management.Attribute)"
    ],
    "javax.xml.stream.xmlstreamreader.getattributename": [
        "javax.xml.stream.XMLStreamReader.getAttributeName(int)"
    ],
    "javax.management.remote.rmi.rmiconnection.getmbeaninfo": [
        "javax.management.remote.rmi.RMIConnection.getMBeanInfo(javax.management.ObjectName,javax.security.auth.Subject)"
    ],
    "javax.swing.jlayeredpane.getcomponentsinlayer": [
        "javax.swing.JLayeredPane.getComponentsInLayer(int)"
    ],
    "java.awt.textarea.addnotify": [
        "java.awt.TextArea.addNotify()"
    ],
    "java.text.decimalformat.getpositivesuffix": [
        "java.text.DecimalFormat.getPositiveSuffix()"
    ],
    "org.omg.portableserver.poaoperations.create_servant_retention_policy": [
        "org.omg.PortableServer.POAOperations.create_servant_retention_policy(org.omg.PortableServer.ServantRetentionPolicyValue)"
    ],
    "java.awt.choice.getlisteners": [
        "java.awt.Choice.getListeners(java.lang.Class<T>)"
    ],
    "javax.swing.sortingfocustraversalpolicy.getcomponentbefore": [
        "javax.swing.SortingFocusTraversalPolicy.getComponentBefore(java.awt.Container,java.awt.Component)"
    ],
    "java.util.hashtable.put": [
        "java.util.Hashtable.put(K,V)",
        "java.util.Hashtable.put(java.util.Hashtable,java.util.Hashtable)"
    ],
    "java.awt.image.renderedimage.getpropertynames": [
        "java.awt.image.RenderedImage.getPropertyNames()"
    ],
    "javax.sql.rowset.spi.syncprovider.getrowsetreader": [
        "javax.sql.rowset.spi.SyncProvider.getRowSetReader()"
    ],
    "javax.crypto.keyagreementspi.enginedophase": [
        "javax.crypto.KeyAgreementSpi.engineDoPhase(java.security.Key,boolean)"
    ],
    "javax.print.uriexception.getreason": [
        "javax.print.URIException.getReason()"
    ],
    "org.w3c.dom.domerror.gettype": [
        "org.w3c.dom.DOMError.getType()"
    ],
    "javax.management.timer.timermbean.removenotification": [
        "javax.management.timer.TimerMBean.removeNotification(java.lang.Integer)"
    ],
    "javax.swing.tree.fixedheightlayoutcache.invalidatesizes": [
        "javax.swing.tree.FixedHeightLayoutCache.invalidateSizes()"
    ],
    "java.awt.image.kernel.getheight": [
        "java.awt.image.Kernel.getHeight()"
    ],
    "javax.net.ssl.trustmanagerfactory.getinstance": [
        "javax.net.ssl.TrustManagerFactory.getInstance(java.lang.String,java.lang.String)",
        "javax.net.ssl.TrustManagerFactory.getInstance(java.lang.String,java.security.Provider)",
        "javax.net.ssl.TrustManagerFactory.getInstance(java.lang.String)"
    ],
    "java.security.cert.pkixparameters.isanypolicyinhibited": [
        "java.security.cert.PKIXParameters.isAnyPolicyInhibited()"
    ],
    "javax.swing.jinternalframe.addimpl": [
        "javax.swing.JInternalFrame.addImpl(java.awt.Component,java.lang.Object,int)"
    ],
    "java.math.biginteger.signum": [
        "java.math.BigInteger.signum()"
    ],
    "javax.swing.plaf.basic.basictoolbarui.installnormalborders": [
        "javax.swing.plaf.basic.BasicToolBarUI.installNormalBorders(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.basic.basictreeui.createpropertychangelistener": [
        "javax.swing.plaf.basic.BasicTreeUI.createPropertyChangeListener()"
    ],
    "javax.xml.bind.jaxbcontext.createmarshaller": [
        "javax.xml.bind.JAXBContext.createMarshaller()"
    ],
    "java.util.logging.logrecord.setsequencenumber": [
        "java.util.logging.LogRecord.setSequenceNumber(long)"
    ],
    "javax.swing.plaf.multi.multicomboboxui.contains": [
        "javax.swing.plaf.multi.MultiComboBoxUI.contains(javax.swing.JComponent,int,int)"
    ],
    "java.awt.color.getblue": [
        "java.awt.Color.getBlue()"
    ],
    "java.util.concurrent.delayqueue.poll": [
        "java.util.concurrent.DelayQueue.poll()",
        "java.util.concurrent.DelayQueue.poll(long,java.util.concurrent.TimeUnit)"
    ],
    "javax.activation.datahandler.setdatacontenthandlerfactory": [
        "javax.activation.DataHandler.setDataContentHandlerFactory(javax.activation.DataContentHandlerFactory)"
    ],
    "javax.rmi.corba.tie.orb": [
        "javax.rmi.CORBA.Tie.orb(org.omg.CORBA.ORB)",
        "javax.rmi.CORBA.Tie.orb()"
    ],
    "java.sql.databasemetadata.getsupertables": [
        "java.sql.DatabaseMetaData.getSuperTables(java.lang.String,java.lang.String,java.lang.String)"
    ],
    "java.awt.awtkeystroke.getkeycode": [
        "java.awt.AWTKeyStroke.getKeyCode()"
    ],
    "javax.swing.text.jtextcomponent.getdropmode": [
        "javax.swing.text.JTextComponent.getDropMode()"
    ],
    "javax.xml.ws.handler.soap.soapmessagecontext.getmessage": [
        "javax.xml.ws.handler.soap.SOAPMessageContext.getMessage()"
    ],
    "javax.swing.jinternalframe.setclosed": [
        "javax.swing.JInternalFrame.setClosed(boolean)"
    ],
    "javax.naming.linkexception.tostring": [
        "javax.naming.LinkException.toString(boolean)",
        "javax.naming.LinkException.toString()"
    ],
    "java.text.decimalformat.setminimumfractiondigits": [
        "java.text.DecimalFormat.setMinimumFractionDigits(int)"
    ],
    "java.lang.string.subsequence": [
        "java.lang.String.subSequence(int,int)"
    ],
    "javax.management.notification.setsource": [
        "javax.management.Notification.setSource(java.lang.Object)"
    ],
    "java.applet.applet.getappletinfo": [
        "java.applet.Applet.getAppletInfo()"
    ],
    "java.time.year.atday": [
        "java.time.Year.atDay(int)"
    ],
    "javax.xml.crypto.dom.domcryptocontext.setproperty": [
        "javax.xml.crypto.dom.DOMCryptoContext.setProperty(java.lang.String,java.lang.Object)"
    ],
    "java.awt.geom.arc2d.float.setangleextent": [
        "java.awt.geom.Arc2D.Float.setAngleExtent(double)"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.processinginstruction": [
        "org.xml.sax.helpers.XMLFilterImpl.processingInstruction(java.lang.String,java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintinternalframeborder": [
        "javax.swing.plaf.synth.SynthPainter.paintInternalFrameBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.net.serversocket.tostring": [
        "java.net.ServerSocket.toString()"
    ],
    "java.sql.callablestatement.getlong": [
        "java.sql.CallableStatement.getLong(java.lang.String)",
        "java.sql.CallableStatement.getLong(int)"
    ],
    "javax.swing.jscrollbar.getuiclassid": [
        "javax.swing.JScrollBar.getUIClassID()"
    ],
    "javax.sql.rowset.setrowid": [
        "javax.sql.RowSet.setRowId(int,java.sql.RowId)",
        "javax.sql.RowSet.setRowId(java.lang.String,java.sql.RowId)"
    ],
    "javax.accessibility.accessibleselection.getaccessibleselectioncount": [
        "javax.accessibility.AccessibleSelection.getAccessibleSelectionCount()"
    ],
    "java.util.concurrent.atomic.atomiclongarray.getandupdate": [
        "java.util.concurrent.atomic.AtomicLongArray.getAndUpdate(int,java.util.function.LongUnaryOperator)"
    ],
    "javax.xml.stream.xmlinputfactory.geteventallocator": [
        "javax.xml.stream.XMLInputFactory.getEventAllocator()"
    ],
    "javax.net.ssl.trustmanagerfactoryspi.enginegettrustmanagers": [
        "javax.net.ssl.TrustManagerFactorySpi.engineGetTrustManagers()"
    ],
    "java.util.concurrent.atomic.atomicmarkablereference.getreference": [
        "java.util.concurrent.atomic.AtomicMarkableReference.getReference()"
    ],
    "javax.swing.jtable.setcolumnselectionallowed": [
        "javax.swing.JTable.setColumnSelectionAllowed(boolean)"
    ],
    "javax.management.remote.rmi.rmiconnection.getdefaultdomain": [
        "javax.management.remote.rmi.RMIConnection.getDefaultDomain(javax.security.auth.Subject)"
    ],
    "javax.swing.jlist.getminselectionindex": [
        "javax.swing.JList.getMinSelectionIndex()"
    ],
    "org.w3c.dom.domimplementation.getfeature": [
        "org.w3c.dom.DOMImplementation.getFeature(java.lang.String,java.lang.String)"
    ],
    "java.awt.dnd.dragsourcecontext.gettransferable": [
        "java.awt.dnd.DragSourceContext.getTransferable()"
    ],
    "java.nio.channels.datagramchannel.send": [
        "java.nio.channels.DatagramChannel.send(java.nio.ByteBuffer,java.net.SocketAddress)"
    ],
    "java.io.flushable.flush": [
        "java.io.Flushable.flush()"
    ],
    "javax.swing.defaultlistmodel.setsize": [
        "javax.swing.DefaultListModel.setSize(int)"
    ],
    "java.awt.image.bufferedimage.getproperty": [
        "java.awt.image.BufferedImage.getProperty(java.lang.String)",
        "java.awt.image.BufferedImage.getProperty(java.lang.String,java.awt.image.ImageObserver)"
    ],
    "javax.swing.joptionpane.seticon": [
        "javax.swing.JOptionPane.setIcon(javax.swing.Icon)"
    ],
    "javax.swing.jdialog.paramstring": [
        "javax.swing.JDialog.paramString()"
    ],
    "javax.swing.text.glyphview.glyphpainter.paint": [
        "javax.swing.text.GlyphView.GlyphPainter.paint(javax.swing.text.GlyphView,java.awt.Graphics,java.awt.Shape,int,int)"
    ],
    "javax.swing.plaf.metal.metalmenubarui.update": [
        "javax.swing.plaf.metal.MetalMenuBarUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.tree.defaulttreemodel.nodechanged": [
        "javax.swing.tree.DefaultTreeModel.nodeChanged(javax.swing.tree.TreeNode)"
    ],
    "org.omg.dynamicany._dynenumstub.get_short": [
        "org.omg.DynamicAny._DynEnumStub.get_short()"
    ],
    "java.util.identityhashmap.values": [
        "java.util.IdentityHashMap.values()"
    ],
    "java.util.observer.update": [
        "java.util.Observer.update(java.util.Observable,java.lang.Object)"
    ],
    "java.nio.buffer.reset": [
        "java.nio.Buffer.reset()"
    ],
    "javax.swing.defaultrowsorter.modelwrapper.getmodel": [
        "javax.swing.DefaultRowSorter.ModelWrapper.getModel()"
    ],
    "java.util.concurrent.copyonwritearraylist.hashcode": [
        "java.util.concurrent.CopyOnWriteArrayList.hashCode()"
    ],
    "java.util.stream.doublestream.foreachordered": [
        "java.util.stream.DoubleStream.forEachOrdered(java.util.function.DoubleConsumer)"
    ],
    "java.awt.image.imageproducer.startproduction": [
        "java.awt.image.ImageProducer.startProduction(java.awt.image.ImageConsumer)"
    ],
    "javax.print.attribute.standard.jobmediasheetscompleted.equals": [
        "javax.print.attribute.standard.JobMediaSheetsCompleted.equals(java.lang.Object)"
    ],
    "javax.management.modelmbean.modelmbeaninfo.clone": [
        "javax.management.modelmbean.ModelMBeanInfo.clone()"
    ],
    "javax.swing.jtabbedpane.gettablayoutpolicy": [
        "javax.swing.JTabbedPane.getTabLayoutPolicy()"
    ],
    "java.rmi.activation.activationsystem.registerobject": [
        "java.rmi.activation.ActivationSystem.registerObject(java.rmi.activation.ActivationDesc)"
    ],
    "java.lang.invoke.switchpoint.hasbeeninvalidated": [
        "java.lang.invoke.SwitchPoint.hasBeenInvalidated()"
    ],
    "javax.swing.plaf.multi.multiviewportui.createui": [
        "javax.swing.plaf.multi.MultiViewportUI.createUI(javax.swing.JComponent)"
    ],
    "java.lang.reflect.modifier.tostring": [
        "java.lang.reflect.Modifier.toString(int)"
    ],
    "java.sql.blob.getbinarystream": [
        "java.sql.Blob.getBinaryStream()",
        "java.sql.Blob.getBinaryStream(long,long)"
    ],
    "javax.swing.plaf.metal.metaltheme.getfocuscolor": [
        "javax.swing.plaf.metal.MetalTheme.getFocusColor()"
    ],
    "java.util.concurrent.completablefuture.obtrudevalue": [
        "java.util.concurrent.CompletableFuture.obtrudeValue(java.util.concurrent.CompletableFuture)",
        "java.util.concurrent.CompletableFuture.obtrudeValue(T)"
    ],
    "java.util.timezone.getavailableids": [
        "java.util.TimeZone.getAvailableIDs()",
        "java.util.TimeZone.getAvailableIDs(int)"
    ],
    "javax.swing.plaf.multi.multitabbedpaneui.createui": [
        "javax.swing.plaf.multi.MultiTabbedPaneUI.createUI(javax.swing.JComponent)"
    ],
    "java.beans.propertydescriptor.hashcode": [
        "java.beans.PropertyDescriptor.hashCode()"
    ],
    "java.net.cookiehandler.get": [
        "java.net.CookieHandler.get(java.net.URI,,java.util.List<java.lang.String>>)"
    ],
    "javax.swing.plaf.multi.multimenuitemui.getuis": [
        "javax.swing.plaf.multi.MultiMenuItemUI.getUIs()"
    ],
    "java.text.collator.getavailablelocales": [
        "java.text.Collator.getAvailableLocales()"
    ],
    "java.lang.strictmath.hypot": [
        "java.lang.StrictMath.hypot(double,double)"
    ],
    "java.util.concurrent.completablefuture.exceptionally": [
        "java.util.concurrent.CompletableFuture.exceptionally(,? extends java.util.concurrent.CompletableFuture>)",
        "java.util.concurrent.CompletableFuture.exceptionally(,? extends T>)"
    ],
    "javax.swing.text.plaindocument.insertupdate": [
        "javax.swing.text.PlainDocument.insertUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent,javax.swing.text.AttributeSet)"
    ],
    "org.w3c.dom.bootstrap.domimplementationregistry.addsource": [
        "org.w3c.dom.bootstrap.DOMImplementationRegistry.addSource(org.w3c.dom.DOMImplementationSource)"
    ],
    "javax.swing.abstractbutton.getselectedicon": [
        "javax.swing.AbstractButton.getSelectedIcon()"
    ],
    "javax.swing.plaf.basic.basiclabelui.paint": [
        "javax.swing.plaf.basic.BasicLabelUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.lang.package.getpackages": [
        "java.lang.Package.getPackages()"
    ],
    "javax.xml.stream.xmlstreamreader.getpitarget": [
        "javax.xml.stream.XMLStreamReader.getPITarget()"
    ],
    "java.io.datainput.readchar": [
        "java.io.DataInput.readChar()"
    ],
    "javax.lang.model.util.simpleannotationvaluevisitor6.visitbyte": [
        "javax.lang.model.util.SimpleAnnotationValueVisitor6.visitByte(byte,javax.lang.model.util.SimpleAnnotationValueVisitor6)"
    ],
    "javax.lang.model.util.elementscanner6.visitexecutable": [
        "javax.lang.model.util.ElementScanner6.visitExecutable(javax.lang.model.element.ExecutableElement,javax.lang.model.util.ElementScanner6)"
    ],
    "java.text.fieldposition.getbeginindex": [
        "java.text.FieldPosition.getBeginIndex()"
    ],
    "java.sql.sqloutput.writeref": [
        "java.sql.SQLOutput.writeRef(java.sql.Ref)"
    ],
    "org.w3c.dom.bootstrap.domimplementationregistry.getdomimplementation": [
        "org.w3c.dom.bootstrap.DOMImplementationRegistry.getDOMImplementation(java.lang.String)"
    ],
    "java.awt.gridbaglayout.preferredlayoutsize": [
        "java.awt.GridBagLayout.preferredLayoutSize(java.awt.Container)"
    ],
    "java.io.dataoutputstream.writeshort": [
        "java.io.DataOutputStream.writeShort(int)"
    ],
    "java.util.stringtokenizer.counttokens": [
        "java.util.StringTokenizer.countTokens()"
    ],
    "java.util.concurrent.concurrenthashmap.keyset": [
        "java.util.concurrent.ConcurrentHashMap.keySet(V)",
        "java.util.concurrent.ConcurrentHashMap.keySet()",
        "java.util.concurrent.ConcurrentHashMap.keySet(java.util.concurrent.ConcurrentHashMap)"
    ],
    "java.util.spliterators.abstractintspliterator.estimatesize": [
        "java.util.Spliterators.AbstractIntSpliterator.estimateSize()"
    ],
    "javax.imageio.imagewriteparam.getlocalizedcompressiontypename": [
        "javax.imageio.ImageWriteParam.getLocalizedCompressionTypeName()"
    ],
    "javax.print.attribute.standard.jobkoctetssupported.getname": [
        "javax.print.attribute.standard.JobKOctetsSupported.getName()"
    ],
    "java.time.chrono.abstractchronology.compareto": [
        "java.time.chrono.AbstractChronology.compareTo(java.time.chrono.Chronology)"
    ],
    "javax.swing.plaf.basic.basictoolbarui.createnonrolloverborder": [
        "javax.swing.plaf.basic.BasicToolBarUI.createNonRolloverBorder()"
    ],
    "java.util.bitset.equals": [
        "java.util.BitSet.equals(java.lang.Object)"
    ],
    "org.omg.corba.contextlist.remove": [
        "org.omg.CORBA.ContextList.remove(int)"
    ],
    "java.util.concurrent.concurrentmap.computeifpresent": [
        "java.util.concurrent.ConcurrentMap.computeIfPresent(K,java.util.function.BiFunction<? super,? super,? extends V>)",
        "java.util.concurrent.ConcurrentMap.computeIfPresent(java.util.concurrent.ConcurrentMap,java.util.function.BiFunction<? super,? super,? extends java.util.concurrent.ConcurrentMap>)"
    ],
    "javax.xml.soap.soapheader.examineallheaderelements": [
        "javax.xml.soap.SOAPHeader.examineAllHeaderElements()"
    ],
    "java.beans.propertychangesupport.removepropertychangelistener": [
        "java.beans.PropertyChangeSupport.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",
        "java.beans.PropertyChangeSupport.removePropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "javax.crypto.cipher.getprovider": [
        "javax.crypto.Cipher.getProvider()"
    ],
    "java.io.pipedwriter.flush": [
        "java.io.PipedWriter.flush()"
    ],
    "javax.swing.text.document.addundoableeditlistener": [
        "javax.swing.text.Document.addUndoableEditListener(javax.swing.event.UndoableEditListener)"
    ],
    "java.text.messageformat.parse": [
        "java.text.MessageFormat.parse(java.lang.String,java.text.ParsePosition)",
        "java.text.MessageFormat.parse(java.lang.String)"
    ],
    "javax.lang.model.type.typemirror.hashcode": [
        "javax.lang.model.type.TypeMirror.hashCode()"
    ],
    "javax.print.attribute.standard.jobkoctets.equals": [
        "javax.print.attribute.standard.JobKOctets.equals(java.lang.Object)"
    ],
    "javax.swing.tree.variableheightlayoutcache.setnodedimensions": [
        "javax.swing.tree.VariableHeightLayoutCache.setNodeDimensions(javax.swing.tree.AbstractLayoutCache.NodeDimensions)"
    ],
    "java.io.chararrayreader.reset": [
        "java.io.CharArrayReader.reset()"
    ],
    "javax.swing.jslider.getchangelisteners": [
        "javax.swing.JSlider.getChangeListeners()"
    ],
    "javax.security.cert.x509certificate.getsigalgname": [
        "javax.security.cert.X509Certificate.getSigAlgName()"
    ],
    "javax.print.attribute.standard.jobsheets.getstringtable": [
        "javax.print.attribute.standard.JobSheets.getStringTable()"
    ],
    "javax.swing.jtextarea.getrows": [
        "javax.swing.JTextArea.getRows()"
    ],
    "javax.sound.midi.sequencer.gettracksolo": [
        "javax.sound.midi.Sequencer.getTrackSolo(int)"
    ],
    "javax.swing.text.html.blockview.getresizeweight": [
        "javax.swing.text.html.BlockView.getResizeWeight(int)"
    ],
    "javax.imageio.spi.imagetranscoderspi.getwriterserviceprovidername": [
        "javax.imageio.spi.ImageTranscoderSpi.getWriterServiceProviderName()"
    ],
    "java.awt.datatransfer.flavortable.getnativesforflavor": [
        "java.awt.datatransfer.FlavorTable.getNativesForFlavor(java.awt.datatransfer.DataFlavor)"
    ],
    "javax.management.monitor.monitor.stop": [
        "javax.management.monitor.Monitor.stop()"
    ],
    "java.awt.graphicsdevice.iswindowtranslucencysupported": [
        "java.awt.GraphicsDevice.isWindowTranslucencySupported(java.awt.GraphicsDevice.WindowTranslucency)"
    ],
    "javax.swing.plaf.synth.synthseparatorui.getpreferredsize": [
        "javax.swing.plaf.synth.SynthSeparatorUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "java.awt.robot.keypress": [
        "java.awt.Robot.keyPress(int)"
    ],
    "javax.swing.border.titledborder.getminimumsize": [
        "javax.swing.border.TitledBorder.getMinimumSize(java.awt.Component)"
    ],
    "javax.swing.abstractbutton.paramstring": [
        "javax.swing.AbstractButton.paramString()"
    ],
    "java.util.stream.collector.finisher": [
        "java.util.stream.Collector.finisher()"
    ],
    "java.sql.parametermetadata.getparametertypename": [
        "java.sql.ParameterMetaData.getParameterTypeName(int)"
    ],
    "javax.swing.plaf.basic.basictreeui.uninstallcomponents": [
        "javax.swing.plaf.basic.BasicTreeUI.uninstallComponents()"
    ],
    "javax.crypto.keygeneratorspi.enginegeneratekey": [
        "javax.crypto.KeyGeneratorSpi.engineGenerateKey()"
    ],
    "javax.swing.text.segment.clone": [
        "javax.swing.text.Segment.clone()"
    ],
    "java.awt.container.invalidate": [
        "java.awt.Container.invalidate()"
    ],
    "javax.xml.crypto.dsig.xmlsignaturefactory.newcanonicalizationmethod": [
        "javax.xml.crypto.dsig.XMLSignatureFactory.newCanonicalizationMethod(java.lang.String,javax.xml.crypto.dsig.spec.C14NMethodParameterSpec)",
        "javax.xml.crypto.dsig.XMLSignatureFactory.newCanonicalizationMethod(java.lang.String,javax.xml.crypto.XMLStructure)"
    ],
    "java.awt.image.directcolormodel.getcomponents": [
        "java.awt.image.DirectColorModel.getComponents(int,int[],int)",
        "java.awt.image.DirectColorModel.getComponents(java.lang.Object,int[],int)"
    ],
    "javax.swing.text.stylecontext.registerstaticattributekey": [
        "javax.swing.text.StyleContext.registerStaticAttributeKey(java.lang.Object)"
    ],
    "java.sql.callablestatement.setsqlxml": [
        "java.sql.CallableStatement.setSQLXML(java.lang.String,java.sql.SQLXML)"
    ],
    "javax.xml.namespace.qname.getprefix": [
        "javax.xml.namespace.QName.getPrefix()"
    ],
    "java.util.function.consumer.accept": [
        "java.util.function.Consumer.accept(T)",
        "java.util.function.Consumer.accept(java.util.function.Consumer)"
    ],
    "javax.accessibility.accessiblekeybinding.getaccessiblekeybindingcount": [
        "javax.accessibility.AccessibleKeyBinding.getAccessibleKeyBindingCount()"
    ],
    "javax.sql.rowsetmetadata.setcolumndisplaysize": [
        "javax.sql.RowSetMetaData.setColumnDisplaySize(int,int)"
    ],
    "javax.swing.tree.defaulttreemodel.firetreenodeschanged": [
        "javax.swing.tree.DefaultTreeModel.fireTreeNodesChanged(java.lang.Object,java.lang.Object[],int[],java.lang.Object[])"
    ],
    "java.security.cert.pkixrevocationchecker.setoptions": [
        "java.security.cert.PKIXRevocationChecker.setOptions(java.util.Set<java.security.cert.PKIXRevocationChecker.Option>)"
    ],
    "java.nio.byteorder.tostring": [
        "java.nio.ByteOrder.toString()"
    ],
    "javax.swing.joptionpane.showinputdialog": [
        "javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object)",
        "javax.swing.JOptionPane.showInputDialog(java.lang.Object,java.lang.Object)",
        "javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.Object)",
        "javax.swing.JOptionPane.showInputDialog(java.lang.Object)",
        "javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.String,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)",
        "javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.String,int)"
    ],
    "java.sql.sqloutput.writeshort": [
        "java.sql.SQLOutput.writeShort(short)"
    ],
    "javax.swing.tree.defaultmutabletreenode.children": [
        "javax.swing.tree.DefaultMutableTreeNode.children()"
    ],
    "java.lang.math.rint": [
        "java.lang.Math.rint(double)"
    ],
    "java.awt.splashscreen.getimageurl": [
        "java.awt.SplashScreen.getImageURL()"
    ],
    "javax.swing.text.html.stylesheet.stringtocolor": [
        "javax.swing.text.html.StyleSheet.stringToColor(java.lang.String)"
    ],
    "java.nio.file.attribute.aclentrypermission.valueof": [
        "java.nio.file.attribute.AclEntryPermission.valueOf(java.lang.String)"
    ],
    "javax.management.monitor.gaugemonitor.getdifferencemode": [
        "javax.management.monitor.GaugeMonitor.getDifferenceMode()"
    ],
    "java.nio.channels.filechannel.open": [
        "java.nio.channels.FileChannel.open(java.nio.file.Path,java.util.Set<? extends java.nio.file.OpenOption>,java.nio.file.attribute.FileAttribute<?>...)",
        "java.nio.channels.FileChannel.open(java.nio.file.Path,java.nio.file.OpenOption...)",
        "java.nio.channels.FileChannel.open(java.nio.file.Path,java.nio.file.OpenOption)",
        "java.nio.channels.FileChannel.open(java.nio.file.Path,java.util.Set<? extends java.nio.file.OpenOption>,java.nio.file.attribute.FileAttribute<?>)"
    ],
    "javax.swing.text.abstractdocument.postremoveupdate": [
        "javax.swing.text.AbstractDocument.postRemoveUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent)"
    ],
    "java.awt.event.inputmethodevent.isconsumed": [
        "java.awt.event.InputMethodEvent.isConsumed()"
    ],
    "javax.sql.rowset.rowsetprovider.newfactory": [
        "javax.sql.rowset.RowSetProvider.newFactory(java.lang.String,java.lang.ClassLoader)",
        "javax.sql.rowset.RowSetProvider.newFactory()"
    ],
    "java.awt.geom.cubiccurve2d.clone": [
        "java.awt.geom.CubicCurve2D.clone()"
    ],
    "java.awt.event.inputmethodevent.paramstring": [
        "java.awt.event.InputMethodEvent.paramString()"
    ],
    "javax.swing.tree.defaultmutabletreenode.getfirstleaf": [
        "javax.swing.tree.DefaultMutableTreeNode.getFirstLeaf()"
    ],
    "java.awt.image.indexcolormodel.getvalidpixels": [
        "java.awt.image.IndexColorModel.getValidPixels()"
    ],
    "javax.xml.ws.bindingprovider.getendpointreference": [
        "javax.xml.ws.BindingProvider.getEndpointReference(java.lang.Class<T>)",
        "javax.xml.ws.BindingProvider.getEndpointReference()"
    ],
    "java.net.urlstreamhandler.getdefaultport": [
        "java.net.URLStreamHandler.getDefaultPort()"
    ],
    "javax.management.openmbean.tabulardata.calculateindex": [
        "javax.management.openmbean.TabularData.calculateIndex(javax.management.openmbean.CompositeData)"
    ],
    "java.awt.print.printerjob.print": [
        "java.awt.print.PrinterJob.print()"
    ],
    "java.util.zip.checksum.reset": [
        "java.util.zip.Checksum.reset()"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readlong": [
        "javax.sql.rowset.serial.SQLInputImpl.readLong()"
    ],
    "javax.swing.jtable.getcolumn": [
        "javax.swing.JTable.getColumn(java.lang.Object)"
    ],
    "java.security.cert.certpathbuilder.getdefaulttype": [
        "java.security.cert.CertPathBuilder.getDefaultType()"
    ],
    "java.security.keystore.setcertificateentry": [
        "java.security.KeyStore.setCertificateEntry(java.lang.String,java.security.cert.Certificate)"
    ],
    "javax.swing.jtextarea.getlinewrap": [
        "javax.swing.JTextArea.getLineWrap()"
    ],
    "java.awt.geom.area.add": [
        "java.awt.geom.Area.add(java.awt.geom.Area)"
    ],
    "java.awt.image.indexcolormodel.getcomponents": [
        "java.awt.image.IndexColorModel.getComponents(java.lang.Object,int[],int)",
        "java.awt.image.IndexColorModel.getComponents(int,int[],int)"
    ],
    "java.lang.boolean.compareto": [
        "java.lang.Boolean.compareTo(java.lang.Boolean)"
    ],
    "javax.swing.plaf.synth.synthtreeui.paintverticalline": [
        "javax.swing.plaf.synth.SynthTreeUI.paintVerticalLine(java.awt.Graphics,javax.swing.JComponent,int,int,int)"
    ],
    "javax.swing.abstractbutton.isfocuspainted": [
        "javax.swing.AbstractButton.isFocusPainted()"
    ],
    "javax.swing.plaf.basic.basicbuttonui.getbaseline": [
        "javax.swing.plaf.basic.BasicButtonUI.getBaseline(javax.swing.JComponent,int,int)"
    ],
    "javax.swing.jlayeredpane.insertindexforlayer": [
        "javax.swing.JLayeredPane.insertIndexForLayer(int,int)"
    ],
    "javax.swing.table.defaulttablecolumnmodel.removecolumnmodellistener": [
        "javax.swing.table.DefaultTableColumnModel.removeColumnModelListener(javax.swing.event.TableColumnModelListener)"
    ],
    "org.omg.portableinterceptor.interceptoroperations.destroy": [
        "org.omg.PortableInterceptor.InterceptorOperations.destroy()"
    ],
    "javax.swing.text.abstractdocument.insertupdate": [
        "javax.swing.text.AbstractDocument.insertUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent,javax.swing.text.AttributeSet)"
    ],
    "java.io.dataoutput.writeboolean": [
        "java.io.DataOutput.writeBoolean(boolean)"
    ],
    "javax.lang.model.type.typemirror.accept": [
        "javax.lang.model.type.TypeMirror.accept(,P>,P)"
    ],
    "java.nio.charbuffer.hasarray": [
        "java.nio.CharBuffer.hasArray()"
    ],
    "javax.swing.joptionpane.showconfirmdialog": [
        "javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int)",
        "javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int)",
        "javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object)",
        "javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon)"
    ],
    "org.ietf.jgss.gsscredential.add": [
        "org.ietf.jgss.GSSCredential.add(org.ietf.jgss.GSSName,int,int,org.ietf.jgss.Oid,int)"
    ],
    "java.security.spec.rsapublickeyspec.getmodulus": [
        "java.security.spec.RSAPublicKeySpec.getModulus()"
    ],
    "java.nio.channels.spi.selectorprovider.inheritedchannel": [
        "java.nio.channels.spi.SelectorProvider.inheritedChannel()"
    ],
    "java.awt.geom.affinetransform.transform": [
        "java.awt.geom.AffineTransform.transform(float[],int,double[],int,int)",
        "java.awt.geom.AffineTransform.transform(float[],int,float[],int,int)",
        "java.awt.geom.AffineTransform.transform(java.awt.geom.Point2D[],int,java.awt.geom.Point2D[],int,int)",
        "java.awt.geom.AffineTransform.transform(double[],int,double[],int,int)",
        "java.awt.geom.AffineTransform.transform(double[],int,float[],int,int)",
        "java.awt.geom.AffineTransform.transform(java.awt.geom.Point2D,java.awt.geom.Point2D)"
    ],
    "java.util.optional.orelseget": [
        "java.util.Optional.orElseGet(java.util.function.Supplier<? extends java.util.Optional>)",
        "java.util.Optional.orElseGet(java.util.function.Supplier<? extends T>)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getprimarycontroldarkshadow": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlDarkShadow()"
    ],
    "javax.swing.text.html.paragraphview.getattributes": [
        "javax.swing.text.html.ParagraphView.getAttributes()"
    ],
    "javax.swing.plaf.splitpaneui.getminimumdividerlocation": [
        "javax.swing.plaf.SplitPaneUI.getMinimumDividerLocation(javax.swing.JSplitPane)"
    ],
    "java.lang.stringbuilder.lastindexof": [
        "java.lang.StringBuilder.lastIndexOf(java.lang.String)",
        "java.lang.StringBuilder.lastIndexOf(java.lang.String,int)"
    ],
    "javax.swing.overlaylayout.minimumlayoutsize": [
        "javax.swing.OverlayLayout.minimumLayoutSize(java.awt.Container)"
    ],
    "javax.xml.soap.soappart.getcontent": [
        "javax.xml.soap.SOAPPart.getContent()"
    ],
    "java.util.collections.ncopies": [
        "java.util.Collections.nCopies(int,T)"
    ],
    "java.util.abstractset.equals": [
        "java.util.AbstractSet.equals(java.lang.Object)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintmenubackground": [
        "javax.swing.plaf.synth.SynthPainter.paintMenuBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.lang.reflect.method.getparameterannotations": [
        "java.lang.reflect.Method.getParameterAnnotations()"
    ],
    "javax.imageio.imagetypespecifier.getnumcomponents": [
        "javax.imageio.ImageTypeSpecifier.getNumComponents()"
    ],
    "javax.sound.sampled.lineevent.getframeposition": [
        "javax.sound.sampled.LineEvent.getFramePosition()"
    ],
    "javax.swing.defaultlistselectionmodel.tostring": [
        "javax.swing.DefaultListSelectionModel.toString()"
    ],
    "javax.swing.text.compositeview.flipeastandwestatends": [
        "javax.swing.text.CompositeView.flipEastAndWestAtEnds(int,javax.swing.text.Position.Bias)"
    ],
    "java.awt.awtevent.paramstring": [
        "java.awt.AWTEvent.paramString()"
    ],
    "java.util.concurrent.locks.abstractqueuedsynchronizer.getsharedqueuedthreads": [
        "java.util.concurrent.locks.AbstractQueuedSynchronizer.getSharedQueuedThreads()"
    ],
    "java.awt.image.multipixelpackedsamplemodel.getscanlinestride": [
        "java.awt.image.MultiPixelPackedSampleModel.getScanlineStride()"
    ],
    "java.util.concurrent.atomic.atomiclongarray.updateandget": [
        "java.util.concurrent.atomic.AtomicLongArray.updateAndGet(int,java.util.function.LongUnaryOperator)"
    ],
    "java.lang.thread.getid": [
        "java.lang.Thread.getId()"
    ],
    "javax.management.modelmbean.modelmbeaninfo.getattributes": [
        "javax.management.modelmbean.ModelMBeanInfo.getAttributes()"
    ],
    "java.awt.jobattributes.setmultipledocumenthandlingtodefault": [
        "java.awt.JobAttributes.setMultipleDocumentHandlingToDefault()"
    ],
    "javax.imageio.metadata.iiometadataformat.getelementminchildren": [
        "javax.imageio.metadata.IIOMetadataFormat.getElementMinChildren(java.lang.String)"
    ],
    "java.awt.textfield.paramstring": [
        "java.awt.TextField.paramString()"
    ],
    "java.beans.xmldecoder.setowner": [
        "java.beans.XMLDecoder.setOwner(java.lang.Object)"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.createrenderer": [
        "javax.swing.plaf.basic.BasicComboBoxUI.createRenderer()"
    ],
    "javax.swing.joptionpane.getvalue": [
        "javax.swing.JOptionPane.getValue()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintpanelborder": [
        "javax.swing.plaf.synth.SynthPainter.paintPanelBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.awt.container.getcomponents": [
        "java.awt.Container.getComponents()"
    ],
    "java.time.zoneoffset.compareto": [
        "java.time.ZoneOffset.compareTo(java.time.ZoneOffset)"
    ],
    "javax.xml.soap.soapelement.getelementqname": [
        "javax.xml.soap.SOAPElement.getElementQName()"
    ],
    "javax.swing.plaf.multi.multirootpaneui.contains": [
        "javax.swing.plaf.multi.MultiRootPaneUI.contains(javax.swing.JComponent,int,int)"
    ],
    "java.util.dictionary.elements": [
        "java.util.Dictionary.elements()"
    ],
    "javax.xml.soap.detail.adddetailentry": [
        "javax.xml.soap.Detail.addDetailEntry(javax.xml.namespace.QName)",
        "javax.xml.soap.Detail.addDetailEntry(javax.xml.soap.Name)"
    ],
    "java.time.localdatetime.minusdays": [
        "java.time.LocalDateTime.minusDays(long)"
    ],
    "java.util.stream.collectors.toconcurrentmap": [
        "java.util.stream.Collectors.toConcurrentMap(java.util.function.Function<? super,? extends K>,java.util.function.Function<? super,? extends U>)",
        "java.util.stream.Collectors.toConcurrentMap(java.util.function.Function<? super,? extends K>,java.util.function.Function<? super,? extends U>,java.util.function.BinaryOperator<U>)",
        "java.util.stream.Collectors.toConcurrentMap(java.util.function.Function<? super,? extends K>,java.util.function.Function<? super,? extends U>,java.util.function.BinaryOperator<U>,java.util.function.Supplier<M>)"
    ],
    "org.w3c.dom.events.event.getcurrenttarget": [
        "org.w3c.dom.events.Event.getCurrentTarget()"
    ],
    "java.awt.gradientpaint.getcolor1": [
        "java.awt.GradientPaint.getColor1()"
    ],
    "org.omg.corba.namedvalue.name": [
        "org.omg.CORBA.NamedValue.name()"
    ],
    "javax.swing.jtree.setrowheight": [
        "javax.swing.JTree.setRowHeight(int)"
    ],
    "javax.imageio.stream.imageinputstreamimpl.reset": [
        "javax.imageio.stream.ImageInputStreamImpl.reset()"
    ],
    "java.io.dataoutputstream.writeutf": [
        "java.io.DataOutputStream.writeUTF(java.lang.String)"
    ],
    "javax.swing.boxlayout.minimumlayoutsize": [
        "javax.swing.BoxLayout.minimumLayoutSize(java.awt.Container)"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.settimezone": [
        "javax.xml.datatype.XMLGregorianCalendar.setTimezone(int)"
    ],
    "java.awt.image.colorconvertop.getpoint2d": [
        "java.awt.image.ColorConvertOp.getPoint2D(java.awt.geom.Point2D,java.awt.geom.Point2D)"
    ],
    "javax.print.attribute.standard.printerisacceptingjobs.getcategory": [
        "javax.print.attribute.standard.PrinterIsAcceptingJobs.getCategory()"
    ],
    "javax.xml.soap.soapelement.getelementname": [
        "javax.xml.soap.SOAPElement.getElementName()"
    ],
    "javax.swing.text.view.getmaximumspan": [
        "javax.swing.text.View.getMaximumSpan(int)"
    ],
    "java.net.datagramsocketimpl.leavegroup": [
        "java.net.DatagramSocketImpl.leaveGroup(java.net.SocketAddress,java.net.NetworkInterface)"
    ],
    "java.util.treeset.addall": [
        "java.util.TreeSet.addAll(java.util.Collection<? extends E>)",
        "java.util.TreeSet.addAll(java.util.Collection<? extends java.util.TreeSet>)"
    ],
    "javax.naming.directory.basicattribute.getall": [
        "javax.naming.directory.BasicAttribute.getAll()"
    ],
    "java.sql.databasemetadata.supportsopenstatementsacrosscommit": [
        "java.sql.DatabaseMetaData.supportsOpenStatementsAcrossCommit()"
    ],
    "javax.swing.event.treeselectionevent.getnewleadselectionpath": [
        "javax.swing.event.TreeSelectionEvent.getNewLeadSelectionPath()"
    ],
    "java.nio.shortbuffer.slice": [
        "java.nio.ShortBuffer.slice()"
    ],
    "java.time.duration.plusminutes": [
        "java.time.Duration.plusMinutes(long)"
    ],
    "java.util.function.intpredicate.and": [
        "java.util.function.IntPredicate.and(java.util.function.IntPredicate)"
    ],
    "java.time.offsettime.getnano": [
        "java.time.OffsetTime.getNano()"
    ],
    "java.security.cert.pkixparameters.setpolicymappinginhibited": [
        "java.security.cert.PKIXParameters.setPolicyMappingInhibited(boolean)"
    ],
    "javax.swing.jsplitpane.getui": [
        "javax.swing.JSplitPane.getUI()"
    ],
    "java.net.serversocket.setreceivebuffersize": [
        "java.net.ServerSocket.setReceiveBufferSize(int)"
    ],
    "org.xml.sax.helpers.parseradapter.setfeature": [
        "org.xml.sax.helpers.ParserAdapter.setFeature(java.lang.String,boolean)"
    ],
    "javax.net.ssl.sslsocket.getsession": [
        "javax.net.ssl.SSLSocket.getSession()"
    ],
    "java.security.cert.certpath.gettype": [
        "java.security.cert.CertPath.getType()"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.setcolumncount": [
        "javax.sql.rowset.RowSetMetaDataImpl.setColumnCount(int)"
    ],
    "java.lang.string.tolowercase": [
        "java.lang.String.toLowerCase()",
        "java.lang.String.toLowerCase(java.util.Locale)"
    ],
    "javax.lang.model.element.annotationvaluevisitor.visitboolean": [
        "javax.lang.model.element.AnnotationValueVisitor.visitBoolean(boolean,javax.lang.model.element.AnnotationValueVisitor)"
    ],
    "javax.swing.text.styleconstants.getspacebelow": [
        "javax.swing.text.StyleConstants.getSpaceBelow(javax.swing.text.AttributeSet)"
    ],
    "javax.management.remote.rmi.rmiconnection.isinstanceof": [
        "javax.management.remote.rmi.RMIConnection.isInstanceOf(javax.management.ObjectName,java.lang.String,javax.security.auth.Subject)"
    ],
    "javax.swing.jwindow.getglasspane": [
        "javax.swing.JWindow.getGlassPane()"
    ],
    "java.util.regex.matcher.region": [
        "java.util.regex.Matcher.region(int,int)"
    ],
    "javax.management.monitor.countermonitor.stop": [
        "javax.management.monitor.CounterMonitor.stop()"
    ],
    "java.util.prefs.abstractpreferences.flushspi": [
        "java.util.prefs.AbstractPreferences.flushSpi()"
    ],
    "java.util.linkedlist.indexof": [
        "java.util.LinkedList.indexOf(java.lang.Object)"
    ],
    "javax.print.attribute.standard.requestingusername.getcategory": [
        "javax.print.attribute.standard.RequestingUserName.getCategory()"
    ],
    "java.awt.geom.affinetransform.shear": [
        "java.awt.geom.AffineTransform.shear(double,double)"
    ],
    "java.beans.statement.getmethodname": [
        "java.beans.Statement.getMethodName()"
    ],
    "java.lang.management.threadmxbean.issynchronizerusagesupported": [
        "java.lang.management.ThreadMXBean.isSynchronizerUsageSupported()"
    ],
    "java.util.hashtable.size": [
        "java.util.Hashtable.size()"
    ],
    "java.awt.graphics2d.addrenderinghints": [
        "java.awt.Graphics2D.addRenderingHints(,?>)"
    ],
    "java.awt.dnd.dragsourceadapter.dragdropend": [
        "java.awt.dnd.DragSourceAdapter.dragDropEnd(java.awt.dnd.DragSourceDropEvent)"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.writelock.lockinterruptibly": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.lockInterruptibly()"
    ],
    "java.util.identityhashmap.replaceall": [
        "java.util.IdentityHashMap.replaceAll(java.util.function.BiFunction<? super,? super,? extends V>)"
    ],
    "javax.swing.box.createverticalglue": [
        "javax.swing.Box.createVerticalGlue()"
    ],
    "javax.swing.event.menudragmouseevent.getpath": [
        "javax.swing.event.MenuDragMouseEvent.getPath()"
    ],
    "javax.management.monitor.monitor.getobservedattribute": [
        "javax.management.monitor.Monitor.getObservedAttribute()"
    ],
    "java.lang.process.destroy": [
        "java.lang.Process.destroy()"
    ],
    "java.lang.runtime.gc": [
        "java.lang.Runtime.gc()"
    ],
    "java.lang.management.threadinfo.from": [
        "java.lang.management.ThreadInfo.from(javax.management.openmbean.CompositeData)"
    ],
    "org.omg.corba.portable.delegate.get_policy": [
        "org.omg.CORBA.portable.Delegate.get_policy(org.omg.CORBA.Object,int)"
    ],
    "java.awt.image.renderedimage.gettilegridxoffset": [
        "java.awt.image.RenderedImage.getTileGridXOffset()"
    ],
    "java.net.urlencoder.encode": [
        "java.net.URLEncoder.encode(java.lang.String,java.lang.String)"
    ],
    "java.util.concurrent.concurrenthashmap.reducevalues": [
        "java.util.concurrent.ConcurrentHashMap.reduceValues(long,java.util.function.Function<? super,? extends U>,java.util.function.BiFunction<? super,? super,? extends U>)",
        "java.util.concurrent.ConcurrentHashMap.reduceValues(long,java.util.function.BiFunction<? super,? super,? extends V>)",
        "java.util.concurrent.ConcurrentHashMap.reduceValues(long,java.util.function.BiFunction<? super,? super,? extends java.util.concurrent.ConcurrentHashMap>)"
    ],
    "javax.accessibility.accessibleselection.addaccessibleselection": [
        "javax.accessibility.AccessibleSelection.addAccessibleSelection(int)"
    ],
    "java.sql.preparedstatement.setlong": [
        "java.sql.PreparedStatement.setLong(int,long)"
    ],
    "java.util.concurrent.phaser.getparent": [
        "java.util.concurrent.Phaser.getParent()"
    ],
    "javax.imageio.metadata.iiometadatacontroller.activate": [
        "javax.imageio.metadata.IIOMetadataController.activate(javax.imageio.metadata.IIOMetadata)"
    ],
    "javax.swing.jspinner.listeditor.getmodel": [
        "javax.swing.JSpinner.ListEditor.getModel()"
    ],
    "javax.swing.tree.defaulttreecelleditor.cancelcellediting": [
        "javax.swing.tree.DefaultTreeCellEditor.cancelCellEditing()"
    ],
    "javax.xml.parsers.saxparserfactory.setfeature": [
        "javax.xml.parsers.SAXParserFactory.setFeature(java.lang.String,boolean)"
    ],
    "java.time.localdatetime.getdayofweek": [
        "java.time.LocalDateTime.getDayOfWeek()"
    ],
    "java.awt.font.graphicattribute.getoutline": [
        "java.awt.font.GraphicAttribute.getOutline(java.awt.geom.AffineTransform)"
    ],
    "java.util.concurrent.atomic.atomicintegerarray.getanddecrement": [
        "java.util.concurrent.atomic.AtomicIntegerArray.getAndDecrement(int)"
    ],
    "javax.xml.transform.dom.domresult.getnode": [
        "javax.xml.transform.dom.DOMResult.getNode()"
    ],
    "org.omg.portableserver.poaoperations.the_poamanager": [
        "org.omg.PortableServer.POAOperations.the_POAManager()"
    ],
    "javax.swing.jspinner.dateeditor.getformat": [
        "javax.swing.JSpinner.DateEditor.getFormat()"
    ],
    "javax.swing.plaf.synth.synthlabelui.propertychange": [
        "javax.swing.plaf.synth.SynthLabelUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "java.text.dateformatsymbols.getmonths": [
        "java.text.DateFormatSymbols.getMonths()"
    ],
    "java.lang.character.getname": [
        "java.lang.Character.getName(int)"
    ],
    "java.sql.driver.getpropertyinfo": [
        "java.sql.Driver.getPropertyInfo(java.lang.String,java.util.Properties)"
    ],
    "java.util.abstractmap.simpleimmutableentry.equals": [
        "java.util.AbstractMap.SimpleImmutableEntry.equals(java.lang.Object)"
    ],
    "java.util.prefs.preferences.exportsubtree": [
        "java.util.prefs.Preferences.exportSubtree(java.io.OutputStream)"
    ],
    "javax.print.attribute.standard.mediatray.getstringtable": [
        "javax.print.attribute.standard.MediaTray.getStringTable()"
    ],
    "javax.imageio.imagereader.getsourceregion": [
        "javax.imageio.ImageReader.getSourceRegion(javax.imageio.ImageReadParam,int,int)"
    ],
    "javax.imageio.stream.imageoutputstream.writebyte": [
        "javax.imageio.stream.ImageOutputStream.writeByte(int)"
    ],
    "java.util.concurrent.concurrentskiplistmap.firstentry": [
        "java.util.concurrent.ConcurrentSkipListMap.firstEntry()"
    ],
    "javax.swing.joptionpane.showinternalconfirmdialog": [
        "javax.swing.JOptionPane.showInternalConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int)",
        "javax.swing.JOptionPane.showInternalConfirmDialog(java.awt.Component,java.lang.Object)",
        "javax.swing.JOptionPane.showInternalConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int)",
        "javax.swing.JOptionPane.showInternalConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon)"
    ],
    "java.time.monthday.getmonthvalue": [
        "java.time.MonthDay.getMonthValue()"
    ],
    "java.sql.statement.setfetchdirection": [
        "java.sql.Statement.setFetchDirection(int)"
    ],
    "javax.management.modelmbean.modelmbeaninfo.getdescriptors": [
        "javax.management.modelmbean.ModelMBeanInfo.getDescriptors(java.lang.String)"
    ],
    "org.xml.sax.ext.attributes2impl.addattribute": [
        "org.xml.sax.ext.Attributes2Impl.addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
    ],
    "org.omg.corba.stringholder._type": [
        "org.omg.CORBA.StringHolder._type()"
    ],
    "java.util.collections.checkednavigablemap": [
        "java.util.Collections.checkedNavigableMap(,V>,java.lang.Class<K>,java.lang.Class<V>)"
    ],
    "java.net.inetsocketaddress.hashcode": [
        "java.net.InetSocketAddress.hashCode()"
    ],
    "java.util.regex.patternsyntaxexception.getpattern": [
        "java.util.regex.PatternSyntaxException.getPattern()"
    ],
    "javax.naming.spi.statefactory.getstatetobind": [
        "javax.naming.spi.StateFactory.getStateToBind(java.lang.Object,javax.naming.Name,javax.naming.Context,,?>)"
    ],
    "javax.swing.border.titledborder.getbaseline": [
        "javax.swing.border.TitledBorder.getBaseline(java.awt.Component,int,int)"
    ],
    "java.time.duration.plusnanos": [
        "java.time.Duration.plusNanos(long)"
    ],
    "javax.xml.stream.xmlstreamreader.gettextlength": [
        "javax.xml.stream.XMLStreamReader.getTextLength()"
    ],
    "javax.xml.soap.node.setparentelement": [
        "javax.xml.soap.Node.setParentElement(javax.xml.soap.SOAPElement)"
    ],
    "java.security.spec.rsaprivatekeyspec.getprivateexponent": [
        "java.security.spec.RSAPrivateKeySpec.getPrivateExponent()"
    ],
    "javax.swing.actionmap.allkeys": [
        "javax.swing.ActionMap.allKeys()"
    ],
    "javax.swing.text.html.parser.parser.maketag": [
        "javax.swing.text.html.parser.Parser.makeTag(javax.swing.text.html.parser.Element,boolean)"
    ],
    "java.util.function.doublepredicate.negate": [
        "java.util.function.DoublePredicate.negate()"
    ],
    "javax.xml.namespace.namespacecontext.getprefixes": [
        "javax.xml.namespace.NamespaceContext.getPrefixes(java.lang.String)"
    ],
    "java.text.breakiterator.gettext": [
        "java.text.BreakIterator.getText()"
    ],
    "java.time.temporal.valuerange.getmaximum": [
        "java.time.temporal.ValueRange.getMaximum()"
    ],
    "java.util.treeset.add": [
        "java.util.TreeSet.add(E)",
        "java.util.TreeSet.add(java.util.TreeSet)"
    ],
    "java.util.prefs.abstractpreferences.putint": [
        "java.util.prefs.AbstractPreferences.putInt(java.lang.String,int)"
    ],
    "javax.swing.box.filler.paintcomponent": [
        "javax.swing.Box.Filler.paintComponent(java.awt.Graphics)"
    ],
    "java.lang.float.intbitstofloat": [
        "java.lang.Float.intBitsToFloat(int)"
    ],
    "javax.swing.jcombobox.getactionlisteners": [
        "javax.swing.JComboBox.getActionListeners()"
    ],
    "javax.swing.jcolorchooser.createdialog": [
        "javax.swing.JColorChooser.createDialog(java.awt.Component,java.lang.String,boolean,javax.swing.JColorChooser,java.awt.event.ActionListener,java.awt.event.ActionListener)"
    ],
    "java.awt.dnd.dragsourcedragevent.gettargetactions": [
        "java.awt.dnd.DragSourceDragEvent.getTargetActions()"
    ],
    "java.awt.image.rgbimagefilter.substitutecolormodel": [
        "java.awt.image.RGBImageFilter.substituteColorModel(java.awt.image.ColorModel,java.awt.image.ColorModel)"
    ],
    "javax.crypto.spec.psource.pspecified.getvalue": [
        "javax.crypto.spec.PSource.PSpecified.getValue()"
    ],
    "java.util.deque.getlast": [
        "java.util.Deque.getLast()"
    ],
    "javax.swing.plaf.synth.synthmenubarui.paintborder": [
        "javax.swing.plaf.synth.SynthMenuBarUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.lang.model.element.elementvisitor.visitpackage": [
        "javax.lang.model.element.ElementVisitor.visitPackage(javax.lang.model.element.PackageElement,javax.lang.model.element.ElementVisitor)"
    ],
    "javax.sound.midi.midichannel.getprogram": [
        "javax.sound.midi.MidiChannel.getProgram()"
    ],
    "javax.swing.lookandfeel.installborder": [
        "javax.swing.LookAndFeel.installBorder(javax.swing.JComponent,java.lang.String)"
    ],
    "javax.management.mbeanserverfactory.releasembeanserver": [
        "javax.management.MBeanServerFactory.releaseMBeanServer(javax.management.MBeanServer)"
    ],
    "javax.xml.soap.soapfault.setfaultcode": [
        "javax.xml.soap.SOAPFault.setFaultCode(javax.xml.namespace.QName)",
        "javax.xml.soap.SOAPFault.setFaultCode(javax.xml.soap.Name)",
        "javax.xml.soap.SOAPFault.setFaultCode(java.lang.String)"
    ],
    "java.beans.encoder.writestatement": [
        "java.beans.Encoder.writeStatement(java.beans.Statement)"
    ],
    "javax.security.auth.kerberos.keytab.exists": [
        "javax.security.auth.kerberos.KeyTab.exists()"
    ],
    "javax.swing.abstractaction.removepropertychangelistener": [
        "javax.swing.AbstractAction.removePropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "javax.swing.text.html.paragraphview.getpreferredspan": [
        "javax.swing.text.html.ParagraphView.getPreferredSpan(int)"
    ],
    "javax.management.mbeanoperationinfo.equals": [
        "javax.management.MBeanOperationInfo.equals(java.lang.Object)"
    ],
    "org.omg.dynamicany._dynanystub.insert_typecode": [
        "org.omg.DynamicAny._DynAnyStub.insert_typecode(org.omg.CORBA.TypeCode)"
    ],
    "javax.xml.stream.xmlreporter.report": [
        "javax.xml.stream.XMLReporter.report(java.lang.String,java.lang.String,java.lang.Object,javax.xml.stream.Location)"
    ],
    "java.util.spliterator.foreachremaining": [
        "java.util.Spliterator.forEachRemaining(java.util.function.Consumer<? super java.util.Spliterator>)",
        "java.util.Spliterator.forEachRemaining(java.util.function.Consumer<? super T>)"
    ],
    "javax.swing.jcomponent.removevetoablechangelistener": [
        "javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"
    ],
    "java.util.sortedset.spliterator": [
        "java.util.SortedSet.spliterator()"
    ],
    "javax.management.modelmbean.modelmbeaninfo.getclassname": [
        "javax.management.modelmbean.ModelMBeanInfo.getClassName()"
    ],
    "java.security.cert.x509certificate.getsigalgoid": [
        "java.security.cert.X509Certificate.getSigAlgOID()"
    ],
    "javax.swing.text.html.htmldocument.firechangedupdate": [
        "javax.swing.text.html.HTMLDocument.fireChangedUpdate(javax.swing.event.DocumentEvent)"
    ],
    "javax.swing.text.plainview.removeupdate": [
        "javax.swing.text.PlainView.removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "java.util.timertask.cancel": [
        "java.util.TimerTask.cancel()"
    ],
    "java.beans.beancontext.beancontextsupport.setlocale": [
        "java.beans.beancontext.BeanContextSupport.setLocale(java.util.Locale)"
    ],
    "javax.imageio.metadata.iiometadatanode.setidattribute": [
        "javax.imageio.metadata.IIOMetadataNode.setIdAttribute(java.lang.String,boolean)"
    ],
    "javax.swing.defaultlistmodel.set": [
        "javax.swing.DefaultListModel.set(int,javax.swing.DefaultListModel)"
    ],
    "javax.xml.bind.datatypeconverter.printdecimal": [
        "javax.xml.bind.DatatypeConverter.printDecimal(java.math.BigDecimal)"
    ],
    "javax.crypto.spec.dhprivatekeyspec.getp": [
        "javax.crypto.spec.DHPrivateKeySpec.getP()"
    ],
    "java.lang.reflect.array.setint": [
        "java.lang.reflect.Array.setInt(java.lang.Object,int,int)"
    ],
    "javax.lang.model.util.abstractannotationvaluevisitor6.visitunknown": [
        "javax.lang.model.util.AbstractAnnotationValueVisitor6.visitUnknown(javax.lang.model.element.AnnotationValue,javax.lang.model.util.AbstractAnnotationValueVisitor6)"
    ],
    "java.lang.management.platformloggingmxbean.getparentloggername": [
        "java.lang.management.PlatformLoggingMXBean.getParentLoggerName(java.lang.String)"
    ],
    "java.util.concurrent.scheduledthreadpoolexecutor.getcontinueexistingperiodictasksaftershutdownpolicy": [
        "java.util.concurrent.ScheduledThreadPoolExecutor.getContinueExistingPeriodicTasksAfterShutdownPolicy()"
    ],
    "javax.net.ssl.sslcontextspi.enginegetclientsessioncontext": [
        "javax.net.ssl.SSLContextSpi.engineGetClientSessionContext()"
    ],
    "org.xml.sax.helpers.parseradapter.setdtdhandler": [
        "org.xml.sax.helpers.ParserAdapter.setDTDHandler(org.xml.sax.DTDHandler)"
    ],
    "javax.print.attribute.standard.jobimpressionssupported.equals": [
        "javax.print.attribute.standard.JobImpressionsSupported.equals(java.lang.Object)"
    ],
    "javax.print.attribute.standard.jobpriority.getname": [
        "javax.print.attribute.standard.JobPriority.getName()"
    ],
    "java.sql.rowidlifetime.valueof": [
        "java.sql.RowIdLifetime.valueOf(java.lang.String)"
    ],
    "java.awt.color.colorspace.getmaxvalue": [
        "java.awt.color.ColorSpace.getMaxValue(int)"
    ],
    "java.util.concurrent.atomic.doubleadder.reset": [
        "java.util.concurrent.atomic.DoubleAdder.reset()"
    ],
    "javax.lang.model.element.element.getmodifiers": [
        "javax.lang.model.element.Element.getModifiers()"
    ],
    "javax.imageio.metadata.iiometadataformatimpl.addattribute": [
        "javax.imageio.metadata.IIOMetadataFormatImpl.addAttribute(java.lang.String,java.lang.String,int,boolean,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
        "javax.imageio.metadata.IIOMetadataFormatImpl.addAttribute(java.lang.String,java.lang.String,int,boolean,int,int)",
        "javax.imageio.metadata.IIOMetadataFormatImpl.addAttribute(java.lang.String,java.lang.String,int,boolean,java.lang.String,java.util.List<java.lang.String>)",
        "javax.imageio.metadata.IIOMetadataFormatImpl.addAttribute(java.lang.String,java.lang.String,int,boolean,java.lang.String)"
    ],
    "javax.xml.crypto.dsig.xmlsignature.getsignaturevalue": [
        "javax.xml.crypto.dsig.XMLSignature.getSignatureValue()"
    ],
    "java.util.uuid.version": [
        "java.util.UUID.version()"
    ],
    "java.nio.file.attribute.filetime.toinstant": [
        "java.nio.file.attribute.FileTime.toInstant()"
    ],
    "javax.swing.abstractbutton.sethorizontaltextposition": [
        "javax.swing.AbstractButton.setHorizontalTextPosition(int)"
    ],
    "java.util.primitiveiterator.oflong.foreachremaining": [
        "java.util.PrimitiveIterator.OfLong.forEachRemaining(java.util.function.LongConsumer)",
        "java.util.PrimitiveIterator.OfLong.forEachRemaining(java.util.function.Consumer<? super java.lang.Long>)"
    ],
    "java.beans.propertyeditorsupport.ispaintable": [
        "java.beans.PropertyEditorSupport.isPaintable()"
    ],
    "javax.swing.text.abstractdocument.getendposition": [
        "javax.swing.text.AbstractDocument.getEndPosition()"
    ],
    "java.awt.im.spi.inputmethodcontext.createinputmethodwindow": [
        "java.awt.im.spi.InputMethodContext.createInputMethodWindow(java.lang.String,boolean)"
    ],
    "java.util.concurrent.forkjoinpool.getcommonpoolparallelism": [
        "java.util.concurrent.ForkJoinPool.getCommonPoolParallelism()"
    ],
    "java.security.keystore.entry.getattributes": [
        "java.security.KeyStore.Entry.getAttributes()"
    ],
    "java.lang.instrument.classdefinition.getdefinitionclassfile": [
        "java.lang.instrument.ClassDefinition.getDefinitionClassFile()"
    ],
    "javax.swing.jframe.getaccessiblecontext": [
        "javax.swing.JFrame.getAccessibleContext()"
    ],
    "javax.swing.text.asyncboxview.getviewcount": [
        "javax.swing.text.AsyncBoxView.getViewCount()"
    ],
    "javax.swing.plaf.multi.multispinnerui.getuis": [
        "javax.swing.plaf.multi.MultiSpinnerUI.getUIs()"
    ],
    "java.text.parseposition.tostring": [
        "java.text.ParsePosition.toString()"
    ],
    "java.time.chrono.era.getvalue": [
        "java.time.chrono.Era.getValue()"
    ],
    "javax.sql.rowset.serial.serialclob.setstring": [
        "javax.sql.rowset.serial.SerialClob.setString(long,java.lang.String)",
        "javax.sql.rowset.serial.SerialClob.setString(long,java.lang.String,int,int)"
    ],
    "javax.swing.joptionpane.setinitialselectionvalue": [
        "javax.swing.JOptionPane.setInitialSelectionValue(java.lang.Object)"
    ],
    "java.awt.image.getwidth": [
        "java.awt.Image.getWidth(java.awt.image.ImageObserver)"
    ],
    "javax.swing.plaf.synth.synthpainter.painttextfieldborder": [
        "javax.swing.plaf.synth.SynthPainter.paintTextFieldBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.crypto.cipherinputstream.close": [
        "javax.crypto.CipherInputStream.close()"
    ],
    "javax.imageio.imagewriter.getavailablelocales": [
        "javax.imageio.ImageWriter.getAvailableLocales()"
    ],
    "org.omg.dynamicany._dynvaluestub.get_char": [
        "org.omg.DynamicAny._DynValueStub.get_char()"
    ],
    "java.util.logging.consolehandler.publish": [
        "java.util.logging.ConsoleHandler.publish(java.util.logging.LogRecord)"
    ],
    "javax.xml.crypto.dom.domcryptocontext.iterator": [
        "javax.xml.crypto.dom.DOMCryptoContext.iterator()"
    ],
    "org.xml.sax.helpers.xmlreaderadapter.setentityresolver": [
        "org.xml.sax.helpers.XMLReaderAdapter.setEntityResolver(org.xml.sax.EntityResolver)"
    ],
    "java.lang.math.signum": [
        "java.lang.Math.signum(float)",
        "java.lang.Math.signum(double)"
    ],
    "javax.swing.plaf.multi.multitreeui.contains": [
        "javax.swing.plaf.multi.MultiTreeUI.contains(javax.swing.JComponent,int,int)"
    ],
    "javax.swing.table.abstracttablemodel.firetablerowsinserted": [
        "javax.swing.table.AbstractTableModel.fireTableRowsInserted(int,int)"
    ],
    "javax.swing.repaintmanager.markcompletelydirty": [
        "javax.swing.RepaintManager.markCompletelyDirty(javax.swing.JComponent)"
    ],
    "java.lang.classloader.loadclass": [
        "java.lang.ClassLoader.loadClass(java.lang.String)",
        "java.lang.ClassLoader.loadClass(java.lang.String,boolean)"
    ],
    "java.text.decimalformat.topattern": [
        "java.text.DecimalFormat.toPattern()"
    ],
    "java.nio.channels.serversocketchannel.bind": [
        "java.nio.channels.ServerSocketChannel.bind(java.net.SocketAddress,int)",
        "java.nio.channels.ServerSocketChannel.bind(java.net.SocketAddress)"
    ],
    "java.util.concurrent.locks.lock.trylock": [
        "java.util.concurrent.locks.Lock.tryLock()",
        "java.util.concurrent.locks.Lock.tryLock(long,java.util.concurrent.TimeUnit)"
    ],
    "javax.swing.text.html.blockview.getminimumspan": [
        "javax.swing.text.html.BlockView.getMinimumSpan(int)"
    ],
    "javax.imageio.imagereader.getimagemetadata": [
        "javax.imageio.ImageReader.getImageMetadata(int,java.lang.String,java.util.Set<java.lang.String>)",
        "javax.imageio.ImageReader.getImageMetadata(int)"
    ],
    "org.omg.corba.policyoperations.destroy": [
        "org.omg.CORBA.PolicyOperations.destroy()"
    ],
    "java.awt.dnd.droptargetdragevent.getdropaction": [
        "java.awt.dnd.DropTargetDragEvent.getDropAction()"
    ],
    "java.util.calendar.getcalendartype": [
        "java.util.Calendar.getCalendarType()"
    ],
    "javax.swing.plaf.basic.basictextareaui.getpreferredsize": [
        "javax.swing.plaf.basic.BasicTextAreaUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "java.awt.graphics.draw3drect": [
        "java.awt.Graphics.draw3DRect(int,int,int,int,boolean)"
    ],
    "java.awt.awteventmulticaster.windowdeiconified": [
        "java.awt.AWTEventMulticaster.windowDeiconified(java.awt.event.WindowEvent)"
    ],
    "javax.swing.jlist.getselectedindex": [
        "javax.swing.JList.getSelectedIndex()"
    ],
    "javax.imageio.metadata.iiometadataformat.getrootname": [
        "javax.imageio.metadata.IIOMetadataFormat.getRootName()"
    ],
    "javax.swing.plaf.metal.metaltheme.getseparatorbackground": [
        "javax.swing.plaf.metal.MetalTheme.getSeparatorBackground()"
    ],
    "javax.swing.jwindow.update": [
        "javax.swing.JWindow.update(java.awt.Graphics)"
    ],
    "javax.xml.bind.datatypeconverter.printtime": [
        "javax.xml.bind.DatatypeConverter.printTime(java.util.Calendar)"
    ],
    "javax.swing.text.layoutqueue.setdefaultqueue": [
        "javax.swing.text.LayoutQueue.setDefaultQueue(javax.swing.text.LayoutQueue)"
    ],
    "java.util.treemap.replace": [
        "java.util.TreeMap.replace(K,V,V)",
        "java.util.TreeMap.replace(K,V)"
    ],
    "java.time.localtime.minushours": [
        "java.time.LocalTime.minusHours(long)"
    ],
    "org.xml.sax.helpers.defaulthandler.startprefixmapping": [
        "org.xml.sax.helpers.DefaultHandler.startPrefixMapping(java.lang.String,java.lang.String)"
    ],
    "java.lang.processbuilder.start": [
        "java.lang.ProcessBuilder.start()"
    ],
    "javax.swing.jtable.setintercellspacing": [
        "javax.swing.JTable.setIntercellSpacing(java.awt.Dimension)"
    ],
    "java.awt.jobattributes.setcopies": [
        "java.awt.JobAttributes.setCopies(int)"
    ],
    "java.util.bitset.clear": [
        "java.util.BitSet.clear(int)",
        "java.util.BitSet.clear()"
    ],
    "javax.xml.bind.validationeventlocator.getoffset": [
        "javax.xml.bind.ValidationEventLocator.getOffset()"
    ],
    "java.net.cookiestore.get": [
        "java.net.CookieStore.get(java.net.URI)"
    ],
    "java.awt.component.getfocuslisteners": [
        "java.awt.Component.getFocusListeners()"
    ],
    "java.lang.management.threadmxbean.iscurrentthreadcputimesupported": [
        "java.lang.management.ThreadMXBean.isCurrentThreadCpuTimeSupported()"
    ],
    "javax.naming.ldap.starttlsrequest.createextendedresponse": [
        "javax.naming.ldap.StartTlsRequest.createExtendedResponse(java.lang.String,byte[],int,int)"
    ],
    "java.util.bitset.nextsetbit": [
        "java.util.BitSet.nextSetBit(int)"
    ],
    "javax.swing.plaf.nimbus.nimbuslookandfeel.getdefaults": [
        "javax.swing.plaf.nimbus.NimbusLookAndFeel.getDefaults()"
    ],
    "java.security.cert.pkixparameters.getpolicyqualifiersrejected": [
        "java.security.cert.PKIXParameters.getPolicyQualifiersRejected()"
    ],
    "javax.security.auth.kerberos.kerberosticket.equals": [
        "javax.security.auth.kerberos.KerberosTicket.equals(java.lang.Object)"
    ],
    "java.security.cert.certificatefactory.getinstance": [
        "java.security.cert.CertificateFactory.getInstance(java.lang.String,java.security.Provider)",
        "java.security.cert.CertificateFactory.getInstance(java.lang.String)",
        "java.security.cert.CertificateFactory.getInstance(java.lang.String,java.lang.String)"
    ],
    "java.awt.awteventmulticaster.mousereleased": [
        "java.awt.AWTEventMulticaster.mouseReleased(java.awt.event.MouseEvent)"
    ],
    "java.awt.image.pixelgrabber.setdimensions": [
        "java.awt.image.PixelGrabber.setDimensions(int,int)"
    ],
    "javax.imageio.stream.imageoutputstream.writeboolean": [
        "javax.imageio.stream.ImageOutputStream.writeBoolean(boolean)"
    ],
    "javax.swing.jpopupmenu.pack": [
        "javax.swing.JPopupMenu.pack()"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getwindowtitleinactiveforeground": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleInactiveForeground()"
    ],
    "java.awt.image.bufferedimage.getwritabletileindices": [
        "java.awt.image.BufferedImage.getWritableTileIndices()"
    ],
    "javax.sound.midi.sequence.getresolution": [
        "javax.sound.midi.Sequence.getResolution()"
    ],
    "javax.imageio.metadata.iiometadata.mergetree": [
        "javax.imageio.metadata.IIOMetadata.mergeTree(java.lang.String,org.w3c.dom.Node)"
    ],
    "java.awt.font.textlayout.getcaretshapes": [
        "java.awt.font.TextLayout.getCaretShapes(int,java.awt.geom.Rectangle2D,java.awt.font.TextLayout.CaretPolicy)",
        "java.awt.font.TextLayout.getCaretShapes(int,java.awt.geom.Rectangle2D)",
        "java.awt.font.TextLayout.getCaretShapes(int)"
    ],
    "javax.management.monitor.monitor.postderegister": [
        "javax.management.monitor.Monitor.postDeregister()"
    ],
    "java.awt.image.bufferedimage.getwritabletile": [
        "java.awt.image.BufferedImage.getWritableTile(int,int)"
    ],
    "javax.swing.plaf.synth.syntheditorpaneui.installdefaults": [
        "javax.swing.plaf.synth.SynthEditorPaneUI.installDefaults()"
    ],
    "java.util.function.doublebinaryoperator.applyasdouble": [
        "java.util.function.DoubleBinaryOperator.applyAsDouble(double,double)"
    ],
    "javax.swing.jpopupmenu.firepopupmenuwillbecomevisible": [
        "javax.swing.JPopupMenu.firePopupMenuWillBecomeVisible()"
    ],
    "java.time.chrono.chronozoneddatetime.withlateroffsetatoverlap": [
        "java.time.chrono.ChronoZonedDateTime.withLaterOffsetAtOverlap()"
    ],
    "java.awt.geom.rectangle2d.float.outcode": [
        "java.awt.geom.Rectangle2D.Float.outcode(double,double)"
    ],
    "javax.swing.text.glyphview.getforeground": [
        "javax.swing.text.GlyphView.getForeground()"
    ],
    "java.util.stream.stream.reduce": [
        "java.util.stream.Stream.reduce(java.util.function.BinaryOperator<T>)",
        "java.util.stream.Stream.reduce(java.util.function.BinaryOperator<java.util.stream.Stream>)",
        "java.util.stream.Stream.reduce(U,,? super,U>,java.util.function.BinaryOperator<U>)",
        "java.util.stream.Stream.reduce(java.util.stream.Stream,java.util.function.BinaryOperator<java.util.stream.Stream>)",
        "java.util.stream.Stream.reduce(T,java.util.function.BinaryOperator<T>)"
    ],
    "org.omg.dynamicany._dynenumstub.from_any": [
        "org.omg.DynamicAny._DynEnumStub.from_any(org.omg.CORBA.Any)"
    ],
    "javax.swing.plaf.basic.basictabbedpaneui.getbaselineresizebehavior": [
        "javax.swing.plaf.basic.BasicTabbedPaneUI.getBaselineResizeBehavior(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.synth.synthlistui.createui": [
        "javax.swing.plaf.synth.SynthListUI.createUI(javax.swing.JComponent)"
    ],
    "java.util.list.iterator": [
        "java.util.List.iterator()"
    ],
    "java.awt.checkbox.removeitemlistener": [
        "java.awt.Checkbox.removeItemListener(java.awt.event.ItemListener)"
    ],
    "javax.swing.tree.defaulttreecelleditor.createcontainer": [
        "javax.swing.tree.DefaultTreeCellEditor.createContainer()"
    ],
    "javax.swing.border.titledborder.paintborder": [
        "javax.swing.border.TitledBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)"
    ],
    "java.awt.textcomponent.getselectionend": [
        "java.awt.TextComponent.getSelectionEnd()"
    ],
    "java.lang.short.compare": [
        "java.lang.Short.compare(short,short)"
    ],
    "java.util.random.longs": [
        "java.util.Random.longs(long)",
        "java.util.Random.longs()"
    ],
    "javax.xml.stream.xmloutputfactory.ispropertysupported": [
        "javax.xml.stream.XMLOutputFactory.isPropertySupported(java.lang.String)"
    ],
    "javax.lang.model.element.elementvisitor.visitunknown": [
        "javax.lang.model.element.ElementVisitor.visitUnknown(javax.lang.model.element.Element,javax.lang.model.element.ElementVisitor)"
    ],
    "java.awt.image.samplemodel.setpixel": [
        "java.awt.image.SampleModel.setPixel(int,int,float[],java.awt.image.DataBuffer)",
        "java.awt.image.SampleModel.setPixel(int,int,double[],java.awt.image.DataBuffer)",
        "java.awt.image.SampleModel.setPixel(int,int,int[],java.awt.image.DataBuffer)"
    ],
    "java.io.bufferedreader.readline": [
        "java.io.BufferedReader.readLine()"
    ],
    "java.time.chrono.chronoperiod.minus": [
        "java.time.chrono.ChronoPeriod.minus(java.time.temporal.TemporalAmount)"
    ],
    "java.util.stream.intstream.generate": [
        "java.util.stream.IntStream.generate(java.util.function.IntSupplier)"
    ],
    "java.awt.event.windowevent.getoldstate": [
        "java.awt.event.WindowEvent.getOldState()"
    ],
    "javax.sound.sampled.enumcontrol.setvalue": [
        "javax.sound.sampled.EnumControl.setValue(java.lang.Object)"
    ],
    "javax.security.auth.callback.choicecallback.allowmultipleselections": [
        "javax.security.auth.callback.ChoiceCallback.allowMultipleSelections()"
    ],
    "java.util.stream.longstream.toarray": [
        "java.util.stream.LongStream.toArray()"
    ],
    "java.time.localtime.withnano": [
        "java.time.LocalTime.withNano(int)"
    ],
    "javax.swing.jlabel.setdisplayedmnemonicindex": [
        "javax.swing.JLabel.setDisplayedMnemonicIndex(int)"
    ],
    "javax.swing.plaf.basic.basictreeui.stopediting": [
        "javax.swing.plaf.basic.BasicTreeUI.stopEditing(javax.swing.JTree)"
    ],
    "java.text.stringcharacteriterator.equals": [
        "java.text.StringCharacterIterator.equals(java.lang.Object)"
    ],
    "org.xml.sax.inputsource.getpublicid": [
        "org.xml.sax.InputSource.getPublicId()"
    ],
    "javax.swing.jtree.removeselectionrow": [
        "javax.swing.JTree.removeSelectionRow(int)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintsplitpanedividerforeground": [
        "javax.swing.plaf.synth.SynthPainter.paintSplitPaneDividerForeground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)"
    ],
    "javax.swing.joptionpane.getinputvalue": [
        "javax.swing.JOptionPane.getInputValue()"
    ],
    "java.util.concurrent.concurrenthashmap.reducekeystodouble": [
        "java.util.concurrent.ConcurrentHashMap.reduceKeysToDouble(long,java.util.function.ToDoubleFunction<? super java.util.concurrent.ConcurrentHashMap>,double,java.util.function.DoubleBinaryOperator)",
        "java.util.concurrent.ConcurrentHashMap.reduceKeysToDouble(long,java.util.function.ToDoubleFunction<? super K>,double,java.util.function.DoubleBinaryOperator)"
    ],
    "java.security.policy.getprovider": [
        "java.security.Policy.getProvider()"
    ],
    "java.beans.introspector.setbeaninfosearchpath": [
        "java.beans.Introspector.setBeanInfoSearchPath(java.lang.String[])"
    ],
    "java.security.cert.ldapcertstoreparameters.getservername": [
        "java.security.cert.LDAPCertStoreParameters.getServerName()"
    ],
    "java.awt.menuitem.setactioncommand": [
        "java.awt.MenuItem.setActionCommand(java.lang.String)"
    ],
    "javax.xml.bind.datatypeconverterinterface.printdate": [
        "javax.xml.bind.DatatypeConverterInterface.printDate(java.util.Calendar)"
    ],
    "javax.management.objectname.getkeyproperty": [
        "javax.management.ObjectName.getKeyProperty(java.lang.String)"
    ],
    "javax.xml.ws.logicalmessage.getpayload": [
        "javax.xml.ws.LogicalMessage.getPayload()",
        "javax.xml.ws.LogicalMessage.getPayload(javax.xml.bind.JAXBContext)"
    ],
    "java.util.concurrent.scheduledthreadpoolexecutor.setremoveoncancelpolicy": [
        "java.util.concurrent.ScheduledThreadPoolExecutor.setRemoveOnCancelPolicy(boolean)"
    ],
    "javax.swing.plaf.synth.synthseparatorui.installui": [
        "javax.swing.plaf.synth.SynthSeparatorUI.installUI(javax.swing.JComponent)"
    ],
    "javax.management.openmbean.simpletype.readresolve": [
        "javax.management.openmbean.SimpleType.readResolve()"
    ],
    "javax.swing.jtree.getselectionpaths": [
        "javax.swing.JTree.getSelectionPaths()"
    ],
    "javax.print.attribute.hashattributeset.get": [
        "javax.print.attribute.HashAttributeSet.get(java.lang.Class<?>)"
    ],
    "java.util.linkedlist.set": [
        "java.util.LinkedList.set(int,E)",
        "java.util.LinkedList.set(int,java.util.LinkedList)"
    ],
    "javax.accessibility.accessiblecomponent.setbackground": [
        "javax.accessibility.AccessibleComponent.setBackground(java.awt.Color)"
    ],
    "javax.swing.jrootpane.getaccessiblecontext": [
        "javax.swing.JRootPane.getAccessibleContext()"
    ],
    "java.awt.image.componentsamplemodel.getnumdataelements": [
        "java.awt.image.ComponentSampleModel.getNumDataElements()"
    ],
    "javax.print.attribute.standard.pdloverridesupported.getenumvaluetable": [
        "javax.print.attribute.standard.PDLOverrideSupported.getEnumValueTable()"
    ],
    "java.text.dateformatsymbols.setweekdays": [
        "java.text.DateFormatSymbols.setWeekdays(java.lang.String)",
        "java.text.DateFormatSymbols.setWeekdays(java.lang.String[])"
    ],
    "javax.swing.defaultrowsorter.getviewrowcount": [
        "javax.swing.DefaultRowSorter.getViewRowCount()"
    ],
    "javax.xml.datatype.datatypefactory.newdurationdaytime": [
        "javax.xml.datatype.DatatypeFactory.newDurationDayTime(java.lang.String)",
        "javax.xml.datatype.DatatypeFactory.newDurationDayTime(boolean,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)",
        "javax.xml.datatype.DatatypeFactory.newDurationDayTime(long)",
        "javax.xml.datatype.DatatypeFactory.newDurationDayTime(boolean,int,int,int,int)"
    ],
    "java.awt.adjustable.getvalue": [
        "java.awt.Adjustable.getValue()"
    ],
    "java.security.spec.encodedkeyspec.getformat": [
        "java.security.spec.EncodedKeySpec.getFormat()"
    ],
    "java.util.stream.longstream.of": [
        "java.util.stream.LongStream.of(long...)",
        "java.util.stream.LongStream.of(long)"
    ],
    "java.awt.geom.path2d.float.transform": [
        "java.awt.geom.Path2D.Float.transform(java.awt.geom.AffineTransform)"
    ],
    "javax.swing.text.html.html.tag.tostring": [
        "javax.swing.text.html.HTML.Tag.toString()"
    ],
    "java.time.offsettime.withhour": [
        "java.time.OffsetTime.withHour(int)"
    ],
    "java.rmi.server.objid.tostring": [
        "java.rmi.server.ObjID.toString()"
    ],
    "javax.swing.tree.treepath.getlastpathcomponent": [
        "javax.swing.tree.TreePath.getLastPathComponent()"
    ],
    "java.util.resourcebundle.control.getformats": [
        "java.util.ResourceBundle.Control.getFormats(java.lang.String)"
    ],
    "javax.xml.stream.location.getlinenumber": [
        "javax.xml.stream.Location.getLineNumber()"
    ],
    "javax.swing.jlabel.getui": [
        "javax.swing.JLabel.getUI()"
    ],
    "javax.swing.undo.compoundedit.redo": [
        "javax.swing.undo.CompoundEdit.redo()"
    ],
    "org.omg.dynamicany._dynfixedstub.get_longlong": [
        "org.omg.DynamicAny._DynFixedStub.get_longlong()"
    ],
    "javax.swing.text.tableview.calculateminoraxisrequirements": [
        "javax.swing.text.TableView.calculateMinorAxisRequirements(int,javax.swing.SizeRequirements)"
    ],
    "java.lang.reflect.executable.togenericstring": [
        "java.lang.reflect.Executable.toGenericString()"
    ],
    "javax.imageio.plugins.jpeg.jpeghuffmantable.getvalues": [
        "javax.imageio.plugins.jpeg.JPEGHuffmanTable.getValues()"
    ],
    "java.beans.introspector.getbeaninfosearchpath": [
        "java.beans.Introspector.getBeanInfoSearchPath()"
    ],
    "java.awt.datatransfer.dataflavor.ismimetypeequal": [
        "java.awt.datatransfer.DataFlavor.isMimeTypeEqual(java.awt.datatransfer.DataFlavor)"
    ],
    "java.security.cert.policyqualifierinfo.getencoded": [
        "java.security.cert.PolicyQualifierInfo.getEncoded()"
    ],
    "java.util.function.supplier.get": [
        "java.util.function.Supplier.get()"
    ],
    "javax.swing.repaintmanager.removeinvalidcomponent": [
        "javax.swing.RepaintManager.removeInvalidComponent(javax.swing.JComponent)"
    ],
    "java.time.chrono.minguochronology.dateepochday": [
        "java.time.chrono.MinguoChronology.dateEpochDay(long)"
    ],
    "java.util.concurrent.phaser.getarrivedparties": [
        "java.util.concurrent.Phaser.getArrivedParties()"
    ],
    "javax.imageio.stream.imageoutputstream.write": [
        "javax.imageio.stream.ImageOutputStream.write(byte[])",
        "javax.imageio.stream.ImageOutputStream.write(int)",
        "javax.imageio.stream.ImageOutputStream.write(byte[],int,int)"
    ],
    "javax.print.attribute.attributeset.addall": [
        "javax.print.attribute.AttributeSet.addAll(javax.print.attribute.AttributeSet)"
    ],
    "javax.imageio.plugins.jpeg.jpegqtable.getscaledinstance": [
        "javax.imageio.plugins.jpeg.JPEGQTable.getScaledInstance(float,boolean)"
    ],
    "java.beans.vetoablechangelistener.vetoablechange": [
        "java.beans.VetoableChangeListener.vetoableChange(java.beans.PropertyChangeEvent)"
    ],
    "javax.xml.bind.datatypeconverter.parseinteger": [
        "javax.xml.bind.DatatypeConverter.parseInteger(java.lang.String)"
    ],
    "javax.swing.jtabbedpane.getuiclassid": [
        "javax.swing.JTabbedPane.getUIClassID()"
    ],
    "javax.lang.model.type.typevisitor.visitarray": [
        "javax.lang.model.type.TypeVisitor.visitArray(javax.lang.model.type.ArrayType,javax.lang.model.type.TypeVisitor)"
    ],
    "javax.swing.debuggraphics.flashtime": [
        "javax.swing.DebugGraphics.flashTime()"
    ],
    "javax.swing.plaf.basic.basictoolbarui.isrolloverborders": [
        "javax.swing.plaf.basic.BasicToolBarUI.isRolloverBorders()"
    ],
    "javax.swing.jpanel.getuiclassid": [
        "javax.swing.JPanel.getUIClassID()"
    ],
    "javax.swing.plaf.metal.metalrootpaneui.uninstallui": [
        "javax.swing.plaf.metal.MetalRootPaneUI.uninstallUI(javax.swing.JComponent)"
    ],
    "java.lang.math.log10": [
        "java.lang.Math.log10(double)"
    ],
    "java.text.bidi.reordervisually": [
        "java.text.Bidi.reorderVisually(byte[],int,java.lang.Object[],int,int)",
        "java.text.Bidi.reorderVisually(byte[],int,java.lang.Object,int,int)"
    ],
    "javax.imageio.event.iioreadupdatelistener.passstarted": [
        "javax.imageio.event.IIOReadUpdateListener.passStarted(javax.imageio.ImageReader,java.awt.image.BufferedImage,int,int,int,int,int,int,int,int[])"
    ],
    "javax.security.auth.privatecredentialpermission.getcredentialclass": [
        "javax.security.auth.PrivateCredentialPermission.getCredentialClass()"
    ],
    "java.time.localtime.plusminutes": [
        "java.time.LocalTime.plusMinutes(long)"
    ],
    "javax.management.immutabledescriptor.removefield": [
        "javax.management.ImmutableDescriptor.removeField(java.lang.String)"
    ],
    "java.awt.awteventmulticaster.mousepressed": [
        "java.awt.AWTEventMulticaster.mousePressed(java.awt.event.MouseEvent)"
    ],
    "javax.swing.jtextfield.sethorizontalalignment": [
        "javax.swing.JTextField.setHorizontalAlignment(int)"
    ],
    "java.lang.class.forname": [
        "java.lang.Class.forName(java.lang.String)",
        "java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader)"
    ],
    "javax.swing.text.jtextcomponent.getui": [
        "javax.swing.text.JTextComponent.getUI()"
    ],
    "javax.script.scriptcontext.getwriter": [
        "javax.script.ScriptContext.getWriter()"
    ],
    "java.awt.image.convolveop.createcompatibledestimage": [
        "java.awt.image.ConvolveOp.createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)"
    ],
    "org.xml.sax.helpers.defaulthandler.startelement": [
        "org.xml.sax.helpers.DefaultHandler.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
    ],
    "javax.swing.jcomponent.getancestorlisteners": [
        "javax.swing.JComponent.getAncestorListeners()"
    ],
    "javax.imageio.stream.iiobytebuffer.setoffset": [
        "javax.imageio.stream.IIOByteBuffer.setOffset(int)"
    ],
    "javax.swing.plaf.basic.basicspinnerui.createlayout": [
        "javax.swing.plaf.basic.BasicSpinnerUI.createLayout()"
    ],
    "java.util.prefs.preferences.addnodechangelistener": [
        "java.util.prefs.Preferences.addNodeChangeListener(java.util.prefs.NodeChangeListener)"
    ],
    "java.awt.geom.rectangle2d.hashcode": [
        "java.awt.geom.Rectangle2D.hashCode()"
    ],
    "javax.swing.jtextfield.actionpropertychanged": [
        "javax.swing.JTextField.actionPropertyChanged(javax.swing.Action,java.lang.String)"
    ],
    "org.omg.cosnaming.bindingiteratoroperations.destroy": [
        "org.omg.CosNaming.BindingIteratorOperations.destroy()"
    ],
    "java.awt.font.graphicattribute.getdescent": [
        "java.awt.font.GraphicAttribute.getDescent()"
    ],
    "java.util.zip.zipentry.gettime": [
        "java.util.zip.ZipEntry.getTime()"
    ],
    "java.sql.databasemetadata.supportsdatamanipulationtransactionsonly": [
        "java.sql.DatabaseMetaData.supportsDataManipulationTransactionsOnly()"
    ],
    "java.awt.dnd.droptargetdropevent.getsourceactions": [
        "java.awt.dnd.DropTargetDropEvent.getSourceActions()"
    ],
    "javax.net.ssl.handshakecompletedevent.getpeerprincipal": [
        "javax.net.ssl.HandshakeCompletedEvent.getPeerPrincipal()"
    ],
    "org.w3c.dom.ls.domimplementationls.createlsoutput": [
        "org.w3c.dom.ls.DOMImplementationLS.createLSOutput()"
    ],
    "javax.swing.event.ancestorevent.getancestor": [
        "javax.swing.event.AncestorEvent.getAncestor()"
    ],
    "java.time.chrono.minguochronology.date": [
        "java.time.chrono.MinguoChronology.date(int,int,int)",
        "java.time.chrono.MinguoChronology.date(java.time.chrono.Era,int,int,int)"
    ],
    "javax.sound.midi.sequencer.getslavesyncmodes": [
        "javax.sound.midi.Sequencer.getSlaveSyncModes()"
    ],
    "java.awt.fontmetrics.getfont": [
        "java.awt.FontMetrics.getFont()"
    ],
    "java.sql.resultset.getbigdecimal": [
        "java.sql.ResultSet.getBigDecimal(int)",
        "java.sql.ResultSet.getBigDecimal(java.lang.String)"
    ],
    "java.awt.event.inputevent.getmaskforbutton": [
        "java.awt.event.InputEvent.getMaskForButton(int)"
    ],
    "javax.swing.tree.abstractlayoutcache.getvisiblechildcount": [
        "javax.swing.tree.AbstractLayoutCache.getVisibleChildCount(javax.swing.tree.TreePath)"
    ],
    "javax.swing.jtabbedpane.remove": [
        "javax.swing.JTabbedPane.remove(int)",
        "javax.swing.JTabbedPane.remove(java.awt.Component)"
    ],
    "java.awt.graphics2d.fill3drect": [
        "java.awt.Graphics2D.fill3DRect(int,int,int,int,boolean)"
    ],
    "java.awt.dnd.draggestureevent.startdrag": [
        "java.awt.dnd.DragGestureEvent.startDrag(java.awt.Cursor,java.awt.Image,java.awt.Point,java.awt.datatransfer.Transferable,java.awt.dnd.DragSourceListener)",
        "java.awt.dnd.DragGestureEvent.startDrag(java.awt.Cursor,java.awt.datatransfer.Transferable,java.awt.dnd.DragSourceListener)",
        "java.awt.dnd.DragGestureEvent.startDrag(java.awt.Cursor,java.awt.datatransfer.Transferable)"
    ],
    "java.util.locale.builder.build": [
        "java.util.Locale.Builder.build()"
    ],
    "javax.xml.validation.schemafactory.seterrorhandler": [
        "javax.xml.validation.SchemaFactory.setErrorHandler(org.xml.sax.ErrorHandler)"
    ],
    "java.awt.adjustable.getblockincrement": [
        "java.awt.Adjustable.getBlockIncrement()"
    ],
    "java.awt.focustraversalpolicy.getlastcomponent": [
        "java.awt.FocusTraversalPolicy.getLastComponent(java.awt.Container)"
    ],
    "java.security.keyrep.type.valueof": [
        "java.security.KeyRep.Type.valueOf(java.lang.String)"
    ],
    "java.security.keystore.size": [
        "java.security.KeyStore.size()"
    ],
    "java.util.concurrent.executors.newcachedthreadpool": [
        "java.util.concurrent.Executors.newCachedThreadPool()",
        "java.util.concurrent.Executors.newCachedThreadPool(java.util.concurrent.ThreadFactory)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintlistbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintListBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.lang.string.comparetoignorecase": [
        "java.lang.String.compareToIgnoreCase(java.lang.String)"
    ],
    "javax.swing.text.html.parser.parser.parse": [
        "javax.swing.text.html.parser.Parser.parse(java.io.Reader)"
    ],
    "javax.swing.text.asyncboxview.getnextvisualpositionfrom": [
        "javax.swing.text.AsyncBoxView.getNextVisualPositionFrom(int,javax.swing.text.Position.Bias,java.awt.Shape,int,javax.swing.text.Position.Bias[])"
    ],
    "javax.management.openmbean.compositetype.getdescription": [
        "javax.management.openmbean.CompositeType.getDescription(java.lang.String)"
    ],
    "java.time.zoneddatetime.plusmonths": [
        "java.time.ZonedDateTime.plusMonths(long)"
    ],
    "javax.swing.table.defaulttablecellrenderer.repaint": [
        "javax.swing.table.DefaultTableCellRenderer.repaint(long,int,int,int,int)",
        "javax.swing.table.DefaultTableCellRenderer.repaint(java.awt.Rectangle)",
        "javax.swing.table.DefaultTableCellRenderer.repaint()"
    ],
    "javax.xml.ws.spi.provider.createandpublishendpoint": [
        "javax.xml.ws.spi.Provider.createAndPublishEndpoint(java.lang.String,java.lang.Object,javax.xml.ws.WebServiceFeature...)",
        "javax.xml.ws.spi.Provider.createAndPublishEndpoint(java.lang.String,java.lang.Object)"
    ],
    "javax.sql.rowset.serial.serialclob.clone": [
        "javax.sql.rowset.serial.SerialClob.clone()"
    ],
    "java.security.security.getproviders": [
        "java.security.Security.getProviders(,java.lang.String>)",
        "java.security.Security.getProviders()",
        "java.security.Security.getProviders(java.lang.String)"
    ],
    "java.awt.image.renderedimage.getwidth": [
        "java.awt.image.RenderedImage.getWidth()"
    ],
    "javax.xml.crypto.dom.domstructure.getnode": [
        "javax.xml.crypto.dom.DOMStructure.getNode()"
    ],
    "javax.xml.stream.xmleventreader.nextevent": [
        "javax.xml.stream.XMLEventReader.nextEvent()"
    ],
    "java.awt.geom.quadcurve2d.float.getx1": [
        "java.awt.geom.QuadCurve2D.Float.getX1()"
    ],
    "javax.imageio.metadata.iiometadatanode.getchildnodes": [
        "javax.imageio.metadata.IIOMetadataNode.getChildNodes()"
    ],
    "javax.swing.jfilechooser.fireactionperformed": [
        "javax.swing.JFileChooser.fireActionPerformed(java.lang.String)"
    ],
    "org.xml.sax.ext.lexicalhandler.endentity": [
        "org.xml.sax.ext.LexicalHandler.endEntity(java.lang.String)"
    ],
    "java.sql.resultset.afterlast": [
        "java.sql.ResultSet.afterLast()"
    ],
    "java.awt.pageattributes.setorientationrequestedtodefault": [
        "java.awt.PageAttributes.setOrientationRequestedToDefault()"
    ],
    "javax.crypto.spec.pbeparameterspec.getparameterspec": [
        "javax.crypto.spec.PBEParameterSpec.getParameterSpec()"
    ],
    "org.omg.corba_2_3.portable.delegate.get_codebase": [
        "org.omg.CORBA_2_3.portable.Delegate.get_codebase(org.omg.CORBA.Object)"
    ],
    "java.util.deque.removelastoccurrence": [
        "java.util.Deque.removeLastOccurrence(java.lang.Object)"
    ],
    "java.text.decimalformatsymbols.setinfinity": [
        "java.text.DecimalFormatSymbols.setInfinity(java.lang.String)"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.getowner": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.getOwner()"
    ],
    "java.nio.bytebuffer.getfloat": [
        "java.nio.ByteBuffer.getFloat(int)",
        "java.nio.ByteBuffer.getFloat()"
    ],
    "javax.swing.plaf.multi.multispinnerui.contains": [
        "javax.swing.plaf.multi.MultiSpinnerUI.contains(javax.swing.JComponent,int,int)"
    ],
    "org.w3c.dom.ls.lsparserfilter.getwhattoshow": [
        "org.w3c.dom.ls.LSParserFilter.getWhatToShow()"
    ],
    "java.awt.image.samplemodel.getheight": [
        "java.awt.image.SampleModel.getHeight()"
    ],
    "java.util.concurrent.completionstage.thencombine": [
        "java.util.concurrent.CompletionStage.thenCombine(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiFunction<? super,? super,? extends V>)"
    ],
    "java.awt.geom.quadcurve2d.float.getctrlx": [
        "java.awt.geom.QuadCurve2D.Float.getCtrlX()"
    ],
    "javax.xml.soap.node.recyclenode": [
        "javax.xml.soap.Node.recycleNode()"
    ],
    "javax.sql.statementevent.getstatement": [
        "javax.sql.StatementEvent.getStatement()"
    ],
    "javax.lang.model.type.executabletype.getreceivertype": [
        "javax.lang.model.type.ExecutableType.getReceiverType()"
    ],
    "org.omg.dynamicany._dynarraystub.equal": [
        "org.omg.DynamicAny._DynArrayStub.equal(org.omg.DynamicAny.DynAny)"
    ],
    "java.util.map.replace": [
        "java.util.Map.replace(K,V,V)",
        "java.util.Map.replace(java.util.Map,java.util.Map,java.util.Map)",
        "java.util.Map.replace(java.util.Map,java.util.Map)"
    ],
    "java.awt.color.icc_colorspace.torgb": [
        "java.awt.color.ICC_ColorSpace.toRGB(float[])"
    ],
    "javax.print.attribute.standard.datetimeatprocessing.equals": [
        "javax.print.attribute.standard.DateTimeAtProcessing.equals(java.lang.Object)"
    ],
    "java.awt.choice.add": [
        "java.awt.Choice.add(java.lang.String)"
    ],
    "java.awt.dialog.modalitytype.valueof": [
        "java.awt.Dialog.ModalityType.valueOf(java.lang.String)"
    ],
    "javax.swing.text.segment.getbeginindex": [
        "javax.swing.text.Segment.getBeginIndex()"
    ],
    "java.security.cert.certificatefactory.gettype": [
        "java.security.cert.CertificateFactory.getType()"
    ],
    "javax.xml.validation.schemafactory.getproperty": [
        "javax.xml.validation.SchemaFactory.getProperty(java.lang.String)"
    ],
    "java.awt.scrollpaneadjustable.setvalue": [
        "java.awt.ScrollPaneAdjustable.setValue(int)"
    ],
    "javax.swing.plaf.basic.basictextfieldui.getpropertyprefix": [
        "javax.swing.plaf.basic.BasicTextFieldUI.getPropertyPrefix()"
    ],
    "java.net.socketpermission.newpermissioncollection": [
        "java.net.SocketPermission.newPermissionCollection()"
    ],
    "java.nio.channels.spi.abstractselector.cancelledkeys": [
        "java.nio.channels.spi.AbstractSelector.cancelledKeys()"
    ],
    "java.io.chararraywriter.size": [
        "java.io.CharArrayWriter.size()"
    ],
    "java.awt.geom.rectangularshape.getcenterx": [
        "java.awt.geom.RectangularShape.getCenterX()"
    ],
    "javax.swing.plaf.synth.synthmenuitemui.createui": [
        "javax.swing.plaf.synth.SynthMenuItemUI.createUI(javax.swing.JComponent)"
    ],
    "java.io.file.isdirectory": [
        "java.io.File.isDirectory()"
    ],
    "javax.accessibility.accessibletable.setaccessiblecolumndescription": [
        "javax.accessibility.AccessibleTable.setAccessibleColumnDescription(int,javax.accessibility.Accessible)"
    ],
    "java.net.uri.getrawschemespecificpart": [
        "java.net.URI.getRawSchemeSpecificPart()"
    ],
    "javax.swing.text.glyphview.breakview": [
        "javax.swing.text.GlyphView.breakView(int,int,float,float)"
    ],
    "java.util.concurrent.copyonwritearraylist.tostring": [
        "java.util.concurrent.CopyOnWriteArrayList.toString()"
    ],
    "javax.xml.parsers.saxparserfactory.isvalidating": [
        "javax.xml.parsers.SAXParserFactory.isValidating()"
    ],
    "java.awt.toolkit.createmenuitem": [
        "java.awt.Toolkit.createMenuItem(java.awt.MenuItem)"
    ],
    "java.io.fileoutputstream.getfd": [
        "java.io.FileOutputStream.getFD()"
    ],
    "java.util.arraylist.ensurecapacity": [
        "java.util.ArrayList.ensureCapacity(int)"
    ],
    "javax.naming.compoundname.size": [
        "javax.naming.CompoundName.size()"
    ],
    "javax.xml.ws.spi.http.httpexchange.getprotocol": [
        "javax.xml.ws.spi.http.HttpExchange.getProtocol()"
    ],
    "java.awt.print.pageformat.getimageablex": [
        "java.awt.print.PageFormat.getImageableX()"
    ],
    "javax.swing.plaf.synth.synthpainter.painttoolbarbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintToolBarBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",
        "javax.swing.plaf.synth.SynthPainter.paintToolBarBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)"
    ],
    "java.awt.geom.rectangle2d.double.getheight": [
        "java.awt.geom.Rectangle2D.Double.getHeight()"
    ],
    "java.util.concurrent.atomic.atomicintegerfieldupdater.getandincrement": [
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndIncrement(java.util.concurrent.atomic.AtomicIntegerFieldUpdater)",
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndIncrement(T)"
    ],
    "javax.swing.plaf.multi.multidesktopiconui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiDesktopIconUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "javax.swing.table.abstracttablemodel.firetabledatachanged": [
        "javax.swing.table.AbstractTableModel.fireTableDataChanged()"
    ],
    "javax.swing.tree.defaulttreecellrenderer.updateui": [
        "javax.swing.tree.DefaultTreeCellRenderer.updateUI()"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readurl": [
        "javax.sql.rowset.serial.SQLInputImpl.readURL()"
    ],
    "javax.swing.table.defaulttablecolumnmodel.addcolumnmodellistener": [
        "javax.swing.table.DefaultTableColumnModel.addColumnModelListener(javax.swing.event.TableColumnModelListener)"
    ],
    "java.awt.font.linebreakmeasurer.deletechar": [
        "java.awt.font.LineBreakMeasurer.deleteChar(java.text.AttributedCharacterIterator,int)"
    ],
    "java.util.stream.longstream.empty": [
        "java.util.stream.LongStream.empty()"
    ],
    "java.time.year.now": [
        "java.time.Year.now(java.time.ZoneId)",
        "java.time.Year.now(java.time.Clock)",
        "java.time.Year.now()"
    ],
    "org.omg.corba.doubleholder._read": [
        "org.omg.CORBA.DoubleHolder._read(org.omg.CORBA.portable.InputStream)"
    ],
    "javax.swing.event.hyperlinkevent.getsourceelement": [
        "javax.swing.event.HyperlinkEvent.getSourceElement()"
    ],
    "java.util.concurrent.completionstage.handleasync": [
        "java.util.concurrent.CompletionStage.handleAsync(java.util.function.BiFunction<? super,,? extends U>)",
        "java.util.concurrent.CompletionStage.handleAsync(java.util.function.BiFunction<? super,,? extends U>,java.util.concurrent.Executor)"
    ],
    "javax.swing.uidefaults.put": [
        "javax.swing.UIDefaults.put(java.lang.Object,java.lang.Object)"
    ],
    "java.time.clock.tickminutes": [
        "java.time.Clock.tickMinutes(java.time.ZoneId)"
    ],
    "java.awt.component.addinputmethodlistener": [
        "java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"
    ],
    "javax.print.attribute.standard.printermessagefromoperator.equals": [
        "javax.print.attribute.standard.PrinterMessageFromOperator.equals(java.lang.Object)"
    ],
    "javax.swing.table.tablecolumn.setcelleditor": [
        "javax.swing.table.TableColumn.setCellEditor(javax.swing.table.TableCellEditor)"
    ],
    "javax.management.remote.rmi.rmiconnection.setattribute": [
        "javax.management.remote.rmi.RMIConnection.setAttribute(javax.management.ObjectName,java.rmi.MarshalledObject,javax.security.auth.Subject)"
    ],
    "javax.management.query.finalsubstring": [
        "javax.management.Query.finalSubString(javax.management.AttributeValueExp,javax.management.StringValueExp)"
    ],
    "java.util.concurrent.copyonwritearrayset.addall": [
        "java.util.concurrent.CopyOnWriteArraySet.addAll(java.util.Collection<? extends E>)",
        "java.util.concurrent.CopyOnWriteArraySet.addAll(java.util.Collection<? extends java.util.concurrent.CopyOnWriteArraySet>)"
    ],
    "javax.swing.text.boxview.getminimumspan": [
        "javax.swing.text.BoxView.getMinimumSpan(int)"
    ],
    "javax.management.timer.timermbean.getallnotificationids": [
        "javax.management.timer.TimerMBean.getAllNotificationIDs()"
    ],
    "java.text.dateformat.setcalendar": [
        "java.text.DateFormat.setCalendar(java.util.Calendar)"
    ],
    "java.awt.choice.paramstring": [
        "java.awt.Choice.paramString()"
    ],
    "java.time.localdate.plus": [
        "java.time.LocalDate.plus(long,java.time.temporal.TemporalUnit)",
        "java.time.LocalDate.plus(java.time.temporal.TemporalAmount)"
    ],
    "java.util.collections.swap": [
        "java.util.Collections.swap(java.util.List<?>,int,int)"
    ],
    "javax.swing.text.glyphview.changedupdate": [
        "javax.swing.text.GlyphView.changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "javax.naming.reference.getfactoryclasslocation": [
        "javax.naming.Reference.getFactoryClassLocation()"
    ],
    "javax.swing.table.jtableheader.getheaderrect": [
        "javax.swing.table.JTableHeader.getHeaderRect(int)"
    ],
    "java.util.collections.emptyiterator": [
        "java.util.Collections.emptyIterator()"
    ],
    "java.io.outputstreamwriter.getencoding": [
        "java.io.OutputStreamWriter.getEncoding()"
    ],
    "java.util.logging.logger.getfilter": [
        "java.util.logging.Logger.getFilter()"
    ],
    "java.lang.math.nextup": [
        "java.lang.Math.nextUp(double)",
        "java.lang.Math.nextUp(float)"
    ],
    "javax.swing.rowsorter.getsortkeys": [
        "javax.swing.RowSorter.getSortKeys()"
    ],
    "javax.swing.jcomponent.update": [
        "javax.swing.JComponent.update(java.awt.Graphics)"
    ],
    "java.awt.toolkit.createdragsourcecontextpeer": [
        "java.awt.Toolkit.createDragSourceContextPeer(java.awt.dnd.DragGestureEvent)"
    ],
    "java.awt.image.raster.getsamplemodeltranslatex": [
        "java.awt.image.Raster.getSampleModelTranslateX()"
    ],
    "javax.swing.jpopupmenu.getsubelements": [
        "javax.swing.JPopupMenu.getSubElements()"
    ],
    "javax.swing.text.html.parser.documentparser.handleemptytag": [
        "javax.swing.text.html.parser.DocumentParser.handleEmptyTag(javax.swing.text.html.parser.TagElement)"
    ],
    "java.nio.channels.selector.wakeup": [
        "java.nio.channels.Selector.wakeup()"
    ],
    "java.security.spec.ecfieldfp.equals": [
        "java.security.spec.ECFieldFp.equals(java.lang.Object)"
    ],
    "javax.imageio.spi.imagereaderwriterspi.getstreammetadataformat": [
        "javax.imageio.spi.ImageReaderWriterSpi.getStreamMetadataFormat(java.lang.String)"
    ],
    "java.awt.font.graphicattribute.getjustificationinfo": [
        "java.awt.font.GraphicAttribute.getJustificationInfo()"
    ],
    "javax.swing.border.bevelborder.getshadowoutercolor": [
        "javax.swing.border.BevelBorder.getShadowOuterColor()",
        "javax.swing.border.BevelBorder.getShadowOuterColor(java.awt.Component)"
    ],
    "javax.swing.jtoolbar.getcomponentatindex": [
        "javax.swing.JToolBar.getComponentAtIndex(int)"
    ],
    "javax.swing.defaultbuttonmodel.addactionlistener": [
        "javax.swing.DefaultButtonModel.addActionListener(java.awt.event.ActionListener)"
    ],
    "javax.swing.rootpanecontainer.setlayeredpane": [
        "javax.swing.RootPaneContainer.setLayeredPane(javax.swing.JLayeredPane)"
    ],
    "java.nio.file.filevisitor.postvisitdirectory": [
        "java.nio.file.FileVisitor.postVisitDirectory(java.nio.file.FileVisitor,java.io.IOException)",
        "java.nio.file.FileVisitor.postVisitDirectory(T,java.io.IOException)"
    ],
    "java.lang.byte.compare": [
        "java.lang.Byte.compare(byte,byte)"
    ],
    "javax.sql.rowset.cachedrowset.getoriginal": [
        "javax.sql.rowset.CachedRowSet.getOriginal()"
    ],
    "javax.swing.celleditor.stopcellediting": [
        "javax.swing.CellEditor.stopCellEditing()"
    ],
    "java.time.chrono.hijrahdate.plus": [
        "java.time.chrono.HijrahDate.plus(java.time.temporal.TemporalAmount)"
    ],
    "javax.xml.transform.transformerfactory.newtemplates": [
        "javax.xml.transform.TransformerFactory.newTemplates(javax.xml.transform.Source)"
    ],
    "javax.xml.transform.sax.saxresult.setsystemid": [
        "javax.xml.transform.sax.SAXResult.setSystemId(java.lang.String)"
    ],
    "javax.swing.text.zoneview.updatechildren": [
        "javax.swing.text.ZoneView.updateChildren(javax.swing.event.DocumentEvent.ElementChange,javax.swing.event.DocumentEvent,javax.swing.text.ViewFactory)"
    ],
    "java.awt.geom.area.clone": [
        "java.awt.geom.Area.clone()"
    ],
    "javax.swing.plaf.synth.synthoptionpaneui.propertychange": [
        "javax.swing.plaf.synth.SynthOptionPaneUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "javax.swing.plaf.synth.synthlistui.installdefaults": [
        "javax.swing.plaf.synth.SynthListUI.installDefaults()"
    ],
    "java.util.concurrent.blockingdeque.putfirst": [
        "java.util.concurrent.BlockingDeque.putFirst(E)",
        "java.util.concurrent.BlockingDeque.putFirst(java.util.concurrent.BlockingDeque)"
    ],
    "javax.swing.plaf.basic.basictextui.getcomponent": [
        "javax.swing.plaf.basic.BasicTextUI.getComponent()"
    ],
    "javax.swing.plaf.basic.basicscrollbarui.getmaximumthumbsize": [
        "javax.swing.plaf.basic.BasicScrollBarUI.getMaximumThumbSize()"
    ],
    "java.awt.scrollbar.getminimum": [
        "java.awt.Scrollbar.getMinimum()"
    ],
    "javax.swing.text.maskformatter.getinvalidcharacters": [
        "javax.swing.text.MaskFormatter.getInvalidCharacters()"
    ],
    "java.util.iterator.foreachremaining": [
        "java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super java.util.Iterator>)",
        "java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)"
    ],
    "javax.swing.text.boxview.getspan": [
        "javax.swing.text.BoxView.getSpan(int,int)"
    ],
    "java.nio.file.securedirectorystream.getfileattributeview": [
        "java.nio.file.SecureDirectoryStream.getFileAttributeView(java.nio.file.SecureDirectoryStream,java.lang.Class<V>,java.nio.file.LinkOption...)",
        "java.nio.file.SecureDirectoryStream.getFileAttributeView(java.lang.Class<V>)"
    ],
    "java.sql.resultset.updatelong": [
        "java.sql.ResultSet.updateLong(int,long)",
        "java.sql.ResultSet.updateLong(java.lang.String,long)"
    ],
    "java.nio.file.files.readattributes": [
        "java.nio.file.Files.readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption...)",
        "java.nio.file.Files.readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption)",
        "java.nio.file.Files.readAttributes(java.nio.file.Path,java.lang.Class<A>,java.nio.file.LinkOption...)"
    ],
    "java.util.function.intunaryoperator.andthen": [
        "java.util.function.IntUnaryOperator.andThen(java.util.function.IntUnaryOperator)"
    ],
    "java.awt.geom.cubiccurve2d.double.getctrly2": [
        "java.awt.geom.CubicCurve2D.Double.getCtrlY2()"
    ],
    "java.awt.container.findcomponentat": [
        "java.awt.Container.findComponentAt(int,int)",
        "java.awt.Container.findComponentAt(java.awt.Point)"
    ],
    "javax.swing.layoutstyle.setinstance": [
        "javax.swing.LayoutStyle.setInstance(javax.swing.LayoutStyle)"
    ],
    "java.awt.scrollbar.getunitincrement": [
        "java.awt.Scrollbar.getUnitIncrement()"
    ],
    "javax.swing.jtable.rowatpoint": [
        "javax.swing.JTable.rowAtPoint(java.awt.Point)"
    ],
    "java.nio.channels.datagramchannel.receive": [
        "java.nio.channels.DatagramChannel.receive(java.nio.ByteBuffer)"
    ],
    "org.w3c.dom.node.getfeature": [
        "org.w3c.dom.Node.getFeature(java.lang.String,java.lang.String)"
    ],
    "javax.swing.text.abstractdocument.getdocumentproperties": [
        "javax.swing.text.AbstractDocument.getDocumentProperties()"
    ],
    "org.omg.dynamicany._dynsequencestub.insert_longlong": [
        "org.omg.DynamicAny._DynSequenceStub.insert_longlong(long)"
    ],
    "javax.swing.jformattedtextfield.abstractformatterfactory.getformatter": [
        "javax.swing.JFormattedTextField.AbstractFormatterFactory.getFormatter(javax.swing.JFormattedTextField)"
    ],
    "javax.script.simplescriptcontext.getbindings": [
        "javax.script.SimpleScriptContext.getBindings(int)"
    ],
    "javax.swing.jpanel.getaccessiblecontext": [
        "javax.swing.JPanel.getAccessibleContext()"
    ],
    "javax.management.remote.notificationresult.getearliestsequencenumber": [
        "javax.management.remote.NotificationResult.getEarliestSequenceNumber()"
    ],
    "javax.xml.bind.helpers.abstractunmarshallerimpl.seteventhandler": [
        "javax.xml.bind.helpers.AbstractUnmarshallerImpl.setEventHandler(javax.xml.bind.ValidationEventHandler)"
    ],
    "java.nio.file.attribute.aclentry.hashcode": [
        "java.nio.file.attribute.AclEntry.hashCode()"
    ],
    "javax.swing.tree.defaultmutabletreenode.getprevioussibling": [
        "javax.swing.tree.DefaultMutableTreeNode.getPreviousSibling()"
    ],
    "java.util.concurrent.locks.readwritelock.readlock": [
        "java.util.concurrent.locks.ReadWriteLock.readLock()"
    ],
    "javax.swing.imageicon.getdescription": [
        "javax.swing.ImageIcon.getDescription()"
    ],
    "java.security.spec.rsaprivatekeyspec.getmodulus": [
        "java.security.spec.RSAPrivateKeySpec.getModulus()"
    ],
    "java.awt.gridlayout.getcolumns": [
        "java.awt.GridLayout.getColumns()"
    ],
    "javax.imageio.imagetypespecifier.getbitsperband": [
        "javax.imageio.ImageTypeSpecifier.getBitsPerBand(int)"
    ],
    "javax.rmi.corba.utildelegate.createvaluehandler": [
        "javax.rmi.CORBA.UtilDelegate.createValueHandler()"
    ],
    "java.sql.sqloutput.writeasciistream": [
        "java.sql.SQLOutput.writeAsciiStream(java.io.InputStream)"
    ],
    "javax.swing.jcombobox.removeitemlistener": [
        "javax.swing.JComboBox.removeItemListener(java.awt.event.ItemListener)"
    ],
    "java.math.biginteger.intvalueexact": [
        "java.math.BigInteger.intValueExact()"
    ],
    "java.awt.font.glyphvector.getglyphcode": [
        "java.awt.font.GlyphVector.getGlyphCode(int)"
    ],
    "java.lang.string.compareto": [
        "java.lang.String.compareTo(java.lang.String)"
    ],
    "java.beans.defaultpersistencedelegate.instantiate": [
        "java.beans.DefaultPersistenceDelegate.instantiate(java.lang.Object,java.beans.Encoder)"
    ],
    "javax.xml.stream.events.attribute.getvalue": [
        "javax.xml.stream.events.Attribute.getValue()"
    ],
    "java.util.concurrent.concurrentskiplistmap.computeifpresent": [
        "java.util.concurrent.ConcurrentSkipListMap.computeIfPresent(java.util.concurrent.ConcurrentSkipListMap,java.util.function.BiFunction<? super,? super,? extends java.util.concurrent.ConcurrentSkipListMap>)",
        "java.util.concurrent.ConcurrentSkipListMap.computeIfPresent(K,java.util.function.BiFunction<? super,? super,? extends V>)"
    ],
    "javax.swing.jspinner.dateeditor.getmodel": [
        "javax.swing.JSpinner.DateEditor.getModel()"
    ],
    "javax.naming.ldap.ldapname.getrdn": [
        "javax.naming.ldap.LdapName.getRdn(int)"
    ],
    "javax.print.attribute.urisyntax.geturi": [
        "javax.print.attribute.URISyntax.getURI()"
    ],
    "javax.swing.tooltipmanager.registercomponent": [
        "javax.swing.ToolTipManager.registerComponent(javax.swing.JComponent)"
    ],
    "java.nio.charset.charset.availablecharsets": [
        "java.nio.charset.Charset.availableCharsets()"
    ],
    "java.awt.image.samplemodel.setsamples": [
        "java.awt.image.SampleModel.setSamples(int,int,int,int,int,float[],java.awt.image.DataBuffer)",
        "java.awt.image.SampleModel.setSamples(int,int,int,int,int,int[],java.awt.image.DataBuffer)",
        "java.awt.image.SampleModel.setSamples(int,int,int,int,int,double[],java.awt.image.DataBuffer)"
    ],
    "javax.swing.text.boxview.baselinerequirements": [
        "javax.swing.text.BoxView.baselineRequirements(int,javax.swing.SizeRequirements)"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.getdtdhandler": [
        "org.xml.sax.helpers.XMLFilterImpl.getDTDHandler()"
    ],
    "java.math.bigdecimal.min": [
        "java.math.BigDecimal.min(java.math.BigDecimal)"
    ],
    "java.beans.simplebeaninfo.getdefaulteventindex": [
        "java.beans.SimpleBeanInfo.getDefaultEventIndex()"
    ],
    "java.text.numberformat.setparseintegeronly": [
        "java.text.NumberFormat.setParseIntegerOnly(boolean)"
    ],
    "javax.swing.text.abstractwriter.text": [
        "javax.swing.text.AbstractWriter.text(javax.swing.text.Element)"
    ],
    "java.beans.propertydescriptor.getwritemethod": [
        "java.beans.PropertyDescriptor.getWriteMethod()"
    ],
    "java.awt.graphics.cliprect": [
        "java.awt.Graphics.clipRect(int,int,int,int)"
    ],
    "java.lang.runnable.run": [
        "java.lang.Runnable.run()"
    ],
    "javax.xml.bind.helpers.validationeventimpl.setseverity": [
        "javax.xml.bind.helpers.ValidationEventImpl.setSeverity(int)"
    ],
    "java.lang.reflect.annotatedtypevariable.getannotatedbounds": [
        "java.lang.reflect.AnnotatedTypeVariable.getAnnotatedBounds()"
    ],
    "java.lang.double.doublevalue": [
        "java.lang.Double.doubleValue()"
    ],
    "javax.swing.text.boxview.viewtomodel": [
        "javax.swing.text.BoxView.viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias[])"
    ],
    "java.rmi.activation.activationsystem.shutdown": [
        "java.rmi.activation.ActivationSystem.shutdown()"
    ],
    "java.sql.sqldata.getsqltypename": [
        "java.sql.SQLData.getSQLTypeName()"
    ],
    "java.sql.callablestatement.setboolean": [
        "java.sql.CallableStatement.setBoolean(java.lang.String,boolean)"
    ],
    "org.omg.dynamicany._dynsequencestub.insert_val": [
        "org.omg.DynamicAny._DynSequenceStub.insert_val(java.io.Serializable)"
    ],
    "javax.swing.abstractbutton.imageupdate": [
        "javax.swing.AbstractButton.imageUpdate(java.awt.Image,int,int,int,int,int)"
    ],
    "javax.script.simplescriptcontext.geterrorwriter": [
        "javax.script.SimpleScriptContext.getErrorWriter()"
    ],
    "java.time.localdate.getera": [
        "java.time.LocalDate.getEra()"
    ],
    "java.time.dayofweek.from": [
        "java.time.DayOfWeek.from(java.time.temporal.TemporalAccessor)"
    ],
    "javax.swing.debuggraphics.flashcount": [
        "javax.swing.DebugGraphics.flashCount()"
    ],
    "javax.swing.plaf.synth.synthtabbedpaneui.createmouselistener": [
        "javax.swing.plaf.synth.SynthTabbedPaneUI.createMouseListener()"
    ],
    "javax.swing.text.html.parser.element.tostring": [
        "javax.swing.text.html.parser.Element.toString()"
    ],
    "javax.imageio.stream.filecacheimageoutputstream.seek": [
        "javax.imageio.stream.FileCacheImageOutputStream.seek(long)"
    ],
    "java.awt.scrollbar.getadjustmentlisteners": [
        "java.awt.Scrollbar.getAdjustmentListeners()"
    ],
    "java.lang.throwable.initcause": [
        "java.lang.Throwable.initCause(java.lang.Throwable)"
    ],
    "javax.swing.scrollable.getpreferredscrollableviewportsize": [
        "javax.swing.Scrollable.getPreferredScrollableViewportSize()"
    ],
    "javax.swing.abstractbutton.isrolloverenabled": [
        "javax.swing.AbstractButton.isRolloverEnabled()"
    ],
    "java.time.zoneddatetime.minusnanos": [
        "java.time.ZonedDateTime.minusNanos(long)"
    ],
    "javax.management.relation.roleunresolvedlist.addall": [
        "javax.management.relation.RoleUnresolvedList.addAll(javax.management.relation.RoleUnresolvedList)",
        "javax.management.relation.RoleUnresolvedList.addAll(int,javax.management.relation.RoleUnresolvedList)"
    ],
    "java.time.monthday.of": [
        "java.time.MonthDay.of(int,int)",
        "java.time.MonthDay.of(java.time.Month,int)"
    ],
    "javax.lang.model.util.typekindvisitor6.visitprimitiveasbyte": [
        "javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsByte(javax.lang.model.type.PrimitiveType,javax.lang.model.util.TypeKindVisitor6)"
    ],
    "javax.net.ssl.sniservername.tostring": [
        "javax.net.ssl.SNIServerName.toString()"
    ],
    "java.sql.sqlinput.readlong": [
        "java.sql.SQLInput.readLong()"
    ],
    "java.time.period.ofdays": [
        "java.time.Period.ofDays(int)"
    ],
    "javax.naming.compoundname.remove": [
        "javax.naming.CompoundName.remove(int)"
    ],
    "java.time.temporal.temporalfield.getbaseunit": [
        "java.time.temporal.TemporalField.getBaseUnit()"
    ],
    "org.w3c.dom.node.getuserdata": [
        "org.w3c.dom.Node.getUserData(java.lang.String)"
    ],
    "javax.swing.jviewport.getscrollmode": [
        "javax.swing.JViewport.getScrollMode()"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getfocuscolor": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getFocusColor()"
    ],
    "java.awt.menushortcut.hashcode": [
        "java.awt.MenuShortcut.hashCode()"
    ],
    "javax.crypto.spec.pbeparameterspec.getiterationcount": [
        "javax.crypto.spec.PBEParameterSpec.getIterationCount()"
    ],
    "java.nio.channels.pipe.sinkchannel.validops": [
        "java.nio.channels.Pipe.SinkChannel.validOps()"
    ],
    "javax.swing.jtree.getexpandsselectedpaths": [
        "javax.swing.JTree.getExpandsSelectedPaths()"
    ],
    "javax.swing.text.defaultstyleddocument.elementspec.getoffset": [
        "javax.swing.text.DefaultStyledDocument.ElementSpec.getOffset()"
    ],
    "java.security.signature.getprovider": [
        "java.security.Signature.getProvider()"
    ],
    "javax.imageio.imagereadparam.setdestination": [
        "javax.imageio.ImageReadParam.setDestination(java.awt.image.BufferedImage)"
    ],
    "javax.swing.defaultlistcellrenderer.validate": [
        "javax.swing.DefaultListCellRenderer.validate()"
    ],
    "javax.crypto.cipherspi.enginewrap": [
        "javax.crypto.CipherSpi.engineWrap(java.security.Key)"
    ],
    "java.time.zone.zoneoffsettransitionrule.getdayofweek": [
        "java.time.zone.ZoneOffsetTransitionRule.getDayOfWeek()"
    ],
    "java.time.localdate.atstartofday": [
        "java.time.LocalDate.atStartOfDay(java.time.ZoneId)",
        "java.time.LocalDate.atStartOfDay()"
    ],
    "java.awt.print.printerjob.printdialog": [
        "java.awt.print.PrinterJob.printDialog()",
        "java.awt.print.PrinterJob.printDialog(javax.print.attribute.PrintRequestAttributeSet)"
    ],
    "javax.swing.jscrollpane.iswheelscrollingenabled": [
        "javax.swing.JScrollPane.isWheelScrollingEnabled()"
    ],
    "org.omg.dynamicany.dynstructoperations.current_member_kind": [
        "org.omg.DynamicAny.DynStructOperations.current_member_kind()"
    ],
    "java.time.zoneddatetime.getsecond": [
        "java.time.ZonedDateTime.getSecond()"
    ],
    "javax.swing.jlabel.setdisabledicon": [
        "javax.swing.JLabel.setDisabledIcon(javax.swing.Icon)"
    ],
    "java.awt.geom.line2d.clone": [
        "java.awt.geom.Line2D.clone()"
    ],
    "javax.management.attributechangenotification.getnewvalue": [
        "javax.management.AttributeChangeNotification.getNewValue()"
    ],
    "java.io.file.canexecute": [
        "java.io.File.canExecute()"
    ],
    "javax.swing.plaf.synth.synthcolorchooserui.paintborder": [
        "javax.swing.plaf.synth.SynthColorChooserUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.xml.bind.unmarshaller.setschema": [
        "javax.xml.bind.Unmarshaller.setSchema(javax.xml.validation.Schema)"
    ],
    "java.beans.expression.execute": [
        "java.beans.Expression.execute()"
    ],
    "java.beans.beancontext.beancontextsupport.deserialize": [
        "java.beans.beancontext.BeanContextSupport.deserialize(java.io.ObjectInputStream,java.util.Collection)"
    ],
    "javax.accessibility.accessiblestreamable.getstream": [
        "javax.accessibility.AccessibleStreamable.getStream(java.awt.datatransfer.DataFlavor)"
    ],
    "javax.xml.stream.xmleventfactory.createattribute": [
        "javax.xml.stream.XMLEventFactory.createAttribute(java.lang.String,java.lang.String)",
        "javax.xml.stream.XMLEventFactory.createAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
        "javax.xml.stream.XMLEventFactory.createAttribute(javax.xml.namespace.QName,java.lang.String)"
    ],
    "javax.management.modelmbean.modelmbeaninfo.getoperation": [
        "javax.management.modelmbean.ModelMBeanInfo.getOperation(java.lang.String)"
    ],
    "javax.swing.jtable.getcellrenderer": [
        "javax.swing.JTable.getCellRenderer(int,int)"
    ],
    "org.omg.corba.contextlist.item": [
        "org.omg.CORBA.ContextList.item(int)"
    ],
    "java.awt.image.databufferdouble.getelem": [
        "java.awt.image.DataBufferDouble.getElem(int,int)"
    ],
    "org.omg.dynamicany._dynstructstub.to_any": [
        "org.omg.DynamicAny._DynStructStub.to_any()"
    ],
    "javax.crypto.cipher.dofinal": [
        "javax.crypto.Cipher.doFinal(byte[])",
        "javax.crypto.Cipher.doFinal()",
        "javax.crypto.Cipher.doFinal(java.nio.ByteBuffer,java.nio.ByteBuffer)",
        "javax.crypto.Cipher.doFinal(byte[],int,int,byte[])",
        "javax.crypto.Cipher.doFinal(byte[],int)",
        "javax.crypto.Cipher.doFinal(byte[],int,int,byte[],int)",
        "javax.crypto.Cipher.doFinal(byte[],int,int)"
    ],
    "javax.imageio.stream.imageoutputstream.writeshort": [
        "javax.imageio.stream.ImageOutputStream.writeShort(int)"
    ],
    "java.net.urlconnection.getdefaultusecaches": [
        "java.net.URLConnection.getDefaultUseCaches()"
    ],
    "java.awt.im.inputmethodrequests.getcommittedtext": [
        "java.awt.im.InputMethodRequests.getCommittedText(int,int,java.text.AttributedCharacterIterator.Attribute[])"
    ],
    "javax.swing.colorchooser.abstractcolorchooserpanel.getcolorselectionmodel": [
        "javax.swing.colorchooser.AbstractColorChooserPanel.getColorSelectionModel()"
    ],
    "java.util.calendar.getmaximum": [
        "java.util.Calendar.getMaximum(int)"
    ],
    "javax.sound.midi.mididevice.info.getversion": [
        "javax.sound.midi.MidiDevice.Info.getVersion()"
    ],
    "java.security.cert.x509certselector.tostring": [
        "java.security.cert.X509CertSelector.toString()"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.addselectionpath": [
        "javax.swing.tree.DefaultTreeSelectionModel.addSelectionPath(javax.swing.tree.TreePath)"
    ],
    "org.omg.dynamicany._dynunionstub.insert_ushort": [
        "org.omg.DynamicAny._DynUnionStub.insert_ushort(short)"
    ],
    "javax.swing.plaf.basic.basicspinnerui.installui": [
        "javax.swing.plaf.basic.BasicSpinnerUI.installUI(javax.swing.JComponent)"
    ],
    "java.lang.class.getdeclaredconstructor": [
        "java.lang.Class.getDeclaredConstructor(java.lang.Class<?>...)",
        "java.lang.Class.getDeclaredConstructor(java.lang.Class<?>)"
    ],
    "java.net.jarurlconnection.getjarentry": [
        "java.net.JarURLConnection.getJarEntry()"
    ],
    "java.sql.resultset.getint": [
        "java.sql.ResultSet.getInt(int)",
        "java.sql.ResultSet.getInt(java.lang.String)"
    ],
    "javax.swing.table.jtableheader.setdefaultrenderer": [
        "javax.swing.table.JTableHeader.setDefaultRenderer(javax.swing.table.TableCellRenderer)"
    ],
    "java.awt.image.databufferfloat.getbankdata": [
        "java.awt.image.DataBufferFloat.getBankData()"
    ],
    "javax.swing.grouplayout.preferredlayoutsize": [
        "javax.swing.GroupLayout.preferredLayoutSize(java.awt.Container)"
    ],
    "javax.swing.text.defaulteditorkit.getcontenttype": [
        "javax.swing.text.DefaultEditorKit.getContentType()"
    ],
    "java.util.collections.addall": [
        "java.util.Collections.addAll(java.util.Collection<? super T>,T...)"
    ],
    "javax.swing.plaf.multi.multitabbedpaneui.gettabbounds": [
        "javax.swing.plaf.multi.MultiTabbedPaneUI.getTabBounds(javax.swing.JTabbedPane,int)"
    ],
    "javax.swing.text.abstractdocument.getdefaultrootelement": [
        "javax.swing.text.AbstractDocument.getDefaultRootElement()"
    ],
    "javax.xml.ws.provider.invoke": [
        "javax.xml.ws.Provider.invoke(javax.xml.ws.Provider)"
    ],
    "java.text.numberformat.setcurrency": [
        "java.text.NumberFormat.setCurrency(java.util.Currency)"
    ],
    "java.util.stream.collectors.averaginglong": [
        "java.util.stream.Collectors.averagingLong(java.util.function.ToLongFunction<? super T>)"
    ],
    "org.ietf.jgss.gssmanager.addprovideratfront": [
        "org.ietf.jgss.GSSManager.addProviderAtFront(java.security.Provider,org.ietf.jgss.Oid)"
    ],
    "javax.swing.plaf.synth.synthcolorchooserui.update": [
        "javax.swing.plaf.synth.SynthColorChooserUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.awt.rectangle.grow": [
        "java.awt.Rectangle.grow(int,int)"
    ],
    "javax.management.timer.timermbean.removeallnotifications": [
        "javax.management.timer.TimerMBean.removeAllNotifications()"
    ],
    "java.awt.gridlayout.setrows": [
        "java.awt.GridLayout.setRows(int)"
    ],
    "javax.sound.sampled.reverbtype.hashcode": [
        "javax.sound.sampled.ReverbType.hashCode()"
    ],
    "javax.swing.jtree.setinvokesstopcellediting": [
        "javax.swing.JTree.setInvokesStopCellEditing(boolean)"
    ],
    "javax.sound.sampled.enumcontrol.getvalue": [
        "javax.sound.sampled.EnumControl.getValue()"
    ],
    "java.util.scanner.findinline": [
        "java.util.Scanner.findInLine(java.lang.String)",
        "java.util.Scanner.findInLine(java.util.regex.Pattern)"
    ],
    "javax.sql.rowset.baserowset.getescapeprocessing": [
        "javax.sql.rowset.BaseRowSet.getEscapeProcessing()"
    ],
    "javax.swing.border.bevelborder.getbeveltype": [
        "javax.swing.border.BevelBorder.getBevelType()"
    ],
    "java.awt.textfield.echocharisset": [
        "java.awt.TextField.echoCharIsSet()"
    ],
    "java.awt.geom.line2d.setline": [
        "java.awt.geom.Line2D.setLine(java.awt.geom.Line2D)",
        "java.awt.geom.Line2D.setLine(java.awt.geom.Point2D,java.awt.geom.Point2D)",
        "java.awt.geom.Line2D.setLine(double,double,double,double)"
    ],
    "java.awt.polygon.getpathiterator": [
        "java.awt.Polygon.getPathIterator(java.awt.geom.AffineTransform)",
        "java.awt.Polygon.getPathIterator(java.awt.geom.AffineTransform,double)"
    ],
    "java.lang.class.getenclosingconstructor": [
        "java.lang.Class.getEnclosingConstructor()"
    ],
    "org.omg.dynamicany._dynstructstub.get_float": [
        "org.omg.DynamicAny._DynStructStub.get_float()"
    ],
    "org.omg.dynamicany._dynvaluestub.insert_ulong": [
        "org.omg.DynamicAny._DynValueStub.insert_ulong(int)"
    ],
    "javax.swing.plaf.synth.synthdesktopiconui.paintborder": [
        "javax.swing.plaf.synth.SynthDesktopIconUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.lang.long.signum": [
        "java.lang.Long.signum(long)"
    ],
    "org.omg.dynamicany._dynanystub.seek": [
        "org.omg.DynamicAny._DynAnyStub.seek(int)"
    ],
    "javax.swing.text.jtextcomponent.getnavigationfilter": [
        "javax.swing.text.JTextComponent.getNavigationFilter()"
    ],
    "javax.swing.text.flowview.createrow": [
        "javax.swing.text.FlowView.createRow()"
    ],
    "javax.accessibility.accessiblecomponent.isenabled": [
        "javax.accessibility.AccessibleComponent.isEnabled()"
    ],
    "java.time.duration.ofseconds": [
        "java.time.Duration.ofSeconds(long)",
        "java.time.Duration.ofSeconds(long,long)"
    ],
    "javax.swing.swingutilities.getaccessiblechild": [
        "javax.swing.SwingUtilities.getAccessibleChild(java.awt.Component,int)"
    ],
    "java.lang.reflect.modifier.constructormodifiers": [
        "java.lang.reflect.Modifier.constructorModifiers()"
    ],
    "java.awt.menubar.add": [
        "java.awt.MenuBar.add(java.awt.Menu)"
    ],
    "javax.swing.text.html.stylesheet.getbase": [
        "javax.swing.text.html.StyleSheet.getBase()"
    ],
    "org.omg.dynamicany._dynenumstub.get_dyn_any": [
        "org.omg.DynamicAny._DynEnumStub.get_dyn_any()"
    ],
    "javax.swing.text.stringcontent.getpositionsinrange": [
        "javax.swing.text.StringContent.getPositionsInRange(java.util.Vector,int,int)"
    ],
    "java.beans.featuredescriptor.ispreferred": [
        "java.beans.FeatureDescriptor.isPreferred()"
    ],
    "java.sql.sqloutput.writenstring": [
        "java.sql.SQLOutput.writeNString(java.lang.String)"
    ],
    "org.xml.sax.helpers.defaulthandler.warning": [
        "org.xml.sax.helpers.DefaultHandler.warning(org.xml.sax.SAXParseException)"
    ],
    "org.omg.corba.dataoutputstream.write_longlong_array": [
        "org.omg.CORBA.DataOutputStream.write_longlong_array(long[],int,int)"
    ],
    "javax.management.modelmbean.modelmbeanattributeinfo.clone": [
        "javax.management.modelmbean.ModelMBeanAttributeInfo.clone()"
    ],
    "java.beans.simplebeaninfo.loadimage": [
        "java.beans.SimpleBeanInfo.loadImage(java.lang.String)"
    ],
    "java.awt.basicstroke.getdashphase": [
        "java.awt.BasicStroke.getDashPhase()"
    ],
    "java.awt.awteventmulticaster.mouseentered": [
        "java.awt.AWTEventMulticaster.mouseEntered(java.awt.event.MouseEvent)"
    ],
    "java.security.unresolvedpermission.getunresolvedname": [
        "java.security.UnresolvedPermission.getUnresolvedName()"
    ],
    "javax.swing.jscrollpane.setcomponentorientation": [
        "javax.swing.JScrollPane.setComponentOrientation(java.awt.ComponentOrientation)"
    ],
    "javax.lang.model.util.simpletypevisitor6.visiterror": [
        "javax.lang.model.util.SimpleTypeVisitor6.visitError(javax.lang.model.type.ErrorType,javax.lang.model.util.SimpleTypeVisitor6)"
    ],
    "org.omg.corba.context.set_values": [
        "org.omg.CORBA.Context.set_values(org.omg.CORBA.NVList)"
    ],
    "javax.activation.filedatasource.setfiletypemap": [
        "javax.activation.FileDataSource.setFileTypeMap(javax.activation.FileTypeMap)"
    ],
    "javax.xml.validation.validatorhandler.geterrorhandler": [
        "javax.xml.validation.ValidatorHandler.getErrorHandler()"
    ],
    "java.nio.charset.charsetencoder.onmalformedinput": [
        "java.nio.charset.CharsetEncoder.onMalformedInput(java.nio.charset.CodingErrorAction)"
    ],
    "javax.swing.text.zoneview.setmaximumzonesize": [
        "javax.swing.text.ZoneView.setMaximumZoneSize(int)"
    ],
    "java.util.zip.deflater.reset": [
        "java.util.zip.Deflater.reset()"
    ],
    "javax.xml.stream.events.attribute.getname": [
        "javax.xml.stream.events.Attribute.getName()"
    ],
    "java.nio.channels.pipe.source": [
        "java.nio.channels.Pipe.source()"
    ],
    "javax.sound.midi.midichannel.getsolo": [
        "javax.sound.midi.MidiChannel.getSolo()"
    ],
    "javax.swing.swingworker.setprogress": [
        "javax.swing.SwingWorker.setProgress(int)"
    ],
    "javax.swing.jslider.setvalue": [
        "javax.swing.JSlider.setValue(int)"
    ],
    "java.awt.activeevent.dispatch": [
        "java.awt.ActiveEvent.dispatch()"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writedouble": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeDouble(double)"
    ],
    "java.text.stringcharacteriterator.hashcode": [
        "java.text.StringCharacterIterator.hashCode()"
    ],
    "java.util.comparator.reverseorder": [
        "java.util.Comparator.reverseOrder()"
    ],
    "java.awt.image.multipixelpackedsamplemodel.setdataelements": [
        "java.awt.image.MultiPixelPackedSampleModel.setDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)"
    ],
    "java.awt.component.setbounds": [
        "java.awt.Component.setBounds(int,int,int,int)",
        "java.awt.Component.setBounds(java.awt.Rectangle)"
    ],
    "java.lang.double.longbitstodouble": [
        "java.lang.Double.longBitsToDouble(long)"
    ],
    "javax.swing.plaf.synth.synthprogressbarui.getbox": [
        "javax.swing.plaf.synth.SynthProgressBarUI.getBox(java.awt.Rectangle)"
    ],
    "javax.xml.crypto.xmlcryptocontext.put": [
        "javax.xml.crypto.XMLCryptoContext.put(java.lang.Object,java.lang.Object)"
    ],
    "javax.net.ssl.sslparameters.setciphersuites": [
        "javax.net.ssl.SSLParameters.setCipherSuites(java.lang.String)",
        "javax.net.ssl.SSLParameters.setCipherSuites(java.lang.String[])"
    ],
    "javax.swing.jtogglebutton.paramstring": [
        "javax.swing.JToggleButton.paramString()"
    ],
    "javax.swing.text.abstractdocument.getasynchronousloadpriority": [
        "javax.swing.text.AbstractDocument.getAsynchronousLoadPriority()"
    ],
    "javax.swing.text.element.getelementindex": [
        "javax.swing.text.Element.getElementIndex(int)"
    ],
    "java.sql.sqloutput.writeobject": [
        "java.sql.SQLOutput.writeObject(java.sql.SQLData)",
        "java.sql.SQLOutput.writeObject(java.lang.Object,java.sql.SQLType)"
    ],
    "java.util.concurrent.atomic.atomicreferencefieldupdater.getandset": [
        "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndSet(T,V)",
        "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndSet(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater)"
    ],
    "javax.swing.plaf.synth.synthlistui.propertychange": [
        "javax.swing.plaf.synth.SynthListUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "javax.management.openmbean.tabulardata.putall": [
        "javax.management.openmbean.TabularData.putAll(javax.management.openmbean.CompositeData[])"
    ],
    "javax.swing.japplet.remove": [
        "javax.swing.JApplet.remove(java.awt.Component)"
    ],
    "java.util.jar.attributes.entryset": [
        "java.util.jar.Attributes.entrySet()"
    ],
    "javax.swing.text.html.blockview.calculatemajoraxisrequirements": [
        "javax.swing.text.html.BlockView.calculateMajorAxisRequirements(int,javax.swing.SizeRequirements)"
    ],
    "javax.swing.plaf.synth.synthgraphicsutils.layouttext": [
        "javax.swing.plaf.synth.SynthGraphicsUtils.layoutText(javax.swing.plaf.synth.SynthContext,java.awt.FontMetrics,java.lang.String,javax.swing.Icon,int,int,int,int,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle,int)"
    ],
    "java.awt.graphics.setfont": [
        "java.awt.Graphics.setFont(java.awt.Font)"
    ],
    "java.awt.window.pack": [
        "java.awt.Window.pack()"
    ],
    "java.text.collationelementiterator.reset": [
        "java.text.CollationElementIterator.reset()"
    ],
    "javax.swing.plaf.synth.synthbuttonui.getbaseline": [
        "javax.swing.plaf.synth.SynthButtonUI.getBaseline(javax.swing.JComponent,int,int)"
    ],
    "java.util.concurrent.concurrentlinkeddeque.addall": [
        "java.util.concurrent.ConcurrentLinkedDeque.addAll(java.util.Collection<? extends E>)",
        "java.util.concurrent.ConcurrentLinkedDeque.addAll(java.util.Collection<? extends java.util.concurrent.ConcurrentLinkedDeque>)"
    ],
    "java.time.duration.getnano": [
        "java.time.Duration.getNano()"
    ],
    "java.util.simpletimezone.setdstsavings": [
        "java.util.SimpleTimeZone.setDSTSavings(int)"
    ],
    "javax.net.ssl.sslcontext.setdefault": [
        "javax.net.ssl.SSLContext.setDefault(javax.net.ssl.SSLContext)"
    ],
    "java.time.zone.zoneoffsettransition.getduration": [
        "java.time.zone.ZoneOffsetTransition.getDuration()"
    ],
    "java.nio.file.watchevent.context": [
        "java.nio.file.WatchEvent.context()"
    ],
    "java.util.linkedhashmap.replaceall": [
        "java.util.LinkedHashMap.replaceAll(java.util.function.BiFunction<? super,? super,? extends V>)"
    ],
    "javax.print.printservice.isattributecategorysupported": [
        "javax.print.PrintService.isAttributeCategorySupported(java.lang.Class<? extends javax.print.attribute.Attribute>)"
    ],
    "java.io.outputstream.close": [
        "java.io.OutputStream.close()"
    ],
    "java.awt.image.raster.getdataelements": [
        "java.awt.image.Raster.getDataElements(int,int,java.lang.Object)",
        "java.awt.image.Raster.getDataElements(int,int,int,int,java.lang.Object)"
    ],
    "javax.swing.text.passwordview.drawselectedtext": [
        "javax.swing.text.PasswordView.drawSelectedText(java.awt.Graphics,int,int,int,int)"
    ],
    "java.lang.instrument.instrumentation.getallloadedclasses": [
        "java.lang.instrument.Instrumentation.getAllLoadedClasses()"
    ],
    "javax.swing.text.jtextcomponent.modeltoview": [
        "javax.swing.text.JTextComponent.modelToView(int)"
    ],
    "javax.sound.midi.synthesizer.getavailableinstruments": [
        "javax.sound.midi.Synthesizer.getAvailableInstruments()"
    ],
    "javax.swing.border.titledborder.gettitlefont": [
        "javax.swing.border.TitledBorder.getTitleFont()"
    ],
    "javax.swing.text.paragraphview.findoffsettocharactersinstring": [
        "javax.swing.text.ParagraphView.findOffsetToCharactersInString(char[],int)"
    ],
    "javax.swing.componentinputmap.setparent": [
        "javax.swing.ComponentInputMap.setParent(javax.swing.InputMap)"
    ],
    "javax.swing.plaf.synth.synthcomboboxui.createarrowbutton": [
        "javax.swing.plaf.synth.SynthComboBoxUI.createArrowButton()"
    ],
    "java.lang.thread.dumpstack": [
        "java.lang.Thread.dumpStack()"
    ],
    "java.awt.container.getmouseposition": [
        "java.awt.Container.getMousePosition(boolean)"
    ],
    "java.lang.reflect.typevariable.getannotatedbounds": [
        "java.lang.reflect.TypeVariable.getAnnotatedBounds()"
    ],
    "java.sql.sqloutput.writerowid": [
        "java.sql.SQLOutput.writeRowId(java.sql.RowId)"
    ],
    "java.math.bigdecimal.max": [
        "java.math.BigDecimal.max(java.math.BigDecimal)"
    ],
    "javax.swing.text.glyphview.glyphpainter.getpainter": [
        "javax.swing.text.GlyphView.GlyphPainter.getPainter(javax.swing.text.GlyphView,int,int)"
    ],
    "javax.swing.plaf.synth.synthlookandfeel.getstyle": [
        "javax.swing.plaf.synth.SynthLookAndFeel.getStyle(javax.swing.JComponent,javax.swing.plaf.synth.Region)"
    ],
    "javax.swing.springlayout.getconstraint": [
        "javax.swing.SpringLayout.getConstraint(java.lang.String,java.awt.Component)"
    ],
    "java.applet.appletcontext.getaudioclip": [
        "java.applet.AppletContext.getAudioClip(java.net.URL)"
    ],
    "java.rmi.activation.activationgroupdesc.commandenvironment.hashcode": [
        "java.rmi.activation.ActivationGroupDesc.CommandEnvironment.hashCode()"
    ],
    "java.awt.basicstroke.getlinewidth": [
        "java.awt.BasicStroke.getLineWidth()"
    ],
    "javax.xml.crypto.xmlcryptocontext.seturidereferencer": [
        "javax.xml.crypto.XMLCryptoContext.setURIDereferencer(javax.xml.crypto.URIDereferencer)"
    ],
    "javax.rmi.portableremoteobject.exportobject": [
        "javax.rmi.PortableRemoteObject.exportObject(java.rmi.Remote)"
    ],
    "javax.swing.undo.undoableeditsupport.postedit": [
        "javax.swing.undo.UndoableEditSupport.postEdit(javax.swing.undo.UndoableEdit)"
    ],
    "javax.swing.text.plainview.gettabsize": [
        "javax.swing.text.PlainView.getTabSize()"
    ],
    "javax.swing.text.stylecontext.getstyle": [
        "javax.swing.text.StyleContext.getStyle(java.lang.String)"
    ],
    "javax.swing.text.view.getattributes": [
        "javax.swing.text.View.getAttributes()"
    ],
    "java.lang.integer.tooctalstring": [
        "java.lang.Integer.toOctalString(int)"
    ],
    "javax.activation.mimetypeparameterlist.size": [
        "javax.activation.MimeTypeParameterList.size()"
    ],
    "javax.swing.jpopupmenu.getuiclassid": [
        "javax.swing.JPopupMenu.getUIClassID()"
    ],
    "java.awt.printjob.getpagedimension": [
        "java.awt.PrintJob.getPageDimension()"
    ],
    "javax.sound.sampled.port.info.matches": [
        "javax.sound.sampled.Port.Info.matches(javax.sound.sampled.Line.Info)"
    ],
    "javax.swing.borderfactory.createraisedsoftbevelborder": [
        "javax.swing.BorderFactory.createRaisedSoftBevelBorder()"
    ],
    "java.awt.dnd.dragsourceevent.getx": [
        "java.awt.dnd.DragSourceEvent.getX()"
    ],
    "javax.imageio.metadata.iiometadataformat.getobjectminvalue": [
        "javax.imageio.metadata.IIOMetadataFormat.getObjectMinValue(java.lang.String)"
    ],
    "javax.xml.stream.xmleventfactory.createcdata": [
        "javax.xml.stream.XMLEventFactory.createCData(java.lang.String)"
    ],
    "javax.script.scriptengine.setcontext": [
        "javax.script.ScriptEngine.setContext(javax.script.ScriptContext)"
    ],
    "javax.swing.abstractbutton.setlayout": [
        "javax.swing.AbstractButton.setLayout(java.awt.LayoutManager)"
    ],
    "javax.xml.stream.events.endelement.getnamespaces": [
        "javax.xml.stream.events.EndElement.getNamespaces()"
    ],
    "javax.management.openmbean.tabulardatasupport.calculateindex": [
        "javax.management.openmbean.TabularDataSupport.calculateIndex(javax.management.openmbean.CompositeData)"
    ],
    "javax.management.openmbean.openmbeanattributeinfosupport.getdefaultvalue": [
        "javax.management.openmbean.OpenMBeanAttributeInfoSupport.getDefaultValue()"
    ],
    "javax.xml.ws.handler.portinfo.getbindingid": [
        "javax.xml.ws.handler.PortInfo.getBindingID()"
    ],
    "java.net.datagramsocketimpl.bind": [
        "java.net.DatagramSocketImpl.bind(int,java.net.InetAddress)"
    ],
    "java.util.scanner.findwithinhorizon": [
        "java.util.Scanner.findWithinHorizon(java.lang.String,int)",
        "java.util.Scanner.findWithinHorizon(java.util.regex.Pattern,int)"
    ],
    "javax.net.ssl.sslengineresult.handshakestatus.values": [
        "javax.net.ssl.SSLEngineResult.HandshakeStatus.values()"
    ],
    "java.io.chararrayreader.marksupported": [
        "java.io.CharArrayReader.markSupported()"
    ],
    "java.security.cert.pkixrevocationchecker.getocspresponder": [
        "java.security.cert.PKIXRevocationChecker.getOcspResponder()"
    ],
    "java.awt.window.isshowing": [
        "java.awt.Window.isShowing()"
    ],
    "java.net.socketimpl.sendurgentdata": [
        "java.net.SocketImpl.sendUrgentData(int)"
    ],
    "javax.imageio.stream.imageinputstream.flush": [
        "javax.imageio.stream.ImageInputStream.flush()"
    ],
    "javax.swing.tree.treenode.getchildcount": [
        "javax.swing.tree.TreeNode.getChildCount()"
    ],
    "java.util.hashtable.merge": [
        "java.util.Hashtable.merge(K,V,java.util.function.BiFunction<? super,? super,? extends V>)"
    ],
    "javax.swing.undo.abstractundoableedit.redo": [
        "javax.swing.undo.AbstractUndoableEdit.redo()"
    ],
    "javax.swing.listcellrenderer.getlistcellrenderercomponent": [
        "javax.swing.ListCellRenderer.getListCellRendererComponent(javax.swing.JList<? extends javax.swing.ListCellRenderer>,javax.swing.ListCellRenderer,int,boolean,boolean)"
    ],
    "javax.swing.jtextarea.paramstring": [
        "javax.swing.JTextArea.paramString()"
    ],
    "javax.sound.midi.sequencer.setloopcount": [
        "javax.sound.midi.Sequencer.setLoopCount(int)"
    ],
    "javax.swing.jdesktoppane.getdesktopmanager": [
        "javax.swing.JDesktopPane.getDesktopManager()"
    ],
    "java.awt.window.getbackground": [
        "java.awt.Window.getBackground()"
    ],
    "javax.swing.plaf.multi.multisliderui.createui": [
        "javax.swing.plaf.multi.MultiSliderUI.createUI(javax.swing.JComponent)"
    ],
    "org.omg.portableinterceptor.serverrequestinfooperations.sending_exception": [
        "org.omg.PortableInterceptor.ServerRequestInfoOperations.sending_exception()"
    ],
    "java.util.concurrent.locks.abstractqueuedsynchronizer.conditionobject.haswaiters": [
        "java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.hasWaiters()"
    ],
    "javax.swing.text.navigationfilter.filterbypass.getcaret": [
        "javax.swing.text.NavigationFilter.FilterBypass.getCaret()"
    ],
    "javax.imageio.stream.iiobytebuffer.getoffset": [
        "javax.imageio.stream.IIOByteBuffer.getOffset()"
    ],
    "java.awt.scrollpaneadjustable.tostring": [
        "java.awt.ScrollPaneAdjustable.toString()"
    ],
    "java.awt.image.renderable.renderableimageop.getpropertynames": [
        "java.awt.image.renderable.RenderableImageOp.getPropertyNames()"
    ],
    "javax.imageio.imagereader.getimagetypes": [
        "javax.imageio.ImageReader.getImageTypes(int)"
    ],
    "javax.xml.bind.jaxbexception.getlinkedexception": [
        "javax.xml.bind.JAXBException.getLinkedException()"
    ],
    "javax.sql.rowset.serial.serialblob.setbinarystream": [
        "javax.sql.rowset.serial.SerialBlob.setBinaryStream(long)"
    ],
    "java.util.concurrent.completionstage.whencompleteasync": [
        "java.util.concurrent.CompletionStage.whenCompleteAsync(java.util.function.BiConsumer<? super,? super java.lang.Throwable>)",
        "java.util.concurrent.CompletionStage.whenCompleteAsync(java.util.function.BiConsumer<? super,? super java.lang.Throwable>,java.util.concurrent.Executor)"
    ],
    "java.time.zone.zoneoffsettransitionrule.of": [
        "java.time.zone.ZoneOffsetTransitionRule.of(java.time.Month,int,java.time.DayOfWeek,java.time.LocalTime,boolean,java.time.zone.ZoneOffsetTransitionRule.TimeDefinition,java.time.ZoneOffset,java.time.ZoneOffset,java.time.ZoneOffset)"
    ],
    "javax.swing.plaf.synth.synthcolorchooserui.propertychange": [
        "javax.swing.plaf.synth.SynthColorChooserUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "javax.net.ssl.sslcontextspi.enginegetsocketfactory": [
        "javax.net.ssl.SSLContextSpi.engineGetSocketFactory()"
    ],
    "java.security.cert.x509crlselector.getissuernames": [
        "java.security.cert.X509CRLSelector.getIssuerNames()"
    ],
    "java.lang.character.valueof": [
        "java.lang.Character.valueOf(char)"
    ],
    "javax.swing.plaf.metal.oceantheme.getsecondary2": [
        "javax.swing.plaf.metal.OceanTheme.getSecondary2()"
    ],
    "java.sql.databasemetadata.getresultsetholdability": [
        "java.sql.DatabaseMetaData.getResultSetHoldability()"
    ],
    "java.lang.reflect.method.getgenericexceptiontypes": [
        "java.lang.reflect.Method.getGenericExceptionTypes()"
    ],
    "javax.swing.text.jtextcomponent.getkeymap": [
        "javax.swing.text.JTextComponent.getKeymap(java.lang.String)",
        "javax.swing.text.JTextComponent.getKeymap()"
    ],
    "org.omg.corba.portable.delegate.servant_preinvoke": [
        "org.omg.CORBA.portable.Delegate.servant_preinvoke(org.omg.CORBA.Object,java.lang.String,java.lang.Class)"
    ],
    "java.awt.geom.affinetransform.invert": [
        "java.awt.geom.AffineTransform.invert()"
    ],
    "java.util.abstractlist.get": [
        "java.util.AbstractList.get(int)"
    ],
    "javax.swing.plaf.multi.multiprogressbarui.update": [
        "javax.swing.plaf.multi.MultiProgressBarUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.xml.stream.events.startelement.getname": [
        "javax.xml.stream.events.StartElement.getName()"
    ],
    "javax.swing.plaf.synth.synthoptionpaneui.getcontext": [
        "javax.swing.plaf.synth.SynthOptionPaneUI.getContext(javax.swing.JComponent)"
    ],
    "java.awt.geom.cubiccurve2d.double.gety2": [
        "java.awt.geom.CubicCurve2D.Double.getY2()"
    ],
    "java.awt.component.arefocustraversalkeysset": [
        "java.awt.Component.areFocusTraversalKeysSet(int)"
    ],
    "javax.print.attribute.standard.mediasizename.getenumvaluetable": [
        "javax.print.attribute.standard.MediaSizeName.getEnumValueTable()"
    ],
    "javax.swing.plaf.synth.synthcheckboxui.paintborder": [
        "javax.swing.plaf.synth.SynthCheckBoxUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.time.format.datetimeformatter.parsedleapsecond": [
        "java.time.format.DateTimeFormatter.parsedLeapSecond()"
    ],
    "org.omg.dynamicany._dynvaluestub.insert_boolean": [
        "org.omg.DynamicAny._DynValueStub.insert_boolean(boolean)"
    ],
    "java.lang.reflect.annotatedtype.gettype": [
        "java.lang.reflect.AnnotatedType.getType()"
    ],
    "org.w3c.dom.node.getnodevalue": [
        "org.w3c.dom.Node.getNodeValue()"
    ],
    "java.sql.statement.iscloseoncompletion": [
        "java.sql.Statement.isCloseOnCompletion()"
    ],
    "javax.imageio.imagereader.getstreammetadata": [
        "javax.imageio.ImageReader.getStreamMetadata(java.lang.String,java.util.Set<java.lang.String>)",
        "javax.imageio.ImageReader.getStreamMetadata()"
    ],
    "java.awt.desktop.action.valueof": [
        "java.awt.Desktop.Action.valueOf(java.lang.String)"
    ],
    "java.util.concurrent.atomic.atomicreference.getandaccumulate": [
        "java.util.concurrent.atomic.AtomicReference.getAndAccumulate(java.util.concurrent.atomic.AtomicReference,java.util.function.BinaryOperator<java.util.concurrent.atomic.AtomicReference>)",
        "java.util.concurrent.atomic.AtomicReference.getAndAccumulate(V,java.util.function.BinaryOperator<V>)"
    ],
    "java.sql.resultset.insertrow": [
        "java.sql.ResultSet.insertRow()"
    ],
    "javax.management.openmbean.arraytype.getarraytype": [
        "javax.management.openmbean.ArrayType.getArrayType(javax.management.openmbean.OpenType<E>)"
    ],
    "java.util.treeset.descendingiterator": [
        "java.util.TreeSet.descendingIterator()"
    ],
    "org.omg.dynamicany._dynunionstub.discriminator_kind": [
        "org.omg.DynamicAny._DynUnionStub.discriminator_kind()"
    ],
    "org.xml.sax.helpers.parseradapter.parse": [
        "org.xml.sax.helpers.ParserAdapter.parse(java.lang.String)",
        "org.xml.sax.helpers.ParserAdapter.parse(org.xml.sax.InputSource)"
    ],
    "java.io.printstream.printf": [
        "java.io.PrintStream.printf(java.lang.String,java.lang.Object)",
        "java.io.PrintStream.printf(java.util.Locale,java.lang.String,java.lang.Object...)",
        "java.io.PrintStream.printf(java.util.Locale,java.lang.String,java.lang.Object)",
        "java.io.PrintStream.printf(java.lang.String,java.lang.Object...)"
    ],
    "java.net.urlstreamhandler.openconnection": [
        "java.net.URLStreamHandler.openConnection(java.net.URL)"
    ],
    "org.w3c.dom.typeinfo.gettypenamespace": [
        "org.w3c.dom.TypeInfo.getTypeNamespace()"
    ],
    "java.lang.float.min": [
        "java.lang.Float.min(float,float)"
    ],
    "java.lang.reflect.array.getint": [
        "java.lang.reflect.Array.getInt(java.lang.Object,int)"
    ],
    "java.awt.jobattributes.getfilename": [
        "java.awt.JobAttributes.getFileName()"
    ],
    "java.lang.runtime.addshutdownhook": [
        "java.lang.Runtime.addShutdownHook(java.lang.Thread)"
    ],
    "javax.management.openmbean.openmbeanconstructorinfo.getsignature": [
        "javax.management.openmbean.OpenMBeanConstructorInfo.getSignature()"
    ],
    "javax.xml.crypto.dsig.reference.getdigestvalue": [
        "javax.xml.crypto.dsig.Reference.getDigestValue()"
    ],
    "javax.crypto.encryptedprivatekeyinfo.getalgparameters": [
        "javax.crypto.EncryptedPrivateKeyInfo.getAlgParameters()"
    ],
    "javax.management.relation.roleunresolved.setrolevalue": [
        "javax.management.relation.RoleUnresolved.setRoleValue(java.util.List<javax.management.ObjectName>)"
    ],
    "javax.swing.plaf.componentui.getaccessiblechildrencount": [
        "javax.swing.plaf.ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.synth.synthinternalframeui.paintborder": [
        "javax.swing.plaf.synth.SynthInternalFrameUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.applet.applet.setstub": [
        "java.applet.Applet.setStub(java.applet.AppletStub)"
    ],
    "java.util.concurrent.concurrentlinkedqueue.spliterator": [
        "java.util.concurrent.ConcurrentLinkedQueue.spliterator()"
    ],
    "java.util.set.toarray": [
        "java.util.Set.toArray(T[])",
        "java.util.Set.toArray()"
    ],
    "java.awt.filedialog.getfiles": [
        "java.awt.FileDialog.getFiles()"
    ],
    "javax.swing.text.defaultstyleddocument.addstyle": [
        "javax.swing.text.DefaultStyledDocument.addStyle(java.lang.String,javax.swing.text.Style)"
    ],
    "javax.lang.model.type.typevisitor.visitintersection": [
        "javax.lang.model.type.TypeVisitor.visitIntersection(javax.lang.model.type.IntersectionType,javax.lang.model.type.TypeVisitor)"
    ],
    "java.util.spliterators.abstractspliterator.estimatesize": [
        "java.util.Spliterators.AbstractSpliterator.estimateSize()"
    ],
    "javax.swing.jlabel.setlabelfor": [
        "javax.swing.JLabel.setLabelFor(java.awt.Component)"
    ],
    "javax.lang.model.annotatedconstruct.getannotationsbytype": [
        "javax.lang.model.AnnotatedConstruct.getAnnotationsByType(java.lang.Class<A>)"
    ],
    "javax.swing.imageicon.geticonheight": [
        "javax.swing.ImageIcon.getIconHeight()"
    ],
    "javax.swing.jfilechooser.setfilesystemview": [
        "javax.swing.JFileChooser.setFileSystemView(javax.swing.filechooser.FileSystemView)"
    ],
    "javax.swing.plaf.multi.multitabbedpaneui.gettabruncount": [
        "javax.swing.plaf.multi.MultiTabbedPaneUI.getTabRunCount(javax.swing.JTabbedPane)"
    ],
    "java.util.doublesummarystatistics.getaverage": [
        "java.util.DoubleSummaryStatistics.getAverage()"
    ],
    "java.util.logging.logger.logp": [
        "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)",
        "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])",
        "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)",
        "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.Throwable,java.util.function.Supplier<java.lang.String>)",
        "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)",
        "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.util.function.Supplier<java.lang.String>)"
    ],
    "java.util.concurrent.threadpoolexecutor.discardpolicy.rejectedexecution": [
        "java.util.concurrent.ThreadPoolExecutor.DiscardPolicy.rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)"
    ],
    "java.awt.geom.rectangularshape.setframefromdiagonal": [
        "java.awt.geom.RectangularShape.setFrameFromDiagonal(java.awt.geom.Point2D,java.awt.geom.Point2D)",
        "java.awt.geom.RectangularShape.setFrameFromDiagonal(double,double,double,double)"
    ],
    "javax.swing.text.abstractdocument.insertstring": [
        "javax.swing.text.AbstractDocument.insertString(int,java.lang.String,javax.swing.text.AttributeSet)"
    ],
    "java.net.httpcookie.getpath": [
        "java.net.HttpCookie.getPath()"
    ],
    "java.io.randomaccessfile.getfilepointer": [
        "java.io.RandomAccessFile.getFilePointer()"
    ],
    "javax.naming.directory.attributes.size": [
        "javax.naming.directory.Attributes.size()"
    ],
    "java.util.arraydeque.addfirst": [
        "java.util.ArrayDeque.addFirst(E)",
        "java.util.ArrayDeque.addFirst(java.util.ArrayDeque)"
    ],
    "java.util.date.equals": [
        "java.util.Date.equals(java.lang.Object)"
    ],
    "javax.management.monitor.countermonitormbean.getinitthreshold": [
        "javax.management.monitor.CounterMonitorMBean.getInitThreshold()"
    ],
    "javax.swing.jsplitpane.setresizeweight": [
        "javax.swing.JSplitPane.setResizeWeight(double)"
    ],
    "java.awt.component.setforeground": [
        "java.awt.Component.setForeground(java.awt.Color)"
    ],
    "java.beans.featuredescriptor.ishidden": [
        "java.beans.FeatureDescriptor.isHidden()"
    ],
    "java.beans.beancontext.beancontextchildcomponentproxy.getcomponent": [
        "java.beans.beancontext.BeanContextChildComponentProxy.getComponent()"
    ],
    "java.text.decimalformatsymbols.getmonetarydecimalseparator": [
        "java.text.DecimalFormatSymbols.getMonetaryDecimalSeparator()"
    ],
    "java.util.stack.pop": [
        "java.util.Stack.pop()"
    ],
    "java.awt.graphics.drawchars": [
        "java.awt.Graphics.drawChars(char[],int,int,int,int)"
    ],
    "java.security.cert.extension.iscritical": [
        "java.security.cert.Extension.isCritical()"
    ],
    "javax.xml.crypto.dom.domcryptocontext.setidattributens": [
        "javax.xml.crypto.dom.DOMCryptoContext.setIdAttributeNS(org.w3c.dom.Element,java.lang.String,java.lang.String)"
    ],
    "java.io.objectinputstream.readutf": [
        "java.io.ObjectInputStream.readUTF()"
    ],
    "java.security.keypair.getpublic": [
        "java.security.KeyPair.getPublic()"
    ],
    "java.time.clock.withzone": [
        "java.time.Clock.withZone(java.time.ZoneId)"
    ],
    "javax.swing.text.gapcontent.getpositionsinrange": [
        "javax.swing.text.GapContent.getPositionsInRange(java.util.Vector,int,int)"
    ],
    "java.security.codesigner.hashcode": [
        "java.security.CodeSigner.hashCode()"
    ],
    "java.time.format.datetimeformatterbuilder.appendchronologytext": [
        "java.time.format.DateTimeFormatterBuilder.appendChronologyText(java.time.format.TextStyle)"
    ],
    "javax.swing.jradiobuttonmenuitem.getaccessiblecontext": [
        "javax.swing.JRadioButtonMenuItem.getAccessibleContext()"
    ],
    "java.lang.securitymanager.checkprintjobaccess": [
        "java.lang.SecurityManager.checkPrintJobAccess()"
    ],
    "javax.swing.plaf.synth.synthseparatorui.installdefaults": [
        "javax.swing.plaf.synth.SynthSeparatorUI.installDefaults(javax.swing.JSeparator)"
    ],
    "java.time.yearmonth.now": [
        "java.time.YearMonth.now(java.time.ZoneId)",
        "java.time.YearMonth.now()",
        "java.time.YearMonth.now(java.time.Clock)"
    ],
    "java.util.concurrent.cyclicbarrier.reset": [
        "java.util.concurrent.CyclicBarrier.reset()"
    ],
    "javax.net.ssl.handshakecompletedevent.getlocalcertificates": [
        "javax.net.ssl.HandshakeCompletedEvent.getLocalCertificates()"
    ],
    "javax.management.mbeaninfo.getoperations": [
        "javax.management.MBeanInfo.getOperations()"
    ],
    "javax.swing.plaf.multi.multifilechooserui.ensurefileisvisible": [
        "javax.swing.plaf.multi.MultiFileChooserUI.ensureFileIsVisible(javax.swing.JFileChooser,java.io.File)"
    ],
    "java.awt.font.glyphvector.getglyphmetrics": [
        "java.awt.font.GlyphVector.getGlyphMetrics(int)"
    ],
    "java.util.logging.level.getname": [
        "java.util.logging.Level.getName()"
    ],
    "java.awt.cardlayout.maximumlayoutsize": [
        "java.awt.CardLayout.maximumLayoutSize(java.awt.Container)"
    ],
    "javax.naming.spi.namingmanager.getcontinuationcontext": [
        "javax.naming.spi.NamingManager.getContinuationContext(javax.naming.CannotProceedException)"
    ],
    "javax.swing.jcomponent.settooltiptext": [
        "javax.swing.JComponent.setToolTipText(java.lang.String)"
    ],
    "java.sql.preparedstatement.clearparameters": [
        "java.sql.PreparedStatement.clearParameters()"
    ],
    "javax.management.remote.rmi.rmiconnection.creatembean": [
        "javax.management.remote.rmi.RMIConnection.createMBean(java.lang.String,javax.management.ObjectName,java.rmi.MarshalledObject,java.lang.String[],javax.security.auth.Subject)",
        "javax.management.remote.rmi.RMIConnection.createMBean(java.lang.String,javax.management.ObjectName,javax.management.ObjectName,java.rmi.MarshalledObject,java.lang.String[],javax.security.auth.Subject)",
        "javax.management.remote.rmi.RMIConnection.createMBean(java.lang.String,javax.management.ObjectName,javax.security.auth.Subject)",
        "javax.management.remote.rmi.RMIConnection.createMBean(java.lang.String,javax.management.ObjectName,javax.management.ObjectName,javax.security.auth.Subject)"
    ],
    "java.util.vector.iterator": [
        "java.util.Vector.iterator()"
    ],
    "org.omg.corba.any.create_output_stream": [
        "org.omg.CORBA.Any.create_output_stream()"
    ],
    "javax.swing.undo.undoableedit.redo": [
        "javax.swing.undo.UndoableEdit.redo()"
    ],
    "java.time.localdate.until": [
        "java.time.LocalDate.until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)",
        "java.time.LocalDate.until(java.time.chrono.ChronoLocalDate)"
    ],
    "org.omg.dynamicany._dynstructstub.current_component": [
        "org.omg.DynamicAny._DynStructStub.current_component()"
    ],
    "org.xml.sax.helpers.attributesimpl.settype": [
        "org.xml.sax.helpers.AttributesImpl.setType(int,java.lang.String)"
    ],
    "javax.rmi.corba.util.copyobject": [
        "javax.rmi.CORBA.Util.copyObject(java.lang.Object,org.omg.CORBA.ORB)"
    ],
    "javax.swing.plaf.synth.synthsliderui.paint": [
        "javax.swing.plaf.synth.SynthSliderUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",
        "javax.swing.plaf.synth.SynthSliderUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.awt.toolkit.setdesktopproperty": [
        "java.awt.Toolkit.setDesktopProperty(java.lang.String,java.lang.Object)"
    ],
    "java.io.file.setlastmodified": [
        "java.io.File.setLastModified(long)"
    ],
    "java.nio.file.files.readallbytes": [
        "java.nio.file.Files.readAllBytes(java.nio.file.Path)"
    ],
    "javax.xml.ws.wsaddressing.w3cendpointreferencebuilder.referenceparameter": [
        "javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.referenceParameter(org.w3c.dom.Element)"
    ],
    "java.text.decimalformat.getmultiplier": [
        "java.text.DecimalFormat.getMultiplier()"
    ],
    "java.nio.longbuffer.hashcode": [
        "java.nio.LongBuffer.hashCode()"
    ],
    "java.time.temporal.chronofield.values": [
        "java.time.temporal.ChronoField.values()"
    ],
    "javax.swing.jcomponent.printall": [
        "javax.swing.JComponent.printAll(java.awt.Graphics)"
    ],
    "java.util.locale.builder.setunicodelocalekeyword": [
        "java.util.Locale.Builder.setUnicodeLocaleKeyword(java.lang.String,java.lang.String)"
    ],
    "javax.rmi.corba.stub.equals": [
        "javax.rmi.CORBA.Stub.equals(java.lang.Object)"
    ],
    "java.net.multicastsocket.getnetworkinterface": [
        "java.net.MulticastSocket.getNetworkInterface()"
    ],
    "javax.swing.text.simpleattributeset.hashcode": [
        "javax.swing.text.SimpleAttributeSet.hashCode()"
    ],
    "javax.swing.defaultdesktopmanager.maximizeframe": [
        "javax.swing.DefaultDesktopManager.maximizeFrame(javax.swing.JInternalFrame)"
    ],
    "org.w3c.dom.node.getownerdocument": [
        "org.w3c.dom.Node.getOwnerDocument()"
    ],
    "java.awt.component.setmaximumsize": [
        "java.awt.Component.setMaximumSize(java.awt.Dimension)"
    ],
    "java.lang.classloader.defineclass": [
        "java.lang.ClassLoader.defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)",
        "java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)",
        "java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)"
    ],
    "java.sql.databasemetadata.getmaxusernamelength": [
        "java.sql.DatabaseMetaData.getMaxUserNameLength()"
    ],
    "javax.management.relation.relationsupport.setrole": [
        "javax.management.relation.RelationSupport.setRole(javax.management.relation.Role)"
    ],
    "java.awt.geom.arc2d.float.getheight": [
        "java.awt.geom.Arc2D.Float.getHeight()"
    ],
    "java.util.locale.getiso3language": [
        "java.util.Locale.getISO3Language()"
    ],
    "javax.swing.plaf.synth.synthtextpaneui.paintborder": [
        "javax.swing.plaf.synth.SynthTextPaneUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.security.spec.ecfieldf2m.getm": [
        "java.security.spec.ECFieldF2m.getM()"
    ],
    "java.awt.image.componentsamplemodel.setpixels": [
        "java.awt.image.ComponentSampleModel.setPixels(int,int,int,int,int[],java.awt.image.DataBuffer)"
    ],
    "javax.crypto.macspi.enginereset": [
        "javax.crypto.MacSpi.engineReset()"
    ],
    "javax.xml.stream.xmleventwriter.close": [
        "javax.xml.stream.XMLEventWriter.close()"
    ],
    "javax.swing.plaf.basic.basictextui.damagerange": [
        "javax.swing.plaf.basic.BasicTextUI.damageRange(javax.swing.text.JTextComponent,int,int,javax.swing.text.Position.Bias,javax.swing.text.Position.Bias)",
        "javax.swing.plaf.basic.BasicTextUI.damageRange(javax.swing.text.JTextComponent,int,int)"
    ],
    "javax.rmi.corba.utildelegate.mapsystemexception": [
        "javax.rmi.CORBA.UtilDelegate.mapSystemException(org.omg.CORBA.SystemException)"
    ],
    "java.net.httpurlconnection.getpermission": [
        "java.net.HttpURLConnection.getPermission()"
    ],
    "java.lang.boolean.tostring": [
        "java.lang.Boolean.toString(boolean)",
        "java.lang.Boolean.toString()"
    ],
    "javax.swing.timer.start": [
        "javax.swing.Timer.start()"
    ],
    "javax.swing.text.defaultcaret.getmagiccaretposition": [
        "javax.swing.text.DefaultCaret.getMagicCaretPosition()"
    ],
    "java.awt.event.mousewheelevent.paramstring": [
        "java.awt.event.MouseWheelEvent.paramString()"
    ],
    "java.io.file.delete": [
        "java.io.File.delete()"
    ],
    "javax.swing.text.plaindocument.getparagraphelement": [
        "javax.swing.text.PlainDocument.getParagraphElement(int)"
    ],
    "org.w3c.dom.ls.lsparser.abort": [
        "org.w3c.dom.ls.LSParser.abort()"
    ],
    "javax.swing.tree.defaulttreemodel.gettreemodellisteners": [
        "javax.swing.tree.DefaultTreeModel.getTreeModelListeners()"
    ],
    "java.math.biginteger.bitlength": [
        "java.math.BigInteger.bitLength()"
    ],
    "javax.swing.table.defaulttablecolumnmodel.getselectionmodel": [
        "javax.swing.table.DefaultTableColumnModel.getSelectionModel()"
    ],
    "java.awt.menucomponent.removenotify": [
        "java.awt.MenuComponent.removeNotify()"
    ],
    "javax.swing.abstractaction.setenabled": [
        "javax.swing.AbstractAction.setEnabled(boolean)"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.getsplitpane": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.getSplitPane()"
    ],
    "java.util.concurrent.threadpoolexecutor.getcompletedtaskcount": [
        "java.util.concurrent.ThreadPoolExecutor.getCompletedTaskCount()"
    ],
    "java.awt.multiplegradientpaint.cyclemethod.values": [
        "java.awt.MultipleGradientPaint.CycleMethod.values()"
    ],
    "java.awt.checkboxmenuitem.processevent": [
        "java.awt.CheckboxMenuItem.processEvent(java.awt.AWTEvent)"
    ],
    "java.util.jar.jarfile.entries": [
        "java.util.jar.JarFile.entries()"
    ],
    "javax.xml.stream.events.xmlevent.writeasencodedunicode": [
        "javax.xml.stream.events.XMLEvent.writeAsEncodedUnicode(java.io.Writer)"
    ],
    "javax.swing.text.html.htmleditorkit.getdefaultcursor": [
        "javax.swing.text.html.HTMLEditorKit.getDefaultCursor()"
    ],
    "java.security.provider.service.getprovider": [
        "java.security.Provider.Service.getProvider()"
    ],
    "javax.swing.plaf.basic.basiccombopopup.createlistselectionlistener": [
        "javax.swing.plaf.basic.BasicComboPopup.createListSelectionListener()"
    ],
    "java.awt.font.glyphvector.getoutline": [
        "java.awt.font.GlyphVector.getOutline()",
        "java.awt.font.GlyphVector.getOutline(float,float)"
    ],
    "javax.swing.defaultbuttonmodel.getselectedobjects": [
        "javax.swing.DefaultButtonModel.getSelectedObjects()"
    ],
    "javax.imageio.imagewriter.replacestreammetadata": [
        "javax.imageio.ImageWriter.replaceStreamMetadata(javax.imageio.metadata.IIOMetadata)"
    ],
    "javax.swing.jprogressbar.getmodel": [
        "javax.swing.JProgressBar.getModel()"
    ],
    "java.nio.channels.socketchannel.read": [
        "java.nio.channels.SocketChannel.read(java.nio.ByteBuffer,int,int)"
    ],
    "java.util.concurrent.completionstage.applytoeitherasync": [
        "java.util.concurrent.CompletionStage.applyToEitherAsync(java.util.concurrent.CompletionStage<? extends java.util.concurrent.CompletionStage>,java.util.function.Function<? super,U>,java.util.concurrent.Executor)",
        "java.util.concurrent.CompletionStage.applyToEitherAsync(java.util.concurrent.CompletionStage<? extends java.util.concurrent.CompletionStage>,java.util.function.Function<? super,U>)",
        "java.util.concurrent.CompletionStage.applyToEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Function<? super,U>,java.util.concurrent.Executor)"
    ],
    "java.awt.scrollbar.getorientation": [
        "java.awt.Scrollbar.getOrientation()"
    ],
    "javax.rmi.portableremoteobject.connect": [
        "javax.rmi.PortableRemoteObject.connect(java.rmi.Remote,java.rmi.Remote)"
    ],
    "javax.xml.bind.datatypeconverterinterface.parseanysimpletype": [
        "javax.xml.bind.DatatypeConverterInterface.parseAnySimpleType(java.lang.String)"
    ],
    "java.beans.beaninfo.getmethoddescriptors": [
        "java.beans.BeanInfo.getMethodDescriptors()"
    ],
    "java.awt.window.getshape": [
        "java.awt.Window.getShape()"
    ],
    "java.net.datagrampacket.setdata": [
        "java.net.DatagramPacket.setData(byte[],int,int)",
        "java.net.DatagramPacket.setData(byte[])"
    ],
    "javax.sql.rowset.baserowset.getshowdeleted": [
        "javax.sql.rowset.BaseRowSet.getShowDeleted()"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.setminute": [
        "javax.xml.datatype.XMLGregorianCalendar.setMinute(int)"
    ],
    "javax.xml.transform.transformerfactory.getassociatedstylesheet": [
        "javax.xml.transform.TransformerFactory.getAssociatedStylesheet(javax.xml.transform.Source,java.lang.String,java.lang.String,java.lang.String)"
    ],
    "org.omg.corba.portable.valuefactory.read_value": [
        "org.omg.CORBA.portable.ValueFactory.read_value(org.omg.CORBA_2_3.portable.InputStream)"
    ],
    "java.util.linkedlist.clone": [
        "java.util.LinkedList.clone()"
    ],
    "java.util.locale.builder.removeunicodelocaleattribute": [
        "java.util.Locale.Builder.removeUnicodeLocaleAttribute(java.lang.String)"
    ],
    "java.awt.label.gettext": [
        "java.awt.Label.getText()"
    ],
    "javax.swing.uidefaults.removeresourcebundle": [
        "javax.swing.UIDefaults.removeResourceBundle(java.lang.String)"
    ],
    "java.nio.channels.filelock.acquiredby": [
        "java.nio.channels.FileLock.acquiredBy()"
    ],
    "java.lang.management.bufferpoolmxbean.gettotalcapacity": [
        "java.lang.management.BufferPoolMXBean.getTotalCapacity()"
    ],
    "javax.swing.jtree.setexpandsselectedpaths": [
        "javax.swing.JTree.setExpandsSelectedPaths(boolean)"
    ],
    "javax.swing.jtable.createdefaultrenderers": [
        "javax.swing.JTable.createDefaultRenderers()"
    ],
    "java.nio.intbuffer.allocate": [
        "java.nio.IntBuffer.allocate(int)"
    ],
    "java.lang.management.runtimemxbean.getvmname": [
        "java.lang.management.RuntimeMXBean.getVmName()"
    ],
    "javax.swing.text.paragraphview.getlayoutviewcount": [
        "javax.swing.text.ParagraphView.getLayoutViewCount()"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.haswaiters": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.hasWaiters(java.util.concurrent.locks.Condition)"
    ],
    "javax.tools.toolprovider.getsystemtoolclassloader": [
        "javax.tools.ToolProvider.getSystemToolClassLoader()"
    ],
    "java.lang.stringbuffer.subsequence": [
        "java.lang.StringBuffer.subSequence(int,int)"
    ],
    "javax.swing.viewportlayout.removelayoutcomponent": [
        "javax.swing.ViewportLayout.removeLayoutComponent(java.awt.Component)"
    ],
    "javax.swing.border.compoundborder.getborderinsets": [
        "javax.swing.border.CompoundBorder.getBorderInsets(java.awt.Component,java.awt.Insets)"
    ],
    "javax.sound.sampled.audiosystem.getclip": [
        "javax.sound.sampled.AudioSystem.getClip(javax.sound.sampled.Mixer.Info)",
        "javax.sound.sampled.AudioSystem.getClip()"
    ],
    "java.beans.beancontext.beancontextsupport.removebeancontextmembershiplistener": [
        "java.beans.beancontext.BeanContextSupport.removeBeanContextMembershipListener(java.beans.beancontext.BeanContextMembershipListener)"
    ],
    "org.omg.dynamicany._dynenumstub.get_as_string": [
        "org.omg.DynamicAny._DynEnumStub.get_as_string()"
    ],
    "java.util.vector.size": [
        "java.util.Vector.size()"
    ],
    "javax.management.standardmbean.getclassname": [
        "javax.management.StandardMBean.getClassName(javax.management.MBeanInfo)"
    ],
    "java.util.hashtable.hashcode": [
        "java.util.Hashtable.hashCode()"
    ],
    "javax.management.mbeanserver.creatembean": [
        "javax.management.MBeanServer.createMBean(java.lang.String,javax.management.ObjectName,java.lang.Object[],java.lang.String[])",
        "javax.management.MBeanServer.createMBean(java.lang.String,javax.management.ObjectName)",
        "javax.management.MBeanServer.createMBean(java.lang.String,javax.management.ObjectName,javax.management.ObjectName)",
        "javax.management.MBeanServer.createMBean(java.lang.String,javax.management.ObjectName,javax.management.ObjectName,java.lang.Object[],java.lang.String[])"
    ],
    "javax.swing.jtable.getselectionmodel": [
        "javax.swing.JTable.getSelectionModel()"
    ],
    "javax.swing.text.elementiterator.depth": [
        "javax.swing.text.ElementIterator.depth()"
    ],
    "javax.swing.undo.undomanager.trimedits": [
        "javax.swing.undo.UndoManager.trimEdits(int,int)"
    ],
    "javax.swing.border.abstractborder.getborderinsets": [
        "javax.swing.border.AbstractBorder.getBorderInsets(java.awt.Component)",
        "javax.swing.border.AbstractBorder.getBorderInsets(java.awt.Component,java.awt.Insets)"
    ],
    "javax.xml.soap.attachmentpart.setmimeheader": [
        "javax.xml.soap.AttachmentPart.setMimeHeader(java.lang.String,java.lang.String)"
    ],
    "java.awt.font.getnumglyphs": [
        "java.awt.Font.getNumGlyphs()"
    ],
    "javax.sound.midi.midichannel.getmono": [
        "javax.sound.midi.MidiChannel.getMono()"
    ],
    "javax.sql.rowset.baserowset.getcommand": [
        "javax.sql.rowset.BaseRowSet.getCommand()"
    ],
    "java.util.base64.encoder.encodetostring": [
        "java.util.Base64.Encoder.encodeToString(byte[])"
    ],
    "org.omg.dynamicany._dynarraystub.insert_typecode": [
        "org.omg.DynamicAny._DynArrayStub.insert_typecode(org.omg.CORBA.TypeCode)"
    ],
    "java.beans.propertydescriptor.getpropertyeditorclass": [
        "java.beans.PropertyDescriptor.getPropertyEditorClass()"
    ],
    "javax.swing.text.stylededitorkit.createdefaultdocument": [
        "javax.swing.text.StyledEditorKit.createDefaultDocument()"
    ],
    "javax.lang.model.element.parameterizable.gettypeparameters": [
        "javax.lang.model.element.Parameterizable.getTypeParameters()"
    ],
    "java.time.offsettime.minusnanos": [
        "java.time.OffsetTime.minusNanos(long)"
    ],
    "org.omg.dynamicany._dynsequencestub.get_double": [
        "org.omg.DynamicAny._DynSequenceStub.get_double()"
    ],
    "java.awt.image.databuffer.getelemfloat": [
        "java.awt.image.DataBuffer.getElemFloat(int,int)"
    ],
    "javax.sql.rowsetmetadata.setschemaname": [
        "javax.sql.RowSetMetaData.setSchemaName(int,java.lang.String)"
    ],
    "java.awt.geom.quadcurve2d.intersects": [
        "java.awt.geom.QuadCurve2D.intersects(java.awt.geom.Rectangle2D)",
        "java.awt.geom.QuadCurve2D.intersects(double,double,double,double)"
    ],
    "javax.swing.text.document.adddocumentlistener": [
        "javax.swing.text.Document.addDocumentListener(javax.swing.event.DocumentListener)"
    ],
    "javax.imageio.plugins.jpeg.jpegimagereadparam.unsetdecodetables": [
        "javax.imageio.plugins.jpeg.JPEGImageReadParam.unsetDecodeTables()"
    ],
    "java.io.writeabortedexception.getmessage": [
        "java.io.WriteAbortedException.getMessage()"
    ],
    "javax.swing.plaf.synth.synthtextpaneui.propertychange": [
        "javax.swing.plaf.synth.SynthTextPaneUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "java.io.dataoutput.writelong": [
        "java.io.DataOutput.writeLong(long)"
    ],
    "java.lang.annotation.incompleteannotationexception.elementname": [
        "java.lang.annotation.IncompleteAnnotationException.elementName()"
    ],
    "java.nio.charset.charsetdecoder.decodeloop": [
        "java.nio.charset.CharsetDecoder.decodeLoop(java.nio.ByteBuffer,java.nio.CharBuffer)"
    ],
    "javax.swing.scrollpanelayout.addsingletoncomponent": [
        "javax.swing.ScrollPaneLayout.addSingletonComponent(java.awt.Component,java.awt.Component)"
    ],
    "javax.imageio.imagereader.readasrenderedimage": [
        "javax.imageio.ImageReader.readAsRenderedImage(int,javax.imageio.ImageReadParam)"
    ],
    "java.time.yearmonth.range": [
        "java.time.YearMonth.range(java.time.temporal.TemporalField)"
    ],
    "javax.swing.defaultlistselectionmodel.setanchorselectionindex": [
        "javax.swing.DefaultListSelectionModel.setAnchorSelectionIndex(int)"
    ],
    "javax.activation.mailcapcommandmap.addmailcap": [
        "javax.activation.MailcapCommandMap.addMailcap(java.lang.String)"
    ],
    "javax.swing.jframe.setcontentpane": [
        "javax.swing.JFrame.setContentPane(java.awt.Container)"
    ],
    "javax.sql.rowset.setbytes": [
        "javax.sql.RowSet.setBytes(java.lang.String,byte[])",
        "javax.sql.RowSet.setBytes(int,byte[])"
    ],
    "java.time.chrono.chronozoneddatetime.compareto": [
        "java.time.chrono.ChronoZonedDateTime.compareTo(java.time.chrono.ChronoZonedDateTime<?>)"
    ],
    "javax.swing.table.jtableheader.getresizingcolumn": [
        "javax.swing.table.JTableHeader.getResizingColumn()"
    ],
    "java.net.networkinterface.getdisplayname": [
        "java.net.NetworkInterface.getDisplayName()"
    ],
    "javax.imageio.metadata.iiometadataformat.getobjectarrayminlength": [
        "javax.imageio.metadata.IIOMetadataFormat.getObjectArrayMinLength(java.lang.String)"
    ],
    "javax.print.attribute.standard.printquality.getstringtable": [
        "javax.print.attribute.standard.PrintQuality.getStringTable()"
    ],
    "javax.swing.undo.compoundedit.getredopresentationname": [
        "javax.swing.undo.CompoundEdit.getRedoPresentationName()"
    ],
    "java.sql.resultset.getrowid": [
        "java.sql.ResultSet.getRowId(int)",
        "java.sql.ResultSet.getRowId(java.lang.String)"
    ],
    "org.omg.corba.dataoutputstream.write_typecode": [
        "org.omg.CORBA.DataOutputStream.write_TypeCode(org.omg.CORBA.TypeCode)"
    ],
    "javax.swing.text.asyncboxview.getbottominset": [
        "javax.swing.text.AsyncBoxView.getBottomInset()"
    ],
    "javax.swing.plaf.synth.synthpainter.painttablebackground": [
        "javax.swing.plaf.synth.SynthPainter.paintTableBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.sql.databasemetadata.ownupdatesarevisible": [
        "java.sql.DatabaseMetaData.ownUpdatesAreVisible(int)"
    ],
    "javax.script.simplebindings.putall": [
        "javax.script.SimpleBindings.putAll(java.util.Map<? extends,? extends java.lang.Object>)"
    ],
    "java.nio.file.filestore.isreadonly": [
        "java.nio.file.FileStore.isReadOnly()"
    ],
    "javax.swing.jdialog.setlayout": [
        "javax.swing.JDialog.setLayout(java.awt.LayoutManager)"
    ],
    "java.awt.choice.getaccessiblecontext": [
        "java.awt.Choice.getAccessibleContext()"
    ],
    "java.text.dateformatsymbols.getlocalpatternchars": [
        "java.text.DateFormatSymbols.getLocalPatternChars()"
    ],
    "javax.swing.text.styleddocument.setcharacterattributes": [
        "javax.swing.text.StyledDocument.setCharacterAttributes(int,int,javax.swing.text.AttributeSet,boolean)"
    ],
    "javax.swing.joptionpane.setinitialvalue": [
        "javax.swing.JOptionPane.setInitialValue(java.lang.Object)"
    ],
    "java.awt.toolkit.setlockingkeystate": [
        "java.awt.Toolkit.setLockingKeyState(int,boolean)"
    ],
    "java.util.logging.logrecord.setlevel": [
        "java.util.logging.LogRecord.setLevel(java.util.logging.Level)"
    ],
    "javax.xml.soap.soapfault.getfaultnode": [
        "javax.xml.soap.SOAPFault.getFaultNode()"
    ],
    "javax.swing.jradiobutton.getuiclassid": [
        "javax.swing.JRadioButton.getUIClassID()"
    ],
    "java.util.scanner.remove": [
        "java.util.Scanner.remove()"
    ],
    "java.awt.geom.quadcurve2d.clone": [
        "java.awt.geom.QuadCurve2D.clone()"
    ],
    "javax.xml.stream.xmleventwriter.add": [
        "javax.xml.stream.XMLEventWriter.add(javax.xml.stream.events.XMLEvent)",
        "javax.xml.stream.XMLEventWriter.add(javax.xml.stream.XMLEventReader)"
    ],
    "javax.lang.model.element.executableelement.getparameters": [
        "javax.lang.model.element.ExecutableElement.getParameters()"
    ],
    "java.awt.image.renderable.rendercontext.getareaofinterest": [
        "java.awt.image.renderable.RenderContext.getAreaOfInterest()"
    ],
    "javax.swing.defaultboundedrangemodel.setextent": [
        "javax.swing.DefaultBoundedRangeModel.setExtent(int)"
    ],
    "javax.accessibility.accessibletext.getcaretposition": [
        "javax.accessibility.AccessibleText.getCaretPosition()"
    ],
    "javax.lang.model.util.types.getarraytype": [
        "javax.lang.model.util.Types.getArrayType(javax.lang.model.type.TypeMirror)"
    ],
    "javax.print.attribute.standard.mediasize.getmediasizename": [
        "javax.print.attribute.standard.MediaSize.getMediaSizeName()"
    ],
    "javax.swing.jinternalframe.getlastcursor": [
        "javax.swing.JInternalFrame.getLastCursor()"
    ],
    "javax.naming.directory.modificationitem.getattribute": [
        "javax.naming.directory.ModificationItem.getAttribute()"
    ],
    "javax.swing.plaf.synth.synthtableheaderui.propertychange": [
        "javax.swing.plaf.synth.SynthTableHeaderUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "java.sql.preparedstatement.addbatch": [
        "java.sql.PreparedStatement.addBatch()"
    ],
    "javax.print.attribute.standard.mediaprintablearea.tostring": [
        "javax.print.attribute.standard.MediaPrintableArea.toString(int,java.lang.String)",
        "javax.print.attribute.standard.MediaPrintableArea.toString()"
    ],
    "javax.swing.text.gapcontent.createposition": [
        "javax.swing.text.GapContent.createPosition(int)"
    ],
    "javax.tools.javafilemanager.close": [
        "javax.tools.JavaFileManager.close()"
    ],
    "java.sql.timestamp.hashcode": [
        "java.sql.Timestamp.hashCode()"
    ],
    "javax.swing.text.jtextcomponent.restorecomposedtext": [
        "javax.swing.text.JTextComponent.restoreComposedText()"
    ],
    "javax.swing.plaf.basic.basiclistui.createpropertychangelistener": [
        "javax.swing.plaf.basic.BasicListUI.createPropertyChangeListener()"
    ],
    "java.awt.image.renderable.rendercontext.setrenderinghints": [
        "java.awt.image.renderable.RenderContext.setRenderingHints(java.awt.RenderingHints)"
    ],
    "java.lang.class.getfield": [
        "java.lang.Class.getField(java.lang.String)"
    ],
    "java.lang.stringbuilder.append": [
        "java.lang.StringBuilder.append(java.lang.CharSequence,int,int)",
        "java.lang.StringBuilder.append(java.lang.StringBuffer)",
        "java.lang.StringBuilder.append(java.lang.String)",
        "java.lang.StringBuilder.append(char[],int,int)",
        "java.lang.StringBuilder.append(long)",
        "java.lang.StringBuilder.append(boolean)",
        "java.lang.StringBuilder.append(float)",
        "java.lang.StringBuilder.append(char[])",
        "java.lang.StringBuilder.append(char)",
        "java.lang.StringBuilder.append(double)",
        "java.lang.StringBuilder.append(java.lang.Object)",
        "java.lang.StringBuilder.append(int)"
    ],
    "javax.swing.plaf.multi.multitableheaderui.installui": [
        "javax.swing.plaf.multi.MultiTableHeaderUI.installUI(javax.swing.JComponent)"
    ],
    "java.lang.invoke.methodtype.returntype": [
        "java.lang.invoke.MethodType.returnType()"
    ],
    "javax.swing.jformattedtextfield.setfocuslostbehavior": [
        "javax.swing.JFormattedTextField.setFocusLostBehavior(int)"
    ],
    "java.security.codesigner.tostring": [
        "java.security.CodeSigner.toString()"
    ],
    "java.util.regex.pattern.split": [
        "java.util.regex.Pattern.split(java.lang.CharSequence,int)",
        "java.util.regex.Pattern.split(java.lang.CharSequence)"
    ],
    "javax.swing.defaultbuttonmodel.setarmed": [
        "javax.swing.DefaultButtonModel.setArmed(boolean)"
    ],
    "org.omg.dynamicany._dynanystub.get_any": [
        "org.omg.DynamicAny._DynAnyStub.get_any()"
    ],
    "javax.swing.jfilechooser.getaccessory": [
        "javax.swing.JFileChooser.getAccessory()"
    ],
    "javax.swing.timer.setactioncommand": [
        "javax.swing.Timer.setActionCommand(java.lang.String)"
    ],
    "javax.swing.jscrollpane.paramstring": [
        "javax.swing.JScrollPane.paramString()"
    ],
    "java.awt.geom.cubiccurve2d.getctrly2": [
        "java.awt.geom.CubicCurve2D.getCtrlY2()"
    ],
    "javax.management.monitor.countermonitor.getthreshold": [
        "javax.management.monitor.CounterMonitor.getThreshold(javax.management.ObjectName)"
    ],
    "javax.xml.crypto.dsig.xmlsignaturefactory.newxmlsignature": [
        "javax.xml.crypto.dsig.XMLSignatureFactory.newXMLSignature(javax.xml.crypto.dsig.SignedInfo,javax.xml.crypto.dsig.keyinfo.KeyInfo)",
        "javax.xml.crypto.dsig.XMLSignatureFactory.newXMLSignature(javax.xml.crypto.dsig.SignedInfo,javax.xml.crypto.dsig.keyinfo.KeyInfo,java.util.List,java.lang.String,java.lang.String)"
    ],
    "javax.imageio.metadata.iiometadatanode.getlastchild": [
        "javax.imageio.metadata.IIOMetadataNode.getLastChild()"
    ],
    "java.io.console.readline": [
        "java.io.Console.readLine(java.lang.String,java.lang.Object)",
        "java.io.Console.readLine(java.lang.String,java.lang.Object...)",
        "java.io.Console.readLine()"
    ],
    "javax.management.monitor.stringmonitormbean.setstringtocompare": [
        "javax.management.monitor.StringMonitorMBean.setStringToCompare(java.lang.String)"
    ],
    "javax.imageio.imagereader.getthumbnailwidth": [
        "javax.imageio.ImageReader.getThumbnailWidth(int,int)"
    ],
    "javax.xml.ws.spi.servicedelegate.setexecutor": [
        "javax.xml.ws.spi.ServiceDelegate.setExecutor(java.util.concurrent.Executor)"
    ],
    "java.util.stream.longstream.findany": [
        "java.util.stream.LongStream.findAny()"
    ],
    "java.awt.image.colormodel.getcolorspace": [
        "java.awt.image.ColorModel.getColorSpace()"
    ],
    "java.util.gregoriancalendar.from": [
        "java.util.GregorianCalendar.from(java.time.ZonedDateTime)"
    ],
    "javax.xml.bind.attachment.attachmentunmarshaller.getattachmentasbytearray": [
        "javax.xml.bind.attachment.AttachmentUnmarshaller.getAttachmentAsByteArray(java.lang.String)"
    ],
    "javax.activation.mailcapcommandmap.getpreferredcommands": [
        "javax.activation.MailcapCommandMap.getPreferredCommands(java.lang.String)"
    ],
    "javax.swing.undo.stateedit.end": [
        "javax.swing.undo.StateEdit.end()"
    ],
    "java.time.zoneddatetime.withsecond": [
        "java.time.ZonedDateTime.withSecond(int)"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.settablename": [
        "javax.sql.rowset.RowSetMetaDataImpl.setTableName(int,java.lang.String)"
    ],
    "javax.swing.plaf.basic.basictableheaderui.createmouseinputlistener": [
        "javax.swing.plaf.basic.BasicTableHeaderUI.createMouseInputListener()"
    ],
    "javax.swing.text.html.parser.contentmodel.tostring": [
        "javax.swing.text.html.parser.ContentModel.toString()"
    ],
    "javax.management.attributechangenotification.getoldvalue": [
        "javax.management.AttributeChangeNotification.getOldValue()"
    ],
    "javax.xml.soap.attachmentpart.setbase64content": [
        "javax.xml.soap.AttachmentPart.setBase64Content(java.io.InputStream,java.lang.String)"
    ],
    "java.util.eventobject.tostring": [
        "java.util.EventObject.toString()"
    ],
    "javax.swing.jtable.setselectionmode": [
        "javax.swing.JTable.setSelectionMode(int)"
    ],
    "java.awt.lineargradientpaint.createcontext": [
        "java.awt.LinearGradientPaint.createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)"
    ],
    "javax.swing.overlaylayout.removelayoutcomponent": [
        "javax.swing.OverlayLayout.removeLayoutComponent(java.awt.Component)"
    ],
    "org.omg.dynamicany._dynvaluestub.insert_short": [
        "org.omg.DynamicAny._DynValueStub.insert_short(short)"
    ],
    "java.awt.image.raster.getpixels": [
        "java.awt.image.Raster.getPixels(int,int,int,int,float[])",
        "java.awt.image.Raster.getPixels(int,int,int,int,int[])",
        "java.awt.image.Raster.getPixels(int,int,int,int,double[])"
    ],
    "java.util.spi.localeserviceprovider.getavailablelocales": [
        "java.util.spi.LocaleServiceProvider.getAvailableLocales()"
    ],
    "javax.security.auth.login.logincontext.getsubject": [
        "javax.security.auth.login.LoginContext.getSubject()"
    ],
    "javax.swing.text.abstractdocument.fireundoableeditupdate": [
        "javax.swing.text.AbstractDocument.fireUndoableEditUpdate(javax.swing.event.UndoableEditEvent)"
    ],
    "java.util.concurrent.atomic.atomicboolean.weakcompareandset": [
        "java.util.concurrent.atomic.AtomicBoolean.weakCompareAndSet(boolean,boolean)"
    ],
    "javax.xml.soap.soappart.getcontentlocation": [
        "javax.xml.soap.SOAPPart.getContentLocation()"
    ],
    "java.time.chrono.chronoperiod.multipliedby": [
        "java.time.chrono.ChronoPeriod.multipliedBy(int)"
    ],
    "java.util.stream.collectors.averagingdouble": [
        "java.util.stream.Collectors.averagingDouble(java.util.function.ToDoubleFunction<? super T>)"
    ],
    "javax.print.attribute.urisyntax.tostring": [
        "javax.print.attribute.URISyntax.toString()"
    ],
    "java.util.jar.manifest.read": [
        "java.util.jar.Manifest.read(java.io.InputStream)"
    ],
    "javax.swing.plaf.basic.basictreeui.setmodel": [
        "javax.swing.plaf.basic.BasicTreeUI.setModel(javax.swing.tree.TreeModel)"
    ],
    "java.awt.font.multiplemaster.getdesignaxisdefaults": [
        "java.awt.font.MultipleMaster.getDesignAxisDefaults()"
    ],
    "java.io.randomaccessfile.readbyte": [
        "java.io.RandomAccessFile.readByte()"
    ],
    "java.io.streamtokenizer.parsenumbers": [
        "java.io.StreamTokenizer.parseNumbers()"
    ],
    "javax.print.attribute.resolutionsyntax.tostring": [
        "javax.print.attribute.ResolutionSyntax.toString(int,java.lang.String)",
        "javax.print.attribute.ResolutionSyntax.toString()"
    ],
    "javax.swing.inputmap.allkeys": [
        "javax.swing.InputMap.allKeys()"
    ],
    "javax.swing.border.titledborder.gettitlecolor": [
        "javax.swing.border.TitledBorder.getTitleColor()"
    ],
    "javax.swing.jformattedtextfield.setdocument": [
        "javax.swing.JFormattedTextField.setDocument(javax.swing.text.Document)"
    ],
    "org.omg.portableserver.servant._poa": [
        "org.omg.PortableServer.Servant._poa()"
    ],
    "javax.swing.plaf.synth.synthtextfieldui.propertychange": [
        "javax.swing.plaf.synth.SynthTextFieldUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "java.util.concurrent.atomic.atomicreferencefieldupdater.getandupdate": [
        "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndUpdate(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.function.UnaryOperator<java.util.concurrent.atomic.AtomicReferenceFieldUpdater>)",
        "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndUpdate(T,java.util.function.UnaryOperator<V>)"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.installlisteners": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.installListeners()"
    ],
    "java.io.bufferedwriter.flush": [
        "java.io.BufferedWriter.flush()"
    ],
    "java.util.arraydeque.peek": [
        "java.util.ArrayDeque.peek()"
    ],
    "java.net.multicastsocket.settimetolive": [
        "java.net.MulticastSocket.setTimeToLive(int)"
    ],
    "org.omg.corba.definitionkind.from_int": [
        "org.omg.CORBA.DefinitionKind.from_int(int)"
    ],
    "java.text.stringcharacteriterator.next": [
        "java.text.StringCharacterIterator.next()"
    ],
    "javax.swing.text.gapcontent.resetmarksatzero": [
        "javax.swing.text.GapContent.resetMarksAtZero()"
    ],
    "javax.print.attribute.standard.mediasizename.getstringtable": [
        "javax.print.attribute.standard.MediaSizeName.getStringTable()"
    ],
    "java.util.concurrent.executorcompletionservice.submit": [
        "java.util.concurrent.ExecutorCompletionService.submit(java.lang.Runnable,V)",
        "java.util.concurrent.ExecutorCompletionService.submit(java.util.concurrent.Callable<V>)"
    ],
    "javax.swing.jtextfield.setcolumns": [
        "javax.swing.JTextField.setColumns(int)"
    ],
    "java.security.interfaces.rsaprivatecrtkey.getpublicexponent": [
        "java.security.interfaces.RSAPrivateCrtKey.getPublicExponent()"
    ],
    "java.nio.charset.coderresult.isunmappable": [
        "java.nio.charset.CoderResult.isUnmappable()"
    ],
    "java.awt.menushortcut.equals": [
        "java.awt.MenuShortcut.equals(java.awt.MenuShortcut)",
        "java.awt.MenuShortcut.equals(java.lang.Object)"
    ],
    "java.util.treemap.lowerentry": [
        "java.util.TreeMap.lowerEntry(K)"
    ],
    "java.util.gregoriancalendar.getgregorianchange": [
        "java.util.GregorianCalendar.getGregorianChange()"
    ],
    "javax.swing.text.flowview.flowstrategy.layoutrow": [
        "javax.swing.text.FlowView.FlowStrategy.layoutRow(javax.swing.text.FlowView,int,int)"
    ],
    "org.omg.corba.typecode.member_count": [
        "org.omg.CORBA.TypeCode.member_count()"
    ],
    "javax.naming.ldap.ldapcontext.newinstance": [
        "javax.naming.ldap.LdapContext.newInstance(javax.naming.ldap.Control[])"
    ],
    "java.security.guard.checkguard": [
        "java.security.Guard.checkGuard(java.lang.Object)"
    ],
    "javax.accessibility.accessible.getaccessiblecontext": [
        "javax.accessibility.Accessible.getAccessibleContext()"
    ],
    "javax.swing.jinternalframe.setui": [
        "javax.swing.JInternalFrame.setUI(javax.swing.plaf.InternalFrameUI)"
    ],
    "java.awt.image.pixelgrabber.getcolormodel": [
        "java.awt.image.PixelGrabber.getColorModel()"
    ],
    "java.nio.intbuffer.hasarray": [
        "java.nio.IntBuffer.hasArray()"
    ],
    "javax.swing.plaf.metal.oceantheme.getprimary2": [
        "javax.swing.plaf.metal.OceanTheme.getPrimary2()"
    ],
    "java.util.illegalformatflagsexception.getflags": [
        "java.util.IllegalFormatFlagsException.getFlags()"
    ],
    "javax.swing.jscrollpane.getrowheader": [
        "javax.swing.JScrollPane.getRowHeader()"
    ],
    "javax.swing.text.jtextcomponent.select": [
        "javax.swing.text.JTextComponent.select(int,int)"
    ],
    "java.util.prefs.preferences.putfloat": [
        "java.util.prefs.Preferences.putFloat(java.lang.String,float)"
    ],
    "javax.imageio.imagewriter.processwarningoccurred": [
        "javax.imageio.ImageWriter.processWarningOccurred(int,java.lang.String,java.lang.String)",
        "javax.imageio.ImageWriter.processWarningOccurred(int,java.lang.String)"
    ],
    "java.time.duration.minusseconds": [
        "java.time.Duration.minusSeconds(long)"
    ],
    "javax.management.modelmbean.modelmbeannotificationbroadcaster.sendattributechangenotification": [
        "javax.management.modelmbean.ModelMBeanNotificationBroadcaster.sendAttributeChangeNotification(javax.management.Attribute,javax.management.Attribute)",
        "javax.management.modelmbean.ModelMBeanNotificationBroadcaster.sendAttributeChangeNotification(javax.management.AttributeChangeNotification)"
    ],
    "java.beans.xmldecoder.getowner": [
        "java.beans.XMLDecoder.getOwner()"
    ],
    "org.w3c.dom.entity.getpublicid": [
        "org.w3c.dom.Entity.getPublicId()"
    ],
    "javax.swing.jlayer.getscrollableunitincrement": [
        "javax.swing.JLayer.getScrollableUnitIncrement(java.awt.Rectangle,int,int)"
    ],
    "java.util.zip.zipfile.getname": [
        "java.util.zip.ZipFile.getName()"
    ],
    "java.awt.image.convolveop.getkernel": [
        "java.awt.image.ConvolveOp.getKernel()"
    ],
    "javax.swing.jcomponent.setautoscrolls": [
        "javax.swing.JComponent.setAutoscrolls(boolean)"
    ],
    "org.ietf.jgss.gsscredential.getremaininglifetime": [
        "org.ietf.jgss.GSSCredential.getRemainingLifetime()"
    ],
    "java.lang.securitymanager.checklisten": [
        "java.lang.SecurityManager.checkListen(int)"
    ],
    "java.security.cert.x509crl.verify": [
        "java.security.cert.X509CRL.verify(java.security.PublicKey)",
        "java.security.cert.X509CRL.verify(java.security.PublicKey,java.lang.String)",
        "java.security.cert.X509CRL.verify(java.security.PublicKey,java.security.Provider)"
    ],
    "javax.xml.soap.attachmentpart.addmimeheader": [
        "javax.xml.soap.AttachmentPart.addMimeHeader(java.lang.String,java.lang.String)"
    ],
    "java.net.socket.setkeepalive": [
        "java.net.Socket.setKeepAlive(boolean)"
    ],
    "javax.print.attribute.resolutionsyntax.getcrossfeedresolutiondphi": [
        "javax.print.attribute.ResolutionSyntax.getCrossFeedResolutionDphi()"
    ],
    "javax.imageio.metadata.iiometadataformatimpl.removeattribute": [
        "javax.imageio.metadata.IIOMetadataFormatImpl.removeAttribute(java.lang.String,java.lang.String)"
    ],
    "javax.swing.plaf.metal.oceantheme.getprimary1": [
        "javax.swing.plaf.metal.OceanTheme.getPrimary1()"
    ],
    "javax.naming.context.rebind": [
        "javax.naming.Context.rebind(javax.naming.Name,java.lang.Object)",
        "javax.naming.Context.rebind(java.lang.String,java.lang.Object)"
    ],
    "java.awt.font.linemetrics.getascent": [
        "java.awt.font.LineMetrics.getAscent()"
    ],
    "javax.swing.plaf.multi.multitreeui.getrowcount": [
        "javax.swing.plaf.multi.MultiTreeUI.getRowCount(javax.swing.JTree)"
    ],
    "java.io.randomaccessfile.readint": [
        "java.io.RandomAccessFile.readInt()"
    ],
    "javax.swing.text.wrappedplainview.drawselectedtext": [
        "javax.swing.text.WrappedPlainView.drawSelectedText(java.awt.Graphics,int,int,int,int)"
    ],
    "java.nio.floatbuffer.duplicate": [
        "java.nio.FloatBuffer.duplicate()"
    ],
    "javax.swing.text.html.inlineview.breakview": [
        "javax.swing.text.html.InlineView.breakView(int,int,float,float)"
    ],
    "javax.swing.text.plainview.drawselectedtext": [
        "javax.swing.text.PlainView.drawSelectedText(java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.jlist.getfixedcellwidth": [
        "javax.swing.JList.getFixedCellWidth()"
    ],
    "javax.management.openmbean.openmbeanparameterinfo.getdescription": [
        "javax.management.openmbean.OpenMBeanParameterInfo.getDescription()"
    ],
    "java.awt.geom.arc2d.getbounds2d": [
        "java.awt.geom.Arc2D.getBounds2D()"
    ],
    "java.beans.featuredescriptor.tostring": [
        "java.beans.FeatureDescriptor.toString()"
    ],
    "javax.management.query.match": [
        "javax.management.Query.match(javax.management.AttributeValueExp,javax.management.StringValueExp)"
    ],
    "javax.swing.text.tabset.gettabcount": [
        "javax.swing.text.TabSet.getTabCount()"
    ],
    "javax.swing.jtable.setcellselectionenabled": [
        "javax.swing.JTable.setCellSelectionEnabled(boolean)"
    ],
    "javax.swing.jfilechooser.gettypedescription": [
        "javax.swing.JFileChooser.getTypeDescription(java.io.File)"
    ],
    "java.util.concurrent.blockingdeque.removelastoccurrence": [
        "java.util.concurrent.BlockingDeque.removeLastOccurrence(java.lang.Object)"
    ],
    "javax.print.attribute.standard.printerstatereason.getcategory": [
        "javax.print.attribute.standard.PrinterStateReason.getCategory()"
    ],
    "javax.swing.jspinner.removechangelistener": [
        "javax.swing.JSpinner.removeChangeListener(javax.swing.event.ChangeListener)"
    ],
    "javax.xml.soap.soappart.addmimeheader": [
        "javax.xml.soap.SOAPPart.addMimeHeader(java.lang.String,java.lang.String)"
    ],
    "java.sql.resultsetmetadata.getcolumncount": [
        "java.sql.ResultSetMetaData.getColumnCount()"
    ],
    "javax.swing.jcombobox.setkeyselectionmanager": [
        "javax.swing.JComboBox.setKeySelectionManager(javax.swing.JComboBox.KeySelectionManager)"
    ],
    "java.time.localtime.minusnanos": [
        "java.time.LocalTime.minusNanos(long)"
    ],
    "javax.swing.jtree.cancelediting": [
        "javax.swing.JTree.cancelEditing()"
    ],
    "org.omg.dynamicany._dynsequencestub.insert_double": [
        "org.omg.DynamicAny._DynSequenceStub.insert_double(double)"
    ],
    "javax.print.attribute.standard.jobstate.getenumvaluetable": [
        "javax.print.attribute.standard.JobState.getEnumValueTable()"
    ],
    "java.lang.invoke.serializedlambda.getcapturedarg": [
        "java.lang.invoke.SerializedLambda.getCapturedArg(int)"
    ],
    "javax.management.openmbean.compositetype.equals": [
        "javax.management.openmbean.CompositeType.equals(java.lang.Object)"
    ],
    "java.awt.datatransfer.dataflavor.clone": [
        "java.awt.datatransfer.DataFlavor.clone()"
    ],
    "javax.security.auth.callback.confirmationcallback.getprompt": [
        "javax.security.auth.callback.ConfirmationCallback.getPrompt()"
    ],
    "java.io.objectoutputstream.replaceobject": [
        "java.io.ObjectOutputStream.replaceObject(java.lang.Object)"
    ],
    "java.util.concurrent.concurrentskiplistset.higher": [
        "java.util.concurrent.ConcurrentSkipListSet.higher(E)"
    ],
    "java.awt.image.filteredimagesource.addconsumer": [
        "java.awt.image.FilteredImageSource.addConsumer(java.awt.image.ImageConsumer)"
    ],
    "org.omg.corba.request.add_named_inout_arg": [
        "org.omg.CORBA.Request.add_named_inout_arg(java.lang.String)"
    ],
    "javax.xml.soap.soapconnection.close": [
        "javax.xml.soap.SOAPConnection.close()"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.normalize": [
        "javax.xml.datatype.XMLGregorianCalendar.normalize()"
    ],
    "java.security.codesource.getcodesigners": [
        "java.security.CodeSource.getCodeSigners()"
    ],
    "java.awt.window.setshape": [
        "java.awt.Window.setShape(java.awt.Shape)"
    ],
    "javax.xml.transform.stax.staxresult.getxmleventwriter": [
        "javax.xml.transform.stax.StAXResult.getXMLEventWriter()"
    ],
    "org.omg.corba.request.get_response": [
        "org.omg.CORBA.Request.get_response()"
    ],
    "java.awt.scrollpaneadjustable.setmaximum": [
        "java.awt.ScrollPaneAdjustable.setMaximum(int)"
    ],
    "javax.management.modelmbean.modelmbeaninfo.getoperations": [
        "javax.management.modelmbean.ModelMBeanInfo.getOperations()"
    ],
    "javax.xml.parsers.documentbuilderfactory.setignoringcomments": [
        "javax.xml.parsers.DocumentBuilderFactory.setIgnoringComments(boolean)"
    ],
    "org.omg.dynamicany.dynanyoperations.get_long": [
        "org.omg.DynamicAny.DynAnyOperations.get_long()"
    ],
    "javax.naming.compositename.size": [
        "javax.naming.CompositeName.size()"
    ],
    "javax.swing.springlayout.constraints.setheight": [
        "javax.swing.SpringLayout.Constraints.setHeight(javax.swing.Spring)"
    ],
    "org.omg.corba.tckind.from_int": [
        "org.omg.CORBA.TCKind.from_int(int)"
    ],
    "javax.swing.tree.variableheightlayoutcache.setexpandedstate": [
        "javax.swing.tree.VariableHeightLayoutCache.setExpandedState(javax.swing.tree.TreePath,boolean)"
    ],
    "javax.swing.plaf.basic.basicspinnerui.uninstalllisteners": [
        "javax.swing.plaf.basic.BasicSpinnerUI.uninstallListeners()"
    ],
    "java.util.random.nextbytes": [
        "java.util.Random.nextBytes(byte[])"
    ],
    "org.omg.corba.portable.objectimpl._releasereply": [
        "org.omg.CORBA.portable.ObjectImpl._releaseReply(org.omg.CORBA.portable.InputStream)"
    ],
    "java.awt.dnd.droptargetcontext.rejectdrag": [
        "java.awt.dnd.DropTargetContext.rejectDrag()"
    ],
    "java.lang.integer.remainderunsigned": [
        "java.lang.Integer.remainderUnsigned(int,int)"
    ],
    "javax.xml.soap.soapelement.getvisiblenamespaceprefixes": [
        "javax.xml.soap.SOAPElement.getVisibleNamespacePrefixes()"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.getcolumndisplaysize": [
        "javax.sql.rowset.RowSetMetaDataImpl.getColumnDisplaySize(int)"
    ],
    "java.util.deque.pop": [
        "java.util.Deque.pop()"
    ],
    "java.security.protectiondomain.tostring": [
        "java.security.ProtectionDomain.toString()"
    ],
    "java.time.format.datetimeformatter.oflocalizedtime": [
        "java.time.format.DateTimeFormatter.ofLocalizedTime(java.time.format.FormatStyle)"
    ],
    "java.security.cert.x509certselector.setextendedkeyusage": [
        "java.security.cert.X509CertSelector.setExtendedKeyUsage(java.util.Set<java.lang.String>)"
    ],
    "javax.xml.transform.stream.streamsource.getinputstream": [
        "javax.xml.transform.stream.StreamSource.getInputStream()"
    ],
    "java.awt.component.createimage": [
        "java.awt.Component.createImage(int,int)",
        "java.awt.Component.createImage(java.awt.image.ImageProducer)"
    ],
    "javax.swing.abstractcelleditor.getcelleditorlisteners": [
        "javax.swing.AbstractCellEditor.getCellEditorListeners()"
    ],
    "javax.imageio.imagewriteparam.getprogressivemode": [
        "javax.imageio.ImageWriteParam.getProgressiveMode()"
    ],
    "javax.swing.plaf.synth.synthbuttonui.getmaximumsize": [
        "javax.swing.plaf.synth.SynthButtonUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "java.io.objectinputstream.defaultreadobject": [
        "java.io.ObjectInputStream.defaultReadObject()"
    ],
    "java.awt.checkbox.getitemlisteners": [
        "java.awt.Checkbox.getItemListeners()"
    ],
    "javax.swing.box.getaccessiblecontext": [
        "javax.swing.Box.getAccessibleContext()"
    ],
    "java.awt.mediatracker.addimage": [
        "java.awt.MediaTracker.addImage(java.awt.Image,int)",
        "java.awt.MediaTracker.addImage(java.awt.Image,int,int,int)"
    ],
    "javax.swing.swingutilities.getwindowancestor": [
        "javax.swing.SwingUtilities.getWindowAncestor(java.awt.Component)"
    ],
    "javax.swing.plaf.metal.metalcomboboxicon.geticonwidth": [
        "javax.swing.plaf.metal.MetalComboBoxIcon.getIconWidth()"
    ],
    "java.lang.stringbuilder.getchars": [
        "java.lang.StringBuilder.getChars(int,int,char[],int)"
    ],
    "javax.lang.model.element.qualifiednameable.getqualifiedname": [
        "javax.lang.model.element.QualifiedNameable.getQualifiedName()"
    ],
    "java.lang.stringbuilder.capacity": [
        "java.lang.StringBuilder.capacity()"
    ],
    "java.net.datagramsocket.getinetaddress": [
        "java.net.DatagramSocket.getInetAddress()"
    ],
    "javax.script.scriptenginefactory.getenginename": [
        "javax.script.ScriptEngineFactory.getEngineName()"
    ],
    "javax.xml.ws.spi.invoker.inject": [
        "javax.xml.ws.spi.Invoker.inject(javax.xml.ws.WebServiceContext)"
    ],
    "javax.swing.uimanager.lookandfeelinfo.getname": [
        "javax.swing.UIManager.LookAndFeelInfo.getName()"
    ],
    "org.omg.dynamicany._dynstructstub.insert_wstring": [
        "org.omg.DynamicAny._DynStructStub.insert_wstring(java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthcomboboxui.paintcurrentvalue": [
        "javax.swing.plaf.synth.SynthComboBoxUI.paintCurrentValue(java.awt.Graphics,java.awt.Rectangle,boolean)"
    ],
    "java.awt.rectangle.intersects": [
        "java.awt.Rectangle.intersects(java.awt.Rectangle)"
    ],
    "javax.swing.jfilechooser.removeactionlistener": [
        "javax.swing.JFileChooser.removeActionListener(java.awt.event.ActionListener)"
    ],
    "javax.management.openmbean.openmbeaninfo.getconstructors": [
        "javax.management.openmbean.OpenMBeanInfo.getConstructors()"
    ],
    "javax.swing.text.jtextcomponent.getdroplocation": [
        "javax.swing.text.JTextComponent.getDropLocation()"
    ],
    "java.util.treemap.clone": [
        "java.util.TreeMap.clone()"
    ],
    "java.time.offsetdatetime.plusseconds": [
        "java.time.OffsetDateTime.plusSeconds(long)"
    ],
    "java.awt.pageattributes.tostring": [
        "java.awt.PageAttributes.toString()"
    ],
    "org.omg.corba.dataoutputstream.write_octet_array": [
        "org.omg.CORBA.DataOutputStream.write_octet_array(byte[],int,int)"
    ],
    "java.awt.desktop.open": [
        "java.awt.Desktop.open(java.io.File)"
    ],
    "java.time.localdatetime.withsecond": [
        "java.time.LocalDateTime.withSecond(int)"
    ],
    "javax.naming.directory.searchcontrols.setcountlimit": [
        "javax.naming.directory.SearchControls.setCountLimit(long)"
    ],
    "javax.swing.boundedrangemodel.setmaximum": [
        "javax.swing.BoundedRangeModel.setMaximum(int)"
    ],
    "org.w3c.dom.events.eventtarget.dispatchevent": [
        "org.w3c.dom.events.EventTarget.dispatchEvent(org.w3c.dom.events.Event)"
    ],
    "javax.xml.soap.soapconnectionfactory.newinstance": [
        "javax.xml.soap.SOAPConnectionFactory.newInstance()"
    ],
    "java.time.instant.range": [
        "java.time.Instant.range(java.time.temporal.TemporalField)"
    ],
    "javax.xml.ws.bindingprovider.getrequestcontext": [
        "javax.xml.ws.BindingProvider.getRequestContext()"
    ],
    "java.security.provider.getservice": [
        "java.security.Provider.getService(java.lang.String,java.lang.String)"
    ],
    "java.util.hashmap.values": [
        "java.util.HashMap.values()"
    ],
    "java.lang.stringbuilder.tostring": [
        "java.lang.StringBuilder.toString()"
    ],
    "org.w3c.dom.document.getelementsbytagname": [
        "org.w3c.dom.Document.getElementsByTagName(java.lang.String)"
    ],
    "javax.xml.validation.validatorhandler.setfeature": [
        "javax.xml.validation.ValidatorHandler.setFeature(java.lang.String,boolean)"
    ],
    "java.sql.resultset.getfloat": [
        "java.sql.ResultSet.getFloat(int)",
        "java.sql.ResultSet.getFloat(java.lang.String)"
    ],
    "javax.swing.plaf.multi.multirootpaneui.update": [
        "javax.swing.plaf.multi.MultiRootPaneUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.sql.rowset.cachedrowset.setkeycolumns": [
        "javax.sql.rowset.CachedRowSet.setKeyColumns(int[])"
    ],
    "java.time.format.datetimeparseexception.geterrorindex": [
        "java.time.format.DateTimeParseException.getErrorIndex()"
    ],
    "javax.xml.bind.datatypeconverterinterface.printinteger": [
        "javax.xml.bind.DatatypeConverterInterface.printInteger(java.math.BigInteger)"
    ],
    "java.lang.management.operatingsystemmxbean.getversion": [
        "java.lang.management.OperatingSystemMXBean.getVersion()"
    ],
    "javax.sql.rowset.serial.serialblob.free": [
        "javax.sql.rowset.serial.SerialBlob.free()"
    ],
    "javax.swing.jcolorchooser.addchooserpanel": [
        "javax.swing.JColorChooser.addChooserPanel(javax.swing.colorchooser.AbstractColorChooserPanel)"
    ],
    "javax.swing.swingworker.addpropertychangelistener": [
        "javax.swing.SwingWorker.addPropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "java.awt.image.renderable.rendercontext.setareaofinterest": [
        "java.awt.image.renderable.RenderContext.setAreaOfInterest(java.awt.Shape)"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.removetreeselectionlistener": [
        "javax.swing.tree.DefaultTreeSelectionModel.removeTreeSelectionListener(javax.swing.event.TreeSelectionListener)"
    ],
    "javax.xml.ws.soap.soapbinding.setmtomenabled": [
        "javax.xml.ws.soap.SOAPBinding.setMTOMEnabled(boolean)"
    ],
    "java.nio.file.filevisitor.visitfile": [
        "java.nio.file.FileVisitor.visitFile(java.nio.file.FileVisitor,java.nio.file.attribute.BasicFileAttributes)",
        "java.nio.file.FileVisitor.visitFile(T,java.nio.file.attribute.BasicFileAttributes)"
    ],
    "javax.swing.text.abstractwriter.getelementiterator": [
        "javax.swing.text.AbstractWriter.getElementIterator()"
    ],
    "java.util.concurrent.blockingdeque.addlast": [
        "java.util.concurrent.BlockingDeque.addLast(E)",
        "java.util.concurrent.BlockingDeque.addLast(java.util.concurrent.BlockingDeque)"
    ],
    "java.util.regex.matcher.replaceall": [
        "java.util.regex.Matcher.replaceAll(java.lang.String)"
    ],
    "java.lang.reflect.field.getgenerictype": [
        "java.lang.reflect.Field.getGenericType()"
    ],
    "org.omg.corba.any.insert_ulong": [
        "org.omg.CORBA.Any.insert_ulong(int)"
    ],
    "java.lang.reflect.executable.getdeclaringclass": [
        "java.lang.reflect.Executable.getDeclaringClass()"
    ],
    "java.util.vector.removeif": [
        "java.util.Vector.removeIf(java.util.function.Predicate<? super E>)"
    ],
    "java.awt.cardlayout.next": [
        "java.awt.CardLayout.next(java.awt.Container)"
    ],
    "org.omg.corba.portable.valueinputstream.start_value": [
        "org.omg.CORBA.portable.ValueInputStream.start_value()"
    ],
    "javax.swing.jformattedtextfield.commitedit": [
        "javax.swing.JFormattedTextField.commitEdit()"
    ],
    "java.awt.image.raster.getsamplemodel": [
        "java.awt.image.Raster.getSampleModel()"
    ],
    "org.omg.dynamicany._dynstructstub.insert_string": [
        "org.omg.DynamicAny._DynStructStub.insert_string(java.lang.String)"
    ],
    "javax.swing.event.hyperlinkevent.geteventtype": [
        "javax.swing.event.HyperlinkEvent.getEventType()"
    ],
    "javax.print.attribute.standard.copies.getcategory": [
        "javax.print.attribute.standard.Copies.getCategory()"
    ],
    "javax.xml.xpath.xpath.getnamespacecontext": [
        "javax.xml.xpath.XPath.getNamespaceContext()"
    ],
    "javax.swing.text.html.objectview.createcomponent": [
        "javax.swing.text.html.ObjectView.createComponent()"
    ],
    "org.omg.corba.any.insert_fixed": [
        "org.omg.CORBA.Any.insert_fixed(java.math.BigDecimal,org.omg.CORBA.TypeCode)",
        "org.omg.CORBA.Any.insert_fixed(java.math.BigDecimal)"
    ],
    "org.w3c.dom.attr.setvalue": [
        "org.w3c.dom.Attr.setValue(java.lang.String)"
    ],
    "java.time.zone.zoneoffsettransition.isoverlap": [
        "java.time.zone.ZoneOffsetTransition.isOverlap()"
    ],
    "javax.xml.stream.events.startelement.getattributebyname": [
        "javax.xml.stream.events.StartElement.getAttributeByName(javax.xml.namespace.QName)"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.resettopreferredsizes": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.resetToPreferredSizes(javax.swing.JSplitPane)"
    ],
    "javax.sound.sampled.audiosystem.gettargetlineinfo": [
        "javax.sound.sampled.AudioSystem.getTargetLineInfo(javax.sound.sampled.Line.Info)"
    ],
    "java.text.attributedcharacteriterator.getallattributekeys": [
        "java.text.AttributedCharacterIterator.getAllAttributeKeys()"
    ],
    "java.net.socket.shutdowninput": [
        "java.net.Socket.shutdownInput()"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.removeselectionpath": [
        "javax.swing.tree.DefaultTreeSelectionModel.removeSelectionPath(javax.swing.tree.TreePath)"
    ],
    "org.omg.corba.datainputstream.read_long_array": [
        "org.omg.CORBA.DataInputStream.read_long_array(org.omg.CORBA.LongSeqHolder,int,int)"
    ],
    "javax.swing.tree.defaulttreemodel.removetreemodellistener": [
        "javax.swing.tree.DefaultTreeModel.removeTreeModelListener(javax.swing.event.TreeModelListener)"
    ],
    "java.awt.font.textlayout.hashcode": [
        "java.awt.font.TextLayout.hashCode()"
    ],
    "java.util.hashtable.elements": [
        "java.util.Hashtable.elements()"
    ],
    "javax.swing.table.abstracttablemodel.firetablerowsupdated": [
        "javax.swing.table.AbstractTableModel.fireTableRowsUpdated(int,int)"
    ],
    "java.awt.dnd.dragsource.createdraggesturerecognizer": [
        "java.awt.dnd.DragSource.createDragGestureRecognizer(java.lang.Class<T>,java.awt.Component,int,java.awt.dnd.DragGestureListener)"
    ],
    "java.util.collections.sort": [
        "java.util.Collections.sort(java.util.List<T>)",
        "java.util.Collections.sort(java.util.List<T>,java.util.Comparator<? super T>)"
    ],
    "javax.imageio.imageio.getcachedirectory": [
        "javax.imageio.ImageIO.getCacheDirectory()"
    ],
    "java.lang.stringbuffer.indexof": [
        "java.lang.StringBuffer.indexOf(java.lang.String)",
        "java.lang.StringBuffer.indexOf(java.lang.String,int)"
    ],
    "java.rmi.server.uid.read": [
        "java.rmi.server.UID.read(java.io.DataInput)"
    ],
    "java.sql.databasemetadata.getmaxconnections": [
        "java.sql.DatabaseMetaData.getMaxConnections()"
    ],
    "javax.swing.jsplitpane.setonetouchexpandable": [
        "javax.swing.JSplitPane.setOneTouchExpandable(boolean)"
    ],
    "java.lang.string.indexof": [
        "java.lang.String.indexOf(int)",
        "java.lang.String.indexOf(java.lang.String,int)",
        "java.lang.String.indexOf(java.lang.String)",
        "java.lang.String.indexOf(int,int)"
    ],
    "java.nio.charset.charsetencoder.canencode": [
        "java.nio.charset.CharsetEncoder.canEncode(char)",
        "java.nio.charset.CharsetEncoder.canEncode(java.lang.CharSequence)"
    ],
    "java.text.decimalformatsymbols.setminussign": [
        "java.text.DecimalFormatSymbols.setMinusSign(char)"
    ],
    "javax.swing.plaf.basic.basicprogressbarui.getbaselineresizebehavior": [
        "javax.swing.plaf.basic.BasicProgressBarUI.getBaselineResizeBehavior(javax.swing.JComponent)"
    ],
    "java.util.prefs.preferences.getfloat": [
        "java.util.prefs.Preferences.getFloat(java.lang.String,float)"
    ],
    "java.util.zip.zipfile.getinputstream": [
        "java.util.zip.ZipFile.getInputStream(java.util.zip.ZipEntry)"
    ],
    "java.util.arraydeque.addlast": [
        "java.util.ArrayDeque.addLast(java.util.ArrayDeque)",
        "java.util.ArrayDeque.addLast(E)"
    ],
    "java.util.regex.matcher.tostring": [
        "java.util.regex.Matcher.toString()"
    ],
    "java.security.cert.x509crl.getsigalgparams": [
        "java.security.cert.X509CRL.getSigAlgParams()"
    ],
    "javax.script.scriptcontext.setwriter": [
        "javax.script.ScriptContext.setWriter(java.io.Writer)"
    ],
    "javax.management.openmbean.tabulardatasupport.values": [
        "javax.management.openmbean.TabularDataSupport.values()"
    ],
    "org.omg.corba.object._is_a": [
        "org.omg.CORBA.Object._is_a(java.lang.String)"
    ],
    "java.sql.resultset.updatencharacterstream": [
        "java.sql.ResultSet.updateNCharacterStream(java.lang.String,java.io.Reader)",
        "java.sql.ResultSet.updateNCharacterStream(int,java.io.Reader,long)",
        "java.sql.ResultSet.updateNCharacterStream(int,java.io.Reader)",
        "java.sql.ResultSet.updateNCharacterStream(java.lang.String,java.io.Reader,long)"
    ],
    "java.security.cert.trustanchor.getcapublickey": [
        "java.security.cert.TrustAnchor.getCAPublicKey()"
    ],
    "org.omg.dynamicany._dynenumstub.insert_float": [
        "org.omg.DynamicAny._DynEnumStub.insert_float(float)"
    ],
    "java.sql.callablestatement.gettimestamp": [
        "java.sql.CallableStatement.getTimestamp(int)",
        "java.sql.CallableStatement.getTimestamp(int,java.util.Calendar)",
        "java.sql.CallableStatement.getTimestamp(java.lang.String,java.util.Calendar)",
        "java.sql.CallableStatement.getTimestamp(java.lang.String)"
    ],
    "java.awt.dnd.droptarget.drop": [
        "java.awt.dnd.DropTarget.drop(java.awt.dnd.DropTargetDropEvent)"
    ],
    "javax.imageio.metadata.iiometadataformat.getchildpolicy": [
        "javax.imageio.metadata.IIOMetadataFormat.getChildPolicy(java.lang.String)"
    ],
    "java.sql.databasemetadata.allproceduresarecallable": [
        "java.sql.DatabaseMetaData.allProceduresAreCallable()"
    ],
    "java.time.month.get": [
        "java.time.Month.get(java.time.temporal.TemporalField)"
    ],
    "javax.swing.plaf.layerui.processkeyevent": [
        "javax.swing.plaf.LayerUI.processKeyEvent(java.awt.event.KeyEvent,javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)"
    ],
    "javax.swing.jinternalframe.addinternalframelistener": [
        "javax.swing.JInternalFrame.addInternalFrameListener(javax.swing.event.InternalFrameListener)"
    ],
    "java.util.regex.matcher.hasanchoringbounds": [
        "java.util.regex.Matcher.hasAnchoringBounds()"
    ],
    "javax.swing.plaf.basic.basicsplitpanedivider.setbasicsplitpaneui": [
        "javax.swing.plaf.basic.BasicSplitPaneDivider.setBasicSplitPaneUI(javax.swing.plaf.basic.BasicSplitPaneUI)"
    ],
    "java.text.collator.setdecomposition": [
        "java.text.Collator.setDecomposition(int)"
    ],
    "javax.management.standardmbean.preregister": [
        "javax.management.StandardMBean.preRegister(javax.management.MBeanServer,javax.management.ObjectName)"
    ],
    "javax.imageio.imagereader.getthumbnailheight": [
        "javax.imageio.ImageReader.getThumbnailHeight(int,int)"
    ],
    "java.security.cert.x509certselector.setsubjectpublickey": [
        "java.security.cert.X509CertSelector.setSubjectPublicKey(java.security.PublicKey)",
        "java.security.cert.X509CertSelector.setSubjectPublicKey(byte[])"
    ],
    "javax.swing.plaf.synth.synthviewportui.paintborder": [
        "javax.swing.plaf.synth.SynthViewportUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.plaf.synth.synthtextfieldui.paintborder": [
        "javax.swing.plaf.synth.SynthTextFieldUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.abstractbutton.sethideactiontext": [
        "javax.swing.AbstractButton.setHideActionText(boolean)"
    ],
    "org.omg.corba.object._get_domain_managers": [
        "org.omg.CORBA.Object._get_domain_managers()"
    ],
    "javax.swing.jcomponent.getbaselineresizebehavior": [
        "javax.swing.JComponent.getBaselineResizeBehavior()"
    ],
    "javax.sql.rowset.setnull": [
        "javax.sql.RowSet.setNull(java.lang.String,int,java.lang.String)",
        "javax.sql.RowSet.setNull(int,int)",
        "javax.sql.RowSet.setNull(java.lang.String,int)",
        "javax.sql.RowSet.setNull(int,int,java.lang.String)"
    ],
    "java.util.longsummarystatistics.accept": [
        "java.util.LongSummaryStatistics.accept(long)",
        "java.util.LongSummaryStatistics.accept(int)"
    ],
    "org.w3c.dom.events.event.gettarget": [
        "org.w3c.dom.events.Event.getTarget()"
    ],
    "java.sql.databasemetadata.getmaxtablesinselect": [
        "java.sql.DatabaseMetaData.getMaxTablesInSelect()"
    ],
    "javax.activation.mimetype.tostring": [
        "javax.activation.MimeType.toString()"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.setnullable": [
        "javax.sql.rowset.RowSetMetaDataImpl.setNullable(int,int)"
    ],
    "java.time.chrono.hijrahchronology.date": [
        "java.time.chrono.HijrahChronology.date(java.time.chrono.Era,int,int,int)",
        "java.time.chrono.HijrahChronology.date(int,int,int)"
    ],
    "java.awt.awteventmulticaster.mousemoved": [
        "java.awt.AWTEventMulticaster.mouseMoved(java.awt.event.MouseEvent)"
    ],
    "javax.lang.model.element.unknownelementexception.getunknownelement": [
        "javax.lang.model.element.UnknownElementException.getUnknownElement()"
    ],
    "java.io.streamtokenizer.lowercasemode": [
        "java.io.StreamTokenizer.lowerCaseMode(boolean)"
    ],
    "java.util.comparator.thencomparing": [
        "java.util.Comparator.thenComparing(java.util.Comparator<? super java.util.Comparator>)",
        "java.util.Comparator.thenComparing(java.util.function.Function<? super,? extends U>)",
        "java.util.Comparator.thenComparing(java.util.function.Function<? super,? extends U>,java.util.Comparator<? super U>)"
    ],
    "java.net.datagramsocketimpl.disconnect": [
        "java.net.DatagramSocketImpl.disconnect()"
    ],
    "javax.swing.box.paintcomponent": [
        "javax.swing.Box.paintComponent(java.awt.Graphics)"
    ],
    "javax.swing.jcombobox.setmodel": [
        "javax.swing.JComboBox.setModel(javax.swing.ComboBoxModel<javax.swing.JComboBox>)"
    ],
    "javax.swing.plaf.nimbus.abstractregionpainter.decodegradient": [
        "javax.swing.plaf.nimbus.AbstractRegionPainter.decodeGradient(float,float,float,float,float[],java.awt.Color[])"
    ],
    "javax.swing.lookandfeel.getdescription": [
        "javax.swing.LookAndFeel.getDescription()"
    ],
    "javax.xml.bind.helpers.abstractmarshallerimpl.getschemalocation": [
        "javax.xml.bind.helpers.AbstractMarshallerImpl.getSchemaLocation()"
    ],
    "javax.swing.box.filler.changeshape": [
        "javax.swing.Box.Filler.changeShape(java.awt.Dimension,java.awt.Dimension,java.awt.Dimension)"
    ],
    "java.security.cert.x509crlselector.getissuers": [
        "java.security.cert.X509CRLSelector.getIssuers()"
    ],
    "java.awt.geom.rectangle2d.setframe": [
        "java.awt.geom.Rectangle2D.setFrame(double,double,double,double)"
    ],
    "java.sql.sqlclientinfoexception.getfailedproperties": [
        "java.sql.SQLClientInfoException.getFailedProperties()"
    ],
    "java.text.dateformat.settimezone": [
        "java.text.DateFormat.setTimeZone(java.util.TimeZone)"
    ],
    "java.util.vector.lastelement": [
        "java.util.Vector.lastElement()"
    ],
    "javax.imageio.imageio.getimagereadersbysuffix": [
        "javax.imageio.ImageIO.getImageReadersBySuffix(java.lang.String)"
    ],
    "javax.swing.text.html.htmleditorkit.setautoformsubmission": [
        "javax.swing.text.html.HTMLEditorKit.setAutoFormSubmission(boolean)"
    ],
    "org.omg.portableserver.servantlocatoroperations.postinvoke": [
        "org.omg.PortableServer.ServantLocatorOperations.postinvoke(byte[],org.omg.PortableServer.POA,java.lang.String,java.lang.Object,org.omg.PortableServer.Servant)"
    ],
    "java.awt.geom.affinetransform.settotranslation": [
        "java.awt.geom.AffineTransform.setToTranslation(double,double)"
    ],
    "java.util.abstractmap.hashcode": [
        "java.util.AbstractMap.hashCode()"
    ],
    "java.nio.file.files.notexists": [
        "java.nio.file.Files.notExists(java.nio.file.Path,java.nio.file.LinkOption...)",
        "java.nio.file.Files.notExists(java.nio.file.Path,java.nio.file.LinkOption)"
    ],
    "java.util.concurrent.locks.abstractqueuedlongsynchronizer.setstate": [
        "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.setState(long)"
    ],
    "javax.accessibility.accessibleeditabletext.settextcontents": [
        "javax.accessibility.AccessibleEditableText.setTextContents(java.lang.String)"
    ],
    "javax.naming.ldap.sortresponsecontrol.getresultcode": [
        "javax.naming.ldap.SortResponseControl.getResultCode()"
    ],
    "java.awt.font.linebreakmeasurer.setposition": [
        "java.awt.font.LineBreakMeasurer.setPosition(int)"
    ],
    "java.io.fileinputstream.getchannel": [
        "java.io.FileInputStream.getChannel()"
    ],
    "javax.swing.actionmap.setparent": [
        "javax.swing.ActionMap.setParent(javax.swing.ActionMap)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintlistborder": [
        "javax.swing.plaf.synth.SynthPainter.paintListBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.io.datainput.skipbytes": [
        "java.io.DataInput.skipBytes(int)"
    ],
    "javax.management.relation.roleunresolved.clone": [
        "javax.management.relation.RoleUnresolved.clone()"
    ],
    "javax.accessibility.accessiblecomponent.setenabled": [
        "javax.accessibility.AccessibleComponent.setEnabled(boolean)"
    ],
    "java.awt.graphics2d.setrenderinghints": [
        "java.awt.Graphics2D.setRenderingHints(,?>)"
    ],
    "java.util.resourcebundle.getobject": [
        "java.util.ResourceBundle.getObject(java.lang.String)"
    ],
    "javax.lang.model.element.annotationvalue.tostring": [
        "javax.lang.model.element.AnnotationValue.toString()"
    ],
    "java.beans.eventsetdescriptor.getlistenertype": [
        "java.beans.EventSetDescriptor.getListenerType()"
    ],
    "javax.swing.table.defaulttablecolumnmodel.movecolumn": [
        "javax.swing.table.DefaultTableColumnModel.moveColumn(int,int)"
    ],
    "java.util.stream.stream.builder.accept": [
        "java.util.stream.Stream.Builder.accept(T)",
        "java.util.stream.Stream.Builder.accept(java.util.stream.Stream.Builder)"
    ],
    "java.util.regex.matcher.start": [
        "java.util.regex.Matcher.start(java.lang.String)",
        "java.util.regex.Matcher.start()",
        "java.util.regex.Matcher.start(int)"
    ],
    "javax.swing.text.defaultformatter.getnavigationfilter": [
        "javax.swing.text.DefaultFormatter.getNavigationFilter()"
    ],
    "javax.accessibility.accessiblecomponent.getfontmetrics": [
        "javax.accessibility.AccessibleComponent.getFontMetrics(java.awt.Font)"
    ],
    "java.lang.math.cosh": [
        "java.lang.Math.cosh(double)"
    ],
    "java.lang.management.runtimemxbean.isbootclasspathsupported": [
        "java.lang.management.RuntimeMXBean.isBootClassPathSupported()"
    ],
    "javax.xml.ws.endpoint.setendpointcontext": [
        "javax.xml.ws.Endpoint.setEndpointContext(javax.xml.ws.EndpointContext)"
    ],
    "java.time.localdatetime.minushours": [
        "java.time.LocalDateTime.minusHours(long)"
    ],
    "javax.imageio.imagewriter.reset": [
        "javax.imageio.ImageWriter.reset()"
    ],
    "java.text.breakiterator.next": [
        "java.text.BreakIterator.next()",
        "java.text.BreakIterator.next(int)"
    ],
    "javax.xml.soap.soapfactory.createname": [
        "javax.xml.soap.SOAPFactory.createName(java.lang.String)",
        "javax.xml.soap.SOAPFactory.createName(java.lang.String,java.lang.String,java.lang.String)"
    ],
    "javax.swing.plaf.synth.region.tostring": [
        "javax.swing.plaf.synth.Region.toString()"
    ],
    "java.rmi.activation.activatable.getid": [
        "java.rmi.activation.Activatable.getID()"
    ],
    "javax.swing.text.abstractwriter.writelineseparator": [
        "javax.swing.text.AbstractWriter.writeLineSeparator()"
    ],
    "java.awt.component.removehierarchylistener": [
        "java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"
    ],
    "java.util.concurrent.atomic.atomicintegerfieldupdater.getandset": [
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndSet(T,int)",
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndSet(java.util.concurrent.atomic.AtomicIntegerFieldUpdater,int)"
    ],
    "javax.swing.text.html.parser.dtd.getelement": [
        "javax.swing.text.html.parser.DTD.getElement(java.lang.String)",
        "javax.swing.text.html.parser.DTD.getElement(int)"
    ],
    "java.util.concurrent.linkedtransferqueue.drainto": [
        "java.util.concurrent.LinkedTransferQueue.drainTo(java.util.Collection<? super E>,int)",
        "java.util.concurrent.LinkedTransferQueue.drainTo(java.util.Collection<? super E>)"
    ],
    "java.time.localtime.atdate": [
        "java.time.LocalTime.atDate(java.time.LocalDate)"
    ],
    "java.security.accesscontrolcontext.equals": [
        "java.security.AccessControlContext.equals(java.lang.Object)"
    ],
    "java.util.jar.jarentry.getcertificates": [
        "java.util.jar.JarEntry.getCertificates()"
    ],
    "java.time.chrono.chronozoneddatetime.from": [
        "java.time.chrono.ChronoZonedDateTime.from(java.time.temporal.TemporalAccessor)"
    ],
    "java.awt.font.numericshaper.range.values": [
        "java.awt.font.NumericShaper.Range.values()"
    ],
    "javax.swing.jsplitpane.getminimumdividerlocation": [
        "javax.swing.JSplitPane.getMinimumDividerLocation()"
    ],
    "javax.xml.bind.datatypeconverter.printboolean": [
        "javax.xml.bind.DatatypeConverter.printBoolean(boolean)"
    ],
    "javax.xml.soap.soapfault.getfaultstringlocale": [
        "javax.xml.soap.SOAPFault.getFaultStringLocale()"
    ],
    "java.lang.character.compare": [
        "java.lang.Character.compare(char,char)"
    ],
    "java.io.filepermission.implies": [
        "java.io.FilePermission.implies(java.security.Permission)"
    ],
    "java.util.stream.stream.nonematch": [
        "java.util.stream.Stream.noneMatch(java.util.function.Predicate<? super T>)",
        "java.util.stream.Stream.noneMatch(java.util.function.Predicate<? super java.util.stream.Stream>)"
    ],
    "java.util.linkedlist.polllast": [
        "java.util.LinkedList.pollLast()"
    ],
    "java.time.year.adjustinto": [
        "java.time.Year.adjustInto(java.time.temporal.Temporal)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintarrowbuttonforeground": [
        "javax.swing.plaf.synth.SynthPainter.paintArrowButtonForeground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)"
    ],
    "javax.swing.jtable.sorterchanged": [
        "javax.swing.JTable.sorterChanged(javax.swing.event.RowSorterEvent)"
    ],
    "javax.swing.uimanager.getlookandfeeldefaults": [
        "javax.swing.UIManager.getLookAndFeelDefaults()"
    ],
    "java.awt.image.renderable.parameterblock.getintparameter": [
        "java.awt.image.renderable.ParameterBlock.getIntParameter(int)"
    ],
    "javax.swing.jtable.setcolumnmodel": [
        "javax.swing.JTable.setColumnModel(javax.swing.table.TableColumnModel)"
    ],
    "javax.swing.plaf.metal.metalcomboboxui.paintcurrentvaluebackground": [
        "javax.swing.plaf.metal.MetalComboBoxUI.paintCurrentValueBackground(java.awt.Graphics,java.awt.Rectangle,boolean)"
    ],
    "java.awt.alphacomposite.getinstance": [
        "java.awt.AlphaComposite.getInstance(int,float)",
        "java.awt.AlphaComposite.getInstance(int)"
    ],
    "javax.script.scriptenginefactory.getextensions": [
        "javax.script.ScriptEngineFactory.getExtensions()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintseparatorbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintSeparatorBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",
        "javax.swing.plaf.synth.SynthPainter.paintSeparatorBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.plaf.componentui.uninstallui": [
        "javax.swing.plaf.ComponentUI.uninstallUI(javax.swing.JComponent)"
    ],
    "javax.swing.action.isenabled": [
        "javax.swing.Action.isEnabled()"
    ],
    "java.awt.color.colorspace.getminvalue": [
        "java.awt.color.ColorSpace.getMinValue(int)"
    ],
    "java.awt.jobattributes.getfrompage": [
        "java.awt.JobAttributes.getFromPage()"
    ],
    "javax.print.attribute.standard.jobmessagefromoperator.equals": [
        "javax.print.attribute.standard.JobMessageFromOperator.equals(java.lang.Object)"
    ],
    "java.lang.ref.reference.enqueue": [
        "java.lang.ref.Reference.enqueue()"
    ],
    "java.awt.image.colormodel.getnumcomponents": [
        "java.awt.image.ColorModel.getNumComponents()"
    ],
    "javax.swing.text.stylecontext.reclaim": [
        "javax.swing.text.StyleContext.reclaim(javax.swing.text.AttributeSet)"
    ],
    "javax.swing.jlayer.setlayereventmask": [
        "javax.swing.JLayer.setLayerEventMask(long)"
    ],
    "java.security.cert.x509certselector.getprivatekeyvalid": [
        "java.security.cert.X509CertSelector.getPrivateKeyValid()"
    ],
    "java.nio.channels.asynchronoussocketchannel.getlocaladdress": [
        "java.nio.channels.AsynchronousSocketChannel.getLocalAddress()"
    ],
    "javax.swing.jinternalframe.getlayeredpane": [
        "javax.swing.JInternalFrame.getLayeredPane()"
    ],
    "org.omg.dynamicany._dynarraystub.insert_any": [
        "org.omg.DynamicAny._DynArrayStub.insert_any(org.omg.CORBA.Any)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.setcurrenttheme": [
        "javax.swing.plaf.metal.MetalLookAndFeel.setCurrentTheme(javax.swing.plaf.metal.MetalTheme)"
    ],
    "java.awt.dnd.dragsourceevent.gety": [
        "java.awt.dnd.DragSourceEvent.getY()"
    ],
    "javax.swing.plaf.basic.basictabbedpaneui.installcomponents": [
        "javax.swing.plaf.basic.BasicTabbedPaneUI.installComponents()"
    ],
    "java.time.chrono.minguodate.with": [
        "java.time.chrono.MinguoDate.with(java.time.temporal.TemporalAdjuster)"
    ],
    "javax.swing.text.abstractdocument.readlock": [
        "javax.swing.text.AbstractDocument.readLock()"
    ],
    "java.lang.system.getproperties": [
        "java.lang.System.getProperties()"
    ],
    "java.awt.graphics.fill3drect": [
        "java.awt.Graphics.fill3DRect(int,int,int,int,boolean)"
    ],
    "javax.swing.jtextfield.getcolumns": [
        "javax.swing.JTextField.getColumns()"
    ],
    "java.awt.geom.ellipse2d.getpathiterator": [
        "java.awt.geom.Ellipse2D.getPathIterator(java.awt.geom.AffineTransform)"
    ],
    "javax.swing.sizerequirements.getalignedsizerequirements": [
        "javax.swing.SizeRequirements.getAlignedSizeRequirements(javax.swing.SizeRequirements[])"
    ],
    "javax.swing.plaf.multi.multicomboboxui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiComboBoxUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "javax.xml.parsers.saxparser.isvalidating": [
        "javax.xml.parsers.SAXParser.isValidating()"
    ],
    "javax.swing.plaf.layerui.processfocusevent": [
        "javax.swing.plaf.LayerUI.processFocusEvent(java.awt.event.FocusEvent,javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)"
    ],
    "javax.sql.rowset.cachedrowset.setsyncprovider": [
        "javax.sql.rowset.CachedRowSet.setSyncProvider(java.lang.String)"
    ],
    "java.security.cert.x509certselector.getkeyusage": [
        "java.security.cert.X509CertSelector.getKeyUsage()"
    ],
    "javax.script.invocable.invokefunction": [
        "javax.script.Invocable.invokeFunction(java.lang.String,java.lang.Object...)"
    ],
    "java.security.acl.aclentry.getprincipal": [
        "java.security.acl.AclEntry.getPrincipal()"
    ],
    "java.lang.thread.setcontextclassloader": [
        "java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)"
    ],
    "java.util.spliterator.ofint.foreachremaining": [
        "java.util.Spliterator.OfInt.forEachRemaining(java.util.function.Consumer<? super java.lang.Integer>)"
    ],
    "java.awt.print.paper.setimageablearea": [
        "java.awt.print.Paper.setImageableArea(double,double,double,double)"
    ],
    "java.security.privilegedactionexception.getexception": [
        "java.security.PrivilegedActionException.getException()"
    ],
    "javax.swing.tree.defaulttreecellrenderer.setclosedicon": [
        "javax.swing.tree.DefaultTreeCellRenderer.setClosedIcon(javax.swing.Icon)"
    ],
    "java.math.bigdecimal.setscale": [
        "java.math.BigDecimal.setScale(int)",
        "java.math.BigDecimal.setScale(int,java.math.RoundingMode)",
        "java.math.BigDecimal.setScale(int,int)"
    ],
    "java.io.randomaccessfile.writebyte": [
        "java.io.RandomAccessFile.writeByte(int)"
    ],
    "javax.swing.plaf.synth.synthstyle.getpainter": [
        "javax.swing.plaf.synth.SynthStyle.getPainter(javax.swing.plaf.synth.SynthContext)"
    ],
    "javax.print.attribute.standard.jobstatereason.getcategory": [
        "javax.print.attribute.standard.JobStateReason.getCategory()"
    ],
    "java.util.jar.attributes.hashcode": [
        "java.util.jar.Attributes.hashCode()"
    ],
    "java.awt.layoutmanager2.invalidatelayout": [
        "java.awt.LayoutManager2.invalidateLayout(java.awt.Container)"
    ],
    "java.nio.file.files.newoutputstream": [
        "java.nio.file.Files.newOutputStream(java.nio.file.Path,java.nio.file.OpenOption)",
        "java.nio.file.Files.newOutputStream(java.nio.file.Path,java.nio.file.OpenOption...)"
    ],
    "javax.swing.text.paragraphview.nexttabstop": [
        "javax.swing.text.ParagraphView.nextTabStop(float,int)"
    ],
    "javax.swing.jcombobox.setlightweightpopupenabled": [
        "javax.swing.JComboBox.setLightWeightPopupEnabled(boolean)"
    ],
    "java.awt.image.multipixelpackedsamplemodel.createcompatiblesamplemodel": [
        "java.awt.image.MultiPixelPackedSampleModel.createCompatibleSampleModel(int,int)"
    ],
    "java.time.chrono.chronozoneddatetime.getzone": [
        "java.time.chrono.ChronoZonedDateTime.getZone()"
    ],
    "javax.xml.parsers.saxparser.getparser": [
        "javax.xml.parsers.SAXParser.getParser()"
    ],
    "java.util.prefs.preferences.remove": [
        "java.util.prefs.Preferences.remove(java.lang.String)"
    ],
    "javax.swing.jlayeredpane.getlayeredpaneabove": [
        "javax.swing.JLayeredPane.getLayeredPaneAbove(java.awt.Component)"
    ],
    "java.awt.image.renderable.parameterblock.getsource": [
        "java.awt.image.renderable.ParameterBlock.getSource(int)"
    ],
    "java.time.zoneddatetime.plusyears": [
        "java.time.ZonedDateTime.plusYears(long)"
    ],
    "javax.management.timer.timer.preregister": [
        "javax.management.timer.Timer.preRegister(javax.management.MBeanServer,javax.management.ObjectName)"
    ],
    "org.omg.corba.datainputstream.read_wchar": [
        "org.omg.CORBA.DataInputStream.read_wchar()"
    ],
    "java.awt.frame.getmaximizedbounds": [
        "java.awt.Frame.getMaximizedBounds()"
    ],
    "org.omg.portableinterceptor.requestinfooperations.get_request_service_context": [
        "org.omg.PortableInterceptor.RequestInfoOperations.get_request_service_context(int)"
    ],
    "java.nio.floatbuffer.hashcode": [
        "java.nio.FloatBuffer.hashCode()"
    ],
    "java.lang.management.managementfactory.getruntimemxbean": [
        "java.lang.management.ManagementFactory.getRuntimeMXBean()"
    ],
    "java.awt.image.raster.getnumdataelements": [
        "java.awt.image.Raster.getNumDataElements()"
    ],
    "javax.management.attribute.hashcode": [
        "javax.management.Attribute.hashCode()"
    ],
    "javax.xml.bind.datatypeconverterinterface.printfloat": [
        "javax.xml.bind.DatatypeConverterInterface.printFloat(float)"
    ],
    "java.sql.preparedstatement.seturl": [
        "java.sql.PreparedStatement.setURL(int,java.net.URL)"
    ],
    "javax.swing.text.asyncboxview.setbottominset": [
        "javax.swing.text.AsyncBoxView.setBottomInset(float)"
    ],
    "org.omg.dynamicany._dynenumstub.get_typecode": [
        "org.omg.DynamicAny._DynEnumStub.get_typecode()"
    ],
    "java.net.jarurlconnection.getattributes": [
        "java.net.JarURLConnection.getAttributes()"
    ],
    "java.nio.file.files.newdirectorystream": [
        "java.nio.file.Files.newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream.Filter<? super java.nio.file.Path>)",
        "java.nio.file.Files.newDirectoryStream(java.nio.file.Path)",
        "java.nio.file.Files.newDirectoryStream(java.nio.file.Path,java.lang.String)"
    ],
    "java.io.objectoutputstream.putfield.put": [
        "java.io.ObjectOutputStream.PutField.put(java.lang.String,byte)",
        "java.io.ObjectOutputStream.PutField.put(java.lang.String,long)",
        "java.io.ObjectOutputStream.PutField.put(java.lang.String,java.lang.Object)",
        "java.io.ObjectOutputStream.PutField.put(java.lang.String,int)",
        "java.io.ObjectOutputStream.PutField.put(java.lang.String,short)",
        "java.io.ObjectOutputStream.PutField.put(java.lang.String,double)",
        "java.io.ObjectOutputStream.PutField.put(java.lang.String,char)",
        "java.io.ObjectOutputStream.PutField.put(java.lang.String,boolean)",
        "java.io.ObjectOutputStream.PutField.put(java.lang.String,float)"
    ],
    "java.util.concurrent.forkjoinpool.managedblock": [
        "java.util.concurrent.ForkJoinPool.managedBlock(java.util.concurrent.ForkJoinPool.ManagedBlocker)"
    ],
    "javax.net.ssl.sslcontextspi.enginegetsupportedsslparameters": [
        "javax.net.ssl.SSLContextSpi.engineGetSupportedSSLParameters()"
    ],
    "javax.sound.sampled.clip.open": [
        "javax.sound.sampled.Clip.open(javax.sound.sampled.AudioInputStream)",
        "javax.sound.sampled.Clip.open(javax.sound.sampled.AudioFormat,byte[],int,int)"
    ],
    "javax.sound.midi.synthesizer.getmaxpolyphony": [
        "javax.sound.midi.Synthesizer.getMaxPolyphony()"
    ],
    "javax.swing.jtextfield.setaction": [
        "javax.swing.JTextField.setAction(javax.swing.Action)"
    ],
    "javax.swing.text.html.parser.element.getattributebyvalue": [
        "javax.swing.text.html.parser.Element.getAttributeByValue(java.lang.String)"
    ],
    "java.nio.channels.interruptiblechannel.close": [
        "java.nio.channels.InterruptibleChannel.close()"
    ],
    "javax.swing.rowfilter.entry.getstringvalue": [
        "javax.swing.RowFilter.Entry.getStringValue(int)"
    ],
    "java.lang.strictmath.multiplyexact": [
        "java.lang.StrictMath.multiplyExact(long,long)",
        "java.lang.StrictMath.multiplyExact(int,int)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintfilechooserborder": [
        "javax.swing.plaf.synth.SynthPainter.paintFileChooserBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.time.zoneddatetime.withhour": [
        "java.time.ZonedDateTime.withHour(int)"
    ],
    "java.awt.image.affinetransformop.getinterpolationtype": [
        "java.awt.image.AffineTransformOp.getInterpolationType()"
    ],
    "javax.xml.soap.soapenvelope.getbody": [
        "javax.xml.soap.SOAPEnvelope.getBody()"
    ],
    "java.net.socketpermission.implies": [
        "java.net.SocketPermission.implies(java.security.Permission)"
    ],
    "java.awt.awteventmulticaster.adjustmentvaluechanged": [
        "java.awt.AWTEventMulticaster.adjustmentValueChanged(java.awt.event.AdjustmentEvent)"
    ],
    "java.lang.runtime.removeshutdownhook": [
        "java.lang.Runtime.removeShutdownHook(java.lang.Thread)"
    ],
    "java.awt.print.pageformat.getpaper": [
        "java.awt.print.PageFormat.getPaper()"
    ],
    "java.io.stringreader.marksupported": [
        "java.io.StringReader.markSupported()"
    ],
    "javax.imageio.spi.imageinputstreamspi.getinputclass": [
        "javax.imageio.spi.ImageInputStreamSpi.getInputClass()"
    ],
    "java.lang.reflect.modifier.interfacemodifiers": [
        "java.lang.reflect.Modifier.interfaceModifiers()"
    ],
    "javax.swing.jtable.removeeditor": [
        "javax.swing.JTable.removeEditor()"
    ],
    "javax.swing.tree.defaultmutabletreenode.getnextleaf": [
        "javax.swing.tree.DefaultMutableTreeNode.getNextLeaf()"
    ],
    "javax.xml.ws.soap.soapbinding.getroles": [
        "javax.xml.ws.soap.SOAPBinding.getRoles()"
    ],
    "javax.swing.plaf.multi.multiscrollbarui.paint": [
        "javax.swing.plaf.multi.MultiScrollBarUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.time.localdatetime.withdayofmonth": [
        "java.time.LocalDateTime.withDayOfMonth(int)"
    ],
    "javax.swing.text.asyncboxview.getlayoutqueue": [
        "javax.swing.text.AsyncBoxView.getLayoutQueue()"
    ],
    "java.nio.file.path.torealpath": [
        "java.nio.file.Path.toRealPath(java.nio.file.LinkOption...)",
        "java.nio.file.Path.toRealPath(java.nio.file.LinkOption)"
    ],
    "javax.swing.event.documentevent.getdocument": [
        "javax.swing.event.DocumentEvent.getDocument()"
    ],
    "java.time.chrono.japaneseera.valueof": [
        "java.time.chrono.JapaneseEra.valueOf(java.lang.String)"
    ],
    "javax.swing.tree.abstractlayoutcache.setexpandedstate": [
        "javax.swing.tree.AbstractLayoutCache.setExpandedState(javax.swing.tree.TreePath,boolean)"
    ],
    "javax.swing.jeditorpane.replaceselection": [
        "javax.swing.JEditorPane.replaceSelection(java.lang.String)"
    ],
    "javax.net.ssl.sslsession.getlocalprincipal": [
        "javax.net.ssl.SSLSession.getLocalPrincipal()"
    ],
    "java.util.locale.builder.clearextensions": [
        "java.util.Locale.Builder.clearExtensions()"
    ],
    "java.util.logging.logmanager.addlogger": [
        "java.util.logging.LogManager.addLogger(java.util.logging.Logger)"
    ],
    "javax.swing.plaf.multi.multimenubarui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiMenuBarUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "javax.management.stringvalueexp.getvalue": [
        "javax.management.StringValueExp.getValue()"
    ],
    "java.lang.stringbuffer.charat": [
        "java.lang.StringBuffer.charAt(int)"
    ],
    "javax.swing.jinternalframe.reshape": [
        "javax.swing.JInternalFrame.reshape(int,int,int,int)"
    ],
    "javax.management.openmbean.openmbeaninfosupport.tostring": [
        "javax.management.openmbean.OpenMBeanInfoSupport.toString()"
    ],
    "java.awt.cardlayout.gethgap": [
        "java.awt.CardLayout.getHgap()"
    ],
    "org.omg.corba.floatholder._read": [
        "org.omg.CORBA.FloatHolder._read(org.omg.CORBA.portable.InputStream)"
    ],
    "javax.lang.model.element.element.getannotationmirrors": [
        "javax.lang.model.element.Element.getAnnotationMirrors()"
    ],
    "java.awt.im.spi.inputmethod.dispatchevent": [
        "java.awt.im.spi.InputMethod.dispatchEvent(java.awt.AWTEvent)"
    ],
    "java.time.offsettime.with": [
        "java.time.OffsetTime.with(java.time.temporal.TemporalField,long)",
        "java.time.OffsetTime.with(java.time.temporal.TemporalAdjuster)"
    ],
    "javax.rmi.corba.utildelegate.gettie": [
        "javax.rmi.CORBA.UtilDelegate.getTie(java.rmi.Remote)"
    ],
    "javax.swing.jtoolbar.addseparator": [
        "javax.swing.JToolBar.addSeparator()",
        "javax.swing.JToolBar.addSeparator(java.awt.Dimension)"
    ],
    "javax.accessibility.accessiblebundle.tostring": [
        "javax.accessibility.AccessibleBundle.toString()"
    ],
    "java.time.period.plusdays": [
        "java.time.Period.plusDays(long)"
    ],
    "javax.activation.mimetype.setsubtype": [
        "javax.activation.MimeType.setSubType(java.lang.String)"
    ],
    "javax.swing.undo.undoableedit.undo": [
        "javax.swing.undo.UndoableEdit.undo()"
    ],
    "javax.sound.sampled.audiosystem.getsourcelineinfo": [
        "javax.sound.sampled.AudioSystem.getSourceLineInfo(javax.sound.sampled.Line.Info)"
    ],
    "java.io.file.renameto": [
        "java.io.File.renameTo(java.io.File)"
    ],
    "java.security.cert.x509crlselector.setcertificatechecking": [
        "java.security.cert.X509CRLSelector.setCertificateChecking(java.security.cert.X509Certificate)"
    ],
    "java.time.format.datetimeformatter.withchronology": [
        "java.time.format.DateTimeFormatter.withChronology(java.time.chrono.Chronology)"
    ],
    "javax.xml.soap.soapfault.getfaultreasonlocales": [
        "javax.xml.soap.SOAPFault.getFaultReasonLocales()"
    ],
    "javax.naming.compositename.getall": [
        "javax.naming.CompositeName.getAll()"
    ],
    "javax.swing.text.html.imageview.modeltoview": [
        "javax.swing.text.html.ImageView.modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)"
    ],
    "javax.sound.sampled.mixer.synchronize": [
        "javax.sound.sampled.Mixer.synchronize(javax.sound.sampled.Line[],boolean)"
    ],
    "java.sql.resultset.getrow": [
        "java.sql.ResultSet.getRow()"
    ],
    "javax.swing.plaf.multi.multispinnerui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiSpinnerUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "java.security.cert.pkixcertpathvalidatorresult.clone": [
        "java.security.cert.PKIXCertPathValidatorResult.clone()"
    ],
    "javax.swing.text.defaultcaret.setblinkrate": [
        "javax.swing.text.DefaultCaret.setBlinkRate(int)"
    ],
    "javax.swing.icon.geticonheight": [
        "javax.swing.Icon.getIconHeight()"
    ],
    "java.math.biginteger.min": [
        "java.math.BigInteger.min(java.math.BigInteger)"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.getpreferredsize": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "javax.sql.rowset.predicate.evaluate": [
        "javax.sql.rowset.Predicate.evaluate(java.lang.Object,java.lang.String)"
    ],
    "javax.swing.abstractbutton.createactionpropertychangelistener": [
        "javax.swing.AbstractButton.createActionPropertyChangeListener(javax.swing.Action)"
    ],
    "java.lang.thread.setpriority": [
        "java.lang.Thread.setPriority(int)"
    ],
    "javax.naming.spi.dirstatefactory.result.getobject": [
        "javax.naming.spi.DirStateFactory.Result.getObject()"
    ],
    "javax.swing.plaf.multi.multioptionpaneui.contains": [
        "javax.swing.plaf.multi.MultiOptionPaneUI.contains(javax.swing.JComponent,int,int)"
    ],
    "java.util.concurrent.linkedtransferqueue.spliterator": [
        "java.util.concurrent.LinkedTransferQueue.spliterator()"
    ],
    "java.security.pkcs12attribute.tostring": [
        "java.security.PKCS12Attribute.toString()"
    ],
    "java.security.keystore.privatekeyentry.getprivatekey": [
        "java.security.KeyStore.PrivateKeyEntry.getPrivateKey()"
    ],
    "java.sql.resultset.updateref": [
        "java.sql.ResultSet.updateRef(java.lang.String,java.sql.Ref)",
        "java.sql.ResultSet.updateRef(int,java.sql.Ref)"
    ],
    "java.awt.event.mousewheelevent.getwheelrotation": [
        "java.awt.event.MouseWheelEvent.getWheelRotation()"
    ],
    "java.awt.cursor.getname": [
        "java.awt.Cursor.getName()"
    ],
    "javax.swing.jinternalframe.getwarningstring": [
        "javax.swing.JInternalFrame.getWarningString()"
    ],
    "javax.management.loading.mlet.preregister": [
        "javax.management.loading.MLet.preRegister(javax.management.MBeanServer,javax.management.ObjectName)"
    ],
    "javax.swing.scrollpanelayout.getviewport": [
        "javax.swing.ScrollPaneLayout.getViewport()"
    ],
    "org.omg.corba.portable.objectimpl._hash": [
        "org.omg.CORBA.portable.ObjectImpl._hash(int)"
    ],
    "java.util.treemap.submap": [
        "java.util.TreeMap.subMap(K,K)",
        "java.util.TreeMap.subMap(K,boolean,K,boolean)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintsliderthumbborder": [
        "javax.swing.plaf.synth.SynthPainter.paintSliderThumbBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)"
    ],
    "javax.lang.model.element.unknownelementexception.getargument": [
        "javax.lang.model.element.UnknownElementException.getArgument()"
    ],
    "java.time.zoneddatetime.plusseconds": [
        "java.time.ZonedDateTime.plusSeconds(long)"
    ],
    "java.util.treemap.entryset": [
        "java.util.TreeMap.entrySet()"
    ],
    "javax.management.remote.rmi.rmiconnection.setattributes": [
        "javax.management.remote.rmi.RMIConnection.setAttributes(javax.management.ObjectName,java.rmi.MarshalledObject,javax.security.auth.Subject)"
    ],
    "java.security.cert.certpathvalidatorexception.basicreason.valueof": [
        "java.security.cert.CertPathValidatorException.BasicReason.valueOf(java.lang.String)"
    ],
    "java.lang.object.getclass": [
        "java.lang.Object.getClass()"
    ],
    "java.util.concurrent.copyonwritearraylist.sublist": [
        "java.util.concurrent.CopyOnWriteArrayList.subList(int,int)"
    ],
    "java.util.hashtable.values": [
        "java.util.Hashtable.values()"
    ],
    "javax.xml.validation.validator.seterrorhandler": [
        "javax.xml.validation.Validator.setErrorHandler(org.xml.sax.ErrorHandler)"
    ],
    "javax.swing.plaf.multi.multipopupmenuui.getuis": [
        "javax.swing.plaf.multi.MultiPopupMenuUI.getUIs()"
    ],
    "java.time.temporal.temporaladjusters.firstdayofnextmonth": [
        "java.time.temporal.TemporalAdjusters.firstDayOfNextMonth()"
    ],
    "javax.swing.text.html.stylesheet.addattributes": [
        "javax.swing.text.html.StyleSheet.addAttributes(javax.swing.text.AttributeSet,javax.swing.text.AttributeSet)"
    ],
    "javax.swing.text.glyphview.getendoffset": [
        "javax.swing.text.GlyphView.getEndOffset()"
    ],
    "java.awt.component.setminimumsize": [
        "java.awt.Component.setMinimumSize(java.awt.Dimension)"
    ],
    "javax.naming.compositename.get": [
        "javax.naming.CompositeName.get(int)"
    ],
    "javax.swing.table.defaulttablemodel.setrowcount": [
        "javax.swing.table.DefaultTableModel.setRowCount(int)"
    ],
    "javax.xml.bind.jaxbelement.getscope": [
        "javax.xml.bind.JAXBElement.getScope()"
    ],
    "javax.swing.jlist.getvalueisadjusting": [
        "javax.swing.JList.getValueIsAdjusting()"
    ],
    "java.lang.system.getenv": [
        "java.lang.System.getenv()",
        "java.lang.System.getenv(java.lang.String)"
    ],
    "org.xml.sax.inputsource.getcharacterstream": [
        "org.xml.sax.InputSource.getCharacterStream()"
    ],
    "javax.swing.plaf.multi.multitextui.getrootview": [
        "javax.swing.plaf.multi.MultiTextUI.getRootView(javax.swing.text.JTextComponent)"
    ],
    "javax.swing.text.navigationfilter.filterbypass.movedot": [
        "javax.swing.text.NavigationFilter.FilterBypass.moveDot(int,javax.swing.text.Position.Bias)"
    ],
    "org.omg.dynamicany._dynfixedstub.insert_ushort": [
        "org.omg.DynamicAny._DynFixedStub.insert_ushort(short)"
    ],
    "java.net.uri.normalize": [
        "java.net.URI.normalize()"
    ],
    "javax.swing.jtable.setautocreatecolumnsfrommodel": [
        "javax.swing.JTable.setAutoCreateColumnsFromModel(boolean)"
    ],
    "javax.swing.text.glyphview.getminimumspan": [
        "javax.swing.text.GlyphView.getMinimumSpan(int)"
    ],
    "javax.tools.diagnostic.getposition": [
        "javax.tools.Diagnostic.getPosition()"
    ],
    "javax.xml.parsers.documentbuilderfactory.setxincludeaware": [
        "javax.xml.parsers.DocumentBuilderFactory.setXIncludeAware(boolean)"
    ],
    "org.omg.dynamicany._dynvaluestub.set_to_value": [
        "org.omg.DynamicAny._DynValueStub.set_to_value()"
    ],
    "java.lang.invoke.methodhandleinfo.getname": [
        "java.lang.invoke.MethodHandleInfo.getName()"
    ],
    "java.nio.file.files.probecontenttype": [
        "java.nio.file.Files.probeContentType(java.nio.file.Path)"
    ],
    "javax.swing.event.documentevent.elementchange.getchildrenadded": [
        "javax.swing.event.DocumentEvent.ElementChange.getChildrenAdded()"
    ],
    "java.awt.eventqueue.push": [
        "java.awt.EventQueue.push(java.awt.EventQueue)"
    ],
    "org.omg.dynamicany._dynsequencestub.to_any": [
        "org.omg.DynamicAny._DynSequenceStub.to_any()"
    ],
    "java.awt.event.containerevent.getchild": [
        "java.awt.event.ContainerEvent.getChild()"
    ],
    "java.sql.callablestatement.setlong": [
        "java.sql.CallableStatement.setLong(java.lang.String,long)"
    ],
    "java.util.comparator.naturalorder": [
        "java.util.Comparator.naturalOrder()"
    ],
    "javax.swing.tree.defaulttreecellrenderer.getclosedicon": [
        "javax.swing.tree.DefaultTreeCellRenderer.getClosedIcon()"
    ],
    "java.awt.rectangle.gety": [
        "java.awt.Rectangle.getY()"
    ],
    "javax.naming.context.removefromenvironment": [
        "javax.naming.Context.removeFromEnvironment(java.lang.String)"
    ],
    "javax.xml.crypto.dsig.signedinfo.getreferences": [
        "javax.xml.crypto.dsig.SignedInfo.getReferences()"
    ],
    "org.omg.dynamicany.dynanyoperations.component_count": [
        "org.omg.DynamicAny.DynAnyOperations.component_count()"
    ],
    "javax.swing.springlayout.constraints.setwidth": [
        "javax.swing.SpringLayout.Constraints.setWidth(javax.swing.Spring)"
    ],
    "java.util.resourcebundle.getstring": [
        "java.util.ResourceBundle.getString(java.lang.String)"
    ],
    "java.lang.double.equals": [
        "java.lang.Double.equals(java.lang.Object)"
    ],
    "java.util.concurrent.atomic.longadder.tostring": [
        "java.util.concurrent.atomic.LongAdder.toString()"
    ],
    "java.awt.geom.path2d.double.transform": [
        "java.awt.geom.Path2D.Double.transform(java.awt.geom.AffineTransform)"
    ],
    "java.awt.component.paramstring": [
        "java.awt.Component.paramString()"
    ],
    "javax.naming.context.getnameinnamespace": [
        "javax.naming.Context.getNameInNamespace()"
    ],
    "javax.xml.ws.endpoint.publish": [
        "javax.xml.ws.Endpoint.publish(javax.xml.ws.spi.http.HttpContext)",
        "javax.xml.ws.Endpoint.publish(java.lang.Object)",
        "javax.xml.ws.Endpoint.publish(java.lang.String,java.lang.Object)",
        "javax.xml.ws.Endpoint.publish(java.lang.String)",
        "javax.xml.ws.Endpoint.publish(java.lang.String,java.lang.Object,javax.xml.ws.WebServiceFeature...)"
    ],
    "java.text.numberformat.getcurrency": [
        "java.text.NumberFormat.getCurrency()"
    ],
    "javax.swing.text.paragraphview.calculateminoraxisrequirements": [
        "javax.swing.text.ParagraphView.calculateMinorAxisRequirements(int,javax.swing.SizeRequirements)"
    ],
    "java.util.locale.getextensionkeys": [
        "java.util.Locale.getExtensionKeys()"
    ],
    "java.time.chrono.thaibuddhistchronology.dateepochday": [
        "java.time.chrono.ThaiBuddhistChronology.dateEpochDay(long)"
    ],
    "javax.sound.sampled.port.info.tostring": [
        "javax.sound.sampled.Port.Info.toString()"
    ],
    "java.lang.math.ieeeremainder": [
        "java.lang.Math.IEEEremainder(double,double)"
    ],
    "java.net.serversocket.setsotimeout": [
        "java.net.ServerSocket.setSoTimeout(int)"
    ],
    "javax.management.modelmbean.modelmbeanconstructorinfo.clone": [
        "javax.management.modelmbean.ModelMBeanConstructorInfo.clone()"
    ],
    "javax.sql.rowset.baserowset.setbyte": [
        "javax.sql.rowset.BaseRowSet.setByte(java.lang.String,byte)",
        "javax.sql.rowset.BaseRowSet.setByte(int,byte)"
    ],
    "java.awt.toolkit.createdesktoppeer": [
        "java.awt.Toolkit.createDesktopPeer(java.awt.Desktop)"
    ],
    "javax.management.loading.mletcontent.getcode": [
        "javax.management.loading.MLetContent.getCode()"
    ],
    "javax.swing.text.abstractdocument.getlength": [
        "javax.swing.text.AbstractDocument.getLength()"
    ],
    "java.net.urlstreamhandlerfactory.createurlstreamhandler": [
        "java.net.URLStreamHandlerFactory.createURLStreamHandler(java.lang.String)"
    ],
    "javax.xml.transform.dom.domsource.setnode": [
        "javax.xml.transform.dom.DOMSource.setNode(org.w3c.dom.Node)"
    ],
    "javax.sql.rowset.baserowset.setmaxrows": [
        "javax.sql.rowset.BaseRowSet.setMaxRows(int)"
    ],
    "java.awt.print.paper.getheight": [
        "java.awt.print.Paper.getHeight()"
    ],
    "javax.management.mbeannotificationinfo.equals": [
        "javax.management.MBeanNotificationInfo.equals(java.lang.Object)"
    ],
    "javax.swing.jpanel.paramstring": [
        "javax.swing.JPanel.paramString()"
    ],
    "javax.xml.transform.dom.domlocator.getoriginatingnode": [
        "javax.xml.transform.dom.DOMLocator.getOriginatingNode()"
    ],
    "java.sql.jdbctype.values": [
        "java.sql.JDBCType.values()"
    ],
    "java.nio.charset.charsetdecoder.averagecharsperbyte": [
        "java.nio.charset.CharsetDecoder.averageCharsPerByte()"
    ],
    "java.awt.component.getalignmenty": [
        "java.awt.Component.getAlignmentY()"
    ],
    "org.omg.portableserver.portable.delegate.non_existent": [
        "org.omg.PortableServer.portable.Delegate.non_existent(org.omg.PortableServer.Servant)"
    ],
    "javax.swing.text.view.replace": [
        "javax.swing.text.View.replace(int,int,javax.swing.text.View[])"
    ],
    "java.nio.charbuffer.compareto": [
        "java.nio.CharBuffer.compareTo(java.nio.CharBuffer)"
    ],
    "javax.print.attribute.standard.jobstatereason.getname": [
        "javax.print.attribute.standard.JobStateReason.getName()"
    ],
    "java.awt.defaultkeyboardfocusmanager.discardkeyevents": [
        "java.awt.DefaultKeyboardFocusManager.discardKeyEvents(java.awt.Component)"
    ],
    "java.security.keystorespi.enginesize": [
        "java.security.KeyStoreSpi.engineSize()"
    ],
    "java.sql.databasemetadata.locatorsupdatecopy": [
        "java.sql.DatabaseMetaData.locatorsUpdateCopy()"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getmenudisabledforeground": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getMenuDisabledForeground()"
    ],
    "java.util.concurrent.completionstage.thencombineasync": [
        "java.util.concurrent.CompletionStage.thenCombineAsync(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiFunction<? super,? super,? extends V>,java.util.concurrent.Executor)",
        "java.util.concurrent.CompletionStage.thenCombineAsync(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiFunction<? super,? super,? extends V>)"
    ],
    "java.beans.propertydescriptor.equals": [
        "java.beans.PropertyDescriptor.equals(java.lang.Object)"
    ],
    "javax.swing.plaf.basic.basictreeui.createlayoutcache": [
        "javax.swing.plaf.basic.BasicTreeUI.createLayoutCache()"
    ],
    "org.omg.dynamicany._dynvaluestub.insert_dyn_any": [
        "org.omg.DynamicAny._DynValueStub.insert_dyn_any(org.omg.DynamicAny.DynAny)"
    ],
    "java.nio.file.filesystem.getfilestores": [
        "java.nio.file.FileSystem.getFileStores()"
    ],
    "java.util.concurrent.linkedtransferqueue.trytransfer": [
        "java.util.concurrent.LinkedTransferQueue.tryTransfer(E)",
        "java.util.concurrent.LinkedTransferQueue.tryTransfer(java.util.concurrent.LinkedTransferQueue)"
    ],
    "javax.swing.plaf.basic.basiclookandfeel.getaudioactionmap": [
        "javax.swing.plaf.basic.BasicLookAndFeel.getAudioActionMap()"
    ],
    "javax.swing.text.html.parser.dtd.defcontentmodel": [
        "javax.swing.text.html.parser.DTD.defContentModel(int,java.lang.Object,javax.swing.text.html.parser.ContentModel)"
    ],
    "java.util.vector.trimtosize": [
        "java.util.Vector.trimToSize()"
    ],
    "java.security.key.getformat": [
        "java.security.Key.getFormat()"
    ],
    "javax.xml.transform.transformerexception.printstacktrace": [
        "javax.xml.transform.TransformerException.printStackTrace()",
        "javax.xml.transform.TransformerException.printStackTrace(java.io.PrintWriter)",
        "javax.xml.transform.TransformerException.printStackTrace(java.io.PrintStream)"
    ],
    "javax.swing.jtree.removedescendanttoggledpaths": [
        "javax.swing.JTree.removeDescendantToggledPaths(java.util.Enumeration<javax.swing.tree.TreePath>)"
    ],
    "javax.swing.plaf.basic.basictextui.uninstallui": [
        "javax.swing.plaf.basic.BasicTextUI.uninstallUI(javax.swing.JComponent)"
    ],
    "org.xml.sax.helpers.attributesimpl.removeattribute": [
        "org.xml.sax.helpers.AttributesImpl.removeAttribute(int)"
    ],
    "java.awt.dnd.droptargetdropevent.rejectdrop": [
        "java.awt.dnd.DropTargetDropEvent.rejectDrop()"
    ],
    "javax.xml.bind.datatypeconverter.printlong": [
        "javax.xml.bind.DatatypeConverter.printLong(long)"
    ],
    "javax.naming.directory.searchresult.tostring": [
        "javax.naming.directory.SearchResult.toString()"
    ],
    "java.awt.scrollpaneadjustable.getorientation": [
        "java.awt.ScrollPaneAdjustable.getOrientation()"
    ],
    "javax.swing.boundedrangemodel.setminimum": [
        "javax.swing.BoundedRangeModel.setMinimum(int)"
    ],
    "java.util.abstractmap.simpleentry.tostring": [
        "java.util.AbstractMap.SimpleEntry.toString()"
    ],
    "java.awt.cardlayout.getlayoutalignmenty": [
        "java.awt.CardLayout.getLayoutAlignmentY(java.awt.Container)"
    ],
    "org.xml.sax.xmlreader.setproperty": [
        "org.xml.sax.XMLReader.setProperty(java.lang.String,java.lang.Object)"
    ],
    "javax.swing.jeditorpane.geteditorkitclassnameforcontenttype": [
        "javax.swing.JEditorPane.getEditorKitClassNameForContentType(java.lang.String)"
    ],
    "org.xml.sax.contenthandler.endprefixmapping": [
        "org.xml.sax.ContentHandler.endPrefixMapping(java.lang.String)"
    ],
    "javax.sql.rowset.spi.syncfactory.getsyncfactory": [
        "javax.sql.rowset.spi.SyncFactory.getSyncFactory()"
    ],
    "java.net.url.getport": [
        "java.net.URL.getPort()"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readbytes": [
        "javax.sql.rowset.serial.SQLInputImpl.readBytes()"
    ],
    "java.net.uri.getuserinfo": [
        "java.net.URI.getUserInfo()"
    ],
    "java.util.concurrent.atomic.atomiclong.getandupdate": [
        "java.util.concurrent.atomic.AtomicLong.getAndUpdate(java.util.function.LongUnaryOperator)"
    ],
    "java.awt.event.actionevent.getactioncommand": [
        "java.awt.event.ActionEvent.getActionCommand()"
    ],
    "javax.print.attribute.standard.sides.getcategory": [
        "javax.print.attribute.standard.Sides.getCategory()"
    ],
    "java.math.biginteger.floatvalue": [
        "java.math.BigInteger.floatValue()"
    ],
    "java.beans.propertyeditorsupport.removepropertychangelistener": [
        "java.beans.PropertyEditorSupport.removePropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "javax.xml.ws.endpoint.setexecutor": [
        "javax.xml.ws.Endpoint.setExecutor(java.util.concurrent.Executor)"
    ],
    "javax.swing.jbutton.getaccessiblecontext": [
        "javax.swing.JButton.getAccessibleContext()"
    ],
    "org.omg.dynamicany._dynvaluestub.insert_longlong": [
        "org.omg.DynamicAny._DynValueStub.insert_longlong(long)"
    ],
    "org.omg.cosnaming._namingcontextstub.bind": [
        "org.omg.CosNaming._NamingContextStub.bind(org.omg.CosNaming.NameComponent[],org.omg.CORBA.Object)"
    ],
    "javax.sound.midi.midievent.gettick": [
        "javax.sound.midi.MidiEvent.getTick()"
    ],
    "java.time.year.range": [
        "java.time.Year.range(java.time.temporal.TemporalField)"
    ],
    "javax.sql.rowset.spi.syncprovider.getvendor": [
        "javax.sql.rowset.spi.SyncProvider.getVendor()"
    ],
    "javax.xml.soap.attachmentpart.setcontentlocation": [
        "javax.xml.soap.AttachmentPart.setContentLocation(java.lang.String)"
    ],
    "javax.swing.jtextfield.getcolumnwidth": [
        "javax.swing.JTextField.getColumnWidth()"
    ],
    "javax.lang.model.util.types.aselement": [
        "javax.lang.model.util.Types.asElement(javax.lang.model.type.TypeMirror)"
    ],
    "java.io.fileoutputstream.getchannel": [
        "java.io.FileOutputStream.getChannel()"
    ],
    "java.sql.databasemetadata.getcatalogterm": [
        "java.sql.DatabaseMetaData.getCatalogTerm()"
    ],
    "java.io.objectstreamclass.lookup": [
        "java.io.ObjectStreamClass.lookup(java.lang.Class<?>)"
    ],
    "java.util.abstractlist.hashcode": [
        "java.util.AbstractList.hashCode()"
    ],
    "java.util.zip.inflateroutputstream.finish": [
        "java.util.zip.InflaterOutputStream.finish()"
    ],
    "java.util.spliterators.abstractspliterator.characteristics": [
        "java.util.Spliterators.AbstractSpliterator.characteristics()"
    ],
    "javax.swing.plaf.multi.multitableheaderui.uninstallui": [
        "javax.swing.plaf.multi.MultiTableHeaderUI.uninstallUI(javax.swing.JComponent)"
    ],
    "java.awt.image.raster.getheight": [
        "java.awt.image.Raster.getHeight()"
    ],
    "java.awt.im.inputcontext.setcharactersubsets": [
        "java.awt.im.InputContext.setCharacterSubsets(java.lang.Character.Subset[])"
    ],
    "javax.swing.jcomponent.getvisiblerect": [
        "javax.swing.JComponent.getVisibleRect()"
    ],
    "java.util.concurrent.atomic.atomicreferencefieldupdater.updateandget": [
        "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.updateAndGet(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.function.UnaryOperator<java.util.concurrent.atomic.AtomicReferenceFieldUpdater>)",
        "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.updateAndGet(T,java.util.function.UnaryOperator<V>)"
    ],
    "javax.swing.jscrollbar.fireadjustmentvaluechanged": [
        "javax.swing.JScrollBar.fireAdjustmentValueChanged(int,int,int)"
    ],
    "org.w3c.dom.domimplementationsource.getdomimplementationlist": [
        "org.w3c.dom.DOMImplementationSource.getDOMImplementationList(java.lang.String)"
    ],
    "java.awt.printjob.getgraphics": [
        "java.awt.PrintJob.getGraphics()"
    ],
    "java.awt.image.bandedsamplemodel.createsubsetsamplemodel": [
        "java.awt.image.BandedSampleModel.createSubsetSampleModel(int[])"
    ],
    "javax.management.loading.mlet.addurl": [
        "javax.management.loading.MLet.addURL(java.lang.String)",
        "javax.management.loading.MLet.addURL(java.net.URL)"
    ],
    "java.awt.geom.point2d.double.setlocation": [
        "java.awt.geom.Point2D.Double.setLocation(double,double)"
    ],
    "java.awt.dnd.droptargetdragevent.getcurrentdataflavors": [
        "java.awt.dnd.DropTargetDragEvent.getCurrentDataFlavors()"
    ],
    "javax.swing.jmenu.createactionchangelistener": [
        "javax.swing.JMenu.createActionChangeListener(javax.swing.JMenuItem)"
    ],
    "javax.swing.jtabbedpane.getdisablediconat": [
        "javax.swing.JTabbedPane.getDisabledIconAt(int)"
    ],
    "java.lang.float.floattointbits": [
        "java.lang.Float.floatToIntBits(float)"
    ],
    "javax.swing.event.rowsorterevent.convertpreviousrowindextomodel": [
        "javax.swing.event.RowSorterEvent.convertPreviousRowIndexToModel(int)"
    ],
    "java.net.serversocket.getsotimeout": [
        "java.net.ServerSocket.getSoTimeout()"
    ],
    "java.awt.texturepaint.getanchorrect": [
        "java.awt.TexturePaint.getAnchorRect()"
    ],
    "java.sql.drivermanager.setlogwriter": [
        "java.sql.DriverManager.setLogWriter(java.io.PrintWriter)"
    ],
    "java.util.calendar.equals": [
        "java.util.Calendar.equals(java.lang.Object)"
    ],
    "java.security.cert.pkixparameters.gettargetcertconstraints": [
        "java.security.cert.PKIXParameters.getTargetCertConstraints()"
    ],
    "javax.accessibility.accessibleeditabletext.delete": [
        "javax.accessibility.AccessibleEditableText.delete(int,int)"
    ],
    "java.net.standardprotocolfamily.values": [
        "java.net.StandardProtocolFamily.values()"
    ],
    "org.omg.dynamicany._dynvaluestub.to_any": [
        "org.omg.DynamicAny._DynValueStub.to_any()"
    ],
    "javax.swing.text.html.htmleditorkit.parsercallback.handleendoflinestring": [
        "javax.swing.text.html.HTMLEditorKit.ParserCallback.handleEndOfLineString(java.lang.String)"
    ],
    "java.security.acl.acl.removeentry": [
        "java.security.acl.Acl.removeEntry(java.security.Principal,java.security.acl.AclEntry)"
    ],
    "java.util.priorityqueue.remove": [
        "java.util.PriorityQueue.remove(java.lang.Object)"
    ],
    "java.lang.math.expm1": [
        "java.lang.Math.expm1(double)"
    ],
    "javax.swing.jsplitpane.updateui": [
        "javax.swing.JSplitPane.updateUI()"
    ],
    "javax.swing.text.plainview.drawline": [
        "javax.swing.text.PlainView.drawLine(int,java.awt.Graphics,int,int)"
    ],
    "javax.swing.jtree.removeselectionpaths": [
        "javax.swing.JTree.removeSelectionPaths(javax.swing.tree.TreePath[])"
    ],
    "java.awt.pointerinfo.getlocation": [
        "java.awt.PointerInfo.getLocation()"
    ],
    "java.awt.geom.rectangle2d.float.tostring": [
        "java.awt.geom.Rectangle2D.Float.toString()"
    ],
    "javax.sql.commondatasource.setlogintimeout": [
        "javax.sql.CommonDataSource.setLoginTimeout(int)"
    ],
    "javax.swing.jmenu.updateui": [
        "javax.swing.JMenu.updateUI()"
    ],
    "javax.print.attribute.standard.jobstate.getcategory": [
        "javax.print.attribute.standard.JobState.getCategory()"
    ],
    "javax.imageio.event.iioreadprogresslistener.thumbnailprogress": [
        "javax.imageio.event.IIOReadProgressListener.thumbnailProgress(javax.imageio.ImageReader,float)"
    ],
    "javax.swing.tree.treepath.tostring": [
        "javax.swing.tree.TreePath.toString()"
    ],
    "javax.swing.plaf.synth.synthspinnerui.createeditor": [
        "javax.swing.plaf.synth.SynthSpinnerUI.createEditor()"
    ],
    "javax.xml.transform.sax.saxsource.sourcetoinputsource": [
        "javax.xml.transform.sax.SAXSource.sourceToInputSource(javax.xml.transform.Source)"
    ],
    "java.awt.geom.cubiccurve2d.getflatness": [
        "java.awt.geom.CubicCurve2D.getFlatness(double[],int)",
        "java.awt.geom.CubicCurve2D.getFlatness()",
        "java.awt.geom.CubicCurve2D.getFlatness(double,double,double,double,double,double,double,double)"
    ],
    "java.nio.file.files.lines": [
        "java.nio.file.Files.lines(java.nio.file.Path,java.nio.charset.Charset)",
        "java.nio.file.Files.lines(java.nio.file.Path)"
    ],
    "java.util.currency.getnumericcode": [
        "java.util.Currency.getNumericCode()"
    ],
    "java.sql.sqlexception.getnextexception": [
        "java.sql.SQLException.getNextException()"
    ],
    "java.awt.systemtray.issupported": [
        "java.awt.SystemTray.isSupported()"
    ],
    "java.util.prefs.preferences.getint": [
        "java.util.prefs.Preferences.getInt(java.lang.String,int)"
    ],
    "javax.swing.jtextarea.setcolumns": [
        "javax.swing.JTextArea.setColumns(int)"
    ],
    "java.awt.color.getcolorcomponents": [
        "java.awt.Color.getColorComponents(float[])",
        "java.awt.Color.getColorComponents(java.awt.color.ColorSpace,float[])"
    ],
    "java.net.interfaceaddress.equals": [
        "java.net.InterfaceAddress.equals(java.lang.Object)"
    ],
    "javax.net.ssl.sniservername.hashcode": [
        "javax.net.ssl.SNIServerName.hashCode()"
    ],
    "org.xml.sax.helpers.xmlreaderadapter.processinginstruction": [
        "org.xml.sax.helpers.XMLReaderAdapter.processingInstruction(java.lang.String,java.lang.String)"
    ],
    "org.omg.dynamicany._dynsequencestub.get_val": [
        "org.omg.DynamicAny._DynSequenceStub.get_val()"
    ],
    "javax.sql.rowset.spi.syncfactory.getregisteredproviders": [
        "javax.sql.rowset.spi.SyncFactory.getRegisteredProviders()"
    ],
    "javax.swing.text.html.htmleditorkit.getcontenttype": [
        "javax.swing.text.html.HTMLEditorKit.getContentType()"
    ],
    "javax.xml.transform.stax.staxresult.setsystemid": [
        "javax.xml.transform.stax.StAXResult.setSystemId(java.lang.String)"
    ],
    "java.awt.component.getalignmentx": [
        "java.awt.Component.getAlignmentX()"
    ],
    "org.omg.dynamicany.dynanyoperations.get_boolean": [
        "org.omg.DynamicAny.DynAnyOperations.get_boolean()"
    ],
    "java.sql.resultset.updatebyte": [
        "java.sql.ResultSet.updateByte(int,byte)",
        "java.sql.ResultSet.updateByte(java.lang.String,byte)"
    ],
    "java.text.normalizer.form.values": [
        "java.text.Normalizer.Form.values()"
    ],
    "javax.management.openmbean.compositedatasupport.equals": [
        "javax.management.openmbean.CompositeDataSupport.equals(java.lang.Object)"
    ],
    "javax.swing.text.styleddocument.addstyle": [
        "javax.swing.text.StyledDocument.addStyle(java.lang.String,javax.swing.text.Style)"
    ],
    "java.io.randomaccessfile.read": [
        "java.io.RandomAccessFile.read(byte[],int,int)",
        "java.io.RandomAccessFile.read()"
    ],
    "java.net.socket.setreuseaddress": [
        "java.net.Socket.setReuseAddress(boolean)"
    ],
    "javax.swing.joptionpane.getmaxcharactersperlinecount": [
        "javax.swing.JOptionPane.getMaxCharactersPerLineCount()"
    ],
    "javax.swing.plaf.synth.synthsliderui.getminimumsize": [
        "javax.swing.plaf.synth.SynthSliderUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "java.awt.graphics2d.drawimage": [
        "java.awt.Graphics2D.drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)",
        "java.awt.Graphics2D.drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)"
    ],
    "java.util.identityhashmap.hashcode": [
        "java.util.IdentityHashMap.hashCode()"
    ],
    "java.security.provider.clear": [
        "java.security.Provider.clear()"
    ],
    "java.net.urlconnection.getheaderfieldint": [
        "java.net.URLConnection.getHeaderFieldInt(java.lang.String,int)"
    ],
    "java.util.regex.matcher.groupcount": [
        "java.util.regex.Matcher.groupCount()"
    ],
    "javax.lang.model.element.element.getkind": [
        "javax.lang.model.element.Element.getKind()"
    ],
    "javax.sql.rowset.serial.serialstruct.getattributes": [
        "javax.sql.rowset.serial.SerialStruct.getAttributes(,java.lang.Class<?>>)",
        "javax.sql.rowset.serial.SerialStruct.getAttributes()"
    ],
    "java.security.cert.x509crlselector.clone": [
        "java.security.cert.X509CRLSelector.clone()"
    ],
    "java.io.pushbackreader.skip": [
        "java.io.PushbackReader.skip(long)"
    ],
    "org.omg.corba.request.add_out_arg": [
        "org.omg.CORBA.Request.add_out_arg()"
    ],
    "javax.swing.jmenu.firemenudeselected": [
        "javax.swing.JMenu.fireMenuDeselected()"
    ],
    "org.xml.sax.helpers.attributesimpl.setattribute": [
        "org.xml.sax.helpers.AttributesImpl.setAttribute(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
    ],
    "javax.management.badstringoperationexception.tostring": [
        "javax.management.BadStringOperationException.toString()"
    ],
    "java.beans.propertydescriptor.setwritemethod": [
        "java.beans.PropertyDescriptor.setWriteMethod(java.lang.reflect.Method)"
    ],
    "java.sql.connection.preparestatement": [
        "java.sql.Connection.prepareStatement(java.lang.String,int,int)",
        "java.sql.Connection.prepareStatement(java.lang.String,int,int,int)",
        "java.sql.Connection.prepareStatement(java.lang.String,java.lang.String)",
        "java.sql.Connection.prepareStatement(java.lang.String,int)",
        "java.sql.Connection.prepareStatement(java.lang.String)",
        "java.sql.Connection.prepareStatement(java.lang.String,java.lang.String[])",
        "java.sql.Connection.prepareStatement(java.lang.String,int[])"
    ],
    "java.nio.bytebuffer.asdoublebuffer": [
        "java.nio.ByteBuffer.asDoubleBuffer()"
    ],
    "org.omg.dynamicany.dynanyoperations.get_reference": [
        "org.omg.DynamicAny.DynAnyOperations.get_reference()"
    ],
    "java.time.chrono.chronology.zoneddatetime": [
        "java.time.chrono.Chronology.zonedDateTime(java.time.Instant,java.time.ZoneId)",
        "java.time.chrono.Chronology.zonedDateTime(java.time.temporal.TemporalAccessor)"
    ],
    "javax.lang.model.util.simpleannotationvaluevisitor6.visittype": [
        "javax.lang.model.util.SimpleAnnotationValueVisitor6.visitType(javax.lang.model.type.TypeMirror,javax.lang.model.util.SimpleAnnotationValueVisitor6)"
    ],
    "javax.sound.midi.mididevice.getmaxreceivers": [
        "javax.sound.midi.MidiDevice.getMaxReceivers()"
    ],
    "java.util.concurrent.atomic.atomiclongfieldupdater.weakcompareandset": [
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.weakCompareAndSet(java.util.concurrent.atomic.AtomicLongFieldUpdater,long,long)",
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.weakCompareAndSet(T,long,long)"
    ],
    "java.awt.geom.rectangle2d.double.getbounds2d": [
        "java.awt.geom.Rectangle2D.Double.getBounds2D()"
    ],
    "javax.imageio.imagereader.getwidth": [
        "javax.imageio.ImageReader.getWidth(int)"
    ],
    "java.awt.component.addfocuslistener": [
        "java.awt.Component.addFocusListener(java.awt.event.FocusListener)"
    ],
    "java.awt.gridbaglayout.removelayoutcomponent": [
        "java.awt.GridBagLayout.removeLayoutComponent(java.awt.Component)"
    ],
    "javax.swing.jslider.createstandardlabels": [
        "javax.swing.JSlider.createStandardLabels(int,int)",
        "javax.swing.JSlider.createStandardLabels(int)"
    ],
    "javax.swing.plaf.multi.multifilechooserui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiFileChooserUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "javax.swing.debuggraphics.setlogstream": [
        "javax.swing.DebugGraphics.setLogStream(java.io.PrintStream)"
    ],
    "java.awt.dnd.droptargetdragevent.getsourceactions": [
        "java.awt.dnd.DropTargetDragEvent.getSourceActions()"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getacceleratorforeground": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getAcceleratorForeground()"
    ],
    "java.nio.charset.charsetdecoder.maxcharsperbyte": [
        "java.nio.charset.CharsetDecoder.maxCharsPerByte()"
    ],
    "java.awt.scrollbar.setminimum": [
        "java.awt.Scrollbar.setMinimum(int)"
    ],
    "javax.swing.plaf.multi.multilabelui.installui": [
        "javax.swing.plaf.multi.MultiLabelUI.installUI(javax.swing.JComponent)"
    ],
    "org.omg.dynamicany._dynenumstub.assign": [
        "org.omg.DynamicAny._DynEnumStub.assign(org.omg.DynamicAny.DynAny)"
    ],
    "java.lang.reflect.field.getlong": [
        "java.lang.reflect.Field.getLong(java.lang.Object)"
    ],
    "java.util.concurrent.atomic.atomicreferencefieldupdater.lazyset": [
        "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.lazySet(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater)",
        "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.lazySet(T,V)"
    ],
    "java.security.permission.tostring": [
        "java.security.Permission.toString()"
    ],
    "java.sql.databasemetadata.supportsfullouterjoins": [
        "java.sql.DatabaseMetaData.supportsFullOuterJoins()"
    ],
    "java.security.securerandom.nextbytes": [
        "java.security.SecureRandom.nextBytes(byte[])"
    ],
    "javax.annotation.processing.processor.process": [
        "javax.annotation.processing.Processor.process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)"
    ],
    "java.util.concurrent.concurrentmap.remove": [
        "java.util.concurrent.ConcurrentMap.remove(java.lang.Object,java.lang.Object)"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writebytes": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeBytes(byte[])"
    ],
    "javax.swing.text.attributeset.getresolveparent": [
        "javax.swing.text.AttributeSet.getResolveParent()"
    ],
    "javax.swing.jpopupmenu.insert": [
        "javax.swing.JPopupMenu.insert(java.awt.Component,int)",
        "javax.swing.JPopupMenu.insert(javax.swing.Action,int)"
    ],
    "java.lang.long.rotateleft": [
        "java.lang.Long.rotateLeft(long,int)"
    ],
    "java.lang.math.sinh": [
        "java.lang.Math.sinh(double)"
    ],
    "java.util.navigablemap.lowerkey": [
        "java.util.NavigableMap.lowerKey(K)",
        "java.util.NavigableMap.lowerKey(java.util.NavigableMap)"
    ],
    "java.awt.component.setfocusable": [
        "java.awt.Component.setFocusable(boolean)"
    ],
    "javax.imageio.imagewriter.endreplacepixels": [
        "javax.imageio.ImageWriter.endReplacePixels()"
    ],
    "javax.print.attribute.standard.mediaprintablearea.getwidth": [
        "javax.print.attribute.standard.MediaPrintableArea.getWidth(int)"
    ],
    "javax.annotation.processing.abstractprocessor.getsupportedannotationtypes": [
        "javax.annotation.processing.AbstractProcessor.getSupportedAnnotationTypes()"
    ],
    "javax.swing.text.html.htmldocument.getelement": [
        "javax.swing.text.html.HTMLDocument.getElement(java.lang.String)",
        "javax.swing.text.html.HTMLDocument.getElement(javax.swing.text.Element,java.lang.Object,java.lang.Object)"
    ],
    "javax.print.attribute.standard.queuedjobcount.getcategory": [
        "javax.print.attribute.standard.QueuedJobCount.getCategory()"
    ],
    "java.time.chrono.minguoera.getvalue": [
        "java.time.chrono.MinguoEra.getValue()"
    ],
    "javax.xml.crypto.xmlcryptocontext.getbaseuri": [
        "javax.xml.crypto.XMLCryptoContext.getBaseURI()"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.getcolumncount": [
        "javax.sql.rowset.RowSetMetaDataImpl.getColumnCount()"
    ],
    "javax.swing.abstractbutton.setselectedicon": [
        "javax.swing.AbstractButton.setSelectedIcon(javax.swing.Icon)"
    ],
    "javax.swing.defaultsingleselectionmodel.getlisteners": [
        "javax.swing.DefaultSingleSelectionModel.getListeners(java.lang.Class<T>)"
    ],
    "javax.swing.jtextpane.getlogicalstyle": [
        "javax.swing.JTextPane.getLogicalStyle()"
    ],
    "javax.management.openmbean.openmbeanparameterinfo.tostring": [
        "javax.management.openmbean.OpenMBeanParameterInfo.toString()"
    ],
    "javax.sql.rowset.cachedrowset.size": [
        "javax.sql.rowset.CachedRowSet.size()"
    ],
    "javax.swing.plaf.basic.basicsliderui.scrollduetoclickintrack": [
        "javax.swing.plaf.basic.BasicSliderUI.scrollDueToClickInTrack(int)"
    ],
    "org.omg.dynamicany._dynvaluestub.insert_val": [
        "org.omg.DynamicAny._DynValueStub.insert_val(java.io.Serializable)"
    ],
    "java.rmi.marshalledobject.get": [
        "java.rmi.MarshalledObject.get()"
    ],
    "javax.swing.undo.stateedit.getpresentationname": [
        "javax.swing.undo.StateEdit.getPresentationName()"
    ],
    "javax.swing.event.swingpropertychangesupport.firepropertychange": [
        "javax.swing.event.SwingPropertyChangeSupport.firePropertyChange(java.beans.PropertyChangeEvent)"
    ],
    "java.util.prefs.abstractpreferences.putboolean": [
        "java.util.prefs.AbstractPreferences.putBoolean(java.lang.String,boolean)"
    ],
    "java.awt.geom.cubiccurve2d.float.getctrlp1": [
        "java.awt.geom.CubicCurve2D.Float.getCtrlP1()"
    ],
    "java.security.cert.certificatefactory.getcertpathencodings": [
        "java.security.cert.CertificateFactory.getCertPathEncodings()"
    ],
    "java.beans.encoder.remove": [
        "java.beans.Encoder.remove(java.lang.Object)"
    ],
    "javax.print.attribute.standard.pageranges.getname": [
        "javax.print.attribute.standard.PageRanges.getName()"
    ],
    "javax.sql.rowset.joinrowset.getrowsets": [
        "javax.sql.rowset.JoinRowSet.getRowSets()"
    ],
    "java.util.zip.inflaterinputstream.mark": [
        "java.util.zip.InflaterInputStream.mark(int)"
    ],
    "java.time.period.getunits": [
        "java.time.Period.getUnits()"
    ],
    "javax.xml.stream.xmlinputfactory.setproperty": [
        "javax.xml.stream.XMLInputFactory.setProperty(java.lang.String,java.lang.Object)"
    ],
    "javax.swing.jwindow.setrootpanecheckingenabled": [
        "javax.swing.JWindow.setRootPaneCheckingEnabled(boolean)"
    ],
    "org.omg.dynamicany._dynvaluestub.current_component": [
        "org.omg.DynamicAny._DynValueStub.current_component()"
    ],
    "java.util.concurrent.copyonwritearraylist.add": [
        "java.util.concurrent.CopyOnWriteArrayList.add(E)",
        "java.util.concurrent.CopyOnWriteArrayList.add(int,E)",
        "java.util.concurrent.CopyOnWriteArrayList.add(int,java.util.concurrent.CopyOnWriteArrayList)",
        "java.util.concurrent.CopyOnWriteArrayList.add(java.util.concurrent.CopyOnWriteArrayList)"
    ],
    "javax.swing.plaf.synth.synthsplitpaneui.uninstalllisteners": [
        "javax.swing.plaf.synth.SynthSplitPaneUI.uninstallListeners()"
    ],
    "java.net.uri.getrawpath": [
        "java.net.URI.getRawPath()"
    ],
    "java.lang.boolean.booleanvalue": [
        "java.lang.Boolean.booleanValue()"
    ],
    "java.nio.charset.charset.name": [
        "java.nio.charset.Charset.name()"
    ],
    "javax.swing.plaf.basic.basicinternalframeui.deactivateframe": [
        "javax.swing.plaf.basic.BasicInternalFrameUI.deactivateFrame(javax.swing.JInternalFrame)"
    ],
    "java.security.authprovider.setcallbackhandler": [
        "java.security.AuthProvider.setCallbackHandler(javax.security.auth.callback.CallbackHandler)"
    ],
    "java.util.stream.stream.builder": [
        "java.util.stream.Stream.builder()"
    ],
    "javax.lang.model.util.abstracttypevisitor7.visitunion": [
        "javax.lang.model.util.AbstractTypeVisitor7.visitUnion(javax.lang.model.type.UnionType,javax.lang.model.util.AbstractTypeVisitor7)"
    ],
    "javax.jws.soap.soapbinding.use.valueof": [
        "javax.jws.soap.SOAPBinding.Use.valueOf(java.lang.String)"
    ],
    "java.util.hashmap.get": [
        "java.util.HashMap.get(java.lang.Object)"
    ],
    "java.time.zoneid.systemdefault": [
        "java.time.ZoneId.systemDefault()"
    ],
    "javax.swing.box.createhorizontalbox": [
        "javax.swing.Box.createHorizontalBox()"
    ],
    "org.omg.corba.portable.outputstream.write_ushort_array": [
        "org.omg.CORBA.portable.OutputStream.write_ushort_array(short[],int,int)"
    ],
    "java.awt.radialgradientpaint.getradius": [
        "java.awt.RadialGradientPaint.getRadius()"
    ],
    "javax.swing.text.jtextcomponent.seteditable": [
        "javax.swing.text.JTextComponent.setEditable(boolean)"
    ],
    "javax.imageio.metadata.iiometadataformatimpl.addchildelement": [
        "javax.imageio.metadata.IIOMetadataFormatImpl.addChildElement(java.lang.String,java.lang.String)"
    ],
    "java.util.concurrent.concurrentskiplistmap.foreach": [
        "java.util.concurrent.ConcurrentSkipListMap.forEach(java.util.function.BiConsumer<? super,? super V>)"
    ],
    "java.beans.simplebeaninfo.getbeandescriptor": [
        "java.beans.SimpleBeanInfo.getBeanDescriptor()"
    ],
    "java.util.concurrent.atomic.atomicreference.getandupdate": [
        "java.util.concurrent.atomic.AtomicReference.getAndUpdate(java.util.function.UnaryOperator<V>)",
        "java.util.concurrent.atomic.AtomicReference.getAndUpdate(java.util.function.UnaryOperator<java.util.concurrent.atomic.AtomicReference>)"
    ],
    "java.awt.checkboxmenuitem.removeitemlistener": [
        "java.awt.CheckboxMenuItem.removeItemListener(java.awt.event.ItemListener)"
    ],
    "org.omg.dynamicany._dynvaluestub.get_ushort": [
        "org.omg.DynamicAny._DynValueStub.get_ushort()"
    ],
    "javax.net.ssl.snihostname.tostring": [
        "javax.net.ssl.SNIHostName.toString()"
    ],
    "java.util.timezone.getdefault": [
        "java.util.TimeZone.getDefault()"
    ],
    "org.omg.corba.portable.objectimpl._get_policy": [
        "org.omg.CORBA.portable.ObjectImpl._get_policy(int)"
    ],
    "java.awt.rectangle.getbounds": [
        "java.awt.Rectangle.getBounds()"
    ],
    "java.io.objectstreamfield.getname": [
        "java.io.ObjectStreamField.getName()"
    ],
    "java.util.deque.polllast": [
        "java.util.Deque.pollLast()"
    ],
    "java.sql.jdbctype.getvendortypenumber": [
        "java.sql.JDBCType.getVendorTypeNumber()"
    ],
    "java.awt.pageattributes.setcolor": [
        "java.awt.PageAttributes.setColor(java.awt.PageAttributes.ColorType)"
    ],
    "java.security.cert.x509certselector.addsubjectalternativename": [
        "java.security.cert.X509CertSelector.addSubjectAlternativeName(int,byte[])",
        "java.security.cert.X509CertSelector.addSubjectAlternativeName(int,java.lang.String)"
    ],
    "javax.print.attribute.standard.requestingusername.equals": [
        "javax.print.attribute.standard.RequestingUserName.equals(java.lang.Object)"
    ],
    "java.beans.beans.setguiavailable": [
        "java.beans.Beans.setGuiAvailable(boolean)"
    ],
    "java.util.scanner.nextint": [
        "java.util.Scanner.nextInt(int)",
        "java.util.Scanner.nextInt()"
    ],
    "javax.swing.tree.defaultmutabletreenode.tostring": [
        "javax.swing.tree.DefaultMutableTreeNode.toString()"
    ],
    "java.awt.event.mousewheelevent.getscrolltype": [
        "java.awt.event.MouseWheelEvent.getScrollType()"
    ],
    "java.awt.list.removeactionlistener": [
        "java.awt.List.removeActionListener(java.awt.event.ActionListener)"
    ],
    "javax.swing.border.strokeborder.getstroke": [
        "javax.swing.border.StrokeBorder.getStroke()"
    ],
    "java.awt.list.additemlistener": [
        "java.awt.List.addItemListener(java.awt.event.ItemListener)"
    ],
    "javax.swing.text.abstractwriter.getlineseparator": [
        "javax.swing.text.AbstractWriter.getLineSeparator()"
    ],
    "javax.swing.text.zoneview.getmaxzonesloaded": [
        "javax.swing.text.ZoneView.getMaxZonesLoaded()"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.startelement": [
        "org.xml.sax.helpers.XMLFilterImpl.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
    ],
    "javax.swing.text.html.imageview.viewtomodel": [
        "javax.swing.text.html.ImageView.viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias[])"
    ],
    "org.omg.portableinterceptor.requestinfooperations.operation_context": [
        "org.omg.PortableInterceptor.RequestInfoOperations.operation_context()"
    ],
    "javax.management.openmbean.openmbeanparameterinfosupport.getmaxvalue": [
        "javax.management.openmbean.OpenMBeanParameterInfoSupport.getMaxValue()"
    ],
    "java.awt.fontmetrics.tostring": [
        "java.awt.FontMetrics.toString()"
    ],
    "java.awt.font.getfamily": [
        "java.awt.Font.getFamily(java.util.Locale)",
        "java.awt.Font.getFamily()"
    ],
    "java.awt.geom.quadcurve2d.double.getx1": [
        "java.awt.geom.QuadCurve2D.Double.getX1()"
    ],
    "java.util.concurrent.linkedblockingdeque.toarray": [
        "java.util.concurrent.LinkedBlockingDeque.toArray(T[])"
    ],
    "java.awt.image.singlepixelpackedsamplemodel.getsamples": [
        "java.awt.image.SinglePixelPackedSampleModel.getSamples(int,int,int,int,int,int[],java.awt.image.DataBuffer)"
    ],
    "java.time.temporal.temporalunit.tostring": [
        "java.time.temporal.TemporalUnit.toString()"
    ],
    "org.omg.corba.booleanholder._read": [
        "org.omg.CORBA.BooleanHolder._read(org.omg.CORBA.portable.InputStream)"
    ],
    "java.beans.vetoablechangesupport.getvetoablechangelisteners": [
        "java.beans.VetoableChangeSupport.getVetoableChangeListeners(java.lang.String)",
        "java.beans.VetoableChangeSupport.getVetoableChangeListeners()"
    ],
    "javax.naming.directory.attribute.getattributesyntaxdefinition": [
        "javax.naming.directory.Attribute.getAttributeSyntaxDefinition()"
    ],
    "java.util.priorityqueue.iterator": [
        "java.util.PriorityQueue.iterator()"
    ],
    "org.omg.corba.portable.inputstream.read_object": [
        "org.omg.CORBA.portable.InputStream.read_Object(java.lang.Class)",
        "org.omg.CORBA.portable.InputStream.read_Object()"
    ],
    "org.omg.dynamicany._dynunionstub.insert_wstring": [
        "org.omg.DynamicAny._DynUnionStub.insert_wstring(java.lang.String)"
    ],
    "org.omg.dynamicany._dynanystub.insert_ulonglong": [
        "org.omg.DynamicAny._DynAnyStub.insert_ulonglong(long)"
    ],
    "java.rmi.activation.activationsystem.unregisterobject": [
        "java.rmi.activation.ActivationSystem.unregisterObject(java.rmi.activation.ActivationID)"
    ],
    "java.util.linkedhashmap.get": [
        "java.util.LinkedHashMap.get(java.lang.Object)"
    ],
    "javax.swing.plaf.basic.basicmenuitemui.paintbackground": [
        "javax.swing.plaf.basic.BasicMenuItemUI.paintBackground(java.awt.Graphics,javax.swing.JMenuItem,java.awt.Color)"
    ],
    "java.lang.float.tostring": [
        "java.lang.Float.toString(float)",
        "java.lang.Float.toString()"
    ],
    "javax.swing.plaf.synth.synthpanelui.paint": [
        "javax.swing.plaf.synth.SynthPanelUI.paint(java.awt.Graphics,javax.swing.JComponent)",
        "javax.swing.plaf.synth.SynthPanelUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)"
    ],
    "javax.imageio.imagereader.processpasscomplete": [
        "javax.imageio.ImageReader.processPassComplete(java.awt.image.BufferedImage)"
    ],
    "javax.lang.model.util.elementkindvisitor6.visitexecutable": [
        "javax.lang.model.util.ElementKindVisitor6.visitExecutable(javax.lang.model.element.ExecutableElement,javax.lang.model.util.ElementKindVisitor6)"
    ],
    "java.util.map.size": [
        "java.util.Map.size()"
    ],
    "java.io.filterwriter.flush": [
        "java.io.FilterWriter.flush()"
    ],
    "javax.transaction.xa.xaresource.recover": [
        "javax.transaction.xa.XAResource.recover(int)"
    ],
    "java.util.prefs.abstractpreferences.putdouble": [
        "java.util.prefs.AbstractPreferences.putDouble(java.lang.String,double)"
    ],
    "javax.swing.plaf.synth.synthlookandfeel.getdescription": [
        "javax.swing.plaf.synth.SynthLookAndFeel.getDescription()"
    ],
    "javax.xml.crypto.xmlcryptocontext.getnamespaceprefix": [
        "javax.xml.crypto.XMLCryptoContext.getNamespacePrefix(java.lang.String,java.lang.String)"
    ],
    "java.util.concurrent.concurrenthashmap.reducevaluestolong": [
        "java.util.concurrent.ConcurrentHashMap.reduceValuesToLong(long,java.util.function.ToLongFunction<? super java.util.concurrent.ConcurrentHashMap>,long,java.util.function.LongBinaryOperator)",
        "java.util.concurrent.ConcurrentHashMap.reduceValuesToLong(long,java.util.function.ToLongFunction<? super V>,long,java.util.function.LongBinaryOperator)"
    ],
    "java.util.concurrent.atomic.atomicinteger.getanddecrement": [
        "java.util.concurrent.atomic.AtomicInteger.getAndDecrement()"
    ],
    "javax.swing.table.defaulttablemodel.converttovector": [
        "javax.swing.table.DefaultTableModel.convertToVector(java.lang.Object[])",
        "javax.swing.table.DefaultTableModel.convertToVector(java.lang.Object[][])"
    ],
    "javax.naming.event.eventcontext.removenaminglistener": [
        "javax.naming.event.EventContext.removeNamingListener(javax.naming.event.NamingListener)"
    ],
    "java.awt.image.multipixelpackedsamplemodel.gettransfertype": [
        "java.awt.image.MultiPixelPackedSampleModel.getTransferType()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintdesktopiconborder": [
        "javax.swing.plaf.synth.SynthPainter.paintDesktopIconBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "org.w3c.dom.ls.lsinput.setstringdata": [
        "org.w3c.dom.ls.LSInput.setStringData(java.lang.String)"
    ],
    "java.time.localdatetime.get": [
        "java.time.LocalDateTime.get(java.time.temporal.TemporalField)"
    ],
    "java.security.spec.ecpoint.equals": [
        "java.security.spec.ECPoint.equals(java.lang.Object)"
    ],
    "javax.swing.scrollpanelayout.layoutcontainer": [
        "javax.swing.ScrollPaneLayout.layoutContainer(java.awt.Container)"
    ],
    "java.awt.pageattributes.setprinterresolution": [
        "java.awt.PageAttributes.setPrinterResolution(int[])",
        "java.awt.PageAttributes.setPrinterResolution(int)"
    ],
    "javax.sound.sampled.dataline.getlevel": [
        "javax.sound.sampled.DataLine.getLevel()"
    ],
    "java.io.bytearrayoutputstream.writeto": [
        "java.io.ByteArrayOutputStream.writeTo(java.io.OutputStream)"
    ],
    "javax.imageio.metadata.iiometadata.getstandardtree": [
        "javax.imageio.metadata.IIOMetadata.getStandardTree()"
    ],
    "java.security.permission.getactions": [
        "java.security.Permission.getActions()"
    ],
    "java.nio.buffer.rewind": [
        "java.nio.Buffer.rewind()"
    ],
    "java.awt.list.select": [
        "java.awt.List.select(int)"
    ],
    "javax.print.attribute.standard.jobkoctetsprocessed.getname": [
        "javax.print.attribute.standard.JobKOctetsProcessed.getName()"
    ],
    "javax.swing.text.html.htmleditorkit.linkcontroller.mouseclicked": [
        "javax.swing.text.html.HTMLEditorKit.LinkController.mouseClicked(java.awt.event.MouseEvent)"
    ],
    "java.awt.geom.flatteningpathiterator.getwindingrule": [
        "java.awt.geom.FlatteningPathIterator.getWindingRule()"
    ],
    "javax.swing.text.styleconstants.getfirstlineindent": [
        "javax.swing.text.StyleConstants.getFirstLineIndent(javax.swing.text.AttributeSet)"
    ],
    "javax.swing.jtree.getselectionpath": [
        "javax.swing.JTree.getSelectionPath()"
    ],
    "javax.management.openmbean.openmbeaninfo.getnotifications": [
        "javax.management.openmbean.OpenMBeanInfo.getNotifications()"
    ],
    "javax.xml.datatype.duration.gettimeinmillis": [
        "javax.xml.datatype.Duration.getTimeInMillis(java.util.Date)",
        "javax.xml.datatype.Duration.getTimeInMillis(java.util.Calendar)"
    ],
    "javax.xml.bind.jaxbexception.tostring": [
        "javax.xml.bind.JAXBException.toString()"
    ],
    "java.beans.beancontext.beancontextsupport.firechildrenadded": [
        "java.beans.beancontext.BeanContextSupport.fireChildrenAdded(java.beans.beancontext.BeanContextMembershipEvent)"
    ],
    "javax.swing.plaf.synth.region.getname": [
        "javax.swing.plaf.synth.Region.getName()"
    ],
    "javax.swing.jfilechooser.setdialogtype": [
        "javax.swing.JFileChooser.setDialogType(int)"
    ],
    "javax.swing.jcomponent.gettransferhandler": [
        "javax.swing.JComponent.getTransferHandler()"
    ],
    "org.omg.corba.any.insert_wstring": [
        "org.omg.CORBA.Any.insert_wstring(java.lang.String)"
    ],
    "java.awt.component.getcomponentorientation": [
        "java.awt.Component.getComponentOrientation()"
    ],
    "javax.sql.rowset.spi.syncresolver.getstatus": [
        "javax.sql.rowset.spi.SyncResolver.getStatus()"
    ],
    "java.lang.system.setproperties": [
        "java.lang.System.setProperties(java.util.Properties)"
    ],
    "javax.swing.jcheckboxmenuitem.getaccessiblecontext": [
        "javax.swing.JCheckBoxMenuItem.getAccessibleContext()"
    ],
    "javax.swing.plaf.multi.multimenubarui.getuis": [
        "javax.swing.plaf.multi.MultiMenuBarUI.getUIs()"
    ],
    "java.lang.short.longvalue": [
        "java.lang.Short.longValue()"
    ],
    "javax.swing.plaf.multi.multiseparatorui.uninstallui": [
        "javax.swing.plaf.multi.MultiSeparatorUI.uninstallUI(javax.swing.JComponent)"
    ],
    "javax.xml.soap.soapmessage.getproperty": [
        "javax.xml.soap.SOAPMessage.getProperty(java.lang.String)"
    ],
    "javax.swing.text.styleconstants.setlinespacing": [
        "javax.swing.text.StyleConstants.setLineSpacing(javax.swing.text.MutableAttributeSet,float)"
    ],
    "java.awt.rectangle.setrect": [
        "java.awt.Rectangle.setRect(double,double,double,double)"
    ],
    "javax.swing.defaultboundedrangemodel.setvalue": [
        "javax.swing.DefaultBoundedRangeModel.setValue(int)"
    ],
    "java.util.doublesummarystatistics.getmin": [
        "java.util.DoubleSummaryStatistics.getMin()"
    ],
    "javax.xml.ws.http.httpexception.getstatuscode": [
        "javax.xml.ws.http.HTTPException.getStatusCode()"
    ],
    "java.nio.file.invalidpathexception.getmessage": [
        "java.nio.file.InvalidPathException.getMessage()"
    ],
    "org.omg.dynamicany._dynstructstub.get_double": [
        "org.omg.DynamicAny._DynStructStub.get_double()"
    ],
    "java.sql.datatruncation.getread": [
        "java.sql.DataTruncation.getRead()"
    ],
    "javax.crypto.keyagreement.getinstance": [
        "javax.crypto.KeyAgreement.getInstance(java.lang.String)",
        "javax.crypto.KeyAgreement.getInstance(java.lang.String,java.lang.String)",
        "javax.crypto.KeyAgreement.getInstance(java.lang.String,java.security.Provider)"
    ],
    "org.omg.corba.byteholder._read": [
        "org.omg.CORBA.ByteHolder._read(org.omg.CORBA.portable.InputStream)"
    ],
    "java.util.prefs.nodechangeevent.getparent": [
        "java.util.prefs.NodeChangeEvent.getParent()"
    ],
    "java.util.zip.zipentry.setlastmodifiedtime": [
        "java.util.zip.ZipEntry.setLastModifiedTime(java.nio.file.attribute.FileTime)"
    ],
    "javax.xml.stream.xmlstreamwriter.writecharacters": [
        "javax.xml.stream.XMLStreamWriter.writeCharacters(char[],int,int)",
        "javax.xml.stream.XMLStreamWriter.writeCharacters(java.lang.String)"
    ],
    "java.net.socket.setsocketimplfactory": [
        "java.net.Socket.setSocketImplFactory(java.net.SocketImplFactory)"
    ],
    "javax.xml.bind.binder.getxmlnode": [
        "javax.xml.bind.Binder.getXMLNode(java.lang.Object)"
    ],
    "java.time.zoneoffset.getlong": [
        "java.time.ZoneOffset.getLong(java.time.temporal.TemporalField)"
    ],
    "java.security.spec.ecfieldf2m.equals": [
        "java.security.spec.ECFieldF2m.equals(java.lang.Object)"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.isvalid": [
        "javax.xml.datatype.XMLGregorianCalendar.isValid()"
    ],
    "javax.swing.plaf.synth.synthtextfieldui.installdefaults": [
        "javax.swing.plaf.synth.SynthTextFieldUI.installDefaults()"
    ],
    "javax.swing.jinternalframe.isresizable": [
        "javax.swing.JInternalFrame.isResizable()"
    ],
    "java.util.concurrent.phaser.awaitadvanceinterruptibly": [
        "java.util.concurrent.Phaser.awaitAdvanceInterruptibly(int)",
        "java.util.concurrent.Phaser.awaitAdvanceInterruptibly(int,long,java.util.concurrent.TimeUnit)"
    ],
    "java.awt.graphics2d.getrenderinghints": [
        "java.awt.Graphics2D.getRenderingHints()"
    ],
    "org.omg.portableserver.poaoperations.set_servant_manager": [
        "org.omg.PortableServer.POAOperations.set_servant_manager(org.omg.PortableServer.ServantManager)"
    ],
    "javax.activation.datacontenthandler.gettransferdata": [
        "javax.activation.DataContentHandler.getTransferData(java.awt.datatransfer.DataFlavor,javax.activation.DataSource)"
    ],
    "java.util.regex.matcher.reset": [
        "java.util.regex.Matcher.reset()",
        "java.util.regex.Matcher.reset(java.lang.CharSequence)"
    ],
    "javax.imageio.imagewriter.removeiiowritewarninglistener": [
        "javax.imageio.ImageWriter.removeIIOWriteWarningListener(javax.imageio.event.IIOWriteWarningListener)"
    ],
    "javax.swing.jlayeredpane.getindexof": [
        "javax.swing.JLayeredPane.getIndexOf(java.awt.Component)"
    ],
    "javax.swing.jtable.selectall": [
        "javax.swing.JTable.selectAll()"
    ],
    "javax.lang.model.util.abstracttypevisitor8.visitintersection": [
        "javax.lang.model.util.AbstractTypeVisitor8.visitIntersection(javax.lang.model.type.IntersectionType,javax.lang.model.util.AbstractTypeVisitor8)"
    ],
    "javax.management.remote.jmxconnectorprovider.newjmxconnector": [
        "javax.management.remote.JMXConnectorProvider.newJMXConnector(javax.management.remote.JMXServiceURL,,?>)"
    ],
    "java.text.decimalformatsymbols.setcurrencysymbol": [
        "java.text.DecimalFormatSymbols.setCurrencySymbol(java.lang.String)"
    ],
    "java.util.stream.collectors.maxby": [
        "java.util.stream.Collectors.maxBy(java.util.Comparator<? super T>)"
    ],
    "org.omg.dynamicany.dynvalueoperations.current_member_kind": [
        "org.omg.DynamicAny.DynValueOperations.current_member_kind()"
    ],
    "javax.lang.model.element.elementvisitor.visittype": [
        "javax.lang.model.element.ElementVisitor.visitType(javax.lang.model.element.TypeElement,javax.lang.model.element.ElementVisitor)"
    ],
    "javax.swing.jlayer.setui": [
        "javax.swing.JLayer.setUI(javax.swing.plaf.LayerUI<? super javax.swing.JLayer>)"
    ],
    "java.awt.awteventmulticaster.componentadded": [
        "java.awt.AWTEventMulticaster.componentAdded(java.awt.event.ContainerEvent)"
    ],
    "javax.management.relation.roleinfo.getmindegree": [
        "javax.management.relation.RoleInfo.getMinDegree()"
    ],
    "org.omg.dynamicany.dynanyoperations.insert_ulong": [
        "org.omg.DynamicAny.DynAnyOperations.insert_ulong(int)"
    ],
    "javax.xml.crypto.xmlcryptocontext.setdefaultnamespaceprefix": [
        "javax.xml.crypto.XMLCryptoContext.setDefaultNamespacePrefix(java.lang.String)"
    ],
    "javax.sound.midi.sequencer.getloopendpoint": [
        "javax.sound.midi.Sequencer.getLoopEndPoint()"
    ],
    "java.util.function.biconsumer.accept": [
        "java.util.function.BiConsumer.accept(T,U)",
        "java.util.function.BiConsumer.accept(java.util.function.BiConsumer,java.util.function.BiConsumer)"
    ],
    "java.lang.reflect.field.getboolean": [
        "java.lang.reflect.Field.getBoolean(java.lang.Object)"
    ],
    "javax.swing.plaf.multi.multiscrollpaneui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiScrollPaneUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "javax.script.abstractscriptengine.setcontext": [
        "javax.script.AbstractScriptEngine.setContext(javax.script.ScriptContext)"
    ],
    "org.omg.corba.orb.create_value_box_tc": [
        "org.omg.CORBA.ORB.create_value_box_tc(java.lang.String,java.lang.String,org.omg.CORBA.TypeCode)"
    ],
    "javax.swing.plaf.synth.synthsliderui.update": [
        "javax.swing.plaf.synth.SynthSliderUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.lang.strictmath.abs": [
        "java.lang.StrictMath.abs(float)",
        "java.lang.StrictMath.abs(int)",
        "java.lang.StrictMath.abs(double)",
        "java.lang.StrictMath.abs(long)"
    ],
    "java.time.offsettime.now": [
        "java.time.OffsetTime.now()",
        "java.time.OffsetTime.now(java.time.ZoneId)",
        "java.time.OffsetTime.now(java.time.Clock)"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.uninstallkeyboardactions": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.uninstallKeyboardActions()"
    ],
    "javax.lang.model.type.typevisitor.visittypevariable": [
        "javax.lang.model.type.TypeVisitor.visitTypeVariable(javax.lang.model.type.TypeVariable,javax.lang.model.type.TypeVisitor)"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.installlisteners": [
        "javax.swing.plaf.basic.BasicComboBoxUI.installListeners()"
    ],
    "java.security.basicpermission.hashcode": [
        "java.security.BasicPermission.hashCode()"
    ],
    "javax.swing.table.defaulttablecolumnmodel.getcolumn": [
        "javax.swing.table.DefaultTableColumnModel.getColumn(int)"
    ],
    "java.awt.awtkeystroke.getkeyeventtype": [
        "java.awt.AWTKeyStroke.getKeyEventType()"
    ],
    "java.nio.charset.charsetdecoder.implonmalformedinput": [
        "java.nio.charset.CharsetDecoder.implOnMalformedInput(java.nio.charset.CodingErrorAction)"
    ],
    "java.net.socketpermission.hashcode": [
        "java.net.SocketPermission.hashCode()"
    ],
    "javax.sound.midi.receiver.send": [
        "javax.sound.midi.Receiver.send(javax.sound.midi.MidiMessage,long)"
    ],
    "java.time.chrono.japaneseera.values": [
        "java.time.chrono.JapaneseEra.values()"
    ],
    "org.omg.corba.portable.outputstream.write_object": [
        "org.omg.CORBA.portable.OutputStream.write_Object(org.omg.CORBA.Object)"
    ],
    "javax.imageio.imagetranscoder.convertimagemetadata": [
        "javax.imageio.ImageTranscoder.convertImageMetadata(javax.imageio.metadata.IIOMetadata,javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam)"
    ],
    "java.util.stream.intstream.asdoublestream": [
        "java.util.stream.IntStream.asDoubleStream()"
    ],
    "java.awt.image.writablerenderedimage.setdata": [
        "java.awt.image.WritableRenderedImage.setData(java.awt.image.Raster)"
    ],
    "javax.swing.table.defaulttablemodel.addrow": [
        "javax.swing.table.DefaultTableModel.addRow(java.util.Vector)",
        "javax.swing.table.DefaultTableModel.addRow(java.lang.Object[])"
    ],
    "java.awt.geom.ellipse2d.intersects": [
        "java.awt.geom.Ellipse2D.intersects(double,double,double,double)"
    ],
    "javax.imageio.stream.iiobytebuffer.setlength": [
        "javax.imageio.stream.IIOByteBuffer.setLength(int)"
    ],
    "java.util.prefs.preferences.parent": [
        "java.util.prefs.Preferences.parent()"
    ],
    "javax.swing.tree.defaultmutabletreenode.getchildafter": [
        "javax.swing.tree.DefaultMutableTreeNode.getChildAfter(javax.swing.tree.TreeNode)"
    ],
    "java.time.yearmonth.lengthofmonth": [
        "java.time.YearMonth.lengthOfMonth()"
    ],
    "javax.xml.bind.helpers.abstractmarshallerimpl.isformattedoutput": [
        "javax.xml.bind.helpers.AbstractMarshallerImpl.isFormattedOutput()"
    ],
    "javax.swing.jtextarea.setrows": [
        "javax.swing.JTextArea.setRows(int)"
    ],
    "javax.xml.ws.binding.getbindingid": [
        "javax.xml.ws.Binding.getBindingID()"
    ],
    "javax.management.openmbean.openmbeaninfo.hashcode": [
        "javax.management.openmbean.OpenMBeanInfo.hashCode()"
    ],
    "javax.swing.text.glyphview.getstartoffset": [
        "javax.swing.text.GlyphView.getStartOffset()"
    ],
    "javax.imageio.imageio.getimagereadersbyformatname": [
        "javax.imageio.ImageIO.getImageReadersByFormatName(java.lang.String)"
    ],
    "javax.swing.jlayer.ispaintingorigin": [
        "javax.swing.JLayer.isPaintingOrigin()"
    ],
    "java.nio.file.files.getfilestore": [
        "java.nio.file.Files.getFileStore(java.nio.file.Path)"
    ],
    "java.sql.databasemetadata.getcolumns": [
        "java.sql.DatabaseMetaData.getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
    ],
    "javax.swing.plaf.multi.multitooltipui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiToolTipUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "javax.swing.defaultboundedrangemodel.getmaximum": [
        "javax.swing.DefaultBoundedRangeModel.getMaximum()"
    ],
    "javax.swing.table.abstracttablemodel.firetablecellupdated": [
        "javax.swing.table.AbstractTableModel.fireTableCellUpdated(int,int)"
    ],
    "javax.naming.ldap.rdn.size": [
        "javax.naming.ldap.Rdn.size()"
    ],
    "javax.lang.model.util.elementkindvisitor6.visitexecutableasinstanceinit": [
        "javax.lang.model.util.ElementKindVisitor6.visitExecutableAsInstanceInit(javax.lang.model.element.ExecutableElement,javax.lang.model.util.ElementKindVisitor6)"
    ],
    "javax.lang.model.element.element.accept": [
        "javax.lang.model.element.Element.accept(,P>,P)"
    ],
    "java.util.concurrent.concurrenthashmap.foreachkey": [
        "java.util.concurrent.ConcurrentHashMap.forEachKey(long,java.util.function.Function<? super,? extends U>,java.util.function.Consumer<? super U>)",
        "java.util.concurrent.ConcurrentHashMap.forEachKey(long,java.util.function.Consumer<? super K>)",
        "java.util.concurrent.ConcurrentHashMap.forEachKey(long,java.util.function.Consumer<? super java.util.concurrent.ConcurrentHashMap>)"
    ],
    "javax.imageio.metadata.iiometadatanode.insertbefore": [
        "javax.imageio.metadata.IIOMetadataNode.insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)"
    ],
    "javax.management.mbeanserver.getclassloaderrepository": [
        "javax.management.MBeanServer.getClassLoaderRepository()"
    ],
    "java.lang.double.bytevalue": [
        "java.lang.Double.byteValue()"
    ],
    "javax.naming.ldap.ldapname.add": [
        "javax.naming.ldap.LdapName.add(javax.naming.ldap.Rdn)",
        "javax.naming.ldap.LdapName.add(int,java.lang.String)",
        "javax.naming.ldap.LdapName.add(java.lang.String)",
        "javax.naming.ldap.LdapName.add(int,javax.naming.ldap.Rdn)"
    ],
    "javax.script.invocable.invokemethod": [
        "javax.script.Invocable.invokeMethod(java.lang.Object,java.lang.String,java.lang.Object...)"
    ],
    "java.io.streamtokenizer.resetsyntax": [
        "java.io.StreamTokenizer.resetSyntax()"
    ],
    "java.time.month.range": [
        "java.time.Month.range(java.time.temporal.TemporalField)"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.createarrowbutton": [
        "javax.swing.plaf.basic.BasicComboBoxUI.createArrowButton()"
    ],
    "java.nio.channels.membershipkey.networkinterface": [
        "java.nio.channels.MembershipKey.networkInterface()"
    ],
    "java.awt.image.bufferedimagefilter.setpixels": [
        "java.awt.image.BufferedImageFilter.setPixels(int,int,int,int,java.awt.image.ColorModel,int[],int,int)",
        "java.awt.image.BufferedImageFilter.setPixels(int,int,int,int,java.awt.image.ColorModel,byte[],int,int)"
    ],
    "java.time.zoneddatetime.plusnanos": [
        "java.time.ZonedDateTime.plusNanos(long)"
    ],
    "java.awt.textcomponent.getselectionstart": [
        "java.awt.TextComponent.getSelectionStart()"
    ],
    "javax.lang.model.util.elementscanner6.scan": [
        "javax.lang.model.util.ElementScanner6.scan(javax.lang.model.element.Element,javax.lang.model.util.ElementScanner6)"
    ],
    "java.util.observable.deleteobservers": [
        "java.util.Observable.deleteObservers()"
    ],
    "java.awt.image.bufferedimage.getpropertynames": [
        "java.awt.image.BufferedImage.getPropertyNames()"
    ],
    "javax.print.attribute.standard.jobmediasheetssupported.getname": [
        "javax.print.attribute.standard.JobMediaSheetsSupported.getName()"
    ],
    "java.time.zoneddatetime.tolocaltime": [
        "java.time.ZonedDateTime.toLocalTime()"
    ],
    "org.omg.corba.request.arguments": [
        "org.omg.CORBA.Request.arguments()"
    ],
    "java.util.concurrent.blockingqueue.offer": [
        "java.util.concurrent.BlockingQueue.offer(java.util.concurrent.BlockingQueue,long,java.util.concurrent.TimeUnit)",
        "java.util.concurrent.BlockingQueue.offer(E,long,java.util.concurrent.TimeUnit)",
        "java.util.concurrent.BlockingQueue.offer(java.util.concurrent.BlockingQueue)",
        "java.util.concurrent.BlockingQueue.offer(E)"
    ],
    "java.sql.resultset.getnclob": [
        "java.sql.ResultSet.getNClob(int)",
        "java.sql.ResultSet.getNClob(java.lang.String)"
    ],
    "java.sql.driver.getparentlogger": [
        "java.sql.Driver.getParentLogger()"
    ],
    "javax.swing.jtree.starteditingatpath": [
        "javax.swing.JTree.startEditingAtPath(javax.swing.tree.TreePath)"
    ],
    "javax.sound.sampled.audiosystem.getline": [
        "javax.sound.sampled.AudioSystem.getLine(javax.sound.sampled.Line.Info)"
    ],
    "java.awt.geom.area.isempty": [
        "java.awt.geom.Area.isEmpty()"
    ],
    "java.awt.menu.removeall": [
        "java.awt.Menu.removeAll()"
    ],
    "javax.xml.soap.soapfault.appendfaultsubcode": [
        "javax.xml.soap.SOAPFault.appendFaultSubcode(javax.xml.namespace.QName)"
    ],
    "java.applet.appletcontext.getimage": [
        "java.applet.AppletContext.getImage(java.net.URL)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getprimarycontrolshadow": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlShadow()"
    ],
    "javax.swing.boundedrangemodel.addchangelistener": [
        "javax.swing.BoundedRangeModel.addChangeListener(javax.swing.event.ChangeListener)"
    ],
    "org.omg.corba.portable.objectimpl._release": [
        "org.omg.CORBA.portable.ObjectImpl._release()"
    ],
    "java.util.function.consumer.andthen": [
        "java.util.function.Consumer.andThen(java.util.function.Consumer<? super T>)",
        "java.util.function.Consumer.andThen(java.util.function.Consumer<? super java.util.function.Consumer>)"
    ],
    "java.lang.reflect.parameter.hashcode": [
        "java.lang.reflect.Parameter.hashCode()"
    ],
    "javax.xml.crypto.dsig.signatureproperties.getproperties": [
        "javax.xml.crypto.dsig.SignatureProperties.getProperties()"
    ],
    "javax.rmi.corba.stubdelegate.writeobject": [
        "javax.rmi.CORBA.StubDelegate.writeObject(javax.rmi.CORBA.Stub,java.io.ObjectOutputStream)"
    ],
    "java.awt.im.inputmethodrequests.gettextlocation": [
        "java.awt.im.InputMethodRequests.getTextLocation(java.awt.font.TextHitInfo)"
    ],
    "java.util.spliterators.abstractdoublespliterator.estimatesize": [
        "java.util.Spliterators.AbstractDoubleSpliterator.estimateSize()"
    ],
    "javax.swing.plaf.basic.basictoolbarui.getrolloverborder": [
        "javax.swing.plaf.basic.BasicToolBarUI.getRolloverBorder(javax.swing.AbstractButton)"
    ],
    "javax.xml.crypto.dsig.xmlsignature.getid": [
        "javax.xml.crypto.dsig.XMLSignature.getId()"
    ],
    "javax.swing.jtooltip.getaccessiblecontext": [
        "javax.swing.JToolTip.getAccessibleContext()"
    ],
    "javax.management.relation.relationnotification.getrelationid": [
        "javax.management.relation.RelationNotification.getRelationId()"
    ],
    "org.omg.dynamicany._dynunionstub.set_to_no_active_member": [
        "org.omg.DynamicAny._DynUnionStub.set_to_no_active_member()"
    ],
    "org.omg.dynamicany._dynanystub.get_octet": [
        "org.omg.DynamicAny._DynAnyStub.get_octet()"
    ],
    "javax.swing.plaf.synth.synthcolorchooserui.createui": [
        "javax.swing.plaf.synth.SynthColorChooserUI.createUI(javax.swing.JComponent)"
    ],
    "java.awt.image.imageconsumer.setproperties": [
        "java.awt.image.ImageConsumer.setProperties(,?>)"
    ],
    "javax.swing.overlaylayout.invalidatelayout": [
        "javax.swing.OverlayLayout.invalidateLayout(java.awt.Container)"
    ],
    "org.omg.corba.portable.inputstream.read_wchar": [
        "org.omg.CORBA.portable.InputStream.read_wchar()"
    ],
    "javax.swing.text.html.minimalhtmlwriter.text": [
        "javax.swing.text.html.MinimalHTMLWriter.text(javax.swing.text.Element)"
    ],
    "javax.accessibility.accessiblecontext.removepropertychangelistener": [
        "javax.accessibility.AccessibleContext.removePropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "javax.swing.table.tablecolumn.setidentifier": [
        "javax.swing.table.TableColumn.setIdentifier(java.lang.Object)"
    ],
    "java.awt.keyboardfocusmanager.setglobalfocusowner": [
        "java.awt.KeyboardFocusManager.setGlobalFocusOwner(java.awt.Component)"
    ],
    "javax.swing.plaf.multi.multitabbedpaneui.tabforcoordinate": [
        "javax.swing.plaf.multi.MultiTabbedPaneUI.tabForCoordinate(javax.swing.JTabbedPane,int,int)"
    ],
    "javax.swing.text.utilities.getnextword": [
        "javax.swing.text.Utilities.getNextWord(javax.swing.text.JTextComponent,int)"
    ],
    "javax.imageio.metadata.iiometadatanode.getnodetype": [
        "javax.imageio.metadata.IIOMetadataNode.getNodeType()"
    ],
    "java.lang.securitymanager.checksecurityaccess": [
        "java.lang.SecurityManager.checkSecurityAccess(java.lang.String)"
    ],
    "javax.security.auth.x500.x500principal.equals": [
        "javax.security.auth.x500.X500Principal.equals(java.lang.Object)"
    ],
    "javax.xml.transform.transformerexception.getcause": [
        "javax.xml.transform.TransformerException.getCause()"
    ],
    "java.awt.toolkit.getpropertychangelisteners": [
        "java.awt.Toolkit.getPropertyChangeListeners()",
        "java.awt.Toolkit.getPropertyChangeListeners(java.lang.String)"
    ],
    "javax.swing.event.documentevent.getlength": [
        "javax.swing.event.DocumentEvent.getLength()"
    ],
    "java.io.file.getpath": [
        "java.io.File.getPath()"
    ],
    "javax.swing.event.treeselectionevent.getpath": [
        "javax.swing.event.TreeSelectionEvent.getPath()"
    ],
    "javax.swing.defaultlistmodel.capacity": [
        "javax.swing.DefaultListModel.capacity()"
    ],
    "javax.swing.defaultboundedrangemodel.getlisteners": [
        "javax.swing.DefaultBoundedRangeModel.getListeners(java.lang.Class<T>)"
    ],
    "java.lang.securitymanager.checklink": [
        "java.lang.SecurityManager.checkLink(java.lang.String)"
    ],
    "javax.lang.model.type.declaredtype.getenclosingtype": [
        "javax.lang.model.type.DeclaredType.getEnclosingType()"
    ],
    "javax.swing.transferhandler.exporttoclipboard": [
        "javax.swing.TransferHandler.exportToClipboard(javax.swing.JComponent,java.awt.datatransfer.Clipboard,int)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getcontrolhighlight": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getControlHighlight()"
    ],
    "javax.swing.tree.defaulttreecellrenderer.settextnonselectioncolor": [
        "javax.swing.tree.DefaultTreeCellRenderer.setTextNonSelectionColor(java.awt.Color)"
    ],
    "java.awt.geom.affinetransform.createtransformedshape": [
        "java.awt.geom.AffineTransform.createTransformedShape(java.awt.Shape)"
    ],
    "javax.naming.ldap.extendedresponse.getencodedvalue": [
        "javax.naming.ldap.ExtendedResponse.getEncodedValue()"
    ],
    "java.awt.fontmetrics.byteswidth": [
        "java.awt.FontMetrics.bytesWidth(byte[],int,int)"
    ],
    "java.rmi.activation.activationsystem.activegroup": [
        "java.rmi.activation.ActivationSystem.activeGroup(java.rmi.activation.ActivationGroupID,java.rmi.activation.ActivationInstantiator,long)"
    ],
    "javax.swing.jdesktoppane.getuiclassid": [
        "javax.swing.JDesktopPane.getUIClassID()"
    ],
    "javax.swing.table.defaulttablemodel.setvalueat": [
        "javax.swing.table.DefaultTableModel.setValueAt(java.lang.Object,int,int)"
    ],
    "java.lang.integer.bitcount": [
        "java.lang.Integer.bitCount(int)"
    ],
    "org.omg.portableinterceptor.serverrequestinterceptoroperations.send_reply": [
        "org.omg.PortableInterceptor.ServerRequestInterceptorOperations.send_reply(org.omg.PortableInterceptor.ServerRequestInfo)"
    ],
    "java.time.localtime.getsecond": [
        "java.time.LocalTime.getSecond()"
    ],
    "java.util.spi.localenameprovider.getdisplaylanguage": [
        "java.util.spi.LocaleNameProvider.getDisplayLanguage(java.lang.String,java.util.Locale)"
    ],
    "java.util.function.bipredicate.negate": [
        "java.util.function.BiPredicate.negate()"
    ],
    "javax.sql.rowset.serial.serialarray.equals": [
        "javax.sql.rowset.serial.SerialArray.equals(java.lang.Object)"
    ],
    "javax.lang.model.util.simpletypevisitor6.visitdeclared": [
        "javax.lang.model.util.SimpleTypeVisitor6.visitDeclared(javax.lang.model.type.DeclaredType,javax.lang.model.util.SimpleTypeVisitor6)"
    ],
    "javax.swing.jsplitpane.setcontinuouslayout": [
        "javax.swing.JSplitPane.setContinuousLayout(boolean)"
    ],
    "java.beans.beancontext.beancontext.instantiatechild": [
        "java.beans.beancontext.BeanContext.instantiateChild(java.lang.String)"
    ],
    "javax.swing.plaf.basic.basictreeui.createtreeexpansionlistener": [
        "javax.swing.plaf.basic.BasicTreeUI.createTreeExpansionListener()"
    ],
    "javax.sound.sampled.floatcontrol.getprecision": [
        "javax.sound.sampled.FloatControl.getPrecision()"
    ],
    "javax.swing.jcombobox.getmaximumrowcount": [
        "javax.swing.JComboBox.getMaximumRowCount()"
    ],
    "javax.management.relation.relationservicembean.getrolecardinality": [
        "javax.management.relation.RelationServiceMBean.getRoleCardinality(java.lang.String,java.lang.String)"
    ],
    "javax.sound.sampled.audioinputstream.marksupported": [
        "javax.sound.sampled.AudioInputStream.markSupported()"
    ],
    "javax.sound.sampled.dataline.info.getmaxbuffersize": [
        "javax.sound.sampled.DataLine.Info.getMaxBufferSize()"
    ],
    "java.awt.gridbaglayout.getlayoutorigin": [
        "java.awt.GridBagLayout.getLayoutOrigin()"
    ],
    "org.omg.corba.any.extract_wstring": [
        "org.omg.CORBA.Any.extract_wstring()"
    ],
    "javax.swing.undo.stateedit.undo": [
        "javax.swing.undo.StateEdit.undo()"
    ],
    "java.sql.databasemetadata.getfunctions": [
        "java.sql.DatabaseMetaData.getFunctions(java.lang.String,java.lang.String,java.lang.String)"
    ],
    "java.util.concurrent.concurrentskiplistmap.lowerkey": [
        "java.util.concurrent.ConcurrentSkipListMap.lowerKey(K)"
    ],
    "java.awt.graphics.drawpolygon": [
        "java.awt.Graphics.drawPolygon(int[],int[],int)",
        "java.awt.Graphics.drawPolygon(java.awt.Polygon)"
    ],
    "java.time.offsettime.getminute": [
        "java.time.OffsetTime.getMinute()"
    ],
    "java.rmi.dgc.dgc.dirty": [
        "java.rmi.dgc.DGC.dirty(java.rmi.server.ObjID[],long,java.rmi.dgc.Lease)"
    ],
    "javax.swing.jcomponent.setdefaultlocale": [
        "javax.swing.JComponent.setDefaultLocale(java.util.Locale)"
    ],
    "java.io.linenumberreader.reset": [
        "java.io.LineNumberReader.reset()"
    ],
    "java.awt.im.spi.inputmethod.endcomposition": [
        "java.awt.im.spi.InputMethod.endComposition()"
    ],
    "java.awt.dnd.droptarget.setdefaultactions": [
        "java.awt.dnd.DropTarget.setDefaultActions(int)"
    ],
    "javax.security.auth.spi.loginmodule.logout": [
        "javax.security.auth.spi.LoginModule.logout()"
    ],
    "java.time.localtime.ofsecondofday": [
        "java.time.LocalTime.ofSecondOfDay(long)"
    ],
    "java.util.formatter.format": [
        "java.util.Formatter.format(java.util.Locale,java.lang.String,java.lang.Object...)",
        "java.util.Formatter.format(java.lang.String,java.lang.Object...)",
        "java.util.Formatter.format(java.lang.String,java.lang.Object)",
        "java.util.Formatter.format(java.util.Locale,java.lang.String,java.lang.Object)"
    ],
    "javax.swing.plaf.basic.basiccombopopup.getpopupheightforrowcount": [
        "javax.swing.plaf.basic.BasicComboPopup.getPopupHeightForRowCount(int)"
    ],
    "javax.xml.bind.datatypeconverter.printint": [
        "javax.xml.bind.DatatypeConverter.printInt(int)"
    ],
    "java.nio.charset.illegalcharsetnameexception.getcharsetname": [
        "java.nio.charset.IllegalCharsetNameException.getCharsetName()"
    ],
    "java.util.concurrent.forkjoinpool.getuncaughtexceptionhandler": [
        "java.util.concurrent.ForkJoinPool.getUncaughtExceptionHandler()"
    ],
    "javax.swing.text.jtextcomponent.droplocation.getbias": [
        "javax.swing.text.JTextComponent.DropLocation.getBias()"
    ],
    "org.xml.sax.helpers.namespacesupport.getdeclaredprefixes": [
        "org.xml.sax.helpers.NamespaceSupport.getDeclaredPrefixes()"
    ],
    "javax.sound.sampled.dataline.info.getminbuffersize": [
        "javax.sound.sampled.DataLine.Info.getMinBufferSize()"
    ],
    "org.omg.corba.portable.outputstream.write_wstring": [
        "org.omg.CORBA.portable.OutputStream.write_wstring(java.lang.String)"
    ],
    "java.security.interfaces.eckey.getparams": [
        "java.security.interfaces.ECKey.getParams()"
    ],
    "javax.sql.rowset.serial.serialclob.getasciistream": [
        "javax.sql.rowset.serial.SerialClob.getAsciiStream()"
    ],
    "javax.naming.spi.resolveresult.appendremainingname": [
        "javax.naming.spi.ResolveResult.appendRemainingName(javax.naming.Name)"
    ],
    "java.lang.processbuilder.redirect.to": [
        "java.lang.ProcessBuilder.Redirect.to(java.io.File)"
    ],
    "java.sql.resultset.updatearray": [
        "java.sql.ResultSet.updateArray(int,java.sql.Array)",
        "java.sql.ResultSet.updateArray(java.lang.String,java.sql.Array)"
    ],
    "java.util.sortedmap.headmap": [
        "java.util.SortedMap.headMap(java.util.SortedMap)",
        "java.util.SortedMap.headMap(K)"
    ],
    "java.util.concurrent.atomic.longadder.floatvalue": [
        "java.util.concurrent.atomic.LongAdder.floatValue()"
    ],
    "javax.swing.text.html.minimalhtmlwriter.writecomponent": [
        "javax.swing.text.html.MinimalHTMLWriter.writeComponent(javax.swing.text.Element)"
    ],
    "java.net.socket.getport": [
        "java.net.Socket.getPort()"
    ],
    "javax.swing.text.html.blockview.setpropertiesfromattributes": [
        "javax.swing.text.html.BlockView.setPropertiesFromAttributes()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintformattedtextfieldborder": [
        "javax.swing.plaf.synth.SynthPainter.paintFormattedTextFieldBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.io.randomaccessfile.writeutf": [
        "java.io.RandomAccessFile.writeUTF(java.lang.String)"
    ],
    "java.time.year.atmonth": [
        "java.time.Year.atMonth(java.time.Month)",
        "java.time.Year.atMonth(int)"
    ],
    "java.net.urlconnection.setreadtimeout": [
        "java.net.URLConnection.setReadTimeout(int)"
    ],
    "javax.swing.sizesequence.getindex": [
        "javax.swing.SizeSequence.getIndex(int)"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.getminimumsize": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "java.security.cert.x509crlselector.getdateandtime": [
        "java.security.cert.X509CRLSelector.getDateAndTime()"
    ],
    "java.lang.system.gc": [
        "java.lang.System.gc()"
    ],
    "java.nio.doublebuffer.wrap": [
        "java.nio.DoubleBuffer.wrap(double[])",
        "java.nio.DoubleBuffer.wrap(double[],int,int)"
    ],
    "javax.activation.mimetype.getsubtype": [
        "javax.activation.MimeType.getSubType()"
    ],
    "javax.xml.parsers.documentbuilderfactory.setschema": [
        "javax.xml.parsers.DocumentBuilderFactory.setSchema(javax.xml.validation.Schema)"
    ],
    "java.lang.classnotfoundexception.getexception": [
        "java.lang.ClassNotFoundException.getException()"
    ],
    "javax.security.auth.kerberos.kerberosticket.isdestroyed": [
        "javax.security.auth.kerberos.KerberosTicket.isDestroyed()"
    ],
    "org.omg.dynamicany._dynanystub.destroy": [
        "org.omg.DynamicAny._DynAnyStub.destroy()"
    ],
    "java.util.stream.collectors.reducing": [
        "java.util.stream.Collectors.reducing(java.util.function.BinaryOperator<T>)",
        "java.util.stream.Collectors.reducing(U,java.util.function.Function<? super,? extends U>,java.util.function.BinaryOperator<U>)",
        "java.util.stream.Collectors.reducing(T,java.util.function.BinaryOperator<T>)"
    ],
    "javax.sound.midi.metamessage.gettype": [
        "javax.sound.midi.MetaMessage.getType()"
    ],
    "javax.swing.scrollpanelayout.gethorizontalscrollbarpolicy": [
        "javax.swing.ScrollPaneLayout.getHorizontalScrollBarPolicy()"
    ],
    "javax.swing.defaultcelleditor.gettablecelleditorcomponent": [
        "javax.swing.DefaultCellEditor.getTableCellEditorComponent(javax.swing.JTable,java.lang.Object,boolean,int,int)"
    ],
    "javax.swing.borderfactory.creatematteborder": [
        "javax.swing.BorderFactory.createMatteBorder(int,int,int,int,javax.swing.Icon)",
        "javax.swing.BorderFactory.createMatteBorder(int,int,int,int,java.awt.Color)"
    ],
    "javax.swing.plaf.multi.multitreeui.getrowforpath": [
        "javax.swing.plaf.multi.MultiTreeUI.getRowForPath(javax.swing.JTree,javax.swing.tree.TreePath)"
    ],
    "javax.sound.sampled.clip.getframelength": [
        "javax.sound.sampled.Clip.getFrameLength()"
    ],
    "java.time.chrono.hijrahdate.getera": [
        "java.time.chrono.HijrahDate.getEra()"
    ],
    "javax.swing.jformattedtextfield.setformatterfactory": [
        "javax.swing.JFormattedTextField.setFormatterFactory(javax.swing.JFormattedTextField.AbstractFormatterFactory)"
    ],
    "java.time.yearmonth.plusyears": [
        "java.time.YearMonth.plusYears(long)"
    ],
    "javax.sound.midi.sequence.getmicrosecondlength": [
        "javax.sound.midi.Sequence.getMicrosecondLength()"
    ],
    "java.util.function.longfunction.apply": [
        "java.util.function.LongFunction.apply(long)"
    ],
    "java.awt.toolkit.createtextarea": [
        "java.awt.Toolkit.createTextArea(java.awt.TextArea)"
    ],
    "java.sql.array.free": [
        "java.sql.Array.free()"
    ],
    "java.time.chrono.thaibuddhistchronology.dateyearday": [
        "java.time.chrono.ThaiBuddhistChronology.dateYearDay(java.time.chrono.Era,int,int)",
        "java.time.chrono.ThaiBuddhistChronology.dateYearDay(int,int)"
    ],
    "java.lang.string.contentequals": [
        "java.lang.String.contentEquals(java.lang.CharSequence)",
        "java.lang.String.contentEquals(java.lang.StringBuffer)"
    ],
    "java.nio.channels.socketchannel.open": [
        "java.nio.channels.SocketChannel.open()",
        "java.nio.channels.SocketChannel.open(java.net.SocketAddress)"
    ],
    "javax.security.auth.callback.textinputcallback.gettext": [
        "javax.security.auth.callback.TextInputCallback.getText()"
    ],
    "java.sql.databasemetadata.gettableprivileges": [
        "java.sql.DatabaseMetaData.getTablePrivileges(java.lang.String,java.lang.String,java.lang.String)"
    ],
    "java.lang.processbuilder.command": [
        "java.lang.ProcessBuilder.command(java.lang.String)",
        "java.lang.ProcessBuilder.command(java.util.List<java.lang.String>)",
        "java.lang.ProcessBuilder.command()",
        "java.lang.ProcessBuilder.command(java.lang.String...)"
    ],
    "java.awt.window.removewindowfocuslistener": [
        "java.awt.Window.removeWindowFocusListener(java.awt.event.WindowFocusListener)"
    ],
    "java.awt.image.getscaledinstance": [
        "java.awt.Image.getScaledInstance(int,int,int)"
    ],
    "javax.sound.midi.mididevice.getdeviceinfo": [
        "javax.sound.midi.MidiDevice.getDeviceInfo()"
    ],
    "javax.crypto.cipher.wrap": [
        "javax.crypto.Cipher.wrap(java.security.Key)"
    ],
    "java.awt.keyboardfocusmanager.postprocesskeyevent": [
        "java.awt.KeyboardFocusManager.postProcessKeyEvent(java.awt.event.KeyEvent)"
    ],
    "javax.imageio.imagereadparam.getsourcenumprogressivepasses": [
        "javax.imageio.ImageReadParam.getSourceNumProgressivePasses()"
    ],
    "java.lang.long.bitcount": [
        "java.lang.Long.bitCount(long)"
    ],
    "javax.swing.jtree.getdragenabled": [
        "javax.swing.JTree.getDragEnabled()"
    ],
    "javax.swing.plaf.multi.multilookandfeel.getdefaults": [
        "javax.swing.plaf.multi.MultiLookAndFeel.getDefaults()"
    ],
    "java.util.stream.collectors.tomap": [
        "java.util.stream.Collectors.toMap(java.util.function.Function<? super,? extends K>,java.util.function.Function<? super,? extends U>)",
        "java.util.stream.Collectors.toMap(java.util.function.Function<? super,? extends K>,java.util.function.Function<? super,? extends U>,java.util.function.BinaryOperator<U>)",
        "java.util.stream.Collectors.toMap(java.util.function.Function<? super,? extends K>,java.util.function.Function<? super,? extends U>,java.util.function.BinaryOperator<U>,java.util.function.Supplier<M>)"
    ],
    "java.awt.font.opentype.getfonttablesize": [
        "java.awt.font.OpenType.getFontTableSize(int)",
        "java.awt.font.OpenType.getFontTableSize(java.lang.String)"
    ],
    "org.omg.dynamicany._dynenumstub.get_double": [
        "org.omg.DynamicAny._DynEnumStub.get_double()"
    ],
    "java.sql.resultset.getmetadata": [
        "java.sql.ResultSet.getMetaData()"
    ],
    "java.lang.reflect.member.getname": [
        "java.lang.reflect.Member.getName()"
    ],
    "javax.swing.undo.compoundedit.die": [
        "javax.swing.undo.CompoundEdit.die()"
    ],
    "javax.swing.abstractbutton.setrolloverselectedicon": [
        "javax.swing.AbstractButton.setRolloverSelectedIcon(javax.swing.Icon)"
    ],
    "java.lang.management.memoryusage.from": [
        "java.lang.management.MemoryUsage.from(javax.management.openmbean.CompositeData)"
    ],
    "javax.crypto.macspi.enginedofinal": [
        "javax.crypto.MacSpi.engineDoFinal()"
    ],
    "org.omg.corba.orb.create_any": [
        "org.omg.CORBA.ORB.create_any()"
    ],
    "javax.swing.plaf.multi.multitabbedpaneui.getminimumsize": [
        "javax.swing.plaf.multi.MultiTabbedPaneUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "org.omg.corba.valuebaseholder._type": [
        "org.omg.CORBA.ValueBaseHolder._type()"
    ],
    "java.text.spi.collatorprovider.getinstance": [
        "java.text.spi.CollatorProvider.getInstance(java.util.Locale)"
    ],
    "javax.xml.stream.xmlstreamreader.getlocation": [
        "javax.xml.stream.XMLStreamReader.getLocation()"
    ],
    "javax.swing.text.abstractdocument.getattributecontext": [
        "javax.swing.text.AbstractDocument.getAttributeContext()"
    ],
    "org.omg.corba.context.get_values": [
        "org.omg.CORBA.Context.get_values(java.lang.String,int,java.lang.String)"
    ],
    "java.sql.connection.abort": [
        "java.sql.Connection.abort(java.util.concurrent.Executor)"
    ],
    "javax.management.monitor.monitormbean.stop": [
        "javax.management.monitor.MonitorMBean.stop()"
    ],
    "org.omg.corba.doubleholder._write": [
        "org.omg.CORBA.DoubleHolder._write(org.omg.CORBA.portable.OutputStream)"
    ],
    "java.net.url.getfile": [
        "java.net.URL.getFile()"
    ],
    "java.lang.threadgroup.setmaxpriority": [
        "java.lang.ThreadGroup.setMaxPriority(int)"
    ],
    "javax.swing.defaultlistselectionmodel.clearselection": [
        "javax.swing.DefaultListSelectionModel.clearSelection()"
    ],
    "java.util.arrays.binarysearch": [
        "java.util.Arrays.binarySearch(java.lang.Object,java.lang.Object)",
        "java.util.Arrays.binarySearch(long[],int,int,long)",
        "java.util.Arrays.binarySearch(int[],int)",
        "java.util.Arrays.binarySearch(float[],int,int,float)",
        "java.util.Arrays.binarySearch(float[],float)",
        "java.util.Arrays.binarySearch(byte[],int,int,byte)",
        "java.util.Arrays.binarySearch(short[],short)",
        "java.util.Arrays.binarySearch(char[],char)",
        "java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)",
        "java.util.Arrays.binarySearch(T[],int,int,T,java.util.Comparator<? super T>)",
        "java.util.Arrays.binarySearch(java.lang.Object[],int,int,java.lang.Object)",
        "java.util.Arrays.binarySearch(double[],int,int,double)",
        "java.util.Arrays.binarySearch(byte[],byte)",
        "java.util.Arrays.binarySearch(double[],double)",
        "java.util.Arrays.binarySearch(char[],int,int,char)",
        "java.util.Arrays.binarySearch(int[],int,int,int)",
        "java.util.Arrays.binarySearch(java.lang.Object,int,int,java.lang.Object)",
        "java.util.Arrays.binarySearch(T[],T,java.util.Comparator<? super T>)",
        "java.util.Arrays.binarySearch(long[],long)",
        "java.util.Arrays.binarySearch(short[],int,int,short)"
    ],
    "java.nio.charset.coderresult.throwexception": [
        "java.nio.charset.CoderResult.throwException()"
    ],
    "java.util.concurrent.runnablefuture.run": [
        "java.util.concurrent.RunnableFuture.run()"
    ],
    "java.util.concurrent.concurrentskiplistmap.size": [
        "java.util.concurrent.ConcurrentSkipListMap.size()"
    ],
    "java.util.concurrent.forkjointask.cancel": [
        "java.util.concurrent.ForkJoinTask.cancel(boolean)"
    ],
    "javax.security.sasl.authorizecallback.getauthorizationid": [
        "javax.security.sasl.AuthorizeCallback.getAuthorizationID()"
    ],
    "javax.swing.jslider.getminimum": [
        "javax.swing.JSlider.getMinimum()"
    ],
    "javax.swing.swingutilities.getunwrappedparent": [
        "javax.swing.SwingUtilities.getUnwrappedParent(java.awt.Component)"
    ],
    "java.awt.image.componentsamplemodel.getpixelstride": [
        "java.awt.image.ComponentSampleModel.getPixelStride()"
    ],
    "java.sql.resultsetmetadata.getcolumnname": [
        "java.sql.ResultSetMetaData.getColumnName(int)"
    ],
    "java.nio.charset.charsetdecoder.replacewith": [
        "java.nio.charset.CharsetDecoder.replaceWith(java.lang.String)"
    ],
    "java.nio.file.attribute.dosfileattributeview.name": [
        "java.nio.file.attribute.DosFileAttributeView.name()"
    ],
    "java.lang.management.platformmanagedobject.getobjectname": [
        "java.lang.management.PlatformManagedObject.getObjectName()"
    ],
    "org.omg.corba.request.add_named_in_arg": [
        "org.omg.CORBA.Request.add_named_in_arg(java.lang.String)"
    ],
    "javax.swing.plaf.nimbus.nimbuslookandfeel.getderivedcolor": [
        "javax.swing.plaf.nimbus.NimbusLookAndFeel.getDerivedColor(java.awt.Color,java.awt.Color,float)",
        "javax.swing.plaf.nimbus.NimbusLookAndFeel.getDerivedColor(java.awt.Color,java.awt.Color,float,boolean)",
        "javax.swing.plaf.nimbus.NimbusLookAndFeel.getDerivedColor(java.lang.String,float,float,float,int,boolean)"
    ],
    "javax.swing.abstractcelleditor.fireeditingcanceled": [
        "javax.swing.AbstractCellEditor.fireEditingCanceled()"
    ],
    "javax.lang.model.element.name.hashcode": [
        "javax.lang.model.element.Name.hashCode()"
    ],
    "javax.swing.swingworker.cancel": [
        "javax.swing.SwingWorker.cancel(boolean)"
    ],
    "java.lang.stringbuilder.replace": [
        "java.lang.StringBuilder.replace(int,int,java.lang.String)"
    ],
    "javax.net.ssl.snimatcher.gettype": [
        "javax.net.ssl.SNIMatcher.getType()"
    ],
    "java.text.bidi.getrunstart": [
        "java.text.Bidi.getRunStart(int)"
    ],
    "java.awt.geom.arc2d.double.getwidth": [
        "java.awt.geom.Arc2D.Double.getWidth()"
    ],
    "java.util.stream.longstream.flatmap": [
        "java.util.stream.LongStream.flatMap(java.util.function.LongFunction<? extends java.util.stream.LongStream>)"
    ],
    "javax.management.relation.roleunresolvedlist.add": [
        "javax.management.relation.RoleUnresolvedList.add(int,javax.management.relation.RoleUnresolved)",
        "javax.management.relation.RoleUnresolvedList.add(javax.management.relation.RoleUnresolved)"
    ],
    "java.io.objectoutput.write": [
        "java.io.ObjectOutput.write(byte[])",
        "java.io.ObjectOutput.write(int)",
        "java.io.ObjectOutput.write(byte[],int,int)"
    ],
    "java.beans.propertychangesupport.addpropertychangelistener": [
        "java.beans.PropertyChangeSupport.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",
        "java.beans.PropertyChangeSupport.addPropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "org.omg.portableinterceptor.requestinfooperations.contexts": [
        "org.omg.PortableInterceptor.RequestInfoOperations.contexts()"
    ],
    "java.awt.geom.quadcurve2d.float.getctrlpt": [
        "java.awt.geom.QuadCurve2D.Float.getCtrlPt()"
    ],
    "java.awt.dnd.dragsourcecontext.dropactionchanged": [
        "java.awt.dnd.DragSourceContext.dropActionChanged(java.awt.dnd.DragSourceDragEvent)"
    ],
    "javax.swing.jmenubar.getcomponentindex": [
        "javax.swing.JMenuBar.getComponentIndex(java.awt.Component)"
    ],
    "javax.swing.plaf.synth.synthgraphicsutils.getpreferredsize": [
        "javax.swing.plaf.synth.SynthGraphicsUtils.getPreferredSize(javax.swing.plaf.synth.SynthContext,java.awt.Font,java.lang.String,javax.swing.Icon,int,int,int,int,int,int)"
    ],
    "java.security.messagedigest.update": [
        "java.security.MessageDigest.update(byte[])",
        "java.security.MessageDigest.update(java.nio.ByteBuffer)",
        "java.security.MessageDigest.update(byte)",
        "java.security.MessageDigest.update(byte[],int,int)"
    ],
    "java.util.concurrent.locks.lock.lockinterruptibly": [
        "java.util.concurrent.locks.Lock.lockInterruptibly()"
    ],
    "java.awt.list.getlisteners": [
        "java.awt.List.getListeners(java.lang.Class<T>)"
    ],
    "java.util.formatter.out": [
        "java.util.Formatter.out()"
    ],
    "java.awt.image.directcolormodel.getalpha": [
        "java.awt.image.DirectColorModel.getAlpha(int)",
        "java.awt.image.DirectColorModel.getAlpha(java.lang.Object)"
    ],
    "java.lang.byte.equals": [
        "java.lang.Byte.equals(java.lang.Object)"
    ],
    "java.awt.pointerinfo.getdevice": [
        "java.awt.PointerInfo.getDevice()"
    ],
    "javax.swing.tree.rowmapper.getrowsforpaths": [
        "javax.swing.tree.RowMapper.getRowsForPaths(javax.swing.tree.TreePath[])"
    ],
    "java.awt.fontmetrics.charswidth": [
        "java.awt.FontMetrics.charsWidth(char[],int,int)"
    ],
    "org.ietf.jgss.gsscredential.hashcode": [
        "org.ietf.jgss.GSSCredential.hashCode()"
    ],
    "javax.swing.undo.stateeditable.restorestate": [
        "javax.swing.undo.StateEditable.restoreState(,?>)"
    ],
    "java.sql.callablestatement.getrowid": [
        "java.sql.CallableStatement.getRowId(int)",
        "java.sql.CallableStatement.getRowId(java.lang.String)"
    ],
    "javax.swing.plaf.multi.multibuttonui.installui": [
        "javax.swing.plaf.multi.MultiButtonUI.installUI(javax.swing.JComponent)"
    ],
    "org.omg.corba.intholder._read": [
        "org.omg.CORBA.IntHolder._read(org.omg.CORBA.portable.InputStream)"
    ],
    "java.lang.invoke.methodhandle.asvarargscollector": [
        "java.lang.invoke.MethodHandle.asVarargsCollector(java.lang.Class<?>)"
    ],
    "java.security.cert.pkixrevocationchecker.getocspresponses": [
        "java.security.cert.PKIXRevocationChecker.getOcspResponses()"
    ],
    "java.util.function.bipredicate.test": [
        "java.util.function.BiPredicate.test(T,U)",
        "java.util.function.BiPredicate.test(java.util.function.BiPredicate,java.util.function.BiPredicate)"
    ],
    "javax.swing.cellrendererpane.invalidate": [
        "javax.swing.CellRendererPane.invalidate()"
    ],
    "org.xml.sax.inputsource.setpublicid": [
        "org.xml.sax.InputSource.setPublicId(java.lang.String)"
    ],
    "java.util.concurrent.atomic.atomicreferencearray.set": [
        "java.util.concurrent.atomic.AtomicReferenceArray.set(int,E)",
        "java.util.concurrent.atomic.AtomicReferenceArray.set(int,java.util.concurrent.atomic.AtomicReferenceArray)"
    ],
    "java.awt.image.databuffer.getdatatype": [
        "java.awt.image.DataBuffer.getDataType()"
    ],
    "org.omg.dynamicany._dynstructstub.insert_val": [
        "org.omg.DynamicAny._DynStructStub.insert_val(java.io.Serializable)"
    ],
    "org.omg.dynamicany._dynunionstub.get_string": [
        "org.omg.DynamicAny._DynUnionStub.get_string()"
    ],
    "javax.management.relation.role.setrolevalue": [
        "javax.management.relation.Role.setRoleValue(java.util.List<javax.management.ObjectName>)"
    ],
    "javax.security.auth.callback.confirmationcallback.getselectedindex": [
        "javax.security.auth.callback.ConfirmationCallback.getSelectedIndex()"
    ],
    "javax.swing.jmenu.removemenulistener": [
        "javax.swing.JMenu.removeMenuListener(javax.swing.event.MenuListener)"
    ],
    "javax.swing.text.html.htmldocument.getiterator": [
        "javax.swing.text.html.HTMLDocument.getIterator(javax.swing.text.html.HTML.Tag)"
    ],
    "javax.swing.text.html.stylesheet.boxpainter.getinset": [
        "javax.swing.text.html.StyleSheet.BoxPainter.getInset(int,javax.swing.text.View)"
    ],
    "javax.swing.lookandfeel.makeinputmap": [
        "javax.swing.LookAndFeel.makeInputMap(java.lang.Object[])"
    ],
    "java.time.month.of": [
        "java.time.Month.of(int)"
    ],
    "java.sql.databasemetadata.getversioncolumns": [
        "java.sql.DatabaseMetaData.getVersionColumns(java.lang.String,java.lang.String,java.lang.String)"
    ],
    "javax.swing.text.html.parser.documentparser.handleendtag": [
        "javax.swing.text.html.parser.DocumentParser.handleEndTag(javax.swing.text.html.parser.TagElement)"
    ],
    "javax.swing.text.glyphview.glyphpainter.getboundedposition": [
        "javax.swing.text.GlyphView.GlyphPainter.getBoundedPosition(javax.swing.text.GlyphView,int,float,float)"
    ],
    "java.awt.multiplegradientpaint.cyclemethod.valueof": [
        "java.awt.MultipleGradientPaint.CycleMethod.valueOf(java.lang.String)"
    ],
    "java.util.stream.longstream.maptoobj": [
        "java.util.stream.LongStream.mapToObj(java.util.function.LongFunction<? extends U>)"
    ],
    "javax.swing.text.jtextcomponent.getpreferredscrollableviewportsize": [
        "javax.swing.text.JTextComponent.getPreferredScrollableViewportSize()"
    ],
    "java.util.hashmap.computeifpresent": [
        "java.util.HashMap.computeIfPresent(K,java.util.function.BiFunction<? super,? super,? extends V>)"
    ],
    "java.awt.geom.line2d.float.getp1": [
        "java.awt.geom.Line2D.Float.getP1()"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writesqlxml": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeSQLXML(java.sql.SQLXML)"
    ],
    "javax.rmi.ssl.sslrmiserversocketfactory.createserversocket": [
        "javax.rmi.ssl.SslRMIServerSocketFactory.createServerSocket(int)"
    ],
    "javax.print.docprintjob.addprintjobattributelistener": [
        "javax.print.DocPrintJob.addPrintJobAttributeListener(javax.print.event.PrintJobAttributeListener,javax.print.attribute.PrintJobAttributeSet)"
    ],
    "javax.print.attribute.standard.presentationdirection.getcategory": [
        "javax.print.attribute.standard.PresentationDirection.getCategory()"
    ],
    "java.awt.image.renderable.renderableimageop.getparameterblock": [
        "java.awt.image.renderable.RenderableImageOp.getParameterBlock()"
    ],
    "java.awt.component.getwidth": [
        "java.awt.Component.getWidth()"
    ],
    "javax.swing.viewportlayout.preferredlayoutsize": [
        "javax.swing.ViewportLayout.preferredLayoutSize(java.awt.Container)"
    ],
    "java.security.cert.certpathbuilder.build": [
        "java.security.cert.CertPathBuilder.build(java.security.cert.CertPathParameters)"
    ],
    "java.util.concurrent.atomic.atomicreference.lazyset": [
        "java.util.concurrent.atomic.AtomicReference.lazySet(V)",
        "java.util.concurrent.atomic.AtomicReference.lazySet(java.util.concurrent.atomic.AtomicReference)"
    ],
    "java.applet.applet.getimage": [
        "java.applet.Applet.getImage(java.net.URL)",
        "java.applet.Applet.getImage(java.net.URL,java.lang.String)"
    ],
    "org.ietf.jgss.channelbinding.getapplicationdata": [
        "org.ietf.jgss.ChannelBinding.getApplicationData()"
    ],
    "javax.management.openmbean.compositedata.get": [
        "javax.management.openmbean.CompositeData.get(java.lang.String)"
    ],
    "java.util.missingformatargumentexception.getformatspecifier": [
        "java.util.MissingFormatArgumentException.getFormatSpecifier()"
    ],
    "javax.management.remote.rmi.rmiserver.newclient": [
        "javax.management.remote.rmi.RMIServer.newClient(java.lang.Object)"
    ],
    "javax.swing.plaf.basic.basiclistui.updatelayoutstate": [
        "javax.swing.plaf.basic.BasicListUI.updateLayoutState()"
    ],
    "java.text.spi.dateformatsymbolsprovider.getinstance": [
        "java.text.spi.DateFormatSymbolsProvider.getInstance(java.util.Locale)"
    ],
    "java.awt.datatransfer.dataflavor.sethumanpresentablename": [
        "java.awt.datatransfer.DataFlavor.setHumanPresentableName(java.lang.String)"
    ],
    "javax.imageio.imagewriter.endinsertempty": [
        "javax.imageio.ImageWriter.endInsertEmpty()"
    ],
    "javax.swing.plaf.synth.synthmenubarui.propertychange": [
        "javax.swing.plaf.synth.SynthMenuBarUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "java.util.enummap.remove": [
        "java.util.EnumMap.remove(java.lang.Object)"
    ],
    "java.net.networkinterface.equals": [
        "java.net.NetworkInterface.equals(java.lang.Object)"
    ],
    "javax.xml.stream.xmleventfactory.createentityreference": [
        "javax.xml.stream.XMLEventFactory.createEntityReference(java.lang.String,javax.xml.stream.events.EntityDeclaration)"
    ],
    "javax.swing.plaf.synth.synthstylefactory.getstyle": [
        "javax.swing.plaf.synth.SynthStyleFactory.getStyle(javax.swing.JComponent,javax.swing.plaf.synth.Region)"
    ],
    "java.sql.resultset.updatecharacterstream": [
        "java.sql.ResultSet.updateCharacterStream(java.lang.String,java.io.Reader,int)",
        "java.sql.ResultSet.updateCharacterStream(java.lang.String,java.io.Reader)",
        "java.sql.ResultSet.updateCharacterStream(java.lang.String,java.io.Reader,long)",
        "java.sql.ResultSet.updateCharacterStream(int,java.io.Reader,long)",
        "java.sql.ResultSet.updateCharacterStream(int,java.io.Reader,int)",
        "java.sql.ResultSet.updateCharacterStream(int,java.io.Reader)"
    ],
    "javax.swing.plaf.synth.synthpainter.painttreecellfocus": [
        "javax.swing.plaf.synth.SynthPainter.paintTreeCellFocus(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.filechooser.filesystemview.getroots": [
        "javax.swing.filechooser.FileSystemView.getRoots()"
    ],
    "org.w3c.dom.events.mouseevent.getbutton": [
        "org.w3c.dom.events.MouseEvent.getButton()"
    ],
    "java.time.temporal.temporalamount.subtractfrom": [
        "java.time.temporal.TemporalAmount.subtractFrom(java.time.temporal.Temporal)"
    ],
    "java.time.zone.zoneoffsettransitionrule.getoffsetafter": [
        "java.time.zone.ZoneOffsetTransitionRule.getOffsetAfter()"
    ],
    "java.awt.geom.quadcurve2d.getx2": [
        "java.awt.geom.QuadCurve2D.getX2()"
    ],
    "javax.swing.table.tablecolumn.getcellrenderer": [
        "javax.swing.table.TableColumn.getCellRenderer()"
    ],
    "java.time.zone.zoneoffsettransitionrule.equals": [
        "java.time.zone.ZoneOffsetTransitionRule.equals(java.lang.Object)"
    ],
    "javax.swing.text.tabableview.getpartialspan": [
        "javax.swing.text.TabableView.getPartialSpan(int,int)"
    ],
    "javax.print.printservice.getserviceuifactory": [
        "javax.print.PrintService.getServiceUIFactory()"
    ],
    "java.util.concurrent.locks.stampedlock.asreadlock": [
        "java.util.concurrent.locks.StampedLock.asReadLock()"
    ],
    "java.util.function.predicate.and": [
        "java.util.function.Predicate.and(java.util.function.Predicate<? super java.util.function.Predicate>)",
        "java.util.function.Predicate.and(java.util.function.Predicate<? super T>)"
    ],
    "javax.management.openmbean.openmbeanoperationinfo.hashcode": [
        "javax.management.openmbean.OpenMBeanOperationInfo.hashCode()"
    ],
    "javax.sound.midi.sequencer.gettempofactor": [
        "javax.sound.midi.Sequencer.getTempoFactor()"
    ],
    "java.util.optionaldouble.of": [
        "java.util.OptionalDouble.of(double)"
    ],
    "java.util.concurrent.copyonwritearraylist.remove": [
        "java.util.concurrent.CopyOnWriteArrayList.remove(java.lang.Object)",
        "java.util.concurrent.CopyOnWriteArrayList.remove(int)"
    ],
    "javax.swing.tree.defaulttreemodel.nodeswereremoved": [
        "javax.swing.tree.DefaultTreeModel.nodesWereRemoved(javax.swing.tree.TreeNode,int[],java.lang.Object[])"
    ],
    "java.util.concurrent.recursivetask.exec": [
        "java.util.concurrent.RecursiveTask.exec()"
    ],
    "javax.xml.ws.spi.http.httpexchange.getremoteaddress": [
        "javax.xml.ws.spi.http.HttpExchange.getRemoteAddress()"
    ],
    "javax.lang.model.util.simpletypevisitor8.visitintersection": [
        "javax.lang.model.util.SimpleTypeVisitor8.visitIntersection(javax.lang.model.type.IntersectionType,javax.lang.model.util.SimpleTypeVisitor8)"
    ],
    "java.lang.reflect.annotatedelement.getdeclaredannotationsbytype": [
        "java.lang.reflect.AnnotatedElement.getDeclaredAnnotationsByType(java.lang.Class<T>)"
    ],
    "java.lang.invoke.methodhandleinfo.getmethodtype": [
        "java.lang.invoke.MethodHandleInfo.getMethodType()"
    ],
    "javax.print.attribute.standard.fidelity.getstringtable": [
        "javax.print.attribute.standard.Fidelity.getStringTable()"
    ],
    "java.net.urlconnection.getcontentencoding": [
        "java.net.URLConnection.getContentEncoding()"
    ],
    "javax.naming.ldap.ldapname.getrdns": [
        "javax.naming.ldap.LdapName.getRdns()"
    ],
    "javax.swing.plaf.multi.multioptionpaneui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiOptionPaneUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "java.text.attributedcharacteriterator.attribute.equals": [
        "java.text.AttributedCharacterIterator.Attribute.equals(java.lang.Object)"
    ],
    "javax.swing.progressmonitor.getmillistodecidetopopup": [
        "javax.swing.ProgressMonitor.getMillisToDecideToPopup()"
    ],
    "javax.swing.plaf.multi.multitextui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiTextUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "javax.management.monitor.stringmonitor.getderivedgaugetimestamp": [
        "javax.management.monitor.StringMonitor.getDerivedGaugeTimeStamp(javax.management.ObjectName)"
    ],
    "java.sql.sqloutput.writelong": [
        "java.sql.SQLOutput.writeLong(long)"
    ],
    "java.awt.image.componentcolormodel.getunnormalizedcomponents": [
        "java.awt.image.ComponentColorModel.getUnnormalizedComponents(float[],int,int[],int)"
    ],
    "javax.swing.abstractbutton.setdisabledselectedicon": [
        "javax.swing.AbstractButton.setDisabledSelectedIcon(javax.swing.Icon)"
    ],
    "org.omg.dynamicany.dynunionoperations.set_discriminator": [
        "org.omg.DynamicAny.DynUnionOperations.set_discriminator(org.omg.DynamicAny.DynAny)"
    ],
    "javax.management.openmbean.openmbeanparameterinfo.getminvalue": [
        "javax.management.openmbean.OpenMBeanParameterInfo.getMinValue()"
    ],
    "java.text.decimalformat.getdecimalformatsymbols": [
        "java.text.DecimalFormat.getDecimalFormatSymbols()"
    ],
    "java.time.duration.todays": [
        "java.time.Duration.toDays()"
    ],
    "javax.swing.text.abstractdocument.fireinsertupdate": [
        "javax.swing.text.AbstractDocument.fireInsertUpdate(javax.swing.event.DocumentEvent)"
    ],
    "org.omg.corba.datainputstream.read_value": [
        "org.omg.CORBA.DataInputStream.read_Value()"
    ],
    "javax.xml.crypto.dsig.signedinfo.getid": [
        "javax.xml.crypto.dsig.SignedInfo.getId()"
    ],
    "java.lang.class.togenericstring": [
        "java.lang.Class.toGenericString()"
    ],
    "java.applet.applet.resize": [
        "java.applet.Applet.resize(int,int)",
        "java.applet.Applet.resize(java.awt.Dimension)"
    ],
    "javax.swing.text.asyncboxview.setsize": [
        "javax.swing.text.AsyncBoxView.setSize(float,float)"
    ],
    "java.awt.image.componentcolormodel.getdataelement": [
        "java.awt.image.ComponentColorModel.getDataElement(int[],int)",
        "java.awt.image.ComponentColorModel.getDataElement(float[],int)"
    ],
    "javax.xml.datatype.duration.add": [
        "javax.xml.datatype.Duration.add(javax.xml.datatype.Duration)"
    ],
    "java.net.httpcookie.equals": [
        "java.net.HttpCookie.equals(java.lang.Object)"
    ],
    "javax.sound.midi.sequencer.settickposition": [
        "javax.sound.midi.Sequencer.setTickPosition(long)"
    ],
    "javax.swing.scrollpanelayout.getrowheader": [
        "javax.swing.ScrollPaneLayout.getRowHeader()"
    ],
    "javax.naming.binaryrefaddr.hashcode": [
        "javax.naming.BinaryRefAddr.hashCode()"
    ],
    "java.nio.channels.asynchronousserversocketchannel.open": [
        "java.nio.channels.AsynchronousServerSocketChannel.open()",
        "java.nio.channels.AsynchronousServerSocketChannel.open(java.nio.channels.AsynchronousChannelGroup)"
    ],
    "javax.management.relation.relation.getrolecardinality": [
        "javax.management.relation.Relation.getRoleCardinality(java.lang.String)"
    ],
    "javax.swing.table.tablecolumnmodel.getselectedcolumns": [
        "javax.swing.table.TableColumnModel.getSelectedColumns()"
    ],
    "javax.swing.text.styleconstants.settabset": [
        "javax.swing.text.StyleConstants.setTabSet(javax.swing.text.MutableAttributeSet,javax.swing.text.TabSet)"
    ],
    "org.omg.dynamicany._dynfixedstub.insert_char": [
        "org.omg.DynamicAny._DynFixedStub.insert_char(char)"
    ],
    "java.awt.jobattributes.clone": [
        "java.awt.JobAttributes.clone()"
    ],
    "javax.swing.jdesktoppane.getallframesinlayer": [
        "javax.swing.JDesktopPane.getAllFramesInLayer(int)"
    ],
    "java.security.spec.ecfieldf2m.getreductionpolynomial": [
        "java.security.spec.ECFieldF2m.getReductionPolynomial()"
    ],
    "java.time.yearmonth.withmonth": [
        "java.time.YearMonth.withMonth(int)"
    ],
    "javax.accessibility.accessiblecomponent.setsize": [
        "javax.accessibility.AccessibleComponent.setSize(java.awt.Dimension)"
    ],
    "java.util.scanner.match": [
        "java.util.Scanner.match()"
    ],
    "java.util.date.toinstant": [
        "java.util.Date.toInstant()"
    ],
    "java.util.identityhashmap.equals": [
        "java.util.IdentityHashMap.equals(java.lang.Object)"
    ],
    "javax.swing.jcomponent.getcomponentgraphics": [
        "javax.swing.JComponent.getComponentGraphics(java.awt.Graphics)"
    ],
    "javax.swing.repaintmanager.setdoublebuffermaximumsize": [
        "javax.swing.RepaintManager.setDoubleBufferMaximumSize(java.awt.Dimension)"
    ],
    "javax.imageio.metadata.iiometadata.getstandardtransparencynode": [
        "javax.imageio.metadata.IIOMetadata.getStandardTransparencyNode()"
    ],
    "javax.accessibility.accessiblecontext.getaccessibleparent": [
        "javax.accessibility.AccessibleContext.getAccessibleParent()"
    ],
    "javax.rmi.corba.util.mapsystemexception": [
        "javax.rmi.CORBA.Util.mapSystemException(org.omg.CORBA.SystemException)"
    ],
    "java.util.concurrent.atomic.atomicintegerarray.getandadd": [
        "java.util.concurrent.atomic.AtomicIntegerArray.getAndAdd(int,int)"
    ],
    "org.omg.dynamicany.dynvalueoperations.get_members": [
        "org.omg.DynamicAny.DynValueOperations.get_members()"
    ],
    "javax.swing.jcomponent.printcomponent": [
        "javax.swing.JComponent.printComponent(java.awt.Graphics)"
    ],
    "org.omg.corba.completionstatus.from_int": [
        "org.omg.CORBA.CompletionStatus.from_int(int)"
    ],
    "org.ietf.jgss.gsscontext.isestablished": [
        "org.ietf.jgss.GSSContext.isEstablished()"
    ],
    "java.nio.bytebuffer.wrap": [
        "java.nio.ByteBuffer.wrap(byte[])",
        "java.nio.ByteBuffer.wrap(byte[],int,int)"
    ],
    "javax.lang.model.util.elementkindvisitor6.visitvariableasenumconstant": [
        "javax.lang.model.util.ElementKindVisitor6.visitVariableAsEnumConstant(javax.lang.model.element.VariableElement,javax.lang.model.util.ElementKindVisitor6)"
    ],
    "javax.print.docprintjob.addprintjoblistener": [
        "javax.print.DocPrintJob.addPrintJobListener(javax.print.event.PrintJobListener)"
    ],
    "javax.swing.abstractbutton.firestatechanged": [
        "javax.swing.AbstractButton.fireStateChanged()"
    ],
    "javax.swing.plaf.basic.basicoptionpaneui.getbuttons": [
        "javax.swing.plaf.basic.BasicOptionPaneUI.getButtons()"
    ],
    "javax.imageio.imagewriter.getoriginatingprovider": [
        "javax.imageio.ImageWriter.getOriginatingProvider()"
    ],
    "java.awt.color.icc_profilegray.gettrc": [
        "java.awt.color.ICC_ProfileGray.getTRC()"
    ],
    "java.math.biginteger.probableprime": [
        "java.math.BigInteger.probablePrime(int,java.util.Random)"
    ],
    "org.omg.corba.any.extract_longlong": [
        "org.omg.CORBA.Any.extract_longlong()"
    ],
    "java.time.zoneid.getavailablezoneids": [
        "java.time.ZoneId.getAvailableZoneIds()"
    ],
    "javax.management.modelmbean.requiredmodelmbean.invoke": [
        "javax.management.modelmbean.RequiredModelMBean.invoke(java.lang.String,java.lang.Object[],java.lang.String[])"
    ],
    "java.io.file.mkdirs": [
        "java.io.File.mkdirs()"
    ],
    "javax.management.loading.mletcontent.getparametertypes": [
        "javax.management.loading.MLetContent.getParameterTypes()"
    ],
    "javax.swing.defaultbuttonmodel.getactioncommand": [
        "javax.swing.DefaultButtonModel.getActionCommand()"
    ],
    "javax.swing.jfilechooser.setfilefilter": [
        "javax.swing.JFileChooser.setFileFilter(javax.swing.filechooser.FileFilter)"
    ],
    "javax.sql.rowset.serial.serialclob.free": [
        "javax.sql.rowset.serial.SerialClob.free()"
    ],
    "java.time.chrono.japanesedate.minus": [
        "java.time.chrono.JapaneseDate.minus(java.time.temporal.TemporalAmount)"
    ],
    "javax.swing.jformattedtextfield.getvalue": [
        "javax.swing.JFormattedTextField.getValue()"
    ],
    "javax.swing.plaf.multi.multitooltipui.getuis": [
        "javax.swing.plaf.multi.MultiToolTipUI.getUIs()"
    ],
    "javax.security.sasl.saslexception.tostring": [
        "javax.security.sasl.SaslException.toString()"
    ],
    "org.omg.corba.portable.delegate.non_existent": [
        "org.omg.CORBA.portable.Delegate.non_existent(org.omg.CORBA.Object)"
    ],
    "javax.xml.stream.xmleventwriter.setnamespacecontext": [
        "javax.xml.stream.XMLEventWriter.setNamespaceContext(javax.xml.namespace.NamespaceContext)"
    ],
    "java.time.zone.zonerulesprovider.getavailablezoneids": [
        "java.time.zone.ZoneRulesProvider.getAvailableZoneIds()"
    ],
    "javax.sound.midi.spi.midideviceprovider.getdeviceinfo": [
        "javax.sound.midi.spi.MidiDeviceProvider.getDeviceInfo()"
    ],
    "java.util.concurrent.atomic.atomicinteger.longvalue": [
        "java.util.concurrent.atomic.AtomicInteger.longValue()"
    ],
    "javax.xml.bind.jaxbintrospector.getelementname": [
        "javax.xml.bind.JAXBIntrospector.getElementName(java.lang.Object)"
    ],
    "javax.swing.box.createhorizontalglue": [
        "javax.swing.Box.createHorizontalGlue()"
    ],
    "java.awt.dnd.droptargetdropevent.getcurrentdataflavors": [
        "java.awt.dnd.DropTargetDropEvent.getCurrentDataFlavors()"
    ],
    "java.net.urlstreamhandler.toexternalform": [
        "java.net.URLStreamHandler.toExternalForm(java.net.URL)"
    ],
    "java.util.concurrent.arrayblockingqueue.toarray": [
        "java.util.concurrent.ArrayBlockingQueue.toArray(T[])",
        "java.util.concurrent.ArrayBlockingQueue.toArray()"
    ],
    "java.awt.event.adjustmentevent.getvalue": [
        "java.awt.event.AdjustmentEvent.getValue()"
    ],
    "javax.xml.bind.helpers.abstractmarshallerimpl.setfragment": [
        "javax.xml.bind.helpers.AbstractMarshallerImpl.setFragment(boolean)"
    ],
    "javax.swing.text.html.htmlwriter.closeoutunwantedembeddedtags": [
        "javax.swing.text.html.HTMLWriter.closeOutUnwantedEmbeddedTags(javax.swing.text.AttributeSet)"
    ],
    "javax.imageio.imagereader.processthumbnailpasscomplete": [
        "javax.imageio.ImageReader.processThumbnailPassComplete(java.awt.image.BufferedImage)"
    ],
    "java.time.month.firstmonthofquarter": [
        "java.time.Month.firstMonthOfQuarter()"
    ],
    "java.util.vector.toarray": [
        "java.util.Vector.toArray()",
        "java.util.Vector.toArray(T[])"
    ],
    "javax.swing.text.componentview.createcomponent": [
        "javax.swing.text.ComponentView.createComponent()"
    ],
    "java.nio.file.attribute.posixfilepermission.values": [
        "java.nio.file.attribute.PosixFilePermission.values()"
    ],
    "javax.swing.text.defaultcaret.getmark": [
        "javax.swing.text.DefaultCaret.getMark()"
    ],
    "org.omg.dynamicany._dynfixedstub.insert_any": [
        "org.omg.DynamicAny._DynFixedStub.insert_any(org.omg.CORBA.Any)"
    ],
    "java.time.monthday.get": [
        "java.time.MonthDay.get(java.time.temporal.TemporalField)"
    ],
    "java.awt.color.colorspace.tociexyz": [
        "java.awt.color.ColorSpace.toCIEXYZ(float[])"
    ],
    "javax.swing.tree.defaultmutabletreenode.getchildcount": [
        "javax.swing.tree.DefaultMutableTreeNode.getChildCount()"
    ],
    "javax.swing.swingutilities.invokeandwait": [
        "javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable)"
    ],
    "java.text.numberformat.getintegerinstance": [
        "java.text.NumberFormat.getIntegerInstance(java.util.Locale)",
        "java.text.NumberFormat.getIntegerInstance()"
    ],
    "java.util.concurrent.concurrentskiplistmap.headmap": [
        "java.util.concurrent.ConcurrentSkipListMap.headMap(K)"
    ],
    "javax.xml.bind.validationeventlocator.getcolumnnumber": [
        "javax.xml.bind.ValidationEventLocator.getColumnNumber()"
    ],
    "javax.sound.midi.transmitter.getreceiver": [
        "javax.sound.midi.Transmitter.getReceiver()"
    ],
    "javax.swing.table.jtableheader.getcolumnmodel": [
        "javax.swing.table.JTableHeader.getColumnModel()"
    ],
    "java.awt.geom.roundrectangle2d.float.getheight": [
        "java.awt.geom.RoundRectangle2D.Float.getHeight()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintsplitpanedragdivider": [
        "javax.swing.plaf.synth.SynthPainter.paintSplitPaneDragDivider(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)"
    ],
    "javax.swing.plaf.metal.metalborders.gettextfieldborder": [
        "javax.swing.plaf.metal.MetalBorders.getTextFieldBorder()"
    ],
    "java.util.concurrent.synchronousqueue.put": [
        "java.util.concurrent.SynchronousQueue.put(java.util.concurrent.SynchronousQueue)",
        "java.util.concurrent.SynchronousQueue.put(E)"
    ],
    "java.nio.file.spi.filesystemprovider.newfilechannel": [
        "java.nio.file.spi.FileSystemProvider.newFileChannel(java.nio.file.Path,java.util.Set<? extends java.nio.file.OpenOption>,java.nio.file.attribute.FileAttribute<?>...)",
        "java.nio.file.spi.FileSystemProvider.newFileChannel(java.nio.file.Path,java.util.Set<? extends java.nio.file.OpenOption>,java.nio.file.attribute.FileAttribute<?>)"
    ],
    "javax.swing.jpopupmenu.setpopupsize": [
        "javax.swing.JPopupMenu.setPopupSize(java.awt.Dimension)",
        "javax.swing.JPopupMenu.setPopupSize(int,int)"
    ],
    "java.awt.awteventmulticaster.componentshown": [
        "java.awt.AWTEventMulticaster.componentShown(java.awt.event.ComponentEvent)"
    ],
    "org.xml.sax.ext.locator2impl.getxmlversion": [
        "org.xml.sax.ext.Locator2Impl.getXMLVersion()"
    ],
    "java.awt.keyboardfocusmanager.removekeyeventdispatcher": [
        "java.awt.KeyboardFocusManager.removeKeyEventDispatcher(java.awt.KeyEventDispatcher)"
    ],
    "java.security.privilegedexceptionaction.run": [
        "java.security.PrivilegedExceptionAction.run()"
    ],
    "java.awt.gridlayout.setvgap": [
        "java.awt.GridLayout.setVgap(int)"
    ],
    "javax.lang.model.util.simpletypevisitor6.visittypevariable": [
        "javax.lang.model.util.SimpleTypeVisitor6.visitTypeVariable(javax.lang.model.type.TypeVariable,javax.lang.model.util.SimpleTypeVisitor6)"
    ],
    "javax.management.mbeanservernotification.getmbeanname": [
        "javax.management.MBeanServerNotification.getMBeanName()"
    ],
    "javax.swing.plaf.basic.basicfilechooserui.createui": [
        "javax.swing.plaf.basic.BasicFileChooserUI.createUI(javax.swing.JComponent)"
    ],
    "javax.swing.text.html.minimalhtmlwriter.write": [
        "javax.swing.text.html.MinimalHTMLWriter.write()"
    ],
    "javax.xml.soap.attachmentpart.setcontenttype": [
        "javax.xml.soap.AttachmentPart.setContentType(java.lang.String)"
    ],
    "javax.xml.datatype.duration.getyears": [
        "javax.xml.datatype.Duration.getYears()"
    ],
    "java.util.stream.collectors.summarizingdouble": [
        "java.util.stream.Collectors.summarizingDouble(java.util.function.ToDoubleFunction<? super T>)"
    ],
    "java.security.keystorespi.enginealiases": [
        "java.security.KeyStoreSpi.engineAliases()"
    ],
    "java.util.bitset.length": [
        "java.util.BitSet.length()"
    ],
    "org.w3c.dom.document.createtextnode": [
        "org.w3c.dom.Document.createTextNode(java.lang.String)"
    ],
    "java.sql.databasemetadata.getcatalogseparator": [
        "java.sql.DatabaseMetaData.getCatalogSeparator()"
    ],
    "javax.security.auth.callback.confirmationcallback.setselectedindex": [
        "javax.security.auth.callback.ConfirmationCallback.setSelectedIndex(int)"
    ],
    "javax.swing.jspinner.commitedit": [
        "javax.swing.JSpinner.commitEdit()"
    ],
    "java.time.format.decimalstyle.withnegativesign": [
        "java.time.format.DecimalStyle.withNegativeSign(char)"
    ],
    "javax.net.ssl.sslcontext.getsocketfactory": [
        "javax.net.ssl.SSLContext.getSocketFactory()"
    ],
    "java.awt.image.bufferedimage.getsources": [
        "java.awt.image.BufferedImage.getSources()"
    ],
    "javax.net.ssl.sslserversocket.setneedclientauth": [
        "javax.net.ssl.SSLServerSocket.setNeedClientAuth(boolean)"
    ],
    "java.awt.geom.rectangle2d.setrect": [
        "java.awt.geom.Rectangle2D.setRect(double,double,double,double)"
    ],
    "java.util.hashtable.clone": [
        "java.util.Hashtable.clone()"
    ],
    "javax.swing.jpopupmenu.remove": [
        "javax.swing.JPopupMenu.remove(int)"
    ],
    "javax.imageio.event.iiowriteprogresslistener.thumbnailprogress": [
        "javax.imageio.event.IIOWriteProgressListener.thumbnailProgress(javax.imageio.ImageWriter,float)"
    ],
    "java.sql.statement.getfetchsize": [
        "java.sql.Statement.getFetchSize()"
    ],
    "java.security.cert.pkixcertpathchecker.init": [
        "java.security.cert.PKIXCertPathChecker.init(boolean)"
    ],
    "javax.swing.plaf.synth.synthui.paintborder": [
        "javax.swing.plaf.synth.SynthUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.awt.im.spi.inputmethod.setlocale": [
        "java.awt.im.spi.InputMethod.setLocale(java.util.Locale)"
    ],
    "javax.sound.midi.midichannel.getcontroller": [
        "javax.sound.midi.MidiChannel.getController(int)"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.unwrap": [
        "javax.sql.rowset.RowSetMetaDataImpl.unwrap(java.lang.Class<T>)"
    ],
    "java.time.instant.ofepochsecond": [
        "java.time.Instant.ofEpochSecond(long,long)",
        "java.time.Instant.ofEpochSecond(long)"
    ],
    "javax.swing.text.html.stylesheet.importstylesheet": [
        "javax.swing.text.html.StyleSheet.importStyleSheet(java.net.URL)"
    ],
    "java.lang.ref.phantomreference.get": [
        "java.lang.ref.PhantomReference.get()"
    ],
    "javax.swing.table.jtableheader.resizeandrepaint": [
        "javax.swing.table.JTableHeader.resizeAndRepaint()"
    ],
    "java.awt.geom.rectangle2d.float.setrect": [
        "java.awt.geom.Rectangle2D.Float.setRect(float,float,float,float)",
        "java.awt.geom.Rectangle2D.Float.setRect(double,double,double,double)"
    ],
    "java.util.splittablerandom.ints": [
        "java.util.SplittableRandom.ints(long)",
        "java.util.SplittableRandom.ints()"
    ],
    "javax.management.relation.relationservice.findassociatedmbeans": [
        "javax.management.relation.RelationService.findAssociatedMBeans(javax.management.ObjectName,java.lang.String,java.lang.String)"
    ],
    "java.util.logging.logmanager.checkaccess": [
        "java.util.logging.LogManager.checkAccess()"
    ],
    "javax.imageio.imagereader.processimagecomplete": [
        "javax.imageio.ImageReader.processImageComplete()"
    ],
    "javax.swing.jlabel.updateui": [
        "javax.swing.JLabel.updateUI()"
    ],
    "java.util.prefs.preferences.putint": [
        "java.util.prefs.Preferences.putInt(java.lang.String,int)"
    ],
    "javax.swing.plaf.basic.basictoolbarui.paintdragwindow": [
        "javax.swing.plaf.basic.BasicToolBarUI.paintDragWindow(java.awt.Graphics)"
    ],
    "javax.swing.jeditorpane.getuiclassid": [
        "javax.swing.JEditorPane.getUIClassID()"
    ],
    "java.sql.connection.createclob": [
        "java.sql.Connection.createClob()"
    ],
    "org.ietf.jgss.gssname.equals": [
        "org.ietf.jgss.GSSName.equals(java.lang.Object)",
        "org.ietf.jgss.GSSName.equals(org.ietf.jgss.GSSName)"
    ],
    "org.omg.dynamicany._dynsequencestub.assign": [
        "org.omg.DynamicAny._DynSequenceStub.assign(org.omg.DynamicAny.DynAny)"
    ],
    "java.security.spec.x509encodedkeyspec.getencoded": [
        "java.security.spec.X509EncodedKeySpec.getEncoded()"
    ],
    "java.time.yearmonth.getyear": [
        "java.time.YearMonth.getYear()"
    ],
    "javax.swing.jfilechooser.setapprovebuttonmnemonic": [
        "javax.swing.JFileChooser.setApproveButtonMnemonic(char)",
        "javax.swing.JFileChooser.setApproveButtonMnemonic(int)"
    ],
    "java.nio.charset.charsetdecoder.onmalformedinput": [
        "java.nio.charset.CharsetDecoder.onMalformedInput(java.nio.charset.CodingErrorAction)"
    ],
    "java.text.decimalformat.format": [
        "java.text.DecimalFormat.format(long,java.lang.StringBuffer,java.text.FieldPosition)"
    ],
    "java.nio.doublebuffer.tostring": [
        "java.nio.DoubleBuffer.toString()"
    ],
    "org.w3c.dom.attr.isid": [
        "org.w3c.dom.Attr.isId()"
    ],
    "org.omg.portableinterceptor.clientrequestinfooperations.get_request_policy": [
        "org.omg.PortableInterceptor.ClientRequestInfoOperations.get_request_policy(int)"
    ],
    "javax.swing.jmenuitem.setmodel": [
        "javax.swing.JMenuItem.setModel(javax.swing.ButtonModel)"
    ],
    "java.awt.geom.affinetransform.quadrantrotate": [
        "java.awt.geom.AffineTransform.quadrantRotate(int)",
        "java.awt.geom.AffineTransform.quadrantRotate(int,double,double)"
    ],
    "javax.swing.plaf.basic.basicformattedtextfieldui.createui": [
        "javax.swing.plaf.basic.BasicFormattedTextFieldUI.createUI(javax.swing.JComponent)"
    ],
    "java.beans.featuredescriptor.setshortdescription": [
        "java.beans.FeatureDescriptor.setShortDescription(java.lang.String)"
    ],
    "javax.print.attribute.standard.jobname.getcategory": [
        "javax.print.attribute.standard.JobName.getCategory()"
    ],
    "javax.swing.jtable.updateui": [
        "javax.swing.JTable.updateUI()"
    ],
    "javax.swing.swingutilities.getunwrappedview": [
        "javax.swing.SwingUtilities.getUnwrappedView(javax.swing.JViewport)"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.getscale": [
        "javax.sql.rowset.RowSetMetaDataImpl.getScale(int)"
    ],
    "javax.swing.lookandfeel.installcolors": [
        "javax.swing.LookAndFeel.installColors(javax.swing.JComponent,java.lang.String,java.lang.String)"
    ],
    "java.sql.databasemetadata.getmaxstatements": [
        "java.sql.DatabaseMetaData.getMaxStatements()"
    ],
    "java.sql.databasemetadata.getmaxcharliterallength": [
        "java.sql.DatabaseMetaData.getMaxCharLiteralLength()"
    ],
    "javax.xml.soap.attachmentpart.getmatchingmimeheaders": [
        "javax.xml.soap.AttachmentPart.getMatchingMimeHeaders(java.lang.String[])"
    ],
    "javax.swing.jinternalframe.dodefaultcloseaction": [
        "javax.swing.JInternalFrame.doDefaultCloseAction()"
    ],
    "javax.swing.plaf.multi.multiseparatorui.createui": [
        "javax.swing.plaf.multi.MultiSeparatorUI.createUI(javax.swing.JComponent)"
    ],
    "javax.transaction.xa.xaresource.settransactiontimeout": [
        "javax.transaction.xa.XAResource.setTransactionTimeout(int)"
    ],
    "javax.swing.text.paragraphview.getbreakweight": [
        "javax.swing.text.ParagraphView.getBreakWeight(int,float)"
    ],
    "javax.xml.validation.validatorhandler.getresourceresolver": [
        "javax.xml.validation.ValidatorHandler.getResourceResolver()"
    ],
    "java.util.stream.doublestream.generate": [
        "java.util.stream.DoubleStream.generate(java.util.function.DoubleSupplier)"
    ],
    "javax.security.auth.kerberos.kerberosprincipal.hashcode": [
        "javax.security.auth.kerberos.KerberosPrincipal.hashCode()"
    ],
    "javax.xml.ws.spi.http.httpexchange.setstatus": [
        "javax.xml.ws.spi.http.HttpExchange.setStatus(int)"
    ],
    "java.nio.file.files.createtempdirectory": [
        "java.nio.file.Files.createTempDirectory(java.lang.String,java.nio.file.attribute.FileAttribute<?>)",
        "java.nio.file.Files.createTempDirectory(java.lang.String,java.nio.file.attribute.FileAttribute<?>...)",
        "java.nio.file.Files.createTempDirectory(java.nio.file.Path,java.lang.String,java.nio.file.attribute.FileAttribute<?>)",
        "java.nio.file.Files.createTempDirectory(java.nio.file.Path,java.lang.String,java.nio.file.attribute.FileAttribute<?>...)"
    ],
    "java.nio.channels.spi.abstractinterruptiblechannel.implclosechannel": [
        "java.nio.channels.spi.AbstractInterruptibleChannel.implCloseChannel()"
    ],
    "java.awt.image.pixelinterleavedsamplemodel.createsubsetsamplemodel": [
        "java.awt.image.PixelInterleavedSampleModel.createSubsetSampleModel(int[])"
    ],
    "java.lang.enum.name": [
        "java.lang.Enum.name()"
    ],
    "java.sql.sqlxml.getstring": [
        "java.sql.SQLXML.getString()"
    ],
    "java.sql.resultset.updatedouble": [
        "java.sql.ResultSet.updateDouble(int,double)",
        "java.sql.ResultSet.updateDouble(java.lang.String,double)"
    ],
    "javax.swing.jtable.getselectedcolumns": [
        "javax.swing.JTable.getSelectedColumns()"
    ],
    "javax.accessibility.accessibletablemodelchange.gettype": [
        "javax.accessibility.AccessibleTableModelChange.getType()"
    ],
    "javax.swing.plaf.multi.multiprogressbarui.installui": [
        "javax.swing.plaf.multi.MultiProgressBarUI.installUI(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.basic.basictextareaui.getminimumsize": [
        "javax.swing.plaf.basic.BasicTextAreaUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "java.util.concurrent.concurrenthashmap.keysetview.getmappedvalue": [
        "java.util.concurrent.ConcurrentHashMap.KeySetView.getMappedValue()"
    ],
    "java.nio.file.files.newbufferedreader": [
        "java.nio.file.Files.newBufferedReader(java.nio.file.Path,java.nio.charset.Charset)",
        "java.nio.file.Files.newBufferedReader(java.nio.file.Path)"
    ],
    "java.awt.container.setfont": [
        "java.awt.Container.setFont(java.awt.Font)"
    ],
    "java.util.logging.logger.entering": [
        "java.util.logging.Logger.entering(java.lang.String,java.lang.String,java.lang.Object)",
        "java.util.logging.Logger.entering(java.lang.String,java.lang.String,java.lang.Object[])",
        "java.util.logging.Logger.entering(java.lang.String,java.lang.String)"
    ],
    "org.omg.dynamicany.dynunionoperations.member": [
        "org.omg.DynamicAny.DynUnionOperations.member()"
    ],
    "javax.swing.jcomponent.getdefaultlocale": [
        "javax.swing.JComponent.getDefaultLocale()"
    ],
    "javax.xml.bind.datatypeconverter.printunsignedshort": [
        "javax.xml.bind.DatatypeConverter.printUnsignedShort(int)"
    ],
    "javax.swing.text.defaultcaret.getupdatepolicy": [
        "javax.swing.text.DefaultCaret.getUpdatePolicy()"
    ],
    "javax.management.loading.mletcontent.getversion": [
        "javax.management.loading.MLetContent.getVersion()"
    ],
    "javax.management.mbeanserverfactory.getclassloaderrepository": [
        "javax.management.MBeanServerFactory.getClassLoaderRepository(javax.management.MBeanServer)"
    ],
    "javax.script.scriptengine.setbindings": [
        "javax.script.ScriptEngine.setBindings(javax.script.Bindings,int)"
    ],
    "javax.swing.plaf.metal.metaltheme.getsecondary1": [
        "javax.swing.plaf.metal.MetalTheme.getSecondary1()"
    ],
    "javax.lang.model.type.typemirror.getkind": [
        "javax.lang.model.type.TypeMirror.getKind()"
    ],
    "javax.swing.abstractbutton.addactionlistener": [
        "javax.swing.AbstractButton.addActionListener(java.awt.event.ActionListener)"
    ],
    "java.util.linkedlist.offerlast": [
        "java.util.LinkedList.offerLast(java.util.LinkedList)",
        "java.util.LinkedList.offerLast(E)"
    ],
    "javax.swing.text.styleconstants.isunderline": [
        "javax.swing.text.StyleConstants.isUnderline(javax.swing.text.AttributeSet)"
    ],
    "org.xml.sax.ext.lexicalhandler.startdtd": [
        "org.xml.sax.ext.LexicalHandler.startDTD(java.lang.String,java.lang.String,java.lang.String)"
    ],
    "java.net.serversocket.getreuseaddress": [
        "java.net.ServerSocket.getReuseAddress()"
    ],
    "java.security.keystore.passwordprotection.getprotectionalgorithm": [
        "java.security.KeyStore.PasswordProtection.getProtectionAlgorithm()"
    ],
    "javax.xml.soap.soapconnection.get": [
        "javax.xml.soap.SOAPConnection.get(java.lang.Object)"
    ],
    "java.util.random.next": [
        "java.util.Random.next(int)"
    ],
    "javax.security.auth.callback.passwordcallback.getpassword": [
        "javax.security.auth.callback.PasswordCallback.getPassword()"
    ],
    "java.rmi.server.servercloneexception.getmessage": [
        "java.rmi.server.ServerCloneException.getMessage()"
    ],
    "javax.swing.plaf.basic.basictextui.getminimumsize": [
        "javax.swing.plaf.basic.BasicTextUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "javax.swing.event.treemodelevent.getchildren": [
        "javax.swing.event.TreeModelEvent.getChildren()"
    ],
    "javax.naming.name.endswith": [
        "javax.naming.Name.endsWith(javax.naming.Name)"
    ],
    "java.net.datagramsocket.getreceivebuffersize": [
        "java.net.DatagramSocket.getReceiveBufferSize()"
    ],
    "java.util.concurrent.semaphore.getqueuelength": [
        "java.util.concurrent.Semaphore.getQueueLength()"
    ],
    "javax.swing.listselectionmodel.getanchorselectionindex": [
        "javax.swing.ListSelectionModel.getAnchorSelectionIndex()"
    ],
    "javax.imageio.imagereader.removealliioreadprogresslisteners": [
        "javax.imageio.ImageReader.removeAllIIOReadProgressListeners()"
    ],
    "java.lang.invoke.methodhandles.filterarguments": [
        "java.lang.invoke.MethodHandles.filterArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle...)",
        "java.lang.invoke.MethodHandles.filterArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle)"
    ],
    "javax.xml.stream.xmloutputfactory.setproperty": [
        "javax.xml.stream.XMLOutputFactory.setProperty(java.lang.String,java.lang.Object)"
    ],
    "java.util.abstractmap.simpleentry.getkey": [
        "java.util.AbstractMap.SimpleEntry.getKey()"
    ],
    "java.sql.databasemetadata.supportstablecorrelationnames": [
        "java.sql.DatabaseMetaData.supportsTableCorrelationNames()"
    ],
    "javax.accessibility.accessibletable.getaccessiblecolumncount": [
        "javax.accessibility.AccessibleTable.getAccessibleColumnCount()"
    ],
    "org.omg.corba.portable.outputstream.orb": [
        "org.omg.CORBA.portable.OutputStream.orb()"
    ],
    "java.net.socket.settrafficclass": [
        "java.net.Socket.setTrafficClass(int)"
    ],
    "javax.xml.soap.soapmessage.removeattachments": [
        "javax.xml.soap.SOAPMessage.removeAttachments(javax.xml.soap.MimeHeaders)"
    ],
    "javax.swing.plaf.layerui.processinputmethodevent": [
        "javax.swing.plaf.LayerUI.processInputMethodEvent(java.awt.event.InputMethodEvent,javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)"
    ],
    "java.awt.container.add": [
        "java.awt.Container.add(java.awt.Component)",
        "java.awt.Container.add(java.lang.String,java.awt.Component)",
        "java.awt.Container.add(java.awt.Component,java.lang.Object,int)",
        "java.awt.Container.add(java.awt.Component,java.lang.Object)",
        "java.awt.Container.add(java.awt.Component,int)"
    ],
    "org.omg.corba.typecode.kind": [
        "org.omg.CORBA.TypeCode.kind()"
    ],
    "org.omg.corba.orb.create_sequence_tc": [
        "org.omg.CORBA.ORB.create_sequence_tc(int,org.omg.CORBA.TypeCode)"
    ],
    "java.util.concurrent.executorservice.shutdownnow": [
        "java.util.concurrent.ExecutorService.shutdownNow()"
    ],
    "java.awt.keyboardfocusmanager.getfocusowner": [
        "java.awt.KeyboardFocusManager.getFocusOwner()"
    ],
    "javax.swing.event.eventlistenerlist.getlistenercount": [
        "javax.swing.event.EventListenerList.getListenerCount(java.lang.Class<?>)",
        "javax.swing.event.EventListenerList.getListenerCount()"
    ],
    "java.awt.checkboxmenuitem.addnotify": [
        "java.awt.CheckboxMenuItem.addNotify()"
    ],
    "javax.swing.text.html.html.getalltags": [
        "javax.swing.text.html.HTML.getAllTags()"
    ],
    "javax.xml.stream.events.xmlevent.getlocation": [
        "javax.xml.stream.events.XMLEvent.getLocation()"
    ],
    "java.awt.awteventmulticaster.windowgainedfocus": [
        "java.awt.AWTEventMulticaster.windowGainedFocus(java.awt.event.WindowEvent)"
    ],
    "javax.transaction.xa.xaresource.end": [
        "javax.transaction.xa.XAResource.end(javax.transaction.xa.Xid,int)"
    ],
    "java.awt.jobattributes.getminpage": [
        "java.awt.JobAttributes.getMinPage()"
    ],
    "javax.swing.jtree.scrollrowtovisible": [
        "javax.swing.JTree.scrollRowToVisible(int)"
    ],
    "java.util.stream.stream.map": [
        "java.util.stream.Stream.map(java.util.function.Function<? super,? extends R>)"
    ],
    "java.awt.menu.remove": [
        "java.awt.Menu.remove(java.awt.MenuComponent)",
        "java.awt.Menu.remove(int)"
    ],
    "java.util.calendar.setweekdate": [
        "java.util.Calendar.setWeekDate(int,int,int)"
    ],
    "java.util.concurrent.locks.reentrantlock.newcondition": [
        "java.util.concurrent.locks.ReentrantLock.newCondition()"
    ],
    "javax.xml.soap.attachmentpart.getrawcontent": [
        "javax.xml.soap.AttachmentPart.getRawContent()"
    ],
    "java.util.prefs.abstractpreferences.nodeexists": [
        "java.util.prefs.AbstractPreferences.nodeExists(java.lang.String)"
    ],
    "java.lang.charsequence.tostring": [
        "java.lang.CharSequence.toString()"
    ],
    "java.sql.driver.getminorversion": [
        "java.sql.Driver.getMinorVersion()"
    ],
    "javax.swing.plaf.metal.metaltheme.getsubtextfont": [
        "javax.swing.plaf.metal.MetalTheme.getSubTextFont()"
    ],
    "javax.swing.jtable.paramstring": [
        "javax.swing.JTable.paramString()"
    ],
    "java.awt.font.textlayout.hittestchar": [
        "java.awt.font.TextLayout.hitTestChar(float,float,java.awt.geom.Rectangle2D)",
        "java.awt.font.TextLayout.hitTestChar(float,float)"
    ],
    "org.omg.dynamicany._dynfixedstub.insert_wchar": [
        "org.omg.DynamicAny._DynFixedStub.insert_wchar(char)"
    ],
    "java.security.accesscontroller.getcontext": [
        "java.security.AccessController.getContext()"
    ],
    "javax.swing.plaf.synth.synthprogressbarui.propertychange": [
        "javax.swing.plaf.synth.SynthProgressBarUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "java.awt.menuitem.setshortcut": [
        "java.awt.MenuItem.setShortcut(java.awt.MenuShortcut)"
    ],
    "java.net.datagramsocket.settrafficclass": [
        "java.net.DatagramSocket.setTrafficClass(int)"
    ],
    "java.util.sortedset.comparator": [
        "java.util.SortedSet.comparator()"
    ],
    "javax.net.ssl.sslcontext.init": [
        "javax.net.ssl.SSLContext.init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)",
        "javax.net.ssl.SSLContext.init(javax.net.ssl.KeyManager,javax.net.ssl.TrustManager,java.security.SecureRandom)"
    ],
    "javax.swing.text.defaultformatter.getvalueclass": [
        "javax.swing.text.DefaultFormatter.getValueClass()"
    ],
    "java.awt.image.bandedsamplemodel.createcompatiblesamplemodel": [
        "java.awt.image.BandedSampleModel.createCompatibleSampleModel(int,int)"
    ],
    "javax.swing.text.abstractdocument.setdocumentproperties": [
        "javax.swing.text.AbstractDocument.setDocumentProperties(,java.lang.Object>)"
    ],
    "java.io.objectstreamclass.lookupany": [
        "java.io.ObjectStreamClass.lookupAny(java.lang.Class<?>)"
    ],
    "java.security.securerandomspi.enginesetseed": [
        "java.security.SecureRandomSpi.engineSetSeed(byte[])"
    ],
    "javax.xml.stream.location.getcharacteroffset": [
        "javax.xml.stream.Location.getCharacterOffset()"
    ],
    "java.util.concurrent.concurrenthashmap.keysetview.getmap": [
        "java.util.concurrent.ConcurrentHashMap.KeySetView.getMap()"
    ],
    "java.time.temporal.temporalfield.adjustinto": [
        "java.time.temporal.TemporalField.adjustInto(R,long)"
    ],
    "javax.accessibility.accessiblestreamable.getmimetypes": [
        "javax.accessibility.AccessibleStreamable.getMimeTypes()"
    ],
    "java.net.datagramsocket.getreuseaddress": [
        "java.net.DatagramSocket.getReuseAddress()"
    ],
    "java.sql.timestamp.setnanos": [
        "java.sql.Timestamp.setNanos(int)"
    ],
    "java.awt.toolkit.createfiledialog": [
        "java.awt.Toolkit.createFileDialog(java.awt.FileDialog)"
    ],
    "javax.xml.stream.events.namespace.getnamespaceuri": [
        "javax.xml.stream.events.Namespace.getNamespaceURI()"
    ],
    "java.security.spec.rsaprivatecrtkeyspec.getcrtcoefficient": [
        "java.security.spec.RSAPrivateCrtKeySpec.getCrtCoefficient()"
    ],
    "javax.swing.text.jtextcomponent.read": [
        "javax.swing.text.JTextComponent.read(java.io.Reader,java.lang.Object)"
    ],
    "org.omg.dynamicany._dynanyfactorystub.create_dyn_any_from_type_code": [
        "org.omg.DynamicAny._DynAnyFactoryStub.create_dyn_any_from_type_code(org.omg.CORBA.TypeCode)"
    ],
    "java.util.calendar.builder.setlocale": [
        "java.util.Calendar.Builder.setLocale(java.util.Locale)"
    ],
    "javax.swing.text.navigationfilter.getnextvisualpositionfrom": [
        "javax.swing.text.NavigationFilter.getNextVisualPositionFrom(javax.swing.text.JTextComponent,int,javax.swing.text.Position.Bias,int,javax.swing.text.Position.Bias[])"
    ],
    "java.nio.floatbuffer.allocate": [
        "java.nio.FloatBuffer.allocate(int)"
    ],
    "java.lang.math.random": [
        "java.lang.Math.random()"
    ],
    "java.sql.datatruncation.gettransfersize": [
        "java.sql.DataTruncation.getTransferSize()"
    ],
    "org.omg.corba.typecode.concrete_base_type": [
        "org.omg.CORBA.TypeCode.concrete_base_type()"
    ],
    "javax.xml.ws.spi.http.httpexchange.getpathinfo": [
        "javax.xml.ws.spi.http.HttpExchange.getPathInfo()"
    ],
    "java.beans.beancontext.beancontextservicessupport.addservice": [
        "java.beans.beancontext.BeanContextServicesSupport.addService(java.lang.Class,java.beans.beancontext.BeanContextServiceProvider)",
        "java.beans.beancontext.BeanContextServicesSupport.addService(java.lang.Class,java.beans.beancontext.BeanContextServiceProvider,boolean)"
    ],
    "java.util.function.doubleunaryoperator.identity": [
        "java.util.function.DoubleUnaryOperator.identity()"
    ],
    "java.time.localdate.getlong": [
        "java.time.LocalDate.getLong(java.time.temporal.TemporalField)"
    ],
    "org.xml.sax.xmlreader.getentityresolver": [
        "org.xml.sax.XMLReader.getEntityResolver()"
    ],
    "javax.swing.undo.compoundedit.getundopresentationname": [
        "javax.swing.undo.CompoundEdit.getUndoPresentationName()"
    ],
    "java.awt.geom.rectangle2d.double.createintersection": [
        "java.awt.geom.Rectangle2D.Double.createIntersection(java.awt.geom.Rectangle2D)"
    ],
    "javax.xml.crypto.dsig.keyinfo.keyinfofactory.newkeyvalue": [
        "javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyValue(java.security.PublicKey)"
    ],
    "java.net.httpcookie.getportlist": [
        "java.net.HttpCookie.getPortlist()"
    ],
    "javax.print.printservice.hashcode": [
        "javax.print.PrintService.hashCode()"
    ],
    "javax.swing.jtable.getdragenabled": [
        "javax.swing.JTable.getDragEnabled()"
    ],
    "java.awt.image.componentcolormodel.getdataelements": [
        "java.awt.image.ComponentColorModel.getDataElements(int[],int,java.lang.Object)",
        "java.awt.image.ComponentColorModel.getDataElements(float[],int,java.lang.Object)",
        "java.awt.image.ComponentColorModel.getDataElements(int,java.lang.Object)"
    ],
    "javax.sound.midi.soundbank.getdescription": [
        "javax.sound.midi.Soundbank.getDescription()"
    ],
    "java.lang.object.notify": [
        "java.lang.Object.notify()"
    ],
    "javax.swing.plaf.multi.multidesktopiconui.installui": [
        "javax.swing.plaf.multi.MultiDesktopIconUI.installUI(javax.swing.JComponent)"
    ],
    "java.awt.window.setminimumsize": [
        "java.awt.Window.setMinimumSize(java.awt.Dimension)"
    ],
    "java.beans.xmldecoder.createhandler": [
        "java.beans.XMLDecoder.createHandler(java.lang.Object,java.beans.ExceptionListener,java.lang.ClassLoader)"
    ],
    "java.awt.component.getfocuscyclerootancestor": [
        "java.awt.Component.getFocusCycleRootAncestor()"
    ],
    "javax.rmi.corba.valuehandler.readvalue": [
        "javax.rmi.CORBA.ValueHandler.readValue(org.omg.CORBA.portable.InputStream,int,java.lang.Class,java.lang.String,org.omg.SendingContext.RunTime)"
    ],
    "javax.swing.plaf.synth.synthstyle.getcolorforstate": [
        "javax.swing.plaf.synth.SynthStyle.getColorForState(javax.swing.plaf.synth.SynthContext,javax.swing.plaf.synth.ColorType)"
    ],
    "javax.annotation.processing.processingenvironment.gettypeutils": [
        "javax.annotation.processing.ProcessingEnvironment.getTypeUtils()"
    ],
    "javax.crypto.spec.rc5parameterspec.getversion": [
        "javax.crypto.spec.RC5ParameterSpec.getVersion()"
    ],
    "java.util.linkedhashmap.values": [
        "java.util.LinkedHashMap.values()"
    ],
    "javax.activation.mailcapcommandmap.getallcommands": [
        "javax.activation.MailcapCommandMap.getAllCommands(java.lang.String)"
    ],
    "java.security.keystorespi.enginedeleteentry": [
        "java.security.KeyStoreSpi.engineDeleteEntry(java.lang.String)"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.getproperty": [
        "org.xml.sax.helpers.XMLFilterImpl.getProperty(java.lang.String)"
    ],
    "java.awt.borderlayout.getlayoutcomponent": [
        "java.awt.BorderLayout.getLayoutComponent(java.awt.Container,java.lang.Object)",
        "java.awt.BorderLayout.getLayoutComponent(java.lang.Object)"
    ],
    "org.omg.corba._policystub.policy_type": [
        "org.omg.CORBA._PolicyStub.policy_type()"
    ],
    "javax.swing.plaf.basic.basictextui.getvisibleeditorrect": [
        "javax.swing.plaf.basic.BasicTextUI.getVisibleEditorRect()"
    ],
    "org.omg.dynamicany._dynunionstub.destroy": [
        "org.omg.DynamicAny._DynUnionStub.destroy()"
    ],
    "javax.swing.tree.defaulttreecelleditor.gettreecelleditorcomponent": [
        "javax.swing.tree.DefaultTreeCellEditor.getTreeCellEditorComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int)"
    ],
    "org.w3c.dom.events.mouseevent.getscreeny": [
        "org.w3c.dom.events.MouseEvent.getScreenY()"
    ],
    "javax.swing.plaf.multi.multilistui.uninstallui": [
        "javax.swing.plaf.multi.MultiListUI.uninstallUI(javax.swing.JComponent)"
    ],
    "java.awt.renderinghints.put": [
        "java.awt.RenderingHints.put(java.lang.Object,java.lang.Object)"
    ],
    "org.xml.sax.saxexception.getexception": [
        "org.xml.sax.SAXException.getException()"
    ],
    "javax.swing.layoutfocustraversalpolicy.getcomponentbefore": [
        "javax.swing.LayoutFocusTraversalPolicy.getComponentBefore(java.awt.Container,java.awt.Component)"
    ],
    "javax.swing.plaf.multi.multilabelui.update": [
        "javax.swing.plaf.multi.MultiLabelUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.util.concurrent.threadlocalrandom.setseed": [
        "java.util.concurrent.ThreadLocalRandom.setSeed(long)"
    ],
    "org.xml.sax.errorhandler.error": [
        "org.xml.sax.ErrorHandler.error(org.xml.sax.SAXParseException)"
    ],
    "java.util.concurrent.locks.abstractqueuedlongsynchronizer.hascontended": [
        "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasContended()"
    ],
    "java.util.timezone.getdstsavings": [
        "java.util.TimeZone.getDSTSavings()"
    ],
    "java.nio.buffer.position": [
        "java.nio.Buffer.position(int)",
        "java.nio.Buffer.position()"
    ],
    "java.util.arrays.parallelsort": [
        "java.util.Arrays.parallelSort(double[])",
        "java.util.Arrays.parallelSort(T[],int,int,java.util.Comparator<? super T>)",
        "java.util.Arrays.parallelSort(int[],int,int)",
        "java.util.Arrays.parallelSort(T[],int,int)",
        "java.util.Arrays.parallelSort(T[],java.util.Comparator<? super T>)",
        "java.util.Arrays.parallelSort(byte[])",
        "java.util.Arrays.parallelSort(int[])",
        "java.util.Arrays.parallelSort(long[],int,int)",
        "java.util.Arrays.parallelSort(float[])",
        "java.util.Arrays.parallelSort(char[])",
        "java.util.Arrays.parallelSort(short[],int,int)",
        "java.util.Arrays.parallelSort(byte[],int,int)",
        "java.util.Arrays.parallelSort(long[])",
        "java.util.Arrays.parallelSort(float[],int,int)",
        "java.util.Arrays.parallelSort(double[],int,int)",
        "java.util.Arrays.parallelSort(char[],int,int)",
        "java.util.Arrays.parallelSort(short[])",
        "java.util.Arrays.parallelSort(T[])"
    ],
    "javax.security.auth.kerberos.keytab.getunboundinstance": [
        "javax.security.auth.kerberos.KeyTab.getUnboundInstance(java.io.File)",
        "javax.security.auth.kerberos.KeyTab.getUnboundInstance()"
    ],
    "javax.swing.text.html.html.unknowntag.equals": [
        "javax.swing.text.html.HTML.UnknownTag.equals(java.lang.Object)"
    ],
    "javax.management.relation.relation.setroles": [
        "javax.management.relation.Relation.setRoles(javax.management.relation.RoleList)"
    ],
    "java.awt.graphics.fillarc": [
        "java.awt.Graphics.fillArc(int,int,int,int,int,int)"
    ],
    "java.util.concurrent.blockingdeque.addfirst": [
        "java.util.concurrent.BlockingDeque.addFirst(java.util.concurrent.BlockingDeque)",
        "java.util.concurrent.BlockingDeque.addFirst(E)"
    ],
    "javax.management.objectname.hashcode": [
        "javax.management.ObjectName.hashCode()"
    ],
    "org.xml.sax.helpers.namespacesupport.getprefix": [
        "org.xml.sax.helpers.NamespaceSupport.getPrefix(java.lang.String)"
    ],
    "javax.swing.jscrollbar.getmaximumsize": [
        "javax.swing.JScrollBar.getMaximumSize()"
    ],
    "javax.xml.ws.spi.http.httpexchange.getresponsebody": [
        "javax.xml.ws.spi.http.HttpExchange.getResponseBody()"
    ],
    "javax.swing.plaf.basic.basictreeui.updatecachedpreferredsize": [
        "javax.swing.plaf.basic.BasicTreeUI.updateCachedPreferredSize()"
    ],
    "javax.swing.rowsorter.removerowsorterlistener": [
        "javax.swing.RowSorter.removeRowSorterListener(javax.swing.event.RowSorterListener)"
    ],
    "java.awt.keyboardfocusmanager.getglobalcurrentfocuscycleroot": [
        "java.awt.KeyboardFocusManager.getGlobalCurrentFocusCycleRoot()"
    ],
    "javax.lang.model.element.annotationvaluevisitor.visitbyte": [
        "javax.lang.model.element.AnnotationValueVisitor.visitByte(byte,javax.lang.model.element.AnnotationValueVisitor)"
    ],
    "javax.naming.ldap.starttlsresponse.close": [
        "javax.naming.ldap.StartTlsResponse.close()"
    ],
    "java.sql.connection.createstruct": [
        "java.sql.Connection.createStruct(java.lang.String,java.lang.Object[])",
        "java.sql.Connection.createStruct(java.lang.String,java.lang.Object)"
    ],
    "java.nio.channels.membershipkey.unblock": [
        "java.nio.channels.MembershipKey.unblock(java.net.InetAddress)"
    ],
    "java.awt.scrollpane.getviewportsize": [
        "java.awt.ScrollPane.getViewportSize()"
    ],
    "java.sql.databasemetadata.getsqlstatetype": [
        "java.sql.DatabaseMetaData.getSQLStateType()"
    ],
    "javax.xml.parsers.documentbuilderfactory.setvalidating": [
        "javax.xml.parsers.DocumentBuilderFactory.setValidating(boolean)"
    ],
    "javax.swing.text.defaultcaret.getchangelisteners": [
        "javax.swing.text.DefaultCaret.getChangeListeners()"
    ],
    "javax.lang.model.sourceversion.latestsupported": [
        "javax.lang.model.SourceVersion.latestSupported()"
    ],
    "javax.management.remote.rmi.rmijrmpserverimpl.tostub": [
        "javax.management.remote.rmi.RMIJRMPServerImpl.toStub()"
    ],
    "javax.xml.soap.soapbody.addbodyelement": [
        "javax.xml.soap.SOAPBody.addBodyElement(javax.xml.namespace.QName)",
        "javax.xml.soap.SOAPBody.addBodyElement(javax.xml.soap.Name)"
    ],
    "javax.net.ssl.httpsurlconnection.setdefaulthostnameverifier": [
        "javax.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier)"
    ],
    "java.io.pipedoutputstream.connect": [
        "java.io.PipedOutputStream.connect(java.io.PipedInputStream)"
    ],
    "java.util.function.tolongfunction.applyaslong": [
        "java.util.function.ToLongFunction.applyAsLong(java.util.function.ToLongFunction)",
        "java.util.function.ToLongFunction.applyAsLong(T)"
    ],
    "javax.lang.model.util.simpleannotationvaluevisitor6.visitannotation": [
        "javax.lang.model.util.SimpleAnnotationValueVisitor6.visitAnnotation(javax.lang.model.element.AnnotationMirror,javax.lang.model.util.SimpleAnnotationValueVisitor6)"
    ],
    "java.time.offsettime.isequal": [
        "java.time.OffsetTime.isEqual(java.time.OffsetTime)"
    ],
    "java.time.localtime.parse": [
        "java.time.LocalTime.parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)",
        "java.time.LocalTime.parse(java.lang.CharSequence)"
    ],
    "javax.sound.midi.sysexmessage.getdata": [
        "javax.sound.midi.SysexMessage.getData()"
    ],
    "java.util.function.longunaryoperator.andthen": [
        "java.util.function.LongUnaryOperator.andThen(java.util.function.LongUnaryOperator)"
    ],
    "java.time.dayofweek.getlong": [
        "java.time.DayOfWeek.getLong(java.time.temporal.TemporalField)"
    ],
    "java.awt.graphics.getfontmetrics": [
        "java.awt.Graphics.getFontMetrics(java.awt.Font)",
        "java.awt.Graphics.getFontMetrics()"
    ],
    "java.awt.graphicsenvironment.isheadlessinstance": [
        "java.awt.GraphicsEnvironment.isHeadlessInstance()"
    ],
    "javax.swing.plaf.metal.metalborders.getbuttonborder": [
        "javax.swing.plaf.metal.MetalBorders.getButtonBorder()"
    ],
    "javax.management.openmbean.tabulardata.hashcode": [
        "javax.management.openmbean.TabularData.hashCode()"
    ],
    "javax.print.event.printjobevent.getprintjob": [
        "javax.print.event.PrintJobEvent.getPrintJob()"
    ],
    "java.io.stringwriter.getbuffer": [
        "java.io.StringWriter.getBuffer()"
    ],
    "java.util.stream.doublestream.maptolong": [
        "java.util.stream.DoubleStream.mapToLong(java.util.function.DoubleToLongFunction)"
    ],
    "javax.swing.uimanager.getpropertychangelisteners": [
        "javax.swing.UIManager.getPropertyChangeListeners()"
    ],
    "java.awt.choice.addnotify": [
        "java.awt.Choice.addNotify()"
    ],
    "javax.management.standardmbean.getcachedmbeaninfo": [
        "javax.management.StandardMBean.getCachedMBeanInfo()"
    ],
    "javax.swing.jinternalframe.getmostrecentfocusowner": [
        "javax.swing.JInternalFrame.getMostRecentFocusOwner()"
    ],
    "javax.swing.plaf.multi.multitabbedpaneui.uninstallui": [
        "javax.swing.plaf.multi.MultiTabbedPaneUI.uninstallUI(javax.swing.JComponent)"
    ],
    "javax.swing.jpasswordfield.cut": [
        "javax.swing.JPasswordField.cut()"
    ],
    "java.awt.textarea.replacerange": [
        "java.awt.TextArea.replaceRange(java.lang.String,int,int)"
    ],
    "java.nio.charset.unmappablecharacterexception.getinputlength": [
        "java.nio.charset.UnmappableCharacterException.getInputLength()"
    ],
    "java.util.concurrent.atomic.atomicmarkablereference.attemptmark": [
        "java.util.concurrent.atomic.AtomicMarkableReference.attemptMark(java.util.concurrent.atomic.AtomicMarkableReference,boolean)",
        "java.util.concurrent.atomic.AtomicMarkableReference.attemptMark(V,boolean)"
    ],
    "java.io.dataoutput.writeutf": [
        "java.io.DataOutput.writeUTF(java.lang.String)"
    ],
    "javax.imageio.imagewriter.writeinsert": [
        "javax.imageio.ImageWriter.writeInsert(int,javax.imageio.IIOImage,javax.imageio.ImageWriteParam)"
    ],
    "javax.sound.midi.midisystem.isfiletypesupported": [
        "javax.sound.midi.MidiSystem.isFileTypeSupported(int)",
        "javax.sound.midi.MidiSystem.isFileTypeSupported(int,javax.sound.midi.Sequence)"
    ],
    "javax.imageio.stream.imageoutputstream.writedouble": [
        "javax.imageio.stream.ImageOutputStream.writeDouble(double)"
    ],
    "java.math.biginteger.longvalueexact": [
        "java.math.BigInteger.longValueExact()"
    ],
    "java.util.stream.intstream.anymatch": [
        "java.util.stream.IntStream.anyMatch(java.util.function.IntPredicate)"
    ],
    "javax.swing.abstractaction.getvalue": [
        "javax.swing.AbstractAction.getValue(java.lang.String)"
    ],
    "java.security.algorithmparametersspi.enginegetencoded": [
        "java.security.AlgorithmParametersSpi.engineGetEncoded(java.lang.String)",
        "java.security.AlgorithmParametersSpi.engineGetEncoded()"
    ],
    "java.lang.thread.isinterrupted": [
        "java.lang.Thread.isInterrupted()"
    ],
    "javax.swing.jmenuitem.getuiclassid": [
        "javax.swing.JMenuItem.getUIClassID()"
    ],
    "javax.xml.crypto.dsig.keyinfo.keyinfofactory.newkeyname": [
        "javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyName(java.lang.String)"
    ],
    "java.time.offsetdatetime.minusmonths": [
        "java.time.OffsetDateTime.minusMonths(long)"
    ],
    "java.lang.reflect.field.getname": [
        "java.lang.reflect.Field.getName()"
    ],
    "javax.imageio.imagereader.setinput": [
        "javax.imageio.ImageReader.setInput(java.lang.Object,boolean)",
        "javax.imageio.ImageReader.setInput(java.lang.Object,boolean,boolean)",
        "javax.imageio.ImageReader.setInput(java.lang.Object)"
    ],
    "java.time.instant.getnano": [
        "java.time.Instant.getNano()"
    ],
    "java.awt.printjob.finalize": [
        "java.awt.PrintJob.finalize()"
    ],
    "javax.security.auth.callback.passwordcallback.getprompt": [
        "javax.security.auth.callback.PasswordCallback.getPrompt()"
    ],
    "java.util.concurrent.concurrentskiplistmap.computeifabsent": [
        "java.util.concurrent.ConcurrentSkipListMap.computeIfAbsent(K,java.util.function.Function<? super,? extends V>)",
        "java.util.concurrent.ConcurrentSkipListMap.computeIfAbsent(java.util.concurrent.ConcurrentSkipListMap,java.util.function.Function<? super,? extends java.util.concurrent.ConcurrentSkipListMap>)"
    ],
    "java.lang.reflect.field.hashcode": [
        "java.lang.reflect.Field.hashCode()"
    ],
    "javax.swing.text.tabset.tostring": [
        "javax.swing.text.TabSet.toString()"
    ],
    "java.util.function.intunaryoperator.compose": [
        "java.util.function.IntUnaryOperator.compose(java.util.function.IntUnaryOperator)"
    ],
    "javax.naming.linkexception.getlinkexplanation": [
        "javax.naming.LinkException.getLinkExplanation()"
    ],
    "java.awt.font.textlayout.clone": [
        "java.awt.font.TextLayout.clone()"
    ],
    "javax.crypto.exemptionmechanism.getprovider": [
        "javax.crypto.ExemptionMechanism.getProvider()"
    ],
    "java.sql.blob.free": [
        "java.sql.Blob.free()"
    ],
    "java.util.concurrent.atomic.atomicreferencearray.accumulateandget": [
        "java.util.concurrent.atomic.AtomicReferenceArray.accumulateAndGet(int,E,java.util.function.BinaryOperator<E>)",
        "java.util.concurrent.atomic.AtomicReferenceArray.accumulateAndGet(int,java.util.concurrent.atomic.AtomicReferenceArray,java.util.function.BinaryOperator<java.util.concurrent.atomic.AtomicReferenceArray>)"
    ],
    "javax.management.query.leq": [
        "javax.management.Query.leq(javax.management.ValueExp,javax.management.ValueExp)"
    ],
    "javax.swing.text.styleconstants.setstrikethrough": [
        "javax.swing.text.StyleConstants.setStrikeThrough(javax.swing.text.MutableAttributeSet,boolean)"
    ],
    "java.awt.image.indexcolormodel.getreds": [
        "java.awt.image.IndexColorModel.getReds(byte[])"
    ],
    "javax.swing.plaf.metal.defaultmetaltheme.getwindowtitlefont": [
        "javax.swing.plaf.metal.DefaultMetalTheme.getWindowTitleFont()"
    ],
    "java.awt.event.inputevent.getmodifiersex": [
        "java.awt.event.InputEvent.getModifiersEx()"
    ],
    "org.omg.dynamicany._dynfixedstub.get_value": [
        "org.omg.DynamicAny._DynFixedStub.get_value()"
    ],
    "java.lang.system.setin": [
        "java.lang.System.setIn(java.io.InputStream)"
    ],
    "javax.management.relation.relation.getrole": [
        "javax.management.relation.Relation.getRole(java.lang.String)"
    ],
    "org.omg.dynamicany.dynfixedoperations.get_value": [
        "org.omg.DynamicAny.DynFixedOperations.get_value()"
    ],
    "java.util.timezone.clone": [
        "java.util.TimeZone.clone()"
    ],
    "javax.imageio.metadata.iiometadata.setfromtree": [
        "javax.imageio.metadata.IIOMetadata.setFromTree(java.lang.String,org.w3c.dom.Node)"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.fatalerror": [
        "org.xml.sax.helpers.XMLFilterImpl.fatalError(org.xml.sax.SAXParseException)"
    ],
    "java.awt.font.linemetrics.getstrikethroughthickness": [
        "java.awt.font.LineMetrics.getStrikethroughThickness()"
    ],
    "java.awt.component.removeinputmethodlistener": [
        "java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"
    ],
    "javax.swing.jtextfield.gethorizontalvisibility": [
        "javax.swing.JTextField.getHorizontalVisibility()"
    ],
    "javax.print.printservicelookup.lookupdefaultprintservice": [
        "javax.print.PrintServiceLookup.lookupDefaultPrintService()"
    ],
    "javax.net.ssl.sslengine.getpeerhost": [
        "javax.net.ssl.SSLEngine.getPeerHost()"
    ],
    "javax.swing.text.abstractdocument.content.remove": [
        "javax.swing.text.AbstractDocument.Content.remove(int,int)"
    ],
    "java.awt.font.numericshaper.hashcode": [
        "java.awt.font.NumericShaper.hashCode()"
    ],
    "java.util.concurrent.executorservice.invokeall": [
        "java.util.concurrent.ExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>)",
        "java.util.concurrent.ExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>,long,java.util.concurrent.TimeUnit)"
    ],
    "javax.xml.soap.soapelement.addattribute": [
        "javax.xml.soap.SOAPElement.addAttribute(javax.xml.namespace.QName,java.lang.String)",
        "javax.xml.soap.SOAPElement.addAttribute(javax.xml.soap.Name,java.lang.String)"
    ],
    "javax.xml.datatype.duration.subtract": [
        "javax.xml.datatype.Duration.subtract(javax.xml.datatype.Duration)"
    ],
    "org.ietf.jgss.gssmanager.createcredential": [
        "org.ietf.jgss.GSSManager.createCredential(int)",
        "org.ietf.jgss.GSSManager.createCredential(org.ietf.jgss.GSSName,int,org.ietf.jgss.Oid,int)",
        "org.ietf.jgss.GSSManager.createCredential(org.ietf.jgss.GSSName,int,org.ietf.jgss.Oid[],int)"
    ],
    "javax.script.scriptenginefactory.getparameter": [
        "javax.script.ScriptEngineFactory.getParameter(java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthtextareaui.getcontext": [
        "javax.swing.plaf.synth.SynthTextAreaUI.getContext(javax.swing.JComponent)"
    ],
    "java.nio.channels.datagramchannel.getremoteaddress": [
        "java.nio.channels.DatagramChannel.getRemoteAddress()"
    ],
    "java.sql.sqloutput.writebinarystream": [
        "java.sql.SQLOutput.writeBinaryStream(java.io.InputStream)"
    ],
    "javax.accessibility.accessiblerelationset.contains": [
        "javax.accessibility.AccessibleRelationSet.contains(java.lang.String)"
    ],
    "javax.swing.table.jtableheader.settable": [
        "javax.swing.table.JTableHeader.setTable(javax.swing.JTable)"
    ],
    "org.omg.corba.datainputstream.read_float": [
        "org.omg.CORBA.DataInputStream.read_float()"
    ],
    "javax.swing.text.boxview.layout": [
        "javax.swing.text.BoxView.layout(int,int)"
    ],
    "javax.xml.soap.soapelement.getencodingstyle": [
        "javax.xml.soap.SOAPElement.getEncodingStyle()"
    ],
    "javax.imageio.metadata.iiometadata.getstandardchromanode": [
        "javax.imageio.metadata.IIOMetadata.getStandardChromaNode()"
    ],
    "java.security.spec.pkcs8encodedkeyspec.getformat": [
        "java.security.spec.PKCS8EncodedKeySpec.getFormat()"
    ],
    "java.util.logging.handler.setlevel": [
        "java.util.logging.Handler.setLevel(java.util.logging.Level)"
    ],
    "javax.swing.text.paragraphview.getpartialsize": [
        "javax.swing.text.ParagraphView.getPartialSize(int,int)"
    ],
    "java.time.localdate.getdayofmonth": [
        "java.time.LocalDate.getDayOfMonth()"
    ],
    "java.util.concurrent.scheduledthreadpoolexecutor.decoratetask": [
        "java.util.concurrent.ScheduledThreadPoolExecutor.decorateTask(java.util.concurrent.Callable<V>,java.util.concurrent.RunnableScheduledFuture<V>)",
        "java.util.concurrent.ScheduledThreadPoolExecutor.decorateTask(java.lang.Runnable,java.util.concurrent.RunnableScheduledFuture<V>)"
    ],
    "java.util.logging.handler.getfilter": [
        "java.util.logging.Handler.getFilter()"
    ],
    "javax.swing.table.tablecelleditor.gettablecelleditorcomponent": [
        "javax.swing.table.TableCellEditor.getTableCellEditorComponent(javax.swing.JTable,java.lang.Object,boolean,int,int)"
    ],
    "java.util.concurrent.atomic.atomiclongarray.decrementandget": [
        "java.util.concurrent.atomic.AtomicLongArray.decrementAndGet(int)"
    ],
    "java.awt.geom.rectangle2d.getbounds2d": [
        "java.awt.geom.Rectangle2D.getBounds2D()"
    ],
    "java.nio.bytebuffer.allocatedirect": [
        "java.nio.ByteBuffer.allocateDirect(int)"
    ],
    "java.lang.threadgroup.getmaxpriority": [
        "java.lang.ThreadGroup.getMaxPriority()"
    ],
    "javax.sql.rowset.serial.serialjavaobject.getfields": [
        "javax.sql.rowset.serial.SerialJavaObject.getFields()"
    ],
    "javax.net.ssl.handshakecompletedevent.getsocket": [
        "javax.net.ssl.HandshakeCompletedEvent.getSocket()"
    ],
    "java.lang.reflect.array.set": [
        "java.lang.reflect.Array.set(java.lang.Object,int,java.lang.Object)"
    ],
    "java.beans.featuredescriptor.setvalue": [
        "java.beans.FeatureDescriptor.setValue(java.lang.String,java.lang.Object)"
    ],
    "javax.tools.documentationtool.gettask": [
        "javax.tools.DocumentationTool.getTask(java.io.Writer,javax.tools.JavaFileManager,javax.tools.DiagnosticListener<? super javax.tools.JavaFileObject>,java.lang.Class<?>,java.lang.Iterable<java.lang.String>,java.lang.Iterable<? extends javax.tools.JavaFileObject>)"
    ],
    "javax.swing.table.tablecolumn.removepropertychangelistener": [
        "javax.swing.table.TableColumn.removePropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "javax.sql.rowset.cachedrowset.getkeycolumns": [
        "javax.sql.rowset.CachedRowSet.getKeyColumns()"
    ],
    "javax.swing.text.labelview.getfont": [
        "javax.swing.text.LabelView.getFont()"
    ],
    "javax.swing.spinnerdatemodel.getpreviousvalue": [
        "javax.swing.SpinnerDateModel.getPreviousValue()"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.installui": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.installUI(javax.swing.JComponent)"
    ],
    "javax.xml.crypto.urireferenceexception.geturireference": [
        "javax.xml.crypto.URIReferenceException.getURIReference()"
    ],
    "javax.accessibility.accessibleextendedtext.gettextsequenceat": [
        "javax.accessibility.AccessibleExtendedText.getTextSequenceAt(int,int)"
    ],
    "java.security.cert.certificate.gettype": [
        "java.security.cert.Certificate.getType()"
    ],
    "javax.swing.text.html.parser.entity.gettype": [
        "javax.swing.text.html.parser.Entity.getType()"
    ],
    "java.awt.geom.arc2d.setanglestart": [
        "java.awt.geom.Arc2D.setAngleStart(java.awt.geom.Point2D)",
        "java.awt.geom.Arc2D.setAngleStart(double)"
    ],
    "java.time.format.datetimeformatterbuilder.parsestrict": [
        "java.time.format.DateTimeFormatterBuilder.parseStrict()"
    ],
    "javax.management.attributelist.set": [
        "javax.management.AttributeList.set(int,java.lang.Object)",
        "javax.management.AttributeList.set(int,javax.management.Attribute)"
    ],
    "java.awt.font.glyphvector.getglyphcharindices": [
        "java.awt.font.GlyphVector.getGlyphCharIndices(int,int,int[])"
    ],
    "javax.swing.jcombobox.selectwithkeychar": [
        "javax.swing.JComboBox.selectWithKeyChar(char)"
    ],
    "javax.print.docprintjob.removeprintjobattributelistener": [
        "javax.print.DocPrintJob.removePrintJobAttributeListener(javax.print.event.PrintJobAttributeListener)"
    ],
    "java.beans.beancontext.beancontextchildsupport.firepropertychange": [
        "java.beans.beancontext.BeanContextChildSupport.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)"
    ],
    "java.util.comparator.comparingint": [
        "java.util.Comparator.comparingInt(java.util.function.ToIntFunction<? super T>)"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.iswritelockedbycurrentthread": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.isWriteLockedByCurrentThread()"
    ],
    "javax.swing.text.wrappedplainview.removeupdate": [
        "javax.swing.text.WrappedPlainView.removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "java.time.localdate.minusweeks": [
        "java.time.LocalDate.minusWeeks(long)"
    ],
    "java.sql.databasemetadata.supportscorrelatedsubqueries": [
        "java.sql.DatabaseMetaData.supportsCorrelatedSubqueries()"
    ],
    "javax.swing.text.flowview.layout": [
        "javax.swing.text.FlowView.layout(int,int)"
    ],
    "org.omg.dynamicany._dynenumstub.insert_ulong": [
        "org.omg.DynamicAny._DynEnumStub.insert_ulong(int)"
    ],
    "java.nio.file.files.walkfiletree": [
        "java.nio.file.Files.walkFileTree(java.nio.file.Path,java.nio.file.FileVisitor<? super java.nio.file.Path>)",
        "java.nio.file.Files.walkFileTree(java.nio.file.Path,java.util.Set<java.nio.file.FileVisitOption>,int,java.nio.file.FileVisitor<? super java.nio.file.Path>)"
    ],
    "java.time.dayofweek.getvalue": [
        "java.time.DayOfWeek.getValue()"
    ],
    "java.util.abstractmap.tostring": [
        "java.util.AbstractMap.toString()"
    ],
    "javax.swing.plaf.synth.synthtreeui.getrowx": [
        "javax.swing.plaf.synth.SynthTreeUI.getRowX(int,int)"
    ],
    "javax.xml.parsers.documentbuilder.setentityresolver": [
        "javax.xml.parsers.DocumentBuilder.setEntityResolver(org.xml.sax.EntityResolver)"
    ],
    "java.sql.clob.getsubstring": [
        "java.sql.Clob.getSubString(long,int)"
    ],
    "javax.swing.plaf.basic.basicpasswordfieldui.createui": [
        "javax.swing.plaf.basic.BasicPasswordFieldUI.createUI(javax.swing.JComponent)"
    ],
    "javax.swing.jcomponent.setinheritspopupmenu": [
        "javax.swing.JComponent.setInheritsPopupMenu(boolean)"
    ],
    "javax.swing.undo.undomanager.discardalledits": [
        "javax.swing.undo.UndoManager.discardAllEdits()"
    ],
    "javax.xml.transform.sax.saxtransformerfactory.newxmlfilter": [
        "javax.xml.transform.sax.SAXTransformerFactory.newXMLFilter(javax.xml.transform.Templates)",
        "javax.xml.transform.sax.SAXTransformerFactory.newXMLFilter(javax.xml.transform.Source)"
    ],
    "javax.swing.sizesequence.setsize": [
        "javax.swing.SizeSequence.setSize(int,int)"
    ],
    "java.time.chrono.hijrahdate.equals": [
        "java.time.chrono.HijrahDate.equals(java.lang.Object)"
    ],
    "java.io.pipedinputstream.available": [
        "java.io.PipedInputStream.available()"
    ],
    "java.awt.geom.rectangle2d.float.getwidth": [
        "java.awt.geom.Rectangle2D.Float.getWidth()"
    ],
    "java.awt.component.getinputcontext": [
        "java.awt.Component.getInputContext()"
    ],
    "javax.swing.event.treeselectionevent.getoldleadselectionpath": [
        "javax.swing.event.TreeSelectionEvent.getOldLeadSelectionPath()"
    ],
    "javax.naming.directory.searchcontrols.getreturningobjflag": [
        "javax.naming.directory.SearchControls.getReturningObjFlag()"
    ],
    "javax.net.ssl.httpsurlconnection.getdefaulthostnameverifier": [
        "javax.net.ssl.HttpsURLConnection.getDefaultHostnameVerifier()"
    ],
    "javax.activation.mimetype.setparameter": [
        "javax.activation.MimeType.setParameter(java.lang.String,java.lang.String)"
    ],
    "java.sql.resultset.movetoinsertrow": [
        "java.sql.ResultSet.moveToInsertRow()"
    ],
    "java.util.linkedlist.lastindexof": [
        "java.util.LinkedList.lastIndexOf(java.lang.Object)"
    ],
    "java.awt.awteventmulticaster.caretpositionchanged": [
        "java.awt.AWTEventMulticaster.caretPositionChanged(java.awt.event.InputMethodEvent)"
    ],
    "java.util.linkedlist.getfirst": [
        "java.util.LinkedList.getFirst()"
    ],
    "java.util.vector.hashcode": [
        "java.util.Vector.hashCode()"
    ],
    "java.io.pipedreader.connect": [
        "java.io.PipedReader.connect(java.io.PipedWriter)"
    ],
    "java.util.stream.streamsupport.stream": [
        "java.util.stream.StreamSupport.stream(java.util.Spliterator<T>,boolean)",
        "java.util.stream.StreamSupport.stream(java.util.function.Supplier<? extends java.util.Spliterator<T>>,int,boolean)"
    ],
    "org.omg.dynamicany._dynarraystub.insert_longlong": [
        "org.omg.DynamicAny._DynArrayStub.insert_longlong(long)"
    ],
    "java.time.chrono.chronolocaldate.minus": [
        "java.time.chrono.ChronoLocalDate.minus(long,java.time.temporal.TemporalUnit)",
        "java.time.chrono.ChronoLocalDate.minus(java.time.temporal.TemporalAmount)"
    ],
    "javax.swing.jtooltip.setcomponent": [
        "javax.swing.JToolTip.setComponent(javax.swing.JComponent)"
    ],
    "java.util.gregoriancalendar.getgreatestminimum": [
        "java.util.GregorianCalendar.getGreatestMinimum(int)"
    ],
    "java.time.chrono.chronoperiod.plus": [
        "java.time.chrono.ChronoPeriod.plus(java.time.temporal.TemporalAmount)"
    ],
    "javax.swing.text.html.htmldocument.fireundoableeditupdate": [
        "javax.swing.text.html.HTMLDocument.fireUndoableEditUpdate(javax.swing.event.UndoableEditEvent)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getwindowtitlebackground": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleBackground()"
    ],
    "java.lang.strictmath.floormod": [
        "java.lang.StrictMath.floorMod(int,int)",
        "java.lang.StrictMath.floorMod(long,long)"
    ],
    "java.awt.graphicsconfiguration.getdefaulttransform": [
        "java.awt.GraphicsConfiguration.getDefaultTransform()"
    ],
    "java.math.mathcontext.hashcode": [
        "java.math.MathContext.hashCode()"
    ],
    "org.omg.corba.any.extract_string": [
        "org.omg.CORBA.Any.extract_string()"
    ],
    "java.lang.character.tostring": [
        "java.lang.Character.toString(char)",
        "java.lang.Character.toString()"
    ],
    "javax.management.jmx.newmbeanproxy": [
        "javax.management.JMX.newMBeanProxy(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class<T>)",
        "javax.management.JMX.newMBeanProxy(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class<T>,boolean)"
    ],
    "javax.lang.model.util.elementkindvisitor6.visittype": [
        "javax.lang.model.util.ElementKindVisitor6.visitType(javax.lang.model.element.TypeElement,javax.lang.model.util.ElementKindVisitor6)"
    ],
    "java.nio.file.path.resolvesibling": [
        "java.nio.file.Path.resolveSibling(java.nio.file.Path)",
        "java.nio.file.Path.resolveSibling(java.lang.String)"
    ],
    "java.lang.management.threadinfo.tostring": [
        "java.lang.management.ThreadInfo.toString()"
    ],
    "java.time.chrono.hijrahera.values": [
        "java.time.chrono.HijrahEra.values()"
    ],
    "javax.imageio.imagewriteparam.gettilegridyoffset": [
        "javax.imageio.ImageWriteParam.getTileGridYOffset()"
    ],
    "javax.swing.text.segment.next": [
        "javax.swing.text.Segment.next()"
    ],
    "java.io.dataoutput.writeint": [
        "java.io.DataOutput.writeInt(int)"
    ],
    "javax.naming.ldap.ldapname.clone": [
        "javax.naming.ldap.LdapName.clone()"
    ],
    "java.util.deque.peekfirst": [
        "java.util.Deque.peekFirst()"
    ],
    "javax.management.monitor.countermonitor.setdifferencemode": [
        "javax.management.monitor.CounterMonitor.setDifferenceMode(boolean)"
    ],
    "javax.swing.plaf.synth.synthtabbedpaneui.createui": [
        "javax.swing.plaf.synth.SynthTabbedPaneUI.createUI(javax.swing.JComponent)"
    ],
    "javax.imageio.imagereadparam.setsourcerendersize": [
        "javax.imageio.ImageReadParam.setSourceRenderSize(java.awt.Dimension)"
    ],
    "java.time.zoneid.getdisplayname": [
        "java.time.ZoneId.getDisplayName(java.time.format.TextStyle,java.util.Locale)"
    ],
    "javax.imageio.iioparam.setsourcesubsampling": [
        "javax.imageio.IIOParam.setSourceSubsampling(int,int,int,int)"
    ],
    "javax.sound.sampled.enumcontrol.tostring": [
        "javax.sound.sampled.EnumControl.toString()"
    ],
    "javax.xml.bind.helpers.abstractunmarshallerimpl.isvalidating": [
        "javax.xml.bind.helpers.AbstractUnmarshallerImpl.isValidating()"
    ],
    "java.awt.defaultkeyboardfocusmanager.postprocesskeyevent": [
        "java.awt.DefaultKeyboardFocusManager.postProcessKeyEvent(java.awt.event.KeyEvent)"
    ],
    "java.awt.color.colorspace.fromciexyz": [
        "java.awt.color.ColorSpace.fromCIEXYZ(float[])"
    ],
    "java.text.decimalformatsymbols.getpercent": [
        "java.text.DecimalFormatSymbols.getPercent()"
    ],
    "org.omg.portableinterceptor.interceptoroperations.name": [
        "org.omg.PortableInterceptor.InterceptorOperations.name()"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writerowid": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeRowId(java.sql.RowId)"
    ],
    "javax.swing.plaf.synth.synthprogressbarui.getpreferredsize": [
        "javax.swing.plaf.synth.SynthProgressBarUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "java.security.cert.x509crl.getencoded": [
        "java.security.cert.X509CRL.getEncoded()"
    ],
    "java.awt.image.bufferedimage.isalphapremultiplied": [
        "java.awt.image.BufferedImage.isAlphaPremultiplied()"
    ],
    "javax.imageio.metadata.iiometadata.getdefaultcontroller": [
        "javax.imageio.metadata.IIOMetadata.getDefaultController()"
    ],
    "javax.management.attribute.equals": [
        "javax.management.Attribute.equals(java.lang.Object)"
    ],
    "javax.swing.plaf.basic.basictreeui.updatecelleditor": [
        "javax.swing.plaf.basic.BasicTreeUI.updateCellEditor()"
    ],
    "java.net.urlstreamhandler.hostsequal": [
        "java.net.URLStreamHandler.hostsEqual(java.net.URL,java.net.URL)"
    ],
    "javax.naming.directory.attributes.getids": [
        "javax.naming.directory.Attributes.getIDs()"
    ],
    "javax.sound.midi.track.size": [
        "javax.sound.midi.Track.size()"
    ],
    "java.awt.geom.affinetransform.createinverse": [
        "java.awt.geom.AffineTransform.createInverse()"
    ],
    "javax.swing.imageicon.loadimage": [
        "javax.swing.ImageIcon.loadImage(java.awt.Image)"
    ],
    "javax.swing.text.stylededitorkit.styledtextaction.getstylededitorkit": [
        "javax.swing.text.StyledEditorKit.StyledTextAction.getStyledEditorKit(javax.swing.JEditorPane)"
    ],
    "javax.swing.tree.treeselectionmodel.getleadselectionrow": [
        "javax.swing.tree.TreeSelectionModel.getLeadSelectionRow()"
    ],
    "java.awt.list.setmultiplemode": [
        "java.awt.List.setMultipleMode(boolean)"
    ],
    "javax.print.attribute.standard.orientationrequested.getoffset": [
        "javax.print.attribute.standard.OrientationRequested.getOffset()"
    ],
    "javax.swing.jframe.setdefaultcloseoperation": [
        "javax.swing.JFrame.setDefaultCloseOperation(int)"
    ],
    "javax.lang.model.element.typeelement.getenclosedelements": [
        "javax.lang.model.element.TypeElement.getEnclosedElements()"
    ],
    "javax.swing.text.paragraphview.getlayoutview": [
        "javax.swing.text.ParagraphView.getLayoutView(int)"
    ],
    "javax.swing.jtable.getcolumnname": [
        "javax.swing.JTable.getColumnName(int)"
    ],
    "javax.swing.text.keymap.removebindings": [
        "javax.swing.text.Keymap.removeBindings()"
    ],
    "java.net.datagramsocket.receive": [
        "java.net.DatagramSocket.receive(java.net.DatagramPacket)"
    ],
    "java.awt.image.renderable.renderableimageop.getminx": [
        "java.awt.image.renderable.RenderableImageOp.getMinX()"
    ],
    "java.awt.alphacomposite.derive": [
        "java.awt.AlphaComposite.derive(float)",
        "java.awt.AlphaComposite.derive(int)"
    ],
    "javax.swing.tree.treeselectionmodel.addtreeselectionlistener": [
        "javax.swing.tree.TreeSelectionModel.addTreeSelectionListener(javax.swing.event.TreeSelectionListener)"
    ],
    "java.awt.dialog.setopacity": [
        "java.awt.Dialog.setOpacity(float)"
    ],
    "javax.swing.jslider.setextent": [
        "javax.swing.JSlider.setExtent(int)"
    ],
    "javax.swing.jslider.paramstring": [
        "javax.swing.JSlider.paramString()"
    ],
    "java.net.socketimpl.getinputstream": [
        "java.net.SocketImpl.getInputStream()"
    ],
    "java.util.concurrent.copyonwritearraylist.iterator": [
        "java.util.concurrent.CopyOnWriteArrayList.iterator()"
    ],
    "javax.swing.text.fieldview.insertupdate": [
        "javax.swing.text.FieldView.insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "javax.swing.jmenuitem.getcomponent": [
        "javax.swing.JMenuItem.getComponent()"
    ],
    "javax.imageio.stream.imageinputstream.skipbytes": [
        "javax.imageio.stream.ImageInputStream.skipBytes(long)",
        "javax.imageio.stream.ImageInputStream.skipBytes(int)"
    ],
    "java.util.spliterators.abstractintspliterator.trysplit": [
        "java.util.Spliterators.AbstractIntSpliterator.trySplit()"
    ],
    "java.awt.component.isbackgroundset": [
        "java.awt.Component.isBackgroundSet()"
    ],
    "java.net.urlclassloader.addurl": [
        "java.net.URLClassLoader.addURL(java.net.URL)"
    ],
    "javax.xml.stream.util.xmleventallocator.allocate": [
        "javax.xml.stream.util.XMLEventAllocator.allocate(javax.xml.stream.XMLStreamReader)",
        "javax.xml.stream.util.XMLEventAllocator.allocate(javax.xml.stream.XMLStreamReader,javax.xml.stream.util.XMLEventConsumer)"
    ],
    "org.xml.sax.ext.locator2impl.getencoding": [
        "org.xml.sax.ext.Locator2Impl.getEncoding()"
    ],
    "java.lang.reflect.invocationtargetexception.gettargetexception": [
        "java.lang.reflect.InvocationTargetException.getTargetException()"
    ],
    "javax.swing.jtabbedpane.getbackgroundat": [
        "javax.swing.JTabbedPane.getBackgroundAt(int)"
    ],
    "javax.swing.plaf.synth.synthformattedtextfieldui.getpropertyprefix": [
        "javax.swing.plaf.synth.SynthFormattedTextFieldUI.getPropertyPrefix()"
    ],
    "javax.management.objectname.equals": [
        "javax.management.ObjectName.equals(java.lang.Object)"
    ],
    "java.io.externalizable.readexternal": [
        "java.io.Externalizable.readExternal(java.io.ObjectInput)"
    ],
    "javax.swing.tree.defaulttreemodel.getindexofchild": [
        "javax.swing.tree.DefaultTreeModel.getIndexOfChild(java.lang.Object,java.lang.Object)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getcontroltextfont": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getControlTextFont()"
    ],
    "javax.swing.table.tablecolumn.getpropertychangelisteners": [
        "javax.swing.table.TableColumn.getPropertyChangeListeners()"
    ],
    "java.util.serviceloader.iterator": [
        "java.util.ServiceLoader.iterator()"
    ],
    "javax.swing.rowsorter.getmodel": [
        "javax.swing.RowSorter.getModel()"
    ],
    "java.lang.byte.tostring": [
        "java.lang.Byte.toString()",
        "java.lang.Byte.toString(byte)"
    ],
    "org.omg.portableinterceptor.iorinfooperations.current_factory": [
        "org.omg.PortableInterceptor.IORInfoOperations.current_factory()",
        "org.omg.PortableInterceptor.IORInfoOperations.current_factory(org.omg.PortableInterceptor.ObjectReferenceFactory)"
    ],
    "javax.sound.sampled.port.info.getname": [
        "javax.sound.sampled.Port.Info.getName()"
    ],
    "org.ietf.jgss.gssname.isanonymous": [
        "org.ietf.jgss.GSSName.isAnonymous()"
    ],
    "java.security.interfaces.rsamultiprimeprivatecrtkey.getcrtcoefficient": [
        "java.security.interfaces.RSAMultiPrimePrivateCrtKey.getCrtCoefficient()"
    ],
    "javax.management.modelmbean.modelmbeannotificationinfo.tostring": [
        "javax.management.modelmbean.ModelMBeanNotificationInfo.toString()"
    ],
    "java.lang.classloader.setpackageassertionstatus": [
        "java.lang.ClassLoader.setPackageAssertionStatus(java.lang.String,boolean)"
    ],
    "org.xml.sax.xmlreader.setcontenthandler": [
        "org.xml.sax.XMLReader.setContentHandler(org.xml.sax.ContentHandler)"
    ],
    "java.security.cert.x509certselector.getserialnumber": [
        "java.security.cert.X509CertSelector.getSerialNumber()"
    ],
    "org.omg.dynamicany._dynunionstub.insert_val": [
        "org.omg.DynamicAny._DynUnionStub.insert_val(java.io.Serializable)"
    ],
    "javax.xml.bind.datatypeconverter.printdate": [
        "javax.xml.bind.DatatypeConverter.printDate(java.util.Calendar)"
    ],
    "java.lang.reflect.field.setboolean": [
        "java.lang.reflect.Field.setBoolean(java.lang.Object,boolean)"
    ],
    "javax.management.timer.timermbean.getnotificationids": [
        "javax.management.timer.TimerMBean.getNotificationIDs(java.lang.String)"
    ],
    "java.awt.image.databuffer.setelemfloat": [
        "java.awt.image.DataBuffer.setElemFloat(int,int,float)"
    ],
    "javax.swing.plaf.basic.basiclistui.createmouseinputlistener": [
        "javax.swing.plaf.basic.BasicListUI.createMouseInputListener()"
    ],
    "javax.swing.text.compositeview.setparent": [
        "javax.swing.text.CompositeView.setParent(javax.swing.text.View)"
    ],
    "javax.sound.midi.midifileformat.getdivisiontype": [
        "javax.sound.midi.MidiFileFormat.getDivisionType()"
    ],
    "java.util.concurrent.forkjointask.compareandsetforkjointasktag": [
        "java.util.concurrent.ForkJoinTask.compareAndSetForkJoinTaskTag(short,short)"
    ],
    "java.util.bitset.or": [
        "java.util.BitSet.or(java.util.BitSet)"
    ],
    "javax.swing.plaf.synth.synthlabelui.getcontext": [
        "javax.swing.plaf.synth.SynthLabelUI.getContext(javax.swing.JComponent)"
    ],
    "javax.swing.filechooser.filenameextensionfilter.getextensions": [
        "javax.swing.filechooser.FileNameExtensionFilter.getExtensions()"
    ],
    "java.awt.image.renderedimage.getmintiley": [
        "java.awt.image.RenderedImage.getMinTileY()"
    ],
    "java.awt.image.bufferedimage.gettileheight": [
        "java.awt.image.BufferedImage.getTileHeight()"
    ],
    "java.awt.image.renderable.rendercontext.concatenatetransform": [
        "java.awt.image.renderable.RenderContext.concatenateTransform(java.awt.geom.AffineTransform)"
    ],
    "javax.swing.text.abstractdocument.content.getstring": [
        "javax.swing.text.AbstractDocument.Content.getString(int,int)"
    ],
    "java.lang.integer.tohexstring": [
        "java.lang.Integer.toHexString(int)"
    ],
    "java.sql.sqlinput.readbytes": [
        "java.sql.SQLInput.readBytes()"
    ],
    "java.awt.image.pixelgrabber.imagecomplete": [
        "java.awt.image.PixelGrabber.imageComplete(int)"
    ],
    "org.omg.corba.request.add_named_out_arg": [
        "org.omg.CORBA.Request.add_named_out_arg(java.lang.String)"
    ],
    "javax.swing.table.defaulttablemodel.setcolumnidentifiers": [
        "javax.swing.table.DefaultTableModel.setColumnIdentifiers(java.util.Vector)",
        "javax.swing.table.DefaultTableModel.setColumnIdentifiers(java.lang.Object[])"
    ],
    "java.awt.image.imageconsumer.imagecomplete": [
        "java.awt.image.ImageConsumer.imageComplete(int)"
    ],
    "javax.swing.plaf.multi.multitextui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiTextUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "javax.swing.text.zoneview.getmaximumzonesize": [
        "javax.swing.text.ZoneView.getMaximumZoneSize()"
    ],
    "java.nio.file.path.getroot": [
        "java.nio.file.Path.getRoot()"
    ],
    "javax.swing.plaf.synth.synthspinnerui.installlisteners": [
        "javax.swing.plaf.synth.SynthSpinnerUI.installListeners()"
    ],
    "javax.imageio.spi.iioregistry.registerapplicationclasspathspis": [
        "javax.imageio.spi.IIORegistry.registerApplicationClasspathSpis()"
    ],
    "javax.swing.jlayeredpane.getlayer": [
        "javax.swing.JLayeredPane.getLayer(javax.swing.JComponent)",
        "javax.swing.JLayeredPane.getLayer(java.awt.Component)"
    ],
    "org.omg.portableinterceptor.iorinfooperations.manager_id": [
        "org.omg.PortableInterceptor.IORInfoOperations.manager_id()"
    ],
    "org.omg.corba.portable.outputstream.write_longlong_array": [
        "org.omg.CORBA.portable.OutputStream.write_longlong_array(long[],int,int)"
    ],
    "javax.sql.rowset.joinable.setmatchcolumn": [
        "javax.sql.rowset.Joinable.setMatchColumn(int)",
        "javax.sql.rowset.Joinable.setMatchColumn(java.lang.String)",
        "javax.sql.rowset.Joinable.setMatchColumn(int[])",
        "javax.sql.rowset.Joinable.setMatchColumn(java.lang.String[])"
    ],
    "javax.sound.sampled.mixer.unsynchronize": [
        "javax.sound.sampled.Mixer.unsynchronize(javax.sound.sampled.Line[])"
    ],
    "javax.security.auth.login.configurationspi.enginegetappconfigurationentry": [
        "javax.security.auth.login.ConfigurationSpi.engineGetAppConfigurationEntry(java.lang.String)"
    ],
    "java.time.yearmonth.get": [
        "java.time.YearMonth.get(java.time.temporal.TemporalField)"
    ],
    "java.util.concurrent.forkjointask.completeexceptionally": [
        "java.util.concurrent.ForkJoinTask.completeExceptionally(java.lang.Throwable)"
    ],
    "java.sql.databasemetadata.getnumericfunctions": [
        "java.sql.DatabaseMetaData.getNumericFunctions()"
    ],
    "javax.crypto.spec.dhpublickeyspec.getg": [
        "javax.crypto.spec.DHPublicKeySpec.getG()"
    ],
    "javax.accessibility.accessibleaction.doaccessibleaction": [
        "javax.accessibility.AccessibleAction.doAccessibleAction(int)"
    ],
    "javax.management.timer.timer.getsendpastnotifications": [
        "javax.management.timer.Timer.getSendPastNotifications()"
    ],
    "org.omg.corba.portable.valueoutputstream.end_value": [
        "org.omg.CORBA.portable.ValueOutputStream.end_value()"
    ],
    "javax.sound.sampled.spi.formatconversionprovider.istargetencodingsupported": [
        "javax.sound.sampled.spi.FormatConversionProvider.isTargetEncodingSupported(javax.sound.sampled.AudioFormat.Encoding)"
    ],
    "java.awt.geom.dimension2d.setsize": [
        "java.awt.geom.Dimension2D.setSize(double,double)",
        "java.awt.geom.Dimension2D.setSize(java.awt.geom.Dimension2D)"
    ],
    "java.lang.management.threadinfo.getlockedsynchronizers": [
        "java.lang.management.ThreadInfo.getLockedSynchronizers()"
    ],
    "java.time.chrono.chronozoneddatetime.withzonesameinstant": [
        "java.time.chrono.ChronoZonedDateTime.withZoneSameInstant(java.time.ZoneId)"
    ],
    "javax.swing.jtree.setanchorselectionpath": [
        "javax.swing.JTree.setAnchorSelectionPath(javax.swing.tree.TreePath)"
    ],
    "java.util.random.ints": [
        "java.util.Random.ints()",
        "java.util.Random.ints(long)"
    ],
    "javax.swing.jcheckbox.isborderpaintedflat": [
        "javax.swing.JCheckBox.isBorderPaintedFlat()"
    ],
    "javax.swing.plaf.synth.synthbuttonui.paint": [
        "javax.swing.plaf.synth.SynthButtonUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",
        "javax.swing.plaf.synth.SynthButtonUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.io.datainputstream.readutf": [
        "java.io.DataInputStream.readUTF(java.io.DataInput)"
    ],
    "java.util.concurrent.atomic.atomicintegerarray.compareandset": [
        "java.util.concurrent.atomic.AtomicIntegerArray.compareAndSet(int,int,int)"
    ],
    "java.awt.window.getopacity": [
        "java.awt.Window.getOpacity()"
    ],
    "org.omg.dynamicany._dynenumstub.insert_reference": [
        "org.omg.DynamicAny._DynEnumStub.insert_reference(org.omg.CORBA.Object)"
    ],
    "javax.swing.table.tablecolumn.getpreferredwidth": [
        "javax.swing.table.TableColumn.getPreferredWidth()"
    ],
    "java.time.instant.get": [
        "java.time.Instant.get(java.time.temporal.TemporalField)"
    ],
    "java.time.format.decimalstyle.getavailablelocales": [
        "java.time.format.DecimalStyle.getAvailableLocales()"
    ],
    "javax.sql.rowset.cachedrowset.setshowdeleted": [
        "javax.sql.rowset.CachedRowSet.setShowDeleted(boolean)"
    ],
    "javax.swing.jmenu.setmenulocation": [
        "javax.swing.JMenu.setMenuLocation(int,int)"
    ],
    "java.lang.securitymanager.checkaccept": [
        "java.lang.SecurityManager.checkAccept(java.lang.String,int)"
    ],
    "javax.swing.inputmap.setparent": [
        "javax.swing.InputMap.setParent(javax.swing.InputMap)"
    ],
    "javax.swing.inputmap.put": [
        "javax.swing.InputMap.put(javax.swing.KeyStroke,java.lang.Object)"
    ],
    "javax.swing.jtabbedpane.setselectedindex": [
        "javax.swing.JTabbedPane.setSelectedIndex(int)"
    ],
    "javax.swing.text.abstractdocument.dump": [
        "javax.swing.text.AbstractDocument.dump(java.io.PrintStream)"
    ],
    "java.util.concurrent.threadpoolexecutor.discardoldestpolicy.rejectedexecution": [
        "java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy.rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)"
    ],
    "java.lang.stringbuffer.lastindexof": [
        "java.lang.StringBuffer.lastIndexOf(java.lang.String,int)",
        "java.lang.StringBuffer.lastIndexOf(java.lang.String)"
    ],
    "java.time.chrono.chronoperiod.get": [
        "java.time.chrono.ChronoPeriod.get(java.time.temporal.TemporalUnit)"
    ],
    "javax.swing.abstractbutton.setrolloverenabled": [
        "javax.swing.AbstractButton.setRolloverEnabled(boolean)"
    ],
    "java.rmi.server.rmisocketfactory.getsocketfactory": [
        "java.rmi.server.RMISocketFactory.getSocketFactory()"
    ],
    "java.sql.databasemetadata.getmaxtablenamelength": [
        "java.sql.DatabaseMetaData.getMaxTableNameLength()"
    ],
    "java.io.datainput.readunsignedshort": [
        "java.io.DataInput.readUnsignedShort()"
    ],
    "javax.swing.plaf.basic.basictextui.getpropertyprefix": [
        "javax.swing.plaf.basic.BasicTextUI.getPropertyPrefix()"
    ],
    "javax.swing.buttongroup.isselected": [
        "javax.swing.ButtonGroup.isSelected(javax.swing.ButtonModel)"
    ],
    "java.sql.databasemetadata.getsqlkeywords": [
        "java.sql.DatabaseMetaData.getSQLKeywords()"
    ],
    "javax.swing.plaf.nimbus.abstractregionpainter.getcomponentcolor": [
        "javax.swing.plaf.nimbus.AbstractRegionPainter.getComponentColor(javax.swing.JComponent,java.lang.String,java.awt.Color,float,float,int)"
    ],
    "javax.management.openmbean.openmbeanattributeinfosupport.getmaxvalue": [
        "javax.management.openmbean.OpenMBeanAttributeInfoSupport.getMaxValue()"
    ],
    "java.util.concurrent.linkedblockingdeque.remove": [
        "java.util.concurrent.LinkedBlockingDeque.remove(java.lang.Object)",
        "java.util.concurrent.LinkedBlockingDeque.remove()"
    ],
    "javax.lang.model.util.types.asmemberof": [
        "javax.lang.model.util.Types.asMemberOf(javax.lang.model.type.DeclaredType,javax.lang.model.element.Element)"
    ],
    "java.awt.awtkeystroke.hashcode": [
        "java.awt.AWTKeyStroke.hashCode()"
    ],
    "javax.swing.jcomponent.setminimumsize": [
        "javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"
    ],
    "javax.xml.soap.mimeheaders.getmatchingheaders": [
        "javax.xml.soap.MimeHeaders.getMatchingHeaders(java.lang.String[])"
    ],
    "java.lang.threadgroup.interrupt": [
        "java.lang.ThreadGroup.interrupt()"
    ],
    "java.rmi.marshalledobject.hashcode": [
        "java.rmi.MarshalledObject.hashCode()"
    ],
    "javax.swing.borderfactory.createloweredbevelborder": [
        "javax.swing.BorderFactory.createLoweredBevelBorder()"
    ],
    "java.awt.event.inputevent.getmodifiersextext": [
        "java.awt.event.InputEvent.getModifiersExText(int)"
    ],
    "javax.swing.plaf.metal.metalfilechooserui.getmaximumsize": [
        "javax.swing.plaf.metal.MetalFileChooserUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "org.omg.corba.portable.delegate.create_request": [
        "org.omg.CORBA.portable.Delegate.create_request(org.omg.CORBA.Object,org.omg.CORBA.Context,java.lang.String,org.omg.CORBA.NVList,org.omg.CORBA.NamedValue)",
        "org.omg.CORBA.portable.Delegate.create_request(org.omg.CORBA.Object,org.omg.CORBA.Context,java.lang.String,org.omg.CORBA.NVList,org.omg.CORBA.NamedValue,org.omg.CORBA.ExceptionList,org.omg.CORBA.ContextList)"
    ],
    "java.awt.window.createbufferstrategy": [
        "java.awt.Window.createBufferStrategy(int)",
        "java.awt.Window.createBufferStrategy(int,java.awt.BufferCapabilities)"
    ],
    "javax.lang.model.util.elements.getpackageelement": [
        "javax.lang.model.util.Elements.getPackageElement(java.lang.CharSequence)"
    ],
    "java.beans.beancontext.beancontextchildsupport.servicerevoked": [
        "java.beans.beancontext.BeanContextChildSupport.serviceRevoked(java.beans.beancontext.BeanContextServiceRevokedEvent)"
    ],
    "org.omg.dynamicany._dynarraystub.insert_ushort": [
        "org.omg.DynamicAny._DynArrayStub.insert_ushort(short)"
    ],
    "java.time.period.withmonths": [
        "java.time.Period.withMonths(int)"
    ],
    "javax.net.ssl.sslsocket.setenablesessioncreation": [
        "javax.net.ssl.SSLSocket.setEnableSessionCreation(boolean)"
    ],
    "javax.swing.text.view.modeltoview": [
        "javax.swing.text.View.modelToView(int,javax.swing.text.Position.Bias,int,javax.swing.text.Position.Bias,java.awt.Shape)",
        "javax.swing.text.View.modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)"
    ],
    "java.net.jarurlconnection.getjarfileurl": [
        "java.net.JarURLConnection.getJarFileURL()"
    ],
    "java.net.multicastsocket.leavegroup": [
        "java.net.MulticastSocket.leaveGroup(java.net.SocketAddress,java.net.NetworkInterface)",
        "java.net.MulticastSocket.leaveGroup(java.net.InetAddress)"
    ],
    "java.util.concurrent.phaser.arrive": [
        "java.util.concurrent.Phaser.arrive()"
    ],
    "java.time.zoneddatetime.from": [
        "java.time.ZonedDateTime.from(java.time.temporal.TemporalAccessor)"
    ],
    "java.text.numberformat.getminimumintegerdigits": [
        "java.text.NumberFormat.getMinimumIntegerDigits()"
    ],
    "javax.swing.text.simpleattributeset.isdefined": [
        "javax.swing.text.SimpleAttributeSet.isDefined(java.lang.Object)"
    ],
    "java.nio.charset.charsetdecoder.charset": [
        "java.nio.charset.CharsetDecoder.charset()"
    ],
    "javax.swing.jlist.getselectedindices": [
        "javax.swing.JList.getSelectedIndices()"
    ],
    "java.util.concurrent.completablefuture.tocompletablefuture": [
        "java.util.concurrent.CompletableFuture.toCompletableFuture()"
    ],
    "javax.xml.crypto.xmlstructure.isfeaturesupported": [
        "javax.xml.crypto.XMLStructure.isFeatureSupported(java.lang.String)"
    ],
    "javax.imageio.plugins.jpeg.jpegimagereadparam.getqtables": [
        "javax.imageio.plugins.jpeg.JPEGImageReadParam.getQTables()"
    ],
    "java.net.urlconnection.setconnecttimeout": [
        "java.net.URLConnection.setConnectTimeout(int)"
    ],
    "javax.swing.jcomponent.print": [
        "javax.swing.JComponent.print(java.awt.Graphics)"
    ],
    "java.awt.window.processwindowevent": [
        "java.awt.Window.processWindowEvent(java.awt.event.WindowEvent)"
    ],
    "java.sql.resultset.absolute": [
        "java.sql.ResultSet.absolute(int)"
    ],
    "java.security.provider.remove": [
        "java.security.Provider.remove(java.lang.Object,java.lang.Object)"
    ],
    "javax.sound.sampled.audioinputstream.mark": [
        "javax.sound.sampled.AudioInputStream.mark(int)"
    ],
    "javax.swing.tree.abstractlayoutcache.invalidatepathbounds": [
        "javax.swing.tree.AbstractLayoutCache.invalidatePathBounds(javax.swing.tree.TreePath)"
    ],
    "org.omg.portableserver.poaoperations.reference_to_id": [
        "org.omg.PortableServer.POAOperations.reference_to_id(org.omg.CORBA.Object)"
    ],
    "java.lang.stringbuffer.capacity": [
        "java.lang.StringBuffer.capacity()"
    ],
    "javax.xml.crypto.dsig.xmlsignature.signaturevalue.getid": [
        "javax.xml.crypto.dsig.XMLSignature.SignatureValue.getId()"
    ],
    "javax.management.relation.relationservice.findreferencingrelations": [
        "javax.management.relation.RelationService.findReferencingRelations(javax.management.ObjectName,java.lang.String,java.lang.String)"
    ],
    "org.w3c.dom.namednodemap.getnameditem": [
        "org.w3c.dom.NamedNodeMap.getNamedItem(java.lang.String)"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.createpropertychangelistener": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.createPropertyChangeListener()"
    ],
    "javax.swing.tree.treeselectionmodel.removeselectionpath": [
        "javax.swing.tree.TreeSelectionModel.removeSelectionPath(javax.swing.tree.TreePath)"
    ],
    "org.omg.corba.orb.list_initial_services": [
        "org.omg.CORBA.ORB.list_initial_services()"
    ],
    "java.text.dateformat.gettimeinstance": [
        "java.text.DateFormat.getTimeInstance(int)",
        "java.text.DateFormat.getTimeInstance()",
        "java.text.DateFormat.getTimeInstance(int,java.util.Locale)"
    ],
    "java.io.randomaccessfile.readshort": [
        "java.io.RandomAccessFile.readShort()"
    ],
    "javax.swing.defaultbuttonmodel.firestatechanged": [
        "javax.swing.DefaultButtonModel.fireStateChanged()"
    ],
    "java.sql.resultset.beforefirst": [
        "java.sql.ResultSet.beforeFirst()"
    ],
    "javax.swing.japplet.update": [
        "javax.swing.JApplet.update(java.awt.Graphics)"
    ],
    "javax.xml.soap.soapmessage.createattachmentpart": [
        "javax.xml.soap.SOAPMessage.createAttachmentPart(javax.activation.DataHandler)",
        "javax.xml.soap.SOAPMessage.createAttachmentPart()",
        "javax.xml.soap.SOAPMessage.createAttachmentPart(java.lang.Object,java.lang.String)"
    ],
    "javax.swing.plaf.nimbus.abstractregionpainter.paintcontext.cachemode.valueof": [
        "javax.swing.plaf.nimbus.AbstractRegionPainter.PaintContext.CacheMode.valueOf(java.lang.String)"
    ],
    "java.awt.image.bandcombineop.getrenderinghints": [
        "java.awt.image.BandCombineOp.getRenderingHints()"
    ],
    "java.nio.channels.spi.selectorprovider.openserversocketchannel": [
        "java.nio.channels.spi.SelectorProvider.openServerSocketChannel()"
    ],
    "javax.management.openmbean.openmbeanoperationinfosupport.hashcode": [
        "javax.management.openmbean.OpenMBeanOperationInfoSupport.hashCode()"
    ],
    "java.util.simpletimezone.hashcode": [
        "java.util.SimpleTimeZone.hashCode()"
    ],
    "javax.swing.abstractbutton.setborderpainted": [
        "javax.swing.AbstractButton.setBorderPainted(boolean)"
    ],
    "javax.swing.text.boxview.setsize": [
        "javax.swing.text.BoxView.setSize(float,float)"
    ],
    "javax.sql.rowset.baserowset.gettransactionisolation": [
        "javax.sql.rowset.BaseRowSet.getTransactionIsolation()"
    ],
    "javax.swing.jframe.repaint": [
        "javax.swing.JFrame.repaint(long,int,int,int,int)"
    ],
    "java.awt.im.spi.inputmethoddescriptor.createinputmethod": [
        "java.awt.im.spi.InputMethodDescriptor.createInputMethod()"
    ],
    "java.util.map.entry.hashcode": [
        "java.util.Map.Entry.hashCode()"
    ],
    "java.awt.geom.roundrectangle2d.double.getbounds2d": [
        "java.awt.geom.RoundRectangle2D.Double.getBounds2D()"
    ],
    "java.lang.class.getpackage": [
        "java.lang.Class.getPackage()"
    ],
    "java.util.concurrent.cyclicbarrier.getparties": [
        "java.util.concurrent.CyclicBarrier.getParties()"
    ],
    "javax.xml.ws.service.gethandlerresolver": [
        "javax.xml.ws.Service.getHandlerResolver()"
    ],
    "java.time.temporal.temporalamount.addto": [
        "java.time.temporal.TemporalAmount.addTo(java.time.temporal.Temporal)"
    ],
    "javax.swing.jviewport.getviewsize": [
        "javax.swing.JViewport.getViewSize()"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getdisabledicon": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getDisabledIcon(javax.swing.JComponent,javax.swing.Icon)"
    ],
    "org.omg.corba.portable.outputstream.write_float": [
        "org.omg.CORBA.portable.OutputStream.write_float(float)"
    ],
    "javax.lang.model.util.simpleelementvisitor6.visitpackage": [
        "javax.lang.model.util.SimpleElementVisitor6.visitPackage(javax.lang.model.element.PackageElement,javax.lang.model.util.SimpleElementVisitor6)"
    ],
    "javax.sound.sampled.floatcontrol.getmaximum": [
        "javax.sound.sampled.FloatControl.getMaximum()"
    ],
    "javax.xml.validation.validator.getproperty": [
        "javax.xml.validation.Validator.getProperty(java.lang.String)"
    ],
    "java.util.function.longconsumer.andthen": [
        "java.util.function.LongConsumer.andThen(java.util.function.LongConsumer)"
    ],
    "javax.swing.jcolorchooser.getdragenabled": [
        "javax.swing.JColorChooser.getDragEnabled()"
    ],
    "javax.management.modelmbean.modelmbeannotificationinfo.getdescriptor": [
        "javax.management.modelmbean.ModelMBeanNotificationInfo.getDescriptor()"
    ],
    "javax.script.scriptengine.put": [
        "javax.script.ScriptEngine.put(java.lang.String,java.lang.Object)"
    ],
    "java.util.navigablemap.polllastentry": [
        "java.util.NavigableMap.pollLastEntry()"
    ],
    "java.security.cert.certpathvalidator.getalgorithm": [
        "java.security.cert.CertPathValidator.getAlgorithm()"
    ],
    "javax.swing.text.asyncboxview.getview": [
        "javax.swing.text.AsyncBoxView.getView(int)"
    ],
    "javax.management.openmbean.openmbeanparameterinfo.getname": [
        "javax.management.openmbean.OpenMBeanParameterInfo.getName()"
    ],
    "org.omg.corba.portable.outputstream.write_ushort": [
        "org.omg.CORBA.portable.OutputStream.write_ushort(short)"
    ],
    "javax.swing.defaultboundedrangemodel.setvalueisadjusting": [
        "javax.swing.DefaultBoundedRangeModel.setValueIsAdjusting(boolean)"
    ],
    "java.util.concurrent.atomic.atomicinteger.get": [
        "java.util.concurrent.atomic.AtomicInteger.get()"
    ],
    "javax.sql.rowset.filteredrowset.getfilter": [
        "javax.sql.rowset.FilteredRowSet.getFilter()"
    ],
    "java.util.zip.deflater.setinput": [
        "java.util.zip.Deflater.setInput(byte[],int,int)",
        "java.util.zip.Deflater.setInput(byte[])"
    ],
    "java.io.dataoutput.writefloat": [
        "java.io.DataOutput.writeFloat(float)"
    ],
    "javax.management.relation.relationtype.getrelationtypename": [
        "javax.management.relation.RelationType.getRelationTypeName()"
    ],
    "java.awt.toolkit.ismodalexclusiontypesupported": [
        "java.awt.Toolkit.isModalExclusionTypeSupported(java.awt.Dialog.ModalExclusionType)"
    ],
    "javax.swing.jtextarea.getlineofoffset": [
        "javax.swing.JTextArea.getLineOfOffset(int)"
    ],
    "javax.imageio.imagereader.processthumbnailcomplete": [
        "javax.imageio.ImageReader.processThumbnailComplete()"
    ],
    "javax.swing.jscrollpane.createhorizontalscrollbar": [
        "javax.swing.JScrollPane.createHorizontalScrollBar()"
    ],
    "javax.net.ssl.httpsurlconnection.getpeerprincipal": [
        "javax.net.ssl.HttpsURLConnection.getPeerPrincipal()"
    ],
    "java.math.bigdecimal.valueof": [
        "java.math.BigDecimal.valueOf(double)",
        "java.math.BigDecimal.valueOf(long,int)",
        "java.math.BigDecimal.valueOf(long)"
    ],
    "javax.sql.rowset.spi.syncprovider.getversion": [
        "javax.sql.rowset.spi.SyncProvider.getVersion()"
    ],
    "java.awt.gridbaglayout.adjustforgravity": [
        "java.awt.GridBagLayout.adjustForGravity(java.awt.GridBagConstraints,java.awt.Rectangle)",
        "java.awt.GridBagLayout.AdjustForGravity(java.awt.GridBagConstraints,java.awt.Rectangle)"
    ],
    "java.lang.byte.doublevalue": [
        "java.lang.Byte.doubleValue()"
    ],
    "javax.sound.midi.soundbank.getresources": [
        "javax.sound.midi.Soundbank.getResources()"
    ],
    "java.net.uri.getpath": [
        "java.net.URI.getPath()"
    ],
    "java.util.deque.removefirst": [
        "java.util.Deque.removeFirst()"
    ],
    "java.lang.stringbuffer.reverse": [
        "java.lang.StringBuffer.reverse()"
    ],
    "java.util.stream.longstream.distinct": [
        "java.util.stream.LongStream.distinct()"
    ],
    "java.sql.preparedstatement.setbytes": [
        "java.sql.PreparedStatement.setBytes(int,byte[])"
    ],
    "javax.swing.grouplayout.alignment.values": [
        "javax.swing.GroupLayout.Alignment.values()"
    ],
    "java.lang.class.getresourceasstream": [
        "java.lang.Class.getResourceAsStream(java.lang.String)"
    ],
    "java.lang.invoke.constantcallsite.dynamicinvoker": [
        "java.lang.invoke.ConstantCallSite.dynamicInvoker()"
    ],
    "java.awt.dnd.droptargetcontext.getcurrentdataflavors": [
        "java.awt.dnd.DropTargetContext.getCurrentDataFlavors()"
    ],
    "java.text.decimalformat.getgroupingsize": [
        "java.text.DecimalFormat.getGroupingSize()"
    ],
    "java.awt.jobattributes.setcopiestodefault": [
        "java.awt.JobAttributes.setCopiesToDefault()"
    ],
    "java.net.serversocket.getreceivebuffersize": [
        "java.net.ServerSocket.getReceiveBufferSize()"
    ],
    "javax.swing.joptionpane.updateui": [
        "javax.swing.JOptionPane.updateUI()"
    ],
    "javax.xml.soap.soapelement.createqname": [
        "javax.xml.soap.SOAPElement.createQName(java.lang.String,java.lang.String)"
    ],
    "java.awt.image.renderable.parameterblock.getparamclasses": [
        "java.awt.image.renderable.ParameterBlock.getParamClasses()"
    ],
    "javax.sound.sampled.dataline.getbuffersize": [
        "javax.sound.sampled.DataLine.getBufferSize()"
    ],
    "java.awt.geom.roundrectangle2d.float.getarcwidth": [
        "java.awt.geom.RoundRectangle2D.Float.getArcWidth()"
    ],
    "java.awt.image.pixelgrabber.sethints": [
        "java.awt.image.PixelGrabber.setHints(int)"
    ],
    "javax.print.doc.getprintdata": [
        "javax.print.Doc.getPrintData()"
    ],
    "javax.swing.jtable.getrowmargin": [
        "javax.swing.JTable.getRowMargin()"
    ],
    "javax.management.mbeanfeatureinfo.getdescriptor": [
        "javax.management.MBeanFeatureInfo.getDescriptor()"
    ],
    "javax.xml.soap.soapfault.getfaultstring": [
        "javax.xml.soap.SOAPFault.getFaultString()"
    ],
    "javax.swing.plaf.basic.basicinternalframetitlepane.postclosingevent": [
        "javax.swing.plaf.basic.BasicInternalFrameTitlePane.postClosingEvent(javax.swing.JInternalFrame)"
    ],
    "javax.swing.jtree.setcelleditor": [
        "javax.swing.JTree.setCellEditor(javax.swing.tree.TreeCellEditor)"
    ],
    "javax.swing.jdesktoppane.paramstring": [
        "javax.swing.JDesktopPane.paramString()"
    ],
    "java.sql.date.valueof": [
        "java.sql.Date.valueOf(java.time.LocalDate)",
        "java.sql.Date.valueOf(java.lang.String)"
    ],
    "java.time.zone.zoneoffsettransition.getinstant": [
        "java.time.zone.ZoneOffsetTransition.getInstant()"
    ],
    "java.util.concurrent.countdownlatch.getcount": [
        "java.util.concurrent.CountDownLatch.getCount()"
    ],
    "javax.swing.tree.defaultmutabletreenode.getlastleaf": [
        "javax.swing.tree.DefaultMutableTreeNode.getLastLeaf()"
    ],
    "java.rmi.activation.activationdesc.hashcode": [
        "java.rmi.activation.ActivationDesc.hashCode()"
    ],
    "java.nio.channels.spi.abstractinterruptiblechannel.begin": [
        "java.nio.channels.spi.AbstractInterruptibleChannel.begin()"
    ],
    "javax.print.attribute.standard.sheetcollate.getname": [
        "javax.print.attribute.standard.SheetCollate.getName()"
    ],
    "javax.lang.model.sourceversion.latest": [
        "javax.lang.model.SourceVersion.latest()"
    ],
    "java.security.cert.certpathbuilderresult.clone": [
        "java.security.cert.CertPathBuilderResult.clone()"
    ],
    "javax.management.notificationfiltersupport.enabletype": [
        "javax.management.NotificationFilterSupport.enableType(java.lang.String)"
    ],
    "javax.swing.plaf.basic.basicprogressbarui.getstringplacement": [
        "javax.swing.plaf.basic.BasicProgressBarUI.getStringPlacement(java.awt.Graphics,java.lang.String,int,int,int,int)"
    ],
    "java.awt.gridlayout.removelayoutcomponent": [
        "java.awt.GridLayout.removeLayoutComponent(java.awt.Component)"
    ],
    "javax.xml.stream.xmlinputfactory.createxmlstreamreader": [
        "javax.xml.stream.XMLInputFactory.createXMLStreamReader(java.io.Reader)",
        "javax.xml.stream.XMLInputFactory.createXMLStreamReader(java.io.InputStream,java.lang.String)",
        "javax.xml.stream.XMLInputFactory.createXMLStreamReader(java.lang.String,java.io.Reader)",
        "javax.xml.stream.XMLInputFactory.createXMLStreamReader(java.lang.String,java.io.InputStream)",
        "javax.xml.stream.XMLInputFactory.createXMLStreamReader(java.io.InputStream)",
        "javax.xml.stream.XMLInputFactory.createXMLStreamReader(javax.xml.transform.Source)"
    ],
    "org.omg.corba.orb.create_environment": [
        "org.omg.CORBA.ORB.create_environment()"
    ],
    "java.net.inetaddress.getlocalhost": [
        "java.net.InetAddress.getLocalHost()"
    ],
    "java.util.hashset.remove": [
        "java.util.HashSet.remove(java.lang.Object)"
    ],
    "javax.swing.jscrollbar.setblockincrement": [
        "javax.swing.JScrollBar.setBlockIncrement(int)"
    ],
    "javax.swing.spinnernumbermodel.getnumber": [
        "javax.swing.SpinnerNumberModel.getNumber()"
    ],
    "org.omg.dynamicany._dynenumstub.set_as_ulong": [
        "org.omg.DynamicAny._DynEnumStub.set_as_ulong(int)"
    ],
    "java.lang.stringbuilder.subsequence": [
        "java.lang.StringBuilder.subSequence(int,int)"
    ],
    "java.net.urlconnection.getrequestproperties": [
        "java.net.URLConnection.getRequestProperties()"
    ],
    "java.util.collections.unmodifiablenavigablemap": [
        "java.util.Collections.unmodifiableNavigableMap(,? extends V>)"
    ],
    "javax.swing.jinternalframe.setlayout": [
        "javax.swing.JInternalFrame.setLayout(java.awt.LayoutManager)"
    ],
    "org.omg.corba.datainputstream.read_char_array": [
        "org.omg.CORBA.DataInputStream.read_char_array(org.omg.CORBA.CharSeqHolder,int,int)"
    ],
    "java.security.messagedigestspi.enginedigest": [
        "java.security.MessageDigestSpi.engineDigest(byte[],int,int)",
        "java.security.MessageDigestSpi.engineDigest()"
    ],
    "java.io.bytearrayinputstream.reset": [
        "java.io.ByteArrayInputStream.reset()"
    ],
    "javax.sound.midi.midifileformat.getresolution": [
        "javax.sound.midi.MidiFileFormat.getResolution()"
    ],
    "java.util.sortedmap.keyset": [
        "java.util.SortedMap.keySet()"
    ],
    "javax.sql.rowset.baserowset.setclob": [
        "javax.sql.rowset.BaseRowSet.setClob(java.lang.String,java.sql.Clob)",
        "javax.sql.rowset.BaseRowSet.setClob(int,java.sql.Clob)",
        "javax.sql.rowset.BaseRowSet.setClob(int,java.io.Reader,long)",
        "javax.sql.rowset.BaseRowSet.setClob(java.lang.String,java.io.Reader)",
        "javax.sql.rowset.BaseRowSet.setClob(java.lang.String,java.io.Reader,long)",
        "javax.sql.rowset.BaseRowSet.setClob(int,java.io.Reader)"
    ],
    "java.security.cert.x509certselector.getmatchallsubjectaltnames": [
        "java.security.cert.X509CertSelector.getMatchAllSubjectAltNames()"
    ],
    "java.util.concurrent.locks.abstractqueuedsynchronizer.getwaitingthreads": [
        "java.util.concurrent.locks.AbstractQueuedSynchronizer.getWaitingThreads(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)"
    ],
    "javax.swing.border.bevelborder.getshadowinnercolor": [
        "javax.swing.border.BevelBorder.getShadowInnerColor()",
        "javax.swing.border.BevelBorder.getShadowInnerColor(java.awt.Component)"
    ],
    "javax.swing.plaf.synth.syntheditorpaneui.getcontext": [
        "javax.swing.plaf.synth.SynthEditorPaneUI.getContext(javax.swing.JComponent)"
    ],
    "javax.lang.model.util.typekindvisitor6.visitnotypeasvoid": [
        "javax.lang.model.util.TypeKindVisitor6.visitNoTypeAsVoid(javax.lang.model.type.NoType,javax.lang.model.util.TypeKindVisitor6)"
    ],
    "java.io.stringwriter.tostring": [
        "java.io.StringWriter.toString()"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readasciistream": [
        "javax.sql.rowset.serial.SQLInputImpl.readAsciiStream()"
    ],
    "org.omg.corba.longholder._type": [
        "org.omg.CORBA.LongHolder._type()"
    ],
    "java.util.concurrent.locks.abstractqueuedsynchronizer.getqueuedthreads": [
        "java.util.concurrent.locks.AbstractQueuedSynchronizer.getQueuedThreads()"
    ],
    "java.awt.component.processmousewheelevent": [
        "java.awt.Component.processMouseWheelEvent(java.awt.event.MouseWheelEvent)"
    ],
    "java.awt.awteventmulticaster.windowactivated": [
        "java.awt.AWTEventMulticaster.windowActivated(java.awt.event.WindowEvent)"
    ],
    "java.text.dateformatsymbols.getshortmonths": [
        "java.text.DateFormatSymbols.getShortMonths()"
    ],
    "java.security.cert.x509certselector.setsubject": [
        "java.security.cert.X509CertSelector.setSubject(byte[])",
        "java.security.cert.X509CertSelector.setSubject(javax.security.auth.x500.X500Principal)"
    ],
    "javax.management.openmbean.tabulardatasupport.entryset": [
        "javax.management.openmbean.TabularDataSupport.entrySet()"
    ],
    "org.omg.cosnaming.namingcontextextoperations.to_url": [
        "org.omg.CosNaming.NamingContextExtOperations.to_url(java.lang.String,java.lang.String)"
    ],
    "org.omg.dynamicany._dynstructstub.insert_dyn_any": [
        "org.omg.DynamicAny._DynStructStub.insert_dyn_any(org.omg.DynamicAny.DynAny)"
    ],
    "org.omg.dynamicany.dynstructoperations.set_members": [
        "org.omg.DynamicAny.DynStructOperations.set_members(org.omg.DynamicAny.NameValuePair[])"
    ],
    "javax.swing.plaf.synth.synthpopupmenuui.createui": [
        "javax.swing.plaf.synth.SynthPopupMenuUI.createUI(javax.swing.JComponent)"
    ],
    "java.awt.image.componentcolormodel.coercedata": [
        "java.awt.image.ComponentColorModel.coerceData(java.awt.image.WritableRaster,boolean)"
    ],
    "java.awt.graphicsdevice.gettype": [
        "java.awt.GraphicsDevice.getType()"
    ],
    "java.beans.propertyeditor.gettags": [
        "java.beans.PropertyEditor.getTags()"
    ],
    "java.util.abstractmap.clone": [
        "java.util.AbstractMap.clone()"
    ],
    "java.util.collections.unmodifiablecollection": [
        "java.util.Collections.unmodifiableCollection(java.util.Collection<? extends T>)"
    ],
    "java.text.choiceformat.getlimits": [
        "java.text.ChoiceFormat.getLimits()"
    ],
    "java.rmi.activation.activationid.hashcode": [
        "java.rmi.activation.ActivationID.hashCode()"
    ],
    "java.io.filepermission.newpermissioncollection": [
        "java.io.FilePermission.newPermissionCollection()"
    ],
    "java.lang.class.getannotatedinterfaces": [
        "java.lang.Class.getAnnotatedInterfaces()"
    ],
    "javax.swing.jscrollpane.getuiclassid": [
        "javax.swing.JScrollPane.getUIClassID()"
    ],
    "javax.swing.plaf.synth.synthseparatorui.uninstalllisteners": [
        "javax.swing.plaf.synth.SynthSeparatorUI.uninstallListeners(javax.swing.JSeparator)"
    ],
    "javax.security.auth.callback.confirmationcallback.getoptions": [
        "javax.security.auth.callback.ConfirmationCallback.getOptions()"
    ],
    "java.awt.dnd.draggesturerecognizer.removedraggesturelistener": [
        "java.awt.dnd.DragGestureRecognizer.removeDragGestureListener(java.awt.dnd.DragGestureListener)"
    ],
    "javax.xml.transform.sax.transformerhandler.setresult": [
        "javax.xml.transform.sax.TransformerHandler.setResult(javax.xml.transform.Result)"
    ],
    "javax.xml.bind.helpers.abstractmarshallerimpl.isfragment": [
        "javax.xml.bind.helpers.AbstractMarshallerImpl.isFragment()"
    ],
    "javax.management.openmbean.openmbeanparameterinfosupport.getminvalue": [
        "javax.management.openmbean.OpenMBeanParameterInfoSupport.getMinValue()"
    ],
    "javax.swing.jfilechooser.getfileselectionmode": [
        "javax.swing.JFileChooser.getFileSelectionMode()"
    ],
    "java.awt.keyboardfocusmanager.processkeyevent": [
        "java.awt.KeyboardFocusManager.processKeyEvent(java.awt.Component,java.awt.event.KeyEvent)"
    ],
    "org.w3c.dom.node.setnodevalue": [
        "org.w3c.dom.Node.setNodeValue(java.lang.String)"
    ],
    "java.util.priorityqueue.offer": [
        "java.util.PriorityQueue.offer(E)",
        "java.util.PriorityQueue.offer(java.util.PriorityQueue)"
    ],
    "javax.swing.text.view.getstartoffset": [
        "javax.swing.text.View.getStartOffset()"
    ],
    "org.omg.corba.orb.create_union_tc": [
        "org.omg.CORBA.ORB.create_union_tc(java.lang.String,java.lang.String,org.omg.CORBA.TypeCode,org.omg.CORBA.UnionMember[])"
    ],
    "java.text.decimalformat.setminimumintegerdigits": [
        "java.text.DecimalFormat.setMinimumIntegerDigits(int)"
    ],
    "javax.swing.jframe.seticonimage": [
        "javax.swing.JFrame.setIconImage(java.awt.Image)"
    ],
    "org.omg.dynamicany._dynunionstub.insert_float": [
        "org.omg.DynamicAny._DynUnionStub.insert_float(float)"
    ],
    "java.lang.stringbuffer.codepointcount": [
        "java.lang.StringBuffer.codePointCount(int,int)"
    ],
    "javax.swing.plaf.synth.synthprogressbarui.painttext": [
        "javax.swing.plaf.synth.SynthProgressBarUI.paintText(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,java.lang.String)"
    ],
    "java.sql.databasemetadata.getusername": [
        "java.sql.DatabaseMetaData.getUserName()"
    ],
    "java.awt.textarea.getrows": [
        "java.awt.TextArea.getRows()"
    ],
    "javax.swing.abstractbutton.removeactionlistener": [
        "javax.swing.AbstractButton.removeActionListener(java.awt.event.ActionListener)"
    ],
    "javax.management.relation.relationservice.addrelationtype": [
        "javax.management.relation.RelationService.addRelationType(javax.management.relation.RelationType)"
    ],
    "java.util.concurrent.callable.call": [
        "java.util.concurrent.Callable.call()"
    ],
    "org.omg.dynamicany._dynarraystub.get_longlong": [
        "org.omg.DynamicAny._DynArrayStub.get_longlong()"
    ],
    "javax.swing.plaf.basic.basicformattedtextfieldui.getpropertyprefix": [
        "javax.swing.plaf.basic.BasicFormattedTextFieldUI.getPropertyPrefix()"
    ],
    "java.util.concurrent.atomic.longaccumulator.floatvalue": [
        "java.util.concurrent.atomic.LongAccumulator.floatValue()"
    ],
    "java.lang.reflect.array.setlong": [
        "java.lang.reflect.Array.setLong(java.lang.Object,int,long)"
    ],
    "javax.swing.jtabbedpane.settabplacement": [
        "javax.swing.JTabbedPane.setTabPlacement(int)"
    ],
    "java.time.month.getdisplayname": [
        "java.time.Month.getDisplayName(java.time.format.TextStyle,java.util.Locale)"
    ],
    "javax.swing.text.componentview.getcomponent": [
        "javax.swing.text.ComponentView.getComponent()"
    ],
    "org.omg.dynamicany._dynvaluestub.get_ulong": [
        "org.omg.DynamicAny._DynValueStub.get_ulong()"
    ],
    "java.awt.color.rgbtohsb": [
        "java.awt.Color.RGBtoHSB(int,int,int,float[])"
    ],
    "org.omg.dynamicany._dynunionstub.member_name": [
        "org.omg.DynamicAny._DynUnionStub.member_name()"
    ],
    "java.awt.geom.point2d.hashcode": [
        "java.awt.geom.Point2D.hashCode()"
    ],
    "java.nio.file.files.copy": [
        "java.nio.file.Files.copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption)",
        "java.nio.file.Files.copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption...)"
    ],
    "java.util.uuid.timestamp": [
        "java.util.UUID.timestamp()"
    ],
    "javax.swing.borderfactory.createcompoundborder": [
        "javax.swing.BorderFactory.createCompoundBorder(javax.swing.border.Border,javax.swing.border.Border)",
        "javax.swing.BorderFactory.createCompoundBorder()"
    ],
    "javax.naming.compositename.remove": [
        "javax.naming.CompositeName.remove(int)"
    ],
    "javax.xml.soap.soappart.removeallmimeheaders": [
        "javax.xml.soap.SOAPPart.removeAllMimeHeaders()"
    ],
    "java.util.concurrent.atomic.atomicinteger.getandset": [
        "java.util.concurrent.atomic.AtomicInteger.getAndSet(int)"
    ],
    "java.lang.invoke.methodhandles.publiclookup": [
        "java.lang.invoke.MethodHandles.publicLookup()"
    ],
    "javax.swing.jcombobox.seteditor": [
        "javax.swing.JComboBox.setEditor(javax.swing.ComboBoxEditor)"
    ],
    "java.sql.databasemetadata.nullsaresortedhigh": [
        "java.sql.DatabaseMetaData.nullsAreSortedHigh()"
    ],
    "javax.swing.plaf.basic.basicprogressbarui.uninstalllisteners": [
        "javax.swing.plaf.basic.BasicProgressBarUI.uninstallListeners()"
    ],
    "javax.naming.context.bind": [
        "javax.naming.Context.bind(java.lang.String,java.lang.Object)",
        "javax.naming.Context.bind(javax.naming.Name,java.lang.Object)"
    ],
    "java.awt.component.baselineresizebehavior.valueof": [
        "java.awt.Component.BaselineResizeBehavior.valueOf(java.lang.String)"
    ],
    "javax.swing.joptionpane.getoptions": [
        "javax.swing.JOptionPane.getOptions()"
    ],
    "java.net.datagrampacket.setlength": [
        "java.net.DatagramPacket.setLength(int)"
    ],
    "org.omg.dynamicany.dynvalueboxoperations.get_boxed_value": [
        "org.omg.DynamicAny.DynValueBoxOperations.get_boxed_value()"
    ],
    "javax.swing.jtabbedpane.createchangelistener": [
        "javax.swing.JTabbedPane.createChangeListener()"
    ],
    "javax.swing.menuselectionmanager.removechangelistener": [
        "javax.swing.MenuSelectionManager.removeChangeListener(javax.swing.event.ChangeListener)"
    ],
    "java.awt.image.bufferstrategy.contentslost": [
        "java.awt.image.BufferStrategy.contentsLost()"
    ],
    "java.util.logging.xmlformatter.gettail": [
        "java.util.logging.XMLFormatter.getTail(java.util.logging.Handler)"
    ],
    "javax.naming.context.lookup": [
        "javax.naming.Context.lookup(java.lang.String)",
        "javax.naming.Context.lookup(javax.naming.Name)"
    ],
    "java.awt.keyboardfocusmanager.setdefaultfocustraversalpolicy": [
        "java.awt.KeyboardFocusManager.setDefaultFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"
    ],
    "java.util.enumset.of": [
        "java.util.EnumSet.of(E,E,E,E,E)",
        "java.util.EnumSet.of(E,E,E)",
        "java.util.EnumSet.of(E)",
        "java.util.EnumSet.of(E,E...)",
        "java.util.EnumSet.of(E,E)",
        "java.util.EnumSet.of(E,E,E,E)"
    ],
    "javax.print.printservice.getname": [
        "javax.print.PrintService.getName()"
    ],
    "javax.xml.validation.validator.getfeature": [
        "javax.xml.validation.Validator.getFeature(java.lang.String)"
    ],
    "java.lang.strictmath.nextdown": [
        "java.lang.StrictMath.nextDown(float)",
        "java.lang.StrictMath.nextDown(double)"
    ],
    "java.lang.strictmath.pow": [
        "java.lang.StrictMath.pow(double,double)"
    ],
    "javax.swing.jcheckboxmenuitem.paramstring": [
        "javax.swing.JCheckBoxMenuItem.paramString()"
    ],
    "java.util.concurrent.atomic.longaccumulator.get": [
        "java.util.concurrent.atomic.LongAccumulator.get()"
    ],
    "java.lang.strictmath.log1p": [
        "java.lang.StrictMath.log1p(double)"
    ],
    "java.time.offsetdatetime.getdayofyear": [
        "java.time.OffsetDateTime.getDayOfYear()"
    ],
    "javax.management.mbeannotificationinfo.clone": [
        "javax.management.MBeanNotificationInfo.clone()"
    ],
    "javax.swing.event.ancestorevent.getcomponent": [
        "javax.swing.event.AncestorEvent.getComponent()"
    ],
    "java.time.format.datetimeformatterbuilder.toformatter": [
        "java.time.format.DateTimeFormatterBuilder.toFormatter(java.util.Locale)",
        "java.time.format.DateTimeFormatterBuilder.toFormatter()"
    ],
    "java.sql.ref.setobject": [
        "java.sql.Ref.setObject(java.lang.Object)"
    ],
    "java.time.offsetdatetime.tolocaltime": [
        "java.time.OffsetDateTime.toLocalTime()"
    ],
    "java.awt.geom.affinetransform.deltatransform": [
        "java.awt.geom.AffineTransform.deltaTransform(java.awt.geom.Point2D,java.awt.geom.Point2D)",
        "java.awt.geom.AffineTransform.deltaTransform(double[],int,double[],int,int)"
    ],
    "javax.annotation.resource.authenticationtype.values": [
        "javax.annotation.Resource.AuthenticationType.values()"
    ],
    "javax.swing.plaf.multi.multitableui.update": [
        "javax.swing.plaf.multi.MultiTableUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.util.stream.longstream.maptodouble": [
        "java.util.stream.LongStream.mapToDouble(java.util.function.LongToDoubleFunction)"
    ],
    "java.util.stream.basestream.sequential": [
        "java.util.stream.BaseStream.sequential()"
    ],
    "java.util.concurrent.locks.stampedlock.aswritelock": [
        "java.util.concurrent.locks.StampedLock.asWriteLock()"
    ],
    "javax.swing.text.html.imageview.getnoimageicon": [
        "javax.swing.text.html.ImageView.getNoImageIcon()"
    ],
    "javax.swing.defaultcelleditor.getclickcounttostart": [
        "javax.swing.DefaultCellEditor.getClickCountToStart()"
    ],
    "javax.swing.jsplitpane.setdividerlocation": [
        "javax.swing.JSplitPane.setDividerLocation(int)",
        "javax.swing.JSplitPane.setDividerLocation(double)"
    ],
    "javax.sql.rowsetmetadata.setnullable": [
        "javax.sql.RowSetMetaData.setNullable(int,int)"
    ],
    "java.awt.image.colorconvertop.getbounds2d": [
        "java.awt.image.ColorConvertOp.getBounds2D(java.awt.image.Raster)",
        "java.awt.image.ColorConvertOp.getBounds2D(java.awt.image.BufferedImage)"
    ],
    "java.nio.file.watchkey.watchable": [
        "java.nio.file.WatchKey.watchable()"
    ],
    "javax.swing.jinternalframe.movetofront": [
        "javax.swing.JInternalFrame.moveToFront()"
    ],
    "javax.management.queryeval.getmbeanserver": [
        "javax.management.QueryEval.getMBeanServer()"
    ],
    "java.util.concurrent.locks.reentrantlock.getwaitingthreads": [
        "java.util.concurrent.locks.ReentrantLock.getWaitingThreads(java.util.concurrent.locks.Condition)"
    ],
    "java.lang.process.isalive": [
        "java.lang.Process.isAlive()"
    ],
    "javax.swing.plaf.synth.synthviewportui.uninstalllisteners": [
        "javax.swing.plaf.synth.SynthViewportUI.uninstallListeners(javax.swing.JComponent)"
    ],
    "org.ietf.jgss.gssexception.getminorstring": [
        "org.ietf.jgss.GSSException.getMinorString()"
    ],
    "java.awt.geom.ellipse2d.float.getheight": [
        "java.awt.geom.Ellipse2D.Float.getHeight()"
    ],
    "org.omg.dynamicany._dynvaluestub.insert_any": [
        "org.omg.DynamicAny._DynValueStub.insert_any(org.omg.CORBA.Any)"
    ],
    "java.net.socketimpl.available": [
        "java.net.SocketImpl.available()"
    ],
    "javax.accessibility.accessiblehyperlink.getaccessibleactionanchor": [
        "javax.accessibility.AccessibleHyperlink.getAccessibleActionAnchor(int)"
    ],
    "javax.swing.text.compositeview.getviewcount": [
        "javax.swing.text.CompositeView.getViewCount()"
    ],
    "java.text.stringcharacteriterator.getbeginindex": [
        "java.text.StringCharacterIterator.getBeginIndex()"
    ],
    "org.omg.corba.dataoutputstream.write_float": [
        "org.omg.CORBA.DataOutputStream.write_float(float)"
    ],
    "javax.imageio.spi.iioserviceprovider.onderegistration": [
        "javax.imageio.spi.IIOServiceProvider.onDeregistration(javax.imageio.spi.ServiceRegistry,java.lang.Class<?>)"
    ],
    "javax.swing.event.tablecolumnmodellistener.columnadded": [
        "javax.swing.event.TableColumnModelListener.columnAdded(javax.swing.event.TableColumnModelEvent)"
    ],
    "javax.swing.plaf.multi.multicolorchooserui.getuis": [
        "javax.swing.plaf.multi.MultiColorChooserUI.getUIs()"
    ],
    "java.lang.long.parselong": [
        "java.lang.Long.parseLong(java.lang.String,int)",
        "java.lang.Long.parseLong(java.lang.String)"
    ],
    "java.awt.image.componentsamplemodel.getbandoffsets": [
        "java.awt.image.ComponentSampleModel.getBandOffsets()"
    ],
    "javax.swing.plaf.metal.metaltheme.getwindowtitlebackground": [
        "javax.swing.plaf.metal.MetalTheme.getWindowTitleBackground()"
    ],
    "java.nio.channels.spi.abstractselector.close": [
        "java.nio.channels.spi.AbstractSelector.close()"
    ],
    "javax.swing.jfilechooser.setdialogtitle": [
        "javax.swing.JFileChooser.setDialogTitle(java.lang.String)"
    ],
    "java.time.zoneddatetime.plusdays": [
        "java.time.ZonedDateTime.plusDays(long)"
    ],
    "java.awt.component.enableinputmethods": [
        "java.awt.Component.enableInputMethods(boolean)"
    ],
    "org.omg.dynamicany._dynarraystub.assign": [
        "org.omg.DynamicAny._DynArrayStub.assign(org.omg.DynamicAny.DynAny)"
    ],
    "javax.print.attribute.standard.destination.getcategory": [
        "javax.print.attribute.standard.Destination.getCategory()"
    ],
    "javax.naming.spi.initialcontextfactory.getinitialcontext": [
        "javax.naming.spi.InitialContextFactory.getInitialContext(,?>)"
    ],
    "javax.swing.plaf.basic.basictreeui.updateexpandeddescendants": [
        "javax.swing.plaf.basic.BasicTreeUI.updateExpandedDescendants(javax.swing.tree.TreePath)"
    ],
    "java.awt.component.transferfocusupcycle": [
        "java.awt.Component.transferFocusUpCycle()"
    ],
    "java.time.chrono.chronology.from": [
        "java.time.chrono.Chronology.from(java.time.temporal.TemporalAccessor)"
    ],
    "org.omg.dynamicany._dynfixedstub.component_count": [
        "org.omg.DynamicAny._DynFixedStub.component_count()"
    ],
    "javax.imageio.stream.imageinputstream.close": [
        "javax.imageio.stream.ImageInputStream.close()"
    ],
    "javax.management.immutabledescriptor.clone": [
        "javax.management.ImmutableDescriptor.clone()"
    ],
    "java.sql.preparedstatement.getparametermetadata": [
        "java.sql.PreparedStatement.getParameterMetaData()"
    ],
    "java.net.interfaceaddress.hashcode": [
        "java.net.InterfaceAddress.hashCode()"
    ],
    "javax.swing.plaf.basic.basictextui.createcaret": [
        "javax.swing.plaf.basic.BasicTextUI.createCaret()"
    ],
    "javax.xml.bind.datatypeconverterinterface.parsebyte": [
        "javax.xml.bind.DatatypeConverterInterface.parseByte(java.lang.String)"
    ],
    "org.omg.portableinterceptor.serverrequestinfooperations.adapter_name": [
        "org.omg.PortableInterceptor.ServerRequestInfoOperations.adapter_name()"
    ],
    "javax.swing.plaf.multi.multirootpaneui.createui": [
        "javax.swing.plaf.multi.MultiRootPaneUI.createUI(javax.swing.JComponent)"
    ],
    "javax.swing.comboboxmodel.getselecteditem": [
        "javax.swing.ComboBoxModel.getSelectedItem()"
    ],
    "javax.xml.stream.xmlstreamwriter.writestartdocument": [
        "javax.xml.stream.XMLStreamWriter.writeStartDocument()",
        "javax.xml.stream.XMLStreamWriter.writeStartDocument(java.lang.String)",
        "javax.xml.stream.XMLStreamWriter.writeStartDocument(java.lang.String,java.lang.String)"
    ],
    "javax.management.openmbean.openmbeanconstructorinfo.equals": [
        "javax.management.openmbean.OpenMBeanConstructorInfo.equals(java.lang.Object)"
    ],
    "javax.print.event.printserviceattributeevent.getattributes": [
        "javax.print.event.PrintServiceAttributeEvent.getAttributes()"
    ],
    "java.util.enummap.size": [
        "java.util.EnumMap.size()"
    ],
    "javax.xml.parsers.documentbuilderfactory.setfeature": [
        "javax.xml.parsers.DocumentBuilderFactory.setFeature(java.lang.String,boolean)"
    ],
    "java.awt.font.layoutpath.pointtopath": [
        "java.awt.font.LayoutPath.pointToPath(java.awt.geom.Point2D,java.awt.geom.Point2D)"
    ],
    "java.awt.geom.path2d.closepath": [
        "java.awt.geom.Path2D.closePath()"
    ],
    "javax.accessibility.accessiblecontext.getaccessiblename": [
        "javax.accessibility.AccessibleContext.getAccessibleName()"
    ],
    "org.omg.dynamicany._dynarraystub.get_val": [
        "org.omg.DynamicAny._DynArrayStub.get_val()"
    ],
    "javax.swing.jslider.getuiclassid": [
        "javax.swing.JSlider.getUIClassID()"
    ],
    "javax.swing.plaf.multi.multicomboboxui.createui": [
        "javax.swing.plaf.multi.MultiComboBoxUI.createUI(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.layerui.processhierarchyevent": [
        "javax.swing.plaf.LayerUI.processHierarchyEvent(java.awt.event.HierarchyEvent,javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)"
    ],
    "java.util.uuid.node": [
        "java.util.UUID.node()"
    ],
    "java.rmi.registry.locateregistry.getregistry": [
        "java.rmi.registry.LocateRegistry.getRegistry(int)",
        "java.rmi.registry.LocateRegistry.getRegistry(java.lang.String,int,java.rmi.server.RMIClientSocketFactory)",
        "java.rmi.registry.LocateRegistry.getRegistry(java.lang.String)",
        "java.rmi.registry.LocateRegistry.getRegistry()",
        "java.rmi.registry.LocateRegistry.getRegistry(java.lang.String,int)"
    ],
    "java.awt.graphics.copyarea": [
        "java.awt.Graphics.copyArea(int,int,int,int,int,int)"
    ],
    "java.awt.font.shapegraphicattribute.getoutline": [
        "java.awt.font.ShapeGraphicAttribute.getOutline(java.awt.geom.AffineTransform)"
    ],
    "java.util.locale.filter": [
        "java.util.Locale.filter(java.util.List<java.util.Locale.LanguageRange>,java.util.Collection<java.util.Locale>)",
        "java.util.Locale.filter(java.util.List<java.util.Locale.LanguageRange>,java.util.Collection<java.util.Locale>,java.util.Locale.FilteringMode)"
    ],
    "java.lang.stringbuffer.insert": [
        "java.lang.StringBuffer.insert(int,boolean)",
        "java.lang.StringBuffer.insert(int,int)",
        "java.lang.StringBuffer.insert(int,float)",
        "java.lang.StringBuffer.insert(int,double)",
        "java.lang.StringBuffer.insert(int,long)",
        "java.lang.StringBuffer.insert(int,char[])",
        "java.lang.StringBuffer.insert(int,java.lang.CharSequence)",
        "java.lang.StringBuffer.insert(int,java.lang.Object)",
        "java.lang.StringBuffer.insert(int,java.lang.String)",
        "java.lang.StringBuffer.insert(int,char)",
        "java.lang.StringBuffer.insert(int,java.lang.CharSequence,int,int)",
        "java.lang.StringBuffer.insert(int,char[],int,int)"
    ],
    "javax.naming.name.remove": [
        "javax.naming.Name.remove(int)"
    ],
    "java.util.concurrent.atomic.atomicinteger.updateandget": [
        "java.util.concurrent.atomic.AtomicInteger.updateAndGet(java.util.function.IntUnaryOperator)"
    ],
    "java.awt.dialog.setvisible": [
        "java.awt.Dialog.setVisible(boolean)"
    ],
    "java.nio.file.filevisitoption.values": [
        "java.nio.file.FileVisitOption.values()"
    ],
    "javax.swing.event.treeexpansionevent.getpath": [
        "javax.swing.event.TreeExpansionEvent.getPath()"
    ],
    "javax.crypto.spec.rc5parameterspec.getiv": [
        "javax.crypto.spec.RC5ParameterSpec.getIV()"
    ],
    "java.io.objectoutputstream.close": [
        "java.io.ObjectOutputStream.close()"
    ],
    "javax.naming.ldap.sortresponsecontrol.getexception": [
        "javax.naming.ldap.SortResponseControl.getException()"
    ],
    "java.util.concurrent.concurrenthashmap.computeifpresent": [
        "java.util.concurrent.ConcurrentHashMap.computeIfPresent(java.util.concurrent.ConcurrentHashMap,java.util.function.BiFunction<? super,? super,? extends java.util.concurrent.ConcurrentHashMap>)",
        "java.util.concurrent.ConcurrentHashMap.computeIfPresent(K,java.util.function.BiFunction<? super,? super,? extends V>)"
    ],
    "javax.swing.plaf.basic.basicsplitpanedivider.paint": [
        "javax.swing.plaf.basic.BasicSplitPaneDivider.paint(java.awt.Graphics)"
    ],
    "javax.management.remote.jmxconnectorserver.tojmxconnector": [
        "javax.management.remote.JMXConnectorServer.toJMXConnector(,?>)"
    ],
    "javax.net.ssl.sslengineresult.status.valueof": [
        "javax.net.ssl.SSLEngineResult.Status.valueOf(java.lang.String)"
    ],
    "javax.swing.jpopupmenu.createactionchangelistener": [
        "javax.swing.JPopupMenu.createActionChangeListener(javax.swing.JMenuItem)"
    ],
    "java.awt.image.renderable.contextualrenderedimagefactory.getbounds2d": [
        "java.awt.image.renderable.ContextualRenderedImageFactory.getBounds2D(java.awt.image.renderable.ParameterBlock)"
    ],
    "org.omg.portableserver.requestprocessingpolicyoperations.value": [
        "org.omg.PortableServer.RequestProcessingPolicyOperations.value()"
    ],
    "javax.sound.sampled.audiofileformat.getformat": [
        "javax.sound.sampled.AudioFileFormat.getFormat()"
    ],
    "javax.swing.jdesktoppane.updateui": [
        "javax.swing.JDesktopPane.updateUI()"
    ],
    "javax.swing.jtree.getvisiblerowcount": [
        "javax.swing.JTree.getVisibleRowCount()"
    ],
    "javax.security.auth.kerberos.kerberoskey.getformat": [
        "javax.security.auth.kerberos.KerberosKey.getFormat()"
    ],
    "org.omg.corba.datainputstream.read_ushort_array": [
        "org.omg.CORBA.DataInputStream.read_ushort_array(org.omg.CORBA.UShortSeqHolder,int,int)"
    ],
    "java.security.cert.ldapcertstoreparameters.tostring": [
        "java.security.cert.LDAPCertStoreParameters.toString()"
    ],
    "javax.swing.jinternalframe.getui": [
        "javax.swing.JInternalFrame.getUI()"
    ],
    "java.net.urlclassloader.close": [
        "java.net.URLClassLoader.close()"
    ],
    "javax.swing.lookandfeel.initialize": [
        "javax.swing.LookAndFeel.initialize()"
    ],
    "java.awt.keyeventdispatcher.dispatchkeyevent": [
        "java.awt.KeyEventDispatcher.dispatchKeyEvent(java.awt.event.KeyEvent)"
    ],
    "java.security.cert.certificaterevokedexception.getrevocationreason": [
        "java.security.cert.CertificateRevokedException.getRevocationReason()"
    ],
    "javax.management.remote.jmxprincipal.tostring": [
        "javax.management.remote.JMXPrincipal.toString()"
    ],
    "javax.imageio.stream.imageoutputstream.writeint": [
        "javax.imageio.stream.ImageOutputStream.writeInt(int)"
    ],
    "java.util.collections.emptyenumeration": [
        "java.util.Collections.emptyEnumeration()"
    ],
    "java.awt.dnd.droptargetcontext.getcurrentdataflavorsaslist": [
        "java.awt.dnd.DropTargetContext.getCurrentDataFlavorsAsList()"
    ],
    "java.lang.invoke.methodhandles.reflectas": [
        "java.lang.invoke.MethodHandles.reflectAs(java.lang.Class<T>,java.lang.invoke.MethodHandle)"
    ],
    "javax.swing.text.paragraphview.getalignment": [
        "javax.swing.text.ParagraphView.getAlignment(int)"
    ],
    "java.util.bitset.xor": [
        "java.util.BitSet.xor(java.util.BitSet)"
    ],
    "javax.management.monitor.stringmonitor.getderivedgauge": [
        "javax.management.monitor.StringMonitor.getDerivedGauge(javax.management.ObjectName)"
    ],
    "java.lang.management.memorypoolmxbean.iscollectionusagethresholdsupported": [
        "java.lang.management.MemoryPoolMXBean.isCollectionUsageThresholdSupported()"
    ],
    "java.lang.thread.checkaccess": [
        "java.lang.Thread.checkAccess()"
    ],
    "javax.swing.jmenu.addmenulistener": [
        "javax.swing.JMenu.addMenuListener(javax.swing.event.MenuListener)"
    ],
    "java.time.monthday.adjustinto": [
        "java.time.MonthDay.adjustInto(java.time.temporal.Temporal)"
    ],
    "java.util.concurrent.abstractexecutorservice.newtaskfor": [
        "java.util.concurrent.AbstractExecutorService.newTaskFor(java.lang.Runnable,T)",
        "java.util.concurrent.AbstractExecutorService.newTaskFor(java.util.concurrent.Callable<T>)"
    ],
    "java.net.securecacheresponse.getciphersuite": [
        "java.net.SecureCacheResponse.getCipherSuite()"
    ],
    "java.awt.borderlayout.layoutcontainer": [
        "java.awt.BorderLayout.layoutContainer(java.awt.Container)"
    ],
    "java.time.zoneddatetime.getdayofmonth": [
        "java.time.ZonedDateTime.getDayOfMonth()"
    ],
    "javax.xml.transform.sax.saxtransformerfactory.newtemplateshandler": [
        "javax.xml.transform.sax.SAXTransformerFactory.newTemplatesHandler()"
    ],
    "java.sql.connection.getcatalog": [
        "java.sql.Connection.getCatalog()"
    ],
    "javax.sound.midi.mididevice.info.tostring": [
        "javax.sound.midi.MidiDevice.Info.toString()"
    ],
    "javax.security.auth.x500.x500principal.hashcode": [
        "javax.security.auth.x500.X500Principal.hashCode()"
    ],
    "java.lang.long.tostring": [
        "java.lang.Long.toString(long,int)",
        "java.lang.Long.toString(long)",
        "java.lang.Long.toString()"
    ],
    "java.nio.file.attribute.userprincipallookupservice.lookupprincipalbygroupname": [
        "java.nio.file.attribute.UserPrincipalLookupService.lookupPrincipalByGroupName(java.lang.String)"
    ],
    "javax.swing.jcolorchooser.setselectionmodel": [
        "javax.swing.JColorChooser.setSelectionModel(javax.swing.colorchooser.ColorSelectionModel)"
    ],
    "java.lang.class.gettypename": [
        "java.lang.Class.getTypeName()"
    ],
    "javax.swing.text.defaultstyleddocument.getdefaultrootelement": [
        "javax.swing.text.DefaultStyledDocument.getDefaultRootElement()"
    ],
    "javax.swing.jformattedtextfield.getuiclassid": [
        "javax.swing.JFormattedTextField.getUIClassID()"
    ],
    "javax.swing.plaf.basic.basichtml.createhtmlview": [
        "javax.swing.plaf.basic.BasicHTML.createHTMLView(javax.swing.JComponent,java.lang.String)"
    ],
    "java.net.httpcookie.parse": [
        "java.net.HttpCookie.parse(java.lang.String)"
    ],
    "java.awt.image.renderable.parameterblock.setsources": [
        "java.awt.image.renderable.ParameterBlock.setSources(java.util.Vector<java.lang.Object>)"
    ],
    "javax.swing.jdialog.repaint": [
        "javax.swing.JDialog.repaint(long,int,int,int,int)"
    ],
    "javax.management.objectinstance.equals": [
        "javax.management.ObjectInstance.equals(java.lang.Object)"
    ],
    "org.xml.sax.helpers.xmlreaderfactory.createxmlreader": [
        "org.xml.sax.helpers.XMLReaderFactory.createXMLReader(java.lang.String)",
        "org.xml.sax.helpers.XMLReaderFactory.createXMLReader()"
    ],
    "javax.swing.plaf.basic.basicsliderui.paintverticallabel": [
        "javax.swing.plaf.basic.BasicSliderUI.paintVerticalLabel(java.awt.Graphics,int,java.awt.Component)"
    ],
    "java.awt.font.textlayout.getcaretinfo": [
        "java.awt.font.TextLayout.getCaretInfo(java.awt.font.TextHitInfo,java.awt.geom.Rectangle2D)",
        "java.awt.font.TextLayout.getCaretInfo(java.awt.font.TextHitInfo)"
    ],
    "java.awt.scrollbar.processevent": [
        "java.awt.Scrollbar.processEvent(java.awt.AWTEvent)"
    ],
    "javax.swing.plaf.metal.metaltheme.getprimary3": [
        "javax.swing.plaf.metal.MetalTheme.getPrimary3()"
    ],
    "javax.swing.jlist.droplocation.isinsert": [
        "javax.swing.JList.DropLocation.isInsert()"
    ],
    "javax.swing.jcomponent.isvalidateroot": [
        "javax.swing.JComponent.isValidateRoot()"
    ],
    "javax.swing.japplet.addimpl": [
        "javax.swing.JApplet.addImpl(java.awt.Component,java.lang.Object,int)"
    ],
    "javax.net.ssl.sslsessionbindinglistener.valueunbound": [
        "javax.net.ssl.SSLSessionBindingListener.valueUnbound(javax.net.ssl.SSLSessionBindingEvent)"
    ],
    "javax.xml.ws.spi.http.httpexchange.getscheme": [
        "javax.xml.ws.spi.http.HttpExchange.getScheme()"
    ],
    "java.beans.beancontext.beancontextservices.addbeancontextserviceslistener": [
        "java.beans.beancontext.BeanContextServices.addBeanContextServicesListener(java.beans.beancontext.BeanContextServicesListener)"
    ],
    "java.net.multicastsocket.getinterface": [
        "java.net.MulticastSocket.getInterface()"
    ],
    "java.security.keyfactory.getinstance": [
        "java.security.KeyFactory.getInstance(java.lang.String,java.lang.String)",
        "java.security.KeyFactory.getInstance(java.lang.String,java.security.Provider)",
        "java.security.KeyFactory.getInstance(java.lang.String)"
    ],
    "javax.swing.text.html.imageview.getpreferredspan": [
        "javax.swing.text.html.ImageView.getPreferredSpan(int)"
    ],
    "java.rmi.naming.bind": [
        "java.rmi.Naming.bind(java.lang.String,java.rmi.Remote)"
    ],
    "java.security.cert.pkixrevocationchecker.option.values": [
        "java.security.cert.PKIXRevocationChecker.Option.values()"
    ],
    "javax.sound.midi.midimessage.getlength": [
        "javax.sound.midi.MidiMessage.getLength()"
    ],
    "java.time.chrono.chronology.oflocale": [
        "java.time.chrono.Chronology.ofLocale(java.util.Locale)"
    ],
    "java.awt.event.keyevent.setkeychar": [
        "java.awt.event.KeyEvent.setKeyChar(char)"
    ],
    "javax.sql.rowset.serial.serialclob.equals": [
        "javax.sql.rowset.serial.SerialClob.equals(java.lang.Object)"
    ],
    "java.security.cert.policynode.getparent": [
        "java.security.cert.PolicyNode.getParent()"
    ],
    "javax.swing.text.highlighter.changehighlight": [
        "javax.swing.text.Highlighter.changeHighlight(java.lang.Object,int,int)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintspinnerbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintSpinnerBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.naming.spi.resolveresult.getresolvedobj": [
        "javax.naming.spi.ResolveResult.getResolvedObj()"
    ],
    "javax.swing.plaf.multi.multicomboboxui.setpopupvisible": [
        "javax.swing.plaf.multi.MultiComboBoxUI.setPopupVisible(javax.swing.JComboBox,boolean)"
    ],
    "javax.swing.lookandfeel.uninstallborder": [
        "javax.swing.LookAndFeel.uninstallBorder(javax.swing.JComponent)"
    ],
    "java.util.concurrent.forkjointask.polltask": [
        "java.util.concurrent.ForkJoinTask.pollTask()"
    ],
    "javax.sound.sampled.control.gettype": [
        "javax.sound.sampled.Control.getType()"
    ],
    "java.util.logging.logger.getuseparenthandlers": [
        "java.util.logging.Logger.getUseParentHandlers()"
    ],
    "java.util.collections.unmodifiablenavigableset": [
        "java.util.Collections.unmodifiableNavigableSet(java.util.NavigableSet<T>)"
    ],
    "javax.swing.jfilechooser.updateui": [
        "javax.swing.JFileChooser.updateUI()"
    ],
    "javax.swing.box.createverticalstrut": [
        "javax.swing.Box.createVerticalStrut(int)"
    ],
    "java.time.year.atmonthday": [
        "java.time.Year.atMonthDay(java.time.MonthDay)"
    ],
    "javax.swing.plaf.synth.synthstyle.geticon": [
        "javax.swing.plaf.synth.SynthStyle.getIcon(javax.swing.plaf.synth.SynthContext,java.lang.Object)"
    ],
    "javax.swing.text.stylededitorkit.styledtextaction.setcharacterattributes": [
        "javax.swing.text.StyledEditorKit.StyledTextAction.setCharacterAttributes(javax.swing.JEditorPane,javax.swing.text.AttributeSet,boolean)"
    ],
    "java.time.zoneddatetime.minus": [
        "java.time.ZonedDateTime.minus(long,java.time.temporal.TemporalUnit)",
        "java.time.ZonedDateTime.minus(java.time.temporal.TemporalAmount)"
    ],
    "java.awt.image.databuffershort.getdata": [
        "java.awt.image.DataBufferShort.getData(int)"
    ],
    "java.util.zip.zipfile.entries": [
        "java.util.zip.ZipFile.entries()"
    ],
    "javax.management.relation.mbeanservernotificationfilter.enableobjectname": [
        "javax.management.relation.MBeanServerNotificationFilter.enableObjectName(javax.management.ObjectName)"
    ],
    "java.awt.geom.rectangularshape.setframe": [
        "java.awt.geom.RectangularShape.setFrame(java.awt.geom.Rectangle2D)",
        "java.awt.geom.RectangularShape.setFrame(double,double,double,double)",
        "java.awt.geom.RectangularShape.setFrame(java.awt.geom.Point2D,java.awt.geom.Dimension2D)"
    ],
    "javax.naming.compoundname.compareto": [
        "javax.naming.CompoundName.compareTo(java.lang.Object)"
    ],
    "javax.swing.jtable.getselectedcolumncount": [
        "javax.swing.JTable.getSelectedColumnCount()"
    ],
    "org.omg.dynamicany._dynarraystub.insert_reference": [
        "org.omg.DynamicAny._DynArrayStub.insert_reference(org.omg.CORBA.Object)"
    ],
    "javax.lang.model.util.typekindvisitor6.visitprimitiveasdouble": [
        "javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsDouble(javax.lang.model.type.PrimitiveType,javax.lang.model.util.TypeKindVisitor6)"
    ],
    "java.awt.toolkit.lazilyloaddesktopproperty": [
        "java.awt.Toolkit.lazilyLoadDesktopProperty(java.lang.String)"
    ],
    "javax.swing.plaf.basic.basicsplitpanedivider.createleftonetouchbutton": [
        "javax.swing.plaf.basic.BasicSplitPaneDivider.createLeftOneTouchButton()"
    ],
    "javax.management.remote.rmi.rmiserverimpl.makeclient": [
        "javax.management.remote.rmi.RMIServerImpl.makeClient(java.lang.String,javax.security.auth.Subject)"
    ],
    "java.sql.resultset.geturl": [
        "java.sql.ResultSet.getURL(int)",
        "java.sql.ResultSet.getURL(java.lang.String)"
    ],
    "java.security.cert.certpathvalidatorexception.basicreason.values": [
        "java.security.cert.CertPathValidatorException.BasicReason.values()"
    ],
    "javax.net.ssl.sslsocketfactory.getsupportedciphersuites": [
        "javax.net.ssl.SSLSocketFactory.getSupportedCipherSuites()"
    ],
    "javax.swing.plaf.multi.multilistui.contains": [
        "javax.swing.plaf.multi.MultiListUI.contains(javax.swing.JComponent,int,int)"
    ],
    "javax.swing.jtoolbar.setui": [
        "javax.swing.JToolBar.setUI(javax.swing.plaf.ToolBarUI)"
    ],
    "java.net.serversocket.close": [
        "java.net.ServerSocket.close()"
    ],
    "javax.security.auth.callback.choicecallback.getprompt": [
        "javax.security.auth.callback.ChoiceCallback.getPrompt()"
    ],
    "java.awt.dnd.mousedraggesturerecognizer.registerlisteners": [
        "java.awt.dnd.MouseDragGestureRecognizer.registerListeners()"
    ],
    "java.lang.float.hashcode": [
        "java.lang.Float.hashCode(float)",
        "java.lang.Float.hashCode()"
    ],
    "javax.imageio.metadata.iiometadataformat.getobjectmaxvalue": [
        "javax.imageio.metadata.IIOMetadataFormat.getObjectMaxValue(java.lang.String)"
    ],
    "javax.swing.defaultrowsorter.modelwrapper.getvalueat": [
        "javax.swing.DefaultRowSorter.ModelWrapper.getValueAt(int,int)"
    ],
    "java.awt.component.getparent": [
        "java.awt.Component.getParent()"
    ],
    "javax.xml.transform.stream.streamsource.setinputstream": [
        "javax.xml.transform.stream.StreamSource.setInputStream(java.io.InputStream)"
    ],
    "java.sql.databasemetadata.supportsopencursorsacrossrollback": [
        "java.sql.DatabaseMetaData.supportsOpenCursorsAcrossRollback()"
    ],
    "javax.swing.plaf.multi.multidesktopiconui.getminimumsize": [
        "javax.swing.plaf.multi.MultiDesktopIconUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "javax.swing.defaultdesktopmanager.minimizeframe": [
        "javax.swing.DefaultDesktopManager.minimizeFrame(javax.swing.JInternalFrame)"
    ],
    "javax.swing.jcombobox.geteditor": [
        "javax.swing.JComboBox.getEditor()"
    ],
    "org.omg.dynamicany._dynunionstub.insert_ulonglong": [
        "org.omg.DynamicAny._DynUnionStub.insert_ulonglong(long)"
    ],
    "java.awt.graphicsenvironment.getmaximumwindowbounds": [
        "java.awt.GraphicsEnvironment.getMaximumWindowBounds()"
    ],
    "java.sql.callablestatement.setbigdecimal": [
        "java.sql.CallableStatement.setBigDecimal(java.lang.String,java.math.BigDecimal)"
    ],
    "java.awt.image.rescaleop.getoffsets": [
        "java.awt.image.RescaleOp.getOffsets(float[])"
    ],
    "javax.imageio.stream.imageinputstream.readbits": [
        "javax.imageio.stream.ImageInputStream.readBits(int)"
    ],
    "javax.xml.bind.datatypeconverterinterface.printhexbinary": [
        "javax.xml.bind.DatatypeConverterInterface.printHexBinary(byte[])"
    ],
    "java.sql.connection.gettypemap": [
        "java.sql.Connection.getTypeMap()"
    ],
    "javax.print.attribute.standard.printermoreinfomanufacturer.getname": [
        "javax.print.attribute.standard.PrinterMoreInfoManufacturer.getName()"
    ],
    "javax.swing.lookandfeel.getid": [
        "javax.swing.LookAndFeel.getID()"
    ],
    "javax.swing.plaf.synth.synthtooltipui.update": [
        "javax.swing.plaf.synth.SynthToolTipUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.inputmap.get": [
        "javax.swing.InputMap.get(javax.swing.KeyStroke)"
    ],
    "java.sql.databasemetadata.getdrivermajorversion": [
        "java.sql.DatabaseMetaData.getDriverMajorVersion()"
    ],
    "java.awt.fontmetrics.getmaxcharbounds": [
        "java.awt.FontMetrics.getMaxCharBounds(java.awt.Graphics)"
    ],
    "java.util.list.sort": [
        "java.util.List.sort(java.util.Comparator<? super java.util.List>)",
        "java.util.List.sort(java.util.Comparator<? super E>)"
    ],
    "java.util.zip.inflater.getadler": [
        "java.util.zip.Inflater.getAdler()"
    ],
    "java.time.format.decimalstyle.ofdefaultlocale": [
        "java.time.format.DecimalStyle.ofDefaultLocale()"
    ],
    "javax.swing.text.html.minimalhtmlwriter.writeendparagraph": [
        "javax.swing.text.html.MinimalHTMLWriter.writeEndParagraph()"
    ],
    "javax.xml.ws.response.getcontext": [
        "javax.xml.ws.Response.getContext()"
    ],
    "javax.sound.sampled.reverbtype.getlatereflectiondelay": [
        "javax.sound.sampled.ReverbType.getLateReflectionDelay()"
    ],
    "java.nio.channels.spi.abstractselectablechannel.implclosechannel": [
        "java.nio.channels.spi.AbstractSelectableChannel.implCloseChannel()"
    ],
    "java.net.httpurlconnection.getinstancefollowredirects": [
        "java.net.HttpURLConnection.getInstanceFollowRedirects()"
    ],
    "javax.lang.model.util.elementkindvisitor6.visitvariable": [
        "javax.lang.model.util.ElementKindVisitor6.visitVariable(javax.lang.model.element.VariableElement,javax.lang.model.util.ElementKindVisitor6)"
    ],
    "java.sql.databasemetadata.getmaxcolumnsinindex": [
        "java.sql.DatabaseMetaData.getMaxColumnsInIndex()"
    ],
    "javax.sql.rowset.baserowset.clearparameters": [
        "javax.sql.rowset.BaseRowSet.clearParameters()"
    ],
    "java.lang.ref.reference.isenqueued": [
        "java.lang.ref.Reference.isEnqueued()"
    ],
    "java.util.stream.stream.foreachordered": [
        "java.util.stream.Stream.forEachOrdered(java.util.function.Consumer<? super java.util.stream.Stream>)",
        "java.util.stream.Stream.forEachOrdered(java.util.function.Consumer<? super T>)"
    ],
    "org.xml.sax.xmlreader.getdtdhandler": [
        "org.xml.sax.XMLReader.getDTDHandler()"
    ],
    "javax.annotation.processing.filer.createsourcefile": [
        "javax.annotation.processing.Filer.createSourceFile(java.lang.CharSequence,javax.lang.model.element.Element...)"
    ],
    "java.awt.menucomponent.processevent": [
        "java.awt.MenuComponent.processEvent(java.awt.AWTEvent)"
    ],
    "javax.lang.model.type.typevisitor.visitwildcard": [
        "javax.lang.model.type.TypeVisitor.visitWildcard(javax.lang.model.type.WildcardType,javax.lang.model.type.TypeVisitor)"
    ],
    "javax.imageio.metadata.iiometadatanode.lookupprefix": [
        "javax.imageio.metadata.IIOMetadataNode.lookupPrefix(java.lang.String)"
    ],
    "java.awt.event.keyevent.getkeycode": [
        "java.awt.event.KeyEvent.getKeyCode()"
    ],
    "java.io.streamtokenizer.pushback": [
        "java.io.StreamTokenizer.pushBack()"
    ],
    "org.omg.dynamicany._dynunionstub.get_ulong": [
        "org.omg.DynamicAny._DynUnionStub.get_ulong()"
    ],
    "org.omg.dynamicany.dynanyoperations.insert_short": [
        "org.omg.DynamicAny.DynAnyOperations.insert_short(short)"
    ],
    "javax.swing.jtextpane.paramstring": [
        "javax.swing.JTextPane.paramString()"
    ],
    "java.awt.rectangle.createintersection": [
        "java.awt.Rectangle.createIntersection(java.awt.geom.Rectangle2D)"
    ],
    "javax.swing.text.document.remove": [
        "javax.swing.text.Document.remove(int,int)"
    ],
    "java.awt.font.linemetrics.getbaselineindex": [
        "java.awt.font.LineMetrics.getBaselineIndex()"
    ],
    "javax.management.mbeanserverconnection.getmbeaninfo": [
        "javax.management.MBeanServerConnection.getMBeanInfo(javax.management.ObjectName)"
    ],
    "javax.xml.bind.helpers.abstractmarshallerimpl.getnonsschemalocation": [
        "javax.xml.bind.helpers.AbstractMarshallerImpl.getNoNSSchemaLocation()"
    ],
    "java.awt.graphicsdevice.setfullscreenwindow": [
        "java.awt.GraphicsDevice.setFullScreenWindow(java.awt.Window)"
    ],
    "javax.annotation.processing.processingenvironment.getfiler": [
        "javax.annotation.processing.ProcessingEnvironment.getFiler()"
    ],
    "java.security.keyfactory.translatekey": [
        "java.security.KeyFactory.translateKey(java.security.Key)"
    ],
    "javax.imageio.plugins.bmp.bmpimagewriteparam.istopdown": [
        "javax.imageio.plugins.bmp.BMPImageWriteParam.isTopDown()"
    ],
    "javax.sound.sampled.reverbtype.getlatereflectionintensity": [
        "javax.sound.sampled.ReverbType.getLateReflectionIntensity()"
    ],
    "java.awt.image.pixelgrabber.setproperties": [
        "java.awt.image.PixelGrabber.setProperties(,?>)"
    ],
    "javax.sound.midi.spi.midideviceprovider.isdevicesupported": [
        "javax.sound.midi.spi.MidiDeviceProvider.isDeviceSupported(javax.sound.midi.MidiDevice.Info)"
    ],
    "java.util.function.todoublebifunction.applyasdouble": [
        "java.util.function.ToDoubleBiFunction.applyAsDouble(T,U)",
        "java.util.function.ToDoubleBiFunction.applyAsDouble(java.util.function.ToDoubleBiFunction,java.util.function.ToDoubleBiFunction)"
    ],
    "org.ietf.jgss.gsscontext.dispose": [
        "org.ietf.jgss.GSSContext.dispose()"
    ],
    "java.nio.channels.spi.abstractinterruptiblechannel.close": [
        "java.nio.channels.spi.AbstractInterruptibleChannel.close()"
    ],
    "org.xml.sax.ext.lexicalhandler.startentity": [
        "org.xml.sax.ext.LexicalHandler.startEntity(java.lang.String)"
    ],
    "javax.security.auth.login.configuration.getinstance": [
        "javax.security.auth.login.Configuration.getInstance(java.lang.String,javax.security.auth.login.Configuration.Parameters,java.security.Provider)",
        "javax.security.auth.login.Configuration.getInstance(java.lang.String,javax.security.auth.login.Configuration.Parameters,java.lang.String)",
        "javax.security.auth.login.Configuration.getInstance(java.lang.String,javax.security.auth.login.Configuration.Parameters)"
    ],
    "javax.print.attribute.enumsyntax.hashcode": [
        "javax.print.attribute.EnumSyntax.hashCode()"
    ],
    "org.omg.dynamicany._dynanystub.insert_reference": [
        "org.omg.DynamicAny._DynAnyStub.insert_reference(org.omg.CORBA.Object)"
    ],
    "java.time.localdatetime.withyear": [
        "java.time.LocalDateTime.withYear(int)"
    ],
    "java.util.concurrent.concurrentnavigablemap.descendingmap": [
        "java.util.concurrent.ConcurrentNavigableMap.descendingMap()"
    ],
    "java.awt.eventqueue.peekevent": [
        "java.awt.EventQueue.peekEvent()",
        "java.awt.EventQueue.peekEvent(int)"
    ],
    "java.util.prefs.abstractpreferences.exportsubtree": [
        "java.util.prefs.AbstractPreferences.exportSubtree(java.io.OutputStream)"
    ],
    "java.util.stream.collectors.summingdouble": [
        "java.util.stream.Collectors.summingDouble(java.util.function.ToDoubleFunction<? super T>)"
    ],
    "java.awt.print.pageformat.getwidth": [
        "java.awt.print.PageFormat.getWidth()"
    ],
    "org.xml.sax.helpers.xmlreaderadapter.startprefixmapping": [
        "org.xml.sax.helpers.XMLReaderAdapter.startPrefixMapping(java.lang.String,java.lang.String)"
    ],
    "org.w3c.dom.ls.lsparser.parseuri": [
        "org.w3c.dom.ls.LSParser.parseURI(java.lang.String)"
    ],
    "java.sql.sqltype.getname": [
        "java.sql.SQLType.getName()"
    ],
    "javax.swing.text.jtextcomponent.removecaretlistener": [
        "javax.swing.text.JTextComponent.removeCaretListener(javax.swing.event.CaretListener)"
    ],
    "javax.swing.plaf.basic.basicspinnerui.createeditor": [
        "javax.swing.plaf.basic.BasicSpinnerUI.createEditor()"
    ],
    "javax.swing.text.stylededitorkit.getinputattributes": [
        "javax.swing.text.StyledEditorKit.getInputAttributes()"
    ],
    "javax.swing.undo.abstractundoableedit.getredopresentationname": [
        "javax.swing.undo.AbstractUndoableEdit.getRedoPresentationName()"
    ],
    "javax.xml.transform.sax.saxsource.setsystemid": [
        "javax.xml.transform.sax.SAXSource.setSystemId(java.lang.String)"
    ],
    "java.util.concurrent.forkjointask.setrawresult": [
        "java.util.concurrent.ForkJoinTask.setRawResult(java.util.concurrent.ForkJoinTask)",
        "java.util.concurrent.ForkJoinTask.setRawResult(V)"
    ],
    "javax.swing.jtable.addrowselectioninterval": [
        "javax.swing.JTable.addRowSelectionInterval(int,int)"
    ],
    "javax.swing.grouplayout.setautocreategaps": [
        "javax.swing.GroupLayout.setAutoCreateGaps(boolean)"
    ],
    "javax.imageio.imagewriter.prepareinsertempty": [
        "javax.imageio.ImageWriter.prepareInsertEmpty(int,javax.imageio.ImageTypeSpecifier,int,int,javax.imageio.metadata.IIOMetadata,java.util.List<? extends java.awt.image.BufferedImage>,javax.imageio.ImageWriteParam)"
    ],
    "java.util.concurrent.atomic.atomicboolean.set": [
        "java.util.concurrent.atomic.AtomicBoolean.set(boolean)"
    ],
    "org.xml.sax.ext.declhandler.elementdecl": [
        "org.xml.sax.ext.DeclHandler.elementDecl(java.lang.String,java.lang.String)"
    ],
    "javax.swing.jtable.getaccessiblecontext": [
        "javax.swing.JTable.getAccessibleContext()"
    ],
    "org.w3c.dom.userdatahandler.handle": [
        "org.w3c.dom.UserDataHandler.handle(short,java.lang.String,java.lang.Object,org.w3c.dom.Node,org.w3c.dom.Node)"
    ],
    "javax.sound.sampled.line.info.getlineclass": [
        "javax.sound.sampled.Line.Info.getLineClass()"
    ],
    "javax.swing.plaf.basic.basicsplitpanedivider.setborder": [
        "javax.swing.plaf.basic.BasicSplitPaneDivider.setBorder(javax.swing.border.Border)"
    ],
    "java.nio.channels.serversocketchannel.socket": [
        "java.nio.channels.ServerSocketChannel.socket()"
    ],
    "org.omg.dynamicany._dynvaluestub.insert_double": [
        "org.omg.DynamicAny._DynValueStub.insert_double(double)"
    ],
    "javax.swing.event.listdataevent.gettype": [
        "javax.swing.event.ListDataEvent.getType()"
    ],
    "java.io.randomaccessfile.readlong": [
        "java.io.RandomAccessFile.readLong()"
    ],
    "java.util.illformedlocaleexception.geterrorindex": [
        "java.util.IllformedLocaleException.getErrorIndex()"
    ],
    "java.net.datagramsocket.isconnected": [
        "java.net.DatagramSocket.isConnected()"
    ],
    "org.xml.sax.ext.defaulthandler2.getexternalsubset": [
        "org.xml.sax.ext.DefaultHandler2.getExternalSubset(java.lang.String,java.lang.String)"
    ],
    "java.time.instant.query": [
        "java.time.Instant.query(java.time.temporal.TemporalQuery<R>)"
    ],
    "javax.swing.plaf.nimbus.abstractregionpainter.configuregraphics": [
        "javax.swing.plaf.nimbus.AbstractRegionPainter.configureGraphics(java.awt.Graphics2D)"
    ],
    "java.beans.eventsetdescriptor.getlistenermethods": [
        "java.beans.EventSetDescriptor.getListenerMethods()"
    ],
    "java.time.localdate.plusweeks": [
        "java.time.LocalDate.plusWeeks(long)"
    ],
    "javax.swing.plaf.basic.basictreeui.createdefaultcellrenderer": [
        "javax.swing.plaf.basic.BasicTreeUI.createDefaultCellRenderer()"
    ],
    "javax.sound.midi.midichannel.controlchange": [
        "javax.sound.midi.MidiChannel.controlChange(int,int)"
    ],
    "javax.xml.crypto.dsig.xmlsignaturefactory.isfeaturesupported": [
        "javax.xml.crypto.dsig.XMLSignatureFactory.isFeatureSupported(java.lang.String)"
    ],
    "java.lang.stringbuilder.setlength": [
        "java.lang.StringBuilder.setLength(int)"
    ],
    "javax.swing.jtabbedpane.add": [
        "javax.swing.JTabbedPane.add(java.awt.Component,java.lang.Object,int)",
        "javax.swing.JTabbedPane.add(java.awt.Component,java.lang.Object)",
        "javax.swing.JTabbedPane.add(java.awt.Component,int)",
        "javax.swing.JTabbedPane.add(java.awt.Component)",
        "javax.swing.JTabbedPane.add(java.lang.String,java.awt.Component)"
    ],
    "java.io.fileinputstream.getfd": [
        "java.io.FileInputStream.getFD()"
    ],
    "java.lang.strictmath.acos": [
        "java.lang.StrictMath.acos(double)"
    ],
    "javax.swing.swingutilities.replaceuiinputmap": [
        "javax.swing.SwingUtilities.replaceUIInputMap(javax.swing.JComponent,int,javax.swing.InputMap)"
    ],
    "java.nio.file.attribute.posixfileattributeview.name": [
        "java.nio.file.attribute.PosixFileAttributeView.name()"
    ],
    "java.sql.callablestatement.settime": [
        "java.sql.CallableStatement.setTime(java.lang.String,java.sql.Time)",
        "java.sql.CallableStatement.setTime(java.lang.String,java.sql.Time,java.util.Calendar)"
    ],
    "javax.swing.text.defaultformatterfactory.getdefaultformatter": [
        "javax.swing.text.DefaultFormatterFactory.getDefaultFormatter()"
    ],
    "java.util.concurrent.forkjointask.tryunfork": [
        "java.util.concurrent.ForkJoinTask.tryUnfork()"
    ],
    "javax.swing.text.abstractdocument.putproperty": [
        "javax.swing.text.AbstractDocument.putProperty(java.lang.Object,java.lang.Object)"
    ],
    "org.omg.corba.localobject.validate_connection": [
        "org.omg.CORBA.LocalObject.validate_connection()"
    ],
    "javax.imageio.metadata.iiometadatanode.getschematypeinfo": [
        "javax.imageio.metadata.IIOMetadataNode.getSchemaTypeInfo()"
    ],
    "java.util.concurrent.locks.lock.newcondition": [
        "java.util.concurrent.locks.Lock.newCondition()"
    ],
    "java.math.bigdecimal.scale": [
        "java.math.BigDecimal.scale()"
    ],
    "javax.swing.jtextarea.append": [
        "javax.swing.JTextArea.append(java.lang.String)"
    ],
    "javax.swing.jmenu.setmodel": [
        "javax.swing.JMenu.setModel(javax.swing.ButtonModel)"
    ],
    "javax.management.openmbean.arraytype.hashcode": [
        "javax.management.openmbean.ArrayType.hashCode()"
    ],
    "javax.swing.jtable.getgridcolor": [
        "javax.swing.JTable.getGridColor()"
    ],
    "java.net.socketimpl.connect": [
        "java.net.SocketImpl.connect(java.net.InetAddress,int)",
        "java.net.SocketImpl.connect(java.net.SocketAddress,int)",
        "java.net.SocketImpl.connect(java.lang.String,int)"
    ],
    "java.awt.geom.arc2d.float.getx": [
        "java.awt.geom.Arc2D.Float.getX()"
    ],
    "java.nio.channels.scatteringbytechannel.read": [
        "java.nio.channels.ScatteringByteChannel.read(java.nio.ByteBuffer,int,int)",
        "java.nio.channels.ScatteringByteChannel.read(java.nio.ByteBuffer[])",
        "java.nio.channels.ScatteringByteChannel.read(java.nio.ByteBuffer)",
        "java.nio.channels.ScatteringByteChannel.read(java.nio.ByteBuffer[],int,int)"
    ],
    "javax.crypto.secretkeyfactory.getprovider": [
        "javax.crypto.SecretKeyFactory.getProvider()"
    ],
    "javax.management.objectname.getkeypropertyliststring": [
        "javax.management.ObjectName.getKeyPropertyListString()"
    ],
    "java.util.concurrent.concurrentskiplistset.tailset": [
        "java.util.concurrent.ConcurrentSkipListSet.tailSet(E)"
    ],
    "javax.swing.plaf.basic.basictextui.propertychange": [
        "javax.swing.plaf.basic.BasicTextUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "java.time.temporal.weekfields.weekbasedyear": [
        "java.time.temporal.WeekFields.weekBasedYear()"
    ],
    "java.lang.class.desiredassertionstatus": [
        "java.lang.Class.desiredAssertionStatus()"
    ],
    "java.security.cert.x509certificate.getbasicconstraints": [
        "java.security.cert.X509Certificate.getBasicConstraints()"
    ],
    "javax.swing.transferhandler.transfersupport.getcomponent": [
        "javax.swing.TransferHandler.TransferSupport.getComponent()"
    ],
    "org.omg.dynamicany._dynanystub.get_long": [
        "org.omg.DynamicAny._DynAnyStub.get_long()"
    ],
    "javax.management.modelmbean.modelmbeaninfo.getdescription": [
        "javax.management.modelmbean.ModelMBeanInfo.getDescription()"
    ],
    "java.io.file.getparentfile": [
        "java.io.File.getParentFile()"
    ],
    "org.w3c.dom.element.getattribute": [
        "org.w3c.dom.Element.getAttribute(java.lang.String)"
    ],
    "org.omg.dynamicany.dynarrayoperations.get_elements_as_dyn_any": [
        "org.omg.DynamicAny.DynArrayOperations.get_elements_as_dyn_any()"
    ],
    "java.security.key.getencoded": [
        "java.security.Key.getEncoded()"
    ],
    "java.sql.preparedstatement.setbigdecimal": [
        "java.sql.PreparedStatement.setBigDecimal(int,java.math.BigDecimal)"
    ],
    "javax.swing.text.jtextcomponent.setmargin": [
        "javax.swing.text.JTextComponent.setMargin(java.awt.Insets)"
    ],
    "javax.swing.jtable.getrowheight": [
        "javax.swing.JTable.getRowHeight()",
        "javax.swing.JTable.getRowHeight(int)"
    ],
    "javax.swing.text.highlighter.addhighlight": [
        "javax.swing.text.Highlighter.addHighlight(int,int,javax.swing.text.Highlighter.HighlightPainter)"
    ],
    "java.nio.file.attribute.dosfileattributeview.setsystem": [
        "java.nio.file.attribute.DosFileAttributeView.setSystem(boolean)"
    ],
    "javax.xml.soap.soappart.getcontentid": [
        "javax.xml.soap.SOAPPart.getContentId()"
    ],
    "javax.swing.jtoolbar.separator.getminimumsize": [
        "javax.swing.JToolBar.Separator.getMinimumSize()"
    ],
    "javax.crypto.mac.getprovider": [
        "javax.crypto.Mac.getProvider()"
    ],
    "javax.swing.jtoolbar.setmargin": [
        "javax.swing.JToolBar.setMargin(java.awt.Insets)"
    ],
    "javax.security.auth.kerberos.kerberoskey.equals": [
        "javax.security.auth.kerberos.KerberosKey.equals(java.lang.Object)"
    ],
    "java.time.temporal.temporalfield.getdisplayname": [
        "java.time.temporal.TemporalField.getDisplayName(java.util.Locale)"
    ],
    "java.security.basicpermission.getactions": [
        "java.security.BasicPermission.getActions()"
    ],
    "javax.swing.plaf.synth.synthlookandfeel.getid": [
        "javax.swing.plaf.synth.SynthLookAndFeel.getID()"
    ],
    "java.security.cert.x509crlselector.setissuernames": [
        "java.security.cert.X509CRLSelector.setIssuerNames(java.util.Collection<?>)"
    ],
    "java.util.navigablemap.lastentry": [
        "java.util.NavigableMap.lastEntry()"
    ],
    "javax.print.attribute.standard.documentname.getcategory": [
        "javax.print.attribute.standard.DocumentName.getCategory()"
    ],
    "javax.swing.plaf.basic.basicprogressbarui.getanimationindex": [
        "javax.swing.plaf.basic.BasicProgressBarUI.getAnimationIndex()"
    ],
    "javax.xml.transform.stream.streamresult.getsystemid": [
        "javax.xml.transform.stream.StreamResult.getSystemId()"
    ],
    "java.nio.charset.charsetencoder.implflush": [
        "java.nio.charset.CharsetEncoder.implFlush(java.nio.ByteBuffer)"
    ],
    "javax.xml.transform.transformerexception.initcause": [
        "javax.xml.transform.TransformerException.initCause(java.lang.Throwable)"
    ],
    "javax.sql.rowset.serial.serialblob.hashcode": [
        "javax.sql.rowset.serial.SerialBlob.hashCode()"
    ],
    "java.io.objectinputstream.getfield.get": [
        "java.io.ObjectInputStream.GetField.get(java.lang.String,boolean)",
        "java.io.ObjectInputStream.GetField.get(java.lang.String,byte)",
        "java.io.ObjectInputStream.GetField.get(java.lang.String,char)",
        "java.io.ObjectInputStream.GetField.get(java.lang.String,long)",
        "java.io.ObjectInputStream.GetField.get(java.lang.String,int)",
        "java.io.ObjectInputStream.GetField.get(java.lang.String,float)",
        "java.io.ObjectInputStream.GetField.get(java.lang.String,java.lang.Object)",
        "java.io.ObjectInputStream.GetField.get(java.lang.String,double)",
        "java.io.ObjectInputStream.GetField.get(java.lang.String,short)"
    ],
    "java.util.concurrent.locks.stampedlock.readlockinterruptibly": [
        "java.util.concurrent.locks.StampedLock.readLockInterruptibly()"
    ],
    "java.text.rulebasedcollator.hashcode": [
        "java.text.RuleBasedCollator.hashCode()"
    ],
    "javax.print.attribute.attributeset.hashcode": [
        "javax.print.attribute.AttributeSet.hashCode()"
    ],
    "javax.swing.plaf.basic.basicsplitpanedivider.propertychange": [
        "javax.swing.plaf.basic.BasicSplitPaneDivider.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "java.util.spliterators.abstractlongspliterator.estimatesize": [
        "java.util.Spliterators.AbstractLongSpliterator.estimateSize()"
    ],
    "java.security.cert.certstore.getcrls": [
        "java.security.cert.CertStore.getCRLs(java.security.cert.CRLSelector)"
    ],
    "java.util.optionalint.orelse": [
        "java.util.OptionalInt.orElse(int)"
    ],
    "javax.print.attribute.standard.pagesperminute.getname": [
        "javax.print.attribute.standard.PagesPerMinute.getName()"
    ],
    "javax.crypto.keygenerator.getprovider": [
        "javax.crypto.KeyGenerator.getProvider()"
    ],
    "javax.management.remote.rmi.rmiconnection.querymbeans": [
        "javax.management.remote.rmi.RMIConnection.queryMBeans(javax.management.ObjectName,java.rmi.MarshalledObject,javax.security.auth.Subject)"
    ],
    "java.lang.instrument.instrumentation.setnativemethodprefix": [
        "java.lang.instrument.Instrumentation.setNativeMethodPrefix(java.lang.instrument.ClassFileTransformer,java.lang.String)"
    ],
    "java.awt.geom.rectangle2d.createunion": [
        "java.awt.geom.Rectangle2D.createUnion(java.awt.geom.Rectangle2D)"
    ],
    "java.util.concurrent.completionservice.poll": [
        "java.util.concurrent.CompletionService.poll()",
        "java.util.concurrent.CompletionService.poll(long,java.util.concurrent.TimeUnit)"
    ],
    "javax.net.ssl.sslengineresult.bytesproduced": [
        "javax.net.ssl.SSLEngineResult.bytesProduced()"
    ],
    "java.security.allpermission.hashcode": [
        "java.security.AllPermission.hashCode()"
    ],
    "java.awt.keyboardfocusmanager.getdefaultfocustraversalkeys": [
        "java.awt.KeyboardFocusManager.getDefaultFocusTraversalKeys(int)"
    ],
    "java.security.cert.x509certselector.setissuer": [
        "java.security.cert.X509CertSelector.setIssuer(javax.security.auth.x500.X500Principal)",
        "java.security.cert.X509CertSelector.setIssuer(byte[])"
    ],
    "java.sql.callablestatement.getdate": [
        "java.sql.CallableStatement.getDate(java.lang.String)",
        "java.sql.CallableStatement.getDate(int)",
        "java.sql.CallableStatement.getDate(int,java.util.Calendar)",
        "java.sql.CallableStatement.getDate(java.lang.String,java.util.Calendar)"
    ],
    "org.omg.dynamicany._dynenumstub.get_octet": [
        "org.omg.DynamicAny._DynEnumStub.get_octet()"
    ],
    "java.sql.statement.setmaxfieldsize": [
        "java.sql.Statement.setMaxFieldSize(int)"
    ],
    "java.time.zoneddatetime.oflocal": [
        "java.time.ZonedDateTime.ofLocal(java.time.LocalDateTime,java.time.ZoneId,java.time.ZoneOffset)"
    ],
    "javax.xml.soap.mimeheaders.addheader": [
        "javax.xml.soap.MimeHeaders.addHeader(java.lang.String,java.lang.String)"
    ],
    "javax.swing.plaf.treeui.getpathbounds": [
        "javax.swing.plaf.TreeUI.getPathBounds(javax.swing.JTree,javax.swing.tree.TreePath)"
    ],
    "java.sql.sqloutput.writedate": [
        "java.sql.SQLOutput.writeDate(java.sql.Date)"
    ],
    "java.beans.beancontext.beancontextchildsupport.removevetoablechangelistener": [
        "java.beans.beancontext.BeanContextChildSupport.removeVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)"
    ],
    "javax.swing.jlist.getanchorselectionindex": [
        "javax.swing.JList.getAnchorSelectionIndex()"
    ],
    "java.time.zoneddatetime.withzonesameinstant": [
        "java.time.ZonedDateTime.withZoneSameInstant(java.time.ZoneId)"
    ],
    "javax.swing.plaf.basic.basictreeui.getrowcount": [
        "javax.swing.plaf.basic.BasicTreeUI.getRowCount(javax.swing.JTree)"
    ],
    "javax.lang.model.util.simpleannotationvaluevisitor6.visitlong": [
        "javax.lang.model.util.SimpleAnnotationValueVisitor6.visitLong(long,javax.lang.model.util.SimpleAnnotationValueVisitor6)"
    ],
    "java.awt.menucomponent.setname": [
        "java.awt.MenuComponent.setName(java.lang.String)"
    ],
    "javax.swing.plaf.basic.basiclookandfeel.initcomponentdefaults": [
        "javax.swing.plaf.basic.BasicLookAndFeel.initComponentDefaults(javax.swing.UIDefaults)"
    ],
    "java.io.objectstreamfield.tostring": [
        "java.io.ObjectStreamField.toString()"
    ],
    "java.util.concurrent.futuretask.runandreset": [
        "java.util.concurrent.FutureTask.runAndReset()"
    ],
    "org.omg.portableserver.currentoperations.get_poa": [
        "org.omg.PortableServer.CurrentOperations.get_POA()"
    ],
    "javax.swing.plaf.multi.multiscrollbarui.installui": [
        "javax.swing.plaf.multi.MultiScrollBarUI.installUI(javax.swing.JComponent)"
    ],
    "java.util.formatter.locale": [
        "java.util.Formatter.locale()"
    ],
    "java.security.algorithmconstraints.permits": [
        "java.security.AlgorithmConstraints.permits(java.util.Set<java.security.CryptoPrimitive>,java.lang.String,java.security.Key,java.security.AlgorithmParameters)",
        "java.security.AlgorithmConstraints.permits(java.util.Set<java.security.CryptoPrimitive>,java.security.Key)",
        "java.security.AlgorithmConstraints.permits(java.util.Set<java.security.CryptoPrimitive>,java.lang.String,java.security.AlgorithmParameters)"
    ],
    "java.util.locale.languagerange.getweight": [
        "java.util.Locale.LanguageRange.getWeight()"
    ],
    "javax.swing.spinnerlistmodel.setlist": [
        "javax.swing.SpinnerListModel.setList(java.util.List<?>)"
    ],
    "java.security.provider.service.getalgorithm": [
        "java.security.Provider.Service.getAlgorithm()"
    ],
    "javax.swing.jtextarea.getcolumnwidth": [
        "javax.swing.JTextArea.getColumnWidth()"
    ],
    "javax.swing.table.defaulttablemodel.removerow": [
        "javax.swing.table.DefaultTableModel.removeRow(int)"
    ],
    "java.util.concurrent.concurrenthashmap.values": [
        "java.util.concurrent.ConcurrentHashMap.values()"
    ],
    "org.omg.dynamicany._dynenumstub.get_string": [
        "org.omg.DynamicAny._DynEnumStub.get_string()"
    ],
    "javax.imageio.metadata.iiometadataformat.getattributelistminlength": [
        "javax.imageio.metadata.IIOMetadataFormat.getAttributeListMinLength(java.lang.String,java.lang.String)"
    ],
    "java.util.concurrent.scheduledthreadpoolexecutor.shutdownnow": [
        "java.util.concurrent.ScheduledThreadPoolExecutor.shutdownNow()"
    ],
    "java.awt.color.icc_profile.getnumcomponents": [
        "java.awt.color.ICC_Profile.getNumComponents()"
    ],
    "javax.swing.table.tablecolumn.setheadervalue": [
        "javax.swing.table.TableColumn.setHeaderValue(java.lang.Object)"
    ],
    "java.awt.component.remove": [
        "java.awt.Component.remove(java.awt.MenuComponent)"
    ],
    "java.awt.geom.line2d.double.getp2": [
        "java.awt.geom.Line2D.Double.getP2()"
    ],
    "javax.swing.plaf.metal.metaltheme.getmenuselectedforeground": [
        "javax.swing.plaf.metal.MetalTheme.getMenuSelectedForeground()"
    ],
    "java.awt.geom.rectangle2d.float.getbounds2d": [
        "java.awt.geom.Rectangle2D.Float.getBounds2D()"
    ],
    "javax.swing.plaf.basic.basiccombopopup.createlistdatalistener": [
        "javax.swing.plaf.basic.BasicComboPopup.createListDataListener()"
    ],
    "org.xml.sax.saxparseexception.getlinenumber": [
        "org.xml.sax.SAXParseException.getLineNumber()"
    ],
    "org.omg.corba.orb.object_to_string": [
        "org.omg.CORBA.ORB.object_to_string(org.omg.CORBA.Object)"
    ],
    "java.awt.component.addmousewheellistener": [
        "java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"
    ],
    "java.awt.geom.flatteningpathiterator.next": [
        "java.awt.geom.FlatteningPathIterator.next()"
    ],
    "java.lang.management.threadinfo.getthreadname": [
        "java.lang.management.ThreadInfo.getThreadName()"
    ],
    "javax.print.attribute.standard.pdloverridesupported.getname": [
        "javax.print.attribute.standard.PDLOverrideSupported.getName()"
    ],
    "java.applet.audioclip.stop": [
        "java.applet.AudioClip.stop()"
    ],
    "org.omg.corba.setoverridetype.from_int": [
        "org.omg.CORBA.SetOverrideType.from_int(int)"
    ],
    "javax.swing.jtree.setshowsroothandles": [
        "javax.swing.JTree.setShowsRootHandles(boolean)"
    ],
    "java.util.concurrent.executorservice.shutdown": [
        "java.util.concurrent.ExecutorService.shutdown()"
    ],
    "java.time.offsetdatetime.atzonesameinstant": [
        "java.time.OffsetDateTime.atZoneSameInstant(java.time.ZoneId)"
    ],
    "javax.swing.plaf.synth.synthlookandfeel.getregion": [
        "javax.swing.plaf.synth.SynthLookAndFeel.getRegion(javax.swing.JComponent)"
    ],
    "javax.activation.urldatasource.getcontenttype": [
        "javax.activation.URLDataSource.getContentType()"
    ],
    "javax.swing.plaf.basic.basictabbedpaneui.createscrollbutton": [
        "javax.swing.plaf.basic.BasicTabbedPaneUI.createScrollButton(int)"
    ],
    "java.sql.sqlwarning.setnextwarning": [
        "java.sql.SQLWarning.setNextWarning(java.sql.SQLWarning)"
    ],
    "java.awt.image.writablerenderedimage.istilewritable": [
        "java.awt.image.WritableRenderedImage.isTileWritable(int,int)"
    ],
    "javax.swing.timer.getinitialdelay": [
        "javax.swing.Timer.getInitialDelay()"
    ],
    "java.net.urlconnection.setdoinput": [
        "java.net.URLConnection.setDoInput(boolean)"
    ],
    "javax.swing.text.html.htmleditorkit.setstylesheet": [
        "javax.swing.text.html.HTMLEditorKit.setStyleSheet(javax.swing.text.html.StyleSheet)"
    ],
    "javax.print.attribute.standard.jobmessagefromoperator.getname": [
        "javax.print.attribute.standard.JobMessageFromOperator.getName()"
    ],
    "java.lang.management.managementfactory.getoperatingsystemmxbean": [
        "java.lang.management.ManagementFactory.getOperatingSystemMXBean()"
    ],
    "java.util.concurrent.concurrentmap.putifabsent": [
        "java.util.concurrent.ConcurrentMap.putIfAbsent(K,V)",
        "java.util.concurrent.ConcurrentMap.putIfAbsent(java.util.concurrent.ConcurrentMap,java.util.concurrent.ConcurrentMap)"
    ],
    "javax.swing.text.styleconstants.isstrikethrough": [
        "javax.swing.text.StyleConstants.isStrikeThrough(javax.swing.text.AttributeSet)"
    ],
    "javax.sound.sampled.audioformat.properties": [
        "javax.sound.sampled.AudioFormat.properties()"
    ],
    "javax.management.badbinaryopvalueexpexception.tostring": [
        "javax.management.BadBinaryOpValueExpException.toString()"
    ],
    "java.util.timer.purge": [
        "java.util.Timer.purge()"
    ],
    "javax.management.notification.tostring": [
        "javax.management.Notification.toString()"
    ],
    "java.nio.file.files.newbufferedwriter": [
        "java.nio.file.Files.newBufferedWriter(java.nio.file.Path,java.nio.file.OpenOption)",
        "java.nio.file.Files.newBufferedWriter(java.nio.file.Path,java.nio.charset.Charset,java.nio.file.OpenOption)",
        "java.nio.file.Files.newBufferedWriter(java.nio.file.Path,java.nio.charset.Charset,java.nio.file.OpenOption...)",
        "java.nio.file.Files.newBufferedWriter(java.nio.file.Path,java.nio.file.OpenOption...)"
    ],
    "java.security.cert.certpathbuilder.getrevocationchecker": [
        "java.security.cert.CertPathBuilder.getRevocationChecker()"
    ],
    "java.time.localdate.minus": [
        "java.time.LocalDate.minus(java.time.temporal.TemporalAmount)",
        "java.time.LocalDate.minus(long,java.time.temporal.TemporalUnit)"
    ],
    "java.security.cert.pkixrevocationchecker.getsoftfailexceptions": [
        "java.security.cert.PKIXRevocationChecker.getSoftFailExceptions()"
    ],
    "java.util.concurrent.atomic.atomicinteger.accumulateandget": [
        "java.util.concurrent.atomic.AtomicInteger.accumulateAndGet(int,java.util.function.IntBinaryOperator)"
    ],
    "java.awt.component.iscursorset": [
        "java.awt.Component.isCursorSet()"
    ],
    "java.util.concurrent.atomic.atomiclong.intvalue": [
        "java.util.concurrent.atomic.AtomicLong.intValue()"
    ],
    "java.sql.databasemetadata.getjdbcminorversion": [
        "java.sql.DatabaseMetaData.getJDBCMinorVersion()"
    ],
    "java.util.arraydeque.iterator": [
        "java.util.ArrayDeque.iterator()"
    ],
    "java.awt.image.componentsamplemodel.setdataelements": [
        "java.awt.image.ComponentSampleModel.setDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)"
    ],
    "java.nio.channels.spi.abstractinterruptiblechannel.end": [
        "java.nio.channels.spi.AbstractInterruptibleChannel.end(boolean)"
    ],
    "javax.tools.standardjavafilemanager.setlocation": [
        "javax.tools.StandardJavaFileManager.setLocation(javax.tools.JavaFileManager.Location,java.lang.Iterable<? extends java.io.File>)"
    ],
    "java.time.localdate.withdayofyear": [
        "java.time.LocalDate.withDayOfYear(int)"
    ],
    "javax.management.mbeanserverconnection.getattribute": [
        "javax.management.MBeanServerConnection.getAttribute(javax.management.ObjectName,java.lang.String)"
    ],
    "java.security.messagedigestspi.enginereset": [
        "java.security.MessageDigestSpi.engineReset()"
    ],
    "java.time.format.decimalstyle.getzerodigit": [
        "java.time.format.DecimalStyle.getZeroDigit()"
    ],
    "javax.management.modelmbean.modelmbeaninfo.getconstructors": [
        "javax.management.modelmbean.ModelMBeanInfo.getConstructors()"
    ],
    "java.lang.reflect.modifier.parametermodifiers": [
        "java.lang.reflect.Modifier.parameterModifiers()"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readtime": [
        "javax.sql.rowset.serial.SQLInputImpl.readTime()"
    ],
    "javax.swing.jtable.getcolumnmodel": [
        "javax.swing.JTable.getColumnModel()"
    ],
    "java.sql.resultset.cancelrowupdates": [
        "java.sql.ResultSet.cancelRowUpdates()"
    ],
    "java.util.treemap.size": [
        "java.util.TreeMap.size()"
    ],
    "javax.swing.plaf.multi.multispinnerui.paint": [
        "javax.swing.plaf.multi.MultiSpinnerUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.abstractbutton.getpressedicon": [
        "javax.swing.AbstractButton.getPressedIcon()"
    ],
    "javax.swing.plaf.synth.synthoptionpaneui.update": [
        "javax.swing.plaf.synth.SynthOptionPaneUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.text.html.parser.dtd.getname": [
        "javax.swing.text.html.parser.DTD.getName()"
    ],
    "java.rmi.activation.activationgroupid.getsystem": [
        "java.rmi.activation.ActivationGroupID.getSystem()"
    ],
    "javax.swing.jpopupmenu.removepopupmenulistener": [
        "javax.swing.JPopupMenu.removePopupMenuListener(javax.swing.event.PopupMenuListener)"
    ],
    "javax.swing.plaf.multi.multitableheaderui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiTableHeaderUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "org.omg.dynamicany._dynstructstub.insert_short": [
        "org.omg.DynamicAny._DynStructStub.insert_short(short)"
    ],
    "javax.sound.sampled.dataline.getlongframeposition": [
        "javax.sound.sampled.DataLine.getLongFramePosition()"
    ],
    "javax.swing.plaf.metal.metalcomboboxui.paintcurrentvalue": [
        "javax.swing.plaf.metal.MetalComboBoxUI.paintCurrentValue(java.awt.Graphics,java.awt.Rectangle,boolean)"
    ],
    "java.beans.beancontext.beancontextsupport.oktousegui": [
        "java.beans.beancontext.BeanContextSupport.okToUseGui()"
    ],
    "java.rmi.server.rmiclassloader.getclassloader": [
        "java.rmi.server.RMIClassLoader.getClassLoader(java.lang.String)"
    ],
    "java.nio.file.files.createtempfile": [
        "java.nio.file.Files.createTempFile(java.nio.file.Path,java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute<?>...)",
        "java.nio.file.Files.createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute<?>...)",
        "java.nio.file.Files.createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute<?>)",
        "java.nio.file.Files.createTempFile(java.nio.file.Path,java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute<?>)"
    ],
    "java.lang.class.getgenericinterfaces": [
        "java.lang.Class.getGenericInterfaces()"
    ],
    "org.omg.dynamicany._dynanystub.insert_dyn_any": [
        "org.omg.DynamicAny._DynAnyStub.insert_dyn_any(org.omg.DynamicAny.DynAny)"
    ],
    "org.omg.dynamicany._dynfixedstub.get_boolean": [
        "org.omg.DynamicAny._DynFixedStub.get_boolean()"
    ],
    "java.time.year.from": [
        "java.time.Year.from(java.time.temporal.TemporalAccessor)"
    ],
    "java.security.interfaces.dsapublickey.gety": [
        "java.security.interfaces.DSAPublicKey.getY()"
    ],
    "javax.swing.plaf.basic.basictextui.installdefaults": [
        "javax.swing.plaf.basic.BasicTextUI.installDefaults()"
    ],
    "javax.swing.jlabel.settext": [
        "javax.swing.JLabel.setText(java.lang.String)"
    ],
    "java.awt.geom.line2d.double.getx1": [
        "java.awt.geom.Line2D.Double.getX1()"
    ],
    "javax.swing.plaf.basic.basicfilechooserui.isdirectoryselected": [
        "javax.swing.plaf.basic.BasicFileChooserUI.isDirectorySelected()"
    ],
    "javax.swing.jfilechooser.getdialogtype": [
        "javax.swing.JFileChooser.getDialogType()"
    ],
    "javax.imageio.spi.serviceregistry.finalize": [
        "javax.imageio.spi.ServiceRegistry.finalize()"
    ],
    "javax.script.scriptcontext.removeattribute": [
        "javax.script.ScriptContext.removeAttribute(java.lang.String,int)"
    ],
    "javax.xml.bind.marshaller.setschema": [
        "javax.xml.bind.Marshaller.setSchema(javax.xml.validation.Schema)"
    ],
    "java.util.concurrent.atomic.atomiclong.updateandget": [
        "java.util.concurrent.atomic.AtomicLong.updateAndGet(java.util.function.LongUnaryOperator)"
    ],
    "javax.swing.plaf.synth.synthsliderui.painttrack": [
        "javax.swing.plaf.synth.SynthSliderUI.paintTrack(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,java.awt.Rectangle)"
    ],
    "java.security.cert.certpathbuilderspi.enginegetrevocationchecker": [
        "java.security.cert.CertPathBuilderSpi.engineGetRevocationChecker()"
    ],
    "java.util.zip.zipentry.setcrc": [
        "java.util.zip.ZipEntry.setCrc(long)"
    ],
    "java.awt.gridlayout.addlayoutcomponent": [
        "java.awt.GridLayout.addLayoutComponent(java.lang.String,java.awt.Component)"
    ],
    "javax.swing.plaf.basic.combopopup.getkeylistener": [
        "javax.swing.plaf.basic.ComboPopup.getKeyListener()"
    ],
    "javax.naming.refaddr.tostring": [
        "javax.naming.RefAddr.toString()"
    ],
    "java.sql.sqlinput.readnstring": [
        "java.sql.SQLInput.readNString()"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getcurrenttheme": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getCurrentTheme()"
    ],
    "javax.sql.rowset.joinrowset.supportsrightouterjoin": [
        "javax.sql.rowset.JoinRowSet.supportsRightOuterJoin()"
    ],
    "javax.swing.defaultcomboboxmodel.removeallelements": [
        "javax.swing.DefaultComboBoxModel.removeAllElements()"
    ],
    "javax.sql.rowset.setblob": [
        "javax.sql.RowSet.setBlob(java.lang.String,java.sql.Blob)",
        "javax.sql.RowSet.setBlob(int,java.io.InputStream,long)",
        "javax.sql.RowSet.setBlob(java.lang.String,java.io.InputStream,long)",
        "javax.sql.RowSet.setBlob(int,java.sql.Blob)",
        "javax.sql.RowSet.setBlob(java.lang.String,java.io.InputStream)",
        "javax.sql.RowSet.setBlob(int,java.io.InputStream)"
    ],
    "java.awt.datatransfer.transferable.gettransferdata": [
        "java.awt.datatransfer.Transferable.getTransferData(java.awt.datatransfer.DataFlavor)"
    ],
    "java.beans.beaninfo.getadditionalbeaninfo": [
        "java.beans.BeanInfo.getAdditionalBeanInfo()"
    ],
    "java.awt.datatransfer.dataflavor.getprimarytype": [
        "java.awt.datatransfer.DataFlavor.getPrimaryType()"
    ],
    "java.nio.channels.socketchannel.shutdowninput": [
        "java.nio.channels.SocketChannel.shutdownInput()"
    ],
    "java.lang.securitymanager.checkread": [
        "java.lang.SecurityManager.checkRead(java.lang.String,java.lang.Object)",
        "java.lang.SecurityManager.checkRead(java.lang.String)",
        "java.lang.SecurityManager.checkRead(java.io.FileDescriptor)"
    ],
    "javax.swing.jtable.getrowsorter": [
        "javax.swing.JTable.getRowSorter()"
    ],
    "java.util.comparator.comparinglong": [
        "java.util.Comparator.comparingLong(java.util.function.ToLongFunction<? super T>)"
    ],
    "javax.swing.text.glyphview.getfont": [
        "javax.swing.text.GlyphView.getFont()"
    ],
    "java.awt.component.contains": [
        "java.awt.Component.contains(java.awt.Point)",
        "java.awt.Component.contains(int,int)"
    ],
    "java.util.navigablemap.descendingkeyset": [
        "java.util.NavigableMap.descendingKeySet()"
    ],
    "java.nio.channels.serversocketchannel.accept": [
        "java.nio.channels.ServerSocketChannel.accept()"
    ],
    "java.security.cert.pkixparameters.tostring": [
        "java.security.cert.PKIXParameters.toString()"
    ],
    "javax.management.persistentmbean.store": [
        "javax.management.PersistentMBean.store()"
    ],
    "javax.imageio.imageio.getimagewriter": [
        "javax.imageio.ImageIO.getImageWriter(javax.imageio.ImageReader)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getwindowtitleforeground": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleForeground()"
    ],
    "javax.swing.jcomponent.setbackground": [
        "javax.swing.JComponent.setBackground(java.awt.Color)"
    ],
    "javax.naming.directory.searchcontrols.getreturningattributes": [
        "javax.naming.directory.SearchControls.getReturningAttributes()"
    ],
    "javax.management.relation.relation.retrieveallroles": [
        "javax.management.relation.Relation.retrieveAllRoles()"
    ],
    "javax.swing.table.defaulttablecolumnmodel.setcolumnmargin": [
        "javax.swing.table.DefaultTableColumnModel.setColumnMargin(int)"
    ],
    "java.awt.filedialog.setmode": [
        "java.awt.FileDialog.setMode(int)"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readdate": [
        "javax.sql.rowset.serial.SQLInputImpl.readDate()"
    ],
    "javax.print.attribute.standard.jobholduntil.getname": [
        "javax.print.attribute.standard.JobHoldUntil.getName()"
    ],
    "java.awt.dialog.getmodalitytype": [
        "java.awt.Dialog.getModalityType()"
    ],
    "java.awt.image.databufferdouble.getelemfloat": [
        "java.awt.image.DataBufferDouble.getElemFloat(int,int)"
    ],
    "java.time.localdatetime.until": [
        "java.time.LocalDateTime.until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)"
    ],
    "java.net.uri.equals": [
        "java.net.URI.equals(java.lang.Object)"
    ],
    "javax.swing.plaf.basic.basicoptionpaneui.installui": [
        "javax.swing.plaf.basic.BasicOptionPaneUI.installUI(javax.swing.JComponent)"
    ],
    "javax.rmi.ssl.sslrmiclientsocketfactory.hashcode": [
        "javax.rmi.ssl.SslRMIClientSocketFactory.hashCode()"
    ],
    "org.omg.corba.any.extract_double": [
        "org.omg.CORBA.Any.extract_double()"
    ],
    "java.time.temporal.weekfields.of": [
        "java.time.temporal.WeekFields.of(java.util.Locale)",
        "java.time.temporal.WeekFields.of(java.time.DayOfWeek,int)"
    ],
    "java.awt.geom.line2d.getbounds": [
        "java.awt.geom.Line2D.getBounds()"
    ],
    "javax.sound.sampled.dataline.info.getformats": [
        "javax.sound.sampled.DataLine.Info.getFormats()"
    ],
    "javax.swing.plaf.synth.synthsliderui.propertychange": [
        "javax.swing.plaf.synth.SynthSliderUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "javax.swing.plaf.synth.synthtoolbarui.createui": [
        "javax.swing.plaf.synth.SynthToolBarUI.createUI(javax.swing.JComponent)"
    ],
    "java.awt.geom.rectangle2d.float.createunion": [
        "java.awt.geom.Rectangle2D.Float.createUnion(java.awt.geom.Rectangle2D)"
    ],
    "javax.sound.midi.sequencer.settracksolo": [
        "javax.sound.midi.Sequencer.setTrackSolo(int,boolean)"
    ],
    "javax.swing.text.defaultformatterfactory.setnullformatter": [
        "javax.swing.text.DefaultFormatterFactory.setNullFormatter(javax.swing.JFormattedTextField.AbstractFormatter)"
    ],
    "javax.xml.validation.validatorhandler.setproperty": [
        "javax.xml.validation.ValidatorHandler.setProperty(java.lang.String,java.lang.Object)"
    ],
    "javax.swing.text.asyncboxview.getrightinset": [
        "javax.swing.text.AsyncBoxView.getRightInset()"
    ],
    "javax.annotation.processing.abstractprocessor.getsupportedsourceversion": [
        "javax.annotation.processing.AbstractProcessor.getSupportedSourceVersion()"
    ],
    "java.lang.character.reversebytes": [
        "java.lang.Character.reverseBytes(char)"
    ],
    "java.lang.reflect.parameter.getparameterizedtype": [
        "java.lang.reflect.Parameter.getParameterizedType()"
    ],
    "javax.swing.text.abstractwriter.setlinelength": [
        "javax.swing.text.AbstractWriter.setLineLength(int)"
    ],
    "javax.swing.text.html.htmlwriter.writeoption": [
        "javax.swing.text.html.HTMLWriter.writeOption(javax.swing.text.html.Option)"
    ],
    "java.security.cert.certificaterevokedexception.getinvaliditydate": [
        "java.security.cert.CertificateRevokedException.getInvalidityDate()"
    ],
    "java.lang.charsequence.charat": [
        "java.lang.CharSequence.charAt(int)"
    ],
    "javax.print.streamprintservicefactory.getoutputformat": [
        "javax.print.StreamPrintServiceFactory.getOutputFormat()"
    ],
    "java.time.yearmonth.compareto": [
        "java.time.YearMonth.compareTo(java.time.YearMonth)"
    ],
    "javax.swing.plaf.synth.synthmenuitemui.paint": [
        "javax.swing.plaf.synth.SynthMenuItemUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",
        "javax.swing.plaf.synth.SynthMenuItemUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.management.relation.relationservice.setroles": [
        "javax.management.relation.RelationService.setRoles(java.lang.String,javax.management.relation.RoleList)"
    ],
    "javax.swing.text.stylecontext.getcompressionthreshold": [
        "javax.swing.text.StyleContext.getCompressionThreshold()"
    ],
    "javax.xml.validation.schemafactory.getfeature": [
        "javax.xml.validation.SchemaFactory.getFeature(java.lang.String)"
    ],
    "javax.management.timer.timer.getnbnotifications": [
        "javax.management.timer.Timer.getNbNotifications()"
    ],
    "javax.swing.text.html.inlineview.removeupdate": [
        "javax.swing.text.html.InlineView.removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "java.net.datagramsocket.send": [
        "java.net.DatagramSocket.send(java.net.DatagramPacket)"
    ],
    "java.util.stringjoiner.merge": [
        "java.util.StringJoiner.merge(java.util.StringJoiner)"
    ],
    "java.util.vector.remove": [
        "java.util.Vector.remove(int)",
        "java.util.Vector.remove(java.lang.Object)"
    ],
    "javax.swing.defaultbuttonmodel.setrollover": [
        "javax.swing.DefaultButtonModel.setRollover(boolean)"
    ],
    "java.util.concurrent.atomic.atomicreferencearray.updateandget": [
        "java.util.concurrent.atomic.AtomicReferenceArray.updateAndGet(int,java.util.function.UnaryOperator<java.util.concurrent.atomic.AtomicReferenceArray>)",
        "java.util.concurrent.atomic.AtomicReferenceArray.updateAndGet(int,java.util.function.UnaryOperator<E>)"
    ],
    "java.awt.image.renderable.parameterblock.clone": [
        "java.awt.image.renderable.ParameterBlock.clone()"
    ],
    "javax.swing.uimanager.removepropertychangelistener": [
        "javax.swing.UIManager.removePropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "java.awt.image.componentsamplemodel.getpixel": [
        "java.awt.image.ComponentSampleModel.getPixel(int,int,int[],java.awt.image.DataBuffer)"
    ],
    "javax.swing.swingutilities.getroot": [
        "javax.swing.SwingUtilities.getRoot(java.awt.Component)"
    ],
    "javax.swing.jcombobox.firepopupmenuwillbecomeinvisible": [
        "javax.swing.JComboBox.firePopupMenuWillBecomeInvisible()"
    ],
    "javax.swing.plaf.metal.oceantheme.addcustomentriestotable": [
        "javax.swing.plaf.metal.OceanTheme.addCustomEntriesToTable(javax.swing.UIDefaults)"
    ],
    "javax.swing.jspinner.firestatechanged": [
        "javax.swing.JSpinner.fireStateChanged()"
    ],
    "javax.management.openmbean.openmbeanoperationinfosupport.getreturnopentype": [
        "javax.management.openmbean.OpenMBeanOperationInfoSupport.getReturnOpenType()"
    ],
    "org.omg.dynamicany.dynstructoperations.set_members_as_dyn_any": [
        "org.omg.DynamicAny.DynStructOperations.set_members_as_dyn_any(org.omg.DynamicAny.NameDynAnyPair[])"
    ],
    "java.util.spliterators.abstractspliterator.trysplit": [
        "java.util.Spliterators.AbstractSpliterator.trySplit()"
    ],
    "javax.swing.debuggraphics.setflashtime": [
        "javax.swing.DebugGraphics.setFlashTime(int)"
    ],
    "javax.swing.plaf.multi.multiseparatorui.getminimumsize": [
        "javax.swing.plaf.multi.MultiSeparatorUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "java.text.collator.getstrength": [
        "java.text.Collator.getStrength()"
    ],
    "javax.naming.ldap.starttlsrequest.getid": [
        "javax.naming.ldap.StartTlsRequest.getID()"
    ],
    "javax.swing.table.defaulttablecolumnmodel.firecolumnremoved": [
        "javax.swing.table.DefaultTableColumnModel.fireColumnRemoved(javax.swing.event.TableColumnModelEvent)"
    ],
    "javax.management.notificationbroadcastersupport.sendnotification": [
        "javax.management.NotificationBroadcasterSupport.sendNotification(javax.management.Notification)"
    ],
    "javax.swing.jdialog.dialoginit": [
        "javax.swing.JDialog.dialogInit()"
    ],
    "java.sql.sqlxml.getsource": [
        "java.sql.SQLXML.getSource(java.lang.Class<T>)"
    ],
    "javax.sound.midi.track.get": [
        "javax.sound.midi.Track.get(int)"
    ],
    "java.awt.font.fontrendercontext.isantialiased": [
        "java.awt.font.FontRenderContext.isAntiAliased()"
    ],
    "java.util.timezone.getrawoffset": [
        "java.util.TimeZone.getRawOffset()"
    ],
    "org.w3c.dom.domerrorhandler.handleerror": [
        "org.w3c.dom.DOMErrorHandler.handleError(org.w3c.dom.DOMError)"
    ],
    "javax.swing.plaf.metal.metaltextfieldui.propertychange": [
        "javax.swing.plaf.metal.MetalTextFieldUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writetimestamp": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeTimestamp(java.sql.Timestamp)"
    ],
    "javax.xml.soap.soapbody.getfault": [
        "javax.xml.soap.SOAPBody.getFault()"
    ],
    "javax.management.modelmbean.requiredmodelmbean.postregister": [
        "javax.management.modelmbean.RequiredModelMBean.postRegister(java.lang.Boolean)"
    ],
    "javax.swing.transferhandler.getsourceactions": [
        "javax.swing.TransferHandler.getSourceActions(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.synth.synthmenuui.update": [
        "javax.swing.plaf.synth.SynthMenuUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "org.omg.dynamicany._dynstructstub.next": [
        "org.omg.DynamicAny._DynStructStub.next()"
    ],
    "java.nio.charset.charset.issupported": [
        "java.nio.charset.Charset.isSupported(java.lang.String)"
    ],
    "javax.swing.table.jtableheader.setcolumnmodel": [
        "javax.swing.table.JTableHeader.setColumnModel(javax.swing.table.TableColumnModel)"
    ],
    "javax.xml.soap.attachmentpart.removemimeheader": [
        "javax.xml.soap.AttachmentPart.removeMimeHeader(java.lang.String)"
    ],
    "javax.swing.text.view.insert": [
        "javax.swing.text.View.insert(int,javax.swing.text.View)"
    ],
    "javax.xml.soap.soapheaderelement.setactor": [
        "javax.xml.soap.SOAPHeaderElement.setActor(java.lang.String)"
    ],
    "java.sql.sqlwarning.getnextwarning": [
        "java.sql.SQLWarning.getNextWarning()"
    ],
    "javax.swing.plaf.synth.synthlookandfeel.updatestyles": [
        "javax.swing.plaf.synth.SynthLookAndFeel.updateStyles(java.awt.Component)"
    ],
    "javax.swing.tree.defaultmutabletreenode.depthfirstenumeration": [
        "javax.swing.tree.DefaultMutableTreeNode.depthFirstEnumeration()"
    ],
    "javax.swing.plaf.synth.synthpainter.painttoolbarborder": [
        "javax.swing.plaf.synth.SynthPainter.paintToolBarBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",
        "javax.swing.plaf.synth.SynthPainter.paintToolBarBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)"
    ],
    "javax.swing.plaf.basic.basiclistui.installlisteners": [
        "javax.swing.plaf.basic.BasicListUI.installListeners()"
    ],
    "java.awt.font.textlayout.getlogicalhighlightshape": [
        "java.awt.font.TextLayout.getLogicalHighlightShape(int,int,java.awt.geom.Rectangle2D)",
        "java.awt.font.TextLayout.getLogicalHighlightShape(int,int)"
    ],
    "java.awt.frame.setopacity": [
        "java.awt.Frame.setOpacity(float)"
    ],
    "javax.management.objectinstance.tostring": [
        "javax.management.ObjectInstance.toString()"
    ],
    "java.time.chrono.chronoperiod.normalized": [
        "java.time.chrono.ChronoPeriod.normalized()"
    ],
    "javax.swing.event.tablemodelevent.getlastrow": [
        "javax.swing.event.TableModelEvent.getLastRow()"
    ],
    "java.lang.reflect.field.getshort": [
        "java.lang.reflect.Field.getShort(java.lang.Object)"
    ],
    "java.awt.window.getlocale": [
        "java.awt.Window.getLocale()"
    ],
    "java.text.choiceformat.setchoices": [
        "java.text.ChoiceFormat.setChoices(double[],java.lang.String[])",
        "java.text.ChoiceFormat.setChoices(double[],java.lang.String)"
    ],
    "javax.swing.jlist.gettooltiptext": [
        "javax.swing.JList.getToolTipText(java.awt.event.MouseEvent)"
    ],
    "javax.imageio.imagereader.clearabortrequest": [
        "javax.imageio.ImageReader.clearAbortRequest()"
    ],
    "javax.swing.plaf.synth.synthlookandfeel.createui": [
        "javax.swing.plaf.synth.SynthLookAndFeel.createUI(javax.swing.JComponent)"
    ],
    "javax.sound.midi.sequencer.startrecording": [
        "javax.sound.midi.Sequencer.startRecording()"
    ],
    "javax.swing.text.rtf.rtfeditorkit.getcontenttype": [
        "javax.swing.text.rtf.RTFEditorKit.getContentType()"
    ],
    "javax.xml.validation.validatorhandler.getproperty": [
        "javax.xml.validation.ValidatorHandler.getProperty(java.lang.String)"
    ],
    "java.nio.charset.charsetdecoder.unmappablecharacteraction": [
        "java.nio.charset.CharsetDecoder.unmappableCharacterAction()"
    ],
    "javax.swing.jfilechooser.showdialog": [
        "javax.swing.JFileChooser.showDialog(java.awt.Component,java.lang.String)"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.getsizeforcomponent": [
        "javax.swing.plaf.basic.BasicComboBoxUI.getSizeForComponent(java.awt.Component)"
    ],
    "java.awt.graphics2d.scale": [
        "java.awt.Graphics2D.scale(double,double)"
    ],
    "java.util.concurrent.completionstage.runaftereither": [
        "java.util.concurrent.CompletionStage.runAfterEither(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)"
    ],
    "java.util.stream.basestream.parallel": [
        "java.util.stream.BaseStream.parallel()"
    ],
    "javax.swing.text.segment.length": [
        "javax.swing.text.Segment.length()"
    ],
    "java.lang.classloader.findresources": [
        "java.lang.ClassLoader.findResources(java.lang.String)"
    ],
    "java.util.intsummarystatistics.accept": [
        "java.util.IntSummaryStatistics.accept(int)"
    ],
    "java.util.concurrent.copyonwritearraylist.indexof": [
        "java.util.concurrent.CopyOnWriteArrayList.indexOf(java.util.concurrent.CopyOnWriteArrayList,int)",
        "java.util.concurrent.CopyOnWriteArrayList.indexOf(E,int)",
        "java.util.concurrent.CopyOnWriteArrayList.indexOf(java.lang.Object)"
    ],
    "javax.swing.plaf.synth.synthpasswordfieldui.getpropertyprefix": [
        "javax.swing.plaf.synth.SynthPasswordFieldUI.getPropertyPrefix()"
    ],
    "java.lang.reflect.method.equals": [
        "java.lang.reflect.Method.equals(java.lang.Object)"
    ],
    "java.security.keystore.getdefaulttype": [
        "java.security.KeyStore.getDefaultType()"
    ],
    "javax.swing.jmenu.getuiclassid": [
        "javax.swing.JMenu.getUIClassID()"
    ],
    "javax.accessibility.accessibleaction.getaccessibleactioncount": [
        "javax.accessibility.AccessibleAction.getAccessibleActionCount()"
    ],
    "javax.swing.jinternalframe.jdesktopicon.setui": [
        "javax.swing.JInternalFrame.JDesktopIcon.setUI(javax.swing.plaf.DesktopIconUI)"
    ],
    "javax.activation.datasource.getname": [
        "javax.activation.DataSource.getName()"
    ],
    "org.w3c.dom.domlocator.getbyteoffset": [
        "org.w3c.dom.DOMLocator.getByteOffset()"
    ],
    "java.awt.image.directcolormodel.getdataelement": [
        "java.awt.image.DirectColorModel.getDataElement(int[],int)"
    ],
    "java.rmi.server.remoteobject.tostub": [
        "java.rmi.server.RemoteObject.toStub(java.rmi.Remote)"
    ],
    "java.awt.cursor.tostring": [
        "java.awt.Cursor.toString()"
    ],
    "java.sql.sqloutput.writestruct": [
        "java.sql.SQLOutput.writeStruct(java.sql.Struct)"
    ],
    "javax.swing.menuselectionmanager.processkeyevent": [
        "javax.swing.MenuSelectionManager.processKeyEvent(java.awt.event.KeyEvent)"
    ],
    "org.omg.corba.orb.create_string_tc": [
        "org.omg.CORBA.ORB.create_string_tc(int)"
    ],
    "javax.naming.ldap.starttlsrequest.getencodedvalue": [
        "javax.naming.ldap.StartTlsRequest.getEncodedValue()"
    ],
    "java.io.bytearrayoutputstream.write": [
        "java.io.ByteArrayOutputStream.write(byte[],int,int)",
        "java.io.ByteArrayOutputStream.write(int)"
    ],
    "java.net.datagramsocketimplfactory.createdatagramsocketimpl": [
        "java.net.DatagramSocketImplFactory.createDatagramSocketImpl()"
    ],
    "javax.swing.jcomponent.paintborder": [
        "javax.swing.JComponent.paintBorder(java.awt.Graphics)"
    ],
    "java.util.concurrent.concurrentskiplistmap.lowerentry": [
        "java.util.concurrent.ConcurrentSkipListMap.lowerEntry(K)",
        "java.util.concurrent.ConcurrentSkipListMap.lowerEntry(java.util.concurrent.ConcurrentSkipListMap)"
    ],
    "java.io.stringwriter.flush": [
        "java.io.StringWriter.flush()"
    ],
    "java.util.map.entry.comparingbyvalue": [
        "java.util.Map.Entry.comparingByValue(java.util.Comparator<? super V>)",
        "java.util.Map.Entry.comparingByValue()"
    ],
    "javax.swing.jtextpane.removestyle": [
        "javax.swing.JTextPane.removeStyle(java.lang.String)"
    ],
    "javax.swing.table.tablecolumnmodel.getcolumn": [
        "javax.swing.table.TableColumnModel.getColumn(int)"
    ],
    "javax.xml.stream.xmleventwriter.flush": [
        "javax.xml.stream.XMLEventWriter.flush()"
    ],
    "java.io.outputstream.write": [
        "java.io.OutputStream.write(int)",
        "java.io.OutputStream.write(byte[],int,int)"
    ],
    "java.awt.geom.flatteningpathiterator.getrecursionlimit": [
        "java.awt.geom.FlatteningPathIterator.getRecursionLimit()"
    ],
    "java.io.printwriter.append": [
        "java.io.PrintWriter.append(java.lang.CharSequence,int,int)",
        "java.io.PrintWriter.append(java.lang.CharSequence)",
        "java.io.PrintWriter.append(char)"
    ],
    "java.util.stream.intstream.min": [
        "java.util.stream.IntStream.min()"
    ],
    "javax.swing.tree.treemodel.getchild": [
        "javax.swing.tree.TreeModel.getChild(java.lang.Object,int)"
    ],
    "java.lang.class.isarray": [
        "java.lang.Class.isArray()"
    ],
    "java.util.concurrent.atomic.atomicintegerarray.lazyset": [
        "java.util.concurrent.atomic.AtomicIntegerArray.lazySet(int,int)"
    ],
    "javax.management.query.value": [
        "javax.management.Query.value(double)",
        "javax.management.Query.value(float)",
        "javax.management.Query.value(java.lang.String)",
        "javax.management.Query.value(long)",
        "javax.management.Query.value(boolean)",
        "javax.management.Query.value(int)",
        "javax.management.Query.value(java.lang.Number)"
    ],
    "java.time.instant.getepochsecond": [
        "java.time.Instant.getEpochSecond()"
    ],
    "javax.swing.jeditorpane.getpage": [
        "javax.swing.JEditorPane.getPage()"
    ],
    "javax.lang.model.element.elementkind.values": [
        "javax.lang.model.element.ElementKind.values()"
    ],
    "java.awt.font.textlayout.getbounds": [
        "java.awt.font.TextLayout.getBounds()"
    ],
    "javax.swing.plaf.basic.basictextfieldui.createui": [
        "javax.swing.plaf.basic.BasicTextFieldUI.createUI(javax.swing.JComponent)"
    ],
    "javax.swing.jscrollpane.sethorizontalscrollbarpolicy": [
        "javax.swing.JScrollPane.setHorizontalScrollBarPolicy(int)"
    ],
    "javax.swing.jfilechooser.geticon": [
        "javax.swing.JFileChooser.getIcon(java.io.File)"
    ],
    "javax.swing.plaf.basic.basictreeui.painthorizontalline": [
        "javax.swing.plaf.basic.BasicTreeUI.paintHorizontalLine(java.awt.Graphics,javax.swing.JComponent,int,int,int)"
    ],
    "javax.swing.swingutilities.processkeybindings": [
        "javax.swing.SwingUtilities.processKeyBindings(java.awt.event.KeyEvent)"
    ],
    "java.time.period.getdays": [
        "java.time.Period.getDays()"
    ],
    "javax.swing.abstractbutton.removechangelistener": [
        "javax.swing.AbstractButton.removeChangeListener(javax.swing.event.ChangeListener)"
    ],
    "java.util.hashtable.replace": [
        "java.util.Hashtable.replace(K,V)",
        "java.util.Hashtable.replace(K,V,V)"
    ],
    "java.awt.font.graphicattribute.getadvance": [
        "java.awt.font.GraphicAttribute.getAdvance()"
    ],
    "javax.swing.plaf.basic.basictableui.installlisteners": [
        "javax.swing.plaf.basic.BasicTableUI.installListeners()"
    ],
    "javax.annotation.processing.processingenvironment.getlocale": [
        "javax.annotation.processing.ProcessingEnvironment.getLocale()"
    ],
    "javax.swing.table.abstracttablemodel.getlisteners": [
        "javax.swing.table.AbstractTableModel.getListeners(java.lang.Class<T>)"
    ],
    "java.util.logging.logrecord.setthrown": [
        "java.util.logging.LogRecord.setThrown(java.lang.Throwable)"
    ],
    "java.util.zip.zipentry.settime": [
        "java.util.zip.ZipEntry.setTime(long)"
    ],
    "java.io.objectstreamfield.setoffset": [
        "java.io.ObjectStreamField.setOffset(int)"
    ],
    "java.awt.im.spi.inputmethoddescriptor.getinputmethoddisplayname": [
        "java.awt.im.spi.InputMethodDescriptor.getInputMethodDisplayName(java.util.Locale,java.util.Locale)"
    ],
    "javax.sql.rowset.serial.serialjavaobject.equals": [
        "javax.sql.rowset.serial.SerialJavaObject.equals(java.lang.Object)"
    ],
    "javax.swing.tooltipmanager.getinitialdelay": [
        "javax.swing.ToolTipManager.getInitialDelay()"
    ],
    "javax.swing.tree.variableheightlayoutcache.getvisiblepathsfrom": [
        "javax.swing.tree.VariableHeightLayoutCache.getVisiblePathsFrom(javax.swing.tree.TreePath)"
    ],
    "java.io.datainput.readlong": [
        "java.io.DataInput.readLong()"
    ],
    "java.util.jar.attributes.clone": [
        "java.util.jar.Attributes.clone()"
    ],
    "java.awt.componentorientation.getorientation": [
        "java.awt.ComponentOrientation.getOrientation(java.util.Locale)"
    ],
    "java.awt.container.getlayout": [
        "java.awt.Container.getLayout()"
    ],
    "javax.management.relation.relationservicembean.purgerelations": [
        "javax.management.relation.RelationServiceMBean.purgeRelations()"
    ],
    "javax.swing.jmenubar.paramstring": [
        "javax.swing.JMenuBar.paramString()"
    ],
    "org.w3c.dom.node.getnodetype": [
        "org.w3c.dom.Node.getNodeType()"
    ],
    "javax.swing.imageicon.getimageobserver": [
        "javax.swing.ImageIcon.getImageObserver()"
    ],
    "javax.xml.bind.helpers.abstractunmarshallerimpl.setvalidating": [
        "javax.xml.bind.helpers.AbstractUnmarshallerImpl.setValidating(boolean)"
    ],
    "java.time.chrono.chronolocaldate.getchronology": [
        "java.time.chrono.ChronoLocalDate.getChronology()"
    ],
    "javax.swing.plaf.treeui.stopediting": [
        "javax.swing.plaf.TreeUI.stopEditing(javax.swing.JTree)"
    ],
    "javax.swing.plaf.synth.synthtabbedpaneui.createscrollbutton": [
        "javax.swing.plaf.synth.SynthTabbedPaneUI.createScrollButton(int)"
    ],
    "javax.sql.rowset.removerowsetlistener": [
        "javax.sql.RowSet.removeRowSetListener(javax.sql.RowSetListener)"
    ],
    "javax.swing.text.abstractwriter.getlinelength": [
        "javax.swing.text.AbstractWriter.getLineLength()"
    ],
    "javax.swing.defaultcelleditor.gettreecelleditorcomponent": [
        "javax.swing.DefaultCellEditor.getTreeCellEditorComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int)"
    ],
    "java.time.localdate.with": [
        "java.time.LocalDate.with(java.time.temporal.TemporalField,long)",
        "java.time.LocalDate.with(java.time.temporal.TemporalAdjuster)"
    ],
    "java.lang.reflect.parameterizedtype.getownertype": [
        "java.lang.reflect.ParameterizedType.getOwnerType()"
    ],
    "javax.imageio.iioparam.getsourceysubsampling": [
        "javax.imageio.IIOParam.getSourceYSubsampling()"
    ],
    "javax.xml.soap.soapenvelope.getheader": [
        "javax.xml.soap.SOAPEnvelope.getHeader()"
    ],
    "java.util.concurrent.threadpoolexecutor.purge": [
        "java.util.concurrent.ThreadPoolExecutor.purge()"
    ],
    "org.omg.corba.fixedholder._write": [
        "org.omg.CORBA.FixedHolder._write(org.omg.CORBA.portable.OutputStream)"
    ],
    "java.awt.geom.line2d.float.getx2": [
        "java.awt.geom.Line2D.Float.getX2()"
    ],
    "javax.swing.plaf.multi.multipanelui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiPanelUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "java.awt.geom.cubiccurve2d.intersects": [
        "java.awt.geom.CubicCurve2D.intersects(double,double,double,double)",
        "java.awt.geom.CubicCurve2D.intersects(java.awt.geom.Rectangle2D)"
    ],
    "javax.swing.border.softbevelborder.getborderinsets": [
        "javax.swing.border.SoftBevelBorder.getBorderInsets(java.awt.Component,java.awt.Insets)"
    ],
    "java.awt.image.rgbimagefilter.filterrgb": [
        "java.awt.image.RGBImageFilter.filterRGB(int,int,int)"
    ],
    "java.util.objects.hash": [
        "java.util.Objects.hash(java.lang.Object)",
        "java.util.Objects.hash(java.lang.Object...)"
    ],
    "org.omg.dynamicany._dynunionstub.insert_string": [
        "org.omg.DynamicAny._DynUnionStub.insert_string(java.lang.String)"
    ],
    "javax.swing.text.styleconstants.setcomponent": [
        "javax.swing.text.StyleConstants.setComponent(javax.swing.text.MutableAttributeSet,java.awt.Component)"
    ],
    "java.awt.im.spi.inputmethoddescriptor.getavailablelocales": [
        "java.awt.im.spi.InputMethodDescriptor.getAvailableLocales()"
    ],
    "javax.imageio.iioimage.getthumbnail": [
        "javax.imageio.IIOImage.getThumbnail(int)"
    ],
    "java.util.calendar.getgreatestminimum": [
        "java.util.Calendar.getGreatestMinimum(int)"
    ],
    "javax.naming.directory.attribute.getall": [
        "javax.naming.directory.Attribute.getAll()"
    ],
    "javax.print.attribute.standard.dialogtypeselection.getname": [
        "javax.print.attribute.standard.DialogTypeSelection.getName()"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.gettimezone": [
        "javax.xml.datatype.XMLGregorianCalendar.getTimeZone(int)"
    ],
    "javax.xml.soap.node.getparentelement": [
        "javax.xml.soap.Node.getParentElement()"
    ],
    "javax.swing.text.document.createposition": [
        "javax.swing.text.Document.createPosition(int)"
    ],
    "java.awt.geom.path2d.float.lineto": [
        "java.awt.geom.Path2D.Float.lineTo(float,float)",
        "java.awt.geom.Path2D.Float.lineTo(double,double)"
    ],
    "javax.imageio.imagewriteparam.getcompressionqualityvalues": [
        "javax.imageio.ImageWriteParam.getCompressionQualityValues()"
    ],
    "javax.swing.tree.defaultmutabletreenode.setparent": [
        "javax.swing.tree.DefaultMutableTreeNode.setParent(javax.swing.tree.MutableTreeNode)"
    ],
    "java.text.decimalformat.formattocharacteriterator": [
        "java.text.DecimalFormat.formatToCharacterIterator(java.lang.Object)"
    ],
    "java.util.zip.inflater.setdictionary": [
        "java.util.zip.Inflater.setDictionary(byte[],int,int)",
        "java.util.zip.Inflater.setDictionary(byte[])"
    ],
    "javax.swing.joptionpane.getmessagetype": [
        "javax.swing.JOptionPane.getMessageType()"
    ],
    "java.security.securerandom.generateseed": [
        "java.security.SecureRandom.generateSeed(int)"
    ],
    "javax.xml.soap.soappart.setcontentlocation": [
        "javax.xml.soap.SOAPPart.setContentLocation(java.lang.String)"
    ],
    "javax.xml.parsers.saxparserfactory.getschema": [
        "javax.xml.parsers.SAXParserFactory.getSchema()"
    ],
    "java.time.chrono.chronolocaldatetime.toinstant": [
        "java.time.chrono.ChronoLocalDateTime.toInstant(java.time.ZoneOffset)"
    ],
    "java.awt.keyboardfocusmanager.removevetoablechangelistener": [
        "java.awt.KeyboardFocusManager.removeVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)",
        "java.awt.KeyboardFocusManager.removeVetoableChangeListener(java.beans.VetoableChangeListener)"
    ],
    "org.omg.corba.serverrequest.set_result": [
        "org.omg.CORBA.ServerRequest.set_result(org.omg.CORBA.Any)"
    ],
    "java.awt.geom.quadcurve2d.solvequadratic": [
        "java.awt.geom.QuadCurve2D.solveQuadratic(double[],double[])",
        "java.awt.geom.QuadCurve2D.solveQuadratic(double[])"
    ],
    "java.security.cert.certpathvalidatorspi.enginevalidate": [
        "java.security.cert.CertPathValidatorSpi.engineValidate(java.security.cert.CertPath,java.security.cert.CertPathParameters)"
    ],
    "java.awt.cardlayout.layoutcontainer": [
        "java.awt.CardLayout.layoutContainer(java.awt.Container)"
    ],
    "javax.swing.plaf.basic.basicsplitpanedivider.dragdividerto": [
        "javax.swing.plaf.basic.BasicSplitPaneDivider.dragDividerTo(int)"
    ],
    "java.lang.integer.min": [
        "java.lang.Integer.min(int,int)"
    ],
    "java.util.concurrent.delayqueue.add": [
        "java.util.concurrent.DelayQueue.add(E)",
        "java.util.concurrent.DelayQueue.add(java.util.concurrent.DelayQueue)"
    ],
    "javax.management.openmbean.openmbeanconstructorinfo.getname": [
        "javax.management.openmbean.OpenMBeanConstructorInfo.getName()"
    ],
    "java.util.comparator.thencomparingdouble": [
        "java.util.Comparator.thenComparingDouble(java.util.function.ToDoubleFunction<? super java.util.Comparator>)",
        "java.util.Comparator.thenComparingDouble(java.util.function.ToDoubleFunction<? super T>)"
    ],
    "java.lang.reflect.invocationhandler.invoke": [
        "java.lang.reflect.InvocationHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
        "java.lang.reflect.InvocationHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object)"
    ],
    "java.util.concurrent.forkjointask.quietlyjoin": [
        "java.util.concurrent.ForkJoinTask.quietlyJoin()"
    ],
    "javax.swing.text.tabstop.getposition": [
        "javax.swing.text.TabStop.getPosition()"
    ],
    "java.awt.font.textlayout.caretpolicy.getstrongcaret": [
        "java.awt.font.TextLayout.CaretPolicy.getStrongCaret(java.awt.font.TextHitInfo,java.awt.font.TextHitInfo,java.awt.font.TextLayout)"
    ],
    "javax.swing.text.html.inlineview.getattributes": [
        "javax.swing.text.html.InlineView.getAttributes()"
    ],
    "java.time.temporal.temporaladjusters.next": [
        "java.time.temporal.TemporalAdjusters.next(java.time.DayOfWeek)"
    ],
    "java.awt.radialgradientpaint.createcontext": [
        "java.awt.RadialGradientPaint.createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)"
    ],
    "javax.print.attribute.standard.jobmediasheets.equals": [
        "javax.print.attribute.standard.JobMediaSheets.equals(java.lang.Object)"
    ],
    "javax.xml.ws.spi.provider.provider": [
        "javax.xml.ws.spi.Provider.provider()"
    ],
    "java.awt.geom.line2d.float.gety1": [
        "java.awt.geom.Line2D.Float.getY1()"
    ],
    "javax.swing.plaf.multi.multilistui.installui": [
        "javax.swing.plaf.multi.MultiListUI.installUI(javax.swing.JComponent)"
    ],
    "javax.management.modelmbean.modelmbeaninfo.getattribute": [
        "javax.management.modelmbean.ModelMBeanInfo.getAttribute(java.lang.String)"
    ],
    "javax.swing.japplet.getlayeredpane": [
        "javax.swing.JApplet.getLayeredPane()"
    ],
    "javax.sql.rowset.spi.syncprovider.getprovidergrade": [
        "javax.sql.rowset.spi.SyncProvider.getProviderGrade()"
    ],
    "org.omg.portableinterceptor.requestinfooperations.reply_status": [
        "org.omg.PortableInterceptor.RequestInfoOperations.reply_status()"
    ],
    "javax.swing.jseparator.getuiclassid": [
        "javax.swing.JSeparator.getUIClassID()"
    ],
    "javax.swing.plaf.multi.multimenuitemui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiMenuItemUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "javax.xml.ws.wsaddressing.w3cendpointreferencebuilder.attribute": [
        "javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.attribute(javax.xml.namespace.QName,java.lang.String)"
    ],
    "javax.management.modelmbean.requiredmodelmbean.preregister": [
        "javax.management.modelmbean.RequiredModelMBean.preRegister(javax.management.MBeanServer,javax.management.ObjectName)"
    ],
    "java.awt.scrollpaneadjustable.getadjustmentlisteners": [
        "java.awt.ScrollPaneAdjustable.getAdjustmentListeners()"
    ],
    "javax.management.relation.roleunresolvedlist.aslist": [
        "javax.management.relation.RoleUnresolvedList.asList()"
    ],
    "javax.net.ssl.sslsessionbindinglistener.valuebound": [
        "javax.net.ssl.SSLSessionBindingListener.valueBound(javax.net.ssl.SSLSessionBindingEvent)"
    ],
    "javax.swing.jfilechooser.setselectedfile": [
        "javax.swing.JFileChooser.setSelectedFile(java.io.File)"
    ],
    "java.util.prefs.abstractpreferences.getint": [
        "java.util.prefs.AbstractPreferences.getInt(java.lang.String,int)"
    ],
    "org.omg.corba.portable.delegate.release": [
        "org.omg.CORBA.portable.Delegate.release(org.omg.CORBA.Object)"
    ],
    "java.security.keystore.secretkeyentry.getattributes": [
        "java.security.KeyStore.SecretKeyEntry.getAttributes()"
    ],
    "javax.swing.plaf.multi.multidesktopiconui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiDesktopIconUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.synth.synthdesktoppaneui.update": [
        "javax.swing.plaf.synth.SynthDesktopPaneUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.lang.boolean.parseboolean": [
        "java.lang.Boolean.parseBoolean(java.lang.String)"
    ],
    "javax.swing.desktopmanager.deiconifyframe": [
        "javax.swing.DesktopManager.deiconifyFrame(javax.swing.JInternalFrame)"
    ],
    "javax.imageio.metadata.iiometadatanode.isequalnode": [
        "javax.imageio.metadata.IIOMetadataNode.isEqualNode(org.w3c.dom.Node)"
    ],
    "javax.management.queryexp.apply": [
        "javax.management.QueryExp.apply(javax.management.ObjectName)"
    ],
    "java.util.arrays.setall": [
        "java.util.Arrays.setAll(T[],java.util.function.IntFunction<? extends T>)",
        "java.util.Arrays.setAll(double[],java.util.function.IntToDoubleFunction)",
        "java.util.Arrays.setAll(long[],java.util.function.IntToLongFunction)",
        "java.util.Arrays.setAll(int[],java.util.function.IntUnaryOperator)"
    ],
    "javax.swing.text.html.htmleditorkit.htmltextaction.elementcounttotag": [
        "javax.swing.text.html.HTMLEditorKit.HTMLTextAction.elementCountToTag(javax.swing.text.html.HTMLDocument,int,javax.swing.text.html.HTML.Tag)"
    ],
    "javax.management.relation.relationsupportmbean.setrelationservicemanagementflag": [
        "javax.management.relation.RelationSupportMBean.setRelationServiceManagementFlag(java.lang.Boolean)"
    ],
    "java.util.weakhashmap.entryset": [
        "java.util.WeakHashMap.entrySet()"
    ],
    "javax.swing.filechooser.filesystemview.getparentdirectory": [
        "javax.swing.filechooser.FileSystemView.getParentDirectory(java.io.File)"
    ],
    "java.security.cert.pkixparameters.setcertpathcheckers": [
        "java.security.cert.PKIXParameters.setCertPathCheckers(java.util.List<java.security.cert.PKIXCertPathChecker>)"
    ],
    "javax.swing.text.jtextcomponent.setcaretposition": [
        "javax.swing.text.JTextComponent.setCaretPosition(int)"
    ],
    "java.lang.threadlocal.remove": [
        "java.lang.ThreadLocal.remove()"
    ],
    "java.time.yearmonth.getmonthvalue": [
        "java.time.YearMonth.getMonthValue()"
    ],
    "java.awt.toolkit.createcheckboxmenuitem": [
        "java.awt.Toolkit.createCheckboxMenuItem(java.awt.CheckboxMenuItem)"
    ],
    "javax.sql.pooledconnection.addstatementeventlistener": [
        "javax.sql.PooledConnection.addStatementEventListener(javax.sql.StatementEventListener)"
    ],
    "javax.swing.jtable.setupdateselectiononsort": [
        "javax.swing.JTable.setUpdateSelectionOnSort(boolean)"
    ],
    "javax.swing.plaf.synth.synthpasswordfieldui.paintborder": [
        "javax.swing.plaf.synth.SynthPasswordFieldUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "org.omg.dynamicany._dynarraystub.seek": [
        "org.omg.DynamicAny._DynArrayStub.seek(int)"
    ],
    "java.awt.image.bufferedimage.releasewritabletile": [
        "java.awt.image.BufferedImage.releaseWritableTile(int,int)"
    ],
    "java.util.concurrent.forkjointask.getrawresult": [
        "java.util.concurrent.ForkJoinTask.getRawResult()"
    ],
    "javax.xml.bind.jaxbcontext.generateschema": [
        "javax.xml.bind.JAXBContext.generateSchema(javax.xml.bind.SchemaOutputResolver)"
    ],
    "java.util.map.values": [
        "java.util.Map.values()"
    ],
    "org.omg.portableserver.poaoperations.the_children": [
        "org.omg.PortableServer.POAOperations.the_children()"
    ],
    "javax.sql.rowset.baserowset.getmaxrows": [
        "javax.sql.rowset.BaseRowSet.getMaxRows()"
    ],
    "javax.swing.plaf.synth.synthsplitpaneui.installlisteners": [
        "javax.swing.plaf.synth.SynthSplitPaneUI.installListeners()"
    ],
    "java.awt.image.bytelookuptable.lookuppixel": [
        "java.awt.image.ByteLookupTable.lookupPixel(byte[],byte[])",
        "java.awt.image.ByteLookupTable.lookupPixel(int[],int[])"
    ],
    "javax.swing.plaf.basic.basicsliderui.getbaselineresizebehavior": [
        "javax.swing.plaf.basic.BasicSliderUI.getBaselineResizeBehavior(javax.swing.JComponent)"
    ],
    "javax.net.ssl.sslsocketfactory.getdefault": [
        "javax.net.ssl.SSLSocketFactory.getDefault()"
    ],
    "java.text.decimalformat.parse": [
        "java.text.DecimalFormat.parse(java.lang.String,java.text.ParsePosition)"
    ],
    "javax.sql.rowset.spi.xmlwriter.writexml": [
        "javax.sql.rowset.spi.XmlWriter.writeXML(javax.sql.rowset.WebRowSet,java.io.Writer)"
    ],
    "java.util.stream.longstream.min": [
        "java.util.stream.LongStream.min()"
    ],
    "java.lang.classloader.findresource": [
        "java.lang.ClassLoader.findResource(java.lang.String)"
    ],
    "java.lang.invoke.serializedlambda.getimplmethodsignature": [
        "java.lang.invoke.SerializedLambda.getImplMethodSignature()"
    ],
    "java.util.optionaldouble.ifpresent": [
        "java.util.OptionalDouble.ifPresent(java.util.function.DoubleConsumer)"
    ],
    "javax.management.relation.role.tostring": [
        "javax.management.relation.Role.toString()"
    ],
    "org.ietf.jgss.gsscontext.requestanonymity": [
        "org.ietf.jgss.GSSContext.requestAnonymity(boolean)"
    ],
    "java.util.set.hashcode": [
        "java.util.Set.hashCode()"
    ],
    "javax.activation.commandmap.createdatacontenthandler": [
        "javax.activation.CommandMap.createDataContentHandler(java.lang.String)",
        "javax.activation.CommandMap.createDataContentHandler(java.lang.String,javax.activation.DataSource)"
    ],
    "java.util.hashtable.entryset": [
        "java.util.Hashtable.entrySet()"
    ],
    "java.math.roundingmode.valueof": [
        "java.math.RoundingMode.valueOf(int)",
        "java.math.RoundingMode.valueOf(java.lang.String)"
    ],
    "javax.swing.text.html.htmldocument.insert": [
        "javax.swing.text.html.HTMLDocument.insert(int,javax.swing.text.DefaultStyledDocument.ElementSpec[])"
    ],
    "javax.crypto.spec.secretkeyspec.getencoded": [
        "javax.crypto.spec.SecretKeySpec.getEncoded()"
    ],
    "java.awt.font.getlinemetrics": [
        "java.awt.Font.getLineMetrics(java.lang.String,java.awt.font.FontRenderContext)",
        "java.awt.Font.getLineMetrics(char[],int,int,java.awt.font.FontRenderContext)",
        "java.awt.Font.getLineMetrics(java.text.CharacterIterator,int,int,java.awt.font.FontRenderContext)",
        "java.awt.Font.getLineMetrics(java.lang.String,int,int,java.awt.font.FontRenderContext)"
    ],
    "javax.swing.plaf.synth.synthlistui.getcontext": [
        "javax.swing.plaf.synth.SynthListUI.getContext(javax.swing.JComponent)"
    ],
    "javax.swing.jwindow.getlayeredpane": [
        "javax.swing.JWindow.getLayeredPane()"
    ],
    "java.awt.mediatracker.geterrorsid": [
        "java.awt.MediaTracker.getErrorsID(int)"
    ],
    "java.util.optionalint.orelseget": [
        "java.util.OptionalInt.orElseGet(java.util.function.IntSupplier)"
    ],
    "javax.swing.jcomponent.computevisiblerect": [
        "javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"
    ],
    "javax.swing.jtable.setshowhorizontallines": [
        "javax.swing.JTable.setShowHorizontalLines(boolean)"
    ],
    "javax.print.attribute.standard.mediasize.getname": [
        "javax.print.attribute.standard.MediaSize.getName()"
    ],
    "java.nio.charbuffer.allocate": [
        "java.nio.CharBuffer.allocate(int)"
    ],
    "javax.swing.text.defaulthighlighter.removeallhighlights": [
        "javax.swing.text.DefaultHighlighter.removeAllHighlights()"
    ],
    "org.xml.sax.ext.entityresolver2.getexternalsubset": [
        "org.xml.sax.ext.EntityResolver2.getExternalSubset(java.lang.String,java.lang.String)"
    ],
    "javax.xml.validation.validator.setproperty": [
        "javax.xml.validation.Validator.setProperty(java.lang.String,java.lang.Object)"
    ],
    "java.nio.file.files.getlastmodifiedtime": [
        "java.nio.file.Files.getLastModifiedTime(java.nio.file.Path,java.nio.file.LinkOption)",
        "java.nio.file.Files.getLastModifiedTime(java.nio.file.Path,java.nio.file.LinkOption...)"
    ],
    "java.awt.choice.processevent": [
        "java.awt.Choice.processEvent(java.awt.AWTEvent)"
    ],
    "java.awt.datatransfer.dataflavor.writeexternal": [
        "java.awt.datatransfer.DataFlavor.writeExternal(java.io.ObjectOutput)"
    ],
    "javax.swing.defaultlistselectionmodel.getlistselectionlisteners": [
        "javax.swing.DefaultListSelectionModel.getListSelectionListeners()"
    ],
    "javax.swing.jscrollpane.gethorizontalscrollbar": [
        "javax.swing.JScrollPane.getHorizontalScrollBar()"
    ],
    "javax.management.monitor.stringmonitor.getnotificationinfo": [
        "javax.management.monitor.StringMonitor.getNotificationInfo()"
    ],
    "java.awt.font.imagegraphicattribute.getadvance": [
        "java.awt.font.ImageGraphicAttribute.getAdvance()"
    ],
    "javax.swing.jcolorchooser.updateui": [
        "javax.swing.JColorChooser.updateUI()"
    ],
    "java.util.prefs.preferences.getdouble": [
        "java.util.prefs.Preferences.getDouble(java.lang.String,double)"
    ],
    "java.nio.file.attribute.posixfileattributes.owner": [
        "java.nio.file.attribute.PosixFileAttributes.owner()"
    ],
    "java.awt.menu.addseparator": [
        "java.awt.Menu.addSeparator()"
    ],
    "java.sql.sqlinput.readint": [
        "java.sql.SQLInput.readInt()"
    ],
    "java.net.multicastsocket.gettimetolive": [
        "java.net.MulticastSocket.getTimeToLive()"
    ],
    "javax.management.mbeanserverconnection.getdefaultdomain": [
        "javax.management.MBeanServerConnection.getDefaultDomain()"
    ],
    "javax.swing.jlist.getcellbounds": [
        "javax.swing.JList.getCellBounds(int,int)"
    ],
    "javax.lang.model.element.variableelement.getsimplename": [
        "javax.lang.model.element.VariableElement.getSimpleName()"
    ],
    "java.awt.menucomponent.tostring": [
        "java.awt.MenuComponent.toString()"
    ],
    "javax.crypto.secretkeyfactoryspi.enginetranslatekey": [
        "javax.crypto.SecretKeyFactorySpi.engineTranslateKey(javax.crypto.SecretKey)"
    ],
    "javax.swing.plaf.synth.synthseparatorui.getminimumsize": [
        "javax.swing.plaf.synth.SynthSeparatorUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "javax.imageio.imagetypespecifier.getnumbands": [
        "javax.imageio.ImageTypeSpecifier.getNumBands()"
    ],
    "javax.swing.text.styleconstants.getlinespacing": [
        "javax.swing.text.StyleConstants.getLineSpacing(javax.swing.text.AttributeSet)"
    ],
    "javax.swing.repaintmanager.markcompletelyclean": [
        "javax.swing.RepaintManager.markCompletelyClean(javax.swing.JComponent)"
    ],
    "java.lang.invoke.methodhandles.explicitcastarguments": [
        "java.lang.invoke.MethodHandles.explicitCastArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)"
    ],
    "java.sql.preparedstatement.setfloat": [
        "java.sql.PreparedStatement.setFloat(int,float)"
    ],
    "java.net.urlstreamhandler.seturl": [
        "java.net.URLStreamHandler.setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
    ],
    "org.omg.dynamicany._dynenumstub.get_reference": [
        "org.omg.DynamicAny._DynEnumStub.get_reference()"
    ],
    "javax.rmi.corba.valuehandler.getruntimecodebase": [
        "javax.rmi.CORBA.ValueHandler.getRunTimeCodeBase()"
    ],
    "java.awt.print.printerjob.setprintservice": [
        "java.awt.print.PrinterJob.setPrintService(javax.print.PrintService)"
    ],
    "java.awt.flowlayout.addlayoutcomponent": [
        "java.awt.FlowLayout.addLayoutComponent(java.lang.String,java.awt.Component)"
    ],
    "javax.security.auth.kerberos.kerberosticket.isforwarded": [
        "javax.security.auth.kerberos.KerberosTicket.isForwarded()"
    ],
    "javax.swing.menuelement.processmouseevent": [
        "javax.swing.MenuElement.processMouseEvent(java.awt.event.MouseEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)"
    ],
    "java.nio.file.filestore.supportsfileattributeview": [
        "java.nio.file.FileStore.supportsFileAttributeView(java.lang.Class<? extends java.nio.file.attribute.FileAttributeView>)",
        "java.nio.file.FileStore.supportsFileAttributeView(java.lang.String)"
    ],
    "java.util.uuid.tostring": [
        "java.util.UUID.toString()"
    ],
    "java.awt.dnd.dragsource.adddragsourcelistener": [
        "java.awt.dnd.DragSource.addDragSourceListener(java.awt.dnd.DragSourceListener)"
    ],
    "javax.swing.colorchooser.abstractcolorchooserpanel.getdisplayname": [
        "javax.swing.colorchooser.AbstractColorChooserPanel.getDisplayName()"
    ],
    "java.awt.image.renderable.parameterblock.getobjectparameter": [
        "java.awt.image.renderable.ParameterBlock.getObjectParameter(int)"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.createkeylistener": [
        "javax.swing.plaf.basic.BasicComboBoxUI.createKeyListener()"
    ],
    "org.ietf.jgss.messageprop.isgaptoken": [
        "org.ietf.jgss.MessageProp.isGapToken()"
    ],
    "java.sql.callablestatement.setblob": [
        "java.sql.CallableStatement.setBlob(java.lang.String,java.sql.Blob)",
        "java.sql.CallableStatement.setBlob(java.lang.String,java.io.InputStream,long)",
        "java.sql.CallableStatement.setBlob(java.lang.String,java.io.InputStream)"
    ],
    "org.omg.dynamicany._dynsequencestub.get_longlong": [
        "org.omg.DynamicAny._DynSequenceStub.get_longlong()"
    ],
    "java.util.logging.logrecord.setmillis": [
        "java.util.logging.LogRecord.setMillis(long)"
    ],
    "javax.swing.defaultlistselectionmodel.getminselectionindex": [
        "javax.swing.DefaultListSelectionModel.getMinSelectionIndex()"
    ],
    "javax.swing.table.jtableheader.createdefaultcolumnmodel": [
        "javax.swing.table.JTableHeader.createDefaultColumnModel()"
    ],
    "java.io.fileoutputstream.write": [
        "java.io.FileOutputStream.write(int)",
        "java.io.FileOutputStream.write(byte[],int,int)"
    ],
    "java.security.algorithmparametergeneratorspi.engineinit": [
        "java.security.AlgorithmParameterGeneratorSpi.engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
        "java.security.AlgorithmParameterGeneratorSpi.engineInit(int,java.security.SecureRandom)"
    ],
    "javax.naming.reference.getclassname": [
        "javax.naming.Reference.getClassName()"
    ],
    "javax.net.ssl.keymanagerfactory.getdefaultalgorithm": [
        "javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm()"
    ],
    "javax.print.printservicelookup.lookupmultidocprintservices": [
        "javax.print.PrintServiceLookup.lookupMultiDocPrintServices(javax.print.DocFlavor[],javax.print.attribute.AttributeSet)"
    ],
    "java.util.abstractmap.get": [
        "java.util.AbstractMap.get(java.lang.Object)"
    ],
    "java.awt.geom.affinetransform.settoshear": [
        "java.awt.geom.AffineTransform.setToShear(double,double)"
    ],
    "javax.activation.datahandler.getcontent": [
        "javax.activation.DataHandler.getContent()"
    ],
    "javax.sound.midi.midichannel.getpolypressure": [
        "javax.sound.midi.MidiChannel.getPolyPressure(int)"
    ],
    "javax.swing.text.defaultcaret.positioncaret": [
        "javax.swing.text.DefaultCaret.positionCaret(java.awt.event.MouseEvent)"
    ],
    "javax.imageio.spi.imageoutputstreamspi.createoutputstreaminstance": [
        "javax.imageio.spi.ImageOutputStreamSpi.createOutputStreamInstance(java.lang.Object,boolean,java.io.File)",
        "javax.imageio.spi.ImageOutputStreamSpi.createOutputStreamInstance(java.lang.Object)"
    ],
    "java.time.zone.zonerules.isfixedoffset": [
        "java.time.zone.ZoneRules.isFixedOffset()"
    ],
    "java.util.concurrent.copyonwritearrayset.size": [
        "java.util.concurrent.CopyOnWriteArraySet.size()"
    ],
    "java.nio.file.path.startswith": [
        "java.nio.file.Path.startsWith(java.lang.String)",
        "java.nio.file.Path.startsWith(java.nio.file.Path)"
    ],
    "javax.swing.jinternalframe.setresizable": [
        "javax.swing.JInternalFrame.setResizable(boolean)"
    ],
    "java.lang.short.tounsignedint": [
        "java.lang.Short.toUnsignedInt(short)"
    ],
    "java.beans.exceptionlistener.exceptionthrown": [
        "java.beans.ExceptionListener.exceptionThrown(java.lang.Exception)"
    ],
    "javax.swing.tree.treecelleditor.gettreecelleditorcomponent": [
        "javax.swing.tree.TreeCellEditor.getTreeCellEditorComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int)"
    ],
    "java.sql.rowid.tostring": [
        "java.sql.RowId.toString()"
    ],
    "java.time.temporal.temporalaccessor.getlong": [
        "java.time.temporal.TemporalAccessor.getLong(java.time.temporal.TemporalField)"
    ],
    "java.nio.file.attribute.aclentry.builder.setflags": [
        "java.nio.file.attribute.AclEntry.Builder.setFlags(java.util.Set<java.nio.file.attribute.AclEntryFlag>)",
        "java.nio.file.attribute.AclEntry.Builder.setFlags(java.nio.file.attribute.AclEntryFlag...)",
        "java.nio.file.attribute.AclEntry.Builder.setFlags(java.nio.file.attribute.AclEntryFlag)"
    ],
    "java.awt.image.packedcolormodel.createcompatiblesamplemodel": [
        "java.awt.image.PackedColorModel.createCompatibleSampleModel(int,int)"
    ],
    "javax.net.ssl.sslsessioncontext.getsession": [
        "javax.net.ssl.SSLSessionContext.getSession(byte[])"
    ],
    "javax.lang.model.element.unknownannotationvalueexception.getargument": [
        "javax.lang.model.element.UnknownAnnotationValueException.getArgument()"
    ],
    "javax.swing.text.html.htmldocument.setpreservesunknowntags": [
        "javax.swing.text.html.HTMLDocument.setPreservesUnknownTags(boolean)"
    ],
    "java.awt.component.getname": [
        "java.awt.Component.getName()"
    ],
    "javax.swing.text.jtextcomponent.getselectionend": [
        "javax.swing.text.JTextComponent.getSelectionEnd()"
    ],
    "java.time.chrono.hijrahchronology.getcalendartype": [
        "java.time.chrono.HijrahChronology.getCalendarType()"
    ],
    "javax.swing.tree.treeselectionmodel.clearselection": [
        "javax.swing.tree.TreeSelectionModel.clearSelection()"
    ],
    "javax.swing.plaf.synth.syntheditorpaneui.uninstalldefaults": [
        "javax.swing.plaf.synth.SynthEditorPaneUI.uninstallDefaults()"
    ],
    "java.awt.dnd.droptargetcontext.getdroptarget": [
        "java.awt.dnd.DropTargetContext.getDropTarget()"
    ],
    "java.util.concurrent.linkedblockingdeque.offerfirst": [
        "java.util.concurrent.LinkedBlockingDeque.offerFirst(E,long,java.util.concurrent.TimeUnit)",
        "java.util.concurrent.LinkedBlockingDeque.offerFirst(E)"
    ],
    "javax.naming.spi.namingmanager.getinitialcontext": [
        "javax.naming.spi.NamingManager.getInitialContext(,?>)"
    ],
    "javax.crypto.cipher.getalgorithm": [
        "javax.crypto.Cipher.getAlgorithm()"
    ],
    "java.time.format.datetimeformatterbuilder.appendliteral": [
        "java.time.format.DateTimeFormatterBuilder.appendLiteral(char)",
        "java.time.format.DateTimeFormatterBuilder.appendLiteral(java.lang.String)"
    ],
    "javax.lang.model.type.declaredtype.aselement": [
        "javax.lang.model.type.DeclaredType.asElement()"
    ],
    "java.awt.geom.arc2d.setangles": [
        "java.awt.geom.Arc2D.setAngles(double,double,double,double)",
        "java.awt.geom.Arc2D.setAngles(java.awt.geom.Point2D,java.awt.geom.Point2D)"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.getprecision": [
        "javax.sql.rowset.RowSetMetaDataImpl.getPrecision(int)"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writebyte": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeByte(byte)"
    ],
    "javax.swing.scrollpanelayout.getverticalscrollbar": [
        "javax.swing.ScrollPaneLayout.getVerticalScrollBar()"
    ],
    "javax.swing.spinnerlistmodel.getpreviousvalue": [
        "javax.swing.SpinnerListModel.getPreviousValue()"
    ],
    "org.ietf.jgss.oid.hashcode": [
        "org.ietf.jgss.Oid.hashCode()"
    ],
    "javax.swing.plaf.multi.multiviewportui.installui": [
        "javax.swing.plaf.multi.MultiViewportUI.installUI(javax.swing.JComponent)"
    ],
    "javax.naming.initialcontext.getdefaultinitctx": [
        "javax.naming.InitialContext.getDefaultInitCtx()"
    ],
    "javax.xml.stream.xmlstreamwriter.writeemptyelement": [
        "javax.xml.stream.XMLStreamWriter.writeEmptyElement(java.lang.String,java.lang.String)",
        "javax.xml.stream.XMLStreamWriter.writeEmptyElement(java.lang.String)",
        "javax.xml.stream.XMLStreamWriter.writeEmptyElement(java.lang.String,java.lang.String,java.lang.String)"
    ],
    "javax.swing.plaf.basic.basiclistui.createui": [
        "javax.swing.plaf.basic.BasicListUI.createUI(javax.swing.JComponent)"
    ],
    "javax.naming.directory.attributemodificationexception.getunexecutedmodifications": [
        "javax.naming.directory.AttributeModificationException.getUnexecutedModifications()"
    ],
    "org.omg.dynamicany._dynvaluestub.get_val": [
        "org.omg.DynamicAny._DynValueStub.get_val()"
    ],
    "javax.swing.plaf.synth.synthinternalframeui.propertychange": [
        "javax.swing.plaf.synth.SynthInternalFrameUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "javax.sql.rowsetmetadata.setcatalogname": [
        "javax.sql.RowSetMetaData.setCatalogName(int,java.lang.String)"
    ],
    "javax.imageio.imageio.getwritermimetypes": [
        "javax.imageio.ImageIO.getWriterMIMETypes()"
    ],
    "java.security.principal.tostring": [
        "java.security.Principal.toString()"
    ],
    "org.omg.corba.typecode.id": [
        "org.omg.CORBA.TypeCode.id()"
    ],
    "javax.swing.jtextfield.removeactionlistener": [
        "javax.swing.JTextField.removeActionListener(java.awt.event.ActionListener)"
    ],
    "java.awt.image.imageproducer.addconsumer": [
        "java.awt.image.ImageProducer.addConsumer(java.awt.image.ImageConsumer)"
    ],
    "javax.xml.bind.helpers.abstractmarshallerimpl.setformattedoutput": [
        "javax.xml.bind.helpers.AbstractMarshallerImpl.setFormattedOutput(boolean)"
    ],
    "javax.net.ssl.httpsurlconnection.getdefaultsslsocketfactory": [
        "javax.net.ssl.HttpsURLConnection.getDefaultSSLSocketFactory()"
    ],
    "org.omg.dynamicany._dynfixedstub.get_val": [
        "org.omg.DynamicAny._DynFixedStub.get_val()"
    ],
    "java.awt.flowlayout.tostring": [
        "java.awt.FlowLayout.toString()"
    ],
    "javax.swing.plaf.basic.basictableui.installkeyboardactions": [
        "javax.swing.plaf.basic.BasicTableUI.installKeyboardActions()"
    ],
    "javax.swing.plaf.basic.basicspinnerui.installnextbuttonlisteners": [
        "javax.swing.plaf.basic.BasicSpinnerUI.installNextButtonListeners(java.awt.Component)"
    ],
    "java.awt.im.inputcontext.getinputmethodcontrolobject": [
        "java.awt.im.InputContext.getInputMethodControlObject()"
    ],
    "javax.swing.jtabbedpane.getdisplayedmnemonicindexat": [
        "javax.swing.JTabbedPane.getDisplayedMnemonicIndexAt(int)"
    ],
    "javax.swing.jmenubar.add": [
        "javax.swing.JMenuBar.add(javax.swing.JMenu)"
    ],
    "javax.sound.sampled.enumcontrol.getvalues": [
        "javax.sound.sampled.EnumControl.getValues()"
    ],
    "javax.swing.japplet.setrootpane": [
        "javax.swing.JApplet.setRootPane(javax.swing.JRootPane)"
    ],
    "javax.swing.text.defaultstyleddocument.elementspec.getarray": [
        "javax.swing.text.DefaultStyledDocument.ElementSpec.getArray()"
    ],
    "java.awt.event.keyevent.paramstring": [
        "java.awt.event.KeyEvent.paramString()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintdesktoppaneborder": [
        "javax.swing.plaf.synth.SynthPainter.paintDesktopPaneBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.text.html.stylesheet.createlargeattributeset": [
        "javax.swing.text.html.StyleSheet.createLargeAttributeSet(javax.swing.text.AttributeSet)"
    ],
    "javax.swing.plaf.metal.defaultmetaltheme.getprimary1": [
        "javax.swing.plaf.metal.DefaultMetalTheme.getPrimary1()"
    ],
    "javax.tools.javafilemanager.getjavafileforoutput": [
        "javax.tools.JavaFileManager.getJavaFileForOutput(javax.tools.JavaFileManager.Location,java.lang.String,javax.tools.JavaFileObject.Kind,javax.tools.FileObject)"
    ],
    "javax.naming.directory.basicattribute.getattributedefinition": [
        "javax.naming.directory.BasicAttribute.getAttributeDefinition()"
    ],
    "javax.security.sasl.saslserver.getmechanismname": [
        "javax.security.sasl.SaslServer.getMechanismName()"
    ],
    "java.awt.menu.getitem": [
        "java.awt.Menu.getItem(int)"
    ],
    "java.awt.image.packedcolormodel.getmasks": [
        "java.awt.image.PackedColorModel.getMasks()"
    ],
    "javax.sound.midi.midievent.settick": [
        "javax.sound.midi.MidiEvent.setTick(long)"
    ],
    "java.awt.container.getcomponent": [
        "java.awt.Container.getComponent(int)"
    ],
    "java.time.zoneddatetime.getzone": [
        "java.time.ZonedDateTime.getZone()"
    ],
    "java.security.cert.pkixparameters.getcertstores": [
        "java.security.cert.PKIXParameters.getCertStores()"
    ],
    "java.awt.graphicsdevice.getdisplaymodes": [
        "java.awt.GraphicsDevice.getDisplayModes()"
    ],
    "javax.swing.plaf.basic.basictoolbarui.setrolloverborders": [
        "javax.swing.plaf.basic.BasicToolBarUI.setRolloverBorders(boolean)"
    ],
    "javax.swing.plaf.synth.synthprogressbarui.setanimationindex": [
        "javax.swing.plaf.synth.SynthProgressBarUI.setAnimationIndex(int)"
    ],
    "java.nio.channels.datagramchannel.validops": [
        "java.nio.channels.DatagramChannel.validOps()"
    ],
    "java.util.map.entry.getkey": [
        "java.util.Map.Entry.getKey()"
    ],
    "java.time.chrono.chronolocaldatetime.timelineorder": [
        "java.time.chrono.ChronoLocalDateTime.timeLineOrder()"
    ],
    "javax.swing.plaf.componentui.getaccessiblechild": [
        "javax.swing.plaf.ComponentUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "java.time.format.decimalstyle.withpositivesign": [
        "java.time.format.DecimalStyle.withPositiveSign(char)"
    ],
    "org.omg.dynamicany.dynenumoperations.set_as_string": [
        "org.omg.DynamicAny.DynEnumOperations.set_as_string(java.lang.String)"
    ],
    "java.util.zip.zipentry.setmethod": [
        "java.util.zip.ZipEntry.setMethod(int)"
    ],
    "javax.sound.midi.patch.getbank": [
        "javax.sound.midi.Patch.getBank()"
    ],
    "javax.security.auth.callback.passwordcallback.isechoon": [
        "javax.security.auth.callback.PasswordCallback.isEchoOn()"
    ],
    "javax.swing.plaf.synth.synthseparatorui.createui": [
        "javax.swing.plaf.synth.SynthSeparatorUI.createUI(javax.swing.JComponent)"
    ],
    "java.awt.geom.arc2d.setarc": [
        "java.awt.geom.Arc2D.setArc(double,double,double,double,double,double,int)",
        "java.awt.geom.Arc2D.setArc(java.awt.geom.Point2D,java.awt.geom.Dimension2D,double,double,int)",
        "java.awt.geom.Arc2D.setArc(java.awt.geom.Rectangle2D,double,double,int)"
    ],
    "java.lang.invoke.methodhandle.invokeexact": [
        "java.lang.invoke.MethodHandle.invokeExact(java.lang.Object...)",
        "java.lang.invoke.MethodHandle.invokeExact(java.lang.Object)"
    ],
    "java.awt.image.databuffershort.getbankdata": [
        "java.awt.image.DataBufferShort.getBankData()"
    ],
    "javax.swing.defaultbuttonmodel.isselected": [
        "javax.swing.DefaultButtonModel.isSelected()"
    ],
    "javax.swing.jtable.convertrowindextomodel": [
        "javax.swing.JTable.convertRowIndexToModel(int)"
    ],
    "java.util.stream.stream.max": [
        "java.util.stream.Stream.max(java.util.Comparator<? super T>)",
        "java.util.stream.Stream.max(java.util.Comparator<? super java.util.stream.Stream>)"
    ],
    "java.beans.encoder.writeexpression": [
        "java.beans.Encoder.writeExpression(java.beans.Expression)"
    ],
    "java.lang.invoke.lambdametafactory.metafactory": [
        "java.lang.invoke.LambdaMetafactory.metafactory(java.lang.invoke.MethodHandles.Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)"
    ],
    "javax.security.auth.kerberos.keytab.getinstance": [
        "javax.security.auth.kerberos.KeyTab.getInstance(javax.security.auth.kerberos.KerberosPrincipal)",
        "javax.security.auth.kerberos.KeyTab.getInstance()",
        "javax.security.auth.kerberos.KeyTab.getInstance(javax.security.auth.kerberos.KerberosPrincipal,java.io.File)",
        "javax.security.auth.kerberos.KeyTab.getInstance(java.io.File)"
    ],
    "java.lang.processbuilder.redirect.file": [
        "java.lang.ProcessBuilder.Redirect.file()"
    ],
    "java.awt.dnd.draggesturerecognizer.setcomponent": [
        "java.awt.dnd.DragGestureRecognizer.setComponent(java.awt.Component)"
    ],
    "javax.xml.parsers.saxparser.isnamespaceaware": [
        "javax.xml.parsers.SAXParser.isNamespaceAware()"
    ],
    "javax.print.doc.getattributes": [
        "javax.print.Doc.getAttributes()"
    ],
    "javax.swing.text.html.minimalhtmlwriter.writestartparagraph": [
        "javax.swing.text.html.MinimalHTMLWriter.writeStartParagraph(javax.swing.text.Element)"
    ],
    "java.io.fileoutputstream.close": [
        "java.io.FileOutputStream.close()"
    ],
    "javax.swing.plaf.synth.synthmenuitemui.uninstallui": [
        "javax.swing.plaf.synth.SynthMenuItemUI.uninstallUI(javax.swing.JComponent)"
    ],
    "java.util.collection.parallelstream": [
        "java.util.Collection.parallelStream()"
    ],
    "javax.swing.text.documentfilter.filterbypass.insertstring": [
        "javax.swing.text.DocumentFilter.FilterBypass.insertString(int,java.lang.String,javax.swing.text.AttributeSet)"
    ],
    "javax.swing.jtable.getselectionforeground": [
        "javax.swing.JTable.getSelectionForeground()"
    ],
    "javax.swing.plaf.basic.basictableheaderui.getbaseline": [
        "javax.swing.plaf.basic.BasicTableHeaderUI.getBaseline(javax.swing.JComponent,int,int)"
    ],
    "java.awt.geom.rectangularshape.getframe": [
        "java.awt.geom.RectangularShape.getFrame()"
    ],
    "javax.print.attribute.standard.multipledocumenthandling.getcategory": [
        "javax.print.attribute.standard.MultipleDocumentHandling.getCategory()"
    ],
    "java.sql.statement.getgeneratedkeys": [
        "java.sql.Statement.getGeneratedKeys()"
    ],
    "javax.swing.jdialog.getlayeredpane": [
        "javax.swing.JDialog.getLayeredPane()"
    ],
    "javax.swing.jinternalframe.setcursor": [
        "javax.swing.JInternalFrame.setCursor(java.awt.Cursor)"
    ],
    "javax.swing.table.tablecolumnmodel.gettotalcolumnwidth": [
        "javax.swing.table.TableColumnModel.getTotalColumnWidth()"
    ],
    "javax.swing.plaf.basic.basicspinnerui.getbaseline": [
        "javax.swing.plaf.basic.BasicSpinnerUI.getBaseline(javax.swing.JComponent,int,int)"
    ],
    "java.awt.image.renderable.renderableimage.getminx": [
        "java.awt.image.renderable.RenderableImage.getMinX()"
    ],
    "javax.swing.text.plainview.viewtomodel": [
        "javax.swing.text.PlainView.viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias[])"
    ],
    "java.time.temporal.temporalfield.getfrom": [
        "java.time.temporal.TemporalField.getFrom(java.time.temporal.TemporalAccessor)"
    ],
    "javax.swing.jscrollbar.addadjustmentlistener": [
        "javax.swing.JScrollBar.addAdjustmentListener(java.awt.event.AdjustmentListener)"
    ],
    "org.omg.corba.portable.delegate.releasereply": [
        "org.omg.CORBA.portable.Delegate.releaseReply(org.omg.CORBA.Object,org.omg.CORBA.portable.InputStream)"
    ],
    "javax.swing.text.jtextcomponent.getselectedtextcolor": [
        "javax.swing.text.JTextComponent.getSelectedTextColor()"
    ],
    "javax.swing.jcomponent.paintchildren": [
        "javax.swing.JComponent.paintChildren(java.awt.Graphics)"
    ],
    "javax.swing.menuselectionmanager.componentforpoint": [
        "javax.swing.MenuSelectionManager.componentForPoint(java.awt.Component,java.awt.Point)"
    ],
    "javax.xml.transform.sax.transformerhandler.gettransformer": [
        "javax.xml.transform.sax.TransformerHandler.getTransformer()"
    ],
    "java.util.enummap.put": [
        "java.util.EnumMap.put(K,V)",
        "java.util.EnumMap.put(java.util.EnumMap,java.util.EnumMap)"
    ],
    "java.lang.compiler.enable": [
        "java.lang.Compiler.enable()"
    ],
    "java.util.regex.pattern.tostring": [
        "java.util.regex.Pattern.toString()"
    ],
    "javax.naming.namingenumeration.next": [
        "javax.naming.NamingEnumeration.next()"
    ],
    "java.util.zip.zipentry.getlastmodifiedtime": [
        "java.util.zip.ZipEntry.getLastModifiedTime()"
    ],
    "java.nio.longbuffer.wrap": [
        "java.nio.LongBuffer.wrap(long[],int,int)",
        "java.nio.LongBuffer.wrap(long[])"
    ],
    "javax.management.relation.roleinfo.getdescription": [
        "javax.management.relation.RoleInfo.getDescription()"
    ],
    "java.time.dayofweek.valueof": [
        "java.time.DayOfWeek.valueOf(java.lang.String)"
    ],
    "javax.management.relation.relationservicembean.isrelation": [
        "javax.management.relation.RelationServiceMBean.isRelation(javax.management.ObjectName)"
    ],
    "java.awt.pageattributes.setmedia": [
        "java.awt.PageAttributes.setMedia(java.awt.PageAttributes.MediaType)"
    ],
    "javax.print.attribute.standard.numberofdocuments.getname": [
        "javax.print.attribute.standard.NumberOfDocuments.getName()"
    ],
    "java.sql.statement.addbatch": [
        "java.sql.Statement.addBatch(java.lang.String)"
    ],
    "java.awt.image.imagefilter.setproperties": [
        "java.awt.image.ImageFilter.setProperties(,?>)"
    ],
    "java.awt.awteventmulticaster.remove": [
        "java.awt.AWTEventMulticaster.remove(java.awt.event.AdjustmentListener,java.awt.event.AdjustmentListener)",
        "java.awt.AWTEventMulticaster.remove(java.awt.event.KeyListener,java.awt.event.KeyListener)",
        "java.awt.AWTEventMulticaster.remove(java.awt.event.HierarchyListener,java.awt.event.HierarchyListener)",
        "java.awt.AWTEventMulticaster.remove(java.awt.event.WindowStateListener,java.awt.event.WindowStateListener)",
        "java.awt.AWTEventMulticaster.remove(java.awt.event.InputMethodListener,java.awt.event.InputMethodListener)",
        "java.awt.AWTEventMulticaster.remove(java.awt.event.HierarchyBoundsListener,java.awt.event.HierarchyBoundsListener)",
        "java.awt.AWTEventMulticaster.remove(java.awt.event.ComponentListener,java.awt.event.ComponentListener)",
        "java.awt.AWTEventMulticaster.remove(java.awt.event.ActionListener,java.awt.event.ActionListener)",
        "java.awt.AWTEventMulticaster.remove(java.awt.event.MouseWheelListener,java.awt.event.MouseWheelListener)",
        "java.awt.AWTEventMulticaster.remove(java.util.EventListener)",
        "java.awt.AWTEventMulticaster.remove(java.awt.event.MouseMotionListener,java.awt.event.MouseMotionListener)",
        "java.awt.AWTEventMulticaster.remove(java.awt.event.ContainerListener,java.awt.event.ContainerListener)",
        "java.awt.AWTEventMulticaster.remove(java.awt.event.WindowListener,java.awt.event.WindowListener)",
        "java.awt.AWTEventMulticaster.remove(java.awt.event.FocusListener,java.awt.event.FocusListener)",
        "java.awt.AWTEventMulticaster.remove(java.awt.event.MouseListener,java.awt.event.MouseListener)",
        "java.awt.AWTEventMulticaster.remove(java.awt.event.ItemListener,java.awt.event.ItemListener)",
        "java.awt.AWTEventMulticaster.remove(java.awt.event.WindowFocusListener,java.awt.event.WindowFocusListener)"
    ],
    "javax.lang.model.element.executableelement.getthrowntypes": [
        "javax.lang.model.element.ExecutableElement.getThrownTypes()"
    ],
    "javax.swing.tree.defaultmutabletreenode.getpathtoroot": [
        "javax.swing.tree.DefaultMutableTreeNode.getPathToRoot(javax.swing.tree.TreeNode,int)"
    ],
    "javax.swing.defaultlistmodel.lastelement": [
        "javax.swing.DefaultListModel.lastElement()"
    ],
    "javax.swing.jtree.setdropmode": [
        "javax.swing.JTree.setDropMode(javax.swing.DropMode)"
    ],
    "java.sql.sqlinput.readshort": [
        "java.sql.SQLInput.readShort()"
    ],
    "java.net.interfaceaddress.getaddress": [
        "java.net.InterfaceAddress.getAddress()"
    ],
    "java.awt.geom.rectangularshape.getpathiterator": [
        "java.awt.geom.RectangularShape.getPathIterator(java.awt.geom.AffineTransform,double)"
    ],
    "java.net.inetaddress.equals": [
        "java.net.InetAddress.equals(java.lang.Object)"
    ],
    "javax.sql.rowset.joinrowset.tocachedrowset": [
        "javax.sql.rowset.JoinRowSet.toCachedRowSet()"
    ],
    "org.ietf.jgss.messageprop.setprivacy": [
        "org.ietf.jgss.MessageProp.setPrivacy(boolean)"
    ],
    "javax.swing.plaf.basic.basictableheaderui.getminimumsize": [
        "javax.swing.plaf.basic.BasicTableHeaderUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "java.text.simpledateformat.parse": [
        "java.text.SimpleDateFormat.parse(java.lang.String,java.text.ParsePosition)"
    ],
    "javax.sql.rowset.baserowset.setnull": [
        "javax.sql.rowset.BaseRowSet.setNull(java.lang.String,int,java.lang.String)",
        "javax.sql.rowset.BaseRowSet.setNull(int,int,java.lang.String)",
        "javax.sql.rowset.BaseRowSet.setNull(java.lang.String,int)",
        "javax.sql.rowset.BaseRowSet.setNull(int,int)"
    ],
    "javax.swing.plaf.synth.synthbuttonui.geticon": [
        "javax.swing.plaf.synth.SynthButtonUI.getIcon(javax.swing.AbstractButton)"
    ],
    "java.io.objectstreamfield.compareto": [
        "java.io.ObjectStreamField.compareTo(java.lang.Object)"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writefloat": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeFloat(float)"
    ],
    "org.w3c.dom.documenttype.getnotations": [
        "org.w3c.dom.DocumentType.getNotations()"
    ],
    "javax.imageio.stream.imageoutputstream.writebit": [
        "javax.imageio.stream.ImageOutputStream.writeBit(int)"
    ],
    "javax.sql.rowset.settype": [
        "javax.sql.RowSet.setType(int)"
    ],
    "java.awt.color.decode": [
        "java.awt.Color.decode(java.lang.String)"
    ],
    "java.nio.channels.spi.abstractselector.provider": [
        "java.nio.channels.spi.AbstractSelector.provider()"
    ],
    "javax.security.auth.x500.x500principal.getname": [
        "javax.security.auth.x500.X500Principal.getName()",
        "javax.security.auth.x500.X500Principal.getName(java.lang.String)",
        "javax.security.auth.x500.X500Principal.getName(java.lang.String,,java.lang.String>)"
    ],
    "java.awt.image.imageobserver.imageupdate": [
        "java.awt.image.ImageObserver.imageUpdate(java.awt.Image,int,int,int,int,int)"
    ],
    "java.security.basicpermission.newpermissioncollection": [
        "java.security.BasicPermission.newPermissionCollection()"
    ],
    "java.awt.keyboardfocusmanager.addkeyeventpostprocessor": [
        "java.awt.KeyboardFocusManager.addKeyEventPostProcessor(java.awt.KeyEventPostProcessor)"
    ],
    "java.lang.character.fordigit": [
        "java.lang.Character.forDigit(int,int)"
    ],
    "java.util.prefs.abstractpreferences.clear": [
        "java.util.prefs.AbstractPreferences.clear()"
    ],
    "javax.xml.crypto.dsig.xmlsignaturefactory.newxmlobject": [
        "javax.xml.crypto.dsig.XMLSignatureFactory.newXMLObject(java.util.List,java.lang.String,java.lang.String,java.lang.String)"
    ],
    "java.sql.sqlinput.readsqlxml": [
        "java.sql.SQLInput.readSQLXML()"
    ],
    "javax.swing.boxlayout.invalidatelayout": [
        "javax.swing.BoxLayout.invalidateLayout(java.awt.Container)"
    ],
    "java.util.optionallong.orelse": [
        "java.util.OptionalLong.orElse(long)"
    ],
    "java.util.logging.logger.setresourcebundle": [
        "java.util.logging.Logger.setResourceBundle(java.util.ResourceBundle)"
    ],
    "javax.sql.rowset.cachedrowset.createshared": [
        "javax.sql.rowset.CachedRowSet.createShared()"
    ],
    "java.io.datainput.readboolean": [
        "java.io.DataInput.readBoolean()"
    ],
    "javax.management.descriptor.removefield": [
        "javax.management.Descriptor.removeField(java.lang.String)"
    ],
    "java.security.keypairgenerator.genkeypair": [
        "java.security.KeyPairGenerator.genKeyPair()"
    ],
    "javax.swing.uidefaults.addpropertychangelistener": [
        "javax.swing.UIDefaults.addPropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "javax.sql.rowset.getdatasourcename": [
        "javax.sql.RowSet.getDataSourceName()"
    ],
    "java.net.socketimpl.bind": [
        "java.net.SocketImpl.bind(java.net.InetAddress,int)"
    ],
    "javax.management.openmbean.openmbeanconstructorinfosupport.hashcode": [
        "javax.management.openmbean.OpenMBeanConstructorInfoSupport.hashCode()"
    ],
    "java.text.dateformat.field.getcalendarfield": [
        "java.text.DateFormat.Field.getCalendarField()"
    ],
    "javax.swing.listmodel.getelementat": [
        "javax.swing.ListModel.getElementAt(int)"
    ],
    "java.text.messageformat.topattern": [
        "java.text.MessageFormat.toPattern()"
    ],
    "javax.swing.boundedrangemodel.getminimum": [
        "javax.swing.BoundedRangeModel.getMinimum()"
    ],
    "java.util.enumset.range": [
        "java.util.EnumSet.range(E,E)"
    ],
    "java.text.dateformatsymbols.getweekdays": [
        "java.text.DateFormatSymbols.getWeekdays()"
    ],
    "javax.annotation.processing.processingenvironment.getmessager": [
        "javax.annotation.processing.ProcessingEnvironment.getMessager()"
    ],
    "java.lang.reflect.constructor.getannotation": [
        "java.lang.reflect.Constructor.getAnnotation(java.lang.Class<T>)"
    ],
    "javax.xml.transform.transformerfactory.setfeature": [
        "javax.xml.transform.TransformerFactory.setFeature(java.lang.String,boolean)"
    ],
    "java.util.stream.intstream.collect": [
        "java.util.stream.IntStream.collect(java.util.function.Supplier<R>,java.util.function.ObjIntConsumer<R>,,R>)"
    ],
    "javax.swing.plaf.multi.multitextui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiTextUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "javax.imageio.imagewriter.getdefaultwriteparam": [
        "javax.imageio.ImageWriter.getDefaultWriteParam()"
    ],
    "javax.naming.spi.namingmanager.hasinitialcontextfactorybuilder": [
        "javax.naming.spi.NamingManager.hasInitialContextFactoryBuilder()"
    ],
    "javax.net.ssl.sslserversocket.getenabledciphersuites": [
        "javax.net.ssl.SSLServerSocket.getEnabledCipherSuites()"
    ],
    "javax.swing.jlist.droplocation.tostring": [
        "javax.swing.JList.DropLocation.toString()"
    ],
    "javax.swing.text.boxview.setaxis": [
        "javax.swing.text.BoxView.setAxis(int)"
    ],
    "javax.swing.jcombobox.addactionlistener": [
        "javax.swing.JComboBox.addActionListener(java.awt.event.ActionListener)"
    ],
    "java.io.printwriter.printf": [
        "java.io.PrintWriter.printf(java.lang.String,java.lang.Object)",
        "java.io.PrintWriter.printf(java.util.Locale,java.lang.String,java.lang.Object...)",
        "java.io.PrintWriter.printf(java.lang.String,java.lang.Object...)",
        "java.io.PrintWriter.printf(java.util.Locale,java.lang.String,java.lang.Object)"
    ],
    "java.awt.image.cropimagefilter.setproperties": [
        "java.awt.image.CropImageFilter.setProperties(,?>)"
    ],
    "java.sql.ref.getobject": [
        "java.sql.Ref.getObject()",
        "java.sql.Ref.getObject(,java.lang.Class<?>>)"
    ],
    "java.util.collections.replaceall": [
        "java.util.Collections.replaceAll(java.util.List<T>,T,T)"
    ],
    "javax.swing.text.abstractdocument.removedocumentlistener": [
        "javax.swing.text.AbstractDocument.removeDocumentListener(javax.swing.event.DocumentListener)"
    ],
    "javax.xml.ws.soap.soapbinding.setroles": [
        "javax.xml.ws.soap.SOAPBinding.setRoles(java.util.Set<java.lang.String>)"
    ],
    "java.util.zip.zipentry.setcreationtime": [
        "java.util.zip.ZipEntry.setCreationTime(java.nio.file.attribute.FileTime)"
    ],
    "java.util.list.indexof": [
        "java.util.List.indexOf(java.lang.Object)"
    ],
    "java.io.printstream.format": [
        "java.io.PrintStream.format(java.lang.String,java.lang.Object)",
        "java.io.PrintStream.format(java.util.Locale,java.lang.String,java.lang.Object)",
        "java.io.PrintStream.format(java.util.Locale,java.lang.String,java.lang.Object...)",
        "java.io.PrintStream.format(java.lang.String,java.lang.Object...)"
    ],
    "java.util.base64.decoder.wrap": [
        "java.util.Base64.Decoder.wrap(java.io.InputStream)"
    ],
    "org.omg.dynamicany._dynenumstub.insert_wchar": [
        "org.omg.DynamicAny._DynEnumStub.insert_wchar(char)"
    ],
    "javax.swing.jsplitpane.gettopcomponent": [
        "javax.swing.JSplitPane.getTopComponent()"
    ],
    "java.lang.securitymanager.checkpropertyaccess": [
        "java.lang.SecurityManager.checkPropertyAccess(java.lang.String)"
    ],
    "org.w3c.dom.node.getprevioussibling": [
        "org.w3c.dom.Node.getPreviousSibling()"
    ],
    "java.lang.strictmath.asin": [
        "java.lang.StrictMath.asin(double)"
    ],
    "java.util.collections.checkedsortedmap": [
        "java.util.Collections.checkedSortedMap(,V>,java.lang.Class<K>,java.lang.Class<V>)"
    ],
    "javax.naming.directory.attributes.getall": [
        "javax.naming.directory.Attributes.getAll()"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.writelock.isheldbycurrentthread": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.isHeldByCurrentThread()"
    ],
    "javax.xml.crypto.dsig.xmlsignatureexception.printstacktrace": [
        "javax.xml.crypto.dsig.XMLSignatureException.printStackTrace()"
    ],
    "java.nio.file.attribute.userdefinedfileattributeview.size": [
        "java.nio.file.attribute.UserDefinedFileAttributeView.size(java.lang.String)"
    ],
    "org.omg.portableinterceptor.clientrequestinfooperations.effective_target": [
        "org.omg.PortableInterceptor.ClientRequestInfoOperations.effective_target()"
    ],
    "java.awt.image.packedcolormodel.getmask": [
        "java.awt.image.PackedColorModel.getMask(int)"
    ],
    "java.time.localdatetime.plus": [
        "java.time.LocalDateTime.plus(long,java.time.temporal.TemporalUnit)",
        "java.time.LocalDateTime.plus(java.time.temporal.TemporalAmount)"
    ],
    "java.security.securerandom.getseed": [
        "java.security.SecureRandom.getSeed(int)"
    ],
    "java.awt.image.affinetransformop.getpoint2d": [
        "java.awt.image.AffineTransformOp.getPoint2D(java.awt.geom.Point2D,java.awt.geom.Point2D)"
    ],
    "java.io.randomaccessfile.finalize": [
        "java.io.RandomAccessFile.finalize()"
    ],
    "org.xml.sax.helpers.defaulthandler.resolveentity": [
        "org.xml.sax.helpers.DefaultHandler.resolveEntity(java.lang.String,java.lang.String)"
    ],
    "java.util.bitset.tolongarray": [
        "java.util.BitSet.toLongArray()"
    ],
    "org.omg.dynamicany._dynsequencestub.insert_wchar": [
        "org.omg.DynamicAny._DynSequenceStub.insert_wchar(char)"
    ],
    "java.awt.keyeventpostprocessor.postprocesskeyevent": [
        "java.awt.KeyEventPostProcessor.postProcessKeyEvent(java.awt.event.KeyEvent)"
    ],
    "java.util.bitset.flip": [
        "java.util.BitSet.flip(int)"
    ],
    "org.omg.dynamicany._dynstructstub.copy": [
        "org.omg.DynamicAny._DynStructStub.copy()"
    ],
    "javax.lang.model.type.mirroredtypesexception.gettypemirrors": [
        "javax.lang.model.type.MirroredTypesException.getTypeMirrors()"
    ],
    "java.util.concurrent.completablefuture.applytoeitherasync": [
        "java.util.concurrent.CompletableFuture.applyToEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Function<? super,U>)"
    ],
    "javax.swing.plaf.synth.synthcomboboxui.update": [
        "javax.swing.plaf.synth.SynthComboBoxUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.grouplayout.maximumlayoutsize": [
        "javax.swing.GroupLayout.maximumLayoutSize(java.awt.Container)"
    ],
    "javax.management.monitor.countermonitormbean.getoffset": [
        "javax.management.monitor.CounterMonitorMBean.getOffset()"
    ],
    "java.nio.channels.channels.newchannel": [
        "java.nio.channels.Channels.newChannel(java.io.InputStream)",
        "java.nio.channels.Channels.newChannel(java.io.OutputStream)"
    ],
    "javax.swing.jtable.geteditingrow": [
        "javax.swing.JTable.getEditingRow()"
    ],
    "java.rmi.activation.activationsystem.setactivationdesc": [
        "java.rmi.activation.ActivationSystem.setActivationDesc(java.rmi.activation.ActivationID,java.rmi.activation.ActivationDesc)"
    ],
    "java.util.stream.collectors.summinglong": [
        "java.util.stream.Collectors.summingLong(java.util.function.ToLongFunction<? super T>)"
    ],
    "javax.management.attributevalueexp.apply": [
        "javax.management.AttributeValueExp.apply(javax.management.ObjectName)"
    ],
    "java.awt.printjob.getpageresolution": [
        "java.awt.PrintJob.getPageResolution()"
    ],
    "java.beans.propertyeditor.getvalue": [
        "java.beans.PropertyEditor.getValue()"
    ],
    "javax.swing.text.defaultcaret.equals": [
        "javax.swing.text.DefaultCaret.equals(java.lang.Object)"
    ],
    "javax.swing.text.jtextcomponent.getdisabledtextcolor": [
        "javax.swing.text.JTextComponent.getDisabledTextColor()"
    ],
    "org.omg.dynamicany._dynfixedstub.insert_ulonglong": [
        "org.omg.DynamicAny._DynFixedStub.insert_ulonglong(long)"
    ],
    "org.omg.dynamicany._dynanystub.insert_val": [
        "org.omg.DynamicAny._DynAnyStub.insert_val(java.io.Serializable)"
    ],
    "javax.xml.bind.helpers.validationeventimpl.setlinkedexception": [
        "javax.xml.bind.helpers.ValidationEventImpl.setLinkedException(java.lang.Throwable)"
    ],
    "javax.xml.crypto.xmlcryptocontext.geturidereferencer": [
        "javax.xml.crypto.XMLCryptoContext.getURIDereferencer()"
    ],
    "javax.sound.midi.midisystem.write": [
        "javax.sound.midi.MidiSystem.write(javax.sound.midi.Sequence,int,java.io.OutputStream)",
        "javax.sound.midi.MidiSystem.write(javax.sound.midi.Sequence,int,java.io.File)"
    ],
    "javax.swing.table.tablerowsorter.getcomparator": [
        "javax.swing.table.TableRowSorter.getComparator(int)"
    ],
    "javax.swing.jcomponent.setactionmap": [
        "javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"
    ],
    "javax.sql.rowset.setstring": [
        "javax.sql.RowSet.setString(java.lang.String,java.lang.String)",
        "javax.sql.RowSet.setString(int,java.lang.String)"
    ],
    "java.io.printwriter.close": [
        "java.io.PrintWriter.close()"
    ],
    "javax.management.modelmbean.modelmbeanoperationinfo.getdescriptor": [
        "javax.management.modelmbean.ModelMBeanOperationInfo.getDescriptor()"
    ],
    "javax.swing.plaf.basic.basiccombopopup.installcomboboxmodellisteners": [
        "javax.swing.plaf.basic.BasicComboPopup.installComboBoxModelListeners(javax.swing.ComboBoxModel)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getsystemtextcolor": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getSystemTextColor()"
    ],
    "java.util.logging.logger.log": [
        "java.util.logging.Logger.log(java.util.logging.Level,java.util.function.Supplier<java.lang.String>)",
        "java.util.logging.Logger.log(java.util.logging.Level,java.lang.Throwable,java.util.function.Supplier<java.lang.String>)",
        "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String)",
        "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Object)",
        "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)",
        "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Object[])",
        "java.util.logging.Logger.log(java.util.logging.LogRecord)"
    ],
    "java.util.stream.doublestream.filter": [
        "java.util.stream.DoubleStream.filter(java.util.function.DoublePredicate)"
    ],
    "javax.swing.jdesktoppane.getaccessiblecontext": [
        "javax.swing.JDesktopPane.getAccessibleContext()"
    ],
    "javax.swing.jslider.getaccessiblecontext": [
        "javax.swing.JSlider.getAccessibleContext()"
    ],
    "java.lang.reflect.annotatedwildcardtype.getannotatedlowerbounds": [
        "java.lang.reflect.AnnotatedWildcardType.getAnnotatedLowerBounds()"
    ],
    "java.security.cert.certstorespi.enginegetcertificates": [
        "java.security.cert.CertStoreSpi.engineGetCertificates(java.security.cert.CertSelector)"
    ],
    "java.sql.databasemetadata.getmaxindexlength": [
        "java.sql.DatabaseMetaData.getMaxIndexLength()"
    ],
    "javax.swing.plaf.synth.synthformattedtextfieldui.createui": [
        "javax.swing.plaf.synth.SynthFormattedTextFieldUI.createUI(javax.swing.JComponent)"
    ],
    "javax.swing.text.defaultstyleddocument.setparagraphattributes": [
        "javax.swing.text.DefaultStyledDocument.setParagraphAttributes(int,int,javax.swing.text.AttributeSet,boolean)"
    ],
    "javax.print.attribute.standard.printerstate.getenumvaluetable": [
        "javax.print.attribute.standard.PrinterState.getEnumValueTable()"
    ],
    "java.time.localdatetime.truncatedto": [
        "java.time.LocalDateTime.truncatedTo(java.time.temporal.TemporalUnit)"
    ],
    "org.w3c.dom.ls.lsparser.setfilter": [
        "org.w3c.dom.ls.LSParser.setFilter(org.w3c.dom.ls.LSParserFilter)"
    ],
    "java.time.chrono.japanesechronology.getcalendartype": [
        "java.time.chrono.JapaneseChronology.getCalendarType()"
    ],
    "javax.naming.ldap.rdn.tostring": [
        "javax.naming.ldap.Rdn.toString()"
    ],
    "java.nio.floatbuffer.asreadonlybuffer": [
        "java.nio.FloatBuffer.asReadOnlyBuffer()"
    ],
    "java.util.concurrent.blockingdeque.offerfirst": [
        "java.util.concurrent.BlockingDeque.offerFirst(E,long,java.util.concurrent.TimeUnit)",
        "java.util.concurrent.BlockingDeque.offerFirst(java.util.concurrent.BlockingDeque,long,java.util.concurrent.TimeUnit)",
        "java.util.concurrent.BlockingDeque.offerFirst(E)",
        "java.util.concurrent.BlockingDeque.offerFirst(java.util.concurrent.BlockingDeque)"
    ],
    "javax.swing.jtable.addnotify": [
        "javax.swing.JTable.addNotify()"
    ],
    "javax.net.ssl.keystorebuilderparameters.getparameters": [
        "javax.net.ssl.KeyStoreBuilderParameters.getParameters()"
    ],
    "java.nio.doublebuffer.slice": [
        "java.nio.DoubleBuffer.slice()"
    ],
    "javax.swing.text.flowview.removeupdate": [
        "javax.swing.text.FlowView.removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "javax.swing.text.html.parser.entity.getdata": [
        "javax.swing.text.html.parser.Entity.getData()"
    ],
    "javax.swing.text.simpleattributeset.removeattribute": [
        "javax.swing.text.SimpleAttributeSet.removeAttribute(java.lang.Object)"
    ],
    "java.util.concurrent.locks.abstractqueuedlongsynchronizer.tryrelease": [
        "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryRelease(long)"
    ],
    "java.sql.clob.free": [
        "java.sql.Clob.free()"
    ],
    "javax.swing.plaf.basic.basicpasswordfieldui.getpropertyprefix": [
        "javax.swing.plaf.basic.BasicPasswordFieldUI.getPropertyPrefix()"
    ],
    "java.lang.management.managementfactory.getthreadmxbean": [
        "java.lang.management.ManagementFactory.getThreadMXBean()"
    ],
    "java.util.treemap.keyset": [
        "java.util.TreeMap.keySet()"
    ],
    "javax.swing.jtable.getdefaultrenderer": [
        "javax.swing.JTable.getDefaultRenderer(java.lang.Class<?>)"
    ],
    "javax.xml.ws.soap.mtomfeature.getid": [
        "javax.xml.ws.soap.MTOMFeature.getID()"
    ],
    "java.awt.trayicon.messagetype.values": [
        "java.awt.TrayIcon.MessageType.values()"
    ],
    "javax.imageio.imageio.getreaderformatnames": [
        "javax.imageio.ImageIO.getReaderFormatNames()"
    ],
    "javax.lang.model.element.executableelement.getsimplename": [
        "javax.lang.model.element.ExecutableElement.getSimpleName()"
    ],
    "java.awt.jobattributes.setdialog": [
        "java.awt.JobAttributes.setDialog(java.awt.JobAttributes.DialogType)"
    ],
    "javax.swing.plaf.multi.multirootpaneui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiRootPaneUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "java.util.spi.timezonenameprovider.getdisplayname": [
        "java.util.spi.TimeZoneNameProvider.getDisplayName(java.lang.String,boolean,int,java.util.Locale)"
    ],
    "javax.lang.model.util.simpletypevisitor6.visitnull": [
        "javax.lang.model.util.SimpleTypeVisitor6.visitNull(javax.lang.model.type.NullType,javax.lang.model.util.SimpleTypeVisitor6)"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writestring": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeString(java.lang.String)"
    ],
    "java.util.zip.deflater.getbytesread": [
        "java.util.zip.Deflater.getBytesRead()"
    ],
    "javax.swing.boundedrangemodel.getvalue": [
        "javax.swing.BoundedRangeModel.getValue()"
    ],
    "javax.xml.crypto.dsig.spec.xpathtype.getexpression": [
        "javax.xml.crypto.dsig.spec.XPathType.getExpression()"
    ],
    "javax.swing.plaf.multi.multiviewportui.getminimumsize": [
        "javax.swing.plaf.multi.MultiViewportUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "org.omg.dynamicany.dynanyoperations.type": [
        "org.omg.DynamicAny.DynAnyOperations.type()"
    ],
    "java.beans.propertychangeevent.getnewvalue": [
        "java.beans.PropertyChangeEvent.getNewValue()"
    ],
    "javax.sound.sampled.dataline.getformat": [
        "javax.sound.sampled.DataLine.getFormat()"
    ],
    "java.io.dataoutputstream.writelong": [
        "java.io.DataOutputStream.writeLong(long)"
    ],
    "javax.xml.datatype.duration.getfield": [
        "javax.xml.datatype.Duration.getField(javax.xml.datatype.DatatypeConstants.Field)"
    ],
    "javax.swing.text.passwordview.drawunselectedtext": [
        "javax.swing.text.PasswordView.drawUnselectedText(java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.jcolorchooser.getcolor": [
        "javax.swing.JColorChooser.getColor()"
    ],
    "java.net.datagramsocket.getlocalport": [
        "java.net.DatagramSocket.getLocalPort()"
    ],
    "java.security.policy.getinstance": [
        "java.security.Policy.getInstance(java.lang.String,java.security.Policy.Parameters,java.security.Provider)",
        "java.security.Policy.getInstance(java.lang.String,java.security.Policy.Parameters)",
        "java.security.Policy.getInstance(java.lang.String,java.security.Policy.Parameters,java.lang.String)"
    ],
    "java.awt.awteventmulticaster.windowclosed": [
        "java.awt.AWTEventMulticaster.windowClosed(java.awt.event.WindowEvent)"
    ],
    "java.util.concurrent.atomic.atomicintegerarray.getandset": [
        "java.util.concurrent.atomic.AtomicIntegerArray.getAndSet(int,int)"
    ],
    "java.io.objectinputstream.readint": [
        "java.io.ObjectInputStream.readInt()"
    ],
    "java.rmi.server.remoteserver.setlog": [
        "java.rmi.server.RemoteServer.setLog(java.io.OutputStream)"
    ],
    "javax.sound.midi.synthesizer.remapinstrument": [
        "javax.sound.midi.Synthesizer.remapInstrument(javax.sound.midi.Instrument,javax.sound.midi.Instrument)"
    ],
    "javax.swing.border.abstractborder.getbaseline": [
        "javax.swing.border.AbstractBorder.getBaseline(java.awt.Component,int,int)"
    ],
    "javax.xml.crypto.octetstreamdata.getmimetype": [
        "javax.xml.crypto.OctetStreamData.getMimeType()"
    ],
    "java.util.prefs.preferences.getlong": [
        "java.util.prefs.Preferences.getLong(java.lang.String,long)"
    ],
    "javax.security.auth.kerberos.keytab.equals": [
        "javax.security.auth.kerberos.KeyTab.equals(java.lang.Object)"
    ],
    "java.lang.reflect.parameterizedtype.getactualtypearguments": [
        "java.lang.reflect.ParameterizedType.getActualTypeArguments()"
    ],
    "java.awt.image.indexcolormodel.converttointdiscrete": [
        "java.awt.image.IndexColorModel.convertToIntDiscrete(java.awt.image.Raster,boolean)"
    ],
    "java.awt.dimension.getheight": [
        "java.awt.Dimension.getHeight()"
    ],
    "javax.swing.undo.undomanager.redoto": [
        "javax.swing.undo.UndoManager.redoTo(javax.swing.undo.UndoableEdit)"
    ],
    "java.lang.float.doublevalue": [
        "java.lang.Float.doubleValue()"
    ],
    "java.awt.font.multiplemaster.getdesignaxisnames": [
        "java.awt.font.MultipleMaster.getDesignAxisNames()"
    ],
    "java.time.format.datetimeformatterbuilder.appendzoneregionid": [
        "java.time.format.DateTimeFormatterBuilder.appendZoneRegionId()"
    ],
    "javax.swing.jinternalframe.paintcomponent": [
        "javax.swing.JInternalFrame.paintComponent(java.awt.Graphics)"
    ],
    "java.beans.beancontext.beancontextevent.getbeancontext": [
        "java.beans.beancontext.BeanContextEvent.getBeanContext()"
    ],
    "javax.xml.stream.xmleventfactory.newinstance": [
        "javax.xml.stream.XMLEventFactory.newInstance()"
    ],
    "javax.swing.jpopupmenu.getcomponentindex": [
        "javax.swing.JPopupMenu.getComponentIndex(java.awt.Component)"
    ],
    "javax.swing.text.html.css.attribute.isinherited": [
        "javax.swing.text.html.CSS.Attribute.isInherited()"
    ],
    "java.lang.invoke.methodhandle.bindto": [
        "java.lang.invoke.MethodHandle.bindTo(java.lang.Object)"
    ],
    "java.lang.strictmath.nextup": [
        "java.lang.StrictMath.nextUp(double)",
        "java.lang.StrictMath.nextUp(float)"
    ],
    "javax.naming.stringrefaddr.getcontent": [
        "javax.naming.StringRefAddr.getContent()"
    ],
    "java.util.zip.inflater.inflate": [
        "java.util.zip.Inflater.inflate(byte[],int,int)",
        "java.util.zip.Inflater.inflate(byte[])"
    ],
    "javax.imageio.imagereader.removeiioreadupdatelistener": [
        "javax.imageio.ImageReader.removeIIOReadUpdateListener(javax.imageio.event.IIOReadUpdateListener)"
    ],
    "javax.swing.undo.undoableedit.getredopresentationname": [
        "javax.swing.undo.UndoableEdit.getRedoPresentationName()"
    ],
    "javax.swing.text.defaulteditorkit.createcaret": [
        "javax.swing.text.DefaultEditorKit.createCaret()"
    ],
    "java.awt.component.getmouseposition": [
        "java.awt.Component.getMousePosition()"
    ],
    "java.util.locale.filteringmode.valueof": [
        "java.util.Locale.FilteringMode.valueOf(java.lang.String)"
    ],
    "java.io.objectstreamclass.getfields": [
        "java.io.ObjectStreamClass.getFields()"
    ],
    "javax.print.doc.getreaderfortext": [
        "javax.print.Doc.getReaderForText()"
    ],
    "javax.swing.jtree.getpreferredscrollableviewportsize": [
        "javax.swing.JTree.getPreferredScrollableViewportSize()"
    ],
    "java.util.concurrent.linkedtransferqueue.toarray": [
        "java.util.concurrent.LinkedTransferQueue.toArray()"
    ],
    "java.awt.displaymode.hashcode": [
        "java.awt.DisplayMode.hashCode()"
    ],
    "java.awt.image.componentsamplemodel.getsamplesize": [
        "java.awt.image.ComponentSampleModel.getSampleSize()",
        "java.awt.image.ComponentSampleModel.getSampleSize(int)"
    ],
    "org.omg.dynamicany._dynvaluestub.get_wstring": [
        "org.omg.DynamicAny._DynValueStub.get_wstring()"
    ],
    "java.time.chrono.minguodate.now": [
        "java.time.chrono.MinguoDate.now()",
        "java.time.chrono.MinguoDate.now(java.time.Clock)",
        "java.time.chrono.MinguoDate.now(java.time.ZoneId)"
    ],
    "java.awt.print.pageformat.setorientation": [
        "java.awt.print.PageFormat.setOrientation(int)"
    ],
    "javax.swing.text.html.option.getattributes": [
        "javax.swing.text.html.Option.getAttributes()"
    ],
    "java.net.cacherequest.abort": [
        "java.net.CacheRequest.abort()"
    ],
    "java.awt.geom.quadcurve2d.gety1": [
        "java.awt.geom.QuadCurve2D.getY1()"
    ],
    "java.time.chrono.isochronology.localdatetime": [
        "java.time.chrono.IsoChronology.localDateTime(java.time.temporal.TemporalAccessor)"
    ],
    "javax.swing.jdesktoppane.setui": [
        "javax.swing.JDesktopPane.setUI(javax.swing.plaf.DesktopPaneUI)"
    ],
    "javax.imageio.iioparam.setcontroller": [
        "javax.imageio.IIOParam.setController(javax.imageio.IIOParamController)"
    ],
    "javax.net.ssl.snihostname.getasciiname": [
        "javax.net.ssl.SNIHostName.getAsciiName()"
    ],
    "javax.activation.mimetypeparameterlist.parse": [
        "javax.activation.MimeTypeParameterList.parse(java.lang.String)"
    ],
    "java.util.locale.builder.addunicodelocaleattribute": [
        "java.util.Locale.Builder.addUnicodeLocaleAttribute(java.lang.String)"
    ],
    "java.lang.reflect.method.getmodifiers": [
        "java.lang.reflect.Method.getModifiers()"
    ],
    "javax.print.attribute.resolutionsyntax.equals": [
        "javax.print.attribute.ResolutionSyntax.equals(java.lang.Object)"
    ],
    "javax.swing.plaf.comboboxui.setpopupvisible": [
        "javax.swing.plaf.ComboBoxUI.setPopupVisible(javax.swing.JComboBox,boolean)"
    ],
    "java.awt.im.spi.inputmethodcontext.createinputmethodjframe": [
        "java.awt.im.spi.InputMethodContext.createInputMethodJFrame(java.lang.String,boolean)"
    ],
    "javax.swing.jtree.getcellrenderer": [
        "javax.swing.JTree.getCellRenderer()"
    ],
    "java.awt.checkboxmenuitem.paramstring": [
        "java.awt.CheckboxMenuItem.paramString()"
    ],
    "javax.swing.boxlayout.getlayoutalignmenty": [
        "javax.swing.BoxLayout.getLayoutAlignmentY(java.awt.Container)"
    ],
    "java.util.optionallong.orelsethrow": [
        "java.util.OptionalLong.orElseThrow(java.util.function.Supplier<X>)"
    ],
    "java.util.stream.doublestream.maptoobj": [
        "java.util.stream.DoubleStream.mapToObj(java.util.function.DoubleFunction<? extends U>)"
    ],
    "javax.swing.grouplayout.addlayoutcomponent": [
        "javax.swing.GroupLayout.addLayoutComponent(java.awt.Component,java.lang.Object)",
        "javax.swing.GroupLayout.addLayoutComponent(java.lang.String,java.awt.Component)"
    ],
    "javax.xml.stream.events.startelement.getnamespacecontext": [
        "javax.xml.stream.events.StartElement.getNamespaceContext()"
    ],
    "javax.swing.abstractlistmodel.fireintervalremoved": [
        "javax.swing.AbstractListModel.fireIntervalRemoved(java.lang.Object,int,int)"
    ],
    "java.awt.image.databufferfloat.setelemfloat": [
        "java.awt.image.DataBufferFloat.setElemFloat(int,int,float)"
    ],
    "org.omg.dynamicany._dynsequencestub.current_component": [
        "org.omg.DynamicAny._DynSequenceStub.current_component()"
    ],
    "javax.xml.ws.soap.addressingfeature.responses.valueof": [
        "javax.xml.ws.soap.AddressingFeature.Responses.valueOf(java.lang.String)"
    ],
    "java.awt.textcomponent.seteditable": [
        "java.awt.TextComponent.setEditable(boolean)"
    ],
    "java.io.filterreader.marksupported": [
        "java.io.FilterReader.markSupported()"
    ],
    "javax.management.remote.jmxconnectorfactory.connect": [
        "javax.management.remote.JMXConnectorFactory.connect(javax.management.remote.JMXServiceURL,,?>)",
        "javax.management.remote.JMXConnectorFactory.connect(javax.management.remote.JMXServiceURL)"
    ],
    "javax.xml.stream.events.endelement.getname": [
        "javax.xml.stream.events.EndElement.getName()"
    ],
    "java.beans.beancontext.beancontextservicessupport.revokeservice": [
        "java.beans.beancontext.BeanContextServicesSupport.revokeService(java.lang.Class,java.beans.beancontext.BeanContextServiceProvider,boolean)"
    ],
    "javax.imageio.spi.imageinputstreamspi.createinputstreaminstance": [
        "javax.imageio.spi.ImageInputStreamSpi.createInputStreamInstance(java.lang.Object,boolean,java.io.File)",
        "javax.imageio.spi.ImageInputStreamSpi.createInputStreamInstance(java.lang.Object)"
    ],
    "javax.imageio.imagereader.computeregions": [
        "javax.imageio.ImageReader.computeRegions(javax.imageio.ImageReadParam,int,int,java.awt.image.BufferedImage,java.awt.Rectangle,java.awt.Rectangle)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintscrollpanebackground": [
        "javax.swing.plaf.synth.SynthPainter.paintScrollPaneBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.jtree.setselectionpath": [
        "javax.swing.JTree.setSelectionPath(javax.swing.tree.TreePath)"
    ],
    "javax.script.compiledscript.getengine": [
        "javax.script.CompiledScript.getEngine()"
    ],
    "org.xml.sax.locator.getsystemid": [
        "org.xml.sax.Locator.getSystemId()"
    ],
    "javax.accessibility.accessiblecontext.getaccessiblechildrencount": [
        "javax.accessibility.AccessibleContext.getAccessibleChildrenCount()"
    ],
    "java.time.format.datetimeformatterbuilder.appendpattern": [
        "java.time.format.DateTimeFormatterBuilder.appendPattern(java.lang.String)"
    ],
    "java.awt.image.directcolormodel.getalphamask": [
        "java.awt.image.DirectColorModel.getAlphaMask()"
    ],
    "javax.swing.text.defaultformatter.valuetostring": [
        "javax.swing.text.DefaultFormatter.valueToString(java.lang.Object)"
    ],
    "org.omg.dynamicany._dynarraystub.insert_wchar": [
        "org.omg.DynamicAny._DynArrayStub.insert_wchar(char)"
    ],
    "java.util.prefs.preferences.removepreferencechangelistener": [
        "java.util.prefs.Preferences.removePreferenceChangeListener(java.util.prefs.PreferenceChangeListener)"
    ],
    "java.lang.class.getcomponenttype": [
        "java.lang.Class.getComponentType()"
    ],
    "javax.swing.jfilechooser.getselectedfiles": [
        "javax.swing.JFileChooser.getSelectedFiles()"
    ],
    "javax.swing.jtextarea.setlinewrap": [
        "javax.swing.JTextArea.setLineWrap(boolean)"
    ],
    "java.time.format.datetimeformatterbuilder.appendoffset": [
        "java.time.format.DateTimeFormatterBuilder.appendOffset(java.lang.String,java.lang.String)"
    ],
    "java.lang.invoke.methodtype.insertparametertypes": [
        "java.lang.invoke.MethodType.insertParameterTypes(int,java.lang.Class<?>...)",
        "java.lang.invoke.MethodType.insertParameterTypes(int,java.util.List<java.lang.Class<?>>)",
        "java.lang.invoke.MethodType.insertParameterTypes(int,java.lang.Class<?>)"
    ],
    "javax.swing.defaultdesktopmanager.getpreviousbounds": [
        "javax.swing.DefaultDesktopManager.getPreviousBounds(javax.swing.JInternalFrame)"
    ],
    "java.awt.label.paramstring": [
        "java.awt.Label.paramString()"
    ],
    "javax.lang.model.element.unknownannotationvalueexception.getunknownannotationvalue": [
        "javax.lang.model.element.UnknownAnnotationValueException.getUnknownAnnotationValue()"
    ],
    "javax.xml.soap.attachmentpart.removeallmimeheaders": [
        "javax.xml.soap.AttachmentPart.removeAllMimeHeaders()"
    ],
    "java.lang.management.memorypoolmxbean.isusagethresholdsupported": [
        "java.lang.management.MemoryPoolMXBean.isUsageThresholdSupported()"
    ],
    "javax.management.timer.timermbean.getnotificationmessage": [
        "javax.management.timer.TimerMBean.getNotificationMessage(java.lang.Integer)"
    ],
    "java.text.collationkey.tobytearray": [
        "java.text.CollationKey.toByteArray()"
    ],
    "javax.swing.jspinner.createeditor": [
        "javax.swing.JSpinner.createEditor(javax.swing.SpinnerModel)"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readnclob": [
        "javax.sql.rowset.serial.SQLInputImpl.readNClob()"
    ],
    "javax.crypto.spec.pbekeyspec.clearpassword": [
        "javax.crypto.spec.PBEKeySpec.clearPassword()"
    ],
    "java.util.prefs.abstractpreferences.put": [
        "java.util.prefs.AbstractPreferences.put(java.lang.String,java.lang.String)"
    ],
    "javax.swing.text.labelview.setbackground": [
        "javax.swing.text.LabelView.setBackground(java.awt.Color)"
    ],
    "javax.swing.icon.geticonwidth": [
        "javax.swing.Icon.getIconWidth()"
    ],
    "java.net.socket.isbound": [
        "java.net.Socket.isBound()"
    ],
    "java.util.concurrent.concurrentlinkeddeque.offerlast": [
        "java.util.concurrent.ConcurrentLinkedDeque.offerLast(java.util.concurrent.ConcurrentLinkedDeque)",
        "java.util.concurrent.ConcurrentLinkedDeque.offerLast(E)"
    ],
    "java.awt.geom.affinetransform.concatenate": [
        "java.awt.geom.AffineTransform.concatenate(java.awt.geom.AffineTransform)"
    ],
    "java.sql.array.getbasetype": [
        "java.sql.Array.getBaseType()"
    ],
    "javax.imageio.metadata.iiometadataformat.getattributedatatype": [
        "javax.imageio.metadata.IIOMetadataFormat.getAttributeDataType(java.lang.String,java.lang.String)"
    ],
    "java.security.cert.x509certselector.getsubjectasbytes": [
        "java.security.cert.X509CertSelector.getSubjectAsBytes()"
    ],
    "java.awt.layoutmanager2.addlayoutcomponent": [
        "java.awt.LayoutManager2.addLayoutComponent(java.awt.Component,java.lang.Object)"
    ],
    "java.awt.graphicsdevice.windowtranslucency.values": [
        "java.awt.GraphicsDevice.WindowTranslucency.values()"
    ],
    "javax.swing.jlist.setcellrenderer": [
        "javax.swing.JList.setCellRenderer(javax.swing.ListCellRenderer<? super javax.swing.JList>)"
    ],
    "org.omg.cosnaming._namingcontextstub.resolve": [
        "org.omg.CosNaming._NamingContextStub.resolve(org.omg.CosNaming.NameComponent[])"
    ],
    "javax.swing.grouplayout.getlayoutstyle": [
        "javax.swing.GroupLayout.getLayoutStyle()"
    ],
    "java.time.offsetdatetime.from": [
        "java.time.OffsetDateTime.from(java.time.temporal.TemporalAccessor)"
    ],
    "java.lang.object.finalize": [
        "java.lang.Object.finalize()"
    ],
    "java.awt.textcomponent.paramstring": [
        "java.awt.TextComponent.paramString()"
    ],
    "java.sql.databasemetadata.getsystemfunctions": [
        "java.sql.DatabaseMetaData.getSystemFunctions()"
    ],
    "org.omg.portableserver.portable.delegate.default_poa": [
        "org.omg.PortableServer.portable.Delegate.default_POA(org.omg.PortableServer.Servant)"
    ],
    "java.security.permission.newpermissioncollection": [
        "java.security.Permission.newPermissionCollection()"
    ],
    "java.util.map.hashcode": [
        "java.util.Map.hashCode()"
    ],
    "java.awt.filedialog.ismultiplemode": [
        "java.awt.FileDialog.isMultipleMode()"
    ],
    "java.util.abstractmap.simpleimmutableentry.getkey": [
        "java.util.AbstractMap.SimpleImmutableEntry.getKey()"
    ],
    "java.util.deque.peeklast": [
        "java.util.Deque.peekLast()"
    ],
    "java.time.duration.multipliedby": [
        "java.time.Duration.multipliedBy(long)"
    ],
    "javax.swing.jtree.getclosestpathforlocation": [
        "javax.swing.JTree.getClosestPathForLocation(int,int)"
    ],
    "java.util.logging.streamhandler.setoutputstream": [
        "java.util.logging.StreamHandler.setOutputStream(java.io.OutputStream)"
    ],
    "java.sql.parametermetadata.getscale": [
        "java.sql.ParameterMetaData.getScale(int)"
    ],
    "java.awt.geom.ellipse2d.float.getbounds2d": [
        "java.awt.geom.Ellipse2D.Float.getBounds2D()"
    ],
    "java.util.calendar.builder.setcalendartype": [
        "java.util.Calendar.Builder.setCalendarType(java.lang.String)"
    ],
    "javax.xml.ws.endpointcontext.getendpoints": [
        "javax.xml.ws.EndpointContext.getEndpoints()"
    ],
    "org.omg.corba.portable.objectimpl._get_delegate": [
        "org.omg.CORBA.portable.ObjectImpl._get_delegate()"
    ],
    "javax.swing.tree.treepath.getpath": [
        "javax.swing.tree.TreePath.getPath()"
    ],
    "javax.swing.plaf.synth.synthdesktoppaneui.getcontext": [
        "javax.swing.plaf.synth.SynthDesktopPaneUI.getContext(javax.swing.JComponent)"
    ],
    "java.awt.keyboardfocusmanager.setcurrentkeyboardfocusmanager": [
        "java.awt.KeyboardFocusManager.setCurrentKeyboardFocusManager(java.awt.KeyboardFocusManager)"
    ],
    "javax.management.monitor.stringmonitormbean.getderivedgauge": [
        "javax.management.monitor.StringMonitorMBean.getDerivedGauge(javax.management.ObjectName)"
    ],
    "javax.sound.midi.shortmessage.setmessage": [
        "javax.sound.midi.ShortMessage.setMessage(int,int,int)",
        "javax.sound.midi.ShortMessage.setMessage(int)",
        "javax.sound.midi.ShortMessage.setMessage(int,int,int,int)"
    ],
    "java.util.concurrent.timeunit.convert": [
        "java.util.concurrent.TimeUnit.convert(long,java.util.concurrent.TimeUnit)"
    ],
    "javax.swing.text.abstractwriter.getcurrentlinelength": [
        "javax.swing.text.AbstractWriter.getCurrentLineLength()"
    ],
    "java.awt.awteventmulticaster.inputmethodtextchanged": [
        "java.awt.AWTEventMulticaster.inputMethodTextChanged(java.awt.event.InputMethodEvent)"
    ],
    "java.awt.fontmetrics.getmaxadvance": [
        "java.awt.FontMetrics.getMaxAdvance()"
    ],
    "java.lang.management.bufferpoolmxbean.getname": [
        "java.lang.management.BufferPoolMXBean.getName()"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.installdefaults": [
        "javax.swing.plaf.basic.BasicComboBoxUI.installDefaults()"
    ],
    "java.awt.image.raster.createraster": [
        "java.awt.image.Raster.createRaster(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Point)"
    ],
    "java.lang.short.decode": [
        "java.lang.Short.decode(java.lang.String)"
    ],
    "javax.management.query.not": [
        "javax.management.Query.not(javax.management.QueryExp)"
    ],
    "javax.rmi.portableremoteobject.tostub": [
        "javax.rmi.PortableRemoteObject.toStub(java.rmi.Remote)"
    ],
    "javax.swing.jcomponent.getx": [
        "javax.swing.JComponent.getX()"
    ],
    "javax.swing.text.defaultformatter.getcommitsonvalidedit": [
        "javax.swing.text.DefaultFormatter.getCommitsOnValidEdit()"
    ],
    "java.lang.securitymanager.getclasscontext": [
        "java.lang.SecurityManager.getClassContext()"
    ],
    "javax.swing.text.asyncboxview.getchildallocation": [
        "javax.swing.text.AsyncBoxView.getChildAllocation(int,java.awt.Shape)"
    ],
    "javax.swing.jlist.getlayoutorientation": [
        "javax.swing.JList.getLayoutOrientation()"
    ],
    "java.awt.color.getcomponents": [
        "java.awt.Color.getComponents(float[])",
        "java.awt.Color.getComponents(java.awt.color.ColorSpace,float[])"
    ],
    "javax.swing.jprogressbar.firestatechanged": [
        "javax.swing.JProgressBar.fireStateChanged()"
    ],
    "java.security.cert.pkixparameters.settrustanchors": [
        "java.security.cert.PKIXParameters.setTrustAnchors(java.util.Set<java.security.cert.TrustAnchor>)"
    ],
    "java.awt.robot.getautodelay": [
        "java.awt.Robot.getAutoDelay()"
    ],
    "java.lang.thread.interrupt": [
        "java.lang.Thread.interrupt()"
    ],
    "javax.swing.text.view.getminimumspan": [
        "javax.swing.text.View.getMinimumSpan(int)"
    ],
    "java.nio.file.attribute.fileownerattributeview.getowner": [
        "java.nio.file.attribute.FileOwnerAttributeView.getOwner()"
    ],
    "javax.swing.jframe.getrootpane": [
        "javax.swing.JFrame.getRootPane()"
    ],
    "java.util.simpletimezone.getdstsavings": [
        "java.util.SimpleTimeZone.getDSTSavings()"
    ],
    "java.util.concurrent.phaser.awaitadvance": [
        "java.util.concurrent.Phaser.awaitAdvance(int)"
    ],
    "javax.swing.jfilechooser.getapprovebuttonmnemonic": [
        "javax.swing.JFileChooser.getApproveButtonMnemonic()"
    ],
    "javax.swing.sortingfocustraversalpolicy.getlastcomponent": [
        "javax.swing.SortingFocusTraversalPolicy.getLastComponent(java.awt.Container)"
    ],
    "java.util.queue.offer": [
        "java.util.Queue.offer(java.util.Queue)",
        "java.util.Queue.offer(E)"
    ],
    "java.sql.sqlinput.readboolean": [
        "java.sql.SQLInput.readBoolean()"
    ],
    "java.io.bufferedinputstream.close": [
        "java.io.BufferedInputStream.close()"
    ],
    "javax.activation.datahandler.getpreferredcommands": [
        "javax.activation.DataHandler.getPreferredCommands()"
    ],
    "javax.swing.listmodel.getsize": [
        "javax.swing.ListModel.getSize()"
    ],
    "java.awt.image.renderable.renderableimage.getheight": [
        "java.awt.image.renderable.RenderableImage.getHeight()"
    ],
    "javax.swing.jtable.setsurrendersfocusonkeystroke": [
        "javax.swing.JTable.setSurrendersFocusOnKeystroke(boolean)"
    ],
    "javax.swing.jeditorpane.createeditorkitforcontenttype": [
        "javax.swing.JEditorPane.createEditorKitForContentType(java.lang.String)"
    ],
    "java.awt.component.getlisteners": [
        "java.awt.Component.getListeners(java.lang.Class<T>)"
    ],
    "java.lang.strictmath.expm1": [
        "java.lang.StrictMath.expm1(double)"
    ],
    "java.util.stream.stream.toarray": [
        "java.util.stream.Stream.toArray()",
        "java.util.stream.Stream.toArray(java.util.function.IntFunction<A[]>)"
    ],
    "java.security.provider.getname": [
        "java.security.Provider.getName()"
    ],
    "java.security.cert.x509certselector.setpathtonames": [
        "java.security.cert.X509CertSelector.setPathToNames(java.util.Collection<java.util.List<?>>)"
    ],
    "javax.imageio.imagewriteparam.gettileheight": [
        "javax.imageio.ImageWriteParam.getTileHeight()"
    ],
    "javax.imageio.iioparam.getdestinationoffset": [
        "javax.imageio.IIOParam.getDestinationOffset()"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.clearselection": [
        "javax.swing.tree.DefaultTreeSelectionModel.clearSelection()"
    ],
    "org.omg.dynamicany._dynvaluestub.insert_wstring": [
        "org.omg.DynamicAny._DynValueStub.insert_wstring(java.lang.String)"
    ],
    "javax.swing.tree.abstractlayoutcache.invalidatesizes": [
        "javax.swing.tree.AbstractLayoutCache.invalidateSizes()"
    ],
    "java.awt.list.replaceitem": [
        "java.awt.List.replaceItem(java.lang.String,int)"
    ],
    "javax.tools.documentationtool.location.values": [
        "javax.tools.DocumentationTool.Location.values()"
    ],
    "javax.net.ssl.sslsocket.tostring": [
        "javax.net.ssl.SSLSocket.toString()"
    ],
    "org.omg.dynamicany.dynanyoperations.to_any": [
        "org.omg.DynamicAny.DynAnyOperations.to_any()"
    ],
    "java.lang.thread.getpriority": [
        "java.lang.Thread.getPriority()"
    ],
    "javax.sound.midi.midichannel.getchannelpressure": [
        "javax.sound.midi.MidiChannel.getChannelPressure()"
    ],
    "java.awt.dnd.dragsourcecontext.transferablesflavorschanged": [
        "java.awt.dnd.DragSourceContext.transferablesFlavorsChanged()"
    ],
    "java.time.temporal.chronofield.isdatebased": [
        "java.time.temporal.ChronoField.isDateBased()"
    ],
    "javax.swing.plaf.basic.basicscrollpaneui.getbaseline": [
        "javax.swing.plaf.basic.BasicScrollPaneUI.getBaseline(javax.swing.JComponent,int,int)"
    ],
    "javax.print.attribute.standard.jobprioritysupported.getname": [
        "javax.print.attribute.standard.JobPrioritySupported.getName()"
    ],
    "java.lang.threadgroup.list": [
        "java.lang.ThreadGroup.list()"
    ],
    "javax.swing.abstractbutton.settext": [
        "javax.swing.AbstractButton.setText(java.lang.String)"
    ],
    "java.lang.class.getenclosingmethod": [
        "java.lang.Class.getEnclosingMethod()"
    ],
    "java.io.sequenceinputstream.read": [
        "java.io.SequenceInputStream.read(byte[],int,int)",
        "java.io.SequenceInputStream.read()"
    ],
    "java.awt.paintcontext.getcolormodel": [
        "java.awt.PaintContext.getColorModel()"
    ],
    "java.util.timertask.run": [
        "java.util.TimerTask.run()"
    ],
    "javax.sound.sampled.audiosystem.getmixer": [
        "javax.sound.sampled.AudioSystem.getMixer(javax.sound.sampled.Mixer.Info)"
    ],
    "javax.swing.text.html.blockview.calculateminoraxisrequirements": [
        "javax.swing.text.html.BlockView.calculateMinorAxisRequirements(int,javax.swing.SizeRequirements)"
    ],
    "java.awt.image.renderable.renderableimageproducer.addconsumer": [
        "java.awt.image.renderable.RenderableImageProducer.addConsumer(java.awt.image.ImageConsumer)"
    ],
    "org.omg.corba.longholder._write": [
        "org.omg.CORBA.LongHolder._write(org.omg.CORBA.portable.OutputStream)"
    ],
    "java.net.urlconnection.getreadtimeout": [
        "java.net.URLConnection.getReadTimeout()"
    ],
    "org.omg.corba.serverrequest.ctx": [
        "org.omg.CORBA.ServerRequest.ctx()"
    ],
    "java.util.treeset.remove": [
        "java.util.TreeSet.remove(java.lang.Object)"
    ],
    "javax.swing.swingutilities.paintcomponent": [
        "javax.swing.SwingUtilities.paintComponent(java.awt.Graphics,java.awt.Component,java.awt.Container,java.awt.Rectangle)",
        "javax.swing.SwingUtilities.paintComponent(java.awt.Graphics,java.awt.Component,java.awt.Container,int,int,int,int)"
    ],
    "java.net.serversocket.setreuseaddress": [
        "java.net.ServerSocket.setReuseAddress(boolean)"
    ],
    "javax.xml.bind.annotation.domhandler.createunmarshaller": [
        "javax.xml.bind.annotation.DomHandler.createUnmarshaller(javax.xml.bind.ValidationEventHandler)"
    ],
    "javax.swing.jlist.getleadselectionindex": [
        "javax.swing.JList.getLeadSelectionIndex()"
    ],
    "java.util.concurrent.threadlocalrandom.ints": [
        "java.util.concurrent.ThreadLocalRandom.ints(long)",
        "java.util.concurrent.ThreadLocalRandom.ints()"
    ],
    "javax.swing.jinternalframe.setlayeredpane": [
        "javax.swing.JInternalFrame.setLayeredPane(javax.swing.JLayeredPane)"
    ],
    "javax.management.query.in": [
        "javax.management.Query.in(javax.management.ValueExp,javax.management.ValueExp[])"
    ],
    "java.io.objectinputstream.readunsignedbyte": [
        "java.io.ObjectInputStream.readUnsignedByte()"
    ],
    "javax.xml.ws.wsaddressing.w3cendpointreferencebuilder.servicename": [
        "javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.serviceName(javax.xml.namespace.QName)"
    ],
    "java.awt.image.databufferushort.getdata": [
        "java.awt.image.DataBufferUShort.getData(int)"
    ],
    "java.awt.image.renderedimage.getnumytiles": [
        "java.awt.image.RenderedImage.getNumYTiles()"
    ],
    "javax.management.mbeanserverconnection.getobjectinstance": [
        "javax.management.MBeanServerConnection.getObjectInstance(javax.management.ObjectName)"
    ],
    "java.util.concurrent.threadlocalrandom.nextlong": [
        "java.util.concurrent.ThreadLocalRandom.nextLong()"
    ],
    "javax.sound.midi.soundbank.getname": [
        "javax.sound.midi.Soundbank.getName()"
    ],
    "java.net.networkinterface.getname": [
        "java.net.NetworkInterface.getName()"
    ],
    "javax.xml.stream.xmleventfactory.createnamespace": [
        "javax.xml.stream.XMLEventFactory.createNamespace(java.lang.String,java.lang.String)",
        "javax.xml.stream.XMLEventFactory.createNamespace(java.lang.String)"
    ],
    "javax.swing.plaf.multi.multitextui.createui": [
        "javax.swing.plaf.multi.MultiTextUI.createUI(javax.swing.JComponent)"
    ],
    "java.rmi.activation.activationdesc.getclassname": [
        "java.rmi.activation.ActivationDesc.getClassName()"
    ],
    "java.nio.channels.asynchronoussocketchannel.shutdownoutput": [
        "java.nio.channels.AsynchronousSocketChannel.shutdownOutput()"
    ],
    "java.util.concurrent.atomic.atomicstampedreference.compareandset": [
        "java.util.concurrent.atomic.AtomicStampedReference.compareAndSet(V,V,int,int)",
        "java.util.concurrent.atomic.AtomicStampedReference.compareAndSet(java.util.concurrent.atomic.AtomicStampedReference,java.util.concurrent.atomic.AtomicStampedReference,int,int)"
    ],
    "java.util.stream.intstream.builder.add": [
        "java.util.stream.IntStream.Builder.add(int)"
    ],
    "java.awt.geom.path2d.setwindingrule": [
        "java.awt.geom.Path2D.setWindingRule(int)"
    ],
    "java.util.collection.removeif": [
        "java.util.Collection.removeIf(java.util.function.Predicate<? super E>)",
        "java.util.Collection.removeIf(java.util.function.Predicate<? super java.util.Collection>)"
    ],
    "java.security.signature.getalgorithm": [
        "java.security.Signature.getAlgorithm()"
    ],
    "java.util.arrays.deephashcode": [
        "java.util.Arrays.deepHashCode(java.lang.Object[])",
        "java.util.Arrays.deepHashCode(java.lang.Object)"
    ],
    "java.awt.font.textlayout.draw": [
        "java.awt.font.TextLayout.draw(java.awt.Graphics2D,float,float)"
    ],
    "javax.sql.rowset.serial.serialarray.getarray": [
        "javax.sql.rowset.serial.SerialArray.getArray(long,int,,java.lang.Class<?>>)",
        "javax.sql.rowset.serial.SerialArray.getArray(,java.lang.Class<?>>)",
        "javax.sql.rowset.serial.SerialArray.getArray(long,int)",
        "javax.sql.rowset.serial.SerialArray.getArray()"
    ],
    "java.net.inetaddress.getbyname": [
        "java.net.InetAddress.getByName(java.lang.String)"
    ],
    "javax.swing.text.styleconstants.getspaceabove": [
        "javax.swing.text.StyleConstants.getSpaceAbove(javax.swing.text.AttributeSet)"
    ],
    "javax.accessibility.accessiblerelationset.toarray": [
        "javax.accessibility.AccessibleRelationSet.toArray()"
    ],
    "javax.swing.jslider.setpaintlabels": [
        "javax.swing.JSlider.setPaintLabels(boolean)"
    ],
    "java.util.stream.longstream.sorted": [
        "java.util.stream.LongStream.sorted()"
    ],
    "javax.xml.crypto.dsig.keyinfo.keyinfofactory.geturidereferencer": [
        "javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getURIDereferencer()"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.getcolumnclassname": [
        "javax.sql.rowset.RowSetMetaDataImpl.getColumnClassName(int)"
    ],
    "javax.xml.bind.annotation.xmlaccesstype.valueof": [
        "javax.xml.bind.annotation.XmlAccessType.valueOf(java.lang.String)"
    ],
    "java.net.datagramsocket.getsotimeout": [
        "java.net.DatagramSocket.getSoTimeout()"
    ],
    "java.awt.image.raster.getdatabuffer": [
        "java.awt.image.Raster.getDataBuffer()"
    ],
    "java.lang.stringbuilder.trimtosize": [
        "java.lang.StringBuilder.trimToSize()"
    ],
    "javax.lang.model.type.typevariable.getupperbound": [
        "javax.lang.model.type.TypeVariable.getUpperBound()"
    ],
    "javax.swing.plaf.multi.multilistui.locationtoindex": [
        "javax.swing.plaf.multi.MultiListUI.locationToIndex(javax.swing.JList,java.awt.Point)"
    ],
    "java.lang.thread.start": [
        "java.lang.Thread.start()"
    ],
    "javax.swing.text.jtextcomponent.removekeymap": [
        "javax.swing.text.JTextComponent.removeKeymap(java.lang.String)"
    ],
    "java.util.concurrent.concurrentlinkeddeque.tostring": [
        "java.util.concurrent.ConcurrentLinkedDeque.toString()"
    ],
    "org.omg.dynamicany._dynsequencestub.component_count": [
        "org.omg.DynamicAny._DynSequenceStub.component_count()"
    ],
    "javax.swing.dropmode.valueof": [
        "javax.swing.DropMode.valueOf(java.lang.String)"
    ],
    "javax.swing.jcomponent.firepropertychange": [
        "javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)",
        "javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"
    ],
    "javax.swing.jtextarea.setwrapstyleword": [
        "javax.swing.JTextArea.setWrapStyleWord(boolean)"
    ],
    "javax.swing.actionmap.keys": [
        "javax.swing.ActionMap.keys()"
    ],
    "javax.swing.jmenuitem.processkeyevent": [
        "javax.swing.JMenuItem.processKeyEvent(java.awt.event.KeyEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)"
    ],
    "org.omg.dynamicany._dynfixedstub.type": [
        "org.omg.DynamicAny._DynFixedStub.type()"
    ],
    "java.security.principal.getname": [
        "java.security.Principal.getName()"
    ],
    "java.security.cert.certpathvalidatorresult.clone": [
        "java.security.cert.CertPathValidatorResult.clone()"
    ],
    "java.awt.geom.rectangle2d.double.getx": [
        "java.awt.geom.Rectangle2D.Double.getX()"
    ],
    "java.awt.graphicsenvironment.preferproportionalfonts": [
        "java.awt.GraphicsEnvironment.preferProportionalFonts()"
    ],
    "org.omg.portableinterceptor.requestinfooperations.sync_scope": [
        "org.omg.PortableInterceptor.RequestInfoOperations.sync_scope()"
    ],
    "javax.lang.model.util.types.getwildcardtype": [
        "javax.lang.model.util.Types.getWildcardType(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)"
    ],
    "java.awt.rectangle.getlocation": [
        "java.awt.Rectangle.getLocation()"
    ],
    "javax.swing.tree.defaulttreecellrenderer.setleaficon": [
        "javax.swing.tree.DefaultTreeCellRenderer.setLeafIcon(javax.swing.Icon)"
    ],
    "javax.sql.rowset.spi.syncprovider.supportsupdatableview": [
        "javax.sql.rowset.spi.SyncProvider.supportsUpdatableView()"
    ],
    "javax.swing.text.html.listview.getalignment": [
        "javax.swing.text.html.ListView.getAlignment(int)"
    ],
    "javax.swing.text.segment.charat": [
        "javax.swing.text.Segment.charAt(int)"
    ],
    "java.awt.menubar.gethelpmenu": [
        "java.awt.MenuBar.getHelpMenu()"
    ],
    "java.util.date.compareto": [
        "java.util.Date.compareTo(java.util.Date)"
    ],
    "java.awt.event.actionevent.getwhen": [
        "java.awt.event.ActionEvent.getWhen()"
    ],
    "javax.swing.jlist.setdropmode": [
        "javax.swing.JList.setDropMode(javax.swing.DropMode)"
    ],
    "java.lang.reflect.array.getbyte": [
        "java.lang.reflect.Array.getByte(java.lang.Object,int)"
    ],
    "java.net.urlconnection.setcontenthandlerfactory": [
        "java.net.URLConnection.setContentHandlerFactory(java.net.ContentHandlerFactory)"
    ],
    "javax.swing.plaf.basic.basictabbedpaneui.gettabbounds": [
        "javax.swing.plaf.basic.BasicTabbedPaneUI.getTabBounds(int,java.awt.Rectangle)",
        "javax.swing.plaf.basic.BasicTabbedPaneUI.getTabBounds(javax.swing.JTabbedPane,int)"
    ],
    "java.util.navigablemap.firstentry": [
        "java.util.NavigableMap.firstEntry()"
    ],
    "org.omg.corba.portable.outputstream.write_string": [
        "org.omg.CORBA.portable.OutputStream.write_string(java.lang.String)"
    ],
    "java.util.concurrent.linkedblockingqueue.iterator": [
        "java.util.concurrent.LinkedBlockingQueue.iterator()"
    ],
    "java.beans.beancontext.beancontextsupport.setdesigntime": [
        "java.beans.beancontext.BeanContextSupport.setDesignTime(boolean)"
    ],
    "javax.swing.jmenu.insertseparator": [
        "javax.swing.JMenu.insertSeparator(int)"
    ],
    "java.util.function.doubletolongfunction.applyaslong": [
        "java.util.function.DoubleToLongFunction.applyAsLong(double)"
    ],
    "java.net.socketimpl.close": [
        "java.net.SocketImpl.close()"
    ],
    "javax.sound.sampled.booleancontrol.getstatelabel": [
        "javax.sound.sampled.BooleanControl.getStateLabel(boolean)"
    ],
    "java.time.chrono.chronozoneddatetime.timelineorder": [
        "java.time.chrono.ChronoZonedDateTime.timeLineOrder()"
    ],
    "javax.management.remote.jmxconnectorservermbean.setmbeanserverforwarder": [
        "javax.management.remote.JMXConnectorServerMBean.setMBeanServerForwarder(javax.management.remote.MBeanServerForwarder)"
    ],
    "java.security.policy.implies": [
        "java.security.Policy.implies(java.security.ProtectionDomain,java.security.Permission)"
    ],
    "javax.management.relation.relationservice.getnotificationinfo": [
        "javax.management.relation.RelationService.getNotificationInfo()"
    ],
    "java.security.acl.group.addmember": [
        "java.security.acl.Group.addMember(java.security.Principal)"
    ],
    "java.util.arraydeque.size": [
        "java.util.ArrayDeque.size()"
    ],
    "javax.swing.plaf.basic.basictreeui.createcelleditorlistener": [
        "javax.swing.plaf.basic.BasicTreeUI.createCellEditorListener()"
    ],
    "javax.swing.jpasswordfield.updateui": [
        "javax.swing.JPasswordField.updateUI()"
    ],
    "javax.swing.text.stylededitorkit.getcharacterattributerun": [
        "javax.swing.text.StyledEditorKit.getCharacterAttributeRun()"
    ],
    "java.io.writer.write": [
        "java.io.Writer.write(int)",
        "java.io.Writer.write(char[])",
        "java.io.Writer.write(java.lang.String,int,int)",
        "java.io.Writer.write(char[],int,int)",
        "java.io.Writer.write(java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthradiobuttonui.paintborder": [
        "javax.swing.plaf.synth.SynthRadioButtonUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readbigdecimal": [
        "javax.sql.rowset.serial.SQLInputImpl.readBigDecimal()"
    ],
    "javax.sql.rowset.joinrowset.getjointype": [
        "javax.sql.rowset.JoinRowSet.getJoinType()"
    ],
    "javax.sql.rowset.serial.serialarray.getbasetypename": [
        "javax.sql.rowset.serial.SerialArray.getBaseTypeName()"
    ],
    "java.util.concurrent.forkjoinpool.shutdown": [
        "java.util.concurrent.ForkJoinPool.shutdown()"
    ],
    "java.awt.datatransfer.flavormap.getflavorsfornatives": [
        "java.awt.datatransfer.FlavorMap.getFlavorsForNatives(java.lang.String[])"
    ],
    "javax.swing.plaf.basic.basicsplitpanedivider.getinsets": [
        "javax.swing.plaf.basic.BasicSplitPaneDivider.getInsets()"
    ],
    "java.security.spec.ecpublickeyspec.getw": [
        "java.security.spec.ECPublicKeySpec.getW()"
    ],
    "java.nio.channels.filechannel.lock": [
        "java.nio.channels.FileChannel.lock(long,long,boolean)",
        "java.nio.channels.FileChannel.lock()"
    ],
    "javax.swing.jmenuitem.addmenukeylistener": [
        "javax.swing.JMenuItem.addMenuKeyListener(javax.swing.event.MenuKeyListener)"
    ],
    "java.time.format.datetimeformatterbuilder.parsecasesensitive": [
        "java.time.format.DateTimeFormatterBuilder.parseCaseSensitive()"
    ],
    "java.time.instant.plusseconds": [
        "java.time.Instant.plusSeconds(long)"
    ],
    "javax.sql.rowset.serial.serialblob.clone": [
        "javax.sql.rowset.serial.SerialBlob.clone()"
    ],
    "org.omg.dynamicany._dynsequencestub.get_string": [
        "org.omg.DynamicAny._DynSequenceStub.get_string()"
    ],
    "java.awt.keyboardfocusmanager.downfocuscycle": [
        "java.awt.KeyboardFocusManager.downFocusCycle()",
        "java.awt.KeyboardFocusManager.downFocusCycle(java.awt.Container)"
    ],
    "org.omg.dynamicany.dynanyoperations.get_string": [
        "org.omg.DynamicAny.DynAnyOperations.get_string()"
    ],
    "org.xml.sax.helpers.defaulthandler.skippedentity": [
        "org.xml.sax.helpers.DefaultHandler.skippedEntity(java.lang.String)"
    ],
    "java.lang.invoke.methodhandles.lookup": [
        "java.lang.invoke.MethodHandles.lookup()"
    ],
    "javax.imageio.imagereader.getminindex": [
        "javax.imageio.ImageReader.getMinIndex()"
    ],
    "java.nio.longbuffer.hasarray": [
        "java.nio.LongBuffer.hasArray()"
    ],
    "java.util.logging.filter.isloggable": [
        "java.util.logging.Filter.isLoggable(java.util.logging.LogRecord)"
    ],
    "java.util.calendar.getactualminimum": [
        "java.util.Calendar.getActualMinimum(int)"
    ],
    "javax.xml.soap.soapheaderelement.getrelay": [
        "javax.xml.soap.SOAPHeaderElement.getRelay()"
    ],
    "javax.net.ssl.sslparameters.setprotocols": [
        "javax.net.ssl.SSLParameters.setProtocols(java.lang.String)",
        "javax.net.ssl.SSLParameters.setProtocols(java.lang.String[])"
    ],
    "javax.swing.plaf.synth.synthpainter.paintscrollbarthumbborder": [
        "javax.swing.plaf.synth.SynthPainter.paintScrollBarThumbBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)"
    ],
    "javax.swing.plaf.multi.multitableheaderui.getminimumsize": [
        "javax.swing.plaf.multi.MultiTableHeaderUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "java.awt.component.dolayout": [
        "java.awt.Component.doLayout()"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.endprefixmapping": [
        "org.xml.sax.helpers.XMLFilterImpl.endPrefixMapping(java.lang.String)"
    ],
    "java.nio.channels.selectablechannel.configureblocking": [
        "java.nio.channels.SelectableChannel.configureBlocking(boolean)"
    ],
    "javax.swing.plaf.synth.synthcomboboxui.createui": [
        "javax.swing.plaf.synth.SynthComboBoxUI.createUI(javax.swing.JComponent)"
    ],
    "java.util.function.intconsumer.andthen": [
        "java.util.function.IntConsumer.andThen(java.util.function.IntConsumer)"
    ],
    "java.security.cert.certpathvalidator.getprovider": [
        "java.security.cert.CertPathValidator.getProvider()"
    ],
    "javax.swing.jrootpane.setjmenubar": [
        "javax.swing.JRootPane.setJMenuBar(javax.swing.JMenuBar)"
    ],
    "org.omg.dynamicany._dynenumstub.insert_dyn_any": [
        "org.omg.DynamicAny._DynEnumStub.insert_dyn_any(org.omg.DynamicAny.DynAny)"
    ],
    "javax.swing.text.defaultstyleddocument.removeupdate": [
        "javax.swing.text.DefaultStyledDocument.removeUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent)"
    ],
    "javax.management.timer.timer.addnotification": [
        "javax.management.timer.Timer.addNotification(java.lang.String,java.lang.String,java.lang.Object,java.util.Date,long,long)",
        "javax.management.timer.Timer.addNotification(java.lang.String,java.lang.String,java.lang.Object,java.util.Date,long,long,boolean)",
        "javax.management.timer.Timer.addNotification(java.lang.String,java.lang.String,java.lang.Object,java.util.Date)",
        "javax.management.timer.Timer.addNotification(java.lang.String,java.lang.String,java.lang.Object,java.util.Date,long)"
    ],
    "javax.swing.plaf.multi.multidesktoppaneui.getminimumsize": [
        "javax.swing.plaf.multi.MultiDesktopPaneUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "javax.swing.table.jtableheader.getdefaultrenderer": [
        "javax.swing.table.JTableHeader.getDefaultRenderer()"
    ],
    "javax.security.auth.subject.getpubliccredentials": [
        "javax.security.auth.Subject.getPublicCredentials()",
        "javax.security.auth.Subject.getPublicCredentials(java.lang.Class<T>)"
    ],
    "javax.xml.stream.xmlstreamreader.getnamespaceuri": [
        "javax.xml.stream.XMLStreamReader.getNamespaceURI(java.lang.String)",
        "javax.xml.stream.XMLStreamReader.getNamespaceURI(int)"
    ],
    "javax.sound.midi.sysexmessage.clone": [
        "javax.sound.midi.SysexMessage.clone()"
    ],
    "javax.swing.undo.undomanager.undo": [
        "javax.swing.undo.UndoManager.undo()"
    ],
    "java.sql.rowid.getbytes": [
        "java.sql.RowId.getBytes()"
    ],
    "java.util.logging.handler.setfilter": [
        "java.util.logging.Handler.setFilter(java.util.logging.Filter)"
    ],
    "java.util.logging.xmlformatter.gethead": [
        "java.util.logging.XMLFormatter.getHead(java.util.logging.Handler)"
    ],
    "java.awt.eventqueue.getmostrecenteventtime": [
        "java.awt.EventQueue.getMostRecentEventTime()"
    ],
    "java.nio.floatbuffer.wrap": [
        "java.nio.FloatBuffer.wrap(float[],int,int)",
        "java.nio.FloatBuffer.wrap(float[])"
    ],
    "java.util.vector.copyinto": [
        "java.util.Vector.copyInto(java.lang.Object)",
        "java.util.Vector.copyInto(java.lang.Object[])"
    ],
    "javax.swing.uimanager.getdimension": [
        "javax.swing.UIManager.getDimension(java.lang.Object,java.util.Locale)",
        "javax.swing.UIManager.getDimension(java.lang.Object)"
    ],
    "java.nio.channels.multicastchannel.join": [
        "java.nio.channels.MulticastChannel.join(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
        "java.nio.channels.MulticastChannel.join(java.net.InetAddress,java.net.NetworkInterface)"
    ],
    "java.time.chrono.thaibuddhistdate.getera": [
        "java.time.chrono.ThaiBuddhistDate.getEra()"
    ],
    "java.sql.databasemetadata.supportsstoredprocedures": [
        "java.sql.DatabaseMetaData.supportsStoredProcedures()"
    ],
    "javax.swing.jprogressbar.getuiclassid": [
        "javax.swing.JProgressBar.getUIClassID()"
    ],
    "javax.xml.ws.webservicecontext.isuserinrole": [
        "javax.xml.ws.WebServiceContext.isUserInRole(java.lang.String)"
    ],
    "javax.management.relation.relationsupport.isinrelationservice": [
        "javax.management.relation.RelationSupport.isInRelationService()"
    ],
    "java.util.zip.inflaterinputstream.available": [
        "java.util.zip.InflaterInputStream.available()"
    ],
    "javax.swing.jfilechooser.rescancurrentdirectory": [
        "javax.swing.JFileChooser.rescanCurrentDirectory()"
    ],
    "java.time.localtime.until": [
        "java.time.LocalTime.until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)"
    ],
    "javax.swing.japplet.repaint": [
        "javax.swing.JApplet.repaint(long,int,int,int,int)"
    ],
    "java.time.temporal.temporal.until": [
        "java.time.temporal.Temporal.until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)"
    ],
    "java.util.function.doublepredicate.and": [
        "java.util.function.DoublePredicate.and(java.util.function.DoublePredicate)"
    ],
    "javax.xml.bind.datatypeconverter.printfloat": [
        "javax.xml.bind.DatatypeConverter.printFloat(float)"
    ],
    "java.sql.resultset.getfetchdirection": [
        "java.sql.ResultSet.getFetchDirection()"
    ],
    "java.awt.image.colormodel.getcomponents": [
        "java.awt.image.ColorModel.getComponents(int,int[],int)",
        "java.awt.image.ColorModel.getComponents(java.lang.Object,int[],int)"
    ],
    "javax.swing.jcombobox.removeitem": [
        "javax.swing.JComboBox.removeItem(java.lang.Object)"
    ],
    "java.awt.label.setalignment": [
        "java.awt.Label.setAlignment(int)"
    ],
    "java.nio.file.spi.filesystemprovider.ishidden": [
        "java.nio.file.spi.FileSystemProvider.isHidden(java.nio.file.Path)"
    ],
    "javax.swing.plaf.metal.metalfilechooserui.getminimumsize": [
        "javax.swing.plaf.metal.MetalFileChooserUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "org.w3c.dom.domimplementationsource.getdomimplementation": [
        "org.w3c.dom.DOMImplementationSource.getDOMImplementation(java.lang.String)"
    ],
    "javax.xml.transform.transformer.clearparameters": [
        "javax.xml.transform.Transformer.clearParameters()"
    ],
    "java.awt.image.renderable.renderableimage.createdefaultrendering": [
        "java.awt.image.renderable.RenderableImage.createDefaultRendering()"
    ],
    "java.util.concurrent.concurrenthashmap.replaceall": [
        "java.util.concurrent.ConcurrentHashMap.replaceAll(java.util.function.BiFunction<? super,? super,? extends V>)"
    ],
    "javax.swing.text.stylededitorkit.createinputattributes": [
        "javax.swing.text.StyledEditorKit.createInputAttributes(javax.swing.text.Element,javax.swing.text.MutableAttributeSet)"
    ],
    "javax.management.remote.rmi.rmiserverimpl.tostub": [
        "javax.management.remote.rmi.RMIServerImpl.toStub()"
    ],
    "org.omg.corba.portable.objectimpl._invoke": [
        "org.omg.CORBA.portable.ObjectImpl._invoke(org.omg.CORBA.portable.OutputStream)"
    ],
    "javax.sql.rowset.isreadonly": [
        "javax.sql.RowSet.isReadOnly()"
    ],
    "javax.swing.table.tablemodel.removetablemodellistener": [
        "javax.swing.table.TableModel.removeTableModelListener(javax.swing.event.TableModelListener)"
    ],
    "javax.xml.crypto.dsig.xmlsignaturefactory.newsignaturemethod": [
        "javax.xml.crypto.dsig.XMLSignatureFactory.newSignatureMethod(java.lang.String,javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec)"
    ],
    "javax.swing.swingutilities.getaccessibleat": [
        "javax.swing.SwingUtilities.getAccessibleAt(java.awt.Component,java.awt.Point)"
    ],
    "java.awt.keyboardfocusmanager.focuspreviouscomponent": [
        "java.awt.KeyboardFocusManager.focusPreviousComponent(java.awt.Component)",
        "java.awt.KeyboardFocusManager.focusPreviousComponent()"
    ],
    "org.omg.corba.datainputstream.read_wchar_array": [
        "org.omg.CORBA.DataInputStream.read_wchar_array(org.omg.CORBA.WCharSeqHolder,int,int)"
    ],
    "java.nio.channels.filelock.position": [
        "java.nio.channels.FileLock.position()"
    ],
    "java.util.zip.zipentry.getcompressedsize": [
        "java.util.zip.ZipEntry.getCompressedSize()"
    ],
    "javax.sql.pooledconnection.getconnection": [
        "javax.sql.PooledConnection.getConnection()"
    ],
    "java.util.concurrent.threadpoolexecutor.getrejectedexecutionhandler": [
        "java.util.concurrent.ThreadPoolExecutor.getRejectedExecutionHandler()"
    ],
    "javax.swing.text.gapcontent.updateundopositions": [
        "javax.swing.text.GapContent.updateUndoPositions(java.util.Vector,int,int)"
    ],
    "org.w3c.dom.ls.lsinput.setbaseuri": [
        "org.w3c.dom.ls.LSInput.setBaseURI(java.lang.String)"
    ],
    "java.lang.securitymanager.checkpermission": [
        "java.lang.SecurityManager.checkPermission(java.security.Permission,java.lang.Object)",
        "java.lang.SecurityManager.checkPermission(java.security.Permission)"
    ],
    "java.awt.textarea.paramstring": [
        "java.awt.TextArea.paramString()"
    ],
    "java.awt.im.inputcontext.dispatchevent": [
        "java.awt.im.InputContext.dispatchEvent(java.awt.AWTEvent)"
    ],
    "java.time.duration.plusmillis": [
        "java.time.Duration.plusMillis(long)"
    ],
    "java.net.urlstreamhandler.hashcode": [
        "java.net.URLStreamHandler.hashCode(java.net.URL)"
    ],
    "javax.swing.text.html.htmldocument.setparagraphattributes": [
        "javax.swing.text.html.HTMLDocument.setParagraphAttributes(int,int,javax.swing.text.AttributeSet,boolean)"
    ],
    "java.awt.scrollpane.getvadjustable": [
        "java.awt.ScrollPane.getVAdjustable()"
    ],
    "javax.swing.plaf.synth.synthtabbedpaneui.update": [
        "javax.swing.plaf.synth.SynthTabbedPaneUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.accessibility.accessiblecomponent.getlocation": [
        "javax.accessibility.AccessibleComponent.getLocation()"
    ],
    "javax.swing.text.styleconstants.issuperscript": [
        "javax.swing.text.StyleConstants.isSuperscript(javax.swing.text.AttributeSet)"
    ],
    "org.ietf.jgss.channelbinding.hashcode": [
        "org.ietf.jgss.ChannelBinding.hashCode()"
    ],
    "javax.swing.swingworker.process": [
        "javax.swing.SwingWorker.process(java.util.List<javax.swing.SwingWorker>)"
    ],
    "javax.xml.crypto.dsig.xmlsignature.getobjects": [
        "javax.xml.crypto.dsig.XMLSignature.getObjects()"
    ],
    "java.util.concurrent.concurrenthashmap.hashcode": [
        "java.util.concurrent.ConcurrentHashMap.hashCode()"
    ],
    "java.awt.textarea.insert": [
        "java.awt.TextArea.insert(java.lang.String,int)"
    ],
    "java.awt.geom.rectangularshape.gety": [
        "java.awt.geom.RectangularShape.getY()"
    ],
    "java.awt.geom.cubiccurve2d.float.getctrly2": [
        "java.awt.geom.CubicCurve2D.Float.getCtrlY2()"
    ],
    "javax.rmi.corba.portableremoteobjectdelegate.exportobject": [
        "javax.rmi.CORBA.PortableRemoteObjectDelegate.exportObject(java.rmi.Remote)"
    ],
    "java.awt.font.textlayout.getcharactercount": [
        "java.awt.font.TextLayout.getCharacterCount()"
    ],
    "javax.management.attributechangenotificationfilter.disableattribute": [
        "javax.management.AttributeChangeNotificationFilter.disableAttribute(java.lang.String)"
    ],
    "java.awt.graphics2d.gettransform": [
        "java.awt.Graphics2D.getTransform()"
    ],
    "javax.swing.text.abstractdocument.setdocumentfilter": [
        "javax.swing.text.AbstractDocument.setDocumentFilter(javax.swing.text.DocumentFilter)"
    ],
    "javax.swing.plaf.synth.synthpainter.painttabbedpanetabareaborder": [
        "javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabAreaBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",
        "javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabAreaBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.text.paragraphview.getnextnorthsouthvisualpositionfrom": [
        "javax.swing.text.ParagraphView.getNextNorthSouthVisualPositionFrom(int,javax.swing.text.Position.Bias,java.awt.Shape,int,javax.swing.text.Position.Bias[])"
    ],
    "javax.swing.lookandfeel.uninitialize": [
        "javax.swing.LookAndFeel.uninitialize()"
    ],
    "javax.imageio.imagereader.getheight": [
        "javax.imageio.ImageReader.getHeight(int)"
    ],
    "javax.swing.jwindow.repaint": [
        "javax.swing.JWindow.repaint(long,int,int,int,int)"
    ],
    "javax.naming.ldap.rdn.compareto": [
        "javax.naming.ldap.Rdn.compareTo(java.lang.Object)"
    ],
    "javax.swing.text.abstractwriter.setcanwraplines": [
        "javax.swing.text.AbstractWriter.setCanWrapLines(boolean)"
    ],
    "java.util.stream.longstream.foreachordered": [
        "java.util.stream.LongStream.forEachOrdered(java.util.function.LongConsumer)"
    ],
    "javax.naming.name.add": [
        "javax.naming.Name.add(java.lang.String)",
        "javax.naming.Name.add(int,java.lang.String)"
    ],
    "javax.swing.plaf.basic.basiclookandfeel.createaudioaction": [
        "javax.swing.plaf.basic.BasicLookAndFeel.createAudioAction(java.lang.Object)"
    ],
    "org.w3c.dom.node.replacechild": [
        "org.w3c.dom.Node.replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)"
    ],
    "java.net.networkinterface.getinetaddresses": [
        "java.net.NetworkInterface.getInetAddresses()"
    ],
    "java.awt.button.getactionlisteners": [
        "java.awt.Button.getActionListeners()"
    ],
    "javax.print.attribute.standard.jobimpressionssupported.getcategory": [
        "javax.print.attribute.standard.JobImpressionsSupported.getCategory()"
    ],
    "javax.swing.jcomponent.settransferhandler": [
        "javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"
    ],
    "java.awt.rectangle.outcode": [
        "java.awt.Rectangle.outcode(double,double)"
    ],
    "javax.xml.xpath.xpathfactory.getfeature": [
        "javax.xml.xpath.XPathFactory.getFeature(java.lang.String)"
    ],
    "java.beans.beaninfo.geteventsetdescriptors": [
        "java.beans.BeanInfo.getEventSetDescriptors()"
    ],
    "javax.swing.table.jtableheader.columnatpoint": [
        "javax.swing.table.JTableHeader.columnAtPoint(java.awt.Point)"
    ],
    "javax.imageio.imagewriter.processthumbnailprogress": [
        "javax.imageio.ImageWriter.processThumbnailProgress(float)"
    ],
    "java.text.simpledateformat.formattocharacteriterator": [
        "java.text.SimpleDateFormat.formatToCharacterIterator(java.lang.Object)"
    ],
    "java.util.concurrent.concurrenthashmap.newkeyset": [
        "java.util.concurrent.ConcurrentHashMap.newKeySet()",
        "java.util.concurrent.ConcurrentHashMap.newKeySet(int)"
    ],
    "java.awt.splashscreen.setimageurl": [
        "java.awt.SplashScreen.setImageURL(java.net.URL)"
    ],
    "org.omg.cosnaming.bindingiteratoroperations.next_one": [
        "org.omg.CosNaming.BindingIteratorOperations.next_one(org.omg.CosNaming.BindingHolder)"
    ],
    "java.beans.beancontext.beancontextsupport.createbcschild": [
        "java.beans.beancontext.BeanContextSupport.createBCSChild(java.lang.Object,java.lang.Object)"
    ],
    "java.awt.geom.arc2d.double.getheight": [
        "java.awt.geom.Arc2D.Double.getHeight()"
    ],
    "java.awt.geom.flatteningpathiterator.currentsegment": [
        "java.awt.geom.FlatteningPathIterator.currentSegment(float[])",
        "java.awt.geom.FlatteningPathIterator.currentSegment(double[])"
    ],
    "javax.sound.sampled.audiosystem.getaudioinputstream": [
        "javax.sound.sampled.AudioSystem.getAudioInputStream(java.io.InputStream)",
        "javax.sound.sampled.AudioSystem.getAudioInputStream(java.io.File)",
        "javax.sound.sampled.AudioSystem.getAudioInputStream(java.net.URL)",
        "javax.sound.sampled.AudioSystem.getAudioInputStream(javax.sound.sampled.AudioFormat,javax.sound.sampled.AudioInputStream)",
        "javax.sound.sampled.AudioSystem.getAudioInputStream(javax.sound.sampled.AudioFormat.Encoding,javax.sound.sampled.AudioInputStream)"
    ],
    "java.util.hashmap.entryset": [
        "java.util.HashMap.entrySet()"
    ],
    "java.util.concurrent.threadlocalrandom.current": [
        "java.util.concurrent.ThreadLocalRandom.current()"
    ],
    "java.awt.graphicsenvironment.creategraphics": [
        "java.awt.GraphicsEnvironment.createGraphics(java.awt.image.BufferedImage)"
    ],
    "java.util.logging.loggingmxbean.getparentloggername": [
        "java.util.logging.LoggingMXBean.getParentLoggerName(java.lang.String)"
    ],
    "javax.swing.jmenu.getaccessiblecontext": [
        "javax.swing.JMenu.getAccessibleContext()"
    ],
    "java.util.concurrent.executors.newfixedthreadpool": [
        "java.util.concurrent.Executors.newFixedThreadPool(int)",
        "java.util.concurrent.Executors.newFixedThreadPool(int,java.util.concurrent.ThreadFactory)"
    ],
    "javax.swing.jtabbedpane.getselectedindex": [
        "javax.swing.JTabbedPane.getSelectedIndex()"
    ],
    "javax.management.modelmbean.modelmbeaninfo.setdescriptors": [
        "javax.management.modelmbean.ModelMBeanInfo.setDescriptors(javax.management.Descriptor[])"
    ],
    "java.awt.font.imagegraphicattribute.draw": [
        "java.awt.font.ImageGraphicAttribute.draw(java.awt.Graphics2D,float,float)"
    ],
    "java.awt.keyboardfocusmanager.removepropertychangelistener": [
        "java.awt.KeyboardFocusManager.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",
        "java.awt.KeyboardFocusManager.removePropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "java.beans.beancontext.beancontextevent.ispropagated": [
        "java.beans.beancontext.BeanContextEvent.isPropagated()"
    ],
    "java.util.concurrent.executors.unconfigurableexecutorservice": [
        "java.util.concurrent.Executors.unconfigurableExecutorService(java.util.concurrent.ExecutorService)"
    ],
    "javax.xml.ws.soap.soapbinding.getsoapfactory": [
        "javax.xml.ws.soap.SOAPBinding.getSOAPFactory()"
    ],
    "javax.swing.abstractbutton.setselected": [
        "javax.swing.AbstractButton.setSelected(boolean)"
    ],
    "javax.management.stringvalueexp.tostring": [
        "javax.management.StringValueExp.toString()"
    ],
    "javax.sql.statementeventlistener.statementclosed": [
        "javax.sql.StatementEventListener.statementClosed(javax.sql.StatementEvent)"
    ],
    "java.util.illegalformatconversionexception.getargumentclass": [
        "java.util.IllegalFormatConversionException.getArgumentClass()"
    ],
    "java.awt.font.getitalicangle": [
        "java.awt.Font.getItalicAngle()"
    ],
    "java.security.cert.x509certselector.addpathtoname": [
        "java.security.cert.X509CertSelector.addPathToName(int,byte[])",
        "java.security.cert.X509CertSelector.addPathToName(int,java.lang.String)"
    ],
    "java.awt.component.setname": [
        "java.awt.Component.setName(java.lang.String)"
    ],
    "java.util.logging.handler.setformatter": [
        "java.util.logging.Handler.setFormatter(java.util.logging.Formatter)"
    ],
    "javax.swing.tree.abstractlayoutcache.getnodedimensions": [
        "javax.swing.tree.AbstractLayoutCache.getNodeDimensions()"
    ],
    "java.nio.channels.seekablebytechannel.read": [
        "java.nio.channels.SeekableByteChannel.read(java.nio.ByteBuffer)"
    ],
    "javax.swing.plaf.synth.synthstyle.installdefaults": [
        "javax.swing.plaf.synth.SynthStyle.installDefaults(javax.swing.plaf.synth.SynthContext)"
    ],
    "java.awt.geom.arc2d.getpathiterator": [
        "java.awt.geom.Arc2D.getPathIterator(java.awt.geom.AffineTransform)"
    ],
    "javax.security.auth.x500.x500principal.getencoded": [
        "javax.security.auth.x500.X500Principal.getEncoded()"
    ],
    "org.omg.corba.portable.objectimpl.tostring": [
        "org.omg.CORBA.portable.ObjectImpl.toString()"
    ],
    "javax.print.attribute.standard.severity.getcategory": [
        "javax.print.attribute.standard.Severity.getCategory()"
    ],
    "java.time.offsetdatetime.minusweeks": [
        "java.time.OffsetDateTime.minusWeeks(long)"
    ],
    "javax.swing.text.stringcontent.createposition": [
        "javax.swing.text.StringContent.createPosition(int)"
    ],
    "javax.tools.javafilemanager.issamefile": [
        "javax.tools.JavaFileManager.isSameFile(javax.tools.FileObject,javax.tools.FileObject)"
    ],
    "javax.xml.soap.attachmentpart.getrawcontentbytes": [
        "javax.xml.soap.AttachmentPart.getRawContentBytes()"
    ],
    "java.lang.thread.run": [
        "java.lang.Thread.run()"
    ],
    "java.awt.geom.rectangularshape.clone": [
        "java.awt.geom.RectangularShape.clone()"
    ],
    "java.util.concurrent.completablefuture.thenacceptasync": [
        "java.util.concurrent.CompletableFuture.thenAcceptAsync(java.util.function.Consumer<? super T>)",
        "java.util.concurrent.CompletableFuture.thenAcceptAsync(java.util.function.Consumer<? super T>,java.util.concurrent.Executor)"
    ],
    "java.util.optionaldouble.orelse": [
        "java.util.OptionalDouble.orElse(double)"
    ],
    "java.lang.enum.getdeclaringclass": [
        "java.lang.Enum.getDeclaringClass()"
    ],
    "javax.security.cert.x509certificate.getinstance": [
        "javax.security.cert.X509Certificate.getInstance(byte[])",
        "javax.security.cert.X509Certificate.getInstance(java.io.InputStream)"
    ],
    "java.util.uuid.getleastsignificantbits": [
        "java.util.UUID.getLeastSignificantBits()"
    ],
    "java.util.logging.level.getlocalizedname": [
        "java.util.logging.Level.getLocalizedName()"
    ],
    "java.lang.runtime.maxmemory": [
        "java.lang.Runtime.maxMemory()"
    ],
    "javax.swing.componentinputmap.getcomponent": [
        "javax.swing.ComponentInputMap.getComponent()"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.setlastdraglocation": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.setLastDragLocation(int)"
    ],
    "javax.xml.parsers.documentbuilder.seterrorhandler": [
        "javax.xml.parsers.DocumentBuilder.setErrorHandler(org.xml.sax.ErrorHandler)"
    ],
    "javax.swing.jdesktoppane.setdesktopmanager": [
        "javax.swing.JDesktopPane.setDesktopManager(javax.swing.DesktopManager)"
    ],
    "javax.swing.text.iconview.viewtomodel": [
        "javax.swing.text.IconView.viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias[])"
    ],
    "java.awt.font.graphicattribute.getalignment": [
        "java.awt.font.GraphicAttribute.getAlignment()"
    ],
    "java.util.function.bifunction.apply": [
        "java.util.function.BiFunction.apply(T,U)",
        "java.util.function.BiFunction.apply(java.util.function.BiFunction,java.util.function.BiFunction)"
    ],
    "java.lang.string.tochararray": [
        "java.lang.String.toCharArray()"
    ],
    "javax.swing.text.html.htmleditorkit.getviewfactory": [
        "javax.swing.text.html.HTMLEditorKit.getViewFactory()"
    ],
    "java.security.cert.x509certificate.getsigalgname": [
        "java.security.cert.X509Certificate.getSigAlgName()"
    ],
    "java.awt.menuitem.setlabel": [
        "java.awt.MenuItem.setLabel(java.lang.String)"
    ],
    "java.util.spliterators.abstractdoublespliterator.characteristics": [
        "java.util.Spliterators.AbstractDoubleSpliterator.characteristics()"
    ],
    "java.awt.geom.rectangularshape.getminx": [
        "java.awt.geom.RectangularShape.getMinX()"
    ],
    "java.security.codesource.getcertificates": [
        "java.security.CodeSource.getCertificates()"
    ],
    "java.util.jar.jarentry.getcodesigners": [
        "java.util.jar.JarEntry.getCodeSigners()"
    ],
    "java.awt.geom.dimension2d.getheight": [
        "java.awt.geom.Dimension2D.getHeight()"
    ],
    "java.util.hashset.spliterator": [
        "java.util.HashSet.spliterator()"
    ],
    "java.util.concurrent.locks.stampedlock.asreadwritelock": [
        "java.util.concurrent.locks.StampedLock.asReadWriteLock()"
    ],
    "javax.management.relation.relationservicembean.getrelationtypename": [
        "javax.management.relation.RelationServiceMBean.getRelationTypeName(java.lang.String)"
    ],
    "javax.naming.nameclasspair.getname": [
        "javax.naming.NameClassPair.getName()"
    ],
    "org.omg.corba.serviceinformationholder._type": [
        "org.omg.CORBA.ServiceInformationHolder._type()"
    ],
    "java.security.cryptoprimitive.values": [
        "java.security.CryptoPrimitive.values()"
    ],
    "javax.security.auth.login.configuration.setconfiguration": [
        "javax.security.auth.login.Configuration.setConfiguration(javax.security.auth.login.Configuration)"
    ],
    "java.io.objectoutput.close": [
        "java.io.ObjectOutput.close()"
    ],
    "javax.swing.plaf.multi.multitoolbarui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiToolBarUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.multi.multitableui.uninstallui": [
        "javax.swing.plaf.multi.MultiTableUI.uninstallUI(javax.swing.JComponent)"
    ],
    "javax.swing.jdialog.setlayeredpane": [
        "javax.swing.JDialog.setLayeredPane(javax.swing.JLayeredPane)"
    ],
    "java.security.cert.x509crl.getsigalgoid": [
        "java.security.cert.X509CRL.getSigAlgOID()"
    ],
    "java.security.keystore.load": [
        "java.security.KeyStore.load(java.io.InputStream,char[])"
    ],
    "java.util.concurrent.executors.newsinglethreadscheduledexecutor": [
        "java.util.concurrent.Executors.newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory)",
        "java.util.concurrent.Executors.newSingleThreadScheduledExecutor()"
    ],
    "java.io.objectinputstream.readbyte": [
        "java.io.ObjectInputStream.readByte()"
    ],
    "java.time.localdatetime.of": [
        "java.time.LocalDateTime.of(int,int,int,int,int,int)",
        "java.time.LocalDateTime.of(int,java.time.Month,int,int,int)",
        "java.time.LocalDateTime.of(int,int,int,int,int)",
        "java.time.LocalDateTime.of(int,java.time.Month,int,int,int,int)",
        "java.time.LocalDateTime.of(int,java.time.Month,int,int,int,int,int)",
        "java.time.LocalDateTime.of(int,int,int,int,int,int,int)",
        "java.time.LocalDateTime.of(java.time.LocalDate,java.time.LocalTime)"
    ],
    "javax.swing.buttonmodel.removeactionlistener": [
        "javax.swing.ButtonModel.removeActionListener(java.awt.event.ActionListener)"
    ],
    "java.awt.print.printerjob.getprinterjob": [
        "java.awt.print.PrinterJob.getPrinterJob()"
    ],
    "java.nio.file.spi.filesystemprovider.readsymboliclink": [
        "java.nio.file.spi.FileSystemProvider.readSymbolicLink(java.nio.file.Path)"
    ],
    "org.omg.dynamicany._dynunionstub.get_dyn_any": [
        "org.omg.DynamicAny._DynUnionStub.get_dyn_any()"
    ],
    "java.net.url.getpath": [
        "java.net.URL.getPath()"
    ],
    "java.awt.component.firepropertychange": [
        "java.awt.Component.firePropertyChange(java.lang.String,boolean,boolean)",
        "java.awt.Component.firePropertyChange(java.lang.String,char,char)",
        "java.awt.Component.firePropertyChange(java.lang.String,float,float)",
        "java.awt.Component.firePropertyChange(java.lang.String,double,double)",
        "java.awt.Component.firePropertyChange(java.lang.String,byte,byte)",
        "java.awt.Component.firePropertyChange(java.lang.String,short,short)",
        "java.awt.Component.firePropertyChange(java.lang.String,long,long)",
        "java.awt.Component.firePropertyChange(java.lang.String,int,int)",
        "java.awt.Component.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)"
    ],
    "java.awt.component.getmaximumsize": [
        "java.awt.Component.getMaximumSize()"
    ],
    "java.time.temporal.temporaladjuster.adjustinto": [
        "java.time.temporal.TemporalAdjuster.adjustInto(java.time.temporal.Temporal)"
    ],
    "java.util.concurrent.atomic.atomicinteger.tostring": [
        "java.util.concurrent.atomic.AtomicInteger.toString()"
    ],
    "javax.swing.text.html.stylesheet.addattribute": [
        "javax.swing.text.html.StyleSheet.addAttribute(javax.swing.text.AttributeSet,java.lang.Object,java.lang.Object)"
    ],
    "org.omg.portableserver.poaoperations.servant_to_reference": [
        "org.omg.PortableServer.POAOperations.servant_to_reference(org.omg.PortableServer.Servant)"
    ],
    "java.time.duration.tonanos": [
        "java.time.Duration.toNanos()"
    ],
    "java.lang.invoke.methodhandles.lookup.findgetter": [
        "java.lang.invoke.MethodHandles.Lookup.findGetter(java.lang.Class<?>,java.lang.String,java.lang.Class<?>)"
    ],
    "javax.lang.model.util.types.getdeclaredtype": [
        "javax.lang.model.util.Types.getDeclaredType(javax.lang.model.element.TypeElement,javax.lang.model.type.TypeMirror...)",
        "javax.lang.model.util.Types.getDeclaredType(javax.lang.model.type.DeclaredType,javax.lang.model.element.TypeElement,javax.lang.model.type.TypeMirror...)"
    ],
    "javax.swing.defaultboundedrangemodel.getchangelisteners": [
        "javax.swing.DefaultBoundedRangeModel.getChangeListeners()"
    ],
    "org.omg.portableinterceptor.serverrequestinfooperations.server_id": [
        "org.omg.PortableInterceptor.ServerRequestInfoOperations.server_id()"
    ],
    "java.lang.long.min": [
        "java.lang.Long.min(long,long)"
    ],
    "javax.swing.rowfilter.comparisontype.values": [
        "javax.swing.RowFilter.ComparisonType.values()"
    ],
    "javax.net.ssl.sslsession.removevalue": [
        "javax.net.ssl.SSLSession.removeValue(java.lang.String)"
    ],
    "java.util.stringtokenizer.nextelement": [
        "java.util.StringTokenizer.nextElement()"
    ],
    "java.awt.font.equals": [
        "java.awt.Font.equals(java.lang.Object)"
    ],
    "java.time.chrono.chronoperiod.getunits": [
        "java.time.chrono.ChronoPeriod.getUnits()"
    ],
    "javax.management.mbeanserver.getmbeancount": [
        "javax.management.MBeanServer.getMBeanCount()"
    ],
    "java.security.cert.certpathvalidatorspi.enginegetrevocationchecker": [
        "java.security.cert.CertPathValidatorSpi.engineGetRevocationChecker()"
    ],
    "javax.xml.bind.unmarshaller.setproperty": [
        "javax.xml.bind.Unmarshaller.setProperty(java.lang.String,java.lang.Object)"
    ],
    "java.util.concurrent.atomic.atomiclongarray.weakcompareandset": [
        "java.util.concurrent.atomic.AtomicLongArray.weakCompareAndSet(int,long,long)"
    ],
    "java.lang.runtime.exit": [
        "java.lang.Runtime.exit(int)"
    ],
    "java.util.concurrent.threadpoolexecutor.getmaximumpoolsize": [
        "java.util.concurrent.ThreadPoolExecutor.getMaximumPoolSize()"
    ],
    "javax.management.openmbean.compositedata.getcompositetype": [
        "javax.management.openmbean.CompositeData.getCompositeType()"
    ],
    "javax.sql.rowset.spi.syncfactory.registerprovider": [
        "javax.sql.rowset.spi.SyncFactory.registerProvider(java.lang.String)"
    ],
    "java.util.logging.logrecord.getresourcebundle": [
        "java.util.logging.LogRecord.getResourceBundle()"
    ],
    "javax.management.attributelist.aslist": [
        "javax.management.AttributeList.asList()"
    ],
    "java.time.temporal.temporalquery.queryfrom": [
        "java.time.temporal.TemporalQuery.queryFrom(java.time.temporal.TemporalAccessor)"
    ],
    "javax.swing.defaultlistcellrenderer.revalidate": [
        "javax.swing.DefaultListCellRenderer.revalidate()"
    ],
    "javax.swing.boxlayout.preferredlayoutsize": [
        "javax.swing.BoxLayout.preferredLayoutSize(java.awt.Container)"
    ],
    "java.net.datagramsocketimpl.create": [
        "java.net.DatagramSocketImpl.create()"
    ],
    "javax.sound.sampled.audioformat.getframerate": [
        "javax.sound.sampled.AudioFormat.getFrameRate()"
    ],
    "java.util.stream.intstream.of": [
        "java.util.stream.IntStream.of(int...)",
        "java.util.stream.IntStream.of(int)"
    ],
    "javax.swing.jtable.setfillsviewportheight": [
        "javax.swing.JTable.setFillsViewportHeight(boolean)"
    ],
    "java.security.interfaces.rsamultiprimeprivatecrtkey.getprimeexponentp": [
        "java.security.interfaces.RSAMultiPrimePrivateCrtKey.getPrimeExponentP()"
    ],
    "java.security.provider.removeservice": [
        "java.security.Provider.removeService(java.security.Provider.Service)"
    ],
    "javax.sql.rowset.cachedrowset.createcopynoconstraints": [
        "javax.sql.rowset.CachedRowSet.createCopyNoConstraints()"
    ],
    "javax.swing.jrootpane.setdefaultbutton": [
        "javax.swing.JRootPane.setDefaultButton(javax.swing.JButton)"
    ],
    "javax.swing.plaf.synth.synthcontext.getcomponentstate": [
        "javax.swing.plaf.synth.SynthContext.getComponentState()"
    ],
    "org.omg.portableinterceptor.serverrequestinterceptoroperations.send_other": [
        "org.omg.PortableInterceptor.ServerRequestInterceptorOperations.send_other(org.omg.PortableInterceptor.ServerRequestInfo)"
    ],
    "javax.xml.ws.webservicecontext.getendpointreference": [
        "javax.xml.ws.WebServiceContext.getEndpointReference(org.w3c.dom.Element...)",
        "javax.xml.ws.WebServiceContext.getEndpointReference(java.lang.Class<T>,org.w3c.dom.Element...)"
    ],
    "javax.swing.transferhandler.transfersupport.isdrop": [
        "javax.swing.TransferHandler.TransferSupport.isDrop()"
    ],
    "java.util.concurrent.locks.abstractqueuedsynchronizer.acquire": [
        "java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int)"
    ],
    "javax.management.openmbean.arraytype.getelementopentype": [
        "javax.management.openmbean.ArrayType.getElementOpenType()"
    ],
    "javax.swing.jscrollbar.setmodel": [
        "javax.swing.JScrollBar.setModel(javax.swing.BoundedRangeModel)"
    ],
    "java.util.optionaldouble.empty": [
        "java.util.OptionalDouble.empty()"
    ],
    "org.omg.corba.portable.objectimpl._create_request": [
        "org.omg.CORBA.portable.ObjectImpl._create_request(org.omg.CORBA.Context,java.lang.String,org.omg.CORBA.NVList,org.omg.CORBA.NamedValue)",
        "org.omg.CORBA.portable.ObjectImpl._create_request(org.omg.CORBA.Context,java.lang.String,org.omg.CORBA.NVList,org.omg.CORBA.NamedValue,org.omg.CORBA.ExceptionList,org.omg.CORBA.ContextList)"
    ],
    "javax.accessibility.accessiblehyperlink.getaccessibleactioncount": [
        "javax.accessibility.AccessibleHyperlink.getAccessibleActionCount()"
    ],
    "java.beans.propertyeditormanager.geteditorsearchpath": [
        "java.beans.PropertyEditorManager.getEditorSearchPath()"
    ],
    "java.awt.datatransfer.transferable.isdataflavorsupported": [
        "java.awt.datatransfer.Transferable.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)"
    ],
    "javax.swing.componentinputmap.remove": [
        "javax.swing.ComponentInputMap.remove(javax.swing.KeyStroke)"
    ],
    "javax.imageio.plugins.jpeg.jpegimagewriteparam.unsetencodetables": [
        "javax.imageio.plugins.jpeg.JPEGImageWriteParam.unsetEncodeTables()"
    ],
    "java.awt.dnd.droptarget.droptargetautoscroller.actionperformed": [
        "java.awt.dnd.DropTarget.DropTargetAutoScroller.actionPerformed(java.awt.event.ActionEvent)"
    ],
    "javax.print.attribute.standard.datetimeatprocessing.getcategory": [
        "javax.print.attribute.standard.DateTimeAtProcessing.getCategory()"
    ],
    "javax.swing.plaf.synth.synthdesktoppaneui.installlisteners": [
        "javax.swing.plaf.synth.SynthDesktopPaneUI.installListeners()"
    ],
    "java.util.stream.collector.combiner": [
        "java.util.stream.Collector.combiner()"
    ],
    "javax.management.modelmbean.requiredmodelmbean.getclassloaderrepository": [
        "javax.management.modelmbean.RequiredModelMBean.getClassLoaderRepository()"
    ],
    "javax.naming.namingexception.setremainingname": [
        "javax.naming.NamingException.setRemainingName(javax.naming.Name)"
    ],
    "javax.script.scriptenginemanager.get": [
        "javax.script.ScriptEngineManager.get(java.lang.String)"
    ],
    "java.time.chrono.hijrahchronology.dateyearday": [
        "java.time.chrono.HijrahChronology.dateYearDay(java.time.chrono.Era,int,int)",
        "java.time.chrono.HijrahChronology.dateYearDay(int,int)"
    ],
    "java.security.cert.policynode.getchildren": [
        "java.security.cert.PolicyNode.getChildren()"
    ],
    "java.util.stream.longstream.concat": [
        "java.util.stream.LongStream.concat(java.util.stream.LongStream,java.util.stream.LongStream)"
    ],
    "org.omg.dynamicany._dynenumstub.get_as_ulong": [
        "org.omg.DynamicAny._DynEnumStub.get_as_ulong()"
    ],
    "javax.swing.text.html.paragraphview.isvisible": [
        "javax.swing.text.html.ParagraphView.isVisible()"
    ],
    "javax.swing.comboboxeditor.removeactionlistener": [
        "javax.swing.ComboBoxEditor.removeActionListener(java.awt.event.ActionListener)"
    ],
    "java.lang.class.getclasses": [
        "java.lang.Class.getClasses()"
    ],
    "javax.swing.desktopmanager.beginresizingframe": [
        "javax.swing.DesktopManager.beginResizingFrame(javax.swing.JComponent,int)"
    ],
    "javax.security.auth.subject.getprincipals": [
        "javax.security.auth.Subject.getPrincipals(java.lang.Class<T>)",
        "javax.security.auth.Subject.getPrincipals()"
    ],
    "java.util.abstractmap.size": [
        "java.util.AbstractMap.size()"
    ],
    "org.omg.corba.systemexception.tostring": [
        "org.omg.CORBA.SystemException.toString()"
    ],
    "javax.sql.rowset.cachedrowset.undoupdate": [
        "javax.sql.rowset.CachedRowSet.undoUpdate()"
    ],
    "java.lang.invoke.methodhandles.catchexception": [
        "java.lang.invoke.MethodHandles.catchException(java.lang.invoke.MethodHandle,java.lang.Class<? extends java.lang.Throwable>,java.lang.invoke.MethodHandle)"
    ],
    "javax.swing.rowsorter.sortkey.getcolumn": [
        "javax.swing.RowSorter.SortKey.getColumn()"
    ],
    "java.lang.package.getspecificationvendor": [
        "java.lang.Package.getSpecificationVendor()"
    ],
    "javax.swing.jframe.setrootpanecheckingenabled": [
        "javax.swing.JFrame.setRootPaneCheckingEnabled(boolean)"
    ],
    "java.awt.point.getlocation": [
        "java.awt.Point.getLocation()"
    ],
    "java.awt.image.bufferedimageop.getbounds2d": [
        "java.awt.image.BufferedImageOp.getBounds2D(java.awt.image.BufferedImage)"
    ],
    "java.nio.buffer.flip": [
        "java.nio.Buffer.flip()"
    ],
    "javax.swing.undo.undomanager.trimforlimit": [
        "javax.swing.undo.UndoManager.trimForLimit()"
    ],
    "javax.swing.plaf.multi.multitoolbarui.uninstallui": [
        "javax.swing.plaf.multi.MultiToolBarUI.uninstallUI(javax.swing.JComponent)"
    ],
    "java.awt.event.mouseevent.paramstring": [
        "java.awt.event.MouseEvent.paramString()"
    ],
    "javax.management.monitor.monitormbean.getobservedattribute": [
        "javax.management.monitor.MonitorMBean.getObservedAttribute()"
    ],
    "java.beans.indexedpropertydescriptor.getindexedwritemethod": [
        "java.beans.IndexedPropertyDescriptor.getIndexedWriteMethod()"
    ],
    "javax.swing.text.plainview.damagelinerange": [
        "javax.swing.text.PlainView.damageLineRange(int,int,java.awt.Shape,java.awt.Component)"
    ],
    "java.awt.graphics.filloval": [
        "java.awt.Graphics.fillOval(int,int,int,int)"
    ],
    "javax.security.auth.login.configuration.getparameters": [
        "javax.security.auth.login.Configuration.getParameters()"
    ],
    "java.lang.reflect.field.setlong": [
        "java.lang.reflect.Field.setLong(java.lang.Object,long)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintseparatorforeground": [
        "javax.swing.plaf.synth.SynthPainter.paintSeparatorForeground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)"
    ],
    "java.nio.charbuffer.charat": [
        "java.nio.CharBuffer.charAt(int)"
    ],
    "java.nio.charset.charsetdecoder.isautodetecting": [
        "java.nio.charset.CharsetDecoder.isAutoDetecting()"
    ],
    "javax.tools.fileobject.openwriter": [
        "javax.tools.FileObject.openWriter()"
    ],
    "javax.swing.jmenu.setpopupmenuvisible": [
        "javax.swing.JMenu.setPopupMenuVisible(boolean)"
    ],
    "java.sql.driver.connect": [
        "java.sql.Driver.connect(java.lang.String,java.util.Properties)"
    ],
    "javax.swing.jscrollbar.getaccessiblecontext": [
        "javax.swing.JScrollBar.getAccessibleContext()"
    ],
    "java.awt.awteventmulticaster.componentremoved": [
        "java.awt.AWTEventMulticaster.componentRemoved(java.awt.event.ContainerEvent)"
    ],
    "javax.xml.stream.util.streamreaderdelegate.setparent": [
        "javax.xml.stream.util.StreamReaderDelegate.setParent(javax.xml.stream.XMLStreamReader)"
    ],
    "java.sql.clientinfostatus.valueof": [
        "java.sql.ClientInfoStatus.valueOf(java.lang.String)"
    ],
    "java.time.localdatetime.minusnanos": [
        "java.time.LocalDateTime.minusNanos(long)"
    ],
    "java.util.zip.checkedoutputstream.write": [
        "java.util.zip.CheckedOutputStream.write(byte[],int,int)",
        "java.util.zip.CheckedOutputStream.write(int)"
    ],
    "javax.sound.sampled.reverbtype.getearlyreflectiondelay": [
        "javax.sound.sampled.ReverbType.getEarlyReflectionDelay()"
    ],
    "java.lang.math.pow": [
        "java.lang.Math.pow(double,double)"
    ],
    "java.awt.alphacomposite.getrule": [
        "java.awt.AlphaComposite.getRule()"
    ],
    "java.lang.classloader.getsystemresource": [
        "java.lang.ClassLoader.getSystemResource(java.lang.String)"
    ],
    "javax.rmi.corba.util.writeany": [
        "javax.rmi.CORBA.Util.writeAny(org.omg.CORBA.portable.OutputStream,java.lang.Object)"
    ],
    "org.omg.corba.portable.streamable._write": [
        "org.omg.CORBA.portable.Streamable._write(org.omg.CORBA.portable.OutputStream)"
    ],
    "java.util.concurrent.locks.stampedlock.tryconverttooptimisticread": [
        "java.util.concurrent.locks.StampedLock.tryConvertToOptimisticRead(long)"
    ],
    "javax.imageio.spi.serviceregistry.getserviceproviders": [
        "javax.imageio.spi.ServiceRegistry.getServiceProviders(java.lang.Class<T>,boolean)",
        "javax.imageio.spi.ServiceRegistry.getServiceProviders(java.lang.Class<T>,javax.imageio.spi.ServiceRegistry.Filter,boolean)"
    ],
    "java.awt.textcomponent.addtextlistener": [
        "java.awt.TextComponent.addTextListener(java.awt.event.TextListener)"
    ],
    "javax.management.modelmbean.requiredmodelmbean.setmodelmbeaninfo": [
        "javax.management.modelmbean.RequiredModelMBean.setModelMBeanInfo(javax.management.modelmbean.ModelMBeanInfo)"
    ],
    "javax.xml.bind.annotation.xmlaccessorder.valueof": [
        "javax.xml.bind.annotation.XmlAccessOrder.valueOf(java.lang.String)"
    ],
    "java.time.monthday.withdayofmonth": [
        "java.time.MonthDay.withDayOfMonth(int)"
    ],
    "javax.swing.text.defaultcaret.movecaret": [
        "javax.swing.text.DefaultCaret.moveCaret(java.awt.event.MouseEvent)"
    ],
    "java.awt.font.textlayout.getpixelbounds": [
        "java.awt.font.TextLayout.getPixelBounds(java.awt.font.FontRenderContext,float,float)"
    ],
    "javax.swing.jeditorpane.gethyperlinklisteners": [
        "javax.swing.JEditorPane.getHyperlinkListeners()"
    ],
    "java.util.concurrent.locks.reentrantlock.trylock": [
        "java.util.concurrent.locks.ReentrantLock.tryLock()",
        "java.util.concurrent.locks.ReentrantLock.tryLock(long,java.util.concurrent.TimeUnit)"
    ],
    "org.w3c.dom.ls.lsinput.getstringdata": [
        "org.w3c.dom.ls.LSInput.getStringData()"
    ],
    "java.awt.image.renderedimage.copydata": [
        "java.awt.image.RenderedImage.copyData(java.awt.image.WritableRaster)"
    ],
    "javax.swing.plaf.metal.metaltheme.getwindowtitleinactivebackground": [
        "javax.swing.plaf.metal.MetalTheme.getWindowTitleInactiveBackground()"
    ],
    "javax.swing.plaf.multi.multitreeui.getuis": [
        "javax.swing.plaf.multi.MultiTreeUI.getUIs()"
    ],
    "javax.swing.text.highlighter.highlight.getendoffset": [
        "javax.swing.text.Highlighter.Highlight.getEndOffset()"
    ],
    "org.ietf.jgss.gssname.getstringnametype": [
        "org.ietf.jgss.GSSName.getStringNameType()"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.geteon": [
        "javax.xml.datatype.XMLGregorianCalendar.getEon()"
    ],
    "java.util.concurrent.atomic.atomicintegerarray.length": [
        "java.util.concurrent.atomic.AtomicIntegerArray.length()"
    ],
    "java.time.localdatetime.minusmonths": [
        "java.time.LocalDateTime.minusMonths(long)"
    ],
    "java.util.scanner.ioexception": [
        "java.util.Scanner.ioException()"
    ],
    "java.util.prefs.preferences.getboolean": [
        "java.util.prefs.Preferences.getBoolean(java.lang.String,boolean)"
    ],
    "javax.swing.plaf.listui.locationtoindex": [
        "javax.swing.plaf.ListUI.locationToIndex(javax.swing.JList,java.awt.Point)"
    ],
    "javax.swing.undo.compoundedit.undo": [
        "javax.swing.undo.CompoundEdit.undo()"
    ],
    "java.time.chrono.chronolocaldate.compareto": [
        "java.time.chrono.ChronoLocalDate.compareTo(java.time.chrono.ChronoLocalDate)"
    ],
    "javax.print.attribute.standard.copiessupported.getname": [
        "javax.print.attribute.standard.CopiesSupported.getName()"
    ],
    "javax.swing.text.html.formview.actionperformed": [
        "javax.swing.text.html.FormView.actionPerformed(java.awt.event.ActionEvent)"
    ],
    "org.ietf.jgss.messageprop.getqop": [
        "org.ietf.jgss.MessageProp.getQOP()"
    ],
    "java.text.collationkey.getsourcestring": [
        "java.text.CollationKey.getSourceString()"
    ],
    "javax.swing.jspinner.setvalue": [
        "javax.swing.JSpinner.setValue(java.lang.Object)"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.getcontenthandler": [
        "org.xml.sax.helpers.XMLFilterImpl.getContentHandler()"
    ],
    "javax.swing.plaf.basic.basicsliderui.getlowestvaluelabel": [
        "javax.swing.plaf.basic.BasicSliderUI.getLowestValueLabel()"
    ],
    "javax.swing.plaf.basic.basicarrowbutton.painttriangle": [
        "javax.swing.plaf.basic.BasicArrowButton.paintTriangle(java.awt.Graphics,int,int,int,int,boolean)"
    ],
    "javax.sql.rowset.setnstring": [
        "javax.sql.RowSet.setNString(int,java.lang.String)",
        "javax.sql.RowSet.setNString(java.lang.String,java.lang.String)"
    ],
    "javax.print.docflavor.hashcode": [
        "javax.print.DocFlavor.hashCode()"
    ],
    "java.beans.eventsetdescriptor.getaddlistenermethod": [
        "java.beans.EventSetDescriptor.getAddListenerMethod()"
    ],
    "javax.security.auth.kerberos.kerberosticket.getsessionkeytype": [
        "javax.security.auth.kerberos.KerberosTicket.getSessionKeyType()"
    ],
    "java.util.arrays.parallelprefix": [
        "java.util.Arrays.parallelPrefix(double[],int,int,java.util.function.DoubleBinaryOperator)",
        "java.util.Arrays.parallelPrefix(T[],int,int,java.util.function.BinaryOperator<T>)",
        "java.util.Arrays.parallelPrefix(long[],int,int,java.util.function.LongBinaryOperator)",
        "java.util.Arrays.parallelPrefix(int[],int,int,java.util.function.IntBinaryOperator)"
    ],
    "javax.swing.text.defaulthighlighter.setdrawslayeredhighlights": [
        "javax.swing.text.DefaultHighlighter.setDrawsLayeredHighlights(boolean)"
    ],
    "javax.xml.stream.xmlstreamreader.standaloneset": [
        "javax.xml.stream.XMLStreamReader.standaloneSet()"
    ],
    "javax.swing.plaf.multi.multipopupmenuui.uninstallui": [
        "javax.swing.plaf.multi.MultiPopupMenuUI.uninstallUI(javax.swing.JComponent)"
    ],
    "org.omg.corba.context.parent": [
        "org.omg.CORBA.Context.parent()"
    ],
    "java.util.stringtokenizer.hasmoreelements": [
        "java.util.StringTokenizer.hasMoreElements()"
    ],
    "java.beans.xmlencoder.setowner": [
        "java.beans.XMLEncoder.setOwner(java.lang.Object)"
    ],
    "java.security.spec.pssparameterspec.gettrailerfield": [
        "java.security.spec.PSSParameterSpec.getTrailerField()"
    ],
    "javax.sql.rowset.baserowset.setnstring": [
        "javax.sql.rowset.BaseRowSet.setNString(int,java.lang.String)",
        "javax.sql.rowset.BaseRowSet.setNString(java.lang.String,java.lang.String)"
    ],
    "javax.xml.bind.datatypeconverterinterface.parsestring": [
        "javax.xml.bind.DatatypeConverterInterface.parseString(java.lang.String)"
    ],
    "javax.swing.renderer.getcomponent": [
        "javax.swing.Renderer.getComponent()"
    ],
    "javax.management.monitor.countermonitor.getnotify": [
        "javax.management.monitor.CounterMonitor.getNotify()"
    ],
    "javax.xml.crypto.dsig.keyinfo.keyinfofactory.newx509data": [
        "javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newX509Data(java.util.List)"
    ],
    "java.awt.event.itemevent.getitem": [
        "java.awt.event.ItemEvent.getItem()"
    ],
    "java.util.concurrent.atomic.atomicmarkablereference.compareandset": [
        "java.util.concurrent.atomic.AtomicMarkableReference.compareAndSet(java.util.concurrent.atomic.AtomicMarkableReference,java.util.concurrent.atomic.AtomicMarkableReference,boolean,boolean)",
        "java.util.concurrent.atomic.AtomicMarkableReference.compareAndSet(V,V,boolean,boolean)"
    ],
    "java.time.temporal.valuerange.of": [
        "java.time.temporal.ValueRange.of(long,long,long)",
        "java.time.temporal.ValueRange.of(long,long,long,long)",
        "java.time.temporal.ValueRange.of(long,long)"
    ],
    "org.omg.dynamicany.dynanyoperations.insert_ulonglong": [
        "org.omg.DynamicAny.DynAnyOperations.insert_ulonglong(long)"
    ],
    "java.util.concurrent.concurrentlinkedqueue.tostring": [
        "java.util.concurrent.ConcurrentLinkedQueue.toString()"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.wasnull": [
        "javax.sql.rowset.serial.SQLInputImpl.wasNull()"
    ],
    "java.util.logging.loggingmxbean.getloggernames": [
        "java.util.logging.LoggingMXBean.getLoggerNames()"
    ],
    "java.util.stream.intstream.summarystatistics": [
        "java.util.stream.IntStream.summaryStatistics()"
    ],
    "javax.security.auth.kerberos.delegationpermission.implies": [
        "javax.security.auth.kerberos.DelegationPermission.implies(java.security.Permission)"
    ],
    "java.awt.font.glyphvector.getfont": [
        "java.awt.font.GlyphVector.getFont()"
    ],
    "javax.swing.plaf.nimbus.abstractregionpainter.decodey": [
        "javax.swing.plaf.nimbus.AbstractRegionPainter.decodeY(float)"
    ],
    "javax.swing.plaf.synth.synthcheckboxui.createui": [
        "javax.swing.plaf.synth.SynthCheckBoxUI.createUI(javax.swing.JComponent)"
    ],
    "java.util.concurrent.semaphore.release": [
        "java.util.concurrent.Semaphore.release()",
        "java.util.concurrent.Semaphore.release(int)"
    ],
    "java.security.cert.x509certselector.setmatchallsubjectaltnames": [
        "java.security.cert.X509CertSelector.setMatchAllSubjectAltNames(boolean)"
    ],
    "javax.sound.midi.sequence.gettracks": [
        "javax.sound.midi.Sequence.getTracks()"
    ],
    "java.net.datagramsocket.getremotesocketaddress": [
        "java.net.DatagramSocket.getRemoteSocketAddress()"
    ],
    "java.util.concurrent.concurrentlinkedqueue.offer": [
        "java.util.concurrent.ConcurrentLinkedQueue.offer(E)",
        "java.util.concurrent.ConcurrentLinkedQueue.offer(java.util.concurrent.ConcurrentLinkedQueue)"
    ],
    "javax.print.attribute.standard.printermoreinfomanufacturer.getcategory": [
        "javax.print.attribute.standard.PrinterMoreInfoManufacturer.getCategory()"
    ],
    "java.awt.image.bufferedimage.tostring": [
        "java.awt.image.BufferedImage.toString()"
    ],
    "javax.naming.ldap.sortkey.getattributeid": [
        "javax.naming.ldap.SortKey.getAttributeID()"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readrowid": [
        "javax.sql.rowset.serial.SQLInputImpl.readRowId()"
    ],
    "java.io.dataoutputstream.writeboolean": [
        "java.io.DataOutputStream.writeBoolean(boolean)"
    ],
    "java.time.format.datetimeformatterbuilder.appendlocalizedoffset": [
        "java.time.format.DateTimeFormatterBuilder.appendLocalizedOffset(java.time.format.TextStyle)"
    ],
    "javax.imageio.stream.imageoutputstream.writefloats": [
        "javax.imageio.stream.ImageOutputStream.writeFloats(float[],int,int)"
    ],
    "java.io.objectinputstream.readfields": [
        "java.io.ObjectInputStream.readFields()"
    ],
    "java.security.keyfactory.getprovider": [
        "java.security.KeyFactory.getProvider()"
    ],
    "javax.swing.plaf.synth.synthstyle.getfontforstate": [
        "javax.swing.plaf.synth.SynthStyle.getFontForState(javax.swing.plaf.synth.SynthContext)"
    ],
    "java.util.vector.setsize": [
        "java.util.Vector.setSize(int)"
    ],
    "java.awt.image.databufferdouble.setelemdouble": [
        "java.awt.image.DataBufferDouble.setElemDouble(int,int,double)"
    ],
    "javax.print.attribute.textsyntax.tostring": [
        "javax.print.attribute.TextSyntax.toString()"
    ],
    "javax.sound.sampled.control.type.tostring": [
        "javax.sound.sampled.Control.Type.toString()"
    ],
    "javax.sql.rowset.serial.serialblob.truncate": [
        "javax.sql.rowset.serial.SerialBlob.truncate(long)"
    ],
    "javax.swing.jtabbedpane.settooltiptextat": [
        "javax.swing.JTabbedPane.setToolTipTextAt(int,java.lang.String)"
    ],
    "java.nio.channels.datagramchannel.write": [
        "java.nio.channels.DatagramChannel.write(java.nio.ByteBuffer,int,int)",
        "java.nio.channels.DatagramChannel.write(java.nio.ByteBuffer[],int,int)",
        "java.nio.channels.DatagramChannel.write(java.nio.ByteBuffer[])",
        "java.nio.channels.DatagramChannel.write(java.nio.ByteBuffer)"
    ],
    "javax.swing.tree.defaultmutabletreenode.getnextsibling": [
        "javax.swing.tree.DefaultMutableTreeNode.getNextSibling()"
    ],
    "javax.sound.sampled.audiofileformat.type.getextension": [
        "javax.sound.sampled.AudioFileFormat.Type.getExtension()"
    ],
    "javax.naming.linkexception.setlinkresolvedobj": [
        "javax.naming.LinkException.setLinkResolvedObj(java.lang.Object)"
    ],
    "javax.print.attribute.standard.orientationrequested.getstringtable": [
        "javax.print.attribute.standard.OrientationRequested.getStringTable()"
    ],
    "javax.xml.soap.attachmentpart.getcontent": [
        "javax.xml.soap.AttachmentPart.getContent()"
    ],
    "java.awt.cardlayout.previous": [
        "java.awt.CardLayout.previous(java.awt.Container)"
    ],
    "java.lang.math.sin": [
        "java.lang.Math.sin(double)"
    ],
    "javax.lang.model.element.element.getannotation": [
        "javax.lang.model.element.Element.getAnnotation(java.lang.Class<A>)"
    ],
    "java.lang.throwable.getsuppressed": [
        "java.lang.Throwable.getSuppressed()"
    ],
    "org.w3c.dom.bootstrap.domimplementationregistry.newinstance": [
        "org.w3c.dom.bootstrap.DOMImplementationRegistry.newInstance()"
    ],
    "java.text.stringcharacteriterator.current": [
        "java.text.StringCharacterIterator.current()"
    ],
    "java.nio.buffer.clear": [
        "java.nio.Buffer.clear()"
    ],
    "java.awt.cardlayout.minimumlayoutsize": [
        "java.awt.CardLayout.minimumLayoutSize(java.awt.Container)"
    ],
    "java.text.attributedcharacteriterator.getattributes": [
        "java.text.AttributedCharacterIterator.getAttributes()"
    ],
    "java.util.collections.fill": [
        "java.util.Collections.fill(java.util.List<? super T>,T)"
    ],
    "java.util.concurrent.forkjoinpool.getpoolsize": [
        "java.util.concurrent.ForkJoinPool.getPoolSize()"
    ],
    "javax.management.monitor.monitormbean.addobservedobject": [
        "javax.management.monitor.MonitorMBean.addObservedObject(javax.management.ObjectName)"
    ],
    "java.beans.propertyeditorsupport.paintvalue": [
        "java.beans.PropertyEditorSupport.paintValue(java.awt.Graphics,java.awt.Rectangle)"
    ],
    "java.awt.dnd.dragsource.getdragthreshold": [
        "java.awt.dnd.DragSource.getDragThreshold()"
    ],
    "java.awt.image.bufferedimage.getalpharaster": [
        "java.awt.image.BufferedImage.getAlphaRaster()"
    ],
    "javax.management.timer.timermbean.getnbnotifications": [
        "javax.management.timer.TimerMBean.getNbNotifications()"
    ],
    "java.util.concurrent.forkjoinpool.forkjoinworkerthreadfactory.newthread": [
        "java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory.newThread(java.util.concurrent.ForkJoinPool)"
    ],
    "java.util.gregoriancalendar.getweeksinweekyear": [
        "java.util.GregorianCalendar.getWeeksInWeekYear()"
    ],
    "org.omg.dynamicany._dynstructstub.get_char": [
        "org.omg.DynamicAny._DynStructStub.get_char()"
    ],
    "javax.swing.plaf.basic.basicprogressbarui.stopanimationtimer": [
        "javax.swing.plaf.basic.BasicProgressBarUI.stopAnimationTimer()"
    ],
    "java.lang.float.floatvalue": [
        "java.lang.Float.floatValue()"
    ],
    "java.awt.splashscreen.close": [
        "java.awt.SplashScreen.close()"
    ],
    "java.util.bitset.set": [
        "java.util.BitSet.set(int)",
        "java.util.BitSet.set(int,boolean)"
    ],
    "javax.xml.parsers.documentbuilderfactory.getfeature": [
        "javax.xml.parsers.DocumentBuilderFactory.getFeature(java.lang.String)"
    ],
    "javax.annotation.processing.processor.getsupportedsourceversion": [
        "javax.annotation.processing.Processor.getSupportedSourceVersion()"
    ],
    "javax.swing.table.tablecolumnmodel.movecolumn": [
        "javax.swing.table.TableColumnModel.moveColumn(int,int)"
    ],
    "javax.imageio.stream.fileimageinputstream.finalize": [
        "javax.imageio.stream.FileImageInputStream.finalize()"
    ],
    "javax.lang.model.element.typeelement.getqualifiedname": [
        "javax.lang.model.element.TypeElement.getQualifiedName()"
    ],
    "java.awt.container.getmaximumsize": [
        "java.awt.Container.getMaximumSize()"
    ],
    "javax.naming.namingexception.initcause": [
        "javax.naming.NamingException.initCause(java.lang.Throwable)"
    ],
    "java.util.concurrent.atomic.atomiclong.longvalue": [
        "java.util.concurrent.atomic.AtomicLong.longValue()"
    ],
    "javax.swing.event.tablemodelevent.gettype": [
        "javax.swing.event.TableModelEvent.getType()"
    ],
    "javax.swing.plaf.basic.basictextpaneui.createui": [
        "javax.swing.plaf.basic.BasicTextPaneUI.createUI(javax.swing.JComponent)"
    ],
    "java.util.stream.intstream.nonematch": [
        "java.util.stream.IntStream.noneMatch(java.util.function.IntPredicate)"
    ],
    "javax.swing.text.simpleattributeset.copyattributes": [
        "javax.swing.text.SimpleAttributeSet.copyAttributes()"
    ],
    "java.time.chrono.thaibuddhistdate.equals": [
        "java.time.chrono.ThaiBuddhistDate.equals(java.lang.Object)"
    ],
    "javax.swing.defaultrowsorter.setmodelwrapper": [
        "javax.swing.DefaultRowSorter.setModelWrapper(,javax.swing.DefaultRowSorter>)"
    ],
    "javax.swing.jrootpane.getwindowdecorationstyle": [
        "javax.swing.JRootPane.getWindowDecorationStyle()"
    ],
    "javax.naming.directory.searchcontrols.getcountlimit": [
        "javax.naming.directory.SearchControls.getCountLimit()"
    ],
    "org.w3c.dom.entity.getinputencoding": [
        "org.w3c.dom.Entity.getInputEncoding()"
    ],
    "javax.swing.abstractbutton.getaction": [
        "javax.swing.AbstractButton.getAction()"
    ],
    "javax.swing.text.html.parser.documentparser.handletext": [
        "javax.swing.text.html.parser.DocumentParser.handleText(char[])"
    ],
    "java.awt.component.processkeyevent": [
        "java.awt.Component.processKeyEvent(java.awt.event.KeyEvent)"
    ],
    "java.util.collections.unmodifiableset": [
        "java.util.Collections.unmodifiableSet(java.util.Set<? extends T>)"
    ],
    "java.awt.jobattributes.getmaxpage": [
        "java.awt.JobAttributes.getMaxPage()"
    ],
    "javax.swing.text.styleconstants.setfontfamily": [
        "javax.swing.text.StyleConstants.setFontFamily(javax.swing.text.MutableAttributeSet,java.lang.String)"
    ],
    "java.sql.array.getresultset": [
        "java.sql.Array.getResultSet()",
        "java.sql.Array.getResultSet(long,int,,java.lang.Class<?>>)",
        "java.sql.Array.getResultSet(,java.lang.Class<?>>)",
        "java.sql.Array.getResultSet(long,int)"
    ],
    "java.util.concurrent.atomic.atomicinteger.getandupdate": [
        "java.util.concurrent.atomic.AtomicInteger.getAndUpdate(java.util.function.IntUnaryOperator)"
    ],
    "javax.lang.model.util.simpleannotationvaluevisitor6.visitarray": [
        "javax.lang.model.util.SimpleAnnotationValueVisitor6.visitArray(java.util.List<? extends javax.lang.model.element.AnnotationValue>,javax.lang.model.util.SimpleAnnotationValueVisitor6)"
    ],
    "java.net.httpurlconnection.setchunkedstreamingmode": [
        "java.net.HttpURLConnection.setChunkedStreamingMode(int)"
    ],
    "java.awt.dnd.dragsourcecontext.getcomponent": [
        "java.awt.dnd.DragSourceContext.getComponent()"
    ],
    "java.lang.byte.tounsignedint": [
        "java.lang.Byte.toUnsignedInt(byte)"
    ],
    "java.util.concurrent.linkedtransferqueue.size": [
        "java.util.concurrent.LinkedTransferQueue.size()"
    ],
    "java.sql.databasemetadata.supportsmultipleresultsets": [
        "java.sql.DatabaseMetaData.supportsMultipleResultSets()"
    ],
    "javax.swing.jcomponent.getconditionforkeystroke": [
        "javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"
    ],
    "java.beans.statement.execute": [
        "java.beans.Statement.execute()"
    ],
    "java.lang.reflect.field.getmodifiers": [
        "java.lang.reflect.Field.getModifiers()"
    ],
    "java.util.jar.attributes.getvalue": [
        "java.util.jar.Attributes.getValue(java.lang.String)",
        "java.util.jar.Attributes.getValue(java.util.jar.Attributes.Name)"
    ],
    "javax.xml.validation.schema.newvalidatorhandler": [
        "javax.xml.validation.Schema.newValidatorHandler()"
    ],
    "java.util.sortedset.subset": [
        "java.util.SortedSet.subSet(java.util.SortedSet,java.util.SortedSet)",
        "java.util.SortedSet.subSet(E,E)"
    ],
    "javax.swing.tree.defaultmutabletreenode.getlevel": [
        "javax.swing.tree.DefaultMutableTreeNode.getLevel()"
    ],
    "java.awt.component.setenabled": [
        "java.awt.Component.setEnabled(boolean)"
    ],
    "java.time.clock.getzone": [
        "java.time.Clock.getZone()"
    ],
    "java.sql.jdbctype.valueof": [
        "java.sql.JDBCType.valueOf(int)",
        "java.sql.JDBCType.valueOf(java.lang.String)"
    ],
    "javax.xml.datatype.duration.gethours": [
        "javax.xml.datatype.Duration.getHours()"
    ],
    "java.io.randomaccessfile.writefloat": [
        "java.io.RandomAccessFile.writeFloat(float)"
    ],
    "javax.swing.plaf.metal.defaultmetaltheme.getcontroltextfont": [
        "javax.swing.plaf.metal.DefaultMetalTheme.getControlTextFont()"
    ],
    "org.omg.corba_2_3.portable.inputstream.read_abstract_interface": [
        "org.omg.CORBA_2_3.portable.InputStream.read_abstract_interface()",
        "org.omg.CORBA_2_3.portable.InputStream.read_abstract_interface(java.lang.Class)"
    ],
    "java.util.concurrent.scheduledexecutorservice.schedule": [
        "java.util.concurrent.ScheduledExecutorService.schedule(java.util.concurrent.Callable<V>,long,java.util.concurrent.TimeUnit)",
        "java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
    ],
    "javax.naming.name.get": [
        "javax.naming.Name.get(int)"
    ],
    "javax.print.attribute.standard.jobstatereason.getstringtable": [
        "javax.print.attribute.standard.JobStateReason.getStringTable()"
    ],
    "java.util.locale.getdisplayscript": [
        "java.util.Locale.getDisplayScript()",
        "java.util.Locale.getDisplayScript(java.util.Locale)"
    ],
    "javax.swing.plaf.basic.basictreeui.configurelayoutcache": [
        "javax.swing.plaf.basic.BasicTreeUI.configureLayoutCache()"
    ],
    "javax.swing.inputmap.remove": [
        "javax.swing.InputMap.remove(javax.swing.KeyStroke)"
    ],
    "java.awt.image.componentcolormodel.equals": [
        "java.awt.image.ComponentColorModel.equals(java.lang.Object)"
    ],
    "org.omg.dynamicany._dynarraystub.insert_ulonglong": [
        "org.omg.DynamicAny._DynArrayStub.insert_ulonglong(long)"
    ],
    "java.net.networkinterface.getindex": [
        "java.net.NetworkInterface.getIndex()"
    ],
    "javax.management.relation.rolelist.aslist": [
        "javax.management.relation.RoleList.asList()"
    ],
    "org.ietf.jgss.messageprop.setqop": [
        "org.ietf.jgss.MessageProp.setQOP(int)"
    ],
    "javax.sound.sampled.booleancontrol.tostring": [
        "javax.sound.sampled.BooleanControl.toString()"
    ],
    "javax.management.openmbean.compositetype.tostring": [
        "javax.management.openmbean.CompositeType.toString()"
    ],
    "java.awt.panel.getaccessiblecontext": [
        "java.awt.Panel.getAccessibleContext()"
    ],
    "java.time.zone.zoneoffsettransitionrule.createtransition": [
        "java.time.zone.ZoneOffsetTransitionRule.createTransition(int)"
    ],
    "javax.swing.joptionpane.getselectionvalues": [
        "javax.swing.JOptionPane.getSelectionValues()"
    ],
    "javax.swing.jtable.addcolumn": [
        "javax.swing.JTable.addColumn(javax.swing.table.TableColumn)"
    ],
    "java.awt.cardlayout.last": [
        "java.awt.CardLayout.last(java.awt.Container)"
    ],
    "javax.sound.midi.midichannel.noteon": [
        "javax.sound.midi.MidiChannel.noteOn(int,int)"
    ],
    "java.nio.channels.pipe.open": [
        "java.nio.channels.Pipe.open()"
    ],
    "javax.xml.stream.xmleventfactory.createstartdocument": [
        "javax.xml.stream.XMLEventFactory.createStartDocument()",
        "javax.xml.stream.XMLEventFactory.createStartDocument(java.lang.String)",
        "javax.xml.stream.XMLEventFactory.createStartDocument(java.lang.String,java.lang.String,boolean)",
        "javax.xml.stream.XMLEventFactory.createStartDocument(java.lang.String,java.lang.String)"
    ],
    "java.awt.graphics.drawimage": [
        "java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
        "java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)"
    ],
    "javax.swing.jlayer.getlayereventmask": [
        "javax.swing.JLayer.getLayerEventMask()"
    ],
    "javax.swing.springlayout.constraints.getwidth": [
        "javax.swing.SpringLayout.Constraints.getWidth()"
    ],
    "javax.swing.jslider.getextent": [
        "javax.swing.JSlider.getExtent()"
    ],
    "javax.swing.plaf.synth.synthscrollbarui.update": [
        "javax.swing.plaf.synth.SynthScrollBarUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.time.temporal.chronofield.range": [
        "java.time.temporal.ChronoField.range()"
    ],
    "javax.swing.jtoolbar.getui": [
        "javax.swing.JToolBar.getUI()"
    ],
    "org.omg.dynamicany._dynenumstub.set_as_string": [
        "org.omg.DynamicAny._DynEnumStub.set_as_string(java.lang.String)"
    ],
    "java.util.currency.tostring": [
        "java.util.Currency.toString()"
    ],
    "javax.xml.soap.soapbody.extractcontentasdocument": [
        "javax.xml.soap.SOAPBody.extractContentAsDocument()"
    ],
    "org.omg.dynamicany.dynunionoperations.set_to_no_active_member": [
        "org.omg.DynamicAny.DynUnionOperations.set_to_no_active_member()"
    ],
    "java.util.concurrent.locks.abstractqueuedsynchronizer.conditionobject.await": [
        "java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.await()"
    ],
    "java.awt.im.spi.inputmethodcontext.enableclientwindownotification": [
        "java.awt.im.spi.InputMethodContext.enableClientWindowNotification(java.awt.im.spi.InputMethod,boolean)"
    ],
    "javax.xml.crypto.dsig.keyinfo.retrievalmethod.gettransforms": [
        "javax.xml.crypto.dsig.keyinfo.RetrievalMethod.getTransforms()"
    ],
    "javax.net.ssl.sslsocket.setenabledciphersuites": [
        "javax.net.ssl.SSLSocket.setEnabledCipherSuites(java.lang.String)",
        "javax.net.ssl.SSLSocket.setEnabledCipherSuites(java.lang.String[])"
    ],
    "javax.swing.plaf.multi.multioptionpaneui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiOptionPaneUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "java.awt.geom.arc2d.makebounds": [
        "java.awt.geom.Arc2D.makeBounds(double,double,double,double)"
    ],
    "java.security.cert.x509crlentry.getrevocationdate": [
        "java.security.cert.X509CRLEntry.getRevocationDate()"
    ],
    "java.awt.im.spi.inputmethod.getlocale": [
        "java.awt.im.spi.InputMethod.getLocale()"
    ],
    "javax.management.modelmbean.modelmbeanattributeinfo.getdescriptor": [
        "javax.management.modelmbean.ModelMBeanAttributeInfo.getDescriptor()"
    ],
    "java.awt.dnd.draggestureevent.iterator": [
        "java.awt.dnd.DragGestureEvent.iterator()"
    ],
    "java.util.prefs.nodechangeevent.getchild": [
        "java.util.prefs.NodeChangeEvent.getChild()"
    ],
    "java.awt.geom.rectangle2d.double.gety": [
        "java.awt.geom.Rectangle2D.Double.getY()"
    ],
    "java.lang.reflect.method.tostring": [
        "java.lang.reflect.Method.toString()"
    ],
    "javax.swing.plaf.synth.synthsplitpaneui.update": [
        "javax.swing.plaf.synth.SynthSplitPaneUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.util.stream.intstream.findany": [
        "java.util.stream.IntStream.findAny()"
    ],
    "javax.swing.boxlayout.getaxis": [
        "javax.swing.BoxLayout.getAxis()"
    ],
    "java.awt.paint.createcontext": [
        "java.awt.Paint.createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)"
    ],
    "javax.tools.fileobject.getcharcontent": [
        "javax.tools.FileObject.getCharContent(boolean)"
    ],
    "java.lang.instrument.instrumentation.isnativemethodprefixsupported": [
        "java.lang.instrument.Instrumentation.isNativeMethodPrefixSupported()"
    ],
    "java.sql.drivermanager.registerdriver": [
        "java.sql.DriverManager.registerDriver(java.sql.Driver,java.sql.DriverAction)",
        "java.sql.DriverManager.registerDriver(java.sql.Driver)"
    ],
    "org.w3c.dom.ls.lsserializer.setfilter": [
        "org.w3c.dom.ls.LSSerializer.setFilter(org.w3c.dom.ls.LSSerializerFilter)"
    ],
    "org.omg.portableserver.portable.delegate.poa": [
        "org.omg.PortableServer.portable.Delegate.poa(org.omg.PortableServer.Servant)"
    ],
    "java.awt.image.renderedimage.getsources": [
        "java.awt.image.RenderedImage.getSources()"
    ],
    "java.lang.processbuilder.redirectinput": [
        "java.lang.ProcessBuilder.redirectInput(java.lang.ProcessBuilder.Redirect)",
        "java.lang.ProcessBuilder.redirectInput(java.io.File)",
        "java.lang.ProcessBuilder.redirectInput()"
    ],
    "javax.swing.abstractbutton.seticon": [
        "javax.swing.AbstractButton.setIcon(javax.swing.Icon)"
    ],
    "javax.swing.text.styleddocument.getforeground": [
        "javax.swing.text.StyledDocument.getForeground(javax.swing.text.AttributeSet)"
    ],
    "java.awt.image.bufferedimage.getsource": [
        "java.awt.image.BufferedImage.getSource()"
    ],
    "org.w3c.dom.document.createattribute": [
        "org.w3c.dom.Document.createAttribute(java.lang.String)"
    ],
    "javax.xml.soap.soapmessage.getcontentdescription": [
        "javax.xml.soap.SOAPMessage.getContentDescription()"
    ],
    "java.util.concurrent.blockingqueue.put": [
        "java.util.concurrent.BlockingQueue.put(java.util.concurrent.BlockingQueue)",
        "java.util.concurrent.BlockingQueue.put(E)"
    ],
    "java.awt.menu.add": [
        "java.awt.Menu.add(java.lang.String)",
        "java.awt.Menu.add(java.awt.MenuItem)"
    ],
    "javax.xml.parsers.documentbuilder.newdocument": [
        "javax.xml.parsers.DocumentBuilder.newDocument()"
    ],
    "java.lang.reflect.method.getannotation": [
        "java.lang.reflect.Method.getAnnotation(java.lang.Class<T>)"
    ],
    "java.util.stream.intstream.aslongstream": [
        "java.util.stream.IntStream.asLongStream()"
    ],
    "java.awt.geom.path2d.float.getpathiterator": [
        "java.awt.geom.Path2D.Float.getPathIterator(java.awt.geom.AffineTransform)"
    ],
    "javax.management.attributechangenotificationfilter.getenabledattributes": [
        "javax.management.AttributeChangeNotificationFilter.getEnabledAttributes()"
    ],
    "javax.sound.midi.synthesizer.getlatency": [
        "javax.sound.midi.Synthesizer.getLatency()"
    ],
    "javax.swing.mutablecomboboxmodel.removeelement": [
        "javax.swing.MutableComboBoxModel.removeElement(java.lang.Object)"
    ],
    "org.omg.corba.orb.string_to_object": [
        "org.omg.CORBA.ORB.string_to_object(java.lang.String)"
    ],
    "java.sql.statement.getresultsettype": [
        "java.sql.Statement.getResultSetType()"
    ],
    "javax.swing.text.html.parser.parser.starttag": [
        "javax.swing.text.html.parser.Parser.startTag(javax.swing.text.html.parser.TagElement)"
    ],
    "java.awt.dialog.modalexclusiontype.valueof": [
        "java.awt.Dialog.ModalExclusionType.valueOf(java.lang.String)"
    ],
    "java.io.file.isfile": [
        "java.io.File.isFile()"
    ],
    "javax.swing.plaf.synth.synthcomboboxui.createrenderer": [
        "javax.swing.plaf.synth.SynthComboBoxUI.createRenderer()"
    ],
    "java.text.numberformat.getroundingmode": [
        "java.text.NumberFormat.getRoundingMode()"
    ],
    "org.w3c.dom.element.setattributens": [
        "org.w3c.dom.Element.setAttributeNS(java.lang.String,java.lang.String,java.lang.String)"
    ],
    "javax.imageio.event.iioreadupdatelistener.imageupdate": [
        "javax.imageio.event.IIOReadUpdateListener.imageUpdate(javax.imageio.ImageReader,java.awt.image.BufferedImage,int,int,int,int,int,int,int[])"
    ],
    "java.util.treeset.higher": [
        "java.util.TreeSet.higher(E)"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.setsigned": [
        "javax.sql.rowset.RowSetMetaDataImpl.setSigned(int,boolean)"
    ],
    "java.util.concurrent.locks.stampedlock.unlockwrite": [
        "java.util.concurrent.locks.StampedLock.unlockWrite(long)"
    ],
    "org.omg.dynamicany._dynunionstub.insert_ulong": [
        "org.omg.DynamicAny._DynUnionStub.insert_ulong(int)"
    ],
    "java.time.offsettime.minushours": [
        "java.time.OffsetTime.minusHours(long)"
    ],
    "javax.swing.text.glyphview.issubscript": [
        "javax.swing.text.GlyphView.isSubscript()"
    ],
    "java.lang.stringbuilder.insert": [
        "java.lang.StringBuilder.insert(int,java.lang.String)",
        "java.lang.StringBuilder.insert(int,char[],int,int)",
        "java.lang.StringBuilder.insert(int,double)",
        "java.lang.StringBuilder.insert(int,char[])",
        "java.lang.StringBuilder.insert(int,boolean)",
        "java.lang.StringBuilder.insert(int,char)",
        "java.lang.StringBuilder.insert(int,java.lang.CharSequence,int,int)",
        "java.lang.StringBuilder.insert(int,java.lang.CharSequence)",
        "java.lang.StringBuilder.insert(int,java.lang.Object)",
        "java.lang.StringBuilder.insert(int,int)",
        "java.lang.StringBuilder.insert(int,float)",
        "java.lang.StringBuilder.insert(int,long)"
    ],
    "javax.sql.rowset.setncharacterstream": [
        "javax.sql.RowSet.setNCharacterStream(int,java.io.Reader,long)",
        "javax.sql.RowSet.setNCharacterStream(int,java.io.Reader)",
        "javax.sql.RowSet.setNCharacterStream(java.lang.String,java.io.Reader)",
        "javax.sql.RowSet.setNCharacterStream(java.lang.String,java.io.Reader,long)"
    ],
    "java.util.zip.inflateroutputstream.close": [
        "java.util.zip.InflaterOutputStream.close()"
    ],
    "org.omg.cosnaming.namingcontextoperations.resolve": [
        "org.omg.CosNaming.NamingContextOperations.resolve(org.omg.CosNaming.NameComponent[])"
    ],
    "java.awt.font.layoutglyphvector": [
        "java.awt.Font.layoutGlyphVector(java.awt.font.FontRenderContext,char[],int,int,int)"
    ],
    "java.security.messagedigest.reset": [
        "java.security.MessageDigest.reset()"
    ],
    "java.awt.image.imagefilter.setdimensions": [
        "java.awt.image.ImageFilter.setDimensions(int,int)"
    ],
    "org.omg.dynamicany._dynsequencestub.destroy": [
        "org.omg.DynamicAny._DynSequenceStub.destroy()"
    ],
    "javax.swing.plaf.basic.basictableui.installdefaults": [
        "javax.swing.plaf.basic.BasicTableUI.installDefaults()"
    ],
    "java.time.chrono.chronology.eras": [
        "java.time.chrono.Chronology.eras()"
    ],
    "java.util.concurrent.copyonwritearrayset.add": [
        "java.util.concurrent.CopyOnWriteArraySet.add(E)",
        "java.util.concurrent.CopyOnWriteArraySet.add(java.util.concurrent.CopyOnWriteArraySet)"
    ],
    "org.omg.dynamicany._dynfixedstub.insert_wstring": [
        "org.omg.DynamicAny._DynFixedStub.insert_wstring(java.lang.String)"
    ],
    "javax.imageio.stream.imageoutputstream.writeshorts": [
        "javax.imageio.stream.ImageOutputStream.writeShorts(short[],int,int)"
    ],
    "javax.naming.ldap.ldapname.tostring": [
        "javax.naming.ldap.LdapName.toString()"
    ],
    "org.omg.dynamicany._dynfixedstub.destroy": [
        "org.omg.DynamicAny._DynFixedStub.destroy()"
    ],
    "java.awt.defaultkeyboardfocusmanager.processkeyevent": [
        "java.awt.DefaultKeyboardFocusManager.processKeyEvent(java.awt.Component,java.awt.event.KeyEvent)"
    ],
    "javax.swing.event.popupmenulistener.popupmenuwillbecomevisible": [
        "javax.swing.event.PopupMenuListener.popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent)"
    ],
    "javax.script.simplebindings.put": [
        "javax.script.SimpleBindings.put(java.lang.String,java.lang.Object)"
    ],
    "org.ietf.jgss.gsscontext.getanonymitystate": [
        "org.ietf.jgss.GSSContext.getAnonymityState()"
    ],
    "javax.swing.swingutilities.calculateinnerarea": [
        "javax.swing.SwingUtilities.calculateInnerArea(javax.swing.JComponent,java.awt.Rectangle)"
    ],
    "java.util.stream.collectors.collectingandthen": [
        "java.util.stream.Collectors.collectingAndThen(,,R>,,RR>)"
    ],
    "java.awt.image.colormodel.getred": [
        "java.awt.image.ColorModel.getRed(int)",
        "java.awt.image.ColorModel.getRed(java.lang.Object)"
    ],
    "org.omg.corba.dataoutputstream.write_long_array": [
        "org.omg.CORBA.DataOutputStream.write_long_array(int[],int,int)"
    ],
    "javax.naming.directory.dircontext.getschemaclassdefinition": [
        "javax.naming.directory.DirContext.getSchemaClassDefinition(javax.naming.Name)",
        "javax.naming.directory.DirContext.getSchemaClassDefinition(java.lang.String)"
    ],
    "javax.swing.plaf.metal.metalcomboboxicon.painticon": [
        "javax.swing.plaf.metal.MetalComboBoxIcon.paintIcon(java.awt.Component,java.awt.Graphics,int,int)"
    ],
    "javax.management.monitor.countermonitor.getdifferencemode": [
        "javax.management.monitor.CounterMonitor.getDifferenceMode()"
    ],
    "java.text.characteriterator.previous": [
        "java.text.CharacterIterator.previous()"
    ],
    "javax.swing.plaf.multi.multioptionpaneui.paint": [
        "javax.swing.plaf.multi.MultiOptionPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.util.concurrent.atomic.atomiclong.decrementandget": [
        "java.util.concurrent.atomic.AtomicLong.decrementAndGet()"
    ],
    "javax.xml.stream.events.entitydeclaration.getpublicid": [
        "javax.xml.stream.events.EntityDeclaration.getPublicId()"
    ],
    "java.lang.double.min": [
        "java.lang.Double.min(double,double)"
    ],
    "javax.swing.text.html.htmleditorkit.getstylesheet": [
        "javax.swing.text.html.HTMLEditorKit.getStyleSheet()"
    ],
    "java.util.concurrent.concurrenthashmap.entryset": [
        "java.util.concurrent.ConcurrentHashMap.entrySet()"
    ],
    "java.awt.window.gettype": [
        "java.awt.Window.getType()"
    ],
    "java.net.urlconnection.getoutputstream": [
        "java.net.URLConnection.getOutputStream()"
    ],
    "javax.swing.text.defaultcaret.setupdatepolicy": [
        "javax.swing.text.DefaultCaret.setUpdatePolicy(int)"
    ],
    "java.lang.process.destroyforcibly": [
        "java.lang.Process.destroyForcibly()"
    ],
    "javax.swing.defaultboundedrangemodel.getvalue": [
        "javax.swing.DefaultBoundedRangeModel.getValue()"
    ],
    "java.lang.reflect.accessibleobject.setaccessible": [
        "java.lang.reflect.AccessibleObject.setAccessible(boolean)"
    ],
    "java.lang.long.longvalue": [
        "java.lang.Long.longValue()"
    ],
    "javax.swing.text.element.getstartoffset": [
        "javax.swing.text.Element.getStartOffset()"
    ],
    "javax.tools.documentationtool.location.valueof": [
        "javax.tools.DocumentationTool.Location.valueOf(java.lang.String)"
    ],
    "javax.swing.plaf.basic.basictreeui.seteditable": [
        "javax.swing.plaf.basic.BasicTreeUI.setEditable(boolean)"
    ],
    "java.awt.image.renderable.renderableimage.getwidth": [
        "java.awt.image.renderable.RenderableImage.getWidth()"
    ],
    "javax.swing.filechooser.filesystemview.createfilesystemroot": [
        "javax.swing.filechooser.FileSystemView.createFileSystemRoot(java.io.File)"
    ],
    "javax.lang.model.util.elementfilter.constructorsin": [
        "javax.lang.model.util.ElementFilter.constructorsIn(java.lang.Iterable<? extends javax.lang.model.element.Element>)",
        "javax.lang.model.util.ElementFilter.constructorsIn(java.util.Set<? extends javax.lang.model.element.Element>)"
    ],
    "javax.swing.text.abstractdocument.createleafelement": [
        "javax.swing.text.AbstractDocument.createLeafElement(javax.swing.text.Element,javax.swing.text.AttributeSet,int,int)"
    ],
    "java.sql.databasemetadata.supportsaltertablewithaddcolumn": [
        "java.sql.DatabaseMetaData.supportsAlterTableWithAddColumn()"
    ],
    "javax.imageio.metadata.iiometadata.getstandarddimensionnode": [
        "javax.imageio.metadata.IIOMetadata.getStandardDimensionNode()"
    ],
    "java.time.format.datetimeformatterbuilder.appendzonetext": [
        "java.time.format.DateTimeFormatterBuilder.appendZoneText(java.time.format.TextStyle)",
        "java.time.format.DateTimeFormatterBuilder.appendZoneText(java.time.format.TextStyle,java.util.Set<java.time.ZoneId>)"
    ],
    "java.awt.focustraversalpolicy.getinitialcomponent": [
        "java.awt.FocusTraversalPolicy.getInitialComponent(java.awt.Window)"
    ],
    "javax.transaction.xa.xaresource.start": [
        "javax.transaction.xa.XAResource.start(javax.transaction.xa.Xid,int)"
    ],
    "javax.imageio.metadata.iiometadatanode.gettextcontent": [
        "javax.imageio.metadata.IIOMetadataNode.getTextContent()"
    ],
    "javax.swing.defaultlistmodel.elementat": [
        "javax.swing.DefaultListModel.elementAt(int)"
    ],
    "javax.swing.jcombobox.getrenderer": [
        "javax.swing.JComboBox.getRenderer()"
    ],
    "javax.swing.jwindow.setcontentpane": [
        "javax.swing.JWindow.setContentPane(java.awt.Container)"
    ],
    "org.omg.portableinterceptor.serverrequestinfooperations.set_slot": [
        "org.omg.PortableInterceptor.ServerRequestInfoOperations.set_slot(int,org.omg.CORBA.Any)"
    ],
    "javax.script.scriptexception.getcolumnnumber": [
        "javax.script.ScriptException.getColumnNumber()"
    ],
    "java.util.identityhashmap.foreach": [
        "java.util.IdentityHashMap.forEach(java.util.function.BiConsumer<? super,? super V>)"
    ],
    "java.util.abstractmap.simpleimmutableentry.getvalue": [
        "java.util.AbstractMap.SimpleImmutableEntry.getValue()"
    ],
    "javax.swing.tree.defaulttreecellrenderer.gettextselectioncolor": [
        "javax.swing.tree.DefaultTreeCellRenderer.getTextSelectionColor()"
    ],
    "java.security.cert.certpathvalidatorexception.getindex": [
        "java.security.cert.CertPathValidatorException.getIndex()"
    ],
    "javax.xml.datatype.datatypeconstants.field.tostring": [
        "javax.xml.datatype.DatatypeConstants.Field.toString()"
    ],
    "java.lang.processbuilder.redirect.type": [
        "java.lang.ProcessBuilder.Redirect.type()"
    ],
    "javax.swing.table.jtableheader.createdefaultrenderer": [
        "javax.swing.table.JTableHeader.createDefaultRenderer()"
    ],
    "javax.swing.text.simpleattributeset.addattribute": [
        "javax.swing.text.SimpleAttributeSet.addAttribute(java.lang.Object,java.lang.Object)"
    ],
    "javax.xml.parsers.saxparser.reset": [
        "javax.xml.parsers.SAXParser.reset()"
    ],
    "java.util.concurrent.threadpoolexecutor.gettaskcount": [
        "java.util.concurrent.ThreadPoolExecutor.getTaskCount()"
    ],
    "javax.swing.debuggraphics.setflashcolor": [
        "javax.swing.DebugGraphics.setFlashColor(java.awt.Color)"
    ],
    "java.util.prefs.abstractpreferences.getbytearray": [
        "java.util.prefs.AbstractPreferences.getByteArray(java.lang.String,byte[])"
    ],
    "javax.swing.text.internationalformatter.valuetostring": [
        "javax.swing.text.InternationalFormatter.valueToString(java.lang.Object)"
    ],
    "java.sql.statement.getfetchdirection": [
        "java.sql.Statement.getFetchDirection()"
    ],
    "java.awt.image.colormodel.getrgbdefault": [
        "java.awt.image.ColorModel.getRGBdefault()"
    ],
    "org.omg.corba.irobjectoperations.destroy": [
        "org.omg.CORBA.IRObjectOperations.destroy()"
    ],
    "javax.swing.colorchooser.colorselectionmodel.setselectedcolor": [
        "javax.swing.colorchooser.ColorSelectionModel.setSelectedColor(java.awt.Color)"
    ],
    "javax.xml.crypto.dsig.keyinfo.x509issuerserial.getserialnumber": [
        "javax.xml.crypto.dsig.keyinfo.X509IssuerSerial.getSerialNumber()"
    ],
    "java.nio.file.attribute.basicfileattributeview.name": [
        "java.nio.file.attribute.BasicFileAttributeView.name()"
    ],
    "java.io.objectinputvalidation.validateobject": [
        "java.io.ObjectInputValidation.validateObject()"
    ],
    "org.omg.portableserver.implicitactivationpolicyoperations.value": [
        "org.omg.PortableServer.ImplicitActivationPolicyOperations.value()"
    ],
    "javax.accessibility.accessibletable.getaccessiblecolumnextentat": [
        "javax.accessibility.AccessibleTable.getAccessibleColumnExtentAt(int,int)"
    ],
    "java.beans.statement.getarguments": [
        "java.beans.Statement.getArguments()"
    ],
    "java.time.monthday.getlong": [
        "java.time.MonthDay.getLong(java.time.temporal.TemporalField)"
    ],
    "javax.swing.defaultlistselectionmodel.setselectionmode": [
        "javax.swing.DefaultListSelectionModel.setSelectionMode(int)"
    ],
    "javax.accessibility.accessiblecontext.addpropertychangelistener": [
        "javax.accessibility.AccessibleContext.addPropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "org.omg.corba.any.insert_typecode": [
        "org.omg.CORBA.Any.insert_TypeCode(org.omg.CORBA.TypeCode)"
    ],
    "javax.security.auth.x500.x500privatecredential.getalias": [
        "javax.security.auth.x500.X500PrivateCredential.getAlias()"
    ],
    "java.awt.image.bufferedimage.hastilewriters": [
        "java.awt.image.BufferedImage.hasTileWriters()"
    ],
    "java.nio.channels.selector.provider": [
        "java.nio.channels.Selector.provider()"
    ],
    "java.util.concurrent.semaphore.tostring": [
        "java.util.concurrent.Semaphore.toString()"
    ],
    "java.util.concurrent.blockingdeque.remove": [
        "java.util.concurrent.BlockingDeque.remove(java.lang.Object)"
    ],
    "java.util.optionallong.of": [
        "java.util.OptionalLong.of(long)"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.paint": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.xml.ws.spi.servicedelegate.sethandlerresolver": [
        "javax.xml.ws.spi.ServiceDelegate.setHandlerResolver(javax.xml.ws.handler.HandlerResolver)"
    ],
    "java.sql.databasemetadata.getdrivername": [
        "java.sql.DatabaseMetaData.getDriverName()"
    ],
    "javax.swing.text.abstractdocument.getcontent": [
        "javax.swing.text.AbstractDocument.getContent()"
    ],
    "javax.swing.plaf.basic.basiclistui.getcellbounds": [
        "javax.swing.plaf.basic.BasicListUI.getCellBounds(javax.swing.JList,int,int)"
    ],
    "java.sql.databasemetadata.getschematerm": [
        "java.sql.DatabaseMetaData.getSchemaTerm()"
    ],
    "javax.annotation.processing.abstractprocessor.process": [
        "javax.annotation.processing.AbstractProcessor.process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)"
    ],
    "javax.xml.transform.source.getsystemid": [
        "javax.xml.transform.Source.getSystemId()"
    ],
    "java.security.keystore.entry.attribute.getvalue": [
        "java.security.KeyStore.Entry.Attribute.getValue()"
    ],
    "javax.swing.spinnermodel.getnextvalue": [
        "javax.swing.SpinnerModel.getNextValue()"
    ],
    "java.sql.statement.getupdatecount": [
        "java.sql.Statement.getUpdateCount()"
    ],
    "java.nio.channels.spi.abstractselector.implcloseselector": [
        "java.nio.channels.spi.AbstractSelector.implCloseSelector()"
    ],
    "javax.swing.text.view.setsize": [
        "javax.swing.text.View.setSize(float,float)"
    ],
    "javax.rmi.corba.util.copyobjects": [
        "javax.rmi.CORBA.Util.copyObjects(java.lang.Object[],org.omg.CORBA.ORB)"
    ],
    "org.omg.dynamicany.dynsequenceoperations.get_elements_as_dyn_any": [
        "org.omg.DynamicAny.DynSequenceOperations.get_elements_as_dyn_any()"
    ],
    "java.util.logging.logger.getname": [
        "java.util.logging.Logger.getName()"
    ],
    "java.security.cert.x509certselector.setbasicconstraints": [
        "java.security.cert.X509CertSelector.setBasicConstraints(int)"
    ],
    "javax.swing.swingworker.firepropertychange": [
        "javax.swing.SwingWorker.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)"
    ],
    "java.lang.reflect.array.setbyte": [
        "java.lang.reflect.Array.setByte(java.lang.Object,int,byte)"
    ],
    "java.nio.file.attribute.attributeview.name": [
        "java.nio.file.attribute.AttributeView.name()"
    ],
    "javax.management.openmbean.tabulartype.isvalue": [
        "javax.management.openmbean.TabularType.isValue(java.lang.Object)"
    ],
    "java.util.scanner.uselocale": [
        "java.util.Scanner.useLocale(java.util.Locale)"
    ],
    "javax.print.attribute.standard.media.getname": [
        "javax.print.attribute.standard.Media.getName()"
    ],
    "javax.xml.bind.unmarshaller.getschema": [
        "javax.xml.bind.Unmarshaller.getSchema()"
    ],
    "java.lang.management.memorypoolmxbean.getusage": [
        "java.lang.management.MemoryPoolMXBean.getUsage()"
    ],
    "java.util.regex.patternsyntaxexception.getindex": [
        "java.util.regex.PatternSyntaxException.getIndex()"
    ],
    "java.math.biginteger.tostring": [
        "java.math.BigInteger.toString()",
        "java.math.BigInteger.toString(int)"
    ],
    "java.awt.canvas.getaccessiblecontext": [
        "java.awt.Canvas.getAccessibleContext()"
    ],
    "java.lang.reflect.field.get": [
        "java.lang.reflect.Field.get(java.lang.Object)"
    ],
    "javax.xml.parsers.documentbuilder.getschema": [
        "javax.xml.parsers.DocumentBuilder.getSchema()"
    ],
    "java.time.duration.compareto": [
        "java.time.Duration.compareTo(java.time.Duration)"
    ],
    "java.rmi.server.unicastremoteobject.clone": [
        "java.rmi.server.UnicastRemoteObject.clone()"
    ],
    "javax.swing.jlist.getselectionbackground": [
        "javax.swing.JList.getSelectionBackground()"
    ],
    "javax.swing.text.styleddocument.removestyle": [
        "javax.swing.text.StyledDocument.removeStyle(java.lang.String)"
    ],
    "java.security.cert.certificatefactoryspi.enginegeneratecertificate": [
        "java.security.cert.CertificateFactorySpi.engineGenerateCertificate(java.io.InputStream)"
    ],
    "javax.swing.plaf.synth.synthcolorchooserui.getcontext": [
        "javax.swing.plaf.synth.SynthColorChooserUI.getContext(javax.swing.JComponent)"
    ],
    "javax.print.streamprintservicefactory.getsupporteddocflavors": [
        "javax.print.StreamPrintServiceFactory.getSupportedDocFlavors()"
    ],
    "javax.swing.spring.constant": [
        "javax.swing.Spring.constant(int)"
    ],
    "javax.imageio.imagereadparam.getsourcerendersize": [
        "javax.imageio.ImageReadParam.getSourceRenderSize()"
    ],
    "java.beans.vetoablechangesupport.firevetoablechange": [
        "java.beans.VetoableChangeSupport.fireVetoableChange(java.lang.String,java.lang.Object,java.lang.Object)",
        "java.beans.VetoableChangeSupport.fireVetoableChange(java.beans.PropertyChangeEvent)",
        "java.beans.VetoableChangeSupport.fireVetoableChange(java.lang.String,boolean,boolean)",
        "java.beans.VetoableChangeSupport.fireVetoableChange(java.lang.String,int,int)"
    ],
    "javax.naming.ldap.ldapname.compareto": [
        "javax.naming.ldap.LdapName.compareTo(java.lang.Object)"
    ],
    "java.awt.image.renderable.parameterblock.add": [
        "java.awt.image.renderable.ParameterBlock.add(short)",
        "java.awt.image.renderable.ParameterBlock.add(int)",
        "java.awt.image.renderable.ParameterBlock.add(char)",
        "java.awt.image.renderable.ParameterBlock.add(long)",
        "java.awt.image.renderable.ParameterBlock.add(float)",
        "java.awt.image.renderable.ParameterBlock.add(double)",
        "java.awt.image.renderable.ParameterBlock.add(byte)",
        "java.awt.image.renderable.ParameterBlock.add(java.lang.Object)"
    ],
    "java.awt.geom.cubiccurve2d.double.getp1": [
        "java.awt.geom.CubicCurve2D.Double.getP1()"
    ],
    "javax.xml.parsers.documentbuilderfactory.newinstance": [
        "javax.xml.parsers.DocumentBuilderFactory.newInstance(java.lang.String,java.lang.ClassLoader)",
        "javax.xml.parsers.DocumentBuilderFactory.newInstance()"
    ],
    "java.awt.frame.getframes": [
        "java.awt.Frame.getFrames()"
    ],
    "java.text.numberformat.parse": [
        "java.text.NumberFormat.parse(java.lang.String)"
    ],
    "javax.sql.rowset.jdbcrowset.getshowdeleted": [
        "javax.sql.rowset.JdbcRowSet.getShowDeleted()"
    ],
    "javax.swing.jrootpane.getui": [
        "javax.swing.JRootPane.getUI()"
    ],
    "org.w3c.dom.events.eventtarget.removeeventlistener": [
        "org.w3c.dom.events.EventTarget.removeEventListener(java.lang.String,org.w3c.dom.events.EventListener,boolean)"
    ],
    "java.awt.button.addactionlistener": [
        "java.awt.Button.addActionListener(java.awt.event.ActionListener)"
    ],
    "java.security.spec.pkcs8encodedkeyspec.getencoded": [
        "java.security.spec.PKCS8EncodedKeySpec.getEncoded()"
    ],
    "java.nio.channels.asynchronousfilechannel.size": [
        "java.nio.channels.AsynchronousFileChannel.size()"
    ],
    "org.w3c.dom.entity.getsystemid": [
        "org.w3c.dom.Entity.getSystemId()"
    ],
    "java.util.concurrent.atomic.atomicintegerarray.decrementandget": [
        "java.util.concurrent.atomic.AtomicIntegerArray.decrementAndGet(int)"
    ],
    "java.util.hashtable.computeifpresent": [
        "java.util.Hashtable.computeIfPresent(K,java.util.function.BiFunction<? super,? super,? extends V>)"
    ],
    "org.w3c.dom.ls.lsserializer.getfilter": [
        "org.w3c.dom.ls.LSSerializer.getFilter()"
    ],
    "java.awt.image.bufferedimage.getnumytiles": [
        "java.awt.image.BufferedImage.getNumYTiles()"
    ],
    "javax.sound.midi.soundbank.getinstruments": [
        "javax.sound.midi.Soundbank.getInstruments()"
    ],
    "java.awt.geom.path2d.double.lineto": [
        "java.awt.geom.Path2D.Double.lineTo(double,double)"
    ],
    "java.util.regex.matcher.lookingat": [
        "java.util.regex.Matcher.lookingAt()"
    ],
    "java.awt.geom.arc2d.double.getx": [
        "java.awt.geom.Arc2D.Double.getX()"
    ],
    "java.lang.management.lockinfo.tostring": [
        "java.lang.management.LockInfo.toString()"
    ],
    "java.net.httpcookie.sethttponly": [
        "java.net.HttpCookie.setHttpOnly(boolean)"
    ],
    "java.security.securerandomspi.enginenextbytes": [
        "java.security.SecureRandomSpi.engineNextBytes(byte[])"
    ],
    "javax.xml.stream.xmlstreamwriter.getnamespacecontext": [
        "javax.xml.stream.XMLStreamWriter.getNamespaceContext()"
    ],
    "javax.imageio.metadata.iiometadatanode.getfirstchild": [
        "javax.imageio.metadata.IIOMetadataNode.getFirstChild()"
    ],
    "java.awt.toolkit.getdefaulttoolkit": [
        "java.awt.Toolkit.getDefaultToolkit()"
    ],
    "javax.swing.text.html.htmleditorkit.htmlfactory.create": [
        "javax.swing.text.html.HTMLEditorKit.HTMLFactory.create(javax.swing.text.Element)"
    ],
    "java.sql.clob.setcharacterstream": [
        "java.sql.Clob.setCharacterStream(long)"
    ],
    "javax.swing.table.defaulttablemodel.setdatavector": [
        "javax.swing.table.DefaultTableModel.setDataVector(java.util.Vector,java.util.Vector)",
        "javax.swing.table.DefaultTableModel.setDataVector(java.lang.Object[][],java.lang.Object[])"
    ],
    "java.awt.geom.rectangle2d.getpathiterator": [
        "java.awt.geom.Rectangle2D.getPathIterator(java.awt.geom.AffineTransform)",
        "java.awt.geom.Rectangle2D.getPathIterator(java.awt.geom.AffineTransform,double)"
    ],
    "java.security.interfaces.dsaparams.getq": [
        "java.security.interfaces.DSAParams.getQ()"
    ],
    "javax.print.attribute.standard.colorsupported.getname": [
        "javax.print.attribute.standard.ColorSupported.getName()"
    ],
    "java.lang.management.managementfactory.getplatformmxbeans": [
        "java.lang.management.ManagementFactory.getPlatformMXBeans(javax.management.MBeanServerConnection,java.lang.Class<T>)",
        "java.lang.management.ManagementFactory.getPlatformMXBeans(java.lang.Class<T>)"
    ],
    "java.awt.geom.arc2d.double.gety": [
        "java.awt.geom.Arc2D.Double.getY()"
    ],
    "java.security.cert.x509certselector.getsubjectpublickeyalgid": [
        "java.security.cert.X509CertSelector.getSubjectPublicKeyAlgID()"
    ],
    "java.net.inet6address.getbyaddress": [
        "java.net.Inet6Address.getByAddress(java.lang.String,byte[],java.net.NetworkInterface)",
        "java.net.Inet6Address.getByAddress(java.lang.String,byte[],int)"
    ],
    "javax.swing.plaf.synth.synthlabelui.getbaseline": [
        "javax.swing.plaf.synth.SynthLabelUI.getBaseline(javax.swing.JComponent,int,int)"
    ],
    "java.time.localdatetime.plusdays": [
        "java.time.LocalDateTime.plusDays(long)"
    ],
    "java.util.stream.doublestream.anymatch": [
        "java.util.stream.DoubleStream.anyMatch(java.util.function.DoublePredicate)"
    ],
    "javax.sound.sampled.spi.formatconversionprovider.getaudioinputstream": [
        "javax.sound.sampled.spi.FormatConversionProvider.getAudioInputStream(javax.sound.sampled.AudioFormat.Encoding,javax.sound.sampled.AudioInputStream)",
        "javax.sound.sampled.spi.FormatConversionProvider.getAudioInputStream(javax.sound.sampled.AudioFormat,javax.sound.sampled.AudioInputStream)"
    ],
    "java.awt.image.pixelgrabber.getpixels": [
        "java.awt.image.PixelGrabber.getPixels()"
    ],
    "javax.xml.soap.soapmessage.getsoapbody": [
        "javax.xml.soap.SOAPMessage.getSOAPBody()"
    ],
    "javax.xml.transform.transformerexception.getlocationasstring": [
        "javax.xml.transform.TransformerException.getLocationAsString()"
    ],
    "java.time.yearmonth.withyear": [
        "java.time.YearMonth.withYear(int)"
    ],
    "java.awt.image.renderable.parameterblock.getlongparameter": [
        "java.awt.image.renderable.ParameterBlock.getLongParameter(int)"
    ],
    "javax.print.printservice.getsupporteddocflavors": [
        "javax.print.PrintService.getSupportedDocFlavors()"
    ],
    "java.util.doublesummarystatistics.tostring": [
        "java.util.DoubleSummaryStatistics.toString()"
    ],
    "java.util.hashtable.replaceall": [
        "java.util.Hashtable.replaceAll(java.util.function.BiFunction<? super,? super,? extends V>)"
    ],
    "java.util.splittablerandom.nextdouble": [
        "java.util.SplittableRandom.nextDouble(double)"
    ],
    "javax.swing.text.caret.removechangelistener": [
        "javax.swing.text.Caret.removeChangeListener(javax.swing.event.ChangeListener)"
    ],
    "java.awt.geom.path2d.double.getbounds2d": [
        "java.awt.geom.Path2D.Double.getBounds2D()"
    ],
    "java.awt.image.renderable.parameterblock.set": [
        "java.awt.image.renderable.ParameterBlock.set(int,int)",
        "java.awt.image.renderable.ParameterBlock.set(double,int)",
        "java.awt.image.renderable.ParameterBlock.set(byte,int)",
        "java.awt.image.renderable.ParameterBlock.set(char,int)",
        "java.awt.image.renderable.ParameterBlock.set(long,int)",
        "java.awt.image.renderable.ParameterBlock.set(float,int)",
        "java.awt.image.renderable.ParameterBlock.set(java.lang.Object,int)",
        "java.awt.image.renderable.ParameterBlock.set(short,int)"
    ],
    "java.sql.databasemetadata.getmaxcolumnnamelength": [
        "java.sql.DatabaseMetaData.getMaxColumnNameLength()"
    ],
    "javax.sql.rowset.setdatasourcename": [
        "javax.sql.RowSet.setDataSourceName(java.lang.String)"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readblob": [
        "javax.sql.rowset.serial.SQLInputImpl.readBlob()"
    ],
    "java.nio.charset.charsetdecoder.onunmappablecharacter": [
        "java.nio.charset.CharsetDecoder.onUnmappableCharacter(java.nio.charset.CodingErrorAction)"
    ],
    "javax.naming.directory.attributes.remove": [
        "javax.naming.directory.Attributes.remove(java.lang.String)"
    ],
    "java.util.gregoriancalendar.getactualmaximum": [
        "java.util.GregorianCalendar.getActualMaximum(int)"
    ],
    "javax.swing.plaf.multi.multicolorchooserui.uninstallui": [
        "javax.swing.plaf.multi.MultiColorChooserUI.uninstallUI(javax.swing.JComponent)"
    ],
    "javax.swing.jprogressbar.setui": [
        "javax.swing.JProgressBar.setUI(javax.swing.plaf.ProgressBarUI)"
    ],
    "javax.sound.sampled.audiosystem.getsourcedataline": [
        "javax.sound.sampled.AudioSystem.getSourceDataLine(javax.sound.sampled.AudioFormat)",
        "javax.sound.sampled.AudioSystem.getSourceDataLine(javax.sound.sampled.AudioFormat,javax.sound.sampled.Mixer.Info)"
    ],
    "java.security.interfaces.rsaprivatecrtkey.getprimeq": [
        "java.security.interfaces.RSAPrivateCrtKey.getPrimeQ()"
    ],
    "javax.naming.ldap.ldapname.hashcode": [
        "javax.naming.ldap.LdapName.hashCode()"
    ],
    "javax.management.remote.rmi.rmiconnection.invoke": [
        "javax.management.remote.rmi.RMIConnection.invoke(javax.management.ObjectName,java.lang.String,java.rmi.MarshalledObject,java.lang.String[],javax.security.auth.Subject)"
    ],
    "javax.xml.ws.spi.http.httpexchange.getquerystring": [
        "javax.xml.ws.spi.http.HttpExchange.getQueryString()"
    ],
    "javax.swing.text.defaultstyleddocument.getfont": [
        "javax.swing.text.DefaultStyledDocument.getFont(javax.swing.text.AttributeSet)"
    ],
    "javax.sound.sampled.spi.audiofilewriter.write": [
        "javax.sound.sampled.spi.AudioFileWriter.write(javax.sound.sampled.AudioInputStream,javax.sound.sampled.AudioFileFormat.Type,java.io.OutputStream)",
        "javax.sound.sampled.spi.AudioFileWriter.write(javax.sound.sampled.AudioInputStream,javax.sound.sampled.AudioFileFormat.Type,java.io.File)"
    ],
    "javax.naming.event.eventcontext.addnaminglistener": [
        "javax.naming.event.EventContext.addNamingListener(java.lang.String,int,javax.naming.event.NamingListener)",
        "javax.naming.event.EventContext.addNamingListener(javax.naming.Name,int,javax.naming.event.NamingListener)"
    ],
    "java.util.stream.stream.anymatch": [
        "java.util.stream.Stream.anyMatch(java.util.function.Predicate<? super T>)",
        "java.util.stream.Stream.anyMatch(java.util.function.Predicate<? super java.util.stream.Stream>)"
    ],
    "javax.print.serviceuifactory.getui": [
        "javax.print.ServiceUIFactory.getUI(int,java.lang.String)"
    ],
    "javax.swing.text.wrappedplainview.gettabsize": [
        "javax.swing.text.WrappedPlainView.getTabSize()"
    ],
    "javax.xml.bind.validationevent.getlinkedexception": [
        "javax.xml.bind.ValidationEvent.getLinkedException()"
    ],
    "java.util.uuid.hashcode": [
        "java.util.UUID.hashCode()"
    ],
    "java.lang.invoke.methodtype.parametertype": [
        "java.lang.invoke.MethodType.parameterType(int)"
    ],
    "javax.swing.joptionpane.getuiclassid": [
        "javax.swing.JOptionPane.getUIClassID()"
    ],
    "java.time.localdatetime.plusnanos": [
        "java.time.LocalDateTime.plusNanos(long)"
    ],
    "java.util.jar.manifest.getmainattributes": [
        "java.util.jar.Manifest.getMainAttributes()"
    ],
    "org.xml.sax.helpers.xmlreaderadapter.setlocale": [
        "org.xml.sax.helpers.XMLReaderAdapter.setLocale(java.util.Locale)"
    ],
    "javax.swing.jfilechooser.getselectedfile": [
        "javax.swing.JFileChooser.getSelectedFile()"
    ],
    "javax.swing.plaf.metal.metaltheme.getsystemtextfont": [
        "javax.swing.plaf.metal.MetalTheme.getSystemTextFont()"
    ],
    "java.util.concurrent.concurrentskiplistset.equals": [
        "java.util.concurrent.ConcurrentSkipListSet.equals(java.lang.Object)"
    ],
    "java.awt.image.renderable.renderableimageop.getheight": [
        "java.awt.image.renderable.RenderableImageOp.getHeight()"
    ],
    "java.lang.management.memorynotificationinfo.from": [
        "java.lang.management.MemoryNotificationInfo.from(javax.management.openmbean.CompositeData)"
    ],
    "java.security.securerandom.setseed": [
        "java.security.SecureRandom.setSeed(byte[])",
        "java.security.SecureRandom.setSeed(long)"
    ],
    "java.awt.scrollbar.processadjustmentevent": [
        "java.awt.Scrollbar.processAdjustmentEvent(java.awt.event.AdjustmentEvent)"
    ],
    "java.time.temporal.temporaladjusters.firstdayofnextyear": [
        "java.time.temporal.TemporalAdjusters.firstDayOfNextYear()"
    ],
    "java.net.httpurlconnection.geterrorstream": [
        "java.net.HttpURLConnection.getErrorStream()"
    ],
    "javax.sql.rowset.spi.syncprovider.setdatasourcelock": [
        "javax.sql.rowset.spi.SyncProvider.setDataSourceLock(int)"
    ],
    "java.util.concurrent.copyonwritearraylist.retainall": [
        "java.util.concurrent.CopyOnWriteArrayList.retainAll(java.util.Collection<?>)"
    ],
    "javax.activation.activationdataflavor.ismimetypeequal": [
        "javax.activation.ActivationDataFlavor.isMimeTypeEqual(java.lang.String)"
    ],
    "javax.xml.ws.handler.handler.handlefault": [
        "javax.xml.ws.handler.Handler.handleFault(javax.xml.ws.handler.Handler)"
    ],
    "java.beans.beancontext.beancontextservicerevokedevent.isserviceclass": [
        "java.beans.beancontext.BeanContextServiceRevokedEvent.isServiceClass(java.lang.Class)"
    ],
    "java.awt.datatransfer.systemflavormap.getflavorsfornatives": [
        "java.awt.datatransfer.SystemFlavorMap.getFlavorsForNatives(java.lang.String[])"
    ],
    "java.nio.file.directorystream.iterator": [
        "java.nio.file.DirectoryStream.iterator()"
    ],
    "javax.sound.midi.midichannel.setmute": [
        "javax.sound.midi.MidiChannel.setMute(boolean)"
    ],
    "java.lang.invoke.mutablecallsite.dynamicinvoker": [
        "java.lang.invoke.MutableCallSite.dynamicInvoker()"
    ],
    "java.awt.image.bufferedimage.setdata": [
        "java.awt.image.BufferedImage.setData(java.awt.image.Raster)"
    ],
    "javax.swing.jslider.imageupdate": [
        "javax.swing.JSlider.imageUpdate(java.awt.Image,int,int,int,int,int)"
    ],
    "java.lang.strictmath.random": [
        "java.lang.StrictMath.random()"
    ],
    "java.util.date.clone": [
        "java.util.Date.clone()"
    ],
    "java.security.cert.ldapcertstoreparameters.clone": [
        "java.security.cert.LDAPCertStoreParameters.clone()"
    ],
    "javax.swing.plaf.multi.multiinternalframeui.getminimumsize": [
        "javax.swing.plaf.multi.MultiInternalFrameUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "javax.swing.tree.treeselectionmodel.addpropertychangelistener": [
        "javax.swing.tree.TreeSelectionModel.addPropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "java.sql.connection.preparecall": [
        "java.sql.Connection.prepareCall(java.lang.String,int,int,int)",
        "java.sql.Connection.prepareCall(java.lang.String)",
        "java.sql.Connection.prepareCall(java.lang.String,int,int)"
    ],
    "org.omg.corba.portable.inputstream.read_context": [
        "org.omg.CORBA.portable.InputStream.read_Context()"
    ],
    "org.omg.corba.any.extract_wchar": [
        "org.omg.CORBA.Any.extract_wchar()"
    ],
    "javax.sql.rowset.baserowset.setcharacterstream": [
        "javax.sql.rowset.BaseRowSet.setCharacterStream(int,java.io.Reader)",
        "javax.sql.rowset.BaseRowSet.setCharacterStream(int,java.io.Reader,int)",
        "javax.sql.rowset.BaseRowSet.setCharacterStream(java.lang.String,java.io.Reader)",
        "javax.sql.rowset.BaseRowSet.setCharacterStream(java.lang.String,java.io.Reader,int)"
    ],
    "javax.sql.rowset.serial.serialdatalink.getdatalink": [
        "javax.sql.rowset.serial.SerialDatalink.getDatalink()"
    ],
    "org.xml.sax.ext.lexicalhandler.endcdata": [
        "org.xml.sax.ext.LexicalHandler.endCDATA()"
    ],
    "java.awt.textfield.getcolumns": [
        "java.awt.TextField.getColumns()"
    ],
    "java.awt.trayicon.isimageautosize": [
        "java.awt.TrayIcon.isImageAutoSize()"
    ],
    "javax.xml.stream.xmlstreamwriter.writeendelement": [
        "javax.xml.stream.XMLStreamWriter.writeEndElement()"
    ],
    "javax.swing.jlist.getselectedvalue": [
        "javax.swing.JList.getSelectedValue()"
    ],
    "javax.print.printservice.removeprintserviceattributelistener": [
        "javax.print.PrintService.removePrintServiceAttributeListener(javax.print.event.PrintServiceAttributeListener)"
    ],
    "javax.management.mbeanserverconnection.setattribute": [
        "javax.management.MBeanServerConnection.setAttribute(javax.management.ObjectName,javax.management.Attribute)"
    ],
    "javax.xml.ws.spi.servicedelegate.createdispatch": [
        "javax.xml.ws.spi.ServiceDelegate.createDispatch(javax.xml.namespace.QName,javax.xml.bind.JAXBContext,javax.xml.ws.Service.Mode)",
        "javax.xml.ws.spi.ServiceDelegate.createDispatch(javax.xml.namespace.QName,javax.xml.bind.JAXBContext,javax.xml.ws.Service.Mode,javax.xml.ws.WebServiceFeature...)",
        "javax.xml.ws.spi.ServiceDelegate.createDispatch(javax.xml.ws.EndpointReference,javax.xml.bind.JAXBContext,javax.xml.ws.Service.Mode,javax.xml.ws.WebServiceFeature...)",
        "javax.xml.ws.spi.ServiceDelegate.createDispatch(javax.xml.namespace.QName,java.lang.Class<T>,javax.xml.ws.Service.Mode,javax.xml.ws.WebServiceFeature...)",
        "javax.xml.ws.spi.ServiceDelegate.createDispatch(javax.xml.namespace.QName,java.lang.Class<T>,javax.xml.ws.Service.Mode)",
        "javax.xml.ws.spi.ServiceDelegate.createDispatch(javax.xml.ws.EndpointReference,java.lang.Class<T>,javax.xml.ws.Service.Mode,javax.xml.ws.WebServiceFeature...)"
    ],
    "java.time.duration.plus": [
        "java.time.Duration.plus(java.time.Duration)",
        "java.time.Duration.plus(long,java.time.temporal.TemporalUnit)"
    ],
    "javax.swing.jtree.setvisiblerowcount": [
        "javax.swing.JTree.setVisibleRowCount(int)"
    ],
    "java.time.format.decimalstyle.getdecimalseparator": [
        "java.time.format.DecimalStyle.getDecimalSeparator()"
    ],
    "java.time.duration.minusmillis": [
        "java.time.Duration.minusMillis(long)"
    ],
    "javax.swing.plaf.metal.metaltheme.getseparatorforeground": [
        "javax.swing.plaf.metal.MetalTheme.getSeparatorForeground()"
    ],
    "org.xml.sax.helpers.attributesimpl.setlocalname": [
        "org.xml.sax.helpers.AttributesImpl.setLocalName(int,java.lang.String)"
    ],
    "java.nio.file.spi.filesystemprovider.newdirectorystream": [
        "java.nio.file.spi.FileSystemProvider.newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream.Filter<? super java.nio.file.Path>)"
    ],
    "javax.imageio.imagereader.removealliioreadupdatelisteners": [
        "javax.imageio.ImageReader.removeAllIIOReadUpdateListeners()"
    ],
    "javax.sound.midi.mididevice.gettransmitters": [
        "javax.sound.midi.MidiDevice.getTransmitters()"
    ],
    "java.awt.image.bandcombineop.getmatrix": [
        "java.awt.image.BandCombineOp.getMatrix()"
    ],
    "java.lang.short.reversebytes": [
        "java.lang.Short.reverseBytes(short)"
    ],
    "javax.accessibility.accessiblecomponent.setvisible": [
        "javax.accessibility.AccessibleComponent.setVisible(boolean)"
    ],
    "java.security.cert.pkixcertpathchecker.getsupportedextensions": [
        "java.security.cert.PKIXCertPathChecker.getSupportedExtensions()"
    ],
    "java.awt.checkbox.setstate": [
        "java.awt.Checkbox.setState(boolean)"
    ],
    "java.net.httpcookie.setdomain": [
        "java.net.HttpCookie.setDomain(java.lang.String)"
    ],
    "javax.swing.text.stylecontext.tostring": [
        "javax.swing.text.StyleContext.toString()"
    ],
    "java.sql.pseudocolumnusage.values": [
        "java.sql.PseudoColumnUsage.values()"
    ],
    "java.awt.awteventmulticaster.focuslost": [
        "java.awt.AWTEventMulticaster.focusLost(java.awt.event.FocusEvent)"
    ],
    "java.text.decimalformatsymbols.getminussign": [
        "java.text.DecimalFormatSymbols.getMinusSign()"
    ],
    "java.awt.desktop.isdesktopsupported": [
        "java.awt.Desktop.isDesktopSupported()"
    ],
    "javax.swing.rootpanecontainer.getcontentpane": [
        "javax.swing.RootPaneContainer.getContentPane()"
    ],
    "javax.swing.scrollpanelayout.gethorizontalscrollbar": [
        "javax.swing.ScrollPaneLayout.getHorizontalScrollBar()"
    ],
    "org.omg.dynamicany._dynunionstub.insert_short": [
        "org.omg.DynamicAny._DynUnionStub.insert_short(short)"
    ],
    "java.time.temporal.temporalunit.getduration": [
        "java.time.temporal.TemporalUnit.getDuration()"
    ],
    "java.util.logging.logger.addhandler": [
        "java.util.logging.Logger.addHandler(java.util.logging.Handler)"
    ],
    "javax.sql.pooledconnection.removeconnectioneventlistener": [
        "javax.sql.PooledConnection.removeConnectionEventListener(javax.sql.ConnectionEventListener)"
    ],
    "javax.swing.jcomponent.setfont": [
        "javax.swing.JComponent.setFont(java.awt.Font)"
    ],
    "java.lang.management.classloadingmxbean.setverbose": [
        "java.lang.management.ClassLoadingMXBean.setVerbose(boolean)"
    ],
    "javax.management.monitor.countermonitor.getmodulus": [
        "javax.management.monitor.CounterMonitor.getModulus()"
    ],
    "java.time.localdate.from": [
        "java.time.LocalDate.from(java.time.temporal.TemporalAccessor)"
    ],
    "java.lang.stringbuilder.offsetbycodepoints": [
        "java.lang.StringBuilder.offsetByCodePoints(int,int)"
    ],
    "java.sql.sqloutput.writetimestamp": [
        "java.sql.SQLOutput.writeTimestamp(java.sql.Timestamp)"
    ],
    "javax.swing.jmenuitem.addmenudragmouselistener": [
        "javax.swing.JMenuItem.addMenuDragMouseListener(javax.swing.event.MenuDragMouseListener)"
    ],
    "java.awt.geom.roundrectangle2d.double.getx": [
        "java.awt.geom.RoundRectangle2D.Double.getX()"
    ],
    "javax.swing.jinternalframe.getuiclassid": [
        "javax.swing.JInternalFrame.getUIClassID()"
    ],
    "java.net.url.getauthority": [
        "java.net.URL.getAuthority()"
    ],
    "org.xml.sax.attributes.getlength": [
        "org.xml.sax.Attributes.getLength()"
    ],
    "javax.swing.plaf.nimbus.nimbusstyle.getinsets": [
        "javax.swing.plaf.nimbus.NimbusStyle.getInsets(javax.swing.plaf.synth.SynthContext,java.awt.Insets)"
    ],
    "javax.accessibility.accessiblehyperlink.doaccessibleaction": [
        "javax.accessibility.AccessibleHyperlink.doAccessibleAction(int)"
    ],
    "javax.swing.text.fieldview.modeltoview": [
        "javax.swing.text.FieldView.modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)"
    ],
    "javax.xml.soap.soapfactory.createelement": [
        "javax.xml.soap.SOAPFactory.createElement(org.w3c.dom.Element)",
        "javax.xml.soap.SOAPFactory.createElement(java.lang.String,java.lang.String,java.lang.String)",
        "javax.xml.soap.SOAPFactory.createElement(javax.xml.namespace.QName)",
        "javax.xml.soap.SOAPFactory.createElement(javax.xml.soap.Name)",
        "javax.xml.soap.SOAPFactory.createElement(java.lang.String)"
    ],
    "java.awt.toolkit.getmaximumcursorcolors": [
        "java.awt.Toolkit.getMaximumCursorColors()"
    ],
    "javax.swing.jcomponent.getinputverifier": [
        "javax.swing.JComponent.getInputVerifier()"
    ],
    "javax.imageio.metadata.iiometadatanode.setidattributens": [
        "javax.imageio.metadata.IIOMetadataNode.setIdAttributeNS(java.lang.String,java.lang.String,boolean)"
    ],
    "javax.swing.tooltipmanager.setlightweightpopupenabled": [
        "javax.swing.ToolTipManager.setLightWeightPopupEnabled(boolean)"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.isautoincrement": [
        "javax.sql.rowset.RowSetMetaDataImpl.isAutoIncrement(int)"
    ],
    "java.security.signature.getinstance": [
        "java.security.Signature.getInstance(java.lang.String,java.security.Provider)",
        "java.security.Signature.getInstance(java.lang.String)",
        "java.security.Signature.getInstance(java.lang.String,java.lang.String)"
    ],
    "java.util.concurrent.locks.abstractqueuedlongsynchronizer.hasqueuedpredecessors": [
        "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasQueuedPredecessors()"
    ],
    "java.util.concurrent.atomic.atomiclong.doublevalue": [
        "java.util.concurrent.atomic.AtomicLong.doubleValue()"
    ],
    "javax.swing.plaf.synth.synthscrollbarui.paintborder": [
        "javax.swing.plaf.synth.SynthScrollBarUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.xml.stream.factoryconfigurationerror.getmessage": [
        "javax.xml.stream.FactoryConfigurationError.getMessage()"
    ],
    "javax.tools.diagnostic.getcolumnnumber": [
        "javax.tools.Diagnostic.getColumnNumber()"
    ],
    "javax.swing.jlist.getdropmode": [
        "javax.swing.JList.getDropMode()"
    ],
    "org.ietf.jgss.gssmanager.createcontext": [
        "org.ietf.jgss.GSSManager.createContext(byte[])",
        "org.ietf.jgss.GSSManager.createContext(org.ietf.jgss.GSSCredential)",
        "org.ietf.jgss.GSSManager.createContext(org.ietf.jgss.GSSName,org.ietf.jgss.Oid,org.ietf.jgss.GSSCredential,int)"
    ],
    "org.w3c.dom.namednodemap.removenameditemns": [
        "org.w3c.dom.NamedNodeMap.removeNamedItemNS(java.lang.String,java.lang.String)"
    ],
    "java.util.arraydeque.spliterator": [
        "java.util.ArrayDeque.spliterator()"
    ],
    "javax.swing.jtable.getui": [
        "javax.swing.JTable.getUI()"
    ],
    "javax.naming.ldap.ldapcontext.setrequestcontrols": [
        "javax.naming.ldap.LdapContext.setRequestControls(javax.naming.ldap.Control[])"
    ],
    "javax.lang.model.util.simpleannotationvaluevisitor6.visitdouble": [
        "javax.lang.model.util.SimpleAnnotationValueVisitor6.visitDouble(double,javax.lang.model.util.SimpleAnnotationValueVisitor6)"
    ],
    "java.awt.gridlayout.gethgap": [
        "java.awt.GridLayout.getHgap()"
    ],
    "javax.swing.plaf.multi.multilistui.update": [
        "javax.swing.plaf.multi.MultiListUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.util.concurrent.delayqueue.take": [
        "java.util.concurrent.DelayQueue.take()"
    ],
    "java.io.dataoutputstream.flush": [
        "java.io.DataOutputStream.flush()"
    ],
    "java.nio.channels.datagramchannel.disconnect": [
        "java.nio.channels.DatagramChannel.disconnect()"
    ],
    "org.omg.corba.any.extract_octet": [
        "org.omg.CORBA.Any.extract_octet()"
    ],
    "java.awt.geom.quadcurve2d.double.gety2": [
        "java.awt.geom.QuadCurve2D.Double.getY2()"
    ],
    "java.lang.reflect.constructor.getexceptiontypes": [
        "java.lang.reflect.Constructor.getExceptionTypes()"
    ],
    "javax.swing.swingworker.doinbackground": [
        "javax.swing.SwingWorker.doInBackground()"
    ],
    "javax.swing.plaf.synth.synthpainter.painttableheaderborder": [
        "javax.swing.plaf.synth.SynthPainter.paintTableHeaderBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.jmenu.getitem": [
        "javax.swing.JMenu.getItem(int)"
    ],
    "java.lang.ref.referencequeue.poll": [
        "java.lang.ref.ReferenceQueue.poll()"
    ],
    "org.omg.dynamicany.dynanyoperations.insert_val": [
        "org.omg.DynamicAny.DynAnyOperations.insert_val(java.io.Serializable)"
    ],
    "javax.xml.parsers.saxparser.getschema": [
        "javax.xml.parsers.SAXParser.getSchema()"
    ],
    "java.nio.file.watchkey.pollevents": [
        "java.nio.file.WatchKey.pollEvents()"
    ],
    "java.time.chrono.minguochronology.dateyearday": [
        "java.time.chrono.MinguoChronology.dateYearDay(java.time.chrono.Era,int,int)",
        "java.time.chrono.MinguoChronology.dateYearDay(int,int)"
    ],
    "javax.print.attribute.integersyntax.equals": [
        "javax.print.attribute.IntegerSyntax.equals(java.lang.Object)"
    ],
    "javax.swing.tree.defaultmutabletreenode.getsharedancestor": [
        "javax.swing.tree.DefaultMutableTreeNode.getSharedAncestor(javax.swing.tree.DefaultMutableTreeNode)"
    ],
    "javax.xml.transform.transformer.reset": [
        "javax.xml.transform.Transformer.reset()"
    ],
    "java.nio.file.path.normalize": [
        "java.nio.file.Path.normalize()"
    ],
    "javax.swing.plaf.basic.basiceditorpaneui.installui": [
        "javax.swing.plaf.basic.BasicEditorPaneUI.installUI(javax.swing.JComponent)"
    ],
    "javax.swing.jcomponent.getuiclassid": [
        "javax.swing.JComponent.getUIClassID()"
    ],
    "javax.swing.text.caret.getmark": [
        "javax.swing.text.Caret.getMark()"
    ],
    "java.time.chrono.japaneseera.getvalue": [
        "java.time.chrono.JapaneseEra.getValue()"
    ],
    "java.net.passwordauthentication.getpassword": [
        "java.net.PasswordAuthentication.getPassword()"
    ],
    "javax.print.attribute.standard.printermakeandmodel.equals": [
        "javax.print.attribute.standard.PrinterMakeAndModel.equals(java.lang.Object)"
    ],
    "javax.sound.sampled.spi.audiofilewriter.isfiletypesupported": [
        "javax.sound.sampled.spi.AudioFileWriter.isFileTypeSupported(javax.sound.sampled.AudioFileFormat.Type,javax.sound.sampled.AudioInputStream)",
        "javax.sound.sampled.spi.AudioFileWriter.isFileTypeSupported(javax.sound.sampled.AudioFileFormat.Type)"
    ],
    "javax.swing.text.styleconstants.getforeground": [
        "javax.swing.text.StyleConstants.getForeground(javax.swing.text.AttributeSet)"
    ],
    "java.net.networkinterface.getbyindex": [
        "java.net.NetworkInterface.getByIndex(int)"
    ],
    "javax.swing.colorchooser.abstractcolorchooserpanel.getdisplayedmnemonicindex": [
        "javax.swing.colorchooser.AbstractColorChooserPanel.getDisplayedMnemonicIndex()"
    ],
    "java.awt.font.getfontname": [
        "java.awt.Font.getFontName(java.util.Locale)",
        "java.awt.Font.getFontName()"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.equals": [
        "javax.xml.datatype.XMLGregorianCalendar.equals(java.lang.Object)"
    ],
    "java.sql.time.valueof": [
        "java.sql.Time.valueOf(java.lang.String)",
        "java.sql.Time.valueOf(java.time.LocalTime)"
    ],
    "java.time.chrono.chronolocaldate.with": [
        "java.time.chrono.ChronoLocalDate.with(java.time.temporal.TemporalAdjuster)",
        "java.time.chrono.ChronoLocalDate.with(java.time.temporal.TemporalField,long)"
    ],
    "java.time.localdate.ofyearday": [
        "java.time.LocalDate.ofYearDay(int,int)"
    ],
    "javax.imageio.metadata.iiometadataformat.getchildnames": [
        "javax.imageio.metadata.IIOMetadataFormat.getChildNames(java.lang.String)"
    ],
    "org.ietf.jgss.gsscontext.getmutualauthstate": [
        "org.ietf.jgss.GSSContext.getMutualAuthState()"
    ],
    "javax.swing.text.gapcontent.remove": [
        "javax.swing.text.GapContent.remove(int,int)"
    ],
    "javax.swing.jframe.setrootpane": [
        "javax.swing.JFrame.setRootPane(javax.swing.JRootPane)"
    ],
    "javax.swing.text.styleconstants.getleftindent": [
        "javax.swing.text.StyleConstants.getLeftIndent(javax.swing.text.AttributeSet)"
    ],
    "java.awt.component.getminimumsize": [
        "java.awt.Component.getMinimumSize()"
    ],
    "java.util.locale.builder.setlanguagetag": [
        "java.util.Locale.Builder.setLanguageTag(java.lang.String)"
    ],
    "org.omg.corba.any.extract_ulonglong": [
        "org.omg.CORBA.Any.extract_ulonglong()"
    ],
    "java.nio.shortbuffer.duplicate": [
        "java.nio.ShortBuffer.duplicate()"
    ],
    "java.awt.dnd.dragsourcecontext.removedragsourcelistener": [
        "java.awt.dnd.DragSourceContext.removeDragSourceListener(java.awt.dnd.DragSourceListener)"
    ],
    "java.rmi.server.rmisocketfactory.setfailurehandler": [
        "java.rmi.server.RMISocketFactory.setFailureHandler(java.rmi.server.RMIFailureHandler)"
    ],
    "javax.swing.jpasswordfield.paramstring": [
        "javax.swing.JPasswordField.paramString()"
    ],
    "java.lang.strictmath.ulp": [
        "java.lang.StrictMath.ulp(float)",
        "java.lang.StrictMath.ulp(double)"
    ],
    "javax.swing.plaf.synth.synthcomboboxui.uninstallui": [
        "javax.swing.plaf.synth.SynthComboBoxUI.uninstallUI(javax.swing.JComponent)"
    ],
    "javax.swing.jmenuitem.removemenukeylistener": [
        "javax.swing.JMenuItem.removeMenuKeyListener(javax.swing.event.MenuKeyListener)"
    ],
    "java.awt.jobattributes.setmultipledocumenthandling": [
        "java.awt.JobAttributes.setMultipleDocumentHandling(java.awt.JobAttributes.MultipleDocumentHandlingType)"
    ],
    "java.util.concurrent.atomic.atomiclongfieldupdater.getandset": [
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndSet(java.util.concurrent.atomic.AtomicLongFieldUpdater,long)",
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndSet(T,long)"
    ],
    "javax.swing.jviewport.getinsets": [
        "javax.swing.JViewport.getInsets(java.awt.Insets)"
    ],
    "java.awt.robot.tostring": [
        "java.awt.Robot.toString()"
    ],
    "java.util.concurrent.blockingdeque.removefirstoccurrence": [
        "java.util.concurrent.BlockingDeque.removeFirstOccurrence(java.lang.Object)"
    ],
    "java.awt.image.convolveop.getbounds2d": [
        "java.awt.image.ConvolveOp.getBounds2D(java.awt.image.BufferedImage)",
        "java.awt.image.ConvolveOp.getBounds2D(java.awt.image.Raster)"
    ],
    "javax.xml.ws.handler.handlerresolver.gethandlerchain": [
        "javax.xml.ws.handler.HandlerResolver.getHandlerChain(javax.xml.ws.handler.PortInfo)"
    ],
    "java.lang.byte.shortvalue": [
        "java.lang.Byte.shortValue()"
    ],
    "javax.swing.plaf.multi.multidesktoppaneui.paint": [
        "javax.swing.plaf.multi.MultiDesktopPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.getmillisecond": [
        "javax.xml.datatype.XMLGregorianCalendar.getMillisecond()"
    ],
    "javax.xml.soap.attachmentpart.getcontenttype": [
        "javax.xml.soap.AttachmentPart.getContentType()"
    ],
    "javax.swing.plaf.basic.basiccombopopup.createmouselistener": [
        "javax.swing.plaf.basic.BasicComboPopup.createMouseListener()"
    ],
    "java.awt.focustraversalpolicy.getfirstcomponent": [
        "java.awt.FocusTraversalPolicy.getFirstComponent(java.awt.Container)"
    ],
    "javax.management.mbeanserverconnection.removenotificationlistener": [
        "javax.management.MBeanServerConnection.removeNotificationListener(javax.management.ObjectName,javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)",
        "javax.management.MBeanServerConnection.removeNotificationListener(javax.management.ObjectName,javax.management.ObjectName,javax.management.NotificationFilter,java.lang.Object)",
        "javax.management.MBeanServerConnection.removeNotificationListener(javax.management.ObjectName,javax.management.ObjectName)",
        "javax.management.MBeanServerConnection.removeNotificationListener(javax.management.ObjectName,javax.management.NotificationListener)"
    ],
    "javax.swing.plaf.synth.synthsplitpaneui.createdefaultnoncontinuouslayoutdivider": [
        "javax.swing.plaf.synth.SynthSplitPaneUI.createDefaultNonContinuousLayoutDivider()"
    ],
    "java.awt.graphicsconfiguration.getbounds": [
        "java.awt.GraphicsConfiguration.getBounds()"
    ],
    "java.awt.geom.line2d.double.getbounds2d": [
        "java.awt.geom.Line2D.Double.getBounds2D()"
    ],
    "java.time.offsettime.plus": [
        "java.time.OffsetTime.plus(long,java.time.temporal.TemporalUnit)",
        "java.time.OffsetTime.plus(java.time.temporal.TemporalAmount)"
    ],
    "javax.swing.tooltipmanager.getreshowdelay": [
        "javax.swing.ToolTipManager.getReshowDelay()"
    ],
    "javax.xml.validation.validatorhandler.getfeature": [
        "javax.xml.validation.ValidatorHandler.getFeature(java.lang.String)"
    ],
    "java.util.spi.currencynameprovider.getsymbol": [
        "java.util.spi.CurrencyNameProvider.getSymbol(java.lang.String,java.util.Locale)"
    ],
    "java.lang.invoke.methodhandles.lookup.bind": [
        "java.lang.invoke.MethodHandles.Lookup.bind(java.lang.Object,java.lang.String,java.lang.invoke.MethodType)"
    ],
    "java.nio.file.attribute.aclentry.equals": [
        "java.nio.file.attribute.AclEntry.equals(java.lang.Object)"
    ],
    "java.io.stringwriter.write": [
        "java.io.StringWriter.write(java.lang.String)",
        "java.io.StringWriter.write(java.lang.String,int,int)",
        "java.io.StringWriter.write(int)",
        "java.io.StringWriter.write(char[],int,int)"
    ],
    "javax.swing.text.simpleattributeset.getattributecount": [
        "javax.swing.text.SimpleAttributeSet.getAttributeCount()"
    ],
    "javax.xml.parsers.documentbuilderfactory.getattribute": [
        "javax.xml.parsers.DocumentBuilderFactory.getAttribute(java.lang.String)"
    ],
    "java.beans.beancontext.beancontextservicessupport.hasservice": [
        "java.beans.beancontext.BeanContextServicesSupport.hasService(java.lang.Class)"
    ],
    "java.net.urlconnection.getrequestproperty": [
        "java.net.URLConnection.getRequestProperty(java.lang.String)"
    ],
    "java.awt.geom.roundrectangle2d.setroundrect": [
        "java.awt.geom.RoundRectangle2D.setRoundRect(double,double,double,double,double,double)"
    ],
    "javax.swing.joptionpane.setselectionvalues": [
        "javax.swing.JOptionPane.setSelectionValues(java.lang.Object[])"
    ],
    "java.lang.integer.parseunsignedint": [
        "java.lang.Integer.parseUnsignedInt(java.lang.String)",
        "java.lang.Integer.parseUnsignedInt(java.lang.String,int)"
    ],
    "javax.print.attribute.standard.fidelity.getenumvaluetable": [
        "javax.print.attribute.standard.Fidelity.getEnumValueTable()"
    ],
    "javax.net.ssl.sslcontext.getdefault": [
        "javax.net.ssl.SSLContext.getDefault()"
    ],
    "java.net.urlconnection.tostring": [
        "java.net.URLConnection.toString()"
    ],
    "javax.sound.sampled.audiofileformat.getproperty": [
        "javax.sound.sampled.AudioFileFormat.getProperty(java.lang.String)"
    ],
    "java.awt.scrollbar.setvalueisadjusting": [
        "java.awt.Scrollbar.setValueIsAdjusting(boolean)"
    ],
    "java.util.stream.longstream.allmatch": [
        "java.util.stream.LongStream.allMatch(java.util.function.LongPredicate)"
    ],
    "java.nio.channels.networkchannel.setoption": [
        "java.nio.channels.NetworkChannel.setOption(java.net.SocketOption<T>,T)"
    ],
    "java.awt.fontmetrics.getwidths": [
        "java.awt.FontMetrics.getWidths()"
    ],
    "javax.swing.jtextarea.getwrapstyleword": [
        "javax.swing.JTextArea.getWrapStyleWord()"
    ],
    "javax.management.mbeanregistration.postregister": [
        "javax.management.MBeanRegistration.postRegister(java.lang.Boolean)"
    ],
    "java.awt.dnd.droptarget.setcomponent": [
        "java.awt.dnd.DropTarget.setComponent(java.awt.Component)"
    ],
    "java.awt.event.inputmethodevent.getcommittedcharactercount": [
        "java.awt.event.InputMethodEvent.getCommittedCharacterCount()"
    ],
    "java.awt.multiplegradientpaint.getcolorspace": [
        "java.awt.MultipleGradientPaint.getColorSpace()"
    ],
    "javax.swing.plaf.basic.basictreeui.completeediting": [
        "javax.swing.plaf.basic.BasicTreeUI.completeEditing()",
        "javax.swing.plaf.basic.BasicTreeUI.completeEditing(boolean,boolean,boolean)"
    ],
    "java.util.priorityqueue.spliterator": [
        "java.util.PriorityQueue.spliterator()"
    ],
    "javax.swing.undo.undoableeditsupport.endupdate": [
        "javax.swing.undo.UndoableEditSupport.endUpdate()"
    ],
    "java.awt.geom.cubiccurve2d.float.gety2": [
        "java.awt.geom.CubicCurve2D.Float.getY2()"
    ],
    "javax.swing.jrootpane.setcontentpane": [
        "javax.swing.JRootPane.setContentPane(java.awt.Container)"
    ],
    "javax.tools.fileobject.openoutputstream": [
        "javax.tools.FileObject.openOutputStream()"
    ],
    "java.security.spec.ecparameterspec.getgenerator": [
        "java.security.spec.ECParameterSpec.getGenerator()"
    ],
    "javax.swing.text.html.htmleditorkit.getlinkcursor": [
        "javax.swing.text.html.HTMLEditorKit.getLinkCursor()"
    ],
    "java.nio.charset.charsetencoder.reset": [
        "java.nio.charset.CharsetEncoder.reset()"
    ],
    "java.time.duration.get": [
        "java.time.Duration.get(java.time.temporal.TemporalUnit)"
    ],
    "javax.swing.plaf.synth.synthstyle.getboolean": [
        "javax.swing.plaf.synth.SynthStyle.getBoolean(javax.swing.plaf.synth.SynthContext,java.lang.Object,boolean)"
    ],
    "javax.security.auth.login.appconfigurationentry.getoptions": [
        "javax.security.auth.login.AppConfigurationEntry.getOptions()"
    ],
    "javax.xml.stream.xmleventfactory.createcharacters": [
        "javax.xml.stream.XMLEventFactory.createCharacters(java.lang.String)"
    ],
    "org.omg.dynamicany._dynvaluestub.get_boolean": [
        "org.omg.DynamicAny._DynValueStub.get_boolean()"
    ],
    "java.time.format.datetimeformatterbuilder.append": [
        "java.time.format.DateTimeFormatterBuilder.append(java.time.format.DateTimeFormatter)"
    ],
    "javax.annotation.processing.abstractprocessor.init": [
        "javax.annotation.processing.AbstractProcessor.init(javax.annotation.processing.ProcessingEnvironment)"
    ],
    "javax.swing.text.glyphview.setglyphpainter": [
        "javax.swing.text.GlyphView.setGlyphPainter(javax.swing.text.GlyphView.GlyphPainter)"
    ],
    "javax.xml.stream.util.xmleventconsumer.add": [
        "javax.xml.stream.util.XMLEventConsumer.add(javax.xml.stream.events.XMLEvent)"
    ],
    "java.awt.image.componentsamplemodel.setsamples": [
        "java.awt.image.ComponentSampleModel.setSamples(int,int,int,int,int,int[],java.awt.image.DataBuffer)"
    ],
    "java.awt.image.indexcolormodel.getrgbs": [
        "java.awt.image.IndexColorModel.getRGBs(int[])"
    ],
    "javax.swing.plaf.multi.multipanelui.contains": [
        "javax.swing.plaf.multi.MultiPanelUI.contains(javax.swing.JComponent,int,int)"
    ],
    "java.awt.dnd.droptargetdropevent.islocaltransfer": [
        "java.awt.dnd.DropTargetDropEvent.isLocalTransfer()"
    ],
    "java.time.monthday.compareto": [
        "java.time.MonthDay.compareTo(java.time.MonthDay)"
    ],
    "javax.swing.text.html.stylesheet.getlistpainter": [
        "javax.swing.text.html.StyleSheet.getListPainter(javax.swing.text.AttributeSet)"
    ],
    "java.util.scanner.nextbyte": [
        "java.util.Scanner.nextByte()",
        "java.util.Scanner.nextByte(int)"
    ],
    "java.lang.invoke.methodtype.wrap": [
        "java.lang.invoke.MethodType.wrap()"
    ],
    "org.omg.corba.fixedholder._read": [
        "org.omg.CORBA.FixedHolder._read(org.omg.CORBA.portable.InputStream)"
    ],
    "java.beans.expression.getvalue": [
        "java.beans.Expression.getValue()"
    ],
    "java.nio.channels.spi.asynchronouschannelprovider.openasynchronoussocketchannel": [
        "java.nio.channels.spi.AsynchronousChannelProvider.openAsynchronousSocketChannel(java.nio.channels.AsynchronousChannelGroup)"
    ],
    "java.util.calendar.clone": [
        "java.util.Calendar.clone()"
    ],
    "java.time.duration.withnanos": [
        "java.time.Duration.withNanos(int)"
    ],
    "javax.net.ssl.sslengine.getsupportedprotocols": [
        "javax.net.ssl.SSLEngine.getSupportedProtocols()"
    ],
    "javax.management.openmbean.compositedatasupport.getcompositetype": [
        "javax.management.openmbean.CompositeDataSupport.getCompositeType()"
    ],
    "javax.swing.plaf.multi.multifilechooserui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiFileChooserUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "java.util.doublesummarystatistics.combine": [
        "java.util.DoubleSummaryStatistics.combine(java.util.DoubleSummaryStatistics)"
    ],
    "javax.swing.plaf.multi.multiinternalframeui.getuis": [
        "javax.swing.plaf.multi.MultiInternalFrameUI.getUIs()"
    ],
    "java.io.printstream.write": [
        "java.io.PrintStream.write(byte[],int,int)",
        "java.io.PrintStream.write(int)"
    ],
    "javax.swing.text.simpleattributeset.getattributenames": [
        "javax.swing.text.SimpleAttributeSet.getAttributeNames()"
    ],
    "javax.swing.defaultlistmodel.removerange": [
        "javax.swing.DefaultListModel.removeRange(int,int)"
    ],
    "javax.swing.spring.getvalue": [
        "javax.swing.Spring.getValue()"
    ],
    "java.awt.toolkit.createpanel": [
        "java.awt.Toolkit.createPanel(java.awt.Panel)"
    ],
    "javax.swing.text.jtextcomponent.getscrollableunitincrement": [
        "javax.swing.text.JTextComponent.getScrollableUnitIncrement(java.awt.Rectangle,int,int)"
    ],
    "javax.swing.listmodel.addlistdatalistener": [
        "javax.swing.ListModel.addListDataListener(javax.swing.event.ListDataListener)"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.createpropertychangelistener": [
        "javax.swing.plaf.basic.BasicComboBoxUI.createPropertyChangeListener()"
    ],
    "java.util.calendar.getminimum": [
        "java.util.Calendar.getMinimum(int)"
    ],
    "javax.xml.bind.annotation.domhandler.marshal": [
        "javax.xml.bind.annotation.DomHandler.marshal(javax.xml.bind.annotation.DomHandler,javax.xml.bind.ValidationEventHandler)"
    ],
    "javax.swing.timer.getactionlisteners": [
        "javax.swing.Timer.getActionListeners()"
    ],
    "javax.xml.bind.datatypeconverter.printhexbinary": [
        "javax.xml.bind.DatatypeConverter.printHexBinary(byte[])"
    ],
    "java.awt.frame.seticonimage": [
        "java.awt.Frame.setIconImage(java.awt.Image)"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.hasqueuedthreads": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.hasQueuedThreads()"
    ],
    "java.nio.channels.spi.asynchronouschannelprovider.openasynchronouschannelgroup": [
        "java.nio.channels.spi.AsynchronousChannelProvider.openAsynchronousChannelGroup(java.util.concurrent.ExecutorService,int)",
        "java.nio.channels.spi.AsynchronousChannelProvider.openAsynchronousChannelGroup(int,java.util.concurrent.ThreadFactory)"
    ],
    "java.time.offsetdatetime.withmonth": [
        "java.time.OffsetDateTime.withMonth(int)"
    ],
    "org.omg.dynamicany.dynanyoperations.get_double": [
        "org.omg.DynamicAny.DynAnyOperations.get_double()"
    ],
    "javax.naming.reference.getfactoryclassname": [
        "javax.naming.Reference.getFactoryClassName()"
    ],
    "java.lang.invoke.methodhandleinfo.getmodifiers": [
        "java.lang.invoke.MethodHandleInfo.getModifiers()"
    ],
    "java.awt.image.singlepixelpackedsamplemodel.getbitoffsets": [
        "java.awt.image.SinglePixelPackedSampleModel.getBitOffsets()"
    ],
    "java.util.concurrent.atomic.atomicreferencefieldupdater.set": [
        "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.set(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater)",
        "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.set(T,V)"
    ],
    "javax.lang.model.element.annotationvaluevisitor.visittype": [
        "javax.lang.model.element.AnnotationValueVisitor.visitType(javax.lang.model.type.TypeMirror,javax.lang.model.element.AnnotationValueVisitor)"
    ],
    "java.util.locale.getisolanguages": [
        "java.util.Locale.getISOLanguages()"
    ],
    "javax.rmi.portableremoteobject.narrow": [
        "javax.rmi.PortableRemoteObject.narrow(java.lang.Object,java.lang.Class)"
    ],
    "javax.swing.defaultlistselectionmodel.firevaluechanged": [
        "javax.swing.DefaultListSelectionModel.fireValueChanged(boolean)",
        "javax.swing.DefaultListSelectionModel.fireValueChanged(int,int)"
    ],
    "javax.xml.soap.soapheaderelement.getactor": [
        "javax.xml.soap.SOAPHeaderElement.getActor()"
    ],
    "org.omg.corba.portable.valuebase._truncatable_ids": [
        "org.omg.CORBA.portable.ValueBase._truncatable_ids()"
    ],
    "java.awt.image.singlepixelpackedsamplemodel.getnumdataelements": [
        "java.awt.image.SinglePixelPackedSampleModel.getNumDataElements()"
    ],
    "javax.xml.ws.dispatch.invokeasync": [
        "javax.xml.ws.Dispatch.invokeAsync(javax.xml.ws.Dispatch)",
        "javax.xml.ws.Dispatch.invokeAsync(javax.xml.ws.Dispatch,javax.xml.ws.AsyncHandler<javax.xml.ws.Dispatch>)"
    ],
    "java.awt.multiplegradientpaint.getcolors": [
        "java.awt.MultipleGradientPaint.getColors()"
    ],
    "javax.imageio.metadata.iiometadataformat.getelementdescription": [
        "javax.imageio.metadata.IIOMetadataFormat.getElementDescription(java.lang.String,java.util.Locale)"
    ],
    "javax.swing.text.plainview.modeltoview": [
        "javax.swing.text.PlainView.modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)"
    ],
    "javax.swing.jmenubar.sethelpmenu": [
        "javax.swing.JMenuBar.setHelpMenu(javax.swing.JMenu)"
    ],
    "java.awt.gradientpaint.createcontext": [
        "java.awt.GradientPaint.createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)"
    ],
    "javax.swing.plaf.synth.synthlookandfeel.load": [
        "javax.swing.plaf.synth.SynthLookAndFeel.load(java.io.InputStream,java.lang.Class<?>)",
        "javax.swing.plaf.synth.SynthLookAndFeel.load(java.net.URL)"
    ],
    "java.security.cert.x509crlselector.getmincrl": [
        "java.security.cert.X509CRLSelector.getMinCRL()"
    ],
    "javax.swing.plaf.synth.synthprogressbarui.getbaseline": [
        "javax.swing.plaf.synth.SynthProgressBarUI.getBaseline(javax.swing.JComponent,int,int)"
    ],
    "java.util.concurrent.forkjoinworkerthread.getpoolindex": [
        "java.util.concurrent.ForkJoinWorkerThread.getPoolIndex()"
    ],
    "javax.xml.crypto.dsig.reference.getcalculateddigestvalue": [
        "javax.xml.crypto.dsig.Reference.getCalculatedDigestValue()"
    ],
    "java.util.collections.singleton": [
        "java.util.Collections.singleton(T)"
    ],
    "javax.management.objectname.unquote": [
        "javax.management.ObjectName.unquote(java.lang.String)"
    ],
    "javax.swing.jspinner.numbereditor.getmodel": [
        "javax.swing.JSpinner.NumberEditor.getModel()"
    ],
    "javax.security.sasl.sasl.createsaslserver": [
        "javax.security.sasl.Sasl.createSaslServer(java.lang.String,java.lang.String,java.lang.String,,?>,javax.security.auth.callback.CallbackHandler)"
    ],
    "javax.swing.plaf.multi.multibuttonui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiButtonUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "java.text.simpledateformat.set2digityearstart": [
        "java.text.SimpleDateFormat.set2DigitYearStart(java.util.Date)"
    ],
    "javax.xml.soap.name.getprefix": [
        "javax.xml.soap.Name.getPrefix()"
    ],
    "java.lang.double.doubletolongbits": [
        "java.lang.Double.doubleToLongBits(double)"
    ],
    "java.awt.component.processevent": [
        "java.awt.Component.processEvent(java.awt.AWTEvent)"
    ],
    "javax.print.attribute.resolutionsyntax.getcrossfeedresolution": [
        "javax.print.attribute.ResolutionSyntax.getCrossFeedResolution(int)"
    ],
    "java.lang.float.tohexstring": [
        "java.lang.Float.toHexString(float)"
    ],
    "javax.management.openmbean.arraytype.equals": [
        "javax.management.openmbean.ArrayType.equals(java.lang.Object)"
    ],
    "java.time.yearmonth.until": [
        "java.time.YearMonth.until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)"
    ],
    "java.awt.menuitem.getshortcut": [
        "java.awt.MenuItem.getShortcut()"
    ],
    "java.util.propertypermission.equals": [
        "java.util.PropertyPermission.equals(java.lang.Object)"
    ],
    "javax.swing.jcomponent.setui": [
        "javax.swing.JComponent.setUI(javax.swing.plaf.ComponentUI)"
    ],
    "java.awt.secondaryloop.enter": [
        "java.awt.SecondaryLoop.enter()"
    ],
    "javax.swing.plaf.multi.multilookandfeel.createuis": [
        "javax.swing.plaf.multi.MultiLookAndFeel.createUIs(javax.swing.plaf.ComponentUI,java.util.Vector,javax.swing.JComponent)"
    ],
    "javax.swing.text.defaultformatter.getdocumentfilter": [
        "javax.swing.text.DefaultFormatter.getDocumentFilter()"
    ],
    "java.awt.container.addimpl": [
        "java.awt.Container.addImpl(java.awt.Component,java.lang.Object,int)"
    ],
    "javax.naming.context.close": [
        "javax.naming.Context.close()"
    ],
    "javax.swing.plaf.multi.multitooltipui.installui": [
        "javax.swing.plaf.multi.MultiToolTipUI.installUI(javax.swing.JComponent)"
    ],
    "javax.naming.ldap.ldapname.getall": [
        "javax.naming.ldap.LdapName.getAll()"
    ],
    "javax.crypto.cipherspi.enginegetkeysize": [
        "javax.crypto.CipherSpi.engineGetKeySize(java.security.Key)"
    ],
    "java.time.offsettime.minus": [
        "java.time.OffsetTime.minus(java.time.temporal.TemporalAmount)",
        "java.time.OffsetTime.minus(long,java.time.temporal.TemporalUnit)"
    ],
    "javax.imageio.imagereadparam.getdestination": [
        "javax.imageio.ImageReadParam.getDestination()"
    ],
    "java.awt.component.getlocale": [
        "java.awt.Component.getLocale()"
    ],
    "java.io.stringwriter.close": [
        "java.io.StringWriter.close()"
    ],
    "java.util.logging.level.parse": [
        "java.util.logging.Level.parse(java.lang.String)"
    ],
    "javax.swing.tree.abstractlayoutcache.getrowheight": [
        "javax.swing.tree.AbstractLayoutCache.getRowHeight()"
    ],
    "java.sql.connection.setholdability": [
        "java.sql.Connection.setHoldability(int)"
    ],
    "javax.print.attribute.standard.printermessagefromoperator.getname": [
        "javax.print.attribute.standard.PrinterMessageFromOperator.getName()"
    ],
    "javax.security.auth.kerberos.kerberosticket.getclientaddresses": [
        "javax.security.auth.kerberos.KerberosTicket.getClientAddresses()"
    ],
    "javax.swing.jmenu.getmenulisteners": [
        "javax.swing.JMenu.getMenuListeners()"
    ],
    "javax.swing.jlabel.getdisabledicon": [
        "javax.swing.JLabel.getDisabledIcon()"
    ],
    "java.util.concurrent.locks.reentrantlock.getwaitqueuelength": [
        "java.util.concurrent.locks.ReentrantLock.getWaitQueueLength(java.util.concurrent.locks.Condition)"
    ],
    "org.omg.dynamicany._dynunionstub.get_ushort": [
        "org.omg.DynamicAny._DynUnionStub.get_ushort()"
    ],
    "javax.swing.uidefaults.removepropertychangelistener": [
        "javax.swing.UIDefaults.removePropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "java.lang.system.setproperty": [
        "java.lang.System.setProperty(java.lang.String,java.lang.String)"
    ],
    "java.nio.channels.asynchronousfilechannel.truncate": [
        "java.nio.channels.AsynchronousFileChannel.truncate(long)"
    ],
    "java.awt.font.glyphvector.getglyphtransform": [
        "java.awt.font.GlyphVector.getGlyphTransform(int)"
    ],
    "java.time.period.plusyears": [
        "java.time.Period.plusYears(long)"
    ],
    "org.omg.corba.definitionkind.value": [
        "org.omg.CORBA.DefinitionKind.value()"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readshort": [
        "javax.sql.rowset.serial.SQLInputImpl.readShort()"
    ],
    "javax.swing.jpopupmenu.setselectionmodel": [
        "javax.swing.JPopupMenu.setSelectionModel(javax.swing.SingleSelectionModel)"
    ],
    "javax.swing.plaf.synth.synthtextfieldui.uninstalldefaults": [
        "javax.swing.plaf.synth.SynthTextFieldUI.uninstallDefaults()"
    ],
    "java.awt.font.fontrendercontext.hashcode": [
        "java.awt.font.FontRenderContext.hashCode()"
    ],
    "javax.swing.jtree.dynamicutiltreenode.getchildcount": [
        "javax.swing.JTree.DynamicUtilTreeNode.getChildCount()"
    ],
    "javax.swing.jpopupmenu.setinvoker": [
        "javax.swing.JPopupMenu.setInvoker(java.awt.Component)"
    ],
    "javax.swing.plaf.multi.multirootpaneui.getuis": [
        "javax.swing.plaf.multi.MultiRootPaneUI.getUIs()"
    ],
    "javax.swing.plaf.basic.basictreeui.createcomponentlistener": [
        "javax.swing.plaf.basic.BasicTreeUI.createComponentListener()"
    ],
    "java.awt.geom.roundrectangle2d.float.getx": [
        "java.awt.geom.RoundRectangle2D.Float.getX()"
    ],
    "java.time.chrono.chronolocaldate.timelineorder": [
        "java.time.chrono.ChronoLocalDate.timeLineOrder()"
    ],
    "org.xml.sax.helpers.defaulthandler.error": [
        "org.xml.sax.helpers.DefaultHandler.error(org.xml.sax.SAXParseException)"
    ],
    "javax.swing.plaf.basic.basicarrowbutton.isfocustraversable": [
        "javax.swing.plaf.basic.BasicArrowButton.isFocusTraversable()"
    ],
    "javax.swing.jslider.addchangelistener": [
        "javax.swing.JSlider.addChangeListener(javax.swing.event.ChangeListener)"
    ],
    "javax.swing.plaf.synth.synthpainter.painttooltipborder": [
        "javax.swing.plaf.synth.SynthPainter.paintToolTipBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.gettreeselectionlisteners": [
        "javax.swing.tree.DefaultTreeSelectionModel.getTreeSelectionListeners()"
    ],
    "javax.swing.plaf.synth.synthbuttonui.getpreferredsize": [
        "javax.swing.plaf.synth.SynthButtonUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "org.omg.cosnaming._namingcontextextstub.rebind": [
        "org.omg.CosNaming._NamingContextExtStub.rebind(org.omg.CosNaming.NameComponent[],org.omg.CORBA.Object)"
    ],
    "javax.swing.plaf.basic.combopopup.getmouselistener": [
        "javax.swing.plaf.basic.ComboPopup.getMouseListener()"
    ],
    "javax.accessibility.accessiblecomponent.getsize": [
        "javax.accessibility.AccessibleComponent.getSize()"
    ],
    "javax.swing.sizesequence.setsizes": [
        "javax.swing.SizeSequence.setSizes(int[])"
    ],
    "javax.swing.plaf.synth.synthpainter.paintprogressbarborder": [
        "javax.swing.plaf.synth.SynthPainter.paintProgressBarBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",
        "javax.swing.plaf.synth.SynthPainter.paintProgressBarBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)"
    ],
    "java.io.file.topath": [
        "java.io.File.toPath()"
    ],
    "java.awt.font.textlayout.getoutline": [
        "java.awt.font.TextLayout.getOutline(java.awt.geom.AffineTransform)"
    ],
    "javax.management.relation.relationsupport.getrolecardinality": [
        "javax.management.relation.RelationSupport.getRoleCardinality(java.lang.String)"
    ],
    "java.text.parseposition.seterrorindex": [
        "java.text.ParsePosition.setErrorIndex(int)"
    ],
    "java.time.zoneddatetime.plus": [
        "java.time.ZonedDateTime.plus(java.time.temporal.TemporalAmount)",
        "java.time.ZonedDateTime.plus(long,java.time.temporal.TemporalUnit)"
    ],
    "javax.swing.plaf.multi.multiscrollbarui.createui": [
        "javax.swing.plaf.multi.MultiScrollBarUI.createUI(javax.swing.JComponent)"
    ],
    "javax.swing.tree.treeselectionmodel.setrowmapper": [
        "javax.swing.tree.TreeSelectionModel.setRowMapper(javax.swing.tree.RowMapper)"
    ],
    "javax.naming.namingexception.getrootcause": [
        "javax.naming.NamingException.getRootCause()"
    ],
    "javax.net.ssl.sslengine.gethandshakesession": [
        "javax.net.ssl.SSLEngine.getHandshakeSession()"
    ],
    "javax.xml.stream.xmlstreamreader.getversion": [
        "javax.xml.stream.XMLStreamReader.getVersion()"
    ],
    "java.beans.propertychangeevent.tostring": [
        "java.beans.PropertyChangeEvent.toString()"
    ],
    "java.awt.event.inputmethodevent.getvisibleposition": [
        "java.awt.event.InputMethodEvent.getVisiblePosition()"
    ],
    "javax.swing.event.documentlistener.insertupdate": [
        "javax.swing.event.DocumentListener.insertUpdate(javax.swing.event.DocumentEvent)"
    ],
    "javax.xml.crypto.dsig.keyinfo.pgpdata.getkeypacket": [
        "javax.xml.crypto.dsig.keyinfo.PGPData.getKeyPacket()"
    ],
    "java.util.stream.stream.empty": [
        "java.util.stream.Stream.empty()"
    ],
    "javax.accessibility.accessibleextendedtable.getaccessibleindex": [
        "javax.accessibility.AccessibleExtendedTable.getAccessibleIndex(int,int)"
    ],
    "java.net.urlstreamhandler.samefile": [
        "java.net.URLStreamHandler.sameFile(java.net.URL,java.net.URL)"
    ],
    "javax.swing.plaf.metal.metalprogressbarui.paintindeterminate": [
        "javax.swing.plaf.metal.MetalProgressBarUI.paintIndeterminate(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.security.cert.x509crlselector.getmaxcrl": [
        "java.security.cert.X509CRLSelector.getMaxCRL()"
    ],
    "javax.management.modelmbean.requiredmodelmbean.store": [
        "javax.management.modelmbean.RequiredModelMBean.store()"
    ],
    "javax.imageio.imageio.getwriterfilesuffixes": [
        "javax.imageio.ImageIO.getWriterFileSuffixes()"
    ],
    "javax.security.sasl.saslclient.unwrap": [
        "javax.security.sasl.SaslClient.unwrap(byte[],int,int)"
    ],
    "javax.swing.tree.defaulttreecellrenderer.repaint": [
        "javax.swing.tree.DefaultTreeCellRenderer.repaint(long,int,int,int,int)",
        "javax.swing.tree.DefaultTreeCellRenderer.repaint()",
        "javax.swing.tree.DefaultTreeCellRenderer.repaint(java.awt.Rectangle)"
    ],
    "javax.swing.jscrollpane.getcorner": [
        "javax.swing.JScrollPane.getCorner(java.lang.String)"
    ],
    "javax.transaction.xa.xaresource.rollback": [
        "javax.transaction.xa.XAResource.rollback(javax.transaction.xa.Xid)"
    ],
    "javax.imageio.imagereader.getrawimagetype": [
        "javax.imageio.ImageReader.getRawImageType(int)"
    ],
    "javax.swing.tree.defaulttreecellrenderer.getdefaultopenicon": [
        "javax.swing.tree.DefaultTreeCellRenderer.getDefaultOpenIcon()"
    ],
    "javax.swing.text.maskformatter.getvalidcharacters": [
        "javax.swing.text.MaskFormatter.getValidCharacters()"
    ],
    "java.nio.channels.filechannel.map": [
        "java.nio.channels.FileChannel.map(java.nio.channels.FileChannel.MapMode,long,long)"
    ],
    "java.awt.image.bufferedimage.getwidth": [
        "java.awt.image.BufferedImage.getWidth(java.awt.image.ImageObserver)",
        "java.awt.image.BufferedImage.getWidth()"
    ],
    "org.w3c.dom.element.getelementsbytagnamens": [
        "org.w3c.dom.Element.getElementsByTagNameNS(java.lang.String,java.lang.String)"
    ],
    "javax.management.monitor.countermonitormbean.setnotify": [
        "javax.management.monitor.CounterMonitorMBean.setNotify(boolean)"
    ],
    "javax.print.attribute.attributesetutilities.synchronizedview": [
        "javax.print.attribute.AttributeSetUtilities.synchronizedView(javax.print.attribute.PrintJobAttributeSet)",
        "javax.print.attribute.AttributeSetUtilities.synchronizedView(javax.print.attribute.PrintRequestAttributeSet)",
        "javax.print.attribute.AttributeSetUtilities.synchronizedView(javax.print.attribute.PrintServiceAttributeSet)",
        "javax.print.attribute.AttributeSetUtilities.synchronizedView(javax.print.attribute.AttributeSet)",
        "javax.print.attribute.AttributeSetUtilities.synchronizedView(javax.print.attribute.DocAttributeSet)"
    ],
    "javax.print.attribute.standard.jobprioritysupported.equals": [
        "javax.print.attribute.standard.JobPrioritySupported.equals(java.lang.Object)"
    ],
    "javax.imageio.imagetypespecifier.createbanded": [
        "javax.imageio.ImageTypeSpecifier.createBanded(java.awt.color.ColorSpace,int[],int[],int,boolean,boolean)"
    ],
    "javax.print.attribute.standard.dialogtypeselection.getstringtable": [
        "javax.print.attribute.standard.DialogTypeSelection.getStringTable()"
    ],
    "java.awt.gridbaglayout.maximumlayoutsize": [
        "java.awt.GridBagLayout.maximumLayoutSize(java.awt.Container)"
    ],
    "javax.swing.text.elementiterator.current": [
        "javax.swing.text.ElementIterator.current()"
    ],
    "java.awt.canvas.update": [
        "java.awt.Canvas.update(java.awt.Graphics)"
    ],
    "java.util.jar.manifest.getattributes": [
        "java.util.jar.Manifest.getAttributes(java.lang.String)"
    ],
    "java.lang.short.bytevalue": [
        "java.lang.Short.byteValue()"
    ],
    "javax.naming.namingexception.appendremainingname": [
        "javax.naming.NamingException.appendRemainingName(javax.naming.Name)"
    ],
    "java.security.spec.pssparameterspec.getsaltlength": [
        "java.security.spec.PSSParameterSpec.getSaltLength()"
    ],
    "java.beans.beancontext.beancontextservicessupport.createbcssserviceprovider": [
        "java.beans.beancontext.BeanContextServicesSupport.createBCSSServiceProvider(java.lang.Class,java.beans.beancontext.BeanContextServiceProvider)"
    ],
    "javax.swing.table.tablecolumn.getwidth": [
        "javax.swing.table.TableColumn.getWidth()"
    ],
    "java.util.logging.logrecord.setresourcebundlename": [
        "java.util.logging.LogRecord.setResourceBundleName(java.lang.String)"
    ],
    "javax.print.attribute.standard.printerstatereasons.getname": [
        "javax.print.attribute.standard.PrinterStateReasons.getName()"
    ],
    "org.xml.sax.helpers.defaulthandler.notationdecl": [
        "org.xml.sax.helpers.DefaultHandler.notationDecl(java.lang.String,java.lang.String,java.lang.String)"
    ],
    "java.lang.reflect.constructor.getannotatedreceivertype": [
        "java.lang.reflect.Constructor.getAnnotatedReceiverType()"
    ],
    "java.util.gregoriancalendar.setgregorianchange": [
        "java.util.GregorianCalendar.setGregorianChange(java.util.Date)"
    ],
    "javax.swing.plaf.multi.multipopupmenuui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiPopupMenuUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "javax.swing.text.defaultcaret.movedot": [
        "javax.swing.text.DefaultCaret.moveDot(int)",
        "javax.swing.text.DefaultCaret.moveDot(int,javax.swing.text.Position.Bias)"
    ],
    "java.time.period.parse": [
        "java.time.Period.parse(java.lang.CharSequence)"
    ],
    "javax.accessibility.accessibleaction.getaccessibleactiondescription": [
        "javax.accessibility.AccessibleAction.getAccessibleActionDescription(int)"
    ],
    "javax.xml.transform.sax.saxsource.setxmlreader": [
        "javax.xml.transform.sax.SAXSource.setXMLReader(org.xml.sax.XMLReader)"
    ],
    "java.text.numberformat.getavailablelocales": [
        "java.text.NumberFormat.getAvailableLocales()"
    ],
    "javax.swing.plaf.basic.basicsliderui.painthorizontallabel": [
        "javax.swing.plaf.basic.BasicSliderUI.paintHorizontalLabel(java.awt.Graphics,int,java.awt.Component)"
    ],
    "java.awt.geom.line2d.float.setline": [
        "java.awt.geom.Line2D.Float.setLine(double,double,double,double)",
        "java.awt.geom.Line2D.Float.setLine(float,float,float,float)"
    ],
    "javax.swing.undo.stateedit.redo": [
        "javax.swing.undo.StateEdit.redo()"
    ],
    "javax.swing.text.html.formview.submitdata": [
        "javax.swing.text.html.FormView.submitData(java.lang.String)"
    ],
    "javax.xml.bind.datatypeconverterinterface.parsedouble": [
        "javax.xml.bind.DatatypeConverterInterface.parseDouble(java.lang.String)"
    ],
    "javax.swing.jmenubar.setui": [
        "javax.swing.JMenuBar.setUI(javax.swing.plaf.MenuBarUI)"
    ],
    "javax.lang.model.util.elementscanner6.visitvariable": [
        "javax.lang.model.util.ElementScanner6.visitVariable(javax.lang.model.element.VariableElement,javax.lang.model.util.ElementScanner6)"
    ],
    "java.awt.im.inputmethodrequests.cancellatestcommittedtext": [
        "java.awt.im.InputMethodRequests.cancelLatestCommittedText(java.text.AttributedCharacterIterator.Attribute[])"
    ],
    "java.time.chrono.chronolocaldate.getera": [
        "java.time.chrono.ChronoLocalDate.getEra()"
    ],
    "java.awt.image.bufferedimagefilter.setcolormodel": [
        "java.awt.image.BufferedImageFilter.setColorModel(java.awt.image.ColorModel)"
    ],
    "java.lang.management.threadmxbean.isthreadcputimeenabled": [
        "java.lang.management.ThreadMXBean.isThreadCpuTimeEnabled()"
    ],
    "javax.swing.defaultrowsorter.usetostring": [
        "javax.swing.DefaultRowSorter.useToString(int)"
    ],
    "javax.sound.sampled.line.info.tostring": [
        "javax.sound.sampled.Line.Info.toString()"
    ],
    "java.text.decimalformatsymbols.setexponentseparator": [
        "java.text.DecimalFormatSymbols.setExponentSeparator(java.lang.String)"
    ],
    "java.sql.sqloutput.writeclob": [
        "java.sql.SQLOutput.writeClob(java.sql.Clob)"
    ],
    "java.sql.drivermanager.getlogwriter": [
        "java.sql.DriverManager.getLogWriter()"
    ],
    "javax.swing.plaf.layerui.processhierarchyboundsevent": [
        "javax.swing.plaf.LayerUI.processHierarchyBoundsEvent(java.awt.event.HierarchyEvent,javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)"
    ],
    "javax.swing.text.jtextcomponent.movecaretposition": [
        "javax.swing.text.JTextComponent.moveCaretPosition(int)"
    ],
    "javax.swing.tree.defaulttreemodel.valueforpathchanged": [
        "javax.swing.tree.DefaultTreeModel.valueForPathChanged(javax.swing.tree.TreePath,java.lang.Object)"
    ],
    "java.sql.blob.getbytes": [
        "java.sql.Blob.getBytes(long,int)"
    ],
    "org.omg.corba.dataoutputstream.write_short": [
        "org.omg.CORBA.DataOutputStream.write_short(short)"
    ],
    "javax.xml.transform.dom.domresult.getnextsibling": [
        "javax.xml.transform.dom.DOMResult.getNextSibling()"
    ],
    "javax.swing.repaintmanager.getvolatileoffscreenbuffer": [
        "javax.swing.RepaintManager.getVolatileOffscreenBuffer(java.awt.Component,int,int)"
    ],
    "java.rmi.registry.registry.list": [
        "java.rmi.registry.Registry.list()"
    ],
    "java.awt.menuitem.processevent": [
        "java.awt.MenuItem.processEvent(java.awt.AWTEvent)"
    ],
    "java.security.cert.policynode.getpolicyqualifiers": [
        "java.security.cert.PolicyNode.getPolicyQualifiers()"
    ],
    "javax.sql.rowset.gettransactionisolation": [
        "javax.sql.RowSet.getTransactionIsolation()"
    ],
    "javax.swing.defaultlistselectionmodel.setvalueisadjusting": [
        "javax.swing.DefaultListSelectionModel.setValueIsAdjusting(boolean)"
    ],
    "java.net.urlconnection.setdooutput": [
        "java.net.URLConnection.setDoOutput(boolean)"
    ],
    "java.awt.defaultkeyboardfocusmanager.dequeuekeyevents": [
        "java.awt.DefaultKeyboardFocusManager.dequeueKeyEvents(long,java.awt.Component)"
    ],
    "org.w3c.dom.attr.getspecified": [
        "org.w3c.dom.Attr.getSpecified()"
    ],
    "java.util.navigablemap.tailmap": [
        "java.util.NavigableMap.tailMap(java.util.NavigableMap)",
        "java.util.NavigableMap.tailMap(K)"
    ],
    "java.awt.geom.point2d.distance": [
        "java.awt.geom.Point2D.distance(java.awt.geom.Point2D)",
        "java.awt.geom.Point2D.distance(double,double,double,double)",
        "java.awt.geom.Point2D.distance(double,double)"
    ],
    "javax.swing.defaultdesktopmanager.closeframe": [
        "javax.swing.DefaultDesktopManager.closeFrame(javax.swing.JInternalFrame)"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.getmaximumdividerlocation": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.getMaximumDividerLocation(javax.swing.JSplitPane)"
    ],
    "javax.swing.jviewport.firepropertychange": [
        "javax.swing.JViewport.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)"
    ],
    "java.awt.flowlayout.setvgap": [
        "java.awt.FlowLayout.setVgap(int)"
    ],
    "java.security.cert.x509crlentry.equals": [
        "java.security.cert.X509CRLEntry.equals(java.lang.Object)"
    ],
    "javax.xml.stream.xmlstreamreader.getproperty": [
        "javax.xml.stream.XMLStreamReader.getProperty(java.lang.String)"
    ],
    "java.beans.simplebeaninfo.getmethoddescriptors": [
        "java.beans.SimpleBeanInfo.getMethodDescriptors()"
    ],
    "java.rmi.activation.activationexception.getcause": [
        "java.rmi.activation.ActivationException.getCause()"
    ],
    "java.util.concurrent.concurrentskiplistmap.floorkey": [
        "java.util.concurrent.ConcurrentSkipListMap.floorKey(K)"
    ],
    "java.awt.filedialog.addnotify": [
        "java.awt.FileDialog.addNotify()"
    ],
    "org.omg.corba.localobject._duplicate": [
        "org.omg.CORBA.LocalObject._duplicate()"
    ],
    "javax.print.attribute.size2dsyntax.hashcode": [
        "javax.print.attribute.Size2DSyntax.hashCode()"
    ],
    "javax.swing.borderfactory.createemptyborder": [
        "javax.swing.BorderFactory.createEmptyBorder()",
        "javax.swing.BorderFactory.createEmptyBorder(int,int,int,int)"
    ],
    "org.w3c.dom.element.getattributens": [
        "org.w3c.dom.Element.getAttributeNS(java.lang.String,java.lang.String)"
    ],
    "org.omg.dynamicany._dynenumstub.get_long": [
        "org.omg.DynamicAny._DynEnumStub.get_long()"
    ],
    "java.util.concurrent.concurrenthashmap.replace": [
        "java.util.concurrent.ConcurrentHashMap.replace(java.util.concurrent.ConcurrentHashMap,java.util.concurrent.ConcurrentHashMap,java.util.concurrent.ConcurrentHashMap)",
        "java.util.concurrent.ConcurrentHashMap.replace(java.util.concurrent.ConcurrentHashMap,java.util.concurrent.ConcurrentHashMap)",
        "java.util.concurrent.ConcurrentHashMap.replace(K,V,V)",
        "java.util.concurrent.ConcurrentHashMap.replace(K,V)"
    ],
    "java.awt.choice.insert": [
        "java.awt.Choice.insert(java.lang.String,int)"
    ],
    "java.util.deque.remove": [
        "java.util.Deque.remove(java.lang.Object)"
    ],
    "javax.swing.jfilechooser.getcurrentdirectory": [
        "javax.swing.JFileChooser.getCurrentDirectory()"
    ],
    "java.awt.list.deselect": [
        "java.awt.List.deselect(int)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintradiobuttonmenuitembackground": [
        "javax.swing.plaf.synth.SynthPainter.paintRadioButtonMenuItemBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.getselectionpath": [
        "javax.swing.tree.DefaultTreeSelectionModel.getSelectionPath()"
    ],
    "java.awt.image.renderable.renderableimageop.getproperty": [
        "java.awt.image.renderable.RenderableImageOp.getProperty(java.lang.String)"
    ],
    "javax.xml.transform.sax.saxresult.gethandler": [
        "javax.xml.transform.sax.SAXResult.getHandler()"
    ],
    "java.time.zone.zonerulesprovider.provideversions": [
        "java.time.zone.ZoneRulesProvider.provideVersions(java.lang.String)"
    ],
    "javax.swing.buttonmodel.getactioncommand": [
        "javax.swing.ButtonModel.getActionCommand()"
    ],
    "java.lang.annotation.repeatable.value": [
        "java.lang.annotation.Repeatable.value()"
    ],
    "org.omg.portableinterceptor.clientrequestinfooperations.get_effective_components": [
        "org.omg.PortableInterceptor.ClientRequestInfoOperations.get_effective_components(int)"
    ],
    "javax.imageio.imagewriter.dispose": [
        "javax.imageio.ImageWriter.dispose()"
    ],
    "javax.swing.jtextarea.getscrollableunitincrement": [
        "javax.swing.JTextArea.getScrollableUnitIncrement(java.awt.Rectangle,int,int)"
    ],
    "javax.swing.jtable.getvalueat": [
        "javax.swing.JTable.getValueAt(int,int)"
    ],
    "javax.xml.bind.typeconstraintexception.setlinkedexception": [
        "javax.xml.bind.TypeConstraintException.setLinkedException(java.lang.Throwable)"
    ],
    "java.awt.graphicsconfiguration.getdevice": [
        "java.awt.GraphicsConfiguration.getDevice()"
    ],
    "javax.swing.text.styleconstants.issubscript": [
        "javax.swing.text.StyleConstants.isSubscript(javax.swing.text.AttributeSet)"
    ],
    "java.util.concurrent.forkjoinpool.getqueuedsubmissioncount": [
        "java.util.concurrent.ForkJoinPool.getQueuedSubmissionCount()"
    ],
    "javax.management.remote.targetednotification.tostring": [
        "javax.management.remote.TargetedNotification.toString()"
    ],
    "javax.swing.abstractbutton.setdisplayedmnemonicindex": [
        "javax.swing.AbstractButton.setDisplayedMnemonicIndex(int)"
    ],
    "javax.swing.defaultbuttonmodel.getitemlisteners": [
        "javax.swing.DefaultButtonModel.getItemListeners()"
    ],
    "java.time.offsettime.range": [
        "java.time.OffsetTime.range(java.time.temporal.TemporalField)"
    ],
    "java.util.list.spliterator": [
        "java.util.List.spliterator()"
    ],
    "java.security.cert.x509certselector.setsubjectkeyidentifier": [
        "java.security.cert.X509CertSelector.setSubjectKeyIdentifier(byte[])"
    ],
    "javax.imageio.imagewriter.clearabortrequest": [
        "javax.imageio.ImageWriter.clearAbortRequest()"
    ],
    "javax.xml.ws.binding.gethandlerchain": [
        "javax.xml.ws.Binding.getHandlerChain()"
    ],
    "java.lang.class.getinterfaces": [
        "java.lang.Class.getInterfaces()"
    ],
    "java.util.zip.zipoutputstream.setcomment": [
        "java.util.zip.ZipOutputStream.setComment(java.lang.String)"
    ],
    "javax.xml.stream.events.attribute.getdtdtype": [
        "javax.xml.stream.events.Attribute.getDTDType()"
    ],
    "java.time.zone.zoneoffsettransitionrule.tostring": [
        "java.time.zone.ZoneOffsetTransitionRule.toString()"
    ],
    "javax.swing.text.asyncboxview.setparent": [
        "javax.swing.text.AsyncBoxView.setParent(javax.swing.text.View)"
    ],
    "javax.imageio.spi.imagereaderwriterspi.getextrastreammetadataformatnames": [
        "javax.imageio.spi.ImageReaderWriterSpi.getExtraStreamMetadataFormatNames()"
    ],
    "java.awt.menuitem.removeactionlistener": [
        "java.awt.MenuItem.removeActionListener(java.awt.event.ActionListener)"
    ],
    "java.beans.beancontext.beancontextservicessupport.getbeancontextservicespeer": [
        "java.beans.beancontext.BeanContextServicesSupport.getBeanContextServicesPeer()"
    ],
    "javax.xml.transform.sourcelocator.getcolumnnumber": [
        "javax.xml.transform.SourceLocator.getColumnNumber()"
    ],
    "javax.swing.tooltipmanager.setinitialdelay": [
        "javax.swing.ToolTipManager.setInitialDelay(int)"
    ],
    "javax.xml.ws.endpointreference.readfrom": [
        "javax.xml.ws.EndpointReference.readFrom(javax.xml.transform.Source)"
    ],
    "java.util.resourcebundle.control.getfallbacklocale": [
        "java.util.ResourceBundle.Control.getFallbackLocale(java.lang.String,java.util.Locale)"
    ],
    "java.util.concurrent.concurrentskiplistmap.entryset": [
        "java.util.concurrent.ConcurrentSkipListMap.entrySet()"
    ],
    "java.awt.keyboardfocusmanager.getcurrentkeyboardfocusmanager": [
        "java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager()"
    ],
    "java.util.function.bipredicate.and": [
        "java.util.function.BiPredicate.and(java.util.function.BiPredicate<? super,? super java.util.function.BiPredicate>)",
        "java.util.function.BiPredicate.and(java.util.function.BiPredicate<? super,? super U>)"
    ],
    "java.time.dayofweek.of": [
        "java.time.DayOfWeek.of(int)"
    ],
    "javax.xml.ws.spi.http.httpexchange.getrequesturi": [
        "javax.xml.ws.spi.http.HttpExchange.getRequestURI()"
    ],
    "javax.lang.model.util.typekindvisitor6.visitnotypeasnone": [
        "javax.lang.model.util.TypeKindVisitor6.visitNoTypeAsNone(javax.lang.model.type.NoType,javax.lang.model.util.TypeKindVisitor6)"
    ],
    "java.util.concurrent.completionstage.thenrunasync": [
        "java.util.concurrent.CompletionStage.thenRunAsync(java.lang.Runnable)",
        "java.util.concurrent.CompletionStage.thenRunAsync(java.lang.Runnable,java.util.concurrent.Executor)"
    ],
    "javax.swing.plaf.synth.synthpainter.painttabbedpanetabbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int,int)",
        "javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)"
    ],
    "java.lang.reflect.annotatedelement.getdeclaredannotation": [
        "java.lang.reflect.AnnotatedElement.getDeclaredAnnotation(java.lang.Class<T>)"
    ],
    "java.nio.channels.selectionkey.isacceptable": [
        "java.nio.channels.SelectionKey.isAcceptable()"
    ],
    "javax.crypto.cipherspi.enginedofinal": [
        "javax.crypto.CipherSpi.engineDoFinal(byte[],int,int,byte[],int)",
        "javax.crypto.CipherSpi.engineDoFinal(java.nio.ByteBuffer,java.nio.ByteBuffer)",
        "javax.crypto.CipherSpi.engineDoFinal(byte[],int,int)"
    ],
    "java.util.concurrent.locks.abstractqueuedsynchronizer.setstate": [
        "java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int)"
    ],
    "javax.swing.plaf.multi.multitoolbarui.installui": [
        "javax.swing.plaf.multi.MultiToolBarUI.installUI(javax.swing.JComponent)"
    ],
    "java.net.urlconnection.setdefaultusecaches": [
        "java.net.URLConnection.setDefaultUseCaches(boolean)"
    ],
    "javax.swing.plaf.metal.oceantheme.getprimary3": [
        "javax.swing.plaf.metal.OceanTheme.getPrimary3()"
    ],
    "javax.xml.ws.wsaddressing.w3cendpointreference.writeto": [
        "javax.xml.ws.wsaddressing.W3CEndpointReference.writeTo(javax.xml.transform.Result)"
    ],
    "javax.sql.rowset.spi.syncresolver.nextconflict": [
        "javax.sql.rowset.spi.SyncResolver.nextConflict()"
    ],
    "javax.swing.jscrollpane.getviewportborderbounds": [
        "javax.swing.JScrollPane.getViewportBorderBounds()"
    ],
    "java.lang.invoke.methodhandles.lookup.findspecial": [
        "java.lang.invoke.MethodHandles.Lookup.findSpecial(java.lang.Class<?>,java.lang.String,java.lang.invoke.MethodType,java.lang.Class<?>)"
    ],
    "java.awt.geom.affinetransform.getshearinstance": [
        "java.awt.geom.AffineTransform.getShearInstance(double,double)"
    ],
    "org.omg.corba.typecodeholder._type": [
        "org.omg.CORBA.TypeCodeHolder._type()"
    ],
    "javax.swing.jpopupmenu.setui": [
        "javax.swing.JPopupMenu.setUI(javax.swing.plaf.PopupMenuUI)"
    ],
    "javax.management.openmbean.openmbeanoperationinfosupport.tostring": [
        "javax.management.openmbean.OpenMBeanOperationInfoSupport.toString()"
    ],
    "javax.management.relation.roleunresolved.setproblemtype": [
        "javax.management.relation.RoleUnresolved.setProblemType(int)"
    ],
    "javax.management.remote.rmi.rmiserverimpl.setmbeanserver": [
        "javax.management.remote.rmi.RMIServerImpl.setMBeanServer(javax.management.MBeanServer)"
    ],
    "java.awt.textcomponent.settext": [
        "java.awt.TextComponent.setText(java.lang.String)"
    ],
    "java.net.httpurlconnection.getheaderfieldkey": [
        "java.net.HttpURLConnection.getHeaderFieldKey(int)"
    ],
    "javax.xml.bind.marshaller.setproperty": [
        "javax.xml.bind.Marshaller.setProperty(java.lang.String,java.lang.Object)"
    ],
    "java.util.jar.attributes.name.equals": [
        "java.util.jar.Attributes.Name.equals(java.lang.Object)"
    ],
    "javax.swing.tree.fixedheightlayoutcache.getrowforpath": [
        "javax.swing.tree.FixedHeightLayoutCache.getRowForPath(javax.swing.tree.TreePath)"
    ],
    "javax.sql.rowset.serial.serialstruct.hashcode": [
        "javax.sql.rowset.serial.SerialStruct.hashCode()"
    ],
    "javax.imageio.spi.imagereaderwriterspi.getfilesuffixes": [
        "javax.imageio.spi.ImageReaderWriterSpi.getFileSuffixes()"
    ],
    "java.awt.keyboardfocusmanager.getpropertychangelisteners": [
        "java.awt.KeyboardFocusManager.getPropertyChangeListeners(java.lang.String)",
        "java.awt.KeyboardFocusManager.getPropertyChangeListeners()"
    ],
    "javax.naming.context.destroysubcontext": [
        "javax.naming.Context.destroySubcontext(java.lang.String)",
        "javax.naming.Context.destroySubcontext(javax.naming.Name)"
    ],
    "javax.swing.plaf.basic.basictextui.getnextvisualpositionfrom": [
        "javax.swing.plaf.basic.BasicTextUI.getNextVisualPositionFrom(javax.swing.text.JTextComponent,int,javax.swing.text.Position.Bias,int,javax.swing.text.Position.Bias[])"
    ],
    "javax.management.objectname.quote": [
        "javax.management.ObjectName.quote(java.lang.String)"
    ],
    "java.awt.im.inputcontext.selectinputmethod": [
        "java.awt.im.InputContext.selectInputMethod(java.util.Locale)"
    ],
    "java.text.spi.numberformatprovider.getcurrencyinstance": [
        "java.text.spi.NumberFormatProvider.getCurrencyInstance(java.util.Locale)"
    ],
    "javax.sound.midi.sequencer.getloopstartpoint": [
        "javax.sound.midi.Sequencer.getLoopStartPoint()"
    ],
    "javax.swing.text.defaultstyleddocument.attributeundoableedit.undo": [
        "javax.swing.text.DefaultStyledDocument.AttributeUndoableEdit.undo()"
    ],
    "javax.print.attribute.standard.jobholduntil.equals": [
        "javax.print.attribute.standard.JobHoldUntil.equals(java.lang.Object)"
    ],
    "javax.swing.jcomponent.paintcomponent": [
        "javax.swing.JComponent.paintComponent(java.awt.Graphics)"
    ],
    "java.time.localtime.plus": [
        "java.time.LocalTime.plus(java.time.temporal.TemporalAmount)",
        "java.time.LocalTime.plus(long,java.time.temporal.TemporalUnit)"
    ],
    "java.lang.annotation.annotation.tostring": [
        "java.lang.annotation.Annotation.toString()"
    ],
    "javax.swing.border.softbevelborder.paintborder": [
        "javax.swing.border.SoftBevelBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.imageio.metadata.iiometadatanode.clonenode": [
        "javax.imageio.metadata.IIOMetadataNode.cloneNode(boolean)"
    ],
    "javax.swing.jcomponent.setenabled": [
        "javax.swing.JComponent.setEnabled(boolean)"
    ],
    "javax.swing.text.defaulthighlighter.paint": [
        "javax.swing.text.DefaultHighlighter.paint(java.awt.Graphics)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getseparatorforeground": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getSeparatorForeground()"
    ],
    "java.io.filterreader.reset": [
        "java.io.FilterReader.reset()"
    ],
    "javax.imageio.iioparam.setsourceregion": [
        "javax.imageio.IIOParam.setSourceRegion(java.awt.Rectangle)"
    ],
    "java.security.signaturespi.clone": [
        "java.security.SignatureSpi.clone()"
    ],
    "javax.sound.midi.sequencer.setsequence": [
        "javax.sound.midi.Sequencer.setSequence(javax.sound.midi.Sequence)",
        "javax.sound.midi.Sequencer.setSequence(java.io.InputStream)"
    ],
    "java.sql.statement.executebatch": [
        "java.sql.Statement.executeBatch()"
    ],
    "java.awt.menubar.removenotify": [
        "java.awt.MenuBar.removeNotify()"
    ],
    "org.omg.corba.datainputstream.read_boolean": [
        "org.omg.CORBA.DataInputStream.read_boolean()"
    ],
    "java.awt.awtkeystroke.getmodifiers": [
        "java.awt.AWTKeyStroke.getModifiers()"
    ],
    "javax.swing.plaf.multi.multicomboboxui.getuis": [
        "javax.swing.plaf.multi.MultiComboBoxUI.getUIs()"
    ],
    "java.awt.geom.cubiccurve2d.float.getp2": [
        "java.awt.geom.CubicCurve2D.Float.getP2()"
    ],
    "java.time.temporal.chronounit.valueof": [
        "java.time.temporal.ChronoUnit.valueOf(java.lang.String)"
    ],
    "java.awt.choice.removeall": [
        "java.awt.Choice.removeAll()"
    ],
    "java.awt.image.renderable.renderableimage.createscaledrendering": [
        "java.awt.image.renderable.RenderableImage.createScaledRendering(int,int,java.awt.RenderingHints)"
    ],
    "javax.print.attribute.standard.printerinfo.getcategory": [
        "javax.print.attribute.standard.PrinterInfo.getCategory()"
    ],
    "javax.imageio.imageio.getreadermimetypes": [
        "javax.imageio.ImageIO.getReaderMIMETypes()"
    ],
    "java.awt.menuitem.getaccessiblecontext": [
        "java.awt.MenuItem.getAccessibleContext()"
    ],
    "java.awt.component.getlocation": [
        "java.awt.Component.getLocation()"
    ],
    "java.sql.sqlinput.readclob": [
        "java.sql.SQLInput.readClob()"
    ],
    "java.lang.strictmath.subtractexact": [
        "java.lang.StrictMath.subtractExact(int,int)",
        "java.lang.StrictMath.subtractExact(long,long)"
    ],
    "javax.xml.bind.datatypeconverter.parsedate": [
        "javax.xml.bind.DatatypeConverter.parseDate(java.lang.String)"
    ],
    "java.beans.beancontext.beancontextservicerevokedevent.getserviceclass": [
        "java.beans.beancontext.BeanContextServiceRevokedEvent.getServiceClass()"
    ],
    "javax.swing.table.defaulttablecellrenderer.invalidate": [
        "javax.swing.table.DefaultTableCellRenderer.invalidate()"
    ],
    "java.util.linkedlist.push": [
        "java.util.LinkedList.push(E)",
        "java.util.LinkedList.push(java.util.LinkedList)"
    ],
    "javax.tools.simplejavafileobject.openwriter": [
        "javax.tools.SimpleJavaFileObject.openWriter()"
    ],
    "java.util.navigableset.ceiling": [
        "java.util.NavigableSet.ceiling(E)",
        "java.util.NavigableSet.ceiling(java.util.NavigableSet)"
    ],
    "java.awt.dnd.droptargetcontext.dropcomplete": [
        "java.awt.dnd.DropTargetContext.dropComplete(boolean)"
    ],
    "java.time.zoneddatetime.getminute": [
        "java.time.ZonedDateTime.getMinute()"
    ],
    "java.lang.invoke.methodhandleinfo.getdeclaringclass": [
        "java.lang.invoke.MethodHandleInfo.getDeclaringClass()"
    ],
    "java.util.concurrent.concurrenthashmap.reducekeystolong": [
        "java.util.concurrent.ConcurrentHashMap.reduceKeysToLong(long,java.util.function.ToLongFunction<? super java.util.concurrent.ConcurrentHashMap>,long,java.util.function.LongBinaryOperator)",
        "java.util.concurrent.ConcurrentHashMap.reduceKeysToLong(long,java.util.function.ToLongFunction<? super K>,long,java.util.function.LongBinaryOperator)"
    ],
    "javax.print.attribute.standard.numberupsupported.getname": [
        "javax.print.attribute.standard.NumberUpSupported.getName()"
    ],
    "org.omg.dynamicany.dynvalueoperations.current_member_name": [
        "org.omg.DynamicAny.DynValueOperations.current_member_name()"
    ],
    "javax.swing.text.styleconstants.tostring": [
        "javax.swing.text.StyleConstants.toString()"
    ],
    "java.awt.component.setignorerepaint": [
        "java.awt.Component.setIgnoreRepaint(boolean)"
    ],
    "java.lang.math.exp": [
        "java.lang.Math.exp(double)"
    ],
    "java.sql.batchupdateexception.getlargeupdatecounts": [
        "java.sql.BatchUpdateException.getLargeUpdateCounts()"
    ],
    "java.awt.toolkit.getprintjob": [
        "java.awt.Toolkit.getPrintJob(java.awt.Frame,java.lang.String,java.awt.JobAttributes,java.awt.PageAttributes)",
        "java.awt.Toolkit.getPrintJob(java.awt.Frame,java.lang.String,java.util.Properties)"
    ],
    "javax.swing.plaf.metal.metalsliderui.gettracklength": [
        "javax.swing.plaf.metal.MetalSliderUI.getTrackLength()"
    ],
    "javax.sql.rowset.getquerytimeout": [
        "javax.sql.RowSet.getQueryTimeout()"
    ],
    "java.awt.filedialog.setfile": [
        "java.awt.FileDialog.setFile(java.lang.String)"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.startdocument": [
        "org.xml.sax.helpers.XMLFilterImpl.startDocument()"
    ],
    "java.io.externalizable.writeexternal": [
        "java.io.Externalizable.writeExternal(java.io.ObjectOutput)"
    ],
    "java.sql.callablestatement.getnclob": [
        "java.sql.CallableStatement.getNClob(java.lang.String)",
        "java.sql.CallableStatement.getNClob(int)"
    ],
    "javax.management.openmbean.tabulartype.equals": [
        "javax.management.openmbean.TabularType.equals(java.lang.Object)"
    ],
    "javax.print.printservice.getattributes": [
        "javax.print.PrintService.getAttributes()"
    ],
    "org.w3c.dom.node.comparedocumentposition": [
        "org.w3c.dom.Node.compareDocumentPosition(org.w3c.dom.Node)"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readref": [
        "javax.sql.rowset.serial.SQLInputImpl.readRef()"
    ],
    "java.awt.textfield.getminimumsize": [
        "java.awt.TextField.getMinimumSize(int)",
        "java.awt.TextField.getMinimumSize()"
    ],
    "java.sql.parametermetadata.getparametermode": [
        "java.sql.ParameterMetaData.getParameterMode(int)"
    ],
    "java.util.stream.collector.characteristics.values": [
        "java.util.stream.Collector.Characteristics.values()"
    ],
    "java.io.uncheckedioexception.getcause": [
        "java.io.UncheckedIOException.getCause()"
    ],
    "java.awt.image.rescaleop.createcompatibledestraster": [
        "java.awt.image.RescaleOp.createCompatibleDestRaster(java.awt.image.Raster)"
    ],
    "javax.imageio.imageio.getreaderfilesuffixes": [
        "javax.imageio.ImageIO.getReaderFileSuffixes()"
    ],
    "javax.swing.plaf.metal.metalscrollbarui.createincreasebutton": [
        "javax.swing.plaf.metal.MetalScrollBarUI.createIncreaseButton(int)"
    ],
    "javax.swing.text.documentfilter.filterbypass.getdocument": [
        "javax.swing.text.DocumentFilter.FilterBypass.getDocument()"
    ],
    "javax.swing.jmenuitem.configurepropertiesfromaction": [
        "javax.swing.JMenuItem.configurePropertiesFromAction(javax.swing.Action)"
    ],
    "javax.naming.directory.attributemodificationexception.tostring": [
        "javax.naming.directory.AttributeModificationException.toString()"
    ],
    "java.util.abstractmap.simpleentry.setvalue": [
        "java.util.AbstractMap.SimpleEntry.setValue(java.util.AbstractMap.SimpleEntry)",
        "java.util.AbstractMap.SimpleEntry.setValue(V)"
    ],
    "java.lang.integer.decode": [
        "java.lang.Integer.decode(java.lang.String)"
    ],
    "java.nio.file.files.newbytechannel": [
        "java.nio.file.Files.newByteChannel(java.nio.file.Path,java.util.Set<? extends java.nio.file.OpenOption>,java.nio.file.attribute.FileAttribute<?>)",
        "java.nio.file.Files.newByteChannel(java.nio.file.Path,java.util.Set<? extends java.nio.file.OpenOption>,java.nio.file.attribute.FileAttribute<?>...)",
        "java.nio.file.Files.newByteChannel(java.nio.file.Path,java.nio.file.OpenOption)",
        "java.nio.file.Files.newByteChannel(java.nio.file.Path,java.nio.file.OpenOption...)"
    ],
    "java.awt.robot.getpixelcolor": [
        "java.awt.Robot.getPixelColor(int,int)"
    ],
    "javax.management.mbeanserver.querynames": [
        "javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)"
    ],
    "javax.swing.plaf.multi.multitoolbarui.getminimumsize": [
        "javax.swing.plaf.multi.MultiToolBarUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "javax.imageio.imagewriter.setoutput": [
        "javax.imageio.ImageWriter.setOutput(java.lang.Object)"
    ],
    "java.text.decimalformat.setgroupingsize": [
        "java.text.DecimalFormat.setGroupingSize(int)"
    ],
    "java.awt.datatransfer.flavormap.getnativesforflavors": [
        "java.awt.datatransfer.FlavorMap.getNativesForFlavors(java.awt.datatransfer.DataFlavor[])"
    ],
    "java.util.doublesummarystatistics.getcount": [
        "java.util.DoubleSummaryStatistics.getCount()"
    ],
    "javax.swing.defaultbuttonmodel.isenabled": [
        "javax.swing.DefaultButtonModel.isEnabled()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintcomboboxbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintComboBoxBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.plaf.basic.basiclistui.convertytorow": [
        "javax.swing.plaf.basic.BasicListUI.convertYToRow(int)"
    ],
    "javax.swing.plaf.basic.basictextui.createkeymap": [
        "javax.swing.plaf.basic.BasicTextUI.createKeymap()"
    ],
    "org.xml.sax.helpers.xmlreaderadapter.endprefixmapping": [
        "org.xml.sax.helpers.XMLReaderAdapter.endPrefixMapping(java.lang.String)"
    ],
    "javax.xml.stream.xmlstreamwriter.writenamespace": [
        "javax.xml.stream.XMLStreamWriter.writeNamespace(java.lang.String,java.lang.String)"
    ],
    "javax.swing.abstractbutton.getmargin": [
        "javax.swing.AbstractButton.getMargin()"
    ],
    "javax.xml.transform.sax.templateshandler.gettemplates": [
        "javax.xml.transform.sax.TemplatesHandler.getTemplates()"
    ],
    "javax.sql.rowsetmetadata.setscale": [
        "javax.sql.RowSetMetaData.setScale(int,int)"
    ],
    "java.util.concurrent.forkjointask.helpquiesce": [
        "java.util.concurrent.ForkJoinTask.helpQuiesce()"
    ],
    "javax.swing.jlist.addlistselectionlistener": [
        "javax.swing.JList.addListSelectionListener(javax.swing.event.ListSelectionListener)"
    ],
    "javax.swing.table.tablecolumn.setmaxwidth": [
        "javax.swing.table.TableColumn.setMaxWidth(int)"
    ],
    "java.time.offsettime.minusseconds": [
        "java.time.OffsetTime.minusSeconds(long)"
    ],
    "java.util.set.iterator": [
        "java.util.Set.iterator()"
    ],
    "java.time.chrono.chronoperiod.addto": [
        "java.time.chrono.ChronoPeriod.addTo(java.time.temporal.Temporal)"
    ],
    "java.awt.component.isforegroundset": [
        "java.awt.Component.isForegroundSet()"
    ],
    "javax.net.ssl.sslsession.getid": [
        "javax.net.ssl.SSLSession.getId()"
    ],
    "javax.xml.ws.service.mode.values": [
        "javax.xml.ws.Service.Mode.values()"
    ],
    "javax.swing.plaf.metal.metaltheme.getcontrol": [
        "javax.swing.plaf.metal.MetalTheme.getControl()"
    ],
    "java.awt.image.databufferfloat.getelemdouble": [
        "java.awt.image.DataBufferFloat.getElemDouble(int,int)"
    ],
    "java.time.zoneddatetime.withnano": [
        "java.time.ZonedDateTime.withNano(int)"
    ],
    "java.time.offsetdatetime.tolocaldate": [
        "java.time.OffsetDateTime.toLocalDate()"
    ],
    "java.lang.ref.softreference.get": [
        "java.lang.ref.SoftReference.get()"
    ],
    "java.util.zip.checkedoutputstream.getchecksum": [
        "java.util.zip.CheckedOutputStream.getChecksum()"
    ],
    "org.xml.sax.xmlreader.getfeature": [
        "org.xml.sax.XMLReader.getFeature(java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthlabelui.getmaximumsize": [
        "javax.swing.plaf.synth.SynthLabelUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "java.awt.toolkit.createpopupmenu": [
        "java.awt.Toolkit.createPopupMenu(java.awt.PopupMenu)"
    ],
    "java.awt.font.texthitinfo.beforeoffset": [
        "java.awt.font.TextHitInfo.beforeOffset(int)"
    ],
    "java.util.function.longunaryoperator.identity": [
        "java.util.function.LongUnaryOperator.identity()"
    ],
    "java.awt.font.decode": [
        "java.awt.Font.decode(java.lang.String)"
    ],
    "java.lang.character.equals": [
        "java.lang.Character.equals(java.lang.Object)"
    ],
    "java.awt.color.icc_profilergb.getmatrix": [
        "java.awt.color.ICC_ProfileRGB.getMatrix()"
    ],
    "javax.swing.text.zoneview.getviewindexatposition": [
        "javax.swing.text.ZoneView.getViewIndexAtPosition(int)"
    ],
    "java.util.optional.orelse": [
        "java.util.Optional.orElse(java.util.Optional)",
        "java.util.Optional.orElse(T)"
    ],
    "java.text.collationelementiterator.getmaxexpansion": [
        "java.text.CollationElementIterator.getMaxExpansion(int)"
    ],
    "java.time.chrono.chronozoneddatetime.tolocaldatetime": [
        "java.time.chrono.ChronoZonedDateTime.toLocalDateTime()"
    ],
    "javax.print.attribute.attributeset.add": [
        "javax.print.attribute.AttributeSet.add(javax.print.attribute.Attribute)"
    ],
    "java.text.decimalformat.setpositiveprefix": [
        "java.text.DecimalFormat.setPositivePrefix(java.lang.String)"
    ],
    "org.omg.corba.portable.outputstream.create_input_stream": [
        "org.omg.CORBA.portable.OutputStream.create_input_stream()"
    ],
    "javax.xml.bind.datatypeconverterinterface.printunsignedshort": [
        "javax.xml.bind.DatatypeConverterInterface.printUnsignedShort(int)"
    ],
    "javax.xml.ws.endpointreference.getport": [
        "javax.xml.ws.EndpointReference.getPort(java.lang.Class<T>,javax.xml.ws.WebServiceFeature...)"
    ],
    "javax.swing.text.html.htmleditorkit.isautoformsubmission": [
        "javax.swing.text.html.HTMLEditorKit.isAutoFormSubmission()"
    ],
    "java.time.localdatetime.plusweeks": [
        "java.time.LocalDateTime.plusWeeks(long)"
    ],
    "java.sql.databasemetadata.getmaxrowsize": [
        "java.sql.DatabaseMetaData.getMaxRowSize()"
    ],
    "javax.management.query.plus": [
        "javax.management.Query.plus(javax.management.ValueExp,javax.management.ValueExp)"
    ],
    "java.sql.clientinfostatus.values": [
        "java.sql.ClientInfoStatus.values()"
    ],
    "org.omg.dynamicany._dynfixedstub.insert_ulong": [
        "org.omg.DynamicAny._DynFixedStub.insert_ulong(int)"
    ],
    "javax.swing.jprogressbar.setborderpainted": [
        "javax.swing.JProgressBar.setBorderPainted(boolean)"
    ],
    "javax.swing.text.paragraphview.changedupdate": [
        "javax.swing.text.ParagraphView.changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "javax.naming.event.namingexceptionevent.dispatch": [
        "javax.naming.event.NamingExceptionEvent.dispatch(javax.naming.event.NamingListener)"
    ],
    "org.omg.dynamicany._dynanystub.from_any": [
        "org.omg.DynamicAny._DynAnyStub.from_any(org.omg.CORBA.Any)"
    ],
    "java.awt.graphics.setxormode": [
        "java.awt.Graphics.setXORMode(java.awt.Color)"
    ],
    "java.sql.resultset.updatesqlxml": [
        "java.sql.ResultSet.updateSQLXML(int,java.sql.SQLXML)",
        "java.sql.ResultSet.updateSQLXML(java.lang.String,java.sql.SQLXML)"
    ],
    "java.lang.management.threadinfo.getthreadstate": [
        "java.lang.management.ThreadInfo.getThreadState()"
    ],
    "javax.swing.jinternalframe.isclosable": [
        "javax.swing.JInternalFrame.isClosable()"
    ],
    "javax.swing.plaf.basic.basiclistui.paint": [
        "javax.swing.plaf.basic.BasicListUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintsplitpanebackground": [
        "javax.swing.plaf.synth.SynthPainter.paintSplitPaneBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.awt.mediatracker.waitforall": [
        "java.awt.MediaTracker.waitForAll(long)",
        "java.awt.MediaTracker.waitForAll()"
    ],
    "org.omg.dynamicany._dynunionstub.member": [
        "org.omg.DynamicAny._DynUnionStub.member()"
    ],
    "java.time.chrono.hijrahchronology.dateepochday": [
        "java.time.chrono.HijrahChronology.dateEpochDay(long)"
    ],
    "java.io.filterwriter.write": [
        "java.io.FilterWriter.write(int)",
        "java.io.FilterWriter.write(java.lang.String,int,int)",
        "java.io.FilterWriter.write(char[],int,int)"
    ],
    "javax.xml.transform.stream.streamsource.setsystemid": [
        "javax.xml.transform.stream.StreamSource.setSystemId(java.io.File)",
        "javax.xml.transform.stream.StreamSource.setSystemId(java.lang.String)"
    ],
    "java.awt.font.glyphvector.getglyphlogicalbounds": [
        "java.awt.font.GlyphVector.getGlyphLogicalBounds(int)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintscrollbartrackborder": [
        "javax.swing.plaf.synth.SynthPainter.paintScrollBarTrackBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",
        "javax.swing.plaf.synth.SynthPainter.paintScrollBarTrackBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)"
    ],
    "java.awt.jobattributes.getdialog": [
        "java.awt.JobAttributes.getDialog()"
    ],
    "java.time.chrono.chronozoneddatetime.with": [
        "java.time.chrono.ChronoZonedDateTime.with(java.time.temporal.TemporalField,long)",
        "java.time.chrono.ChronoZonedDateTime.with(java.time.temporal.TemporalAdjuster)"
    ],
    "javax.print.attribute.standard.printerlocation.getname": [
        "javax.print.attribute.standard.PrinterLocation.getName()"
    ],
    "java.util.concurrent.copyonwritearrayset.iterator": [
        "java.util.concurrent.CopyOnWriteArraySet.iterator()"
    ],
    "java.lang.management.runtimemxbean.getinputarguments": [
        "java.lang.management.RuntimeMXBean.getInputArguments()"
    ],
    "java.nio.file.path.compareto": [
        "java.nio.file.Path.compareTo(java.nio.file.Path)"
    ],
    "java.util.logging.logger.setuseparenthandlers": [
        "java.util.logging.Logger.setUseParentHandlers(boolean)"
    ],
    "org.omg.dynamicany.dynvaluecommonoperations.set_to_null": [
        "org.omg.DynamicAny.DynValueCommonOperations.set_to_null()"
    ],
    "javax.sql.rowset.gettypemap": [
        "javax.sql.RowSet.getTypeMap()"
    ],
    "javax.xml.crypto.dsig.spec.xslttransformparameterspec.getstylesheet": [
        "javax.xml.crypto.dsig.spec.XSLTTransformParameterSpec.getStylesheet()"
    ],
    "javax.swing.jinternalframe.setnormalbounds": [
        "javax.swing.JInternalFrame.setNormalBounds(java.awt.Rectangle)"
    ],
    "java.util.map.entry.equals": [
        "java.util.Map.Entry.equals(java.lang.Object)"
    ],
    "javax.print.attribute.standard.jobsheets.getenumvaluetable": [
        "javax.print.attribute.standard.JobSheets.getEnumValueTable()"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.createpopup": [
        "javax.swing.plaf.basic.BasicComboBoxUI.createPopup()"
    ],
    "java.util.concurrent.copyonwritearrayset.toarray": [
        "java.util.concurrent.CopyOnWriteArraySet.toArray(T[])",
        "java.util.concurrent.CopyOnWriteArraySet.toArray()"
    ],
    "org.ietf.jgss.gsscontext.getsrcname": [
        "org.ietf.jgss.GSSContext.getSrcName()"
    ],
    "javax.print.attribute.attributeset.remove": [
        "javax.print.attribute.AttributeSet.remove(javax.print.attribute.Attribute)",
        "javax.print.attribute.AttributeSet.remove(java.lang.Class<?>)"
    ],
    "javax.swing.tree.treeselectionmodel.getminselectionrow": [
        "javax.swing.tree.TreeSelectionModel.getMinSelectionRow()"
    ],
    "javax.swing.sortorder.values": [
        "javax.swing.SortOrder.values()"
    ],
    "javax.security.auth.privatecredentialpermission.equals": [
        "javax.security.auth.PrivateCredentialPermission.equals(java.lang.Object)"
    ],
    "java.time.temporal.temporalunit.isdatebased": [
        "java.time.temporal.TemporalUnit.isDateBased()"
    ],
    "javax.swing.text.asyncboxview.paint": [
        "javax.swing.text.AsyncBoxView.paint(java.awt.Graphics,java.awt.Shape)"
    ],
    "java.beans.indexedpropertydescriptor.hashcode": [
        "java.beans.IndexedPropertyDescriptor.hashCode()"
    ],
    "java.net.standardprotocolfamily.valueof": [
        "java.net.StandardProtocolFamily.valueOf(java.lang.String)"
    ],
    "javax.net.ssl.snimatcher.matches": [
        "javax.net.ssl.SNIMatcher.matches(javax.net.ssl.SNIServerName)"
    ],
    "java.util.zip.inflaterinputstream.read": [
        "java.util.zip.InflaterInputStream.read()",
        "java.util.zip.InflaterInputStream.read(byte[],int,int)"
    ],
    "javax.swing.cellrendererpane.getaccessiblecontext": [
        "javax.swing.CellRendererPane.getAccessibleContext()"
    ],
    "java.util.concurrent.locks.locksupport.parknanos": [
        "java.util.concurrent.locks.LockSupport.parkNanos(java.lang.Object,long)",
        "java.util.concurrent.locks.LockSupport.parkNanos(long)"
    ],
    "org.omg.dynamicany._dynfixedstub.get_ushort": [
        "org.omg.DynamicAny._DynFixedStub.get_ushort()"
    ],
    "java.io.randomaccessfile.readfully": [
        "java.io.RandomAccessFile.readFully(byte[],int,int)"
    ],
    "java.util.prefs.preferences.removenodechangelistener": [
        "java.util.prefs.Preferences.removeNodeChangeListener(java.util.prefs.NodeChangeListener)"
    ],
    "java.awt.borderlayout.tostring": [
        "java.awt.BorderLayout.toString()"
    ],
    "javax.swing.text.fieldview.getpreferredspan": [
        "javax.swing.text.FieldView.getPreferredSpan(int)"
    ],
    "javax.accessibility.accessibleselection.getaccessibleselection": [
        "javax.accessibility.AccessibleSelection.getAccessibleSelection(int)"
    ],
    "javax.xml.soap.attachmentpart.getcontentlocation": [
        "javax.xml.soap.AttachmentPart.getContentLocation()"
    ],
    "javax.swing.jviewport.setui": [
        "javax.swing.JViewport.setUI(javax.swing.plaf.ViewportUI)"
    ],
    "java.lang.charsequence.length": [
        "java.lang.CharSequence.length()"
    ],
    "java.lang.stringbuffer.setlength": [
        "java.lang.StringBuffer.setLength(int)"
    ],
    "java.awt.geom.rectangle2d.float.getx": [
        "java.awt.geom.Rectangle2D.Float.getX()"
    ],
    "java.sql.databasemetadata.supportsstatementpooling": [
        "java.sql.DatabaseMetaData.supportsStatementPooling()"
    ],
    "org.omg.corba.portable.objectimpl._set_delegate": [
        "org.omg.CORBA.portable.ObjectImpl._set_delegate(org.omg.CORBA.portable.Delegate)"
    ],
    "java.util.concurrent.locks.locksupport.getblocker": [
        "java.util.concurrent.locks.LockSupport.getBlocker(java.lang.Thread)"
    ],
    "java.util.linkedlist.addlast": [
        "java.util.LinkedList.addLast(java.util.LinkedList)",
        "java.util.LinkedList.addLast(E)"
    ],
    "java.time.chrono.japanesedate.plus": [
        "java.time.chrono.JapaneseDate.plus(java.time.temporal.TemporalAmount)"
    ],
    "javax.xml.ws.service.create": [
        "javax.xml.ws.Service.create(javax.xml.namespace.QName)",
        "javax.xml.ws.Service.create(java.net.URL,javax.xml.namespace.QName)",
        "javax.xml.ws.Service.create(java.net.URL,javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature...)",
        "javax.xml.ws.Service.create(javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature...)"
    ],
    "javax.swing.tree.defaultmutabletreenode.pathfromancestorenumeration": [
        "javax.swing.tree.DefaultMutableTreeNode.pathFromAncestorEnumeration(javax.swing.tree.TreeNode)"
    ],
    "org.w3c.dom.domimplementation.createdocumenttype": [
        "org.w3c.dom.DOMImplementation.createDocumentType(java.lang.String,java.lang.String,java.lang.String)"
    ],
    "java.util.date.hashcode": [
        "java.util.Date.hashCode()"
    ],
    "java.util.dictionary.isempty": [
        "java.util.Dictionary.isEmpty()"
    ],
    "javax.net.ssl.sslengine.gethandshakestatus": [
        "javax.net.ssl.SSLEngine.getHandshakeStatus()"
    ],
    "javax.swing.tree.defaulttreecelleditor.createtreecelleditor": [
        "javax.swing.tree.DefaultTreeCellEditor.createTreeCellEditor()"
    ],
    "javax.xml.ws.spi.http.httpexchange.close": [
        "javax.xml.ws.spi.http.HttpExchange.close()"
    ],
    "javax.swing.plaf.multi.multimenubarui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiMenuBarUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "java.nio.file.files.createfile": [
        "java.nio.file.Files.createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>...)",
        "java.nio.file.Files.createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>)"
    ],
    "javax.swing.tree.mutabletreenode.setparent": [
        "javax.swing.tree.MutableTreeNode.setParent(javax.swing.tree.MutableTreeNode)"
    ],
    "java.awt.filedialog.setfilenamefilter": [
        "java.awt.FileDialog.setFilenameFilter(java.io.FilenameFilter)"
    ],
    "javax.swing.jtextpane.createdefaulteditorkit": [
        "javax.swing.JTextPane.createDefaultEditorKit()"
    ],
    "javax.swing.text.maskformatter.install": [
        "javax.swing.text.MaskFormatter.install(javax.swing.JFormattedTextField)"
    ],
    "javax.swing.plaf.basic.basictreeui.getcellrenderer": [
        "javax.swing.plaf.basic.BasicTreeUI.getCellRenderer()"
    ],
    "javax.imageio.metadata.iiometadataformatimpl.addobjectvalue": [
        "javax.imageio.metadata.IIOMetadataFormatImpl.addObjectValue(java.lang.String,java.lang.Class<?>,int,int)",
        "javax.imageio.metadata.IIOMetadataFormatImpl.addObjectValue(java.lang.String,java.lang.Class<T>,boolean,T,java.util.List<? extends T>)",
        "javax.imageio.metadata.IIOMetadataFormatImpl.addObjectValue(java.lang.String,java.lang.Class<T>,boolean,T)",
        "javax.imageio.metadata.IIOMetadataFormatImpl.addObjectValue(java.lang.String,java.lang.Class<T>,T,java.lang.Comparable<? super T>,java.lang.Comparable<? super T>,boolean,boolean)"
    ],
    "javax.swing.text.keymap.getboundactions": [
        "javax.swing.text.Keymap.getBoundActions()"
    ],
    "org.xml.sax.xmlreader.getcontenthandler": [
        "org.xml.sax.XMLReader.getContentHandler()"
    ],
    "java.awt.dimension.getsize": [
        "java.awt.Dimension.getSize()"
    ],
    "javax.rmi.corba.stub.hashcode": [
        "javax.rmi.CORBA.Stub.hashCode()"
    ],
    "javax.xml.crypto.dsig.xmlsignaturefactory.newsignatureproperty": [
        "javax.xml.crypto.dsig.XMLSignatureFactory.newSignatureProperty(java.util.List,java.lang.String,java.lang.String)"
    ],
    "java.sql.clob.length": [
        "java.sql.Clob.length()"
    ],
    "java.util.spi.localenameprovider.getdisplaycountry": [
        "java.util.spi.LocaleNameProvider.getDisplayCountry(java.lang.String,java.util.Locale)"
    ],
    "java.lang.classloader.getclassloadinglock": [
        "java.lang.ClassLoader.getClassLoadingLock(java.lang.String)"
    ],
    "java.net.responsecache.get": [
        "java.net.ResponseCache.get(java.net.URI,java.lang.String,,java.util.List<java.lang.String>>)"
    ],
    "java.util.prefs.abstractpreferences.name": [
        "java.util.prefs.AbstractPreferences.name()"
    ],
    "javax.print.attribute.standard.numberofdocuments.getcategory": [
        "javax.print.attribute.standard.NumberOfDocuments.getCategory()"
    ],
    "javax.sql.rowset.serial.serialclob.setasciistream": [
        "javax.sql.rowset.serial.SerialClob.setAsciiStream(long)"
    ],
    "java.net.authenticator.requestortype.values": [
        "java.net.Authenticator.RequestorType.values()"
    ],
    "javax.swing.plaf.synth.synthlistui.update": [
        "javax.swing.plaf.synth.SynthListUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.util.vector.ensurecapacity": [
        "java.util.Vector.ensureCapacity(int)"
    ],
    "java.time.instant.plusnanos": [
        "java.time.Instant.plusNanos(long)"
    ],
    "java.lang.integer.compareto": [
        "java.lang.Integer.compareTo(java.lang.Integer)"
    ],
    "java.nio.charset.coderresult.ismalformed": [
        "java.nio.charset.CoderResult.isMalformed()"
    ],
    "java.util.map.computeifpresent": [
        "java.util.Map.computeIfPresent(java.util.Map,java.util.function.BiFunction<? super,? super,? extends java.util.Map>)",
        "java.util.Map.computeIfPresent(K,java.util.function.BiFunction<? super,? super,? extends V>)"
    ],
    "javax.print.attribute.standard.pagesperminutecolor.equals": [
        "javax.print.attribute.standard.PagesPerMinuteColor.equals(java.lang.Object)"
    ],
    "org.omg.corba.any.extract_streamable": [
        "org.omg.CORBA.Any.extract_Streamable()"
    ],
    "java.awt.menucomponent.getfont": [
        "java.awt.MenuComponent.getFont()"
    ],
    "java.time.temporal.temporaladjusters.firstdayofyear": [
        "java.time.temporal.TemporalAdjusters.firstDayOfYear()"
    ],
    "org.omg.dynamicany._dynsequencestub.insert_ulonglong": [
        "org.omg.DynamicAny._DynSequenceStub.insert_ulonglong(long)"
    ],
    "javax.xml.crypto.dsig.xmlsignaturefactory.newsignedinfo": [
        "javax.xml.crypto.dsig.XMLSignatureFactory.newSignedInfo(javax.xml.crypto.dsig.CanonicalizationMethod,javax.xml.crypto.dsig.SignatureMethod,java.util.List)",
        "javax.xml.crypto.dsig.XMLSignatureFactory.newSignedInfo(javax.xml.crypto.dsig.CanonicalizationMethod,javax.xml.crypto.dsig.SignatureMethod,java.util.List,java.lang.String)"
    ],
    "javax.swing.text.view.getpreferredspan": [
        "javax.swing.text.View.getPreferredSpan(int)"
    ],
    "java.awt.color.icc_profile.write": [
        "java.awt.color.ICC_Profile.write(java.lang.String)",
        "java.awt.color.ICC_Profile.write(java.io.OutputStream)"
    ],
    "java.lang.double.sum": [
        "java.lang.Double.sum(double,double)"
    ],
    "java.io.pushbackinputstream.read": [
        "java.io.PushbackInputStream.read(byte[],int,int)",
        "java.io.PushbackInputStream.read()"
    ],
    "java.awt.graphicsconfigtemplate.getbestconfiguration": [
        "java.awt.GraphicsConfigTemplate.getBestConfiguration(java.awt.GraphicsConfiguration[])"
    ],
    "javax.print.attribute.standard.printermakeandmodel.getcategory": [
        "javax.print.attribute.standard.PrinterMakeAndModel.getCategory()"
    ],
    "javax.script.simplescriptcontext.removeattribute": [
        "javax.script.SimpleScriptContext.removeAttribute(java.lang.String,int)"
    ],
    "java.awt.choice.additemlistener": [
        "java.awt.Choice.addItemListener(java.awt.event.ItemListener)"
    ],
    "javax.imageio.metadata.iiometadatanode.getnodename": [
        "javax.imageio.metadata.IIOMetadataNode.getNodeName()"
    ],
    "javax.print.simpledoc.getreaderfortext": [
        "javax.print.SimpleDoc.getReaderForText()"
    ],
    "org.w3c.dom.ls.lsinput.getbaseuri": [
        "org.w3c.dom.ls.LSInput.getBaseURI()"
    ],
    "java.net.socketimplfactory.createsocketimpl": [
        "java.net.SocketImplFactory.createSocketImpl()"
    ],
    "java.rmi.registry.registry.rebind": [
        "java.rmi.registry.Registry.rebind(java.lang.String,java.rmi.Remote)"
    ],
    "javax.swing.text.segment.subsequence": [
        "javax.swing.text.Segment.subSequence(int,int)"
    ],
    "javax.xml.ws.spi.provider.createendpoint": [
        "javax.xml.ws.spi.Provider.createEndpoint(java.lang.String,java.lang.Object)",
        "javax.xml.ws.spi.Provider.createEndpoint(java.lang.String,java.lang.Object,javax.xml.ws.WebServiceFeature...)",
        "javax.xml.ws.spi.Provider.createEndpoint(java.lang.String,java.lang.Class<?>,javax.xml.ws.spi.Invoker,javax.xml.ws.WebServiceFeature...)"
    ],
    "java.time.period.ofmonths": [
        "java.time.Period.ofMonths(int)"
    ],
    "javax.swing.jrootpane.getdefaultbutton": [
        "javax.swing.JRootPane.getDefaultButton()"
    ],
    "javax.swing.sizesequence.getposition": [
        "javax.swing.SizeSequence.getPosition(int)"
    ],
    "java.net.urlconnection.getheaderfield": [
        "java.net.URLConnection.getHeaderField(java.lang.String)",
        "java.net.URLConnection.getHeaderField(int)"
    ],
    "javax.sql.rowset.rowsetfactory.createjdbcrowset": [
        "javax.sql.rowset.RowSetFactory.createJdbcRowSet()"
    ],
    "javax.xml.crypto.dsig.dom.domvalidatecontext.setnode": [
        "javax.xml.crypto.dsig.dom.DOMValidateContext.setNode(org.w3c.dom.Node)"
    ],
    "javax.swing.plaf.metal.metaltoolbarui.update": [
        "javax.swing.plaf.metal.MetalToolBarUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.security.keypairgenerator.getalgorithm": [
        "java.security.KeyPairGenerator.getAlgorithm()"
    ],
    "java.lang.enum.clone": [
        "java.lang.Enum.clone()"
    ],
    "java.sql.resultset.getstring": [
        "java.sql.ResultSet.getString(java.lang.String)",
        "java.sql.ResultSet.getString(int)"
    ],
    "java.awt.dnd.dragsourceadapter.dragover": [
        "java.awt.dnd.DragSourceAdapter.dragOver(java.awt.dnd.DragSourceDragEvent)"
    ],
    "java.awt.adjustable.addadjustmentlistener": [
        "java.awt.Adjustable.addAdjustmentListener(java.awt.event.AdjustmentListener)"
    ],
    "java.awt.textcomponent.getbackground": [
        "java.awt.TextComponent.getBackground()"
    ],
    "java.util.dictionary.keys": [
        "java.util.Dictionary.keys()"
    ],
    "javax.xml.stream.xmlstreamreader.getencoding": [
        "javax.xml.stream.XMLStreamReader.getEncoding()"
    ],
    "javax.imageio.imagereader.dispose": [
        "javax.imageio.ImageReader.dispose()"
    ],
    "java.security.provider.getservices": [
        "java.security.Provider.getServices()"
    ],
    "javax.management.monitor.countermonitormbean.setoffset": [
        "javax.management.monitor.CounterMonitorMBean.setOffset(java.lang.Number)"
    ],
    "java.util.regex.pattern.compile": [
        "java.util.regex.Pattern.compile(java.lang.String,int)",
        "java.util.regex.Pattern.compile(java.lang.String)"
    ],
    "javax.swing.defaultlistmodel.setelementat": [
        "javax.swing.DefaultListModel.setElementAt(javax.swing.DefaultListModel,int)"
    ],
    "javax.xml.transform.dom.domsource.getnode": [
        "javax.xml.transform.dom.DOMSource.getNode()"
    ],
    "java.util.concurrent.atomic.atomiclong.get": [
        "java.util.concurrent.atomic.AtomicLong.get()"
    ],
    "java.sql.statement.getmaxfieldsize": [
        "java.sql.Statement.getMaxFieldSize()"
    ],
    "java.time.period.subtractfrom": [
        "java.time.Period.subtractFrom(java.time.temporal.Temporal)"
    ],
    "javax.sql.statementevent.getsqlexception": [
        "javax.sql.StatementEvent.getSQLException()"
    ],
    "java.nio.file.attribute.aclentry.builder.setpermissions": [
        "java.nio.file.attribute.AclEntry.Builder.setPermissions(java.nio.file.attribute.AclEntryPermission...)",
        "java.nio.file.attribute.AclEntry.Builder.setPermissions(java.nio.file.attribute.AclEntryPermission)",
        "java.nio.file.attribute.AclEntry.Builder.setPermissions(java.util.Set<java.nio.file.attribute.AclEntryPermission>)"
    ],
    "java.awt.mediatracker.waitforid": [
        "java.awt.MediaTracker.waitForID(int,long)",
        "java.awt.MediaTracker.waitForID(int)"
    ],
    "javax.swing.text.html.htmldocument.setinnerhtml": [
        "javax.swing.text.html.HTMLDocument.setInnerHTML(javax.swing.text.Element,java.lang.String)"
    ],
    "java.util.function.booleansupplier.getasboolean": [
        "java.util.function.BooleanSupplier.getAsBoolean()"
    ],
    "javax.xml.soap.soapheaderelement.getmustunderstand": [
        "javax.xml.soap.SOAPHeaderElement.getMustUnderstand()"
    ],
    "javax.swing.text.defaultformatterfactory.geteditformatter": [
        "javax.swing.text.DefaultFormatterFactory.getEditFormatter()"
    ],
    "javax.swing.joptionpane.getinitialvalue": [
        "javax.swing.JOptionPane.getInitialValue()"
    ],
    "java.beans.visibility.dontusegui": [
        "java.beans.Visibility.dontUseGui()"
    ],
    "java.sql.callablestatement.setbyte": [
        "java.sql.CallableStatement.setByte(java.lang.String,byte)"
    ],
    "javax.swing.jpasswordfield.copy": [
        "javax.swing.JPasswordField.copy()"
    ],
    "javax.swing.defaultlistmodel.elements": [
        "javax.swing.DefaultListModel.elements()"
    ],
    "javax.swing.jcomponent.setinputmap": [
        "javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"
    ],
    "java.lang.class.getclassloader": [
        "java.lang.Class.getClassLoader()"
    ],
    "javax.swing.text.document.getdefaultrootelement": [
        "javax.swing.text.Document.getDefaultRootElement()"
    ],
    "java.nio.channels.gatheringbytechannel.write": [
        "java.nio.channels.GatheringByteChannel.write(java.nio.ByteBuffer[])",
        "java.nio.channels.GatheringByteChannel.write(java.nio.ByteBuffer,int,int)",
        "java.nio.channels.GatheringByteChannel.write(java.nio.ByteBuffer)",
        "java.nio.channels.GatheringByteChannel.write(java.nio.ByteBuffer[],int,int)"
    ],
    "javax.print.attribute.standard.jobmediasheetscompleted.getname": [
        "javax.print.attribute.standard.JobMediaSheetsCompleted.getName()"
    ],
    "javax.swing.table.tablecolumn.setmodelindex": [
        "javax.swing.table.TableColumn.setModelIndex(int)"
    ],
    "org.omg.dynamicany._dynfixedstub.insert_double": [
        "org.omg.DynamicAny._DynFixedStub.insert_double(double)"
    ],
    "java.util.concurrent.concurrentskiplistmap.merge": [
        "java.util.concurrent.ConcurrentSkipListMap.merge(java.util.concurrent.ConcurrentSkipListMap,java.util.concurrent.ConcurrentSkipListMap,java.util.function.BiFunction<? super,? super,? extends java.util.concurrent.ConcurrentSkipListMap>)",
        "java.util.concurrent.ConcurrentSkipListMap.merge(K,V,java.util.function.BiFunction<? super,? super,? extends V>)"
    ],
    "java.security.provider.getinfo": [
        "java.security.Provider.getInfo()"
    ],
    "javax.xml.bind.datatypeconverter.parseint": [
        "javax.xml.bind.DatatypeConverter.parseInt(java.lang.String)"
    ],
    "java.io.pushbackinputstream.mark": [
        "java.io.PushbackInputStream.mark(int)"
    ],
    "java.util.concurrent.concurrentnavigablemap.submap": [
        "java.util.concurrent.ConcurrentNavigableMap.subMap(K,K)",
        "java.util.concurrent.ConcurrentNavigableMap.subMap(K,boolean,K,boolean)"
    ],
    "org.omg.dynamicany.dynenumoperations.get_as_string": [
        "org.omg.DynamicAny.DynEnumOperations.get_as_string()"
    ],
    "javax.management.standardmbean.getdescription": [
        "javax.management.StandardMBean.getDescription(javax.management.MBeanInfo)",
        "javax.management.StandardMBean.getDescription(javax.management.MBeanOperationInfo,javax.management.MBeanParameterInfo,int)",
        "javax.management.StandardMBean.getDescription(javax.management.MBeanConstructorInfo)",
        "javax.management.StandardMBean.getDescription(javax.management.MBeanConstructorInfo,javax.management.MBeanParameterInfo,int)",
        "javax.management.StandardMBean.getDescription(javax.management.MBeanAttributeInfo)",
        "javax.management.StandardMBean.getDescription(javax.management.MBeanOperationInfo)",
        "javax.management.StandardMBean.getDescription(javax.management.MBeanFeatureInfo)"
    ],
    "java.awt.image.convolveop.getrenderinghints": [
        "java.awt.image.ConvolveOp.getRenderingHints()"
    ],
    "java.math.biginteger.doublevalue": [
        "java.math.BigInteger.doubleValue()"
    ],
    "javax.sql.rowset.baserowset.setshort": [
        "javax.sql.rowset.BaseRowSet.setShort(int,short)",
        "javax.sql.rowset.BaseRowSet.setShort(java.lang.String,short)"
    ],
    "java.lang.management.managementfactory.getmemorypoolmxbeans": [
        "java.lang.management.ManagementFactory.getMemoryPoolMXBeans()"
    ],
    "javax.lang.model.type.typevisitor.visit": [
        "javax.lang.model.type.TypeVisitor.visit(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeVisitor)"
    ],
    "java.awt.geom.rectangularshape.getcentery": [
        "java.awt.geom.RectangularShape.getCenterY()"
    ],
    "javax.xml.stream.xmlstreamwriter.setdefaultnamespace": [
        "javax.xml.stream.XMLStreamWriter.setDefaultNamespace(java.lang.String)"
    ],
    "javax.xml.soap.soapmessage.getmimeheaders": [
        "javax.xml.soap.SOAPMessage.getMimeHeaders()"
    ],
    "javax.sound.sampled.lineevent.type.tostring": [
        "javax.sound.sampled.LineEvent.Type.toString()"
    ],
    "java.lang.class.getannotatedsuperclass": [
        "java.lang.Class.getAnnotatedSuperclass()"
    ],
    "javax.xml.transform.stream.streamsource.setpublicid": [
        "javax.xml.transform.stream.StreamSource.setPublicId(java.lang.String)"
    ],
    "java.security.keypairgenerator.getprovider": [
        "java.security.KeyPairGenerator.getProvider()"
    ],
    "java.time.duration.ofnanos": [
        "java.time.Duration.ofNanos(long)"
    ],
    "javax.swing.border.lineborder.getthickness": [
        "javax.swing.border.LineBorder.getThickness()"
    ],
    "java.awt.image.colormodel.isalphapremultiplied": [
        "java.awt.image.ColorModel.isAlphaPremultiplied()"
    ],
    "java.sql.callablestatement.setint": [
        "java.sql.CallableStatement.setInt(java.lang.String,int)"
    ],
    "javax.imageio.stream.iiobytebuffer.getdata": [
        "javax.imageio.stream.IIOByteBuffer.getData()"
    ],
    "javax.accessibility.accessibleeditabletext.gettextrange": [
        "javax.accessibility.AccessibleEditableText.getTextRange(int,int)"
    ],
    "javax.swing.text.html.htmlwriter.write": [
        "javax.swing.text.html.HTMLWriter.write()"
    ],
    "java.net.serversocket.isbound": [
        "java.net.ServerSocket.isBound()"
    ],
    "javax.swing.event.undoableeditevent.getedit": [
        "javax.swing.event.UndoableEditEvent.getEdit()"
    ],
    "java.lang.reflect.constructor.getparametertypes": [
        "java.lang.reflect.Constructor.getParameterTypes()"
    ],
    "javax.script.simplebindings.values": [
        "javax.script.SimpleBindings.values()"
    ],
    "java.time.offsetdatetime.getnano": [
        "java.time.OffsetDateTime.getNano()"
    ],
    "java.lang.string.split": [
        "java.lang.String.split(java.lang.String,int)",
        "java.lang.String.split(java.lang.String)"
    ],
    "javax.sql.rowset.getmaxfieldsize": [
        "javax.sql.RowSet.getMaxFieldSize()"
    ],
    "java.util.logging.streamhandler.close": [
        "java.util.logging.StreamHandler.close()"
    ],
    "java.io.dataoutput.writebytes": [
        "java.io.DataOutput.writeBytes(java.lang.String)"
    ],
    "javax.swing.text.jtextcomponent.gettext": [
        "javax.swing.text.JTextComponent.getText()",
        "javax.swing.text.JTextComponent.getText(int,int)"
    ],
    "javax.swing.undo.undomanager.end": [
        "javax.swing.undo.UndoManager.end()"
    ],
    "java.time.temporal.temporaladjusters.ofdateadjuster": [
        "java.time.temporal.TemporalAdjusters.ofDateAdjuster(java.util.function.UnaryOperator<java.time.LocalDate>)"
    ],
    "java.awt.geom.rectangularshape.getmaxx": [
        "java.awt.geom.RectangularShape.getMaxX()"
    ],
    "javax.swing.colorchooser.abstractcolorchooserpanel.getmnemonic": [
        "javax.swing.colorchooser.AbstractColorChooserPanel.getMnemonic()"
    ],
    "org.omg.corba.datainputstream.read_ulonglong_array": [
        "org.omg.CORBA.DataInputStream.read_ulonglong_array(org.omg.CORBA.ULongLongSeqHolder,int,int)"
    ],
    "java.net.socketpermission.equals": [
        "java.net.SocketPermission.equals(java.lang.Object)"
    ],
    "javax.swing.event.eventlistenerlist.remove": [
        "javax.swing.event.EventListenerList.remove(java.lang.Class<T>,T)"
    ],
    "java.security.spec.rsamultiprimeprivatecrtkeyspec.getprimep": [
        "java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPrimeP()"
    ],
    "java.util.zip.zipentry.hashcode": [
        "java.util.zip.ZipEntry.hashCode()"
    ],
    "javax.swing.plaf.multi.multidesktoppaneui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiDesktopPaneUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "java.io.objectinputstream.registervalidation": [
        "java.io.ObjectInputStream.registerValidation(java.io.ObjectInputValidation,int)"
    ],
    "java.lang.character.hashcode": [
        "java.lang.Character.hashCode()",
        "java.lang.Character.hashCode(char)"
    ],
    "javax.swing.plaf.synth.synthspinnerui.uninstalllisteners": [
        "javax.swing.plaf.synth.SynthSpinnerUI.uninstallListeners()"
    ],
    "java.beans.beaninfo.geticon": [
        "java.beans.BeanInfo.getIcon(int)"
    ],
    "java.net.datagramsocket.disconnect": [
        "java.net.DatagramSocket.disconnect()"
    ],
    "java.lang.reflect.method.getname": [
        "java.lang.reflect.Method.getName()"
    ],
    "javax.xml.bind.binder.geteventhandler": [
        "javax.xml.bind.Binder.getEventHandler()"
    ],
    "javax.swing.listselectionmodel.getminselectionindex": [
        "javax.swing.ListSelectionModel.getMinSelectionIndex()"
    ],
    "javax.lang.model.type.typevisitor.visitunknown": [
        "javax.lang.model.type.TypeVisitor.visitUnknown(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeVisitor)"
    ],
    "javax.imageio.imagereader.removeiioreadwarninglistener": [
        "javax.imageio.ImageReader.removeIIOReadWarningListener(javax.imageio.event.IIOReadWarningListener)"
    ],
    "javax.sound.sampled.audiosystem.getaudiofiletypes": [
        "javax.sound.sampled.AudioSystem.getAudioFileTypes()",
        "javax.sound.sampled.AudioSystem.getAudioFileTypes(javax.sound.sampled.AudioInputStream)"
    ],
    "javax.xml.stream.xmlinputfactory.createfilteredreader": [
        "javax.xml.stream.XMLInputFactory.createFilteredReader(javax.xml.stream.XMLStreamReader,javax.xml.stream.StreamFilter)",
        "javax.xml.stream.XMLInputFactory.createFilteredReader(javax.xml.stream.XMLEventReader,javax.xml.stream.EventFilter)"
    ],
    "javax.swing.defaultcomboboxmodel.getindexof": [
        "javax.swing.DefaultComboBoxModel.getIndexOf(java.lang.Object)"
    ],
    "java.awt.textcomponent.getcaretposition": [
        "java.awt.TextComponent.getCaretPosition()"
    ],
    "java.util.gregoriancalendar.getactualminimum": [
        "java.util.GregorianCalendar.getActualMinimum(int)"
    ],
    "java.lang.compiler.disable": [
        "java.lang.Compiler.disable()"
    ],
    "javax.swing.jcomponent.getinputmap": [
        "javax.swing.JComponent.getInputMap()",
        "javax.swing.JComponent.getInputMap(int)"
    ],
    "java.nio.channels.membershipkey.group": [
        "java.nio.channels.MembershipKey.group()"
    ],
    "java.awt.geom.dimension2d.getwidth": [
        "java.awt.geom.Dimension2D.getWidth()"
    ],
    "javax.swing.jcomponent.getinsets": [
        "javax.swing.JComponent.getInsets(java.awt.Insets)",
        "javax.swing.JComponent.getInsets()"
    ],
    "java.util.stream.intstream.builder.build": [
        "java.util.stream.IntStream.Builder.build()"
    ],
    "java.awt.event.inputevent.consume": [
        "java.awt.event.InputEvent.consume()"
    ],
    "org.xml.sax.errorhandler.fatalerror": [
        "org.xml.sax.ErrorHandler.fatalError(org.xml.sax.SAXParseException)"
    ],
    "javax.accessibility.accessibletext.getselectedtext": [
        "javax.accessibility.AccessibleText.getSelectedText()"
    ],
    "org.omg.dynamicany._dynsequencestub.insert_reference": [
        "org.omg.DynamicAny._DynSequenceStub.insert_reference(org.omg.CORBA.Object)"
    ],
    "javax.swing.plaf.synth.synthsplitpaneui.propertychange": [
        "javax.swing.plaf.synth.SynthSplitPaneUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "java.lang.invoke.callsite.gettarget": [
        "java.lang.invoke.CallSite.getTarget()"
    ],
    "java.util.concurrent.locks.stampedlock.tryconverttowritelock": [
        "java.util.concurrent.locks.StampedLock.tryConvertToWriteLock(long)"
    ],
    "java.time.duration.minus": [
        "java.time.Duration.minus(long,java.time.temporal.TemporalUnit)",
        "java.time.Duration.minus(java.time.Duration)"
    ],
    "java.awt.jobattributes.setprinter": [
        "java.awt.JobAttributes.setPrinter(java.lang.String)"
    ],
    "javax.swing.jdialog.getjmenubar": [
        "javax.swing.JDialog.getJMenuBar()"
    ],
    "java.awt.component.getmouselisteners": [
        "java.awt.Component.getMouseListeners()"
    ],
    "org.omg.dynamicany._dynstructstub.component_count": [
        "org.omg.DynamicAny._DynStructStub.component_count()"
    ],
    "javax.swing.plaf.basic.basicdesktoppaneui.createpropertychangelistener": [
        "javax.swing.plaf.basic.BasicDesktopPaneUI.createPropertyChangeListener()"
    ],
    "java.util.regex.matcher.pattern": [
        "java.util.regex.Matcher.pattern()"
    ],
    "java.net.uri.tostring": [
        "java.net.URI.toString()"
    ],
    "java.security.cert.x509certselector.setsubjectpublickeyalgid": [
        "java.security.cert.X509CertSelector.setSubjectPublicKeyAlgID(java.lang.String)"
    ],
    "javax.swing.plaf.basic.basicprogressbarui.getamountfull": [
        "javax.swing.plaf.basic.BasicProgressBarUI.getAmountFull(java.awt.Insets,int,int)"
    ],
    "javax.crypto.spec.dhparameterspec.getp": [
        "javax.crypto.spec.DHParameterSpec.getP()"
    ],
    "java.security.protectiondomain.getpermissions": [
        "java.security.ProtectionDomain.getPermissions()"
    ],
    "java.awt.adjustable.removeadjustmentlistener": [
        "java.awt.Adjustable.removeAdjustmentListener(java.awt.event.AdjustmentListener)"
    ],
    "javax.sound.sampled.line.removelinelistener": [
        "javax.sound.sampled.Line.removeLineListener(javax.sound.sampled.LineListener)"
    ],
    "java.util.concurrent.locks.abstractqueuedsynchronizer.hasqueuedpredecessors": [
        "java.util.concurrent.locks.AbstractQueuedSynchronizer.hasQueuedPredecessors()"
    ],
    "java.util.concurrent.locks.stampedlock.tryconverttoreadlock": [
        "java.util.concurrent.locks.StampedLock.tryConvertToReadLock(long)"
    ],
    "javax.xml.stream.xmleventfactory.createdtd": [
        "javax.xml.stream.XMLEventFactory.createDTD(java.lang.String)"
    ],
    "javax.swing.mutablecomboboxmodel.addelement": [
        "javax.swing.MutableComboBoxModel.addElement(javax.swing.MutableComboBoxModel)"
    ],
    "javax.swing.event.internalframeevent.getinternalframe": [
        "javax.swing.event.InternalFrameEvent.getInternalFrame()"
    ],
    "javax.swing.text.gapcontent.shiftgapstartdown": [
        "javax.swing.text.GapContent.shiftGapStartDown(int)"
    ],
    "java.util.prefs.preferences.tostring": [
        "java.util.prefs.Preferences.toString()"
    ],
    "org.omg.portableinterceptor.requestinfooperations.exceptions": [
        "org.omg.PortableInterceptor.RequestInfoOperations.exceptions()"
    ],
    "java.sql.databasemetadata.getmaxcolumnsinorderby": [
        "java.sql.DatabaseMetaData.getMaxColumnsInOrderBy()"
    ],
    "java.awt.font.fontrendercontext.istransformed": [
        "java.awt.font.FontRenderContext.isTransformed()"
    ],
    "javax.swing.jviewport.remove": [
        "javax.swing.JViewport.remove(java.awt.Component)"
    ],
    "java.awt.component.addpropertychangelistener": [
        "java.awt.Component.addPropertyChangeListener(java.beans.PropertyChangeListener)",
        "java.awt.Component.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"
    ],
    "javax.xml.crypto.dsig.manifest.getreferences": [
        "javax.xml.crypto.dsig.Manifest.getReferences()"
    ],
    "java.awt.color.icc_profile.readresolve": [
        "java.awt.color.ICC_Profile.readResolve()"
    ],
    "javax.swing.jformattedtextfield.getformatter": [
        "javax.swing.JFormattedTextField.getFormatter()"
    ],
    "org.xml.sax.contenthandler.startdocument": [
        "org.xml.sax.ContentHandler.startDocument()"
    ],
    "javax.swing.buttonmodel.setarmed": [
        "javax.swing.ButtonModel.setArmed(boolean)"
    ],
    "javax.accessibility.accessibleselection.selectallaccessibleselection": [
        "javax.accessibility.AccessibleSelection.selectAllAccessibleSelection()"
    ],
    "java.awt.toolkit.getsystemeventqueueimpl": [
        "java.awt.Toolkit.getSystemEventQueueImpl()"
    ],
    "java.util.concurrent.locks.stampedlock.tryreadlock": [
        "java.util.concurrent.locks.StampedLock.tryReadLock()",
        "java.util.concurrent.locks.StampedLock.tryReadLock(long,java.util.concurrent.TimeUnit)"
    ],
    "javax.swing.text.html.htmldocument.iterator.getstartoffset": [
        "javax.swing.text.html.HTMLDocument.Iterator.getStartOffset()"
    ],
    "javax.xml.datatype.duration.isset": [
        "javax.xml.datatype.Duration.isSet(javax.xml.datatype.DatatypeConstants.Field)"
    ],
    "javax.swing.uidefaults.firepropertychange": [
        "javax.swing.UIDefaults.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)"
    ],
    "javax.script.scriptenginemanager.registerengineextension": [
        "javax.script.ScriptEngineManager.registerEngineExtension(java.lang.String,javax.script.ScriptEngineFactory)"
    ],
    "java.awt.toolkit.createlist": [
        "java.awt.Toolkit.createList(java.awt.List)"
    ],
    "javax.management.monitor.countermonitormbean.getmodulus": [
        "javax.management.monitor.CounterMonitorMBean.getModulus()"
    ],
    "javax.print.attribute.setofintegersyntax.next": [
        "javax.print.attribute.SetOfIntegerSyntax.next(int)"
    ],
    "org.omg.portableserver.portable.delegate.is_a": [
        "org.omg.PortableServer.portable.Delegate.is_a(org.omg.PortableServer.Servant,java.lang.String)"
    ],
    "java.security.signedobject.getalgorithm": [
        "java.security.SignedObject.getAlgorithm()"
    ],
    "java.time.localdatetime.with": [
        "java.time.LocalDateTime.with(java.time.temporal.TemporalAdjuster)",
        "java.time.LocalDateTime.with(java.time.temporal.TemporalField,long)"
    ],
    "java.net.uri.getport": [
        "java.net.URI.getPort()"
    ],
    "org.omg.dynamicany._dynvaluestub.get_octet": [
        "org.omg.DynamicAny._DynValueStub.get_octet()"
    ],
    "javax.swing.tree.abstractlayoutcache.getpathforrow": [
        "javax.swing.tree.AbstractLayoutCache.getPathForRow(int)"
    ],
    "javax.xml.stream.xmlstreamwriter.setnamespacecontext": [
        "javax.xml.stream.XMLStreamWriter.setNamespaceContext(javax.xml.namespace.NamespaceContext)"
    ],
    "java.lang.class.getdeclaredfield": [
        "java.lang.Class.getDeclaredField(java.lang.String)"
    ],
    "javax.swing.jbutton.setdefaultcapable": [
        "javax.swing.JButton.setDefaultCapable(boolean)"
    ],
    "java.nio.file.watchevent.kind.type": [
        "java.nio.file.WatchEvent.Kind.type()"
    ],
    "java.security.keystorespi.enginegetentry": [
        "java.security.KeyStoreSpi.engineGetEntry(java.lang.String,java.security.KeyStore.ProtectionParameter)"
    ],
    "java.security.cert.certificatefactory.generatecertpath": [
        "java.security.cert.CertificateFactory.generateCertPath(java.util.List<? extends java.security.cert.Certificate>)",
        "java.security.cert.CertificateFactory.generateCertPath(java.io.InputStream,java.lang.String)",
        "java.security.cert.CertificateFactory.generateCertPath(java.io.InputStream)"
    ],
    "java.time.chrono.era.getdisplayname": [
        "java.time.chrono.Era.getDisplayName(java.time.format.TextStyle,java.util.Locale)"
    ],
    "javax.sound.midi.sequencer.settempoinmpq": [
        "javax.sound.midi.Sequencer.setTempoInMPQ(float)"
    ],
    "javax.swing.grouplayout.getlayoutalignmenty": [
        "javax.swing.GroupLayout.getLayoutAlignmentY(java.awt.Container)"
    ],
    "javax.xml.transform.transformer.setoutputproperties": [
        "javax.xml.transform.Transformer.setOutputProperties(java.util.Properties)"
    ],
    "javax.swing.jtable.getcolumnclass": [
        "javax.swing.JTable.getColumnClass(int)"
    ],
    "javax.swing.text.jtextcomponent.getcaretcolor": [
        "javax.swing.text.JTextComponent.getCaretColor()"
    ],
    "java.security.protectiondomain.getprincipals": [
        "java.security.ProtectionDomain.getPrincipals()"
    ],
    "javax.imageio.imagewriteparam.settilingmode": [
        "javax.imageio.ImageWriteParam.setTilingMode(int)"
    ],
    "java.text.characteriterator.next": [
        "java.text.CharacterIterator.next()"
    ],
    "java.nio.file.attribute.basicfileattributeview.settimes": [
        "java.nio.file.attribute.BasicFileAttributeView.setTimes(java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime)"
    ],
    "java.util.concurrent.completionstage.thenacceptasync": [
        "java.util.concurrent.CompletionStage.thenAcceptAsync(java.util.function.Consumer<? super T>,java.util.concurrent.Executor)",
        "java.util.concurrent.CompletionStage.thenAcceptAsync(java.util.function.Consumer<? super java.util.concurrent.CompletionStage>,java.util.concurrent.Executor)",
        "java.util.concurrent.CompletionStage.thenAcceptAsync(java.util.function.Consumer<? super T>)",
        "java.util.concurrent.CompletionStage.thenAcceptAsync(java.util.function.Consumer<? super java.util.concurrent.CompletionStage>)"
    ],
    "java.awt.image.databufferfloat.getelemfloat": [
        "java.awt.image.DataBufferFloat.getElemFloat(int,int)"
    ],
    "java.nio.channels.asynchronouschannelgroup.withcachedthreadpool": [
        "java.nio.channels.AsynchronousChannelGroup.withCachedThreadPool(java.util.concurrent.ExecutorService,int)"
    ],
    "org.omg.dynamicany._dynfixedstub.current_component": [
        "org.omg.DynamicAny._DynFixedStub.current_component()"
    ],
    "javax.sql.rowset.setlong": [
        "javax.sql.RowSet.setLong(int,long)",
        "javax.sql.RowSet.setLong(java.lang.String,long)"
    ],
    "javax.swing.jseparator.setorientation": [
        "javax.swing.JSeparator.setOrientation(int)"
    ],
    "java.beans.propertydescriptor.getreadmethod": [
        "java.beans.PropertyDescriptor.getReadMethod()"
    ],
    "org.omg.corba.any.write_value": [
        "org.omg.CORBA.Any.write_value(org.omg.CORBA.portable.OutputStream)"
    ],
    "javax.xml.bind.jaxbcontext.createunmarshaller": [
        "javax.xml.bind.JAXBContext.createUnmarshaller()"
    ],
    "java.time.chrono.chronolocaldatetime.tolocaltime": [
        "java.time.chrono.ChronoLocalDateTime.toLocalTime()"
    ],
    "java.lang.management.memorymxbean.isverbose": [
        "java.lang.management.MemoryMXBean.isVerbose()"
    ],
    "javax.swing.jtree.removetreewillexpandlistener": [
        "javax.swing.JTree.removeTreeWillExpandListener(javax.swing.event.TreeWillExpandListener)"
    ],
    "java.awt.awteventmulticaster.itemstatechanged": [
        "java.awt.AWTEventMulticaster.itemStateChanged(java.awt.event.ItemEvent)"
    ],
    "java.io.pipedwriter.write": [
        "java.io.PipedWriter.write(int)",
        "java.io.PipedWriter.write(char[],int,int)"
    ],
    "java.sql.preparedstatement.setref": [
        "java.sql.PreparedStatement.setRef(int,java.sql.Ref)"
    ],
    "java.awt.scrollbar.paramstring": [
        "java.awt.Scrollbar.paramString()"
    ],
    "java.sql.callablestatement.getsqlxml": [
        "java.sql.CallableStatement.getSQLXML(java.lang.String)",
        "java.sql.CallableStatement.getSQLXML(int)"
    ],
    "java.util.navigableset.descendingiterator": [
        "java.util.NavigableSet.descendingIterator()"
    ],
    "java.awt.graphics2d.transform": [
        "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)"
    ],
    "javax.swing.imageicon.tostring": [
        "javax.swing.ImageIcon.toString()"
    ],
    "java.util.concurrent.blockingqueue.take": [
        "java.util.concurrent.BlockingQueue.take()"
    ],
    "org.omg.dynamicany._dynanystub.get_typecode": [
        "org.omg.DynamicAny._DynAnyStub.get_typecode()"
    ],
    "org.omg.dynamicany.dynenumoperations.get_as_ulong": [
        "org.omg.DynamicAny.DynEnumOperations.get_as_ulong()"
    ],
    "javax.imageio.imageio.getimagewritersbysuffix": [
        "javax.imageio.ImageIO.getImageWritersBySuffix(java.lang.String)"
    ],
    "javax.swing.plaf.multi.multiscrollpaneui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiScrollPaneUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "java.security.cert.trustanchor.getca": [
        "java.security.cert.TrustAnchor.getCA()"
    ],
    "javax.imageio.spi.imagetranscoderspi.createtranscoderinstance": [
        "javax.imageio.spi.ImageTranscoderSpi.createTranscoderInstance()"
    ],
    "java.awt.image.lookupop.createcompatibledestimage": [
        "java.awt.image.LookupOp.createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)"
    ],
    "java.awt.image.renderable.renderableimageop.getsources": [
        "java.awt.image.renderable.RenderableImageOp.getSources()"
    ],
    "java.nio.file.filestore.getunallocatedspace": [
        "java.nio.file.FileStore.getUnallocatedSpace()"
    ],
    "java.awt.event.textevent.paramstring": [
        "java.awt.event.TextEvent.paramString()"
    ],
    "java.beans.indexedpropertychangeevent.getindex": [
        "java.beans.IndexedPropertyChangeEvent.getIndex()"
    ],
    "java.util.zip.zipentry.getcrc": [
        "java.util.zip.ZipEntry.getCrc()"
    ],
    "java.util.map.foreach": [
        "java.util.Map.forEach(java.util.function.BiConsumer<? super,? super java.util.Map>)",
        "java.util.Map.forEach(java.util.function.BiConsumer<? super,? super V>)"
    ],
    "javax.swing.plaf.basic.basicgraphicsutils.getetchedinsets": [
        "javax.swing.plaf.basic.BasicGraphicsUtils.getEtchedInsets()"
    ],
    "java.awt.mediatracker.geterrorsany": [
        "java.awt.MediaTracker.getErrorsAny()"
    ],
    "java.security.digestoutputstream.tostring": [
        "java.security.DigestOutputStream.toString()"
    ],
    "java.awt.image.lookuptable.getnumcomponents": [
        "java.awt.image.LookupTable.getNumComponents()"
    ],
    "java.lang.threadgroup.getname": [
        "java.lang.ThreadGroup.getName()"
    ],
    "java.util.arraylist.get": [
        "java.util.ArrayList.get(int)"
    ],
    "javax.swing.jtextpane.setlogicalstyle": [
        "javax.swing.JTextPane.setLogicalStyle(javax.swing.text.Style)"
    ],
    "java.lang.annotation.retention.value": [
        "java.lang.annotation.Retention.value()"
    ],
    "javax.imageio.spi.serviceregistry.deregisterserviceprovider": [
        "javax.imageio.spi.ServiceRegistry.deregisterServiceProvider(java.lang.Object)",
        "javax.imageio.spi.ServiceRegistry.deregisterServiceProvider(T,java.lang.Class<T>)"
    ],
    "javax.imageio.metadata.iiometadata.reset": [
        "javax.imageio.metadata.IIOMetadata.reset()"
    ],
    "java.text.decimalformat.getnegativesuffix": [
        "java.text.DecimalFormat.getNegativeSuffix()"
    ],
    "javax.sql.rowset.baserowset.setref": [
        "javax.sql.rowset.BaseRowSet.setRef(int,java.sql.Ref)"
    ],
    "javax.swing.uimanager.addpropertychangelistener": [
        "javax.swing.UIManager.addPropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "javax.swing.text.wrappedplainview.getmaximumspan": [
        "javax.swing.text.WrappedPlainView.getMaximumSpan(int)"
    ],
    "javax.swing.jlist.setselectioninterval": [
        "javax.swing.JList.setSelectionInterval(int,int)"
    ],
    "javax.swing.text.stylecontext.createlargeattributeset": [
        "javax.swing.text.StyleContext.createLargeAttributeSet(javax.swing.text.AttributeSet)"
    ],
    "javax.swing.text.boxview.modeltoview": [
        "javax.swing.text.BoxView.modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)"
    ],
    "javax.print.attribute.standard.joboriginatingusername.equals": [
        "javax.print.attribute.standard.JobOriginatingUserName.equals(java.lang.Object)"
    ],
    "javax.swing.text.jtextcomponent.setfocusaccelerator": [
        "javax.swing.text.JTextComponent.setFocusAccelerator(char)"
    ],
    "javax.security.auth.login.configuration.getconfiguration": [
        "javax.security.auth.login.Configuration.getConfiguration()"
    ],
    "javax.swing.plaf.synth.synthtableheaderui.paintborder": [
        "javax.swing.plaf.synth.SynthTableHeaderUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.time.chrono.thaibuddhistdate.getchronology": [
        "java.time.chrono.ThaiBuddhistDate.getChronology()"
    ],
    "java.io.chararrayreader.mark": [
        "java.io.CharArrayReader.mark(int)"
    ],
    "javax.swing.jspinner.defaulteditor.commitedit": [
        "javax.swing.JSpinner.DefaultEditor.commitEdit()"
    ],
    "java.awt.choice.getselectedindex": [
        "java.awt.Choice.getSelectedIndex()"
    ],
    "javax.security.auth.login.configuration.getprovider": [
        "javax.security.auth.login.Configuration.getProvider()"
    ],
    "java.awt.image.databuffershort.getelem": [
        "java.awt.image.DataBufferShort.getElem(int,int)"
    ],
    "javax.net.ssl.httpsurlconnection.getservercertificates": [
        "javax.net.ssl.HttpsURLConnection.getServerCertificates()"
    ],
    "java.util.deque.addfirst": [
        "java.util.Deque.addFirst(E)",
        "java.util.Deque.addFirst(java.util.Deque)"
    ],
    "org.omg.corba.shortholder._write": [
        "org.omg.CORBA.ShortHolder._write(org.omg.CORBA.portable.OutputStream)"
    ],
    "javax.swing.plaf.basic.basictreeui.getpathforrow": [
        "javax.swing.plaf.basic.BasicTreeUI.getPathForRow(javax.swing.JTree,int)"
    ],
    "javax.sound.sampled.spi.audiofilewriter.getaudiofiletypes": [
        "javax.sound.sampled.spi.AudioFileWriter.getAudioFileTypes(javax.sound.sampled.AudioInputStream)",
        "javax.sound.sampled.spi.AudioFileWriter.getAudioFileTypes()"
    ],
    "java.text.characteriterator.clone": [
        "java.text.CharacterIterator.clone()"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.skippedentity": [
        "org.xml.sax.helpers.XMLFilterImpl.skippedEntity(java.lang.String)"
    ],
    "javax.swing.plaf.multi.multioptionpaneui.selectinitialvalue": [
        "javax.swing.plaf.multi.MultiOptionPaneUI.selectInitialValue(javax.swing.JOptionPane)"
    ],
    "javax.lang.model.util.elementkindvisitor6.visitpackage": [
        "javax.lang.model.util.ElementKindVisitor6.visitPackage(javax.lang.model.element.PackageElement,javax.lang.model.util.ElementKindVisitor6)"
    ],
    "java.awt.scrollpane.gethadjustable": [
        "java.awt.ScrollPane.getHAdjustable()"
    ],
    "javax.swing.tree.defaulttreecellrenderer.setbackgroundselectioncolor": [
        "javax.swing.tree.DefaultTreeCellRenderer.setBackgroundSelectionColor(java.awt.Color)"
    ],
    "java.time.zoneddatetime.plusminutes": [
        "java.time.ZonedDateTime.plusMinutes(long)"
    ],
    "java.util.concurrent.completionstage.thenacceptboth": [
        "java.util.concurrent.CompletionStage.thenAcceptBoth(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiConsumer<? super,? super U>)"
    ],
    "javax.swing.defaultlistselectionmodel.addlistselectionlistener": [
        "javax.swing.DefaultListSelectionModel.addListSelectionListener(javax.swing.event.ListSelectionListener)"
    ],
    "javax.management.mbeanserverfactory.creatembeanserver": [
        "javax.management.MBeanServerFactory.createMBeanServer(java.lang.String)",
        "javax.management.MBeanServerFactory.createMBeanServer()"
    ],
    "javax.swing.plaf.metal.oceantheme.getsecondary1": [
        "javax.swing.plaf.metal.OceanTheme.getSecondary1()"
    ],
    "org.omg.dynamicany._dynanystub.insert_wchar": [
        "org.omg.DynamicAny._DynAnyStub.insert_wchar(char)"
    ],
    "javax.print.attribute.standard.sides.getenumvaluetable": [
        "javax.print.attribute.standard.Sides.getEnumValueTable()"
    ],
    "java.time.duration.between": [
        "java.time.Duration.between(java.time.temporal.Temporal,java.time.temporal.Temporal)"
    ],
    "java.net.jarurlconnection.getentryname": [
        "java.net.JarURLConnection.getEntryName()"
    ],
    "javax.naming.ldap.unsolicitednotification.getexception": [
        "javax.naming.ldap.UnsolicitedNotification.getException()"
    ],
    "javax.swing.text.labelview.setsuperscript": [
        "javax.swing.text.LabelView.setSuperscript(boolean)"
    ],
    "javax.swing.text.defaulthighlighter.removehighlight": [
        "javax.swing.text.DefaultHighlighter.removeHighlight(java.lang.Object)"
    ],
    "javax.swing.jlist.ensureindexisvisible": [
        "javax.swing.JList.ensureIndexIsVisible(int)"
    ],
    "java.util.linkedlist.get": [
        "java.util.LinkedList.get(int)"
    ],
    "java.awt.geom.rectangle2d.double.getwidth": [
        "java.awt.geom.Rectangle2D.Double.getWidth()"
    ],
    "javax.swing.jlabel.getlabelfor": [
        "javax.swing.JLabel.getLabelFor()"
    ],
    "java.time.zoneddatetime.minusdays": [
        "java.time.ZonedDateTime.minusDays(long)"
    ],
    "java.lang.reflect.constructor.getname": [
        "java.lang.reflect.Constructor.getName()"
    ],
    "javax.swing.repaintmanager.getdoublebuffermaximumsize": [
        "javax.swing.RepaintManager.getDoubleBufferMaximumSize()"
    ],
    "javax.swing.text.html.parser.parser.parsemarkupdeclarations": [
        "javax.swing.text.html.parser.Parser.parseMarkupDeclarations(java.lang.StringBuffer)"
    ],
    "javax.swing.plaf.basic.basiclistui.createlistdatalistener": [
        "javax.swing.plaf.basic.BasicListUI.createListDataListener()"
    ],
    "java.awt.container.getlisteners": [
        "java.awt.Container.getListeners(java.lang.Class<T>)"
    ],
    "java.util.spi.calendardataprovider.getminimaldaysinfirstweek": [
        "java.util.spi.CalendarDataProvider.getMinimalDaysInFirstWeek(java.util.Locale)"
    ],
    "java.io.printwriter.flush": [
        "java.io.PrintWriter.flush()"
    ],
    "javax.lang.model.element.annotationvaluevisitor.visitlong": [
        "javax.lang.model.element.AnnotationValueVisitor.visitLong(long,javax.lang.model.element.AnnotationValueVisitor)"
    ],
    "javax.swing.abstractbutton.setmargin": [
        "javax.swing.AbstractButton.setMargin(java.awt.Insets)"
    ],
    "javax.xml.transform.transformer.getoutputproperties": [
        "javax.xml.transform.Transformer.getOutputProperties()"
    ],
    "javax.management.timer.timermbean.addnotification": [
        "javax.management.timer.TimerMBean.addNotification(java.lang.String,java.lang.String,java.lang.Object,java.util.Date)",
        "javax.management.timer.TimerMBean.addNotification(java.lang.String,java.lang.String,java.lang.Object,java.util.Date,long,long)",
        "javax.management.timer.TimerMBean.addNotification(java.lang.String,java.lang.String,java.lang.Object,java.util.Date,long)",
        "javax.management.timer.TimerMBean.addNotification(java.lang.String,java.lang.String,java.lang.Object,java.util.Date,long,long,boolean)"
    ],
    "javax.lang.model.util.types.getnotype": [
        "javax.lang.model.util.Types.getNoType(javax.lang.model.type.TypeKind)"
    ],
    "javax.swing.text.gapcontent.getarraylength": [
        "javax.swing.text.GapContent.getArrayLength()"
    ],
    "java.util.stream.longstream.builder.add": [
        "java.util.stream.LongStream.Builder.add(long)"
    ],
    "javax.swing.borderfactory.createlineborder": [
        "javax.swing.BorderFactory.createLineBorder(java.awt.Color)",
        "javax.swing.BorderFactory.createLineBorder(java.awt.Color,int)",
        "javax.swing.BorderFactory.createLineBorder(java.awt.Color,int,boolean)"
    ],
    "java.util.logging.logger.getanonymouslogger": [
        "java.util.logging.Logger.getAnonymousLogger()",
        "java.util.logging.Logger.getAnonymousLogger(java.lang.String)"
    ],
    "javax.swing.text.flowview.setparent": [
        "javax.swing.text.FlowView.setParent(javax.swing.text.View)"
    ],
    "java.nio.intbuffer.tostring": [
        "java.nio.IntBuffer.toString()"
    ],
    "java.lang.class.getconstructors": [
        "java.lang.Class.getConstructors()"
    ],
    "javax.tools.standardjavafilemanager.getjavafileobjectsfromstrings": [
        "javax.tools.StandardJavaFileManager.getJavaFileObjectsFromStrings(java.lang.Iterable<java.lang.String>)"
    ],
    "javax.swing.table.jtableheader.initializelocalvars": [
        "javax.swing.table.JTableHeader.initializeLocalVars()"
    ],
    "javax.xml.ws.handler.portinfo.getservicename": [
        "javax.xml.ws.handler.PortInfo.getServiceName()"
    ],
    "javax.naming.namingexception.setrootcause": [
        "javax.naming.NamingException.setRootCause(java.lang.Throwable)"
    ],
    "java.lang.reflect.array.getdouble": [
        "java.lang.reflect.Array.getDouble(java.lang.Object,int)"
    ],
    "java.awt.robot.keyrelease": [
        "java.awt.Robot.keyRelease(int)"
    ],
    "javax.swing.jtable.getpreferredscrollableviewportsize": [
        "javax.swing.JTable.getPreferredScrollableViewportSize()"
    ],
    "java.awt.dnd.draggesturerecognizer.firedraggesturerecognized": [
        "java.awt.dnd.DragGestureRecognizer.fireDragGestureRecognized(int,java.awt.Point)"
    ],
    "java.nio.file.filesystem.isreadonly": [
        "java.nio.file.FileSystem.isReadOnly()"
    ],
    "javax.swing.inputmap.size": [
        "javax.swing.InputMap.size()"
    ],
    "javax.lang.model.element.annotationvalue.accept": [
        "javax.lang.model.element.AnnotationValue.accept(,P>,P)"
    ],
    "javax.management.openmbean.opentype.equals": [
        "javax.management.openmbean.OpenType.equals(java.lang.Object)"
    ],
    "javax.tools.javafileobject.getkind": [
        "javax.tools.JavaFileObject.getKind()"
    ],
    "javax.xml.soap.soapbody.adddocument": [
        "javax.xml.soap.SOAPBody.addDocument(org.w3c.dom.Document)"
    ],
    "javax.swing.text.glyphview.gettabexpander": [
        "javax.swing.text.GlyphView.getTabExpander()"
    ],
    "javax.xml.soap.soapmessage.getsoappart": [
        "javax.xml.soap.SOAPMessage.getSOAPPart()"
    ],
    "java.util.logging.handler.flush": [
        "java.util.logging.Handler.flush()"
    ],
    "javax.accessibility.accessiblehyperlink.getstartindex": [
        "javax.accessibility.AccessibleHyperlink.getStartIndex()"
    ],
    "javax.sql.rowset.cachedrowset.getpagesize": [
        "javax.sql.rowset.CachedRowSet.getPageSize()"
    ],
    "java.sql.statement.setcursorname": [
        "java.sql.Statement.setCursorName(java.lang.String)"
    ],
    "javax.lang.model.util.elements.getallannotationmirrors": [
        "javax.lang.model.util.Elements.getAllAnnotationMirrors(javax.lang.model.element.Element)"
    ],
    "org.omg.dynamicany._dynsequencestub.insert_short": [
        "org.omg.DynamicAny._DynSequenceStub.insert_short(short)"
    ],
    "javax.swing.plaf.synth.synthprogressbarui.createui": [
        "javax.swing.plaf.synth.SynthProgressBarUI.createUI(javax.swing.JComponent)"
    ],
    "java.applet.appletcontext.getapplets": [
        "java.applet.AppletContext.getApplets()"
    ],
    "org.omg.corba.object._duplicate": [
        "org.omg.CORBA.Object._duplicate()"
    ],
    "java.util.zip.zipentry.setsize": [
        "java.util.zip.ZipEntry.setSize(long)"
    ],
    "org.omg.cosnaming._namingcontextextstub.to_name": [
        "org.omg.CosNaming._NamingContextExtStub.to_name(java.lang.String)"
    ],
    "java.util.primitiveiterator.ofdouble.next": [
        "java.util.PrimitiveIterator.OfDouble.next()"
    ],
    "javax.print.attribute.standard.queuedjobcount.getname": [
        "javax.print.attribute.standard.QueuedJobCount.getName()"
    ],
    "java.util.concurrent.concurrenthashmap.remove": [
        "java.util.concurrent.ConcurrentHashMap.remove(java.lang.Object,java.lang.Object)"
    ],
    "java.awt.textcomponent.processtextevent": [
        "java.awt.TextComponent.processTextEvent(java.awt.event.TextEvent)"
    ],
    "javax.lang.model.sourceversion.valueof": [
        "javax.lang.model.SourceVersion.valueOf(java.lang.String)"
    ],
    "java.io.pushbackreader.mark": [
        "java.io.PushbackReader.mark(int)"
    ],
    "org.omg.dynamicany._dynunionstub.from_any": [
        "org.omg.DynamicAny._DynUnionStub.from_any(org.omg.CORBA.Any)"
    ],
    "javax.sql.rowset.serial.serialblob.getbinarystream": [
        "javax.sql.rowset.serial.SerialBlob.getBinaryStream()",
        "javax.sql.rowset.serial.SerialBlob.getBinaryStream(long,long)"
    ],
    "org.omg.dynamicany._dynenumstub.destroy": [
        "org.omg.DynamicAny._DynEnumStub.destroy()"
    ],
    "java.awt.image.writablerenderedimage.getwritabletile": [
        "java.awt.image.WritableRenderedImage.getWritableTile(int,int)"
    ],
    "java.lang.management.managementfactory.newplatformmxbeanproxy": [
        "java.lang.management.ManagementFactory.newPlatformMXBeanProxy(javax.management.MBeanServerConnection,java.lang.String,java.lang.Class<T>)"
    ],
    "java.util.zip.deflateroutputstream.write": [
        "java.util.zip.DeflaterOutputStream.write(int)",
        "java.util.zip.DeflaterOutputStream.write(byte[],int,int)"
    ],
    "java.util.concurrent.atomic.doubleadder.intvalue": [
        "java.util.concurrent.atomic.DoubleAdder.intValue()"
    ],
    "java.lang.character.isdefined": [
        "java.lang.Character.isDefined(char)"
    ],
    "java.sql.callablestatement.getboolean": [
        "java.sql.CallableStatement.getBoolean(int)",
        "java.sql.CallableStatement.getBoolean(java.lang.String)"
    ],
    "java.lang.processbuilder.redirectoutput": [
        "java.lang.ProcessBuilder.redirectOutput(java.lang.ProcessBuilder.Redirect)",
        "java.lang.ProcessBuilder.redirectOutput(java.io.File)",
        "java.lang.ProcessBuilder.redirectOutput()"
    ],
    "javax.swing.plaf.synth.synthpainter.painttextpanebackground": [
        "javax.swing.plaf.synth.SynthPainter.paintTextPaneBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.text.defaultcaret.getlisteners": [
        "javax.swing.text.DefaultCaret.getListeners(java.lang.Class<T>)"
    ],
    "java.util.zip.deflater.setdictionary": [
        "java.util.zip.Deflater.setDictionary(byte[])",
        "java.util.zip.Deflater.setDictionary(byte[],int,int)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getcontrolshadow": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getControlShadow()"
    ],
    "javax.swing.text.badlocationexception.offsetrequested": [
        "javax.swing.text.BadLocationException.offsetRequested()"
    ],
    "java.net.inetsocketaddress.tostring": [
        "java.net.InetSocketAddress.toString()"
    ],
    "java.io.outputstreamwriter.write": [
        "java.io.OutputStreamWriter.write(int)",
        "java.io.OutputStreamWriter.write(java.lang.String,int,int)",
        "java.io.OutputStreamWriter.write(char[],int,int)"
    ],
    "javax.tools.diagnostic.kind.valueof": [
        "javax.tools.Diagnostic.Kind.valueOf(java.lang.String)"
    ],
    "java.util.concurrent.atomic.atomiclongfieldupdater.get": [
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.get(java.util.concurrent.atomic.AtomicLongFieldUpdater)",
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.get(T)"
    ],
    "javax.management.descriptor.getfieldnames": [
        "javax.management.Descriptor.getFieldNames()"
    ],
    "java.io.writer.flush": [
        "java.io.Writer.flush()"
    ],
    "javax.sound.midi.shortmessage.clone": [
        "javax.sound.midi.ShortMessage.clone()"
    ],
    "javax.sound.midi.midimessage.getstatus": [
        "javax.sound.midi.MidiMessage.getStatus()"
    ],
    "javax.swing.text.html.parser.dtd.defineentity": [
        "javax.swing.text.html.parser.DTD.defineEntity(java.lang.String,int,char[])"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writebigdecimal": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeBigDecimal(java.math.BigDecimal)"
    ],
    "java.time.yearmonth.adjustinto": [
        "java.time.YearMonth.adjustInto(java.time.temporal.Temporal)"
    ],
    "java.time.localdate.minusmonths": [
        "java.time.LocalDate.minusMonths(long)"
    ],
    "java.awt.menubar.addnotify": [
        "java.awt.MenuBar.addNotify()"
    ],
    "javax.swing.text.highlighter.highlight.getpainter": [
        "javax.swing.text.Highlighter.Highlight.getPainter()"
    ],
    "java.text.breakiterator.getlineinstance": [
        "java.text.BreakIterator.getLineInstance(java.util.Locale)",
        "java.text.BreakIterator.getLineInstance()"
    ],
    "java.awt.component.getbackground": [
        "java.awt.Component.getBackground()"
    ],
    "javax.swing.plaf.layerui.paint": [
        "javax.swing.plaf.LayerUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.awt.image.renderable.rendercontext.gettransform": [
        "java.awt.image.renderable.RenderContext.getTransform()"
    ],
    "javax.swing.plaf.multi.multisplitpaneui.createui": [
        "javax.swing.plaf.multi.MultiSplitPaneUI.createUI(javax.swing.JComponent)"
    ],
    "java.util.bitset.nextclearbit": [
        "java.util.BitSet.nextClearBit(int)"
    ],
    "javax.lang.model.element.annotationvaluevisitor.visit": [
        "javax.lang.model.element.AnnotationValueVisitor.visit(javax.lang.model.element.AnnotationValue,javax.lang.model.element.AnnotationValueVisitor)"
    ],
    "java.util.concurrent.concurrentskiplistset.descendingset": [
        "java.util.concurrent.ConcurrentSkipListSet.descendingSet()"
    ],
    "javax.security.auth.callback.textoutputcallback.getmessage": [
        "javax.security.auth.callback.TextOutputCallback.getMessage()"
    ],
    "javax.imageio.metadata.iiometadataformat.getobjectarraymaxlength": [
        "javax.imageio.metadata.IIOMetadataFormat.getObjectArrayMaxLength(java.lang.String)"
    ],
    "java.util.timer.cancel": [
        "java.util.Timer.cancel()"
    ],
    "java.nio.file.attribute.aclentry.permissions": [
        "java.nio.file.attribute.AclEntry.permissions()"
    ],
    "org.ietf.jgss.gsscontext.getreplaydetstate": [
        "org.ietf.jgss.GSSContext.getReplayDetState()"
    ],
    "java.util.vector.equals": [
        "java.util.Vector.equals(java.lang.Object)"
    ],
    "javax.swing.jlist.getprototypecellvalue": [
        "javax.swing.JList.getPrototypeCellValue()"
    ],
    "org.omg.portableinterceptor.requestinfooperations.get_slot": [
        "org.omg.PortableInterceptor.RequestInfoOperations.get_slot(int)"
    ],
    "org.omg.corba.orb.create_interface_tc": [
        "org.omg.CORBA.ORB.create_interface_tc(java.lang.String,java.lang.String)"
    ],
    "java.util.concurrent.semaphore.availablepermits": [
        "java.util.concurrent.Semaphore.availablePermits()"
    ],
    "java.sql.statement.getresultset": [
        "java.sql.Statement.getResultSet()"
    ],
    "javax.swing.defaultdesktopmanager.resizeframe": [
        "javax.swing.DefaultDesktopManager.resizeFrame(javax.swing.JComponent,int,int,int,int)"
    ],
    "javax.swing.text.jtextcomponent.getcaretlisteners": [
        "javax.swing.text.JTextComponent.getCaretListeners()"
    ],
    "javax.sound.midi.sequencer.settempoinbpm": [
        "javax.sound.midi.Sequencer.setTempoInBPM(float)"
    ],
    "javax.imageio.iioimage.getnumthumbnails": [
        "javax.imageio.IIOImage.getNumThumbnails()"
    ],
    "org.omg.cosnaming._namingcontextextstub.destroy": [
        "org.omg.CosNaming._NamingContextExtStub.destroy()"
    ],
    "java.time.chrono.chronology.dateyearday": [
        "java.time.chrono.Chronology.dateYearDay(java.time.chrono.Era,int,int)",
        "java.time.chrono.Chronology.dateYearDay(int,int)"
    ],
    "java.io.bufferedreader.read": [
        "java.io.BufferedReader.read(char[],int,int)",
        "java.io.BufferedReader.read()"
    ],
    "javax.xml.transform.sourcelocator.getsystemid": [
        "javax.xml.transform.SourceLocator.getSystemId()"
    ],
    "java.time.offsettime.withsecond": [
        "java.time.OffsetTime.withSecond(int)"
    ],
    "javax.swing.jtextfield.scrollrecttovisible": [
        "javax.swing.JTextField.scrollRectToVisible(java.awt.Rectangle)"
    ],
    "javax.swing.plaf.metal.metaltheme.getprimary2": [
        "javax.swing.plaf.metal.MetalTheme.getPrimary2()"
    ],
    "javax.xml.crypto.dsig.keyinfo.keyinfofactory.getprovider": [
        "javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getProvider()"
    ],
    "java.net.authenticator.getrequestingsite": [
        "java.net.Authenticator.getRequestingSite()"
    ],
    "javax.naming.compositename.getprefix": [
        "javax.naming.CompositeName.getPrefix(int)"
    ],
    "java.util.concurrent.forkjoinpool.awaittermination": [
        "java.util.concurrent.ForkJoinPool.awaitTermination(long,java.util.concurrent.TimeUnit)"
    ],
    "org.omg.corba.portable.inputstream.read_short_array": [
        "org.omg.CORBA.portable.InputStream.read_short_array(short[],int,int)"
    ],
    "java.lang.instrument.instrumentation.addtransformer": [
        "java.lang.instrument.Instrumentation.addTransformer(java.lang.instrument.ClassFileTransformer,boolean)",
        "java.lang.instrument.Instrumentation.addTransformer(java.lang.instrument.ClassFileTransformer)"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.writelock.trylock": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.tryLock(long,java.util.concurrent.TimeUnit)",
        "java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.tryLock()"
    ],
    "javax.swing.text.keymap.getaction": [
        "javax.swing.text.Keymap.getAction(javax.swing.KeyStroke)"
    ],
    "javax.swing.plaf.synth.synthdesktopiconui.createui": [
        "javax.swing.plaf.synth.SynthDesktopIconUI.createUI(javax.swing.JComponent)"
    ],
    "java.beans.methoddescriptor.getparameterdescriptors": [
        "java.beans.MethodDescriptor.getParameterDescriptors()"
    ],
    "javax.swing.text.html.paragraphview.calculateminoraxisrequirements": [
        "javax.swing.text.html.ParagraphView.calculateMinorAxisRequirements(int,javax.swing.SizeRequirements)"
    ],
    "java.sql.databasemetadata.supportsresultsetconcurrency": [
        "java.sql.DatabaseMetaData.supportsResultSetConcurrency(int,int)"
    ],
    "java.util.primitiveiterator.foreachremaining": [
        "java.util.PrimitiveIterator.forEachRemaining(T_CONS)",
        "java.util.PrimitiveIterator.forEachRemaining(java.util.PrimitiveIterator)"
    ],
    "java.sql.databasemetadata.supportsmixedcasequotedidentifiers": [
        "java.sql.DatabaseMetaData.supportsMixedCaseQuotedIdentifiers()"
    ],
    "java.util.locale.getcountry": [
        "java.util.Locale.getCountry()"
    ],
    "java.util.stream.doublestream.sorted": [
        "java.util.stream.DoubleStream.sorted()"
    ],
    "javax.naming.spi.initialcontextfactorybuilder.createinitialcontextfactory": [
        "javax.naming.spi.InitialContextFactoryBuilder.createInitialContextFactory(,?>)"
    ],
    "java.awt.image.databufferdouble.setelemfloat": [
        "java.awt.image.DataBufferDouble.setElemFloat(int,int,float)"
    ],
    "javax.naming.context.list": [
        "javax.naming.Context.list(java.lang.String)",
        "javax.naming.Context.list(javax.naming.Name)"
    ],
    "javax.xml.bind.binder.unmarshal": [
        "javax.xml.bind.Binder.unmarshal(javax.xml.bind.Binder,java.lang.Class<T>)"
    ],
    "org.omg.corba.localobject._create_request": [
        "org.omg.CORBA.LocalObject._create_request(org.omg.CORBA.Context,java.lang.String,org.omg.CORBA.NVList,org.omg.CORBA.NamedValue)",
        "org.omg.CORBA.LocalObject._create_request(org.omg.CORBA.Context,java.lang.String,org.omg.CORBA.NVList,org.omg.CORBA.NamedValue,org.omg.CORBA.ExceptionList,org.omg.CORBA.ContextList)"
    ],
    "javax.naming.ldap.control.getencodedvalue": [
        "javax.naming.ldap.Control.getEncodedValue()"
    ],
    "org.omg.dynamicany._dynunionstub.get_typecode": [
        "org.omg.DynamicAny._DynUnionStub.get_typecode()"
    ],
    "javax.imageio.stream.filecacheimageoutputstream.close": [
        "javax.imageio.stream.FileCacheImageOutputStream.close()"
    ],
    "javax.swing.jinternalframe.toback": [
        "javax.swing.JInternalFrame.toBack()"
    ],
    "javax.imageio.imagewriter.addiiowritewarninglistener": [
        "javax.imageio.ImageWriter.addIIOWriteWarningListener(javax.imageio.event.IIOWriteWarningListener)"
    ],
    "java.lang.ref.reference.clear": [
        "java.lang.ref.Reference.clear()"
    ],
    "javax.swing.text.glyphview.getnextvisualpositionfrom": [
        "javax.swing.text.GlyphView.getNextVisualPositionFrom(int,javax.swing.text.Position.Bias,java.awt.Shape,int,javax.swing.text.Position.Bias[])"
    ],
    "java.nio.channels.pipe.sink": [
        "java.nio.channels.Pipe.sink()"
    ],
    "java.beans.persistencedelegate.initialize": [
        "java.beans.PersistenceDelegate.initialize(java.lang.Class<?>,java.lang.Object,java.lang.Object,java.beans.Encoder)"
    ],
    "org.w3c.dom.domlocator.getutf16offset": [
        "org.w3c.dom.DOMLocator.getUtf16Offset()"
    ],
    "java.text.numberformat.setmaximumfractiondigits": [
        "java.text.NumberFormat.setMaximumFractionDigits(int)"
    ],
    "javax.swing.boundedrangemodel.setvalue": [
        "javax.swing.BoundedRangeModel.setValue(int)"
    ],
    "javax.accessibility.accessiblecomponent.getaccessibleat": [
        "javax.accessibility.AccessibleComponent.getAccessibleAt(java.awt.Point)"
    ],
    "java.time.zoneddatetime.get": [
        "java.time.ZonedDateTime.get(java.time.temporal.TemporalField)"
    ],
    "javax.swing.colorchooser.abstractcolorchooserpanel.getlargedisplayicon": [
        "javax.swing.colorchooser.AbstractColorChooserPanel.getLargeDisplayIcon()"
    ],
    "javax.swing.boxlayout.gettarget": [
        "javax.swing.BoxLayout.getTarget()"
    ],
    "javax.xml.parsers.documentbuilderfactory.isnamespaceaware": [
        "javax.xml.parsers.DocumentBuilderFactory.isNamespaceAware()"
    ],
    "javax.swing.text.abstractdocument.attributecontext.addattributes": [
        "javax.swing.text.AbstractDocument.AttributeContext.addAttributes(javax.swing.text.AttributeSet,javax.swing.text.AttributeSet)"
    ],
    "javax.swing.text.abstractdocument.getproperty": [
        "javax.swing.text.AbstractDocument.getProperty(java.lang.Object)"
    ],
    "java.net.httpretryexception.getreason": [
        "java.net.HttpRetryException.getReason()"
    ],
    "javax.print.attribute.standard.jobpriority.getcategory": [
        "javax.print.attribute.standard.JobPriority.getCategory()"
    ],
    "java.awt.awtkeystroke.getawtkeystrokeforevent": [
        "java.awt.AWTKeyStroke.getAWTKeyStrokeForEvent(java.awt.event.KeyEvent)"
    ],
    "java.awt.window.seticonimage": [
        "java.awt.Window.setIconImage(java.awt.Image)"
    ],
    "javax.naming.directory.modificationitem.getmodificationop": [
        "javax.naming.directory.ModificationItem.getModificationOp()"
    ],
    "javax.swing.jcomponent.gety": [
        "javax.swing.JComponent.getY()"
    ],
    "java.util.arraylist.lastindexof": [
        "java.util.ArrayList.lastIndexOf(java.lang.Object)"
    ],
    "java.time.duration.parse": [
        "java.time.Duration.parse(java.lang.CharSequence)"
    ],
    "javax.swing.text.fieldview.viewtomodel": [
        "javax.swing.text.FieldView.viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias[])"
    ],
    "java.awt.textarea.getscrollbarvisibility": [
        "java.awt.TextArea.getScrollbarVisibility()"
    ],
    "javax.xml.stream.events.xmlevent.geteventtype": [
        "javax.xml.stream.events.XMLEvent.getEventType()"
    ],
    "org.omg.dynamicany._dynarraystub.from_any": [
        "org.omg.DynamicAny._DynArrayStub.from_any(org.omg.CORBA.Any)"
    ],
    "javax.lang.model.util.elements.getconstantexpression": [
        "javax.lang.model.util.Elements.getConstantExpression(java.lang.Object)"
    ],
    "javax.swing.transferhandler.transfersupport.getdataflavors": [
        "javax.swing.TransferHandler.TransferSupport.getDataFlavors()"
    ],
    "javax.swing.tree.defaulttreecelleditor.getborderselectioncolor": [
        "javax.swing.tree.DefaultTreeCellEditor.getBorderSelectionColor()"
    ],
    "java.nio.channels.membershipkey.channel": [
        "java.nio.channels.MembershipKey.channel()"
    ],
    "javax.tools.diagnostic.getstartposition": [
        "javax.tools.Diagnostic.getStartPosition()"
    ],
    "javax.xml.stream.xmlstreamreader.getattributecount": [
        "javax.xml.stream.XMLStreamReader.getAttributeCount()"
    ],
    "org.omg.dynamicany._dynsequencestub.get_wstring": [
        "org.omg.DynamicAny._DynSequenceStub.get_wstring()"
    ],
    "java.awt.checkbox.processitemevent": [
        "java.awt.Checkbox.processItemEvent(java.awt.event.ItemEvent)"
    ],
    "java.sql.databasemetadata.getindexinfo": [
        "java.sql.DatabaseMetaData.getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)"
    ],
    "javax.swing.defaultlistmodel.firstelement": [
        "javax.swing.DefaultListModel.firstElement()"
    ],
    "java.util.concurrent.linkedtransferqueue.offer": [
        "java.util.concurrent.LinkedTransferQueue.offer(java.util.concurrent.LinkedTransferQueue,long,java.util.concurrent.TimeUnit)",
        "java.util.concurrent.LinkedTransferQueue.offer(E,long,java.util.concurrent.TimeUnit)",
        "java.util.concurrent.LinkedTransferQueue.offer(java.util.concurrent.LinkedTransferQueue)",
        "java.util.concurrent.LinkedTransferQueue.offer(E)"
    ],
    "javax.annotation.resource.authenticationtype.valueof": [
        "javax.annotation.Resource.AuthenticationType.valueOf(java.lang.String)"
    ],
    "java.lang.stringbuffer.replace": [
        "java.lang.StringBuffer.replace(int,int,java.lang.String)"
    ],
    "java.security.provider.service.tostring": [
        "java.security.Provider.Service.toString()"
    ],
    "javax.swing.grouplayout.createsequentialgroup": [
        "javax.swing.GroupLayout.createSequentialGroup()"
    ],
    "javax.swing.text.layoutqueue.waitforwork": [
        "javax.swing.text.LayoutQueue.waitForWork()"
    ],
    "java.util.prefs.preferences.put": [
        "java.util.prefs.Preferences.put(java.lang.String,java.lang.String)"
    ],
    "java.util.propertyresourcebundle.getkeys": [
        "java.util.PropertyResourceBundle.getKeys()"
    ],
    "javax.swing.plaf.basic.basictextui.createhighlighter": [
        "javax.swing.plaf.basic.BasicTextUI.createHighlighter()"
    ],
    "java.awt.awteventmulticaster.windowiconified": [
        "java.awt.AWTEventMulticaster.windowIconified(java.awt.event.WindowEvent)"
    ],
    "java.awt.geom.ellipse2d.hashcode": [
        "java.awt.geom.Ellipse2D.hashCode()"
    ],
    "java.lang.reflect.parameter.getannotatedtype": [
        "java.lang.reflect.Parameter.getAnnotatedType()"
    ],
    "javax.swing.plaf.synth.synthtableui.installlisteners": [
        "javax.swing.plaf.synth.SynthTableUI.installListeners()"
    ],
    "javax.swing.jslider.setminortickspacing": [
        "javax.swing.JSlider.setMinorTickSpacing(int)"
    ],
    "javax.swing.plaf.multi.multiscrollpaneui.uninstallui": [
        "javax.swing.plaf.multi.MultiScrollPaneUI.uninstallUI(javax.swing.JComponent)"
    ],
    "javax.swing.transferhandler.transfersupport.setshowdroplocation": [
        "javax.swing.TransferHandler.TransferSupport.setShowDropLocation(boolean)"
    ],
    "javax.xml.stream.xmlstreamwriter.getprefix": [
        "javax.xml.stream.XMLStreamWriter.getPrefix(java.lang.String)"
    ],
    "java.io.dataoutputstream.writechars": [
        "java.io.DataOutputStream.writeChars(java.lang.String)"
    ],
    "java.util.concurrent.copyonwritearrayset.equals": [
        "java.util.concurrent.CopyOnWriteArraySet.equals(java.lang.Object)"
    ],
    "javax.management.modelmbean.modelmbeannotificationbroadcaster.addattributechangenotificationlistener": [
        "javax.management.modelmbean.ModelMBeanNotificationBroadcaster.addAttributeChangeNotificationListener(javax.management.NotificationListener,java.lang.String,java.lang.Object)"
    ],
    "java.awt.dnd.dragsource.adddragsourcemotionlistener": [
        "java.awt.dnd.DragSource.addDragSourceMotionListener(java.awt.dnd.DragSourceMotionListener)"
    ],
    "javax.sql.rowset.baserowset.notifyrowchanged": [
        "javax.sql.rowset.BaseRowSet.notifyRowChanged()"
    ],
    "java.util.stream.stream.findany": [
        "java.util.stream.Stream.findAny()"
    ],
    "javax.management.mbeanserverconnection.invoke": [
        "javax.management.MBeanServerConnection.invoke(javax.management.ObjectName,java.lang.String,java.lang.Object[],java.lang.String[])"
    ],
    "java.awt.geom.quadcurve2d.float.getp1": [
        "java.awt.geom.QuadCurve2D.Float.getP1()"
    ],
    "javax.accessibility.accessibleextendedtext.gettextsequenceafter": [
        "javax.accessibility.AccessibleExtendedText.getTextSequenceAfter(int,int)"
    ],
    "javax.management.loading.mletmbean.getlibrarydirectory": [
        "javax.management.loading.MLetMBean.getLibraryDirectory()"
    ],
    "javax.swing.jfilechooser.isfileselectionenabled": [
        "javax.swing.JFileChooser.isFileSelectionEnabled()"
    ],
    "java.awt.geom.arc2d.float.getangleextent": [
        "java.awt.geom.Arc2D.Float.getAngleExtent()"
    ],
    "javax.swing.jmenubar.gethelpmenu": [
        "javax.swing.JMenuBar.getHelpMenu()"
    ],
    "java.util.optional.orelsethrow": [
        "java.util.Optional.orElseThrow(java.util.function.Supplier<? extends X>)"
    ],
    "javax.swing.text.boxview.getresizeweight": [
        "javax.swing.text.BoxView.getResizeWeight(int)"
    ],
    "java.lang.long.reversebytes": [
        "java.lang.Long.reverseBytes(long)"
    ],
    "javax.imageio.imagereader.processimageprogress": [
        "javax.imageio.ImageReader.processImageProgress(float)"
    ],
    "javax.swing.sizesequence.insertentries": [
        "javax.swing.SizeSequence.insertEntries(int,int,int)"
    ],
    "javax.swing.plaf.multi.multidesktoppaneui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiDesktopPaneUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "javax.xml.bind.validationevent.getseverity": [
        "javax.xml.bind.ValidationEvent.getSeverity()"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readarray": [
        "javax.sql.rowset.serial.SQLInputImpl.readArray()"
    ],
    "javax.imageio.imagereader.processsequencecomplete": [
        "javax.imageio.ImageReader.processSequenceComplete()"
    ],
    "javax.lang.model.element.typeparameterelement.getenclosingelement": [
        "javax.lang.model.element.TypeParameterElement.getEnclosingElement()"
    ],
    "java.lang.thread.getdefaultuncaughtexceptionhandler": [
        "java.lang.Thread.getDefaultUncaughtExceptionHandler()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintradiobuttonmenuitemborder": [
        "javax.swing.plaf.synth.SynthPainter.paintRadioButtonMenuItemBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.plaf.multi.multidesktopiconui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiDesktopIconUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "org.omg.dynamicany._dynenumstub.insert_short": [
        "org.omg.DynamicAny._DynEnumStub.insert_short(short)"
    ],
    "java.awt.event.invocationevent.getwhen": [
        "java.awt.event.InvocationEvent.getWhen()"
    ],
    "javax.management.monitor.countermonitor.setmodulus": [
        "javax.management.monitor.CounterMonitor.setModulus(java.lang.Number)"
    ],
    "java.beans.beancontext.beancontextchild.removepropertychangelistener": [
        "java.beans.beancontext.BeanContextChild.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"
    ],
    "java.time.temporal.chronounit.getduration": [
        "java.time.temporal.ChronoUnit.getDuration()"
    ],
    "java.awt.toolkit.createcustomcursor": [
        "java.awt.Toolkit.createCustomCursor(java.awt.Image,java.awt.Point,java.lang.String)"
    ],
    "java.awt.borderlayout.setvgap": [
        "java.awt.BorderLayout.setVgap(int)"
    ],
    "javax.sound.sampled.mixer.getline": [
        "javax.sound.sampled.Mixer.getLine(javax.sound.sampled.Line.Info)"
    ],
    "javax.activation.datasource.getoutputstream": [
        "javax.activation.DataSource.getOutputStream()"
    ],
    "javax.swing.jlist.getnextmatch": [
        "javax.swing.JList.getNextMatch(java.lang.String,int,javax.swing.text.Position.Bias)"
    ],
    "javax.swing.plaf.componentui.getpreferredsize": [
        "javax.swing.plaf.ComponentUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "javax.swing.swingutilities.getaccessiblestateset": [
        "javax.swing.SwingUtilities.getAccessibleStateSet(java.awt.Component)"
    ],
    "javax.swing.plaf.synth.synthtableui.propertychange": [
        "javax.swing.plaf.synth.SynthTableUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "javax.swing.text.passwordview.modeltoview": [
        "javax.swing.text.PasswordView.modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)"
    ],
    "javax.crypto.mac.init": [
        "javax.crypto.Mac.init(java.security.Key,java.security.spec.AlgorithmParameterSpec)",
        "javax.crypto.Mac.init(java.security.Key)"
    ],
    "java.awt.frame.setextendedstate": [
        "java.awt.Frame.setExtendedState(int)"
    ],
    "javax.management.descriptor.equals": [
        "javax.management.Descriptor.equals(java.lang.Object)"
    ],
    "java.nio.bytebuffer.ascharbuffer": [
        "java.nio.ByteBuffer.asCharBuffer()"
    ],
    "java.lang.string.equals": [
        "java.lang.String.equals(java.lang.Object)"
    ],
    "java.text.decimalformat.isparsebigdecimal": [
        "java.text.DecimalFormat.isParseBigDecimal()"
    ],
    "javax.security.auth.privatecredentialpermission.implies": [
        "javax.security.auth.PrivateCredentialPermission.implies(java.security.Permission)"
    ],
    "java.awt.geom.roundrectangle2d.intersects": [
        "java.awt.geom.RoundRectangle2D.intersects(double,double,double,double)"
    ],
    "javax.swing.text.element.getelementcount": [
        "javax.swing.text.Element.getElementCount()"
    ],
    "java.time.yearmonth.atendofmonth": [
        "java.time.YearMonth.atEndOfMonth()"
    ],
    "java.security.keystorespi.enginegetkey": [
        "java.security.KeyStoreSpi.engineGetKey(java.lang.String,char[])"
    ],
    "java.sql.preparedstatement.settimestamp": [
        "java.sql.PreparedStatement.setTimestamp(int,java.sql.Timestamp,java.util.Calendar)",
        "java.sql.PreparedStatement.setTimestamp(int,java.sql.Timestamp)"
    ],
    "java.security.cert.x509certselector.setauthoritykeyidentifier": [
        "java.security.cert.X509CertSelector.setAuthorityKeyIdentifier(byte[])"
    ],
    "javax.swing.grouplayout.linksize": [
        "javax.swing.GroupLayout.linkSize(java.awt.Component...)",
        "javax.swing.GroupLayout.linkSize(int,java.awt.Component...)"
    ],
    "javax.security.auth.login.configuration.getappconfigurationentry": [
        "javax.security.auth.login.Configuration.getAppConfigurationEntry(java.lang.String)"
    ],
    "java.util.primitiveiterator.ofdouble.nextdouble": [
        "java.util.PrimitiveIterator.OfDouble.nextDouble()"
    ],
    "java.util.jar.pack200.packer.properties": [
        "java.util.jar.Pack200.Packer.properties()"
    ],
    "javax.swing.spring.height": [
        "javax.swing.Spring.height(java.awt.Component)"
    ],
    "java.io.dataoutputstream.writefloat": [
        "java.io.DataOutputStream.writeFloat(float)"
    ],
    "java.awt.image.colormodel.hashcode": [
        "java.awt.image.ColorModel.hashCode()"
    ],
    "javax.swing.plaf.synth.synthsliderui.valueforyposition": [
        "javax.swing.plaf.synth.SynthSliderUI.valueForYPosition(int)"
    ],
    "java.util.hashmap.keyset": [
        "java.util.HashMap.keySet()"
    ],
    "javax.swing.plaf.nimbus.nimbusstyle.getborderpainter": [
        "javax.swing.plaf.nimbus.NimbusStyle.getBorderPainter(javax.swing.plaf.synth.SynthContext)"
    ],
    "java.util.concurrent.linkedblockingqueue.put": [
        "java.util.concurrent.LinkedBlockingQueue.put(java.util.concurrent.LinkedBlockingQueue)",
        "java.util.concurrent.LinkedBlockingQueue.put(E)"
    ],
    "javax.imageio.imageio.getimagereader": [
        "javax.imageio.ImageIO.getImageReader(javax.imageio.ImageWriter)"
    ],
    "javax.management.relation.roleunresolved.getrolename": [
        "javax.management.relation.RoleUnresolved.getRoleName()"
    ],
    "javax.swing.abstractbutton.getdisplayedmnemonicindex": [
        "javax.swing.AbstractButton.getDisplayedMnemonicIndex()"
    ],
    "javax.swing.text.maskformatter.valuetostring": [
        "javax.swing.text.MaskFormatter.valueToString(java.lang.Object)"
    ],
    "java.time.zoneddatetime.minusseconds": [
        "java.time.ZonedDateTime.minusSeconds(long)"
    ],
    "javax.print.attribute.standard.pageranges.equals": [
        "javax.print.attribute.standard.PageRanges.equals(java.lang.Object)"
    ],
    "java.awt.textcomponent.gettext": [
        "java.awt.TextComponent.getText()"
    ],
    "java.util.concurrent.concurrenthashmap.keysetview.iterator": [
        "java.util.concurrent.ConcurrentHashMap.KeySetView.iterator()"
    ],
    "javax.swing.plaf.nimbus.abstractregionpainter.dopaint": [
        "javax.swing.plaf.nimbus.AbstractRegionPainter.doPaint(java.awt.Graphics2D,javax.swing.JComponent,int,int,java.lang.Object[])"
    ],
    "java.sql.sqlxml.setcharacterstream": [
        "java.sql.SQLXML.setCharacterStream()"
    ],
    "javax.sound.sampled.dataline.stop": [
        "javax.sound.sampled.DataLine.stop()"
    ],
    "java.awt.menushortcut.getkey": [
        "java.awt.MenuShortcut.getKey()"
    ],
    "java.security.acl.aclentry.removepermission": [
        "java.security.acl.AclEntry.removePermission(java.security.acl.Permission)"
    ],
    "javax.net.ssl.x509keymanager.getprivatekey": [
        "javax.net.ssl.X509KeyManager.getPrivateKey(java.lang.String)"
    ],
    "javax.swing.jtextfield.setfont": [
        "javax.swing.JTextField.setFont(java.awt.Font)"
    ],
    "javax.sql.rowset.joinrowset.getrowsetnames": [
        "javax.sql.rowset.JoinRowSet.getRowSetNames()"
    ],
    "javax.management.notification.setuserdata": [
        "javax.management.Notification.setUserData(java.lang.Object)"
    ],
    "java.awt.dnd.droptargetdragevent.getcurrentdataflavorsaslist": [
        "java.awt.dnd.DropTargetDragEvent.getCurrentDataFlavorsAsList()"
    ],
    "java.util.jar.jarinputstream.read": [
        "java.util.jar.JarInputStream.read(byte[],int,int)"
    ],
    "javax.swing.jslider.setmajortickspacing": [
        "javax.swing.JSlider.setMajorTickSpacing(int)"
    ],
    "org.omg.dynamicany._dynstructstub.get_long": [
        "org.omg.DynamicAny._DynStructStub.get_long()"
    ],
    "java.util.concurrent.completablefuture.applytoeither": [
        "java.util.concurrent.CompletableFuture.applyToEither(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Function<? super,U>)"
    ],
    "javax.naming.name.getprefix": [
        "javax.naming.Name.getPrefix(int)"
    ],
    "java.nio.channels.asynchronouschannelgroup.withthreadpool": [
        "java.nio.channels.AsynchronousChannelGroup.withThreadPool(java.util.concurrent.ExecutorService)"
    ],
    "org.ietf.jgss.gssexception.tostring": [
        "org.ietf.jgss.GSSException.toString()"
    ],
    "javax.sound.midi.midichannel.resetallcontrollers": [
        "javax.sound.midi.MidiChannel.resetAllControllers()"
    ],
    "javax.management.remote.rmi.rmiserver.getversion": [
        "javax.management.remote.rmi.RMIServer.getVersion()"
    ],
    "javax.swing.plaf.basic.basictextpaneui.propertychange": [
        "javax.swing.plaf.basic.BasicTextPaneUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "java.awt.lineargradientpaint.getendpoint": [
        "java.awt.LinearGradientPaint.getEndPoint()"
    ],
    "javax.net.ssl.sslengine.getdelegatedtask": [
        "javax.net.ssl.SSLEngine.getDelegatedTask()"
    ],
    "javax.imageio.imagereader.removeiioreadprogresslistener": [
        "javax.imageio.ImageReader.removeIIOReadProgressListener(javax.imageio.event.IIOReadProgressListener)"
    ],
    "java.util.propertypermission.implies": [
        "java.util.PropertyPermission.implies(java.security.Permission)"
    ],
    "javax.swing.plaf.metal.defaultmetaltheme.getsecondary1": [
        "javax.swing.plaf.metal.DefaultMetalTheme.getSecondary1()"
    ],
    "java.awt.dnd.dragsourcedragevent.getuseraction": [
        "java.awt.dnd.DragSourceDragEvent.getUserAction()"
    ],
    "java.util.concurrent.concurrentskiplistmap.putifabsent": [
        "java.util.concurrent.ConcurrentSkipListMap.putIfAbsent(java.util.concurrent.ConcurrentSkipListMap,java.util.concurrent.ConcurrentSkipListMap)",
        "java.util.concurrent.ConcurrentSkipListMap.putIfAbsent(K,V)"
    ],
    "javax.swing.jtabbedpane.settablayoutpolicy": [
        "javax.swing.JTabbedPane.setTabLayoutPolicy(int)"
    ],
    "javax.print.simpledoc.getattributes": [
        "javax.print.SimpleDoc.getAttributes()"
    ],
    "org.omg.dynamicany._dynvaluestub.get_longlong": [
        "org.omg.DynamicAny._DynValueStub.get_longlong()"
    ],
    "javax.swing.boundedrangemodel.setvalueisadjusting": [
        "javax.swing.BoundedRangeModel.setValueIsAdjusting(boolean)"
    ],
    "java.security.cert.x509certificate.getnotafter": [
        "java.security.cert.X509Certificate.getNotAfter()"
    ],
    "javax.swing.jtoolbar.createactionchangelistener": [
        "javax.swing.JToolBar.createActionChangeListener(javax.swing.JButton)"
    ],
    "java.net.serversocket.setperformancepreferences": [
        "java.net.ServerSocket.setPerformancePreferences(int,int,int)"
    ],
    "java.awt.image.renderedimage.getproperty": [
        "java.awt.image.RenderedImage.getProperty(java.lang.String)"
    ],
    "javax.print.attribute.standard.mediaprintablearea.getname": [
        "javax.print.attribute.standard.MediaPrintableArea.getName()"
    ],
    "java.beans.beancontext.beancontextchild.addpropertychangelistener": [
        "java.beans.beancontext.BeanContextChild.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"
    ],
    "java.time.localdatetime.atoffset": [
        "java.time.LocalDateTime.atOffset(java.time.ZoneOffset)"
    ],
    "javax.swing.jtextpane.replaceselection": [
        "javax.swing.JTextPane.replaceSelection(java.lang.String)"
    ],
    "org.omg.dynamicany._dynfixedstub.insert_typecode": [
        "org.omg.DynamicAny._DynFixedStub.insert_typecode(org.omg.CORBA.TypeCode)"
    ],
    "javax.swing.defaultbuttonmodel.removeitemlistener": [
        "javax.swing.DefaultButtonModel.removeItemListener(java.awt.event.ItemListener)"
    ],
    "java.awt.list.processitemevent": [
        "java.awt.List.processItemEvent(java.awt.event.ItemEvent)"
    ],
    "javax.swing.text.simpleattributeset.getattribute": [
        "javax.swing.text.SimpleAttributeSet.getAttribute(java.lang.Object)"
    ],
    "java.awt.container.setcomponentzorder": [
        "java.awt.Container.setComponentZOrder(java.awt.Component,int)"
    ],
    "java.awt.font.glyphvector.getglyphvisualbounds": [
        "java.awt.font.GlyphVector.getGlyphVisualBounds(int)"
    ],
    "javax.net.ssl.sslengine.setenabledciphersuites": [
        "javax.net.ssl.SSLEngine.setEnabledCipherSuites(java.lang.String)",
        "javax.net.ssl.SSLEngine.setEnabledCipherSuites(java.lang.String[])"
    ],
    "java.net.uri.getquery": [
        "java.net.URI.getQuery()"
    ],
    "javax.swing.jfilechooser.addchoosablefilefilter": [
        "javax.swing.JFileChooser.addChoosableFileFilter(javax.swing.filechooser.FileFilter)"
    ],
    "java.util.concurrent.phaser.bulkregister": [
        "java.util.concurrent.Phaser.bulkRegister(int)"
    ],
    "javax.swing.text.html.htmleditorkit.inserthtml": [
        "javax.swing.text.html.HTMLEditorKit.insertHTML(javax.swing.text.html.HTMLDocument,int,java.lang.String,int,int,javax.swing.text.html.HTML.Tag)"
    ],
    "javax.management.notification.gettimestamp": [
        "javax.management.Notification.getTimeStamp()"
    ],
    "javax.sql.rowset.baserowset.setfetchsize": [
        "javax.sql.rowset.BaseRowSet.setFetchSize(int)"
    ],
    "javax.sound.midi.sequencer.getticklength": [
        "javax.sound.midi.Sequencer.getTickLength()"
    ],
    "javax.management.loading.mlet.postderegister": [
        "javax.management.loading.MLet.postDeregister()"
    ],
    "javax.swing.text.caret.getdot": [
        "javax.swing.text.Caret.getDot()"
    ],
    "java.lang.strictmath.sqrt": [
        "java.lang.StrictMath.sqrt(double)"
    ],
    "javax.swing.jtable.removerowselectioninterval": [
        "javax.swing.JTable.removeRowSelectionInterval(int,int)"
    ],
    "java.nio.longbuffer.duplicate": [
        "java.nio.LongBuffer.duplicate()"
    ],
    "javax.script.simplescriptcontext.setreader": [
        "javax.script.SimpleScriptContext.setReader(java.io.Reader)"
    ],
    "java.util.logging.filehandler.publish": [
        "java.util.logging.FileHandler.publish(java.util.logging.LogRecord)"
    ],
    "java.awt.graphicsenvironment.getcenterpoint": [
        "java.awt.GraphicsEnvironment.getCenterPoint()"
    ],
    "java.lang.character.unicodeblock.forname": [
        "java.lang.Character.UnicodeBlock.forName(java.lang.String)"
    ],
    "org.omg.corba.portable.outputstream.write_boolean": [
        "org.omg.CORBA.portable.OutputStream.write_boolean(boolean)"
    ],
    "javax.xml.transform.dom.domresult.setnextsibling": [
        "javax.xml.transform.dom.DOMResult.setNextSibling(org.w3c.dom.Node)"
    ],
    "org.xml.sax.helpers.defaulthandler.unparsedentitydecl": [
        "org.xml.sax.helpers.DefaultHandler.unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
    ],
    "java.util.splittablerandom.longs": [
        "java.util.SplittableRandom.longs()",
        "java.util.SplittableRandom.longs(long)"
    ],
    "java.awt.component.processmouseevent": [
        "java.awt.Component.processMouseEvent(java.awt.event.MouseEvent)"
    ],
    "java.sql.connection.getholdability": [
        "java.sql.Connection.getHoldability()"
    ],
    "java.text.normalizer.isnormalized": [
        "java.text.Normalizer.isNormalized(java.lang.CharSequence,java.text.Normalizer.Form)"
    ],
    "java.awt.dnd.droptarget.createdroptargetcontext": [
        "java.awt.dnd.DropTarget.createDropTargetContext()"
    ],
    "java.util.bitset.hashcode": [
        "java.util.BitSet.hashCode()"
    ],
    "javax.xml.parsers.documentbuilderfactory.isxincludeaware": [
        "javax.xml.parsers.DocumentBuilderFactory.isXIncludeAware()"
    ],
    "javax.swing.text.boxview.calculatemajoraxisrequirements": [
        "javax.swing.text.BoxView.calculateMajorAxisRequirements(int,javax.swing.SizeRequirements)"
    ],
    "java.awt.basicstroke.hashcode": [
        "java.awt.BasicStroke.hashCode()"
    ],
    "org.omg.corba.portable.outputstream.write_char_array": [
        "org.omg.CORBA.portable.OutputStream.write_char_array(char[],int,int)"
    ],
    "javax.swing.text.compositeview.getinsideallocation": [
        "javax.swing.text.CompositeView.getInsideAllocation(java.awt.Shape)"
    ],
    "javax.swing.text.html.blockview.getalignment": [
        "javax.swing.text.html.BlockView.getAlignment(int)"
    ],
    "org.omg.corba.dataoutputstream.write_double": [
        "org.omg.CORBA.DataOutputStream.write_double(double)"
    ],
    "java.util.timezone.gettimezone": [
        "java.util.TimeZone.getTimeZone(java.lang.String)",
        "java.util.TimeZone.getTimeZone(java.time.ZoneId)"
    ],
    "java.time.chrono.hijrahera.getvalue": [
        "java.time.chrono.HijrahEra.getValue()"
    ],
    "java.time.format.datetimeformatter.withlocale": [
        "java.time.format.DateTimeFormatter.withLocale(java.util.Locale)"
    ],
    "java.util.concurrent.concurrentskiplistset.ceiling": [
        "java.util.concurrent.ConcurrentSkipListSet.ceiling(E)"
    ],
    "org.omg.corba.portable.delegate.get_domain_managers": [
        "org.omg.CORBA.portable.Delegate.get_domain_managers(org.omg.CORBA.Object)"
    ],
    "java.security.cert.x509certificate.getnotbefore": [
        "java.security.cert.X509Certificate.getNotBefore()"
    ],
    "javax.swing.defaultdesktopmanager.setpreviousbounds": [
        "javax.swing.DefaultDesktopManager.setPreviousBounds(javax.swing.JInternalFrame,java.awt.Rectangle)"
    ],
    "java.util.logging.logrecord.getresourcebundlename": [
        "java.util.logging.LogRecord.getResourceBundleName()"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.getinsets": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.getInsets(javax.swing.JComponent)"
    ],
    "javax.xml.bind.binder.setschema": [
        "javax.xml.bind.Binder.setSchema(javax.xml.validation.Schema)"
    ],
    "javax.management.openmbean.arraytype.getdimension": [
        "javax.management.openmbean.ArrayType.getDimension()"
    ],
    "java.nio.channels.asynchronouschannelgroup.provider": [
        "java.nio.channels.AsynchronousChannelGroup.provider()"
    ],
    "javax.swing.plaf.basic.basiclistui.getbaselineresizebehavior": [
        "javax.swing.plaf.basic.BasicListUI.getBaselineResizeBehavior(javax.swing.JComponent)"
    ],
    "java.awt.geom.point2d.float.tostring": [
        "java.awt.geom.Point2D.Float.toString()"
    ],
    "javax.swing.text.defaultformatter.install": [
        "javax.swing.text.DefaultFormatter.install(javax.swing.JFormattedTextField)"
    ],
    "java.net.inetsocketaddress.getaddress": [
        "java.net.InetSocketAddress.getAddress()"
    ],
    "java.util.zip.inflater.gettotalout": [
        "java.util.zip.Inflater.getTotalOut()"
    ],
    "javax.swing.grouplayout.sethorizontalgroup": [
        "javax.swing.GroupLayout.setHorizontalGroup(javax.swing.GroupLayout.Group)"
    ],
    "javax.swing.text.asyncboxview.getminimumspan": [
        "javax.swing.text.AsyncBoxView.getMinimumSpan(int)"
    ],
    "javax.swing.jtree.getminselectionrow": [
        "javax.swing.JTree.getMinSelectionRow()"
    ],
    "org.omg.dynamicany._dynstructstub.get_any": [
        "org.omg.DynamicAny._DynStructStub.get_any()"
    ],
    "org.w3c.dom.node.getnextsibling": [
        "org.w3c.dom.Node.getNextSibling()"
    ],
    "javax.swing.borderfactory.createetchedborder": [
        "javax.swing.BorderFactory.createEtchedBorder(int,java.awt.Color,java.awt.Color)",
        "javax.swing.BorderFactory.createEtchedBorder()",
        "javax.swing.BorderFactory.createEtchedBorder(int)",
        "javax.swing.BorderFactory.createEtchedBorder(java.awt.Color,java.awt.Color)"
    ],
    "java.sql.callablestatement.getstring": [
        "java.sql.CallableStatement.getString(java.lang.String)",
        "java.sql.CallableStatement.getString(int)"
    ],
    "javax.swing.text.abstractdocument.adddocumentlistener": [
        "javax.swing.text.AbstractDocument.addDocumentListener(javax.swing.event.DocumentListener)"
    ],
    "java.lang.thread.getname": [
        "java.lang.Thread.getName()"
    ],
    "javax.swing.plaf.multi.multifilechooserui.getdialogtitle": [
        "javax.swing.plaf.multi.MultiFileChooserUI.getDialogTitle(javax.swing.JFileChooser)"
    ],
    "java.util.concurrent.concurrenthashmap.searchentries": [
        "java.util.concurrent.ConcurrentHashMap.searchEntries(long,,,? extends U>)"
    ],
    "javax.imageio.iioparam.setdestinationoffset": [
        "javax.imageio.IIOParam.setDestinationOffset(java.awt.Point)"
    ],
    "javax.sound.sampled.floatcontrol.getminlabel": [
        "javax.sound.sampled.FloatControl.getMinLabel()"
    ],
    "javax.swing.defaultrowsorter.setrowfilter": [
        "javax.swing.DefaultRowSorter.setRowFilter(javax.swing.RowFilter<? super,? super javax.swing.DefaultRowSorter>)"
    ],
    "java.util.arraydeque.pop": [
        "java.util.ArrayDeque.pop()"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writedate": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeDate(java.sql.Date)"
    ],
    "org.omg.portableinterceptor.iorinfooperations.adapter_template": [
        "org.omg.PortableInterceptor.IORInfoOperations.adapter_template()"
    ],
    "java.util.calendar.tostring": [
        "java.util.Calendar.toString()"
    ],
    "java.nio.file.standardopenoption.values": [
        "java.nio.file.StandardOpenOption.values()"
    ],
    "javax.sql.rowset.seturl": [
        "javax.sql.RowSet.setURL(java.lang.String)",
        "javax.sql.RowSet.setUrl(int,java.net.URL)",
        "javax.sql.RowSet.setUrl(java.lang.String)",
        "javax.sql.RowSet.setURL(int,java.net.URL)"
    ],
    "java.awt.component.getfocustraversalkeys": [
        "java.awt.Component.getFocusTraversalKeys(int)"
    ],
    "javax.naming.namingexception.setresolvedobj": [
        "javax.naming.NamingException.setResolvedObj(java.lang.Object)"
    ],
    "javax.print.printservice.isdocflavorsupported": [
        "javax.print.PrintService.isDocFlavorSupported(javax.print.DocFlavor)"
    ],
    "java.awt.texturepaint.getimage": [
        "java.awt.TexturePaint.getImage()"
    ],
    "java.lang.long.tohexstring": [
        "java.lang.Long.toHexString(long)"
    ],
    "java.awt.list.remove": [
        "java.awt.List.remove(java.lang.String)",
        "java.awt.List.remove(int)"
    ],
    "java.net.inetsocketaddress.createunresolved": [
        "java.net.InetSocketAddress.createUnresolved(java.lang.String,int)"
    ],
    "java.time.offsetdatetime.atzonesimilarlocal": [
        "java.time.OffsetDateTime.atZoneSimilarLocal(java.time.ZoneId)"
    ],
    "java.time.month.getvalue": [
        "java.time.Month.getValue()"
    ],
    "javax.management.mbeanserver.getclassloader": [
        "javax.management.MBeanServer.getClassLoader(javax.management.ObjectName)"
    ],
    "javax.swing.jtogglebutton.togglebuttonmodel.setpressed": [
        "javax.swing.JToggleButton.ToggleButtonModel.setPressed(boolean)"
    ],
    "java.awt.cardlayout.removelayoutcomponent": [
        "java.awt.CardLayout.removeLayoutComponent(java.awt.Component)"
    ],
    "java.awt.color.icc_profilegray.getmediawhitepoint": [
        "java.awt.color.ICC_ProfileGray.getMediaWhitePoint()"
    ],
    "java.util.concurrent.atomic.atomicreferencearray.get": [
        "java.util.concurrent.atomic.AtomicReferenceArray.get(int)"
    ],
    "java.awt.geom.affinetransform.settoscale": [
        "java.awt.geom.AffineTransform.setToScale(double,double)"
    ],
    "java.awt.mediatracker.iserrorany": [
        "java.awt.MediaTracker.isErrorAny()"
    ],
    "org.omg.corba.context.set_one_value": [
        "org.omg.CORBA.Context.set_one_value(java.lang.String,org.omg.CORBA.Any)"
    ],
    "javax.accessibility.accessiblecomponent.getfont": [
        "javax.accessibility.AccessibleComponent.getFont()"
    ],
    "java.awt.renderinghints.clear": [
        "java.awt.RenderingHints.clear()"
    ],
    "java.net.multicastsocket.setinterface": [
        "java.net.MulticastSocket.setInterface(java.net.InetAddress)"
    ],
    "java.util.concurrent.atomic.atomicintegerfieldupdater.accumulateandget": [
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.accumulateAndGet(java.util.concurrent.atomic.AtomicIntegerFieldUpdater,int,java.util.function.IntBinaryOperator)",
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.accumulateAndGet(T,int,java.util.function.IntBinaryOperator)"
    ],
    "javax.script.scriptcontext.getattributesscope": [
        "javax.script.ScriptContext.getAttributesScope(java.lang.String)"
    ],
    "javax.sql.rowsetmetadata.setcolumntypename": [
        "javax.sql.RowSetMetaData.setColumnTypeName(int,java.lang.String)"
    ],
    "javax.swing.table.tablecolumnmodel.getcolumns": [
        "javax.swing.table.TableColumnModel.getColumns()"
    ],
    "org.omg.corba.irobjectoperations.def_kind": [
        "org.omg.CORBA.IRObjectOperations.def_kind()"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getdefaults": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getDefaults()"
    ],
    "javax.swing.uidefaults.getuiclass": [
        "javax.swing.UIDefaults.getUIClass(java.lang.String,java.lang.ClassLoader)",
        "javax.swing.UIDefaults.getUIClass(java.lang.String)"
    ],
    "java.text.characteriterator.getendindex": [
        "java.text.CharacterIterator.getEndIndex()"
    ],
    "java.time.zoneddatetime.withmonth": [
        "java.time.ZonedDateTime.withMonth(int)"
    ],
    "java.beans.indexedpropertydescriptor.getindexedpropertytype": [
        "java.beans.IndexedPropertyDescriptor.getIndexedPropertyType()"
    ],
    "javax.swing.text.stringcontent.getchars": [
        "javax.swing.text.StringContent.getChars(int,int,javax.swing.text.Segment)"
    ],
    "java.nio.file.path.equals": [
        "java.nio.file.Path.equals(java.lang.Object)"
    ],
    "java.sql.databasemetadata.nullsaresortedlow": [
        "java.sql.DatabaseMetaData.nullsAreSortedLow()"
    ],
    "java.util.logging.handler.setencoding": [
        "java.util.logging.Handler.setEncoding(java.lang.String)"
    ],
    "javax.management.openmbean.tabulardata.tostring": [
        "javax.management.openmbean.TabularData.toString()"
    ],
    "javax.swing.plaf.multi.multipanelui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiPanelUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "java.awt.image.replicatescalefilter.setproperties": [
        "java.awt.image.ReplicateScaleFilter.setProperties(,?>)"
    ],
    "java.security.cert.x509extension.getnoncriticalextensionoids": [
        "java.security.cert.X509Extension.getNonCriticalExtensionOIDs()"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.tostring": [
        "javax.swing.tree.DefaultTreeSelectionModel.toString()"
    ],
    "org.omg.corba._policystub.destroy": [
        "org.omg.CORBA._PolicyStub.destroy()"
    ],
    "java.nio.charset.charset.defaultcharset": [
        "java.nio.charset.Charset.defaultCharset()"
    ],
    "java.awt.datatransfer.systemflavormap.addflavorforunencodednative": [
        "java.awt.datatransfer.SystemFlavorMap.addFlavorForUnencodedNative(java.lang.String,java.awt.datatransfer.DataFlavor)"
    ],
    "javax.swing.text.html.htmldocument.iterator.gettag": [
        "javax.swing.text.html.HTMLDocument.Iterator.getTag()"
    ],
    "java.util.enumset.complementof": [
        "java.util.EnumSet.complementOf(java.util.EnumSet<E>)"
    ],
    "javax.management.modelmbean.modelmbeaninfosupport.getconstructor": [
        "javax.management.modelmbean.ModelMBeanInfoSupport.getConstructor(java.lang.String)"
    ],
    "java.awt.geom.arc2d.double.getangleextent": [
        "java.awt.geom.Arc2D.Double.getAngleExtent()"
    ],
    "javax.management.openmbean.compositedata.equals": [
        "javax.management.openmbean.CompositeData.equals(java.lang.Object)"
    ],
    "javax.management.remote.mbeanserverforwarder.setmbeanserver": [
        "javax.management.remote.MBeanServerForwarder.setMBeanServer(javax.management.MBeanServer)"
    ],
    "javax.swing.jfilechooser.getuiclassid": [
        "javax.swing.JFileChooser.getUIClassID()"
    ],
    "java.net.authenticator.getrequestingurl": [
        "java.net.Authenticator.getRequestingURL()"
    ],
    "javax.print.attribute.standard.documentname.getname": [
        "javax.print.attribute.standard.DocumentName.getName()"
    ],
    "javax.swing.plaf.metal.defaultmetaltheme.getsystemtextfont": [
        "javax.swing.plaf.metal.DefaultMetalTheme.getSystemTextFont()"
    ],
    "java.awt.toolkit.createchoice": [
        "java.awt.Toolkit.createChoice(java.awt.Choice)"
    ],
    "javax.crypto.encryptedprivatekeyinfo.getencoded": [
        "javax.crypto.EncryptedPrivateKeyInfo.getEncoded()"
    ],
    "java.beans.propertychangeevent.getoldvalue": [
        "java.beans.PropertyChangeEvent.getOldValue()"
    ],
    "java.util.arraydeque.element": [
        "java.util.ArrayDeque.element()"
    ],
    "javax.swing.lookandfeel.tostring": [
        "javax.swing.LookAndFeel.toString()"
    ],
    "java.awt.component.addhierarchylistener": [
        "java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"
    ],
    "javax.swing.text.internationalformatter.getminimum": [
        "javax.swing.text.InternationalFormatter.getMinimum()"
    ],
    "javax.xml.bind.datatypeconverterinterface.parseint": [
        "javax.xml.bind.DatatypeConverterInterface.parseInt(java.lang.String)"
    ],
    "javax.swing.text.html.htmleditorkit.inserthtmltextaction.actionperformed": [
        "javax.swing.text.html.HTMLEditorKit.InsertHTMLTextAction.actionPerformed(java.awt.event.ActionEvent)"
    ],
    "javax.sound.sampled.spi.mixerprovider.getmixer": [
        "javax.sound.sampled.spi.MixerProvider.getMixer(javax.sound.sampled.Mixer.Info)"
    ],
    "javax.swing.plaf.multi.multiinternalframeui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiInternalFrameUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "java.time.duration.subtractfrom": [
        "java.time.Duration.subtractFrom(java.time.temporal.Temporal)"
    ],
    "java.awt.menucomponent.getaccessiblecontext": [
        "java.awt.MenuComponent.getAccessibleContext()"
    ],
    "javax.swing.jlayer.remove": [
        "javax.swing.JLayer.remove(java.awt.Component)"
    ],
    "javax.swing.table.defaulttablecolumnmodel.firecolumnmoved": [
        "javax.swing.table.DefaultTableColumnModel.fireColumnMoved(javax.swing.event.TableColumnModelEvent)"
    ],
    "org.ietf.jgss.gsscredential.dispose": [
        "org.ietf.jgss.GSSCredential.dispose()"
    ],
    "java.sql.databasemetadata.supportsunion": [
        "java.sql.DatabaseMetaData.supportsUnion()"
    ],
    "java.util.concurrent.linkedblockingdeque.offerlast": [
        "java.util.concurrent.LinkedBlockingDeque.offerLast(E,long,java.util.concurrent.TimeUnit)",
        "java.util.concurrent.LinkedBlockingDeque.offerLast(E)"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readboolean": [
        "javax.sql.rowset.serial.SQLInputImpl.readBoolean()"
    ],
    "java.net.contenthandler.getcontent": [
        "java.net.ContentHandler.getContent(java.net.URLConnection)",
        "java.net.ContentHandler.getContent(java.net.URLConnection,java.lang.Class)",
        "java.net.ContentHandler.getContent(java.net.URLConnection,java.lang.Class[])"
    ],
    "javax.swing.plaf.synth.synthtoolbarui.update": [
        "javax.swing.plaf.synth.SynthToolBarUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.management.relation.relationsupportmbean.isinrelationservice": [
        "javax.management.relation.RelationSupportMBean.isInRelationService()"
    ],
    "java.nio.file.filesystem.getpath": [
        "java.nio.file.FileSystem.getPath(java.lang.String,java.lang.String)",
        "java.nio.file.FileSystem.getPath(java.lang.String,java.lang.String...)"
    ],
    "javax.sql.commondatasource.setlogwriter": [
        "javax.sql.CommonDataSource.setLogWriter(java.io.PrintWriter)"
    ],
    "java.sql.statement.getquerytimeout": [
        "java.sql.Statement.getQueryTimeout()"
    ],
    "java.awt.print.printerjob.getjobname": [
        "java.awt.print.PrinterJob.getJobName()"
    ],
    "javax.swing.plaf.synth.synthlabelui.getminimumsize": [
        "javax.swing.plaf.synth.SynthLabelUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "javax.management.mbeanserver.getclassloaderfor": [
        "javax.management.MBeanServer.getClassLoaderFor(javax.management.ObjectName)"
    ],
    "java.nio.channels.spi.abstractselectablechannel.implcloseselectablechannel": [
        "java.nio.channels.spi.AbstractSelectableChannel.implCloseSelectableChannel()"
    ],
    "javax.swing.text.stringcontent.updateundopositions": [
        "javax.swing.text.StringContent.updateUndoPositions(java.util.Vector)"
    ],
    "javax.sound.sampled.reverbtype.getname": [
        "javax.sound.sampled.ReverbType.getName()"
    ],
    "java.io.inputstreamreader.read": [
        "java.io.InputStreamReader.read()",
        "java.io.InputStreamReader.read(char[],int,int)"
    ],
    "java.util.deque.pollfirst": [
        "java.util.Deque.pollFirst()"
    ],
    "javax.xml.ws.spi.servicedelegate.getservicename": [
        "javax.xml.ws.spi.ServiceDelegate.getServiceName()"
    ],
    "javax.swing.plaf.synth.synthpainter.painttreeborder": [
        "javax.swing.plaf.synth.SynthPainter.paintTreeBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.lang.management.memorypoolmxbean.getcollectionusage": [
        "java.lang.management.MemoryPoolMXBean.getCollectionUsage()"
    ],
    "java.awt.eventqueue.getcurrentevent": [
        "java.awt.EventQueue.getCurrentEvent()"
    ],
    "javax.swing.plaf.componentui.getminimumsize": [
        "javax.swing.plaf.ComponentUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "java.net.socketimpl.setperformancepreferences": [
        "java.net.SocketImpl.setPerformancePreferences(int,int,int)"
    ],
    "java.sql.resultset.updatedate": [
        "java.sql.ResultSet.updateDate(java.lang.String,java.sql.Date)",
        "java.sql.ResultSet.updateDate(int,java.sql.Date)"
    ],
    "javax.swing.plaf.multi.multisplitpaneui.contains": [
        "javax.swing.plaf.multi.MultiSplitPaneUI.contains(javax.swing.JComponent,int,int)"
    ],
    "java.net.inetaddress.gethostaddress": [
        "java.net.InetAddress.getHostAddress()"
    ],
    "javax.xml.xpath.xpathfactory.newinstance": [
        "javax.xml.xpath.XPathFactory.newInstance(java.lang.String,java.lang.String,java.lang.ClassLoader)",
        "javax.xml.xpath.XPathFactory.newInstance(java.lang.String)",
        "javax.xml.xpath.XPathFactory.newInstance()"
    ],
    "java.applet.applet.getlocale": [
        "java.applet.Applet.getLocale()"
    ],
    "java.io.printstream.seterror": [
        "java.io.PrintStream.setError()"
    ],
    "org.omg.dynamicany._dynarraystub.next": [
        "org.omg.DynamicAny._DynArrayStub.next()"
    ],
    "javax.swing.jviewport.getchangelisteners": [
        "javax.swing.JViewport.getChangeListeners()"
    ],
    "java.nio.channels.asynchronouschannelgroup.shutdownnow": [
        "java.nio.channels.AsynchronousChannelGroup.shutdownNow()"
    ],
    "javax.sound.sampled.port.info.hashcode": [
        "javax.sound.sampled.Port.Info.hashCode()"
    ],
    "java.security.cert.pkixparameters.getdate": [
        "java.security.cert.PKIXParameters.getDate()"
    ],
    "javax.activation.datasource.getcontenttype": [
        "javax.activation.DataSource.getContentType()"
    ],
    "javax.lang.model.element.variableelement.getconstantvalue": [
        "javax.lang.model.element.VariableElement.getConstantValue()"
    ],
    "javax.swing.plaf.multi.multilabelui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiLabelUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "javax.swing.text.paragraphview.gettabbase": [
        "javax.swing.text.ParagraphView.getTabBase()"
    ],
    "java.lang.character.compareto": [
        "java.lang.Character.compareTo(java.lang.Character)"
    ],
    "java.security.digestinputstream.getmessagedigest": [
        "java.security.DigestInputStream.getMessageDigest()"
    ],
    "java.net.urlclassloader.findclass": [
        "java.net.URLClassLoader.findClass(java.lang.String)"
    ],
    "java.net.jarurlconnection.getmainattributes": [
        "java.net.JarURLConnection.getMainAttributes()"
    ],
    "javax.swing.jlabel.getaccessiblecontext": [
        "javax.swing.JLabel.getAccessibleContext()"
    ],
    "org.omg.corba.any.extract_float": [
        "org.omg.CORBA.Any.extract_float()"
    ],
    "java.lang.autocloseable.close": [
        "java.lang.AutoCloseable.close()"
    ],
    "javax.swing.jmenu.setaccelerator": [
        "javax.swing.JMenu.setAccelerator(javax.swing.KeyStroke)"
    ],
    "javax.swing.text.highlighter.removeallhighlights": [
        "javax.swing.text.Highlighter.removeAllHighlights()"
    ],
    "javax.xml.stream.util.eventreaderdelegate.setparent": [
        "javax.xml.stream.util.EventReaderDelegate.setParent(javax.xml.stream.XMLEventReader)"
    ],
    "org.omg.corba.datainputstream.read_longlong_array": [
        "org.omg.CORBA.DataInputStream.read_longlong_array(org.omg.CORBA.LongLongSeqHolder,int,int)"
    ],
    "java.time.chrono.isoera.of": [
        "java.time.chrono.IsoEra.of(int)"
    ],
    "java.awt.gridbaglayout.tostring": [
        "java.awt.GridBagLayout.toString()"
    ],
    "javax.swing.plaf.basic.basicbuttonlistener.uninstallkeyboardactions": [
        "javax.swing.plaf.basic.BasicButtonListener.uninstallKeyboardActions(javax.swing.JComponent)"
    ],
    "java.util.concurrent.countedcompleter.getrawresult": [
        "java.util.concurrent.CountedCompleter.getRawResult()"
    ],
    "javax.imageio.spi.serviceregistry.registerserviceprovider": [
        "javax.imageio.spi.ServiceRegistry.registerServiceProvider(T,java.lang.Class<T>)",
        "javax.imageio.spi.ServiceRegistry.registerServiceProvider(java.lang.Object)"
    ],
    "java.awt.color.getrgb": [
        "java.awt.Color.getRGB()"
    ],
    "java.awt.component.getmousewheellisteners": [
        "java.awt.Component.getMouseWheelListeners()"
    ],
    "javax.swing.jtextfield.getaction": [
        "javax.swing.JTextField.getAction()"
    ],
    "java.util.concurrent.concurrentskiplistmap.higherkey": [
        "java.util.concurrent.ConcurrentSkipListMap.higherKey(K)"
    ],
    "javax.swing.tree.defaulttreemodel.nodestructurechanged": [
        "javax.swing.tree.DefaultTreeModel.nodeStructureChanged(javax.swing.tree.TreeNode)"
    ],
    "javax.imageio.spi.iioserviceprovider.getvendorname": [
        "javax.imageio.spi.IIOServiceProvider.getVendorName()"
    ],
    "javax.swing.text.defaulthighlighter.addhighlight": [
        "javax.swing.text.DefaultHighlighter.addHighlight(int,int,javax.swing.text.Highlighter.HighlightPainter)"
    ],
    "java.util.concurrent.locks.abstractqueuedlongsynchronizer.getstate": [
        "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getState()"
    ],
    "java.nio.channels.selector.open": [
        "java.nio.channels.Selector.open()"
    ],
    "javax.lang.model.util.simpleelementvisitor6.visittypeparameter": [
        "javax.lang.model.util.SimpleElementVisitor6.visitTypeParameter(javax.lang.model.element.TypeParameterElement,javax.lang.model.util.SimpleElementVisitor6)"
    ],
    "java.sql.callablestatement.settimestamp": [
        "java.sql.CallableStatement.setTimestamp(java.lang.String,java.sql.Timestamp)",
        "java.sql.CallableStatement.setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)"
    ],
    "javax.swing.jlist.setui": [
        "javax.swing.JList.setUI(javax.swing.plaf.ListUI)"
    ],
    "javax.swing.text.defaultstyleddocument.attributeundoableedit.redo": [
        "javax.swing.text.DefaultStyledDocument.AttributeUndoableEdit.redo()"
    ],
    "javax.xml.ws.spi.http.httpexchange.getuserprincipal": [
        "javax.xml.ws.spi.http.HttpExchange.getUserPrincipal()"
    ],
    "java.awt.list.isindexselected": [
        "java.awt.List.isIndexSelected(int)"
    ],
    "javax.swing.plaf.multi.multidesktoppaneui.installui": [
        "javax.swing.plaf.multi.MultiDesktopPaneUI.installUI(javax.swing.JComponent)"
    ],
    "java.awt.component.getcomponentlisteners": [
        "java.awt.Component.getComponentListeners()"
    ],
    "javax.imageio.imagereader.readraster": [
        "javax.imageio.ImageReader.readRaster(int,javax.imageio.ImageReadParam)"
    ],
    "javax.swing.plaf.basic.basictreeui.getlastchildpath": [
        "javax.swing.plaf.basic.BasicTreeUI.getLastChildPath(javax.swing.tree.TreePath)"
    ],
    "javax.swing.text.tableview.layoutminoraxis": [
        "javax.swing.text.TableView.layoutMinorAxis(int,int,int[],int[])"
    ],
    "java.util.logging.handler.close": [
        "java.util.logging.Handler.close()"
    ],
    "java.util.stream.longstream.peek": [
        "java.util.stream.LongStream.peek(java.util.function.LongConsumer)"
    ],
    "javax.swing.plaf.synth.synthmenuitemui.update": [
        "javax.swing.plaf.synth.SynthMenuItemUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.plaf.synth.synthtextareaui.paintborder": [
        "javax.swing.plaf.synth.SynthTextAreaUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.xml.crypto.xmlcryptocontext.putnamespaceprefix": [
        "javax.xml.crypto.XMLCryptoContext.putNamespacePrefix(java.lang.String,java.lang.String)"
    ],
    "java.awt.cardlayout.invalidatelayout": [
        "java.awt.CardLayout.invalidateLayout(java.awt.Container)"
    ],
    "javax.management.remote.jmxconnector.addconnectionnotificationlistener": [
        "javax.management.remote.JMXConnector.addConnectionNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)"
    ],
    "java.net.uri.resolve": [
        "java.net.URI.resolve(java.lang.String)",
        "java.net.URI.resolve(java.net.URI)"
    ],
    "javax.imageio.imagereader.addiioreadprogresslistener": [
        "javax.imageio.ImageReader.addIIOReadProgressListener(javax.imageio.event.IIOReadProgressListener)"
    ],
    "javax.swing.plaf.synth.synthtableheaderui.installlisteners": [
        "javax.swing.plaf.synth.SynthTableHeaderUI.installListeners()"
    ],
    "org.w3c.dom.document.normalizedocument": [
        "org.w3c.dom.Document.normalizeDocument()"
    ],
    "java.awt.systemtray.addpropertychangelistener": [
        "java.awt.SystemTray.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"
    ],
    "javax.swing.tree.defaulttreecellrenderer.firepropertychange": [
        "javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,char,char)",
        "javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,long,long)",
        "javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,int,int)",
        "javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,float,float)",
        "javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
        "javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,short,short)",
        "javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,double,double)",
        "javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,boolean,boolean)",
        "javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,byte,byte)"
    ],
    "org.omg.iop.codecoperations.decode": [
        "org.omg.IOP.CodecOperations.decode(byte[])"
    ],
    "javax.swing.jtree.getscrollableblockincrement": [
        "javax.swing.JTree.getScrollableBlockIncrement(java.awt.Rectangle,int,int)"
    ],
    "javax.swing.lookandfeel.makeicon": [
        "javax.swing.LookAndFeel.makeIcon(java.lang.Class<?>,java.lang.String)"
    ],
    "java.beans.introspector.decapitalize": [
        "java.beans.Introspector.decapitalize(java.lang.String)"
    ],
    "java.time.offsettime.isbefore": [
        "java.time.OffsetTime.isBefore(java.time.OffsetTime)"
    ],
    "javax.swing.plaf.multi.multilookandfeel.uistoarray": [
        "javax.swing.plaf.multi.MultiLookAndFeel.uisToArray(java.util.Vector)"
    ],
    "javax.xml.crypto.dsig.spec.xpathtype.getfilter": [
        "javax.xml.crypto.dsig.spec.XPathType.getFilter()"
    ],
    "javax.sound.sampled.mixer.getmixerinfo": [
        "javax.sound.sampled.Mixer.getMixerInfo()"
    ],
    "javax.swing.tree.defaulttreecelleditor.getcelleditorlisteners": [
        "javax.swing.tree.DefaultTreeCellEditor.getCellEditorListeners()"
    ],
    "javax.swing.tree.treemodel.getroot": [
        "javax.swing.tree.TreeModel.getRoot()"
    ],
    "javax.net.ssl.sslsession.getciphersuite": [
        "javax.net.ssl.SSLSession.getCipherSuite()"
    ],
    "java.util.concurrent.linkedblockingqueue.drainto": [
        "java.util.concurrent.LinkedBlockingQueue.drainTo(java.util.Collection<? super E>)",
        "java.util.concurrent.LinkedBlockingQueue.drainTo(java.util.Collection<? super E>,int)"
    ],
    "javax.swing.table.abstracttablemodel.removetablemodellistener": [
        "javax.swing.table.AbstractTableModel.removeTableModelListener(javax.swing.event.TableModelListener)"
    ],
    "javax.swing.filechooser.filesystemview.iscomputernode": [
        "javax.swing.filechooser.FileSystemView.isComputerNode(java.io.File)"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.getdivider": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.getDivider()"
    ],
    "java.util.calendar.getavailablelocales": [
        "java.util.Calendar.getAvailableLocales()"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writeasciistream": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeAsciiStream(java.io.InputStream)"
    ],
    "javax.imageio.stream.imageinputstream.readbyte": [
        "javax.imageio.stream.ImageInputStream.readByte()"
    ],
    "java.awt.color.createcontext": [
        "java.awt.Color.createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)"
    ],
    "java.security.cert.crlselector.match": [
        "java.security.cert.CRLSelector.match(java.security.cert.CRL)"
    ],
    "javax.management.monitor.countermonitor.getnotificationinfo": [
        "javax.management.monitor.CounterMonitor.getNotificationInfo()"
    ],
    "java.time.instant.minusmillis": [
        "java.time.Instant.minusMillis(long)"
    ],
    "java.util.regex.matcher.usepattern": [
        "java.util.regex.Matcher.usePattern(java.util.regex.Pattern)"
    ],
    "java.util.concurrent.atomic.atomiclong.getandaccumulate": [
        "java.util.concurrent.atomic.AtomicLong.getAndAccumulate(long,java.util.function.LongBinaryOperator)"
    ],
    "java.awt.image.componentcolormodel.getnormalizedcomponents": [
        "java.awt.image.ComponentColorModel.getNormalizedComponents(java.lang.Object,float[],int)",
        "java.awt.image.ComponentColorModel.getNormalizedComponents(int[],int,float[],int)"
    ],
    "javax.swing.joptionpane.getaccessiblecontext": [
        "javax.swing.JOptionPane.getAccessibleContext()"
    ],
    "java.time.offsettime.plusseconds": [
        "java.time.OffsetTime.plusSeconds(long)"
    ],
    "javax.management.openmbean.openmbeanattributeinfosupport.getminvalue": [
        "javax.management.openmbean.OpenMBeanAttributeInfoSupport.getMinValue()"
    ],
    "java.awt.dnd.dragsourcedragevent.getgesturemodifiers": [
        "java.awt.dnd.DragSourceDragEvent.getGestureModifiers()"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getseparatorbackground": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getSeparatorBackground()"
    ],
    "org.omg.corba.portable.delegate.duplicate": [
        "org.omg.CORBA.portable.Delegate.duplicate(org.omg.CORBA.Object)"
    ],
    "org.omg.dynamicany.dynanyoperations.get_any": [
        "org.omg.DynamicAny.DynAnyOperations.get_any()"
    ],
    "org.omg.portableserver.portable.delegate.object_id": [
        "org.omg.PortableServer.portable.Delegate.object_id(org.omg.PortableServer.Servant)"
    ],
    "java.lang.short.equals": [
        "java.lang.Short.equals(java.lang.Object)"
    ],
    "javax.swing.jtree.addselectionpath": [
        "javax.swing.JTree.addSelectionPath(javax.swing.tree.TreePath)"
    ],
    "javax.swing.jmenu.setdelay": [
        "javax.swing.JMenu.setDelay(int)"
    ],
    "java.awt.filedialog.paramstring": [
        "java.awt.FileDialog.paramString()"
    ],
    "javax.xml.soap.soapmessage.countattachments": [
        "javax.xml.soap.SOAPMessage.countAttachments()"
    ],
    "org.w3c.dom.events.mouseevent.initmouseevent": [
        "org.w3c.dom.events.MouseEvent.initMouseEvent(java.lang.String,boolean,boolean,org.w3c.dom.views.AbstractView,int,int,int,int,int,boolean,boolean,boolean,boolean,short,org.w3c.dom.events.EventTarget)"
    ],
    "java.util.concurrent.atomic.atomicintegerarray.getandaccumulate": [
        "java.util.concurrent.atomic.AtomicIntegerArray.getAndAccumulate(int,int,java.util.function.IntBinaryOperator)"
    ],
    "org.omg.corba.dataoutputstream.write_char_array": [
        "org.omg.CORBA.DataOutputStream.write_char_array(char[],int,int)"
    ],
    "java.awt.containerorderfocustraversalpolicy.getlastcomponent": [
        "java.awt.ContainerOrderFocusTraversalPolicy.getLastComponent(java.awt.Container)"
    ],
    "java.awt.datatransfer.transferable.gettransferdataflavors": [
        "java.awt.datatransfer.Transferable.getTransferDataFlavors()"
    ],
    "javax.management.monitor.countermonitor.setoffset": [
        "javax.management.monitor.CounterMonitor.setOffset(java.lang.Number)"
    ],
    "javax.swing.plaf.synth.synthviewportui.uninstalldefaults": [
        "javax.swing.plaf.synth.SynthViewportUI.uninstallDefaults(javax.swing.JComponent)"
    ],
    "javax.net.ssl.sslsession.getsessioncontext": [
        "javax.net.ssl.SSLSession.getSessionContext()"
    ],
    "java.rmi.server.rmiclassloaderspi.loadclass": [
        "java.rmi.server.RMIClassLoaderSpi.loadClass(java.lang.String,java.lang.String,java.lang.ClassLoader)"
    ],
    "javax.security.sasl.saslserver.unwrap": [
        "javax.security.sasl.SaslServer.unwrap(byte[],int,int)"
    ],
    "java.util.collections.frequency": [
        "java.util.Collections.frequency(java.util.Collection<?>,java.lang.Object)"
    ],
    "java.lang.integer.sum": [
        "java.lang.Integer.sum(int,int)"
    ],
    "java.time.localdate.lengthofyear": [
        "java.time.LocalDate.lengthOfYear()"
    ],
    "javax.sql.rowset.baserowset.settypemap": [
        "javax.sql.rowset.BaseRowSet.setTypeMap(,java.lang.Class<?>>)"
    ],
    "javax.xml.parsers.saxparserfactory.setschema": [
        "javax.xml.parsers.SAXParserFactory.setSchema(javax.xml.validation.Schema)"
    ],
    "java.awt.image.renderable.parameterblock.shallowclone": [
        "java.awt.image.renderable.ParameterBlock.shallowClone()"
    ],
    "java.time.localdatetime.gethour": [
        "java.time.LocalDateTime.getHour()"
    ],
    "javax.swing.plaf.nimbus.abstractregionpainter.decodeanchory": [
        "javax.swing.plaf.nimbus.AbstractRegionPainter.decodeAnchorY(float,float)"
    ],
    "javax.swing.plaf.nimbus.abstractregionpainter.decodecolor": [
        "javax.swing.plaf.nimbus.AbstractRegionPainter.decodeColor(java.awt.Color,java.awt.Color,float)",
        "javax.swing.plaf.nimbus.AbstractRegionPainter.decodeColor(java.lang.String,float,float,float,int)"
    ],
    "org.omg.corba.fixedholder._type": [
        "org.omg.CORBA.FixedHolder._type()"
    ],
    "java.awt.awtevent.consume": [
        "java.awt.AWTEvent.consume()"
    ],
    "org.w3c.dom.events.mutationevent.initmutationevent": [
        "org.w3c.dom.events.MutationEvent.initMutationEvent(java.lang.String,boolean,boolean,org.w3c.dom.Node,java.lang.String,java.lang.String,java.lang.String,short)"
    ],
    "java.util.treeset.lower": [
        "java.util.TreeSet.lower(E)"
    ],
    "javax.security.auth.login.logincontext.login": [
        "javax.security.auth.login.LoginContext.login()"
    ],
    "java.nio.file.files.getfileattributeview": [
        "java.nio.file.Files.getFileAttributeView(java.nio.file.Path,java.lang.Class<V>,java.nio.file.LinkOption)",
        "java.nio.file.Files.getFileAttributeView(java.nio.file.Path,java.lang.Class<V>,java.nio.file.LinkOption...)"
    ],
    "javax.sound.midi.sequencer.getmicrosecondlength": [
        "javax.sound.midi.Sequencer.getMicrosecondLength()"
    ],
    "java.time.localdatetime.tolocaldate": [
        "java.time.LocalDateTime.toLocalDate()"
    ],
    "javax.print.attribute.enumsyntax.getoffset": [
        "javax.print.attribute.EnumSyntax.getOffset()"
    ],
    "javax.swing.event.tablemodellistener.tablechanged": [
        "javax.swing.event.TableModelListener.tableChanged(javax.swing.event.TableModelEvent)"
    ],
    "org.ietf.jgss.messageprop.setsupplementarystates": [
        "org.ietf.jgss.MessageProp.setSupplementaryStates(boolean,boolean,boolean,boolean,int,java.lang.String)"
    ],
    "javax.swing.jlist.setselectionforeground": [
        "javax.swing.JList.setSelectionForeground(java.awt.Color)"
    ],
    "java.nio.file.attribute.basicfileattributes.filekey": [
        "java.nio.file.attribute.BasicFileAttributes.fileKey()"
    ],
    "java.lang.throwable.getmessage": [
        "java.lang.Throwable.getMessage()"
    ],
    "javax.swing.abstractbutton.gethorizontalalignment": [
        "javax.swing.AbstractButton.getHorizontalAlignment()"
    ],
    "java.awt.insets.tostring": [
        "java.awt.Insets.toString()"
    ],
    "java.awt.component.invalidate": [
        "java.awt.Component.invalidate()"
    ],
    "java.util.zip.inflater.getremaining": [
        "java.util.zip.Inflater.getRemaining()"
    ],
    "org.omg.corba.portable.inputstream.read_string": [
        "org.omg.CORBA.portable.InputStream.read_string()"
    ],
    "javax.swing.componentinputmap.clear": [
        "javax.swing.ComponentInputMap.clear()"
    ],
    "java.awt.image.directcolormodel.coercedata": [
        "java.awt.image.DirectColorModel.coerceData(java.awt.image.WritableRaster,boolean)"
    ],
    "java.util.concurrent.concurrentskiplistmap.keyset": [
        "java.util.concurrent.ConcurrentSkipListMap.keySet()"
    ],
    "javax.sound.midi.midisystem.getsequencer": [
        "javax.sound.midi.MidiSystem.getSequencer(boolean)",
        "javax.sound.midi.MidiSystem.getSequencer()"
    ],
    "javax.accessibility.accessiblehyperlink.getendindex": [
        "javax.accessibility.AccessibleHyperlink.getEndIndex()"
    ],
    "javax.management.remote.rmi.rmiconnection.removenotificationlistener": [
        "javax.management.remote.rmi.RMIConnection.removeNotificationListener(javax.management.ObjectName,javax.management.ObjectName,java.rmi.MarshalledObject,java.rmi.MarshalledObject,javax.security.auth.Subject)",
        "javax.management.remote.rmi.RMIConnection.removeNotificationListener(javax.management.ObjectName,javax.management.ObjectName,javax.security.auth.Subject)"
    ],
    "javax.naming.spi.namingmanager.getobjectinstance": [
        "javax.naming.spi.NamingManager.getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,,?>)"
    ],
    "java.security.messagedigest.tostring": [
        "java.security.MessageDigest.toString()"
    ],
    "java.time.period.between": [
        "java.time.Period.between(java.time.LocalDate,java.time.LocalDate)"
    ],
    "javax.script.scriptcontext.getreader": [
        "javax.script.ScriptContext.getReader()"
    ],
    "java.sql.resultset.getref": [
        "java.sql.ResultSet.getRef(java.lang.String)",
        "java.sql.ResultSet.getRef(int)"
    ],
    "javax.swing.defaultcomboboxmodel.setselecteditem": [
        "javax.swing.DefaultComboBoxModel.setSelectedItem(java.lang.Object)"
    ],
    "java.awt.dnd.draggestureevent.getsourceasdraggesturerecognizer": [
        "java.awt.dnd.DragGestureEvent.getSourceAsDragGestureRecognizer()"
    ],
    "java.awt.image.areaaveragingscalefilter.setpixels": [
        "java.awt.image.AreaAveragingScaleFilter.setPixels(int,int,int,int,java.awt.image.ColorModel,int[],int,int)",
        "java.awt.image.AreaAveragingScaleFilter.setPixels(int,int,int,int,java.awt.image.ColorModel,byte[],int,int)"
    ],
    "org.omg.dynamicany._dynarraystub.get_float": [
        "org.omg.DynamicAny._DynArrayStub.get_float()"
    ],
    "javax.swing.jsplitpane.isonetouchexpandable": [
        "javax.swing.JSplitPane.isOneTouchExpandable()"
    ],
    "java.time.zone.zonerulesprovider.registerprovider": [
        "java.time.zone.ZoneRulesProvider.registerProvider(java.time.zone.ZoneRulesProvider)"
    ],
    "java.security.cert.x509certselector.setpolicy": [
        "java.security.cert.X509CertSelector.setPolicy(java.util.Set<java.lang.String>)"
    ],
    "java.nio.file.watchable.register": [
        "java.nio.file.Watchable.register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>...)",
        "java.nio.file.Watchable.register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>[],java.nio.file.WatchEvent.Modifier...)",
        "java.nio.file.Watchable.register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>,java.nio.file.WatchEvent.Modifier)",
        "java.nio.file.Watchable.register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>)"
    ],
    "javax.swing.text.stylededitorkit.fontfamilyaction.actionperformed": [
        "javax.swing.text.StyledEditorKit.FontFamilyAction.actionPerformed(java.awt.event.ActionEvent)"
    ],
    "java.awt.geom.ellipse2d.double.getwidth": [
        "java.awt.geom.Ellipse2D.Double.getWidth()"
    ],
    "javax.xml.soap.soapexception.initcause": [
        "javax.xml.soap.SOAPException.initCause(java.lang.Throwable)"
    ],
    "java.awt.dnd.droptarget.setflavormap": [
        "java.awt.dnd.DropTarget.setFlavorMap(java.awt.datatransfer.FlavorMap)"
    ],
    "java.awt.dnd.draggestureevent.getcomponent": [
        "java.awt.dnd.DragGestureEvent.getComponent()"
    ],
    "java.util.regex.matcher.appendreplacement": [
        "java.util.regex.Matcher.appendReplacement(java.lang.StringBuffer,java.lang.String)"
    ],
    "javax.management.monitor.monitormbean.setobservedattribute": [
        "javax.management.monitor.MonitorMBean.setObservedAttribute(java.lang.String)"
    ],
    "javax.management.runtimembeanexception.getcause": [
        "javax.management.RuntimeMBeanException.getCause()"
    ],
    "java.util.serviceloader.reload": [
        "java.util.ServiceLoader.reload()"
    ],
    "java.awt.component.print": [
        "java.awt.Component.print(java.awt.Graphics)"
    ],
    "javax.swing.tree.defaultmutabletreenode.getuserobject": [
        "javax.swing.tree.DefaultMutableTreeNode.getUserObject()"
    ],
    "java.awt.component.applycomponentorientation": [
        "java.awt.Component.applyComponentOrientation(java.awt.ComponentOrientation)"
    ],
    "javax.imageio.metadata.iioinvalidtreeexception.getoffendingnode": [
        "javax.imageio.metadata.IIOInvalidTreeException.getOffendingNode()"
    ],
    "javax.swing.boundedrangemodel.removechangelistener": [
        "javax.swing.BoundedRangeModel.removeChangeListener(javax.swing.event.ChangeListener)"
    ],
    "javax.swing.text.compositeview.getrightinset": [
        "javax.swing.text.CompositeView.getRightInset()"
    ],
    "javax.xml.stream.xmlinputfactory.setxmlreporter": [
        "javax.xml.stream.XMLInputFactory.setXMLReporter(javax.xml.stream.XMLReporter)"
    ],
    "java.awt.image.databufferfloat.setelem": [
        "java.awt.image.DataBufferFloat.setElem(int,int,int)"
    ],
    "java.io.randomaccessfile.length": [
        "java.io.RandomAccessFile.length()"
    ],
    "java.sql.connection.setcatalog": [
        "java.sql.Connection.setCatalog(java.lang.String)"
    ],
    "java.sql.callablestatement.getint": [
        "java.sql.CallableStatement.getInt(int)",
        "java.sql.CallableStatement.getInt(java.lang.String)"
    ],
    "javax.swing.event.caretevent.getmark": [
        "javax.swing.event.CaretEvent.getMark()"
    ],
    "javax.swing.tree.defaulttreemodel.firetreenodesremoved": [
        "javax.swing.tree.DefaultTreeModel.fireTreeNodesRemoved(java.lang.Object,java.lang.Object[],int[],java.lang.Object[])"
    ],
    "javax.sql.rowset.serial.serialclob.getcharacterstream": [
        "javax.sql.rowset.serial.SerialClob.getCharacterStream(long,long)",
        "javax.sql.rowset.serial.SerialClob.getCharacterStream()"
    ],
    "javax.swing.plaf.basic.basictableui.getbaselineresizebehavior": [
        "javax.swing.plaf.basic.BasicTableUI.getBaselineResizeBehavior(javax.swing.JComponent)"
    ],
    "java.time.localdate.ofepochday": [
        "java.time.LocalDate.ofEpochDay(long)"
    ],
    "java.util.spliterator.getexactsizeifknown": [
        "java.util.Spliterator.getExactSizeIfKnown()"
    ],
    "javax.swing.japplet.getaccessiblecontext": [
        "javax.swing.JApplet.getAccessibleContext()"
    ],
    "javax.xml.ws.respectbindingfeature.getid": [
        "javax.xml.ws.RespectBindingFeature.getID()"
    ],
    "java.util.concurrent.phaser.getphase": [
        "java.util.concurrent.Phaser.getPhase()"
    ],
    "java.awt.image.colormodel.getgreen": [
        "java.awt.image.ColorModel.getGreen(int)",
        "java.awt.image.ColorModel.getGreen(java.lang.Object)"
    ],
    "javax.sql.rowset.cachedrowset.undoinsert": [
        "javax.sql.rowset.CachedRowSet.undoInsert()"
    ],
    "java.util.concurrent.atomic.atomiclongarray.accumulateandget": [
        "java.util.concurrent.atomic.AtomicLongArray.accumulateAndGet(int,long,java.util.function.LongBinaryOperator)"
    ],
    "org.omg.corba.nvlist.add": [
        "org.omg.CORBA.NVList.add(int)"
    ],
    "javax.swing.timer.setcoalesce": [
        "javax.swing.Timer.setCoalesce(boolean)"
    ],
    "javax.swing.plaf.basic.basicoptionpaneui.createui": [
        "javax.swing.plaf.basic.BasicOptionPaneUI.createUI(javax.swing.JComponent)"
    ],
    "java.net.urisyntaxexception.getinput": [
        "java.net.URISyntaxException.getInput()"
    ],
    "javax.print.attribute.standard.jobpriority.equals": [
        "javax.print.attribute.standard.JobPriority.equals(java.lang.Object)"
    ],
    "javax.swing.rootpanecontainer.getlayeredpane": [
        "javax.swing.RootPaneContainer.getLayeredPane()"
    ],
    "java.text.decimalformatsymbols.setmonetarydecimalseparator": [
        "java.text.DecimalFormatSymbols.setMonetaryDecimalSeparator(char)"
    ],
    "javax.tools.javafilemanager.getfileforinput": [
        "javax.tools.JavaFileManager.getFileForInput(javax.tools.JavaFileManager.Location,java.lang.String,java.lang.String)"
    ],
    "javax.swing.plaf.basic.basicfilechooserui.setdirectory": [
        "javax.swing.plaf.basic.BasicFileChooserUI.setDirectory(java.io.File)"
    ],
    "javax.swing.uimanager.setinstalledlookandfeels": [
        "javax.swing.UIManager.setInstalledLookAndFeels(javax.swing.UIManager.LookAndFeelInfo[])"
    ],
    "javax.swing.plaf.metal.metaltheme.getmenuselectedbackground": [
        "javax.swing.plaf.metal.MetalTheme.getMenuSelectedBackground()"
    ],
    "javax.sql.rowset.serial.serialarray.getresultset": [
        "javax.sql.rowset.serial.SerialArray.getResultSet()",
        "javax.sql.rowset.serial.SerialArray.getResultSet(long,int,,java.lang.Class<?>>)",
        "javax.sql.rowset.serial.SerialArray.getResultSet(,java.lang.Class<?>>)",
        "javax.sql.rowset.serial.SerialArray.getResultSet(long,int)"
    ],
    "javax.tools.fileobject.getlastmodified": [
        "javax.tools.FileObject.getLastModified()"
    ],
    "java.lang.reflect.executable.getannotatedreturntype": [
        "java.lang.reflect.Executable.getAnnotatedReturnType()"
    ],
    "javax.xml.stream.xmlinputfactory.getxmlresolver": [
        "javax.xml.stream.XMLInputFactory.getXMLResolver()"
    ],
    "javax.xml.bind.helpers.abstractunmarshallerimpl.getproperty": [
        "javax.xml.bind.helpers.AbstractUnmarshallerImpl.getProperty(java.lang.String)"
    ],
    "javax.activation.datahandler.writeto": [
        "javax.activation.DataHandler.writeTo(java.io.OutputStream)"
    ],
    "javax.crypto.spec.dhpublickeyspec.gety": [
        "javax.crypto.spec.DHPublicKeySpec.getY()"
    ],
    "java.util.logging.sockethandler.close": [
        "java.util.logging.SocketHandler.close()"
    ],
    "java.awt.basicstroke.getdasharray": [
        "java.awt.BasicStroke.getDashArray()"
    ],
    "org.omg.corba.datainputstream.read_any_array": [
        "org.omg.CORBA.DataInputStream.read_any_array(org.omg.CORBA.AnySeqHolder,int,int)"
    ],
    "javax.xml.transform.stream.streamresult.setsystemid": [
        "javax.xml.transform.stream.StreamResult.setSystemId(java.io.File)"
    ],
    "javax.swing.plaf.treeui.starteditingatpath": [
        "javax.swing.plaf.TreeUI.startEditingAtPath(javax.swing.JTree,javax.swing.tree.TreePath)"
    ],
    "java.lang.strictmath.scalb": [
        "java.lang.StrictMath.scalb(double,int)",
        "java.lang.StrictMath.scalb(float,int)"
    ],
    "javax.management.modelmbean.modelmbeaninfo.getnotifications": [
        "javax.management.modelmbean.ModelMBeanInfo.getNotifications()"
    ],
    "javax.management.monitor.gaugemonitormbean.setthresholds": [
        "javax.management.monitor.GaugeMonitorMBean.setThresholds(java.lang.Number,java.lang.Number)"
    ],
    "java.lang.strictmath.cos": [
        "java.lang.StrictMath.cos(double)"
    ],
    "java.util.concurrent.atomic.atomicboolean.get": [
        "java.util.concurrent.atomic.AtomicBoolean.get()"
    ],
    "javax.xml.xpath.xpathexpression.evaluate": [
        "javax.xml.xpath.XPathExpression.evaluate(java.lang.Object,javax.xml.namespace.QName)",
        "javax.xml.xpath.XPathExpression.evaluate(org.xml.sax.InputSource,javax.xml.namespace.QName)",
        "javax.xml.xpath.XPathExpression.evaluate(org.xml.sax.InputSource)",
        "javax.xml.xpath.XPathExpression.evaluate(java.lang.Object)"
    ],
    "java.awt.awtkeystroke.tostring": [
        "java.awt.AWTKeyStroke.toString()"
    ],
    "java.awt.keyboardfocusmanager.redispatchevent": [
        "java.awt.KeyboardFocusManager.redispatchEvent(java.awt.Component,java.awt.AWTEvent)"
    ],
    "javax.swing.border.compoundborder.getinsideborder": [
        "javax.swing.border.CompoundBorder.getInsideBorder()"
    ],
    "javax.swing.jinternalframe.getinternalframelisteners": [
        "javax.swing.JInternalFrame.getInternalFrameListeners()"
    ],
    "javax.swing.plaf.multi.multilabelui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiLabelUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "java.util.abstractcollection.toarray": [
        "java.util.AbstractCollection.toArray()",
        "java.util.AbstractCollection.toArray(T[])"
    ],
    "java.net.url.openstream": [
        "java.net.URL.openStream()"
    ],
    "javax.activation.mimetype.removeparameter": [
        "javax.activation.MimeType.removeParameter(java.lang.String)"
    ],
    "javax.sound.midi.midichannel.localcontrol": [
        "javax.sound.midi.MidiChannel.localControl(boolean)"
    ],
    "javax.swing.plaf.basic.basictextui.installui": [
        "javax.swing.plaf.basic.BasicTextUI.installUI(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.multi.multitabbedpaneui.contains": [
        "javax.swing.plaf.multi.MultiTabbedPaneUI.contains(javax.swing.JComponent,int,int)"
    ],
    "javax.imageio.imagereader.readthumbnail": [
        "javax.imageio.ImageReader.readThumbnail(int,int)"
    ],
    "org.omg.portableserver.poaoperations.activate_object_with_id": [
        "org.omg.PortableServer.POAOperations.activate_object_with_id(byte[],org.omg.PortableServer.Servant)"
    ],
    "java.util.concurrent.concurrenthashmap.reduceentries": [
        "java.util.concurrent.ConcurrentHashMap.reduceEntries(long,,,,,? extends,V>>)",
        "java.util.concurrent.ConcurrentHashMap.reduceEntries(long,,,,,? extends,java.util.concurrent.ConcurrentHashMap>>)",
        "java.util.concurrent.ConcurrentHashMap.reduceEntries(long,,,? extends U>,java.util.function.BiFunction<? super,? super,? extends U>)"
    ],
    "java.nio.channels.spi.abstractselector.deregister": [
        "java.nio.channels.spi.AbstractSelector.deregister(java.nio.channels.spi.AbstractSelectionKey)"
    ],
    "java.net.datagramsocket.isbound": [
        "java.net.DatagramSocket.isBound()"
    ],
    "java.lang.reflect.array.getlength": [
        "java.lang.reflect.Array.getLength(java.lang.Object)"
    ],
    "java.util.stream.intstream.foreachordered": [
        "java.util.stream.IntStream.forEachOrdered(java.util.function.IntConsumer)"
    ],
    "java.util.stream.doublestream.findany": [
        "java.util.stream.DoubleStream.findAny()"
    ],
    "javax.swing.defaultsingleselectionmodel.addchangelistener": [
        "javax.swing.DefaultSingleSelectionModel.addChangeListener(javax.swing.event.ChangeListener)"
    ],
    "javax.swing.plaf.synth.synthscrollbarui.paintthumb": [
        "javax.swing.plaf.synth.SynthScrollBarUI.paintThumb(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,java.awt.Rectangle)"
    ],
    "java.math.bigdecimal.movepointright": [
        "java.math.BigDecimal.movePointRight(int)"
    ],
    "java.beans.propertyeditormanager.registereditor": [
        "java.beans.PropertyEditorManager.registerEditor(java.lang.Class<?>,java.lang.Class<?>)"
    ],
    "java.awt.toolkit.createcomponent": [
        "java.awt.Toolkit.createComponent(java.awt.Component)"
    ],
    "javax.swing.jtree.setleadselectionpath": [
        "javax.swing.JTree.setLeadSelectionPath(javax.swing.tree.TreePath)"
    ],
    "javax.swing.text.simpleattributeset.removeattributes": [
        "javax.swing.text.SimpleAttributeSet.removeAttributes(java.util.Enumeration<?>)",
        "javax.swing.text.SimpleAttributeSet.removeAttributes(javax.swing.text.AttributeSet)"
    ],
    "java.lang.invoke.methodhandles.lookup.unreflectgetter": [
        "java.lang.invoke.MethodHandles.Lookup.unreflectGetter(java.lang.reflect.Field)"
    ],
    "javax.swing.text.jtextcomponent.updateui": [
        "javax.swing.text.JTextComponent.updateUI()"
    ],
    "java.lang.class.getdeclaringclass": [
        "java.lang.Class.getDeclaringClass()"
    ],
    "java.util.navigablemap.ceilingentry": [
        "java.util.NavigableMap.ceilingEntry(java.util.NavigableMap)",
        "java.util.NavigableMap.ceilingEntry(K)"
    ],
    "java.lang.classloader.getresources": [
        "java.lang.ClassLoader.getResources(java.lang.String)"
    ],
    "java.beans.customizer.removepropertychangelistener": [
        "java.beans.Customizer.removePropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "javax.crypto.keyagreement.generatesecret": [
        "javax.crypto.KeyAgreement.generateSecret(byte[],int)",
        "javax.crypto.KeyAgreement.generateSecret(java.lang.String)",
        "javax.crypto.KeyAgreement.generateSecret()"
    ],
    "java.util.stringjoiner.tostring": [
        "java.util.StringJoiner.toString()"
    ],
    "javax.imageio.imagewriter.endwriteempty": [
        "javax.imageio.ImageWriter.endWriteEmpty()"
    ],
    "java.awt.keyboardfocusmanager.getfocusedwindow": [
        "java.awt.KeyboardFocusManager.getFocusedWindow()"
    ],
    "javax.imageio.event.iiowriteprogresslistener.imageprogress": [
        "javax.imageio.event.IIOWriteProgressListener.imageProgress(javax.imageio.ImageWriter,float)"
    ],
    "java.util.abstractmap.keyset": [
        "java.util.AbstractMap.keySet()"
    ],
    "javax.swing.plaf.basic.basictabbedpaneui.uninstallcomponents": [
        "javax.swing.plaf.basic.BasicTabbedPaneUI.uninstallComponents()"
    ],
    "javax.swing.text.stylecontext.readattributeset": [
        "javax.swing.text.StyleContext.readAttributeSet(java.io.ObjectInputStream,javax.swing.text.MutableAttributeSet)"
    ],
    "javax.swing.text.attributeset.getattributecount": [
        "javax.swing.text.AttributeSet.getAttributeCount()"
    ],
    "javax.swing.text.labelview.setsubscript": [
        "javax.swing.text.LabelView.setSubscript(boolean)"
    ],
    "java.awt.list.add": [
        "java.awt.List.add(java.lang.String,int)",
        "java.awt.List.add(java.lang.String)"
    ],
    "org.omg.dynamicany._dynfixedstub.get_typecode": [
        "org.omg.DynamicAny._DynFixedStub.get_typecode()"
    ],
    "javax.swing.jframe.setglasspane": [
        "javax.swing.JFrame.setGlassPane(java.awt.Component)"
    ],
    "org.w3c.dom.namednodemap.removenameditem": [
        "org.w3c.dom.NamedNodeMap.removeNamedItem(java.lang.String)"
    ],
    "java.lang.reflect.proxy.newproxyinstance": [
        "java.lang.reflect.Proxy.newProxyInstance(java.lang.ClassLoader,java.lang.Class<?>[],java.lang.reflect.InvocationHandler)",
        "java.lang.reflect.Proxy.newProxyInstance(java.lang.ClassLoader,java.lang.Class<?>,java.lang.reflect.InvocationHandler)"
    ],
    "javax.sound.sampled.dataline.available": [
        "javax.sound.sampled.DataLine.available()"
    ],
    "javax.swing.defaultboundedrangemodel.setminimum": [
        "javax.swing.DefaultBoundedRangeModel.setMinimum(int)"
    ],
    "javax.management.modelmbean.requiredmodelmbean.getattributes": [
        "javax.management.modelmbean.RequiredModelMBean.getAttributes(java.lang.String[])"
    ],
    "javax.swing.event.listselectionevent.getlastindex": [
        "javax.swing.event.ListSelectionEvent.getLastIndex()"
    ],
    "javax.xml.stream.xmlstreamwriter.writecomment": [
        "javax.xml.stream.XMLStreamWriter.writeComment(java.lang.String)"
    ],
    "java.text.simpledateformat.applylocalizedpattern": [
        "java.text.SimpleDateFormat.applyLocalizedPattern(java.lang.String)"
    ],
    "java.time.format.datetimeformatterbuilder.parselenient": [
        "java.time.format.DateTimeFormatterBuilder.parseLenient()"
    ],
    "java.util.concurrent.locks.stampedlock.writelockinterruptibly": [
        "java.util.concurrent.locks.StampedLock.writeLockInterruptibly()"
    ],
    "java.util.concurrent.locks.stampedlock.trywritelock": [
        "java.util.concurrent.locks.StampedLock.tryWriteLock(long,java.util.concurrent.TimeUnit)",
        "java.util.concurrent.locks.StampedLock.tryWriteLock()"
    ],
    "javax.swing.jeditorpane.getcontenttype": [
        "javax.swing.JEditorPane.getContentType()"
    ],
    "java.security.cert.x509crl.getrevokedcertificates": [
        "java.security.cert.X509CRL.getRevokedCertificates()"
    ],
    "javax.swing.jcomponent.firevetoablechange": [
        "javax.swing.JComponent.fireVetoableChange(java.lang.String,java.lang.Object,java.lang.Object)"
    ],
    "javax.xml.stream.events.comment.gettext": [
        "javax.xml.stream.events.Comment.getText()"
    ],
    "java.awt.geom.rectangle2d.createintersection": [
        "java.awt.geom.Rectangle2D.createIntersection(java.awt.geom.Rectangle2D)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getwhite": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getWhite()"
    ],
    "java.nio.charset.charsetdecoder.implonunmappablecharacter": [
        "java.nio.charset.CharsetDecoder.implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)"
    ],
    "java.util.concurrent.atomic.atomicreferencearray.lazyset": [
        "java.util.concurrent.atomic.AtomicReferenceArray.lazySet(int,E)",
        "java.util.concurrent.atomic.AtomicReferenceArray.lazySet(int,java.util.concurrent.atomic.AtomicReferenceArray)"
    ],
    "java.nio.file.attribute.aclentry.builder.build": [
        "java.nio.file.attribute.AclEntry.Builder.build()"
    ],
    "org.ietf.jgss.messageprop.getprivacy": [
        "org.ietf.jgss.MessageProp.getPrivacy()"
    ],
    "javax.swing.plaf.basic.basiccombopopup.getaccessiblecontext": [
        "javax.swing.plaf.basic.BasicComboPopup.getAccessibleContext()"
    ],
    "javax.xml.soap.node.detachnode": [
        "javax.xml.soap.Node.detachNode()"
    ],
    "java.awt.dialog.modalexclusiontype.values": [
        "java.awt.Dialog.ModalExclusionType.values()"
    ],
    "javax.tools.standardjavafilemanager.issamefile": [
        "javax.tools.StandardJavaFileManager.isSameFile(javax.tools.FileObject,javax.tools.FileObject)"
    ],
    "javax.management.attributechangenotification.getattributename": [
        "javax.management.AttributeChangeNotification.getAttributeName()"
    ],
    "javax.sound.sampled.dataline.drain": [
        "javax.sound.sampled.DataLine.drain()"
    ],
    "javax.sound.sampled.mixer.info.getname": [
        "javax.sound.sampled.Mixer.Info.getName()"
    ],
    "javax.swing.plaf.multi.multitreeui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiTreeUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "org.omg.corba.localobject._is_a": [
        "org.omg.CORBA.LocalObject._is_a(java.lang.String)"
    ],
    "java.util.concurrent.completablefuture.tostring": [
        "java.util.concurrent.CompletableFuture.toString()"
    ],
    "javax.sql.rowset.setfloat": [
        "javax.sql.RowSet.setFloat(java.lang.String,float)",
        "javax.sql.RowSet.setFloat(int,float)"
    ],
    "java.lang.threadgroup.activecount": [
        "java.lang.ThreadGroup.activeCount()"
    ],
    "javax.swing.progressmonitor.getminimum": [
        "javax.swing.ProgressMonitor.getMinimum()"
    ],
    "javax.swing.text.html.blockview.getmaximumspan": [
        "javax.swing.text.html.BlockView.getMaximumSpan(int)"
    ],
    "javax.xml.crypto.dsig.signatureproperty.getcontent": [
        "javax.xml.crypto.dsig.SignatureProperty.getContent()"
    ],
    "java.util.optionaldouble.orelseget": [
        "java.util.OptionalDouble.orElseGet(java.util.function.DoubleSupplier)"
    ],
    "javax.lang.model.element.annotationmirror.getelementvalues": [
        "javax.lang.model.element.AnnotationMirror.getElementValues()"
    ],
    "java.util.logging.handler.getencoding": [
        "java.util.logging.Handler.getEncoding()"
    ],
    "javax.swing.uimanager.lookandfeelinfo.tostring": [
        "javax.swing.UIManager.LookAndFeelInfo.toString()"
    ],
    "java.security.cert.trustanchor.getnameconstraints": [
        "java.security.cert.TrustAnchor.getNameConstraints()"
    ],
    "javax.swing.plaf.multi.multisliderui.contains": [
        "javax.swing.plaf.multi.MultiSliderUI.contains(javax.swing.JComponent,int,int)"
    ],
    "java.sql.preparedstatement.setsqlxml": [
        "java.sql.PreparedStatement.setSQLXML(int,java.sql.SQLXML)"
    ],
    "javax.sql.rowset.setint": [
        "javax.sql.RowSet.setInt(int,int)",
        "javax.sql.RowSet.setInt(java.lang.String,int)"
    ],
    "java.time.offsetdatetime.withsecond": [
        "java.time.OffsetDateTime.withSecond(int)"
    ],
    "javax.sound.sampled.spi.formatconversionprovider.issourceencodingsupported": [
        "javax.sound.sampled.spi.FormatConversionProvider.isSourceEncodingSupported(javax.sound.sampled.AudioFormat.Encoding)"
    ],
    "javax.swing.text.stylecontext.getbackground": [
        "javax.swing.text.StyleContext.getBackground(javax.swing.text.AttributeSet)"
    ],
    "javax.swing.timer.restart": [
        "javax.swing.Timer.restart()"
    ],
    "javax.swing.uimanager.get": [
        "javax.swing.UIManager.get(java.lang.Object)",
        "javax.swing.UIManager.get(java.lang.Object,java.util.Locale)"
    ],
    "javax.swing.plaf.basic.basictableui.getmaximumsize": [
        "javax.swing.plaf.basic.BasicTableUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "java.sql.callablestatement.getcharacterstream": [
        "java.sql.CallableStatement.getCharacterStream(int)",
        "java.sql.CallableStatement.getCharacterStream(java.lang.String)"
    ],
    "javax.xml.ws.handler.soap.soapmessagecontext.getroles": [
        "javax.xml.ws.handler.soap.SOAPMessageContext.getRoles()"
    ],
    "javax.swing.text.defaultcaret.getdot": [
        "javax.swing.text.DefaultCaret.getDot()"
    ],
    "javax.swing.jcombobox.processkeyevent": [
        "javax.swing.JComboBox.processKeyEvent(java.awt.event.KeyEvent)"
    ],
    "java.util.logging.level.equals": [
        "java.util.logging.Level.equals(java.lang.Object)"
    ],
    "javax.swing.filechooser.filesystemview.isfilesystemroot": [
        "javax.swing.filechooser.FileSystemView.isFileSystemRoot(java.io.File)"
    ],
    "javax.lang.model.util.typekindvisitor6.visitprimitiveaschar": [
        "javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsChar(javax.lang.model.type.PrimitiveType,javax.lang.model.util.TypeKindVisitor6)"
    ],
    "java.awt.geom.rectangularshape.intersects": [
        "java.awt.geom.RectangularShape.intersects(java.awt.geom.Rectangle2D)"
    ],
    "javax.swing.plaf.synth.synthcomboboxui.installui": [
        "javax.swing.plaf.synth.SynthComboBoxUI.installUI(javax.swing.JComponent)"
    ],
    "java.sql.sqloutput.writefloat": [
        "java.sql.SQLOutput.writeFloat(float)"
    ],
    "java.awt.geom.roundrectangle2d.getarcwidth": [
        "java.awt.geom.RoundRectangle2D.getArcWidth()"
    ],
    "javax.xml.ws.handler.soap.soaphandler.getheaders": [
        "javax.xml.ws.handler.soap.SOAPHandler.getHeaders()"
    ],
    "java.nio.bytebuffer.getshort": [
        "java.nio.ByteBuffer.getShort(int)",
        "java.nio.ByteBuffer.getShort()"
    ],
    "javax.swing.text.defaulteditorkit.getactions": [
        "javax.swing.text.DefaultEditorKit.getActions()"
    ],
    "javax.print.attribute.attributesetutilities.verifyattributecategory": [
        "javax.print.attribute.AttributeSetUtilities.verifyAttributeCategory(java.lang.Object,java.lang.Class<?>)"
    ],
    "java.awt.defaultkeyboardfocusmanager.upfocuscycle": [
        "java.awt.DefaultKeyboardFocusManager.upFocusCycle(java.awt.Component)"
    ],
    "java.util.prefs.abstractpreferences.removenodespi": [
        "java.util.prefs.AbstractPreferences.removeNodeSpi()"
    ],
    "javax.xml.transform.errorlistener.error": [
        "javax.xml.transform.ErrorListener.error(javax.xml.transform.TransformerException)"
    ],
    "java.util.concurrent.atomic.atomiclongarray.getandadd": [
        "java.util.concurrent.atomic.AtomicLongArray.getAndAdd(int,long)"
    ],
    "java.util.spliterators.abstractintspliterator.characteristics": [
        "java.util.Spliterators.AbstractIntSpliterator.characteristics()"
    ],
    "javax.swing.lookandfeel.loadkeybindings": [
        "javax.swing.LookAndFeel.loadKeyBindings(javax.swing.InputMap,java.lang.Object[])"
    ],
    "javax.swing.swingutilities.convertpointfromscreen": [
        "javax.swing.SwingUtilities.convertPointFromScreen(java.awt.Point,java.awt.Component)"
    ],
    "javax.activation.datacontenthandlerfactory.createdatacontenthandler": [
        "javax.activation.DataContentHandlerFactory.createDataContentHandler(java.lang.String)"
    ],
    "javax.xml.bind.helpers.validationeventlocatorimpl.setoffset": [
        "javax.xml.bind.helpers.ValidationEventLocatorImpl.setOffset(int)"
    ],
    "javax.swing.jlayer.setborder": [
        "javax.swing.JLayer.setBorder(javax.swing.border.Border)"
    ],
    "java.awt.cardlayout.sethgap": [
        "java.awt.CardLayout.setHgap(int)"
    ],
    "javax.print.docflavor.getrepresentationclassname": [
        "javax.print.DocFlavor.getRepresentationClassName()"
    ],
    "java.lang.thread.getcontextclassloader": [
        "java.lang.Thread.getContextClassLoader()"
    ],
    "javax.imageio.imagereader.getinput": [
        "javax.imageio.ImageReader.getInput()"
    ],
    "javax.swing.jmenu.getdelay": [
        "javax.swing.JMenu.getDelay()"
    ],
    "javax.swing.text.compositeview.getviewindex": [
        "javax.swing.text.CompositeView.getViewIndex(int,javax.swing.text.Position.Bias)"
    ],
    "java.awt.image.singlepixelpackedsamplemodel.createsubsetsamplemodel": [
        "java.awt.image.SinglePixelPackedSampleModel.createSubsetSampleModel(int[])"
    ],
    "org.ietf.jgss.channelbinding.getacceptoraddress": [
        "org.ietf.jgss.ChannelBinding.getAcceptorAddress()"
    ],
    "java.sql.callablestatement.getshort": [
        "java.sql.CallableStatement.getShort(java.lang.String)",
        "java.sql.CallableStatement.getShort(int)"
    ],
    "javax.imageio.plugins.jpeg.jpegimagewriteparam.getqtables": [
        "javax.imageio.plugins.jpeg.JPEGImageWriteParam.getQTables()"
    ],
    "javax.swing.jtextarea.insert": [
        "javax.swing.JTextArea.insert(java.lang.String,int)"
    ],
    "javax.swing.plaf.metal.metaltheme.getprimarycontrol": [
        "javax.swing.plaf.metal.MetalTheme.getPrimaryControl()"
    ],
    "javax.swing.text.compositeview.viewtomodel": [
        "javax.swing.text.CompositeView.viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias[])"
    ],
    "org.omg.dynamicany._dynanystub.get_char": [
        "org.omg.DynamicAny._DynAnyStub.get_char()"
    ],
    "javax.swing.event.popupmenulistener.popupmenucanceled": [
        "javax.swing.event.PopupMenuListener.popupMenuCanceled(javax.swing.event.PopupMenuEvent)"
    ],
    "javax.imageio.imagewriter.write": [
        "javax.imageio.ImageWriter.write(java.awt.image.RenderedImage)",
        "javax.imageio.ImageWriter.write(javax.imageio.IIOImage)",
        "javax.imageio.ImageWriter.write(javax.imageio.metadata.IIOMetadata,javax.imageio.IIOImage,javax.imageio.ImageWriteParam)"
    ],
    "javax.swing.text.abstractwriter.setlineseparator": [
        "javax.swing.text.AbstractWriter.setLineSeparator(java.lang.String)"
    ],
    "javax.accessibility.accessiblerelation.gettarget": [
        "javax.accessibility.AccessibleRelation.getTarget()"
    ],
    "javax.security.auth.privatecredentialpermission.getactions": [
        "javax.security.auth.PrivateCredentialPermission.getActions()"
    ],
    "java.awt.keyboardfocusmanager.dispatchevent": [
        "java.awt.KeyboardFocusManager.dispatchEvent(java.awt.AWTEvent)"
    ],
    "java.lang.invoke.methodhandleproxies.asinterfaceinstance": [
        "java.lang.invoke.MethodHandleProxies.asInterfaceInstance(java.lang.Class<T>,java.lang.invoke.MethodHandle)"
    ],
    "java.util.prefs.preferences.removenode": [
        "java.util.prefs.Preferences.removeNode()"
    ],
    "java.beans.persistencedelegate.instantiate": [
        "java.beans.PersistenceDelegate.instantiate(java.lang.Object,java.beans.Encoder)"
    ],
    "org.w3c.dom.node.clonenode": [
        "org.w3c.dom.Node.cloneNode(boolean)"
    ],
    "java.time.chrono.chronozoneddatetime.toinstant": [
        "java.time.chrono.ChronoZonedDateTime.toInstant()"
    ],
    "java.awt.image.componentcolormodel.createcompatiblesamplemodel": [
        "java.awt.image.ComponentColorModel.createCompatibleSampleModel(int,int)"
    ],
    "java.util.stream.longstream.max": [
        "java.util.stream.LongStream.max()"
    ],
    "java.util.concurrent.forkjoinpool.invoke": [
        "java.util.concurrent.ForkJoinPool.invoke(java.util.concurrent.ForkJoinTask<T>)"
    ],
    "java.awt.container.setfocustraversalkeys": [
        "java.awt.Container.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"
    ],
    "org.omg.dynamicany.dynanyoperations.get_ulong": [
        "org.omg.DynamicAny.DynAnyOperations.get_ulong()"
    ],
    "javax.swing.lookandfeel.getdisabledicon": [
        "javax.swing.LookAndFeel.getDisabledIcon(javax.swing.JComponent,javax.swing.Icon)"
    ],
    "java.nio.file.files.getposixfilepermissions": [
        "java.nio.file.Files.getPosixFilePermissions(java.nio.file.Path,java.nio.file.LinkOption)",
        "java.nio.file.Files.getPosixFilePermissions(java.nio.file.Path,java.nio.file.LinkOption...)"
    ],
    "javax.swing.jinternalframe.setlayer": [
        "javax.swing.JInternalFrame.setLayer(int)",
        "javax.swing.JInternalFrame.setLayer(java.lang.Integer)"
    ],
    "javax.swing.text.html.option.getlabel": [
        "javax.swing.text.html.Option.getLabel()"
    ],
    "javax.swing.uimanager.getinsets": [
        "javax.swing.UIManager.getInsets(java.lang.Object)",
        "javax.swing.UIManager.getInsets(java.lang.Object,java.util.Locale)"
    ],
    "javax.sound.midi.spi.soundbankreader.getsoundbank": [
        "javax.sound.midi.spi.SoundbankReader.getSoundbank(java.io.File)",
        "javax.sound.midi.spi.SoundbankReader.getSoundbank(java.net.URL)",
        "javax.sound.midi.spi.SoundbankReader.getSoundbank(java.io.InputStream)"
    ],
    "org.omg.dynamicany.dynunionoperations.member_kind": [
        "org.omg.DynamicAny.DynUnionOperations.member_kind()"
    ],
    "javax.management.notificationemitter.removenotificationlistener": [
        "javax.management.NotificationEmitter.removeNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)"
    ],
    "javax.tools.documentationtool.documentationtask.setlocale": [
        "javax.tools.DocumentationTool.DocumentationTask.setLocale(java.util.Locale)"
    ],
    "javax.management.openmbean.openmbeaninfosupport.equals": [
        "javax.management.openmbean.OpenMBeanInfoSupport.equals(java.lang.Object)"
    ],
    "java.lang.throwable.setstacktrace": [
        "java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])",
        "java.lang.Throwable.setStackTrace(java.lang.StackTraceElement)"
    ],
    "javax.xml.xpath.xpath.evaluate": [
        "javax.xml.xpath.XPath.evaluate(java.lang.String,java.lang.Object)",
        "javax.xml.xpath.XPath.evaluate(java.lang.String,org.xml.sax.InputSource)",
        "javax.xml.xpath.XPath.evaluate(java.lang.String,java.lang.Object,javax.xml.namespace.QName)",
        "javax.xml.xpath.XPath.evaluate(java.lang.String,org.xml.sax.InputSource,javax.xml.namespace.QName)"
    ],
    "javax.swing.text.defaultcaret.getselectionpainter": [
        "javax.swing.text.DefaultCaret.getSelectionPainter()"
    ],
    "javax.lang.model.type.typevisitor.visitnull": [
        "javax.lang.model.type.TypeVisitor.visitNull(javax.lang.model.type.NullType,javax.lang.model.type.TypeVisitor)"
    ],
    "org.omg.portableinterceptor.orbinitinfooperations.add_server_request_interceptor": [
        "org.omg.PortableInterceptor.ORBInitInfoOperations.add_server_request_interceptor(org.omg.PortableInterceptor.ServerRequestInterceptor)"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readstring": [
        "javax.sql.rowset.serial.SQLInputImpl.readString()"
    ],
    "javax.security.auth.kerberos.kerberosticket.refresh": [
        "javax.security.auth.kerberos.KerberosTicket.refresh()"
    ],
    "java.awt.image.componentsamplemodel.getpixels": [
        "java.awt.image.ComponentSampleModel.getPixels(int,int,int,int,int[],java.awt.image.DataBuffer)"
    ],
    "javax.sound.sampled.audioformat.getencoding": [
        "javax.sound.sampled.AudioFormat.getEncoding()"
    ],
    "java.time.offsetdatetime.getsecond": [
        "java.time.OffsetDateTime.getSecond()"
    ],
    "javax.xml.stream.events.xmlevent.ascharacters": [
        "javax.xml.stream.events.XMLEvent.asCharacters()"
    ],
    "java.awt.frame.setbackground": [
        "java.awt.Frame.setBackground(java.awt.Color)"
    ],
    "javax.lang.model.type.mirroredtypeexception.gettypemirror": [
        "javax.lang.model.type.MirroredTypeException.getTypeMirror()"
    ],
    "javax.lang.model.element.typeelement.getsuperclass": [
        "javax.lang.model.element.TypeElement.getSuperclass()"
    ],
    "javax.swing.plaf.multi.multispinnerui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiSpinnerUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "org.omg.portableserver._servantactivatorstub.incarnate": [
        "org.omg.PortableServer._ServantActivatorStub.incarnate(byte[],org.omg.PortableServer.POA)"
    ],
    "javax.xml.ws.spi.http.httpexchange.getlocaladdress": [
        "javax.xml.ws.spi.http.HttpExchange.getLocalAddress()"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.sethour": [
        "javax.xml.datatype.XMLGregorianCalendar.setHour(int)"
    ],
    "javax.xml.bind.helpers.validationeventimpl.tostring": [
        "javax.xml.bind.helpers.ValidationEventImpl.toString()"
    ],
    "javax.print.multidocprintjob.print": [
        "javax.print.MultiDocPrintJob.print(javax.print.MultiDoc,javax.print.attribute.PrintRequestAttributeSet)"
    ],
    "javax.swing.text.document.getendposition": [
        "javax.swing.text.Document.getEndPosition()"
    ],
    "javax.swing.buttonmodel.setactioncommand": [
        "javax.swing.ButtonModel.setActionCommand(java.lang.String)"
    ],
    "java.time.chrono.chronolocaldatetime.plus": [
        "java.time.chrono.ChronoLocalDateTime.plus(long,java.time.temporal.TemporalUnit)",
        "java.time.chrono.ChronoLocalDateTime.plus(java.time.temporal.TemporalAmount)"
    ],
    "java.util.zip.deflater.gettotalout": [
        "java.util.zip.Deflater.getTotalOut()"
    ],
    "java.security.cert.certpath.writereplace": [
        "java.security.cert.CertPath.writeReplace()"
    ],
    "java.security.cert.pkixcertpathvalidatorresult.getpolicytree": [
        "java.security.cert.PKIXCertPathValidatorResult.getPolicyTree()"
    ],
    "org.omg.dynamicany._dynvaluestub.get_wchar": [
        "org.omg.DynamicAny._DynValueStub.get_wchar()"
    ],
    "java.awt.im.spi.inputmethod.removenotify": [
        "java.awt.im.spi.InputMethod.removeNotify()"
    ],
    "java.lang.math.tan": [
        "java.lang.Math.tan(double)"
    ],
    "java.net.datagramsocketimpl.getfiledescriptor": [
        "java.net.DatagramSocketImpl.getFileDescriptor()"
    ],
    "org.omg.corba.portable.objectimpl._servant_preinvoke": [
        "org.omg.CORBA.portable.ObjectImpl._servant_preinvoke(java.lang.String,java.lang.Class)"
    ],
    "javax.swing.jtoolbar.getaccessiblecontext": [
        "javax.swing.JToolBar.getAccessibleContext()"
    ],
    "org.xml.sax.attributes.gettype": [
        "org.xml.sax.Attributes.getType(java.lang.String,java.lang.String)",
        "org.xml.sax.Attributes.getType(int)"
    ],
    "org.omg.dynamicany._dynunionstub.member_kind": [
        "org.omg.DynamicAny._DynUnionStub.member_kind()"
    ],
    "javax.xml.stream.xmlstreamreader.getattributelocalname": [
        "javax.xml.stream.XMLStreamReader.getAttributeLocalName(int)"
    ],
    "javax.xml.ws.service.getexecutor": [
        "javax.xml.ws.Service.getExecutor()"
    ],
    "javax.swing.jcombobox.configureeditor": [
        "javax.swing.JComboBox.configureEditor(javax.swing.ComboBoxEditor,java.lang.Object)"
    ],
    "java.lang.management.threadmxbean.getpeakthreadcount": [
        "java.lang.management.ThreadMXBean.getPeakThreadCount()"
    ],
    "javax.swing.text.html.stylesheet.getfont": [
        "javax.swing.text.html.StyleSheet.getFont(javax.swing.text.AttributeSet)"
    ],
    "javax.management.mbeanserverconnection.setattributes": [
        "javax.management.MBeanServerConnection.setAttributes(javax.management.ObjectName,javax.management.AttributeList)"
    ],
    "java.util.concurrent.futuretask.setexception": [
        "java.util.concurrent.FutureTask.setException(java.lang.Throwable)"
    ],
    "java.security.acl.aclentry.permissions": [
        "java.security.acl.AclEntry.permissions()"
    ],
    "javax.swing.text.html.formsubmitevent.methodtype.values": [
        "javax.swing.text.html.FormSubmitEvent.MethodType.values()"
    ],
    "javax.lang.model.util.simpleannotationvaluevisitor6.visitshort": [
        "javax.lang.model.util.SimpleAnnotationValueVisitor6.visitShort(short,javax.lang.model.util.SimpleAnnotationValueVisitor6)"
    ],
    "javax.naming.ldap.sortresponsecontrol.issorted": [
        "javax.naming.ldap.SortResponseControl.isSorted()"
    ],
    "javax.swing.plaf.synth.synthpainter.painttabbedpanecontentborder": [
        "javax.swing.plaf.synth.SynthPainter.paintTabbedPaneContentBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.jcomponent.getlisteners": [
        "javax.swing.JComponent.getListeners(java.lang.Class<T>)"
    ],
    "java.text.stringcharacteriterator.getindex": [
        "java.text.StringCharacterIterator.getIndex()"
    ],
    "javax.xml.crypto.dsig.xmlsignature.getsignedinfo": [
        "javax.xml.crypto.dsig.XMLSignature.getSignedInfo()"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.createeditor": [
        "javax.swing.plaf.basic.BasicComboBoxUI.createEditor()"
    ],
    "javax.security.auth.kerberos.kerberosprincipal.getrealm": [
        "javax.security.auth.kerberos.KerberosPrincipal.getRealm()"
    ],
    "java.lang.management.runtimemxbean.getsystemproperties": [
        "java.lang.management.RuntimeMXBean.getSystemProperties()"
    ],
    "javax.swing.grouplayout.replace": [
        "javax.swing.GroupLayout.replace(java.awt.Component,java.awt.Component)"
    ],
    "javax.swing.plaf.basic.basictreeui.getminimumsize": [
        "javax.swing.plaf.basic.BasicTreeUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "java.sql.connection.getnetworktimeout": [
        "java.sql.Connection.getNetworkTimeout()"
    ],
    "java.time.zoneddatetime.withyear": [
        "java.time.ZonedDateTime.withYear(int)"
    ],
    "javax.swing.jprogressbar.getminimum": [
        "javax.swing.JProgressBar.getMinimum()"
    ],
    "java.nio.charset.charsetencoder.implonunmappablecharacter": [
        "java.nio.charset.CharsetEncoder.implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)"
    ],
    "javax.tools.javacompiler.compilationtask.call": [
        "javax.tools.JavaCompiler.CompilationTask.call()"
    ],
    "java.time.offsetdatetime.tozoneddatetime": [
        "java.time.OffsetDateTime.toZonedDateTime()"
    ],
    "javax.print.printservice.createprintjob": [
        "javax.print.PrintService.createPrintJob()"
    ],
    "javax.swing.plaf.basic.basictextui.getmaximumsize": [
        "javax.swing.plaf.basic.BasicTextUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "org.omg.dynamicany._dynvaluestub.insert_octet": [
        "org.omg.DynamicAny._DynValueStub.insert_octet(byte)"
    ],
    "java.util.concurrent.countedcompleter.oncompletion": [
        "java.util.concurrent.CountedCompleter.onCompletion(java.util.concurrent.CountedCompleter<?>)"
    ],
    "javax.swing.plaf.metal.metaltheme.getname": [
        "javax.swing.plaf.metal.MetalTheme.getName()"
    ],
    "javax.swing.tree.treeselectionmodel.addselectionpaths": [
        "javax.swing.tree.TreeSelectionModel.addSelectionPaths(javax.swing.tree.TreePath[])"
    ],
    "java.time.instant.atzone": [
        "java.time.Instant.atZone(java.time.ZoneId)"
    ],
    "java.nio.channels.pipe.sourcechannel.validops": [
        "java.nio.channels.Pipe.SourceChannel.validOps()"
    ],
    "java.awt.systemtray.add": [
        "java.awt.SystemTray.add(java.awt.TrayIcon)"
    ],
    "java.security.cert.pkixparameters.addcertpathchecker": [
        "java.security.cert.PKIXParameters.addCertPathChecker(java.security.cert.PKIXCertPathChecker)"
    ],
    "javax.tools.javafileobject.kind.valueof": [
        "javax.tools.JavaFileObject.Kind.valueOf(java.lang.String)"
    ],
    "javax.swing.tree.defaulttreecellrenderer.gettreecellrenderercomponent": [
        "javax.swing.tree.DefaultTreeCellRenderer.getTreeCellRendererComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int,boolean)"
    ],
    "javax.net.ssl.sslserversocket.setenablesessioncreation": [
        "javax.net.ssl.SSLServerSocket.setEnableSessionCreation(boolean)"
    ],
    "java.awt.textcomponent.selectall": [
        "java.awt.TextComponent.selectAll()"
    ],
    "javax.print.attribute.standard.jobmessagefromoperator.getcategory": [
        "javax.print.attribute.standard.JobMessageFromOperator.getCategory()"
    ],
    "org.omg.dynamicany._dynunionstub.get_val": [
        "org.omg.DynamicAny._DynUnionStub.get_val()"
    ],
    "java.awt.rectangle.getheight": [
        "java.awt.Rectangle.getHeight()"
    ],
    "java.io.objectoutput.flush": [
        "java.io.ObjectOutput.flush()"
    ],
    "javax.xml.bind.binder.getjaxbnode": [
        "javax.xml.bind.Binder.getJAXBNode(javax.xml.bind.Binder)"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.getmaximumsize": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "javax.swing.event.hyperlinkevent.eventtype.tostring": [
        "javax.swing.event.HyperlinkEvent.EventType.toString()"
    ],
    "java.awt.desktop.browse": [
        "java.awt.Desktop.browse(java.net.URI)"
    ],
    "java.awt.alphacomposite.getalpha": [
        "java.awt.AlphaComposite.getAlpha()"
    ],
    "java.util.stream.longstream.iterate": [
        "java.util.stream.LongStream.iterate(long,java.util.function.LongUnaryOperator)"
    ],
    "javax.swing.jlist.removelistselectionlistener": [
        "javax.swing.JList.removeListSelectionListener(javax.swing.event.ListSelectionListener)"
    ],
    "java.util.locale.builder.setlanguage": [
        "java.util.Locale.Builder.setLanguage(java.lang.String)"
    ],
    "java.util.timezone.setid": [
        "java.util.TimeZone.setID(java.lang.String)"
    ],
    "javax.management.openmbean.openmbeanattributeinfo.hashcode": [
        "javax.management.openmbean.OpenMBeanAttributeInfo.hashCode()"
    ],
    "javax.swing.plaf.synth.synthlistui.uninstalllisteners": [
        "javax.swing.plaf.synth.SynthListUI.uninstallListeners()"
    ],
    "java.awt.image.renderable.renderableimageproducer.startproduction": [
        "java.awt.image.renderable.RenderableImageProducer.startProduction(java.awt.image.ImageConsumer)"
    ],
    "org.w3c.dom.element.removeattributenode": [
        "org.w3c.dom.Element.removeAttributeNode(org.w3c.dom.Attr)"
    ],
    "javax.swing.plaf.componentui.getbaselineresizebehavior": [
        "javax.swing.plaf.ComponentUI.getBaselineResizeBehavior(javax.swing.JComponent)"
    ],
    "java.time.month.adjustinto": [
        "java.time.Month.adjustInto(java.time.temporal.Temporal)"
    ],
    "javax.xml.ws.endpointreference.writeto": [
        "javax.xml.ws.EndpointReference.writeTo(javax.xml.transform.Result)"
    ],
    "org.omg.corba.any.insert_boolean": [
        "org.omg.CORBA.Any.insert_boolean(boolean)"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.compare": [
        "javax.xml.datatype.XMLGregorianCalendar.compare(javax.xml.datatype.XMLGregorianCalendar)"
    ],
    "org.omg.dynamicany._dynenumstub.get_boolean": [
        "org.omg.DynamicAny._DynEnumStub.get_boolean()"
    ],
    "javax.rmi.corba.utildelegate.loadclass": [
        "javax.rmi.CORBA.UtilDelegate.loadClass(java.lang.String,java.lang.String,java.lang.ClassLoader)"
    ],
    "javax.swing.mutablecomboboxmodel.removeelementat": [
        "javax.swing.MutableComboBoxModel.removeElementAt(int)"
    ],
    "java.awt.color.icc_profile.getdata": [
        "java.awt.color.ICC_Profile.getData(int)",
        "java.awt.color.ICC_Profile.getData()"
    ],
    "java.lang.stringbuffer.delete": [
        "java.lang.StringBuffer.delete(int,int)"
    ],
    "java.sql.databasemetadata.getmaxlogicallobsize": [
        "java.sql.DatabaseMetaData.getMaxLogicalLobSize()"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getcontroltextcolor": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getControlTextColor()"
    ],
    "java.sql.databasemetadata.gettypeinfo": [
        "java.sql.DatabaseMetaData.getTypeInfo()"
    ],
    "java.sql.ref.getbasetypename": [
        "java.sql.Ref.getBaseTypeName()"
    ],
    "java.sql.sqloutput.writesqlxml": [
        "java.sql.SQLOutput.writeSQLXML(java.sql.SQLXML)"
    ],
    "java.rmi.remoteexception.getmessage": [
        "java.rmi.RemoteException.getMessage()"
    ],
    "javax.swing.plaf.basic.basictabbedpaneui.tabforcoordinate": [
        "javax.swing.plaf.basic.BasicTabbedPaneUI.tabForCoordinate(javax.swing.JTabbedPane,int,int)"
    ],
    "java.io.filenamefilter.accept": [
        "java.io.FilenameFilter.accept(java.io.File,java.lang.String)"
    ],
    "javax.sound.midi.sequencer.gettickposition": [
        "javax.sound.midi.Sequencer.getTickPosition()"
    ],
    "javax.swing.jlabel.sethorizontaltextposition": [
        "javax.swing.JLabel.setHorizontalTextPosition(int)"
    ],
    "javax.tools.javacompiler.getstandardfilemanager": [
        "javax.tools.JavaCompiler.getStandardFileManager(javax.tools.DiagnosticListener<? super javax.tools.JavaFileObject>,java.util.Locale,java.nio.charset.Charset)"
    ],
    "java.util.concurrent.delayqueue.remove": [
        "java.util.concurrent.DelayQueue.remove(java.lang.Object)"
    ],
    "javax.swing.jmenuitem.getaccelerator": [
        "javax.swing.JMenuItem.getAccelerator()"
    ],
    "javax.swing.repaintmanager.getdirtyregion": [
        "javax.swing.RepaintManager.getDirtyRegion(javax.swing.JComponent)"
    ],
    "javax.sql.rowset.spi.syncfactory.getlogger": [
        "javax.sql.rowset.spi.SyncFactory.getLogger()"
    ],
    "javax.sound.midi.mididevice.getmaxtransmitters": [
        "javax.sound.midi.MidiDevice.getMaxTransmitters()"
    ],
    "java.time.zoneddatetime.until": [
        "java.time.ZonedDateTime.until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)"
    ],
    "javax.imageio.metadata.iiometadataformat.getattributedescription": [
        "javax.imageio.metadata.IIOMetadataFormat.getAttributeDescription(java.lang.String,java.lang.String,java.util.Locale)"
    ],
    "java.lang.invoke.methodhandleinfo.reflectas": [
        "java.lang.invoke.MethodHandleInfo.reflectAs(java.lang.Class<T>,java.lang.invoke.MethodHandles.Lookup)"
    ],
    "javax.lang.model.util.simpletypevisitor6.visitwildcard": [
        "javax.lang.model.util.SimpleTypeVisitor6.visitWildcard(javax.lang.model.type.WildcardType,javax.lang.model.util.SimpleTypeVisitor6)"
    ],
    "java.text.fieldposition.hashcode": [
        "java.text.FieldPosition.hashCode()"
    ],
    "javax.swing.jmenu.createwinlistener": [
        "javax.swing.JMenu.createWinListener(javax.swing.JPopupMenu)"
    ],
    "javax.lang.model.util.typekindvisitor6.visitnotype": [
        "javax.lang.model.util.TypeKindVisitor6.visitNoType(javax.lang.model.type.NoType,javax.lang.model.util.TypeKindVisitor6)"
    ],
    "java.net.urlclassloader.findresource": [
        "java.net.URLClassLoader.findResource(java.lang.String)"
    ],
    "javax.swing.text.stylededitorkit.fontsizeaction.actionperformed": [
        "javax.swing.text.StyledEditorKit.FontSizeAction.actionPerformed(java.awt.event.ActionEvent)"
    ],
    "java.lang.reflect.constructor.tostring": [
        "java.lang.reflect.Constructor.toString()"
    ],
    "javax.imageio.iioparam.getdefaultcontroller": [
        "javax.imageio.IIOParam.getDefaultController()"
    ],
    "javax.swing.plaf.synth.synthviewportui.createui": [
        "javax.swing.plaf.synth.SynthViewportUI.createUI(javax.swing.JComponent)"
    ],
    "java.time.offsettime.plusminutes": [
        "java.time.OffsetTime.plusMinutes(long)"
    ],
    "javax.management.relation.relationservicembean.getroleinfo": [
        "javax.management.relation.RelationServiceMBean.getRoleInfo(java.lang.String,java.lang.String)"
    ],
    "javax.accessibility.accessiblehypertext.getlinkcount": [
        "javax.accessibility.AccessibleHypertext.getLinkCount()"
    ],
    "javax.swing.jcombobox.getselecteditem": [
        "javax.swing.JComboBox.getSelectedItem()"
    ],
    "java.util.logging.logrecord.getmillis": [
        "java.util.logging.LogRecord.getMillis()"
    ],
    "java.awt.geom.pathiterator.currentsegment": [
        "java.awt.geom.PathIterator.currentSegment(double[])",
        "java.awt.geom.PathIterator.currentSegment(float[])"
    ],
    "java.nio.file.linkoption.valueof": [
        "java.nio.file.LinkOption.valueOf(java.lang.String)"
    ],
    "java.time.zoneoffset.oftotalseconds": [
        "java.time.ZoneOffset.ofTotalSeconds(int)"
    ],
    "java.rmi.activation.activationgroupdesc.getcommandenvironment": [
        "java.rmi.activation.ActivationGroupDesc.getCommandEnvironment()"
    ],
    "java.lang.class.getmethods": [
        "java.lang.Class.getMethods()"
    ],
    "javax.swing.defaultlistcellrenderer.repaint": [
        "javax.swing.DefaultListCellRenderer.repaint()",
        "javax.swing.DefaultListCellRenderer.repaint(long,int,int,int,int)",
        "javax.swing.DefaultListCellRenderer.repaint(java.awt.Rectangle)"
    ],
    "javax.swing.text.boxview.layoutchanged": [
        "javax.swing.text.BoxView.layoutChanged(int)"
    ],
    "java.awt.dnd.droptarget.getcomponent": [
        "java.awt.dnd.DropTarget.getComponent()"
    ],
    "java.net.url.getquery": [
        "java.net.URL.getQuery()"
    ],
    "javax.net.ssl.sslengine.getenabledciphersuites": [
        "javax.net.ssl.SSLEngine.getEnabledCipherSuites()"
    ],
    "javax.swing.text.styleconstants.setsubscript": [
        "javax.swing.text.StyleConstants.setSubscript(javax.swing.text.MutableAttributeSet,boolean)"
    ],
    "java.time.zone.zonerules.tostring": [
        "java.time.zone.ZoneRules.toString()"
    ],
    "java.text.dateformatsymbols.setmonths": [
        "java.text.DateFormatSymbols.setMonths(java.lang.String[])",
        "java.text.DateFormatSymbols.setMonths(java.lang.String)"
    ],
    "java.util.concurrent.atomic.atomiclong.addandget": [
        "java.util.concurrent.atomic.AtomicLong.addAndGet(long)"
    ],
    "javax.script.scriptexception.getlinenumber": [
        "javax.script.ScriptException.getLineNumber()"
    ],
    "java.net.authenticator.getrequestinghost": [
        "java.net.Authenticator.getRequestingHost()"
    ],
    "java.rmi.activation.activationgroupdesc.hashcode": [
        "java.rmi.activation.ActivationGroupDesc.hashCode()"
    ],
    "java.time.format.decimalstyle.getnegativesign": [
        "java.time.format.DecimalStyle.getNegativeSign()"
    ],
    "java.time.chrono.chronozoneddatetime.tolocaldate": [
        "java.time.chrono.ChronoZonedDateTime.toLocalDate()"
    ],
    "javax.swing.jcombobox.setenabled": [
        "javax.swing.JComboBox.setEnabled(boolean)"
    ],
    "java.security.spec.encodedkeyspec.getencoded": [
        "java.security.spec.EncodedKeySpec.getEncoded()"
    ],
    "java.time.chrono.chronology.getavailablechronologies": [
        "java.time.chrono.Chronology.getAvailableChronologies()"
    ],
    "java.awt.image.lookupop.getbounds2d": [
        "java.awt.image.LookupOp.getBounds2D(java.awt.image.Raster)",
        "java.awt.image.LookupOp.getBounds2D(java.awt.image.BufferedImage)"
    ],
    "javax.swing.text.defaultformatter.getoverwritemode": [
        "javax.swing.text.DefaultFormatter.getOverwriteMode()"
    ],
    "java.sql.statement.setquerytimeout": [
        "java.sql.Statement.setQueryTimeout(int)"
    ],
    "java.awt.image.indexcolormodel.getmapsize": [
        "java.awt.image.IndexColorModel.getMapSize()"
    ],
    "java.awt.image.volatileimage.getgraphics": [
        "java.awt.image.VolatileImage.getGraphics()"
    ],
    "javax.sql.rowset.cachedrowset.settablename": [
        "javax.sql.rowset.CachedRowSet.setTableName(java.lang.String)"
    ],
    "javax.swing.plaf.basic.basicsplitpanedivider.getpreferredsize": [
        "javax.swing.plaf.basic.BasicSplitPaneDivider.getPreferredSize()"
    ],
    "javax.naming.compoundname.tostring": [
        "javax.naming.CompoundName.toString()"
    ],
    "javax.management.openmbean.compositedatasupport.tostring": [
        "javax.management.openmbean.CompositeDataSupport.toString()"
    ],
    "javax.xml.bind.datatypeconverter.printinteger": [
        "javax.xml.bind.DatatypeConverter.printInteger(java.math.BigInteger)"
    ],
    "java.awt.graphicsconfiguration.getcolormodel": [
        "java.awt.GraphicsConfiguration.getColorModel(int)",
        "java.awt.GraphicsConfiguration.getColorModel()"
    ],
    "javax.swing.undo.compoundedit.tostring": [
        "javax.swing.undo.CompoundEdit.toString()"
    ],
    "javax.swing.event.treeselectionevent.isaddedpath": [
        "javax.swing.event.TreeSelectionEvent.isAddedPath(int)",
        "javax.swing.event.TreeSelectionEvent.isAddedPath(javax.swing.tree.TreePath)",
        "javax.swing.event.TreeSelectionEvent.isAddedPath()"
    ],
    "javax.swing.jcheckboxmenuitem.setstate": [
        "javax.swing.JCheckBoxMenuItem.setState(boolean)"
    ],
    "javax.imageio.imagereader.processthumbnailupdate": [
        "javax.imageio.ImageReader.processThumbnailUpdate(java.awt.image.BufferedImage,int,int,int,int,int,int,int[])"
    ],
    "javax.swing.plaf.synth.synthtogglebuttonui.paintborder": [
        "javax.swing.plaf.synth.SynthToggleButtonUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.security.timestamp.getsignercertpath": [
        "java.security.Timestamp.getSignerCertPath()"
    ],
    "javax.swing.text.stringcontent.remove": [
        "javax.swing.text.StringContent.remove(int,int)"
    ],
    "javax.swing.jcomponent.getbaseline": [
        "javax.swing.JComponent.getBaseline(int,int)"
    ],
    "org.omg.dynamicany._dynsequencestub.get_ushort": [
        "org.omg.DynamicAny._DynSequenceStub.get_ushort()"
    ],
    "javax.swing.text.highlighter.highlightpainter.paint": [
        "javax.swing.text.Highlighter.HighlightPainter.paint(java.awt.Graphics,int,int,java.awt.Shape,javax.swing.text.JTextComponent)"
    ],
    "java.lang.invoke.serializedlambda.getcapturedargcount": [
        "java.lang.invoke.SerializedLambda.getCapturedArgCount()"
    ],
    "org.omg.portableinterceptor.clientrequestinfooperations.received_exception": [
        "org.omg.PortableInterceptor.ClientRequestInfoOperations.received_exception()"
    ],
    "java.util.logging.logger.removehandler": [
        "java.util.logging.Logger.removeHandler(java.util.logging.Handler)"
    ],
    "java.awt.image.multipixelpackedsamplemodel.setpixel": [
        "java.awt.image.MultiPixelPackedSampleModel.setPixel(int,int,int[],java.awt.image.DataBuffer)"
    ],
    "java.time.zone.zonerules.equals": [
        "java.time.zone.ZoneRules.equals(java.lang.Object)"
    ],
    "javax.xml.soap.soapheader.extractallheaderelements": [
        "javax.xml.soap.SOAPHeader.extractAllHeaderElements()"
    ],
    "java.security.policy.getparameters": [
        "java.security.Policy.getParameters()"
    ],
    "javax.jws.soap.soapbinding.parameterstyle.values": [
        "javax.jws.soap.SOAPBinding.ParameterStyle.values()"
    ],
    "java.util.stream.longstream.limit": [
        "java.util.stream.LongStream.limit(long)"
    ],
    "javax.swing.text.utilities.getrowend": [
        "javax.swing.text.Utilities.getRowEnd(javax.swing.text.JTextComponent,int)"
    ],
    "java.awt.robot.setautowaitforidle": [
        "java.awt.Robot.setAutoWaitForIdle(boolean)"
    ],
    "javax.xml.crypto.dsig.xmlsignaturefactory.unmarshalxmlsignature": [
        "javax.xml.crypto.dsig.XMLSignatureFactory.unmarshalXMLSignature(javax.xml.crypto.XMLStructure)",
        "javax.xml.crypto.dsig.XMLSignatureFactory.unmarshalXMLSignature(javax.xml.crypto.dsig.XMLValidateContext)"
    ],
    "org.omg.corba.dataoutputstream.write_any": [
        "org.omg.CORBA.DataOutputStream.write_any(org.omg.CORBA.Any)"
    ],
    "javax.naming.event.namingexceptionevent.geteventcontext": [
        "javax.naming.event.NamingExceptionEvent.getEventContext()"
    ],
    "javax.swing.plaf.metal.metaltheme.getcontrolhighlight": [
        "javax.swing.plaf.metal.MetalTheme.getControlHighlight()"
    ],
    "java.sql.resultsetmetadata.isnullable": [
        "java.sql.ResultSetMetaData.isNullable(int)"
    ],
    "javax.lang.model.util.elementkindvisitor6.visittypeasinterface": [
        "javax.lang.model.util.ElementKindVisitor6.visitTypeAsInterface(javax.lang.model.element.TypeElement,javax.lang.model.util.ElementKindVisitor6)"
    ],
    "java.awt.awteventmulticaster.windowdeactivated": [
        "java.awt.AWTEventMulticaster.windowDeactivated(java.awt.event.WindowEvent)"
    ],
    "javax.management.monitor.monitornotification.getderivedgauge": [
        "javax.management.monitor.MonitorNotification.getDerivedGauge()"
    ],
    "javax.management.queryeval.setmbeanserver": [
        "javax.management.QueryEval.setMBeanServer(javax.management.MBeanServer)"
    ],
    "org.omg.corba.dataoutputstream.write_abstract": [
        "org.omg.CORBA.DataOutputStream.write_Abstract(java.lang.Object)"
    ],
    "javax.net.ssl.sslcontextspi.enginegetserversessioncontext": [
        "javax.net.ssl.SSLContextSpi.engineGetServerSessionContext()"
    ],
    "java.awt.scrollbar.getblockincrement": [
        "java.awt.Scrollbar.getBlockIncrement()"
    ],
    "javax.swing.table.jtableheader.gettable": [
        "javax.swing.table.JTableHeader.getTable()"
    ],
    "javax.swing.text.compositeview.getviewindexatposition": [
        "javax.swing.text.CompositeView.getViewIndexAtPosition(int)"
    ],
    "java.lang.double.max": [
        "java.lang.Double.max(double,double)"
    ],
    "javax.xml.bind.datatypeconverter.parseshort": [
        "javax.xml.bind.DatatypeConverter.parseShort(java.lang.String)"
    ],
    "java.util.concurrent.atomic.atomicreferencefieldupdater.newupdater": [
        "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(java.lang.Class<U>,java.lang.Class<W>,java.lang.String)"
    ],
    "javax.xml.crypto.dsig.transformservice.init": [
        "javax.xml.crypto.dsig.TransformService.init(javax.xml.crypto.XMLStructure,javax.xml.crypto.XMLCryptoContext)",
        "javax.xml.crypto.dsig.TransformService.init(javax.xml.crypto.dsig.spec.TransformParameterSpec)"
    ],
    "javax.swing.uimanager.installlookandfeel": [
        "javax.swing.UIManager.installLookAndFeel(java.lang.String,java.lang.String)",
        "javax.swing.UIManager.installLookAndFeel(javax.swing.UIManager.LookAndFeelInfo)"
    ],
    "javax.tools.standardlocation.locationfor": [
        "javax.tools.StandardLocation.locationFor(java.lang.String)"
    ],
    "java.beans.beancontext.beancontextserviceprovider.getcurrentserviceselectors": [
        "java.beans.beancontext.BeanContextServiceProvider.getCurrentServiceSelectors(java.beans.beancontext.BeanContextServices,java.lang.Class)"
    ],
    "org.omg.dynamicany._dynenumstub.insert_octet": [
        "org.omg.DynamicAny._DynEnumStub.insert_octet(byte)"
    ],
    "javax.swing.plaf.metal.metalfilechooserui.createlistselectionlistener": [
        "javax.swing.plaf.metal.MetalFileChooserUI.createListSelectionListener(javax.swing.JFileChooser)"
    ],
    "java.security.algorithmparametergenerator.getalgorithm": [
        "java.security.AlgorithmParameterGenerator.getAlgorithm()"
    ],
    "javax.swing.plaf.multi.multicomboboxui.isfocustraversable": [
        "javax.swing.plaf.multi.MultiComboBoxUI.isFocusTraversable(javax.swing.JComboBox)"
    ],
    "java.awt.image.writableraster.setpixels": [
        "java.awt.image.WritableRaster.setPixels(int,int,int,int,float[])",
        "java.awt.image.WritableRaster.setPixels(int,int,int,int,int[])",
        "java.awt.image.WritableRaster.setPixels(int,int,int,int,double[])"
    ],
    "org.omg.dynamicany._dynanystub.copy": [
        "org.omg.DynamicAny._DynAnyStub.copy()"
    ],
    "java.util.concurrent.completionstage.thenaccept": [
        "java.util.concurrent.CompletionStage.thenAccept(java.util.function.Consumer<? super java.util.concurrent.CompletionStage>)",
        "java.util.concurrent.CompletionStage.thenAccept(java.util.function.Consumer<? super T>)"
    ],
    "java.lang.short.tostring": [
        "java.lang.Short.toString(short)",
        "java.lang.Short.toString()"
    ],
    "java.awt.list.getminimumsize": [
        "java.awt.List.getMinimumSize()",
        "java.awt.List.getMinimumSize(int)"
    ],
    "org.omg.dynamicany._dynsequencestub.insert_typecode": [
        "org.omg.DynamicAny._DynSequenceStub.insert_typecode(org.omg.CORBA.TypeCode)"
    ],
    "javax.swing.jtable.setgridcolor": [
        "javax.swing.JTable.setGridColor(java.awt.Color)"
    ],
    "javax.swing.swingutilities.windowforcomponent": [
        "javax.swing.SwingUtilities.windowForComponent(java.awt.Component)"
    ],
    "javax.swing.undo.stateeditable.storestate": [
        "javax.swing.undo.StateEditable.storeState(,java.lang.Object>)"
    ],
    "javax.swing.jlayeredpane.getobjectforlayer": [
        "javax.swing.JLayeredPane.getObjectForLayer(int)"
    ],
    "java.awt.event.paintevent.getupdaterect": [
        "java.awt.event.PaintEvent.getUpdateRect()"
    ],
    "javax.swing.plaf.multi.multipopupmenuui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiPopupMenuUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "org.w3c.dom.domlocator.geturi": [
        "org.w3c.dom.DOMLocator.getUri()"
    ],
    "java.time.offsettime.get": [
        "java.time.OffsetTime.get(java.time.temporal.TemporalField)"
    ],
    "java.lang.runtime.loadlibrary": [
        "java.lang.Runtime.loadLibrary(java.lang.String)"
    ],
    "javax.net.ssl.sslparameters.getendpointidentificationalgorithm": [
        "javax.net.ssl.SSLParameters.getEndpointIdentificationAlgorithm()"
    ],
    "java.awt.dialog.paramstring": [
        "java.awt.Dialog.paramString()"
    ],
    "java.util.prefs.abstractpreferences.putspi": [
        "java.util.prefs.AbstractPreferences.putSpi(java.lang.String,java.lang.String)"
    ],
    "javax.swing.swingutilities.updatecomponenttreeui": [
        "javax.swing.SwingUtilities.updateComponentTreeUI(java.awt.Component)"
    ],
    "javax.xml.bind.jaxbcontext.createjaxbintrospector": [
        "javax.xml.bind.JAXBContext.createJAXBIntrospector()"
    ],
    "java.awt.desktop.edit": [
        "java.awt.Desktop.edit(java.io.File)"
    ],
    "java.io.objectoutputstream.writeunshared": [
        "java.io.ObjectOutputStream.writeUnshared(java.lang.Object)"
    ],
    "javax.xml.soap.mimeheader.getvalue": [
        "javax.xml.soap.MimeHeader.getValue()"
    ],
    "javax.sound.midi.sequence.getpatchlist": [
        "javax.sound.midi.Sequence.getPatchList()"
    ],
    "javax.rmi.corba.util.registertarget": [
        "javax.rmi.CORBA.Util.registerTarget(javax.rmi.CORBA.Tie,java.rmi.Remote)"
    ],
    "javax.naming.event.namingevent.dispatch": [
        "javax.naming.event.NamingEvent.dispatch(javax.naming.event.NamingListener)"
    ],
    "javax.security.auth.kerberos.kerberosticket.getserver": [
        "javax.security.auth.kerberos.KerberosTicket.getServer()"
    ],
    "javax.management.openmbean.compositedata.values": [
        "javax.management.openmbean.CompositeData.values()"
    ],
    "java.util.optional.of": [
        "java.util.Optional.of(T)"
    ],
    "org.w3c.dom.ls.domimplementationls.createlsserializer": [
        "org.w3c.dom.ls.DOMImplementationLS.createLSSerializer()"
    ],
    "javax.swing.plaf.basic.basicoptionpaneui.uninstallui": [
        "javax.swing.plaf.basic.BasicOptionPaneUI.uninstallUI(javax.swing.JComponent)"
    ],
    "javax.print.attribute.standard.media.getcategory": [
        "javax.print.attribute.standard.Media.getCategory()"
    ],
    "java.time.yearmonth.with": [
        "java.time.YearMonth.with(java.time.temporal.TemporalField,long)",
        "java.time.YearMonth.with(java.time.temporal.TemporalAdjuster)"
    ],
    "java.lang.system.console": [
        "java.lang.System.console()"
    ],
    "java.util.concurrent.locks.abstractqueuedsynchronizer.getqueuelength": [
        "java.util.concurrent.locks.AbstractQueuedSynchronizer.getQueueLength()"
    ],
    "javax.management.loading.mletcontent.getserializedobject": [
        "javax.management.loading.MLetContent.getSerializedObject()"
    ],
    "java.time.temporal.chronounit.values": [
        "java.time.temporal.ChronoUnit.values()"
    ],
    "javax.print.attribute.setofintegersyntax.getmembers": [
        "javax.print.attribute.SetOfIntegerSyntax.getMembers()"
    ],
    "javax.net.ssl.sslengineresult.tostring": [
        "javax.net.ssl.SSLEngineResult.toString()"
    ],
    "java.lang.strictmath.tointexact": [
        "java.lang.StrictMath.toIntExact(long)"
    ],
    "javax.sql.rowset.baserowset.settype": [
        "javax.sql.rowset.BaseRowSet.setType(int)"
    ],
    "javax.xml.transform.transformerexception.getlocator": [
        "javax.xml.transform.TransformerException.getLocator()"
    ],
    "org.omg.corba.portable.outputstream.write_fixed": [
        "org.omg.CORBA.portable.OutputStream.write_fixed(java.math.BigDecimal)"
    ],
    "javax.swing.text.document.insertstring": [
        "javax.swing.text.Document.insertString(int,java.lang.String,javax.swing.text.AttributeSet)"
    ],
    "javax.swing.event.documentlistener.removeupdate": [
        "javax.swing.event.DocumentListener.removeUpdate(javax.swing.event.DocumentEvent)"
    ],
    "javax.sound.midi.midimessage.clone": [
        "javax.sound.midi.MidiMessage.clone()"
    ],
    "javax.swing.abstractbutton.setcontentareafilled": [
        "javax.swing.AbstractButton.setContentAreaFilled(boolean)"
    ],
    "org.omg.dynamicany._dynstructstub.insert_ulonglong": [
        "org.omg.DynamicAny._DynStructStub.insert_ulonglong(long)"
    ],
    "javax.sql.rowset.cachedrowset.setpagesize": [
        "javax.sql.rowset.CachedRowSet.setPageSize(int)"
    ],
    "java.util.scanner.tostring": [
        "java.util.Scanner.toString()"
    ],
    "javax.lang.model.util.elements.getpackageof": [
        "javax.lang.model.util.Elements.getPackageOf(javax.lang.model.element.Element)"
    ],
    "java.net.datagrampacket.setport": [
        "java.net.DatagramPacket.setPort(int)"
    ],
    "javax.management.query.attr": [
        "javax.management.Query.attr(java.lang.String,java.lang.String)",
        "javax.management.Query.attr(java.lang.String)"
    ],
    "java.util.concurrent.concurrentskiplistmap.get": [
        "java.util.concurrent.ConcurrentSkipListMap.get(java.lang.Object)"
    ],
    "java.awt.menushortcut.usesshiftmodifier": [
        "java.awt.MenuShortcut.usesShiftModifier()"
    ],
    "java.time.temporal.temporalunit.issupportedby": [
        "java.time.temporal.TemporalUnit.isSupportedBy(java.time.temporal.Temporal)"
    ],
    "org.w3c.dom.namednodemap.setnameditemns": [
        "org.w3c.dom.NamedNodeMap.setNamedItemNS(org.w3c.dom.Node)"
    ],
    "org.xml.sax.helpers.xmlreaderadapter.skippedentity": [
        "org.xml.sax.helpers.XMLReaderAdapter.skippedEntity(java.lang.String)"
    ],
    "java.awt.image.databuffer.getnumbanks": [
        "java.awt.image.DataBuffer.getNumBanks()"
    ],
    "javax.lang.model.type.declaredtype.gettypearguments": [
        "javax.lang.model.type.DeclaredType.getTypeArguments()"
    ],
    "javax.swing.layoutstyle.componentplacement.values": [
        "javax.swing.LayoutStyle.ComponentPlacement.values()"
    ],
    "org.omg.dynamicany._dynarraystub.get_dyn_any": [
        "org.omg.DynamicAny._DynArrayStub.get_dyn_any()"
    ],
    "java.time.offsettime.truncatedto": [
        "java.time.OffsetTime.truncatedTo(java.time.temporal.TemporalUnit)"
    ],
    "java.awt.container.getcomponentcount": [
        "java.awt.Container.getComponentCount()"
    ],
    "java.net.proxy.type": [
        "java.net.Proxy.type()"
    ],
    "java.sql.databasemetadata.getdatabaseminorversion": [
        "java.sql.DatabaseMetaData.getDatabaseMinorVersion()"
    ],
    "javax.rmi.corba.util.getcodebase": [
        "javax.rmi.CORBA.Util.getCodebase(java.lang.Class)"
    ],
    "java.lang.invoke.switchpoint.invalidateall": [
        "java.lang.invoke.SwitchPoint.invalidateAll(java.lang.invoke.SwitchPoint[])"
    ],
    "java.util.arrays.sort": [
        "java.util.Arrays.sort(double[],int,int)",
        "java.util.Arrays.sort(java.lang.Object,int,int)",
        "java.util.Arrays.sort(T[],java.util.Comparator<? super T>)",
        "java.util.Arrays.sort(short[],int,int)",
        "java.util.Arrays.sort(float[])",
        "java.util.Arrays.sort(java.lang.Object[])",
        "java.util.Arrays.sort(char[])",
        "java.util.Arrays.sort(T[],int,int,java.util.Comparator<? super T>)",
        "java.util.Arrays.sort(short[])",
        "java.util.Arrays.sort(byte[],int,int)",
        "java.util.Arrays.sort(long[],int,int)",
        "java.util.Arrays.sort(java.lang.Object)",
        "java.util.Arrays.sort(float[],int,int)",
        "java.util.Arrays.sort(double[])",
        "java.util.Arrays.sort(int[])",
        "java.util.Arrays.sort(java.lang.Object[],int,int)",
        "java.util.Arrays.sort(char[],int,int)",
        "java.util.Arrays.sort(int[],int,int)",
        "java.util.Arrays.sort(byte[])",
        "java.util.Arrays.sort(long[])"
    ],
    "java.util.arrays.deeptostring": [
        "java.util.Arrays.deepToString(java.lang.Object[])",
        "java.util.Arrays.deepToString(java.lang.Object)"
    ],
    "org.omg.corba.orb.destroy": [
        "org.omg.CORBA.ORB.destroy()"
    ],
    "java.text.decimalformat.getroundingmode": [
        "java.text.DecimalFormat.getRoundingMode()"
    ],
    "java.nio.file.spi.filesystemprovider.installedproviders": [
        "java.nio.file.spi.FileSystemProvider.installedProviders()"
    ],
    "java.time.localtime.plusseconds": [
        "java.time.LocalTime.plusSeconds(long)"
    ],
    "javax.swing.plaf.multi.multidesktoppaneui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiDesktopPaneUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "java.nio.channels.seekablebytechannel.position": [
        "java.nio.channels.SeekableByteChannel.position()",
        "java.nio.channels.SeekableByteChannel.position(long)"
    ],
    "javax.xml.bind.validationeventlocator.getobject": [
        "javax.xml.bind.ValidationEventLocator.getObject()"
    ],
    "java.lang.integer.equals": [
        "java.lang.Integer.equals(java.lang.Object)"
    ],
    "javax.swing.celleditor.removecelleditorlistener": [
        "javax.swing.CellEditor.removeCellEditorListener(javax.swing.event.CellEditorListener)"
    ],
    "java.awt.font.getfont": [
        "java.awt.Font.getFont(java.lang.String,java.awt.Font)",
        "java.awt.Font.getFont(java.lang.String)",
        "java.awt.Font.getFont(java.util.Map<? extends,?>)"
    ],
    "java.awt.geom.cubiccurve2d.getctrly1": [
        "java.awt.geom.CubicCurve2D.getCtrlY1()"
    ],
    "javax.swing.jcolorchooser.setpreviewpanel": [
        "javax.swing.JColorChooser.setPreviewPanel(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.basic.basictreeui.createfocuslistener": [
        "javax.swing.plaf.basic.BasicTreeUI.createFocusListener()"
    ],
    "javax.swing.abstractaction.firepropertychange": [
        "javax.swing.AbstractAction.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)"
    ],
    "javax.script.scriptenginefactory.getlanguageversion": [
        "javax.script.ScriptEngineFactory.getLanguageVersion()"
    ],
    "java.awt.image.convolveop.filter": [
        "java.awt.image.ConvolveOp.filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)",
        "java.awt.image.ConvolveOp.filter(java.awt.image.Raster,java.awt.image.WritableRaster)"
    ],
    "java.lang.invoke.methodhandles.foldarguments": [
        "java.lang.invoke.MethodHandles.foldArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintarrowbuttonborder": [
        "javax.swing.plaf.synth.SynthPainter.paintArrowButtonBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.util.concurrent.threadpoolexecutor.remove": [
        "java.util.concurrent.ThreadPoolExecutor.remove(java.lang.Runnable)"
    ],
    "javax.swing.plaf.synth.synthpanelui.uninstallui": [
        "javax.swing.plaf.synth.SynthPanelUI.uninstallUI(javax.swing.JComponent)"
    ],
    "java.text.stringcharacteriterator.getendindex": [
        "java.text.StringCharacterIterator.getEndIndex()"
    ],
    "javax.swing.text.jtextcomponent.setkeymap": [
        "javax.swing.text.JTextComponent.setKeymap(javax.swing.text.Keymap)"
    ],
    "java.awt.image.lookupop.createcompatibledestraster": [
        "java.awt.image.LookupOp.createCompatibleDestRaster(java.awt.image.Raster)"
    ],
    "java.time.period.multipliedby": [
        "java.time.Period.multipliedBy(int)"
    ],
    "javax.swing.menuselectionmanager.defaultmanager": [
        "javax.swing.MenuSelectionManager.defaultManager()"
    ],
    "java.util.regex.pattern.splitasstream": [
        "java.util.regex.Pattern.splitAsStream(java.lang.CharSequence)"
    ],
    "java.awt.geom.affinetransform.gettype": [
        "java.awt.geom.AffineTransform.getType()"
    ],
    "java.time.offsettime.minusminutes": [
        "java.time.OffsetTime.minusMinutes(long)"
    ],
    "javax.imageio.stream.imageinputstreamimpl.checkclosed": [
        "javax.imageio.stream.ImageInputStreamImpl.checkClosed()"
    ],
    "java.net.url.seturlstreamhandlerfactory": [
        "java.net.URL.setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)"
    ],
    "javax.swing.jinternalframe.fireinternalframeevent": [
        "javax.swing.JInternalFrame.fireInternalFrameEvent(int)"
    ],
    "javax.security.auth.kerberos.kerberosticket.getencoded": [
        "javax.security.auth.kerberos.KerberosTicket.getEncoded()"
    ],
    "javax.swing.text.abstractdocument.attributecontext.addattribute": [
        "javax.swing.text.AbstractDocument.AttributeContext.addAttribute(javax.swing.text.AttributeSet,java.lang.Object,java.lang.Object)"
    ],
    "java.nio.file.path.tofile": [
        "java.nio.file.Path.toFile()"
    ],
    "javax.xml.bind.datatypeconverterinterface.parsedecimal": [
        "javax.xml.bind.DatatypeConverterInterface.parseDecimal(java.lang.String)"
    ],
    "java.awt.graphics.setclip": [
        "java.awt.Graphics.setClip(int,int,int,int)",
        "java.awt.Graphics.setClip(java.awt.Shape)"
    ],
    "javax.swing.text.html.htmldocument.setparser": [
        "javax.swing.text.html.HTMLDocument.setParser(javax.swing.text.html.HTMLEditorKit.Parser)"
    ],
    "java.nio.charset.charset.hashcode": [
        "java.nio.charset.Charset.hashCode()"
    ],
    "org.omg.dynamicany._dynfixedstub.get_wchar": [
        "org.omg.DynamicAny._DynFixedStub.get_wchar()"
    ],
    "javax.sound.sampled.floatcontrol.setvalue": [
        "javax.sound.sampled.FloatControl.setValue(float)"
    ],
    "javax.swing.jtree.getexpandeddescendants": [
        "javax.swing.JTree.getExpandedDescendants(javax.swing.tree.TreePath)"
    ],
    "javax.imageio.spi.iioserviceprovider.onregistration": [
        "javax.imageio.spi.IIOServiceProvider.onRegistration(javax.imageio.spi.ServiceRegistry,java.lang.Class<?>)"
    ],
    "javax.swing.text.internationalformatter.setminimum": [
        "javax.swing.text.InternationalFormatter.setMinimum(java.lang.Comparable)"
    ],
    "javax.xml.ws.endpoint.getbinding": [
        "javax.xml.ws.Endpoint.getBinding()"
    ],
    "java.awt.font.multiplemaster.getdesignaxisranges": [
        "java.awt.font.MultipleMaster.getDesignAxisRanges()"
    ],
    "java.beans.propertyeditor.addpropertychangelistener": [
        "java.beans.PropertyEditor.addPropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "java.awt.graphicsenvironment.registerfont": [
        "java.awt.GraphicsEnvironment.registerFont(java.awt.Font)"
    ],
    "javax.swing.text.glyphview.isunderline": [
        "javax.swing.text.GlyphView.isUnderline()"
    ],
    "java.net.urlclassloader.definepackage": [
        "java.net.URLClassLoader.definePackage(java.lang.String,java.util.jar.Manifest,java.net.URL)"
    ],
    "java.util.locale.filteringmode.values": [
        "java.util.Locale.FilteringMode.values()"
    ],
    "javax.swing.jtogglebutton.togglebuttonmodel.setselected": [
        "javax.swing.JToggleButton.ToggleButtonModel.setSelected(boolean)"
    ],
    "java.awt.graphics2d.shear": [
        "java.awt.Graphics2D.shear(double,double)"
    ],
    "javax.sql.rowset.baserowset.setboolean": [
        "javax.sql.rowset.BaseRowSet.setBoolean(java.lang.String,boolean)",
        "javax.sql.rowset.BaseRowSet.setBoolean(int,boolean)"
    ],
    "java.util.concurrent.locks.abstractqueuedsynchronizer.getexclusivequeuedthreads": [
        "java.util.concurrent.locks.AbstractQueuedSynchronizer.getExclusiveQueuedThreads()"
    ],
    "javax.swing.jwindow.paramstring": [
        "javax.swing.JWindow.paramString()"
    ],
    "java.awt.im.spi.inputmethod.deactivate": [
        "java.awt.im.spi.InputMethod.deactivate(boolean)"
    ],
    "javax.swing.jfilechooser.setfileselectionmode": [
        "javax.swing.JFileChooser.setFileSelectionMode(int)"
    ],
    "org.omg.dynamicany._dynfixedstub.insert_string": [
        "org.omg.DynamicAny._DynFixedStub.insert_string(java.lang.String)"
    ],
    "javax.swing.jfilechooser.getacceptallfilefilter": [
        "javax.swing.JFileChooser.getAcceptAllFileFilter()"
    ],
    "java.awt.image.renderable.renderableimageop.getminy": [
        "java.awt.image.renderable.RenderableImageOp.getMinY()"
    ],
    "java.lang.double.compare": [
        "java.lang.Double.compare(double,double)"
    ],
    "javax.net.ssl.extendedsslsession.getlocalsupportedsignaturealgorithms": [
        "javax.net.ssl.ExtendedSSLSession.getLocalSupportedSignatureAlgorithms()"
    ],
    "javax.swing.abstractcelleditor.addcelleditorlistener": [
        "javax.swing.AbstractCellEditor.addCellEditorListener(javax.swing.event.CellEditorListener)"
    ],
    "javax.net.ssl.handshakecompletedevent.getpeercertificates": [
        "javax.net.ssl.HandshakeCompletedEvent.getPeerCertificates()"
    ],
    "java.util.random.setseed": [
        "java.util.Random.setSeed(long)"
    ],
    "java.nio.channels.asynchronousserversocketchannel.provider": [
        "java.nio.channels.AsynchronousServerSocketChannel.provider()"
    ],
    "javax.swing.plaf.multi.multisplitpaneui.installui": [
        "javax.swing.plaf.multi.MultiSplitPaneUI.installUI(javax.swing.JComponent)"
    ],
    "javax.swing.text.html.imageview.getalignment": [
        "javax.swing.text.html.ImageView.getAlignment(int)"
    ],
    "javax.imageio.event.iioreadupdatelistener.thumbnailpasscomplete": [
        "javax.imageio.event.IIOReadUpdateListener.thumbnailPassComplete(javax.imageio.ImageReader,java.awt.image.BufferedImage)"
    ],
    "javax.swing.table.defaulttablecolumnmodel.recalcwidthcache": [
        "javax.swing.table.DefaultTableColumnModel.recalcWidthCache()"
    ],
    "java.util.prefs.abstractpreferences.syncspi": [
        "java.util.prefs.AbstractPreferences.syncSpi()"
    ],
    "javax.swing.jcombobox.getitemcount": [
        "javax.swing.JComboBox.getItemCount()"
    ],
    "org.ietf.jgss.gsscontext.getdelegcred": [
        "org.ietf.jgss.GSSContext.getDelegCred()"
    ],
    "javax.swing.undo.undoableedit.getpresentationname": [
        "javax.swing.undo.UndoableEdit.getPresentationName()"
    ],
    "java.lang.reflect.annotatedwildcardtype.getannotatedupperbounds": [
        "java.lang.reflect.AnnotatedWildcardType.getAnnotatedUpperBounds()"
    ],
    "javax.swing.jtree.removetreeselectionlistener": [
        "javax.swing.JTree.removeTreeSelectionListener(javax.swing.event.TreeSelectionListener)"
    ],
    "javax.sound.midi.mididevice.getreceivers": [
        "javax.sound.midi.MidiDevice.getReceivers()"
    ],
    "javax.xml.crypto.dsig.reference.gettransforms": [
        "javax.xml.crypto.dsig.Reference.getTransforms()"
    ],
    "javax.print.attribute.standard.printerisacceptingjobs.getname": [
        "javax.print.attribute.standard.PrinterIsAcceptingJobs.getName()"
    ],
    "javax.print.attribute.standard.mediasize.getmediasizeforname": [
        "javax.print.attribute.standard.MediaSize.getMediaSizeForName(javax.print.attribute.standard.MediaSizeName)"
    ],
    "javax.annotation.processing.processor.getsupportedoptions": [
        "javax.annotation.processing.Processor.getSupportedOptions()"
    ],
    "javax.swing.jscrollbar.getunitincrement": [
        "javax.swing.JScrollBar.getUnitIncrement(int)"
    ],
    "java.lang.invoke.volatilecallsite.dynamicinvoker": [
        "java.lang.invoke.VolatileCallSite.dynamicInvoker()"
    ],
    "javax.swing.plaf.synth.synthtableui.paintborder": [
        "javax.swing.plaf.synth.SynthTableUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.plaf.synth.synthbuttonui.paintborder": [
        "javax.swing.plaf.synth.SynthButtonUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.sql.rowset.rowsetfactory.createjoinrowset": [
        "javax.sql.rowset.RowSetFactory.createJoinRowSet()"
    ],
    "javax.imageio.spi.imagereaderwriterspi.getmimetypes": [
        "javax.imageio.spi.ImageReaderWriterSpi.getMIMETypes()"
    ],
    "javax.naming.namingenumeration.close": [
        "javax.naming.NamingEnumeration.close()"
    ],
    "java.text.stringcharacteriterator.clone": [
        "java.text.StringCharacterIterator.clone()"
    ],
    "java.util.date.settime": [
        "java.util.Date.setTime(long)"
    ],
    "java.sql.preparedstatement.setboolean": [
        "java.sql.PreparedStatement.setBoolean(int,boolean)"
    ],
    "java.sql.resultset.updateasciistream": [
        "java.sql.ResultSet.updateAsciiStream(java.lang.String,java.io.InputStream,long)",
        "java.sql.ResultSet.updateAsciiStream(java.lang.String,java.io.InputStream)",
        "java.sql.ResultSet.updateAsciiStream(java.lang.String,java.io.InputStream,int)",
        "java.sql.ResultSet.updateAsciiStream(int,java.io.InputStream,long)",
        "java.sql.ResultSet.updateAsciiStream(int,java.io.InputStream,int)",
        "java.sql.ResultSet.updateAsciiStream(int,java.io.InputStream)"
    ],
    "javax.swing.table.defaulttablemodel.moverow": [
        "javax.swing.table.DefaultTableModel.moveRow(int,int,int)"
    ],
    "java.time.chrono.hijrahdate.getchronology": [
        "java.time.chrono.HijrahDate.getChronology()"
    ],
    "java.awt.container.processcontainerevent": [
        "java.awt.Container.processContainerEvent(java.awt.event.ContainerEvent)"
    ],
    "javax.sound.sampled.audioformat.isbigendian": [
        "javax.sound.sampled.AudioFormat.isBigEndian()"
    ],
    "javax.swing.text.abstractdocument.getstartposition": [
        "javax.swing.text.AbstractDocument.getStartPosition()"
    ],
    "java.security.domaincombiner.combine": [
        "java.security.DomainCombiner.combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])"
    ],
    "javax.swing.timer.setdelay": [
        "javax.swing.Timer.setDelay(int)"
    ],
    "java.lang.classvalue.get": [
        "java.lang.ClassValue.get(java.lang.Class<?>)"
    ],
    "javax.swing.plaf.synth.synthbuttonui.getdefaulticon": [
        "javax.swing.plaf.synth.SynthButtonUI.getDefaultIcon(javax.swing.AbstractButton)"
    ],
    "java.time.chrono.thaibuddhistdate.now": [
        "java.time.chrono.ThaiBuddhistDate.now(java.time.Clock)",
        "java.time.chrono.ThaiBuddhistDate.now(java.time.ZoneId)",
        "java.time.chrono.ThaiBuddhistDate.now()"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.setcatalogname": [
        "javax.sql.rowset.RowSetMetaDataImpl.setCatalogName(int,java.lang.String)"
    ],
    "java.awt.awteventmulticaster.actionperformed": [
        "java.awt.AWTEventMulticaster.actionPerformed(java.awt.event.ActionEvent)"
    ],
    "java.time.format.datetimeformatter.getdecimalstyle": [
        "java.time.format.DateTimeFormatter.getDecimalStyle()"
    ],
    "javax.swing.jtabbedpane.setenabledat": [
        "javax.swing.JTabbedPane.setEnabledAt(int,boolean)"
    ],
    "javax.swing.plaf.basic.basicinternalframeui.getdesktopmanager": [
        "javax.swing.plaf.basic.BasicInternalFrameUI.getDesktopManager()"
    ],
    "java.security.keystore.getcertificatechain": [
        "java.security.KeyStore.getCertificateChain(java.lang.String)"
    ],
    "java.awt.list.getitemlisteners": [
        "java.awt.List.getItemListeners()"
    ],
    "javax.swing.jmenubar.setselected": [
        "javax.swing.JMenuBar.setSelected(java.awt.Component)"
    ],
    "javax.swing.jspinner.defaulteditor.getspinner": [
        "javax.swing.JSpinner.DefaultEditor.getSpinner()"
    ],
    "javax.xml.soap.soapheader.examinemustunderstandheaderelements": [
        "javax.xml.soap.SOAPHeader.examineMustUnderstandHeaderElements(java.lang.String)"
    ],
    "org.omg.dynamicany._dynfixedstub.insert_long": [
        "org.omg.DynamicAny._DynFixedStub.insert_long(int)"
    ],
    "java.beans.featuredescriptor.attributenames": [
        "java.beans.FeatureDescriptor.attributeNames()"
    ],
    "javax.swing.text.html.parser.entity.getstring": [
        "javax.swing.text.html.parser.Entity.getString()"
    ],
    "java.security.cert.certstorespi.enginegetcrls": [
        "java.security.cert.CertStoreSpi.engineGetCRLs(java.security.cert.CRLSelector)"
    ],
    "org.omg.corba.localobject._get_interface_def": [
        "org.omg.CORBA.LocalObject._get_interface_def()"
    ],
    "java.awt.borderlayout.preferredlayoutsize": [
        "java.awt.BorderLayout.preferredLayoutSize(java.awt.Container)"
    ],
    "java.awt.geom.rectangle2d.outcode": [
        "java.awt.geom.Rectangle2D.outcode(java.awt.geom.Point2D)",
        "java.awt.geom.Rectangle2D.outcode(double,double)"
    ],
    "java.beans.propertyeditormanager.seteditorsearchpath": [
        "java.beans.PropertyEditorManager.setEditorSearchPath(java.lang.String[])"
    ],
    "java.text.collationelementiterator.next": [
        "java.text.CollationElementIterator.next()"
    ],
    "javax.xml.stream.xmloutputfactory.getproperty": [
        "javax.xml.stream.XMLOutputFactory.getProperty(java.lang.String)"
    ],
    "javax.swing.plaf.multi.multiprogressbarui.contains": [
        "javax.swing.plaf.multi.MultiProgressBarUI.contains(javax.swing.JComponent,int,int)"
    ],
    "java.rmi.activation.activationgroup.getsystem": [
        "java.rmi.activation.ActivationGroup.getSystem()"
    ],
    "java.lang.number.shortvalue": [
        "java.lang.Number.shortValue()"
    ],
    "java.beans.beancontext.beancontextservicessupport.releaseservice": [
        "java.beans.beancontext.BeanContextServicesSupport.releaseService(java.beans.beancontext.BeanContextChild,java.lang.Object,java.lang.Object)"
    ],
    "javax.swing.debuggraphics.setdebugoptions": [
        "javax.swing.DebugGraphics.setDebugOptions(int)"
    ],
    "java.awt.image.colormodel.getcomponentsize": [
        "java.awt.image.ColorModel.getComponentSize()",
        "java.awt.image.ColorModel.getComponentSize(int)"
    ],
    "javax.swing.tree.defaultmutabletreenode.add": [
        "javax.swing.tree.DefaultMutableTreeNode.add(javax.swing.tree.MutableTreeNode)"
    ],
    "java.util.concurrent.locks.abstractqueuedlongsynchronizer.getsharedqueuedthreads": [
        "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getSharedQueuedThreads()"
    ],
    "java.util.sortedmap.submap": [
        "java.util.SortedMap.subMap(K,K)",
        "java.util.SortedMap.subMap(java.util.SortedMap,java.util.SortedMap)"
    ],
    "javax.swing.jcomponent.setalignmentx": [
        "javax.swing.JComponent.setAlignmentX(float)"
    ],
    "java.awt.datatransfer.dataflavor.ismimetypeserializedobject": [
        "java.awt.datatransfer.DataFlavor.isMimeTypeSerializedObject()"
    ],
    "java.io.datainput.readline": [
        "java.io.DataInput.readLine()"
    ],
    "java.awt.scrollbar.setvisibleamount": [
        "java.awt.Scrollbar.setVisibleAmount(int)"
    ],
    "javax.swing.text.styleconstants.setalignment": [
        "javax.swing.text.StyleConstants.setAlignment(javax.swing.text.MutableAttributeSet,int)"
    ],
    "javax.swing.jinternalframe.movetoback": [
        "javax.swing.JInternalFrame.moveToBack()"
    ],
    "javax.xml.bind.unmarshaller.setlistener": [
        "javax.xml.bind.Unmarshaller.setListener(javax.xml.bind.Unmarshaller.Listener)"
    ],
    "java.awt.image.databufferdouble.getdata": [
        "java.awt.image.DataBufferDouble.getData(int)"
    ],
    "java.util.concurrent.blockingdeque.size": [
        "java.util.concurrent.BlockingDeque.size()"
    ],
    "java.lang.math.tanh": [
        "java.lang.Math.tanh(double)"
    ],
    "javax.rmi.corba.utildelegate.wrapexception": [
        "javax.rmi.CORBA.UtilDelegate.wrapException(java.lang.Throwable)"
    ],
    "java.util.concurrent.countedcompleter.getroot": [
        "java.util.concurrent.CountedCompleter.getRoot()"
    ],
    "java.util.zip.checksum.update": [
        "java.util.zip.Checksum.update(int)",
        "java.util.zip.Checksum.update(byte[],int,int)"
    ],
    "javax.swing.jtable.droplocation.getcolumn": [
        "javax.swing.JTable.DropLocation.getColumn()"
    ],
    "java.net.uri.getschemespecificpart": [
        "java.net.URI.getSchemeSpecificPart()"
    ],
    "java.time.zone.zonerules.getvalidoffsets": [
        "java.time.zone.ZoneRules.getValidOffsets(java.time.LocalDateTime)"
    ],
    "javax.management.relation.roleunresolved.setrolename": [
        "javax.management.relation.RoleUnresolved.setRoleName(java.lang.String)"
    ],
    "java.awt.scrollpane.addnotify": [
        "java.awt.ScrollPane.addNotify()"
    ],
    "javax.swing.text.html.stylesheet.setbase": [
        "javax.swing.text.html.StyleSheet.setBase(java.net.URL)"
    ],
    "javax.crypto.spec.rc5parameterspec.hashcode": [
        "javax.crypto.spec.RC5ParameterSpec.hashCode()"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.isnullable": [
        "javax.sql.rowset.RowSetMetaDataImpl.isNullable(int)"
    ],
    "java.net.socketimpl.shutdowninput": [
        "java.net.SocketImpl.shutdownInput()"
    ],
    "java.util.concurrent.recursivetask.setrawresult": [
        "java.util.concurrent.RecursiveTask.setRawResult(V)"
    ],
    "java.rmi.registry.registry.lookup": [
        "java.rmi.registry.Registry.lookup(java.lang.String)"
    ],
    "javax.swing.jseparator.setui": [
        "javax.swing.JSeparator.setUI(javax.swing.plaf.SeparatorUI)"
    ],
    "java.awt.image.pixelgrabber.getstatus": [
        "java.awt.image.PixelGrabber.getStatus()"
    ],
    "java.awt.image.directcolormodel.getblue": [
        "java.awt.image.DirectColorModel.getBlue(int)",
        "java.awt.image.DirectColorModel.getBlue(java.lang.Object)"
    ],
    "javax.xml.stream.xmlstreamwriter.flush": [
        "javax.xml.stream.XMLStreamWriter.flush()"
    ],
    "javax.swing.plaf.multi.multispinnerui.uninstallui": [
        "javax.swing.plaf.multi.MultiSpinnerUI.uninstallUI(javax.swing.JComponent)"
    ],
    "java.io.file.gettotalspace": [
        "java.io.File.getTotalSpace()"
    ],
    "java.awt.color.icc_colorspace.fromciexyz": [
        "java.awt.color.ICC_ColorSpace.fromCIEXYZ(float[])"
    ],
    "java.awt.image.databuffer.getoffset": [
        "java.awt.image.DataBuffer.getOffset()"
    ],
    "javax.activation.commandinfo.getcommandobject": [
        "javax.activation.CommandInfo.getCommandObject(javax.activation.DataHandler,java.lang.ClassLoader)"
    ],
    "org.omg.portableserver.poaoperations.create_implicit_activation_policy": [
        "org.omg.PortableServer.POAOperations.create_implicit_activation_policy(org.omg.PortableServer.ImplicitActivationPolicyValue)"
    ],
    "java.awt.geom.line2d.float.getbounds2d": [
        "java.awt.geom.Line2D.Float.getBounds2D()"
    ],
    "java.sql.databasemetadata.supportsunionall": [
        "java.sql.DatabaseMetaData.supportsUnionAll()"
    ],
    "java.applet.audioclip.loop": [
        "java.applet.AudioClip.loop()"
    ],
    "java.sql.preparedstatement.setshort": [
        "java.sql.PreparedStatement.setShort(int,short)"
    ],
    "java.time.dayofweek.values": [
        "java.time.DayOfWeek.values()"
    ],
    "javax.sql.rowset.settime": [
        "javax.sql.RowSet.setTime(java.lang.String,java.sql.Time)",
        "javax.sql.RowSet.setTime(int,java.sql.Time,java.util.Calendar)",
        "javax.sql.RowSet.setTime(int,java.sql.Time)",
        "javax.sql.RowSet.setTime(java.lang.String,java.sql.Time,java.util.Calendar)"
    ],
    "java.util.resourcebundle.control.toresourcename": [
        "java.util.ResourceBundle.Control.toResourceName(java.lang.String,java.lang.String)"
    ],
    "javax.swing.jlist.setfixedcellheight": [
        "javax.swing.JList.setFixedCellHeight(int)"
    ],
    "java.awt.container.removecontainerlistener": [
        "java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"
    ],
    "javax.swing.colorchooser.defaultcolorselectionmodel.getchangelisteners": [
        "javax.swing.colorchooser.DefaultColorSelectionModel.getChangeListeners()"
    ],
    "java.time.zoneoffset.ofhours": [
        "java.time.ZoneOffset.ofHours(int)"
    ],
    "java.security.pkcs12attribute.hashcode": [
        "java.security.PKCS12Attribute.hashCode()"
    ],
    "java.security.spec.ecparameterspec.getcurve": [
        "java.security.spec.ECParameterSpec.getCurve()"
    ],
    "javax.security.sasl.sasl.createsaslclient": [
        "javax.security.sasl.Sasl.createSaslClient(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,,?>,javax.security.auth.callback.CallbackHandler)"
    ],
    "javax.swing.jprogressbar.paintborder": [
        "javax.swing.JProgressBar.paintBorder(java.awt.Graphics)"
    ],
    "javax.sql.rowset.serial.serialclob.setcharacterstream": [
        "javax.sql.rowset.serial.SerialClob.setCharacterStream(long)"
    ],
    "javax.management.mbeanserverdelegate.getspecificationversion": [
        "javax.management.MBeanServerDelegate.getSpecificationVersion()"
    ],
    "javax.swing.plaf.multi.multifilechooserui.uninstallui": [
        "javax.swing.plaf.multi.MultiFileChooserUI.uninstallUI(javax.swing.JComponent)"
    ],
    "java.security.cert.certpath.equals": [
        "java.security.cert.CertPath.equals(java.lang.Object)"
    ],
    "java.awt.systemcolor.tostring": [
        "java.awt.SystemColor.toString()"
    ],
    "java.net.datagramsocket.setsotimeout": [
        "java.net.DatagramSocket.setSoTimeout(int)"
    ],
    "javax.swing.text.jtextcomponent.addcaretlistener": [
        "javax.swing.text.JTextComponent.addCaretListener(javax.swing.event.CaretListener)"
    ],
    "java.io.bufferedreader.lines": [
        "java.io.BufferedReader.lines()"
    ],
    "javax.swing.text.mutableattributeset.addattributes": [
        "javax.swing.text.MutableAttributeSet.addAttributes(javax.swing.text.AttributeSet)"
    ],
    "org.omg.portableserver.adapteractivatoroperations.unknown_adapter": [
        "org.omg.PortableServer.AdapterActivatorOperations.unknown_adapter(org.omg.PortableServer.POA,java.lang.String)"
    ],
    "javax.swing.text.compositeview.setparagraphinsets": [
        "javax.swing.text.CompositeView.setParagraphInsets(javax.swing.text.AttributeSet)"
    ],
    "javax.sql.rowsetinternal.getoriginal": [
        "javax.sql.RowSetInternal.getOriginal()"
    ],
    "javax.sound.sampled.spi.audiofilereader.getaudioinputstream": [
        "javax.sound.sampled.spi.AudioFileReader.getAudioInputStream(java.io.InputStream)",
        "javax.sound.sampled.spi.AudioFileReader.getAudioInputStream(java.net.URL)",
        "javax.sound.sampled.spi.AudioFileReader.getAudioInputStream(java.io.File)"
    ],
    "java.io.file.canread": [
        "java.io.File.canRead()"
    ],
    "javax.swing.spring.sum": [
        "javax.swing.Spring.sum(javax.swing.Spring,javax.swing.Spring)"
    ],
    "org.omg.portableinterceptor.clientrequestinfooperations.received_exception_id": [
        "org.omg.PortableInterceptor.ClientRequestInfoOperations.received_exception_id()"
    ],
    "java.sql.databasemetadata.supportssubqueriesinexists": [
        "java.sql.DatabaseMetaData.supportsSubqueriesInExists()"
    ],
    "java.awt.dnd.droptarget.droptargetautoscroller.updatelocation": [
        "java.awt.dnd.DropTarget.DropTargetAutoScroller.updateLocation(java.awt.Point)"
    ],
    "org.omg.dynamicany._dynvaluestub.get_members_as_dyn_any": [
        "org.omg.DynamicAny._DynValueStub.get_members_as_dyn_any()"
    ],
    "java.security.cert.pkixparameters.settargetcertconstraints": [
        "java.security.cert.PKIXParameters.setTargetCertConstraints(java.security.cert.CertSelector)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintmenubarbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintMenuBarBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.sound.sampled.audioformat.encoding.equals": [
        "javax.sound.sampled.AudioFormat.Encoding.equals(java.lang.Object)"
    ],
    "javax.swing.plaf.multi.multilabelui.contains": [
        "javax.swing.plaf.multi.MultiLabelUI.contains(javax.swing.JComponent,int,int)"
    ],
    "java.awt.dialog.setundecorated": [
        "java.awt.Dialog.setUndecorated(boolean)"
    ],
    "javax.security.auth.subject.doas": [
        "javax.security.auth.Subject.doAs(javax.security.auth.Subject,java.security.PrivilegedExceptionAction<T>)",
        "javax.security.auth.Subject.doAs(javax.security.auth.Subject,java.security.PrivilegedAction<T>)"
    ],
    "javax.swing.plaf.multi.multilookandfeel.getid": [
        "javax.swing.plaf.multi.MultiLookAndFeel.getID()"
    ],
    "java.lang.class.isprimitive": [
        "java.lang.Class.isPrimitive()"
    ],
    "java.util.concurrent.arrayblockingqueue.offer": [
        "java.util.concurrent.ArrayBlockingQueue.offer(java.util.concurrent.ArrayBlockingQueue,long,java.util.concurrent.TimeUnit)",
        "java.util.concurrent.ArrayBlockingQueue.offer(E)",
        "java.util.concurrent.ArrayBlockingQueue.offer(E,long,java.util.concurrent.TimeUnit)",
        "java.util.concurrent.ArrayBlockingQueue.offer(java.util.concurrent.ArrayBlockingQueue)"
    ],
    "javax.naming.compositename.hashcode": [
        "javax.naming.CompositeName.hashCode()"
    ],
    "java.security.keystore.loadstoreparameter.getprotectionparameter": [
        "java.security.KeyStore.LoadStoreParameter.getProtectionParameter()"
    ],
    "java.beans.beancontext.beancontextsupport.instantiatechild": [
        "java.beans.beancontext.BeanContextSupport.instantiateChild(java.lang.String)"
    ],
    "java.awt.image.lookupop.gettable": [
        "java.awt.image.LookupOp.getTable()"
    ],
    "java.lang.management.threadmxbean.getthreadcount": [
        "java.lang.management.ThreadMXBean.getThreadCount()"
    ],
    "java.util.zip.zipfile.finalize": [
        "java.util.zip.ZipFile.finalize()"
    ],
    "javax.swing.text.flowview.changedupdate": [
        "javax.swing.text.FlowView.changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "java.time.duration.of": [
        "java.time.Duration.of(long,java.time.temporal.TemporalUnit)"
    ],
    "java.util.calendar.builder.setlenient": [
        "java.util.Calendar.Builder.setLenient(boolean)"
    ],
    "javax.transaction.xa.xid.getbranchqualifier": [
        "javax.transaction.xa.Xid.getBranchQualifier()"
    ],
    "java.util.regex.matcher.replacefirst": [
        "java.util.regex.Matcher.replaceFirst(java.lang.String)"
    ],
    "javax.print.attribute.standard.printquality.getcategory": [
        "javax.print.attribute.standard.PrintQuality.getCategory()"
    ],
    "java.text.collator.compare": [
        "java.text.Collator.compare(java.lang.String,java.lang.String)",
        "java.text.Collator.compare(java.lang.Object,java.lang.Object)"
    ],
    "javax.swing.defaultlistselectionmodel.isleadanchornotificationenabled": [
        "javax.swing.DefaultListSelectionModel.isLeadAnchorNotificationEnabled()"
    ],
    "javax.swing.tree.fixedheightlayoutcache.getvisiblepathsfrom": [
        "javax.swing.tree.FixedHeightLayoutCache.getVisiblePathsFrom(javax.swing.tree.TreePath)"
    ],
    "javax.xml.bind.datatypeconverterinterface.parsedatetime": [
        "javax.xml.bind.DatatypeConverterInterface.parseDateTime(java.lang.String)"
    ],
    "java.awt.font.glyphvector.getglyphposition": [
        "java.awt.font.GlyphVector.getGlyphPosition(int)"
    ],
    "javax.xml.crypto.dsig.transform.getparameterspec": [
        "javax.xml.crypto.dsig.Transform.getParameterSpec()"
    ],
    "java.util.jar.attributes.get": [
        "java.util.jar.Attributes.get(java.lang.Object)"
    ],
    "javax.lang.model.util.typekindvisitor6.visitprimitive": [
        "javax.lang.model.util.TypeKindVisitor6.visitPrimitive(javax.lang.model.type.PrimitiveType,javax.lang.model.util.TypeKindVisitor6)"
    ],
    "javax.swing.plaf.synth.synthstyle.getgraphicsutils": [
        "javax.swing.plaf.synth.SynthStyle.getGraphicsUtils(javax.swing.plaf.synth.SynthContext)"
    ],
    "org.omg.corba.booleanholder._type": [
        "org.omg.CORBA.BooleanHolder._type()"
    ],
    "javax.swing.jsplitpane.setbottomcomponent": [
        "javax.swing.JSplitPane.setBottomComponent(java.awt.Component)"
    ],
    "java.util.vector.elementat": [
        "java.util.Vector.elementAt(int)"
    ],
    "java.awt.image.renderable.rendercontext.settransform": [
        "java.awt.image.renderable.RenderContext.setTransform(java.awt.geom.AffineTransform)"
    ],
    "javax.xml.bind.datatypeconverter.printstring": [
        "javax.xml.bind.DatatypeConverter.printString(java.lang.String)"
    ],
    "javax.activation.mimetype.getprimarytype": [
        "javax.activation.MimeType.getPrimaryType()"
    ],
    "java.util.resourcebundle.control.getcandidatelocales": [
        "java.util.ResourceBundle.Control.getCandidateLocales(java.lang.String,java.util.Locale)"
    ],
    "javax.swing.tree.defaulttreecellrenderer.setopenicon": [
        "javax.swing.tree.DefaultTreeCellRenderer.setOpenIcon(javax.swing.Icon)"
    ],
    "javax.swing.plaf.metal.metaltheme.getprimarycontrolshadow": [
        "javax.swing.plaf.metal.MetalTheme.getPrimaryControlShadow()"
    ],
    "java.awt.geom.affinetransform.settransform": [
        "java.awt.geom.AffineTransform.setTransform(double,double,double,double,double,double)",
        "java.awt.geom.AffineTransform.setTransform(java.awt.geom.AffineTransform)"
    ],
    "java.net.networkinterface.getnetworkinterfaces": [
        "java.net.NetworkInterface.getNetworkInterfaces()"
    ],
    "javax.sql.rowset.baserowset.settime": [
        "javax.sql.rowset.BaseRowSet.setTime(int,java.sql.Time)",
        "javax.sql.rowset.BaseRowSet.setTime(java.lang.String,java.sql.Time)",
        "javax.sql.rowset.BaseRowSet.setTime(int,java.sql.Time,java.util.Calendar)",
        "javax.sql.rowset.BaseRowSet.setTime(java.lang.String,java.sql.Time,java.util.Calendar)"
    ],
    "java.awt.geom.affinetransform.rotate": [
        "java.awt.geom.AffineTransform.rotate(double,double,double,double)",
        "java.awt.geom.AffineTransform.rotate(double,double)",
        "java.awt.geom.AffineTransform.rotate(double,double,double)",
        "java.awt.geom.AffineTransform.rotate(double)"
    ],
    "javax.xml.bind.jaxbelement.setvalue": [
        "javax.xml.bind.JAXBElement.setValue(javax.xml.bind.JAXBElement)"
    ],
    "java.nio.channels.asynchronoussocketchannel.write": [
        "java.nio.channels.AsynchronousSocketChannel.write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,A,,? super A>)",
        "java.nio.channels.AsynchronousSocketChannel.write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,A,,? super A>)"
    ],
    "javax.management.openmbean.tabulardatasupport.equals": [
        "javax.management.openmbean.TabularDataSupport.equals(java.lang.Object)"
    ],
    "java.util.concurrent.threadpoolexecutor.setcorepoolsize": [
        "java.util.concurrent.ThreadPoolExecutor.setCorePoolSize(int)"
    ],
    "javax.activation.activationdataflavor.equals": [
        "javax.activation.ActivationDataFlavor.equals(java.awt.datatransfer.DataFlavor)"
    ],
    "javax.swing.jtree.getrowforpath": [
        "javax.swing.JTree.getRowForPath(javax.swing.tree.TreePath)"
    ],
    "java.awt.checkbox.getcheckboxgroup": [
        "java.awt.Checkbox.getCheckboxGroup()"
    ],
    "javax.swing.plaf.synth.synthbuttonui.getminimumsize": [
        "javax.swing.plaf.synth.SynthButtonUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "java.awt.geom.affinetransform.translate": [
        "java.awt.geom.AffineTransform.translate(double,double)"
    ],
    "javax.imageio.iioimage.setraster": [
        "javax.imageio.IIOImage.setRaster(java.awt.image.Raster)"
    ],
    "javax.sql.rowset.baserowset.removerowsetlistener": [
        "javax.sql.rowset.BaseRowSet.removeRowSetListener(javax.sql.RowSetListener)"
    ],
    "java.awt.image.samplemodel.getsamples": [
        "java.awt.image.SampleModel.getSamples(int,int,int,int,int,double[],java.awt.image.DataBuffer)",
        "java.awt.image.SampleModel.getSamples(int,int,int,int,int,int[],java.awt.image.DataBuffer)",
        "java.awt.image.SampleModel.getSamples(int,int,int,int,int,float[],java.awt.image.DataBuffer)"
    ],
    "java.lang.reflect.typevariable.getbounds": [
        "java.lang.reflect.TypeVariable.getBounds()"
    ],
    "javax.swing.text.paragraphview.flipeastandwestatends": [
        "javax.swing.text.ParagraphView.flipEastAndWestAtEnds(int,javax.swing.text.Position.Bias)"
    ],
    "javax.swing.plaf.metal.defaultmetaltheme.getprimary2": [
        "javax.swing.plaf.metal.DefaultMetalTheme.getPrimary2()"
    ],
    "javax.swing.tree.defaulttreecelleditor.shouldselectcell": [
        "javax.swing.tree.DefaultTreeCellEditor.shouldSelectCell(java.util.EventObject)"
    ],
    "java.time.zone.zonerulesprovider.providezoneids": [
        "java.time.zone.ZoneRulesProvider.provideZoneIds()"
    ],
    "javax.print.attribute.standard.chromaticity.getenumvaluetable": [
        "javax.print.attribute.standard.Chromaticity.getEnumValueTable()"
    ],
    "java.nio.file.attribute.dosfileattributes.issystem": [
        "java.nio.file.attribute.DosFileAttributes.isSystem()"
    ],
    "java.util.regex.matcher.find": [
        "java.util.regex.Matcher.find(int)",
        "java.util.regex.Matcher.find()"
    ],
    "java.awt.frame.settitle": [
        "java.awt.Frame.setTitle(java.lang.String)"
    ],
    "javax.xml.soap.soapelement.removenamespacedeclaration": [
        "javax.xml.soap.SOAPElement.removeNamespaceDeclaration(java.lang.String)"
    ],
    "org.omg.dynamicany.dynanyoperations.get_float": [
        "org.omg.DynamicAny.DynAnyOperations.get_float()"
    ],
    "javax.swing.plaf.multi.multiinternalframeui.createui": [
        "javax.swing.plaf.multi.MultiInternalFrameUI.createUI(javax.swing.JComponent)"
    ],
    "javax.print.attribute.standard.printerstate.getname": [
        "javax.print.attribute.standard.PrinterState.getName()"
    ],
    "javax.swing.text.wrappedplainview.changedupdate": [
        "javax.swing.text.WrappedPlainView.changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "java.sql.sqlinput.readdouble": [
        "java.sql.SQLInput.readDouble()"
    ],
    "java.util.concurrent.linkedblockingdeque.addlast": [
        "java.util.concurrent.LinkedBlockingDeque.addLast(E)"
    ],
    "javax.crypto.exemptionmechanismspi.engineinit": [
        "javax.crypto.ExemptionMechanismSpi.engineInit(java.security.Key,java.security.AlgorithmParameters)",
        "javax.crypto.ExemptionMechanismSpi.engineInit(java.security.Key)",
        "javax.crypto.ExemptionMechanismSpi.engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)"
    ],
    "javax.swing.jtree.getselectionmodel": [
        "javax.swing.JTree.getSelectionModel()"
    ],
    "java.sql.sqlxml.getbinarystream": [
        "java.sql.SQLXML.getBinaryStream()"
    ],
    "java.util.scanner.nextfloat": [
        "java.util.Scanner.nextFloat()"
    ],
    "javax.swing.rowfilter.regexfilter": [
        "javax.swing.RowFilter.regexFilter(java.lang.String,int...)"
    ],
    "org.omg.corba.orb.get_next_response": [
        "org.omg.CORBA.ORB.get_next_response()"
    ],
    "javax.accessibility.accessiblecontext.setaccessibledescription": [
        "javax.accessibility.AccessibleContext.setAccessibleDescription(java.lang.String)"
    ],
    "javax.swing.undo.undomanager.edittobeundone": [
        "javax.swing.undo.UndoManager.editToBeUndone()"
    ],
    "java.beans.beancontext.beancontextchild.getbeancontext": [
        "java.beans.beancontext.BeanContextChild.getBeanContext()"
    ],
    "javax.swing.plaf.multi.multimenubarui.createui": [
        "javax.swing.plaf.multi.MultiMenuBarUI.createUI(javax.swing.JComponent)"
    ],
    "java.util.stream.doublestream.flatmap": [
        "java.util.stream.DoubleStream.flatMap(java.util.function.DoubleFunction<? extends java.util.stream.DoubleStream>)"
    ],
    "javax.swing.plaf.basic.basictableheaderui.getrollovercolumn": [
        "javax.swing.plaf.basic.BasicTableHeaderUI.getRolloverColumn()"
    ],
    "java.time.localtime.plushours": [
        "java.time.LocalTime.plusHours(long)"
    ],
    "javax.swing.jscrollpane.setverticalscrollbarpolicy": [
        "javax.swing.JScrollPane.setVerticalScrollBarPolicy(int)"
    ],
    "java.awt.button.setactioncommand": [
        "java.awt.Button.setActionCommand(java.lang.String)"
    ],
    "javax.swing.buttonmodel.addchangelistener": [
        "javax.swing.ButtonModel.addChangeListener(javax.swing.event.ChangeListener)"
    ],
    "javax.crypto.spec.oaepparameterspec.getpsource": [
        "javax.crypto.spec.OAEPParameterSpec.getPSource()"
    ],
    "javax.swing.plaf.metal.metaltheme.getcontroltextcolor": [
        "javax.swing.plaf.metal.MetalTheme.getControlTextColor()"
    ],
    "javax.swing.jsplitpane.getaccessiblecontext": [
        "javax.swing.JSplitPane.getAccessibleContext()"
    ],
    "javax.swing.jpopupmenu.setselected": [
        "javax.swing.JPopupMenu.setSelected(java.awt.Component)"
    ],
    "javax.xml.datatype.duration.getseconds": [
        "javax.xml.datatype.Duration.getSeconds()"
    ],
    "java.security.spec.ellipticcurve.getseed": [
        "java.security.spec.EllipticCurve.getSeed()"
    ],
    "java.text.messageformat.field.readresolve": [
        "java.text.MessageFormat.Field.readResolve()"
    ],
    "java.util.function.intsupplier.getasint": [
        "java.util.function.IntSupplier.getAsInt()"
    ],
    "org.omg.dynamicany._dynstructstub.get_longlong": [
        "org.omg.DynamicAny._DynStructStub.get_longlong()"
    ],
    "java.awt.im.spi.inputmethod.notifyclientwindowchange": [
        "java.awt.im.spi.InputMethod.notifyClientWindowChange(java.awt.Rectangle)"
    ],
    "java.security.acl.aclentry.addpermission": [
        "java.security.acl.AclEntry.addPermission(java.security.acl.Permission)"
    ],
    "javax.swing.plaf.multi.multiviewportui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiViewportUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "java.util.logging.level.intvalue": [
        "java.util.logging.Level.intValue()"
    ],
    "java.awt.pageattributes.setorientationrequested": [
        "java.awt.PageAttributes.setOrientationRequested(java.awt.PageAttributes.OrientationRequestedType)",
        "java.awt.PageAttributes.setOrientationRequested(int)"
    ],
    "javax.xml.bind.datatypeconverterinterface.printunsignedint": [
        "javax.xml.bind.DatatypeConverterInterface.printUnsignedInt(long)"
    ],
    "javax.accessibility.accessibletext.getatindex": [
        "javax.accessibility.AccessibleText.getAtIndex(int,int)"
    ],
    "java.nio.file.simplefilevisitor.postvisitdirectory": [
        "java.nio.file.SimpleFileVisitor.postVisitDirectory(java.nio.file.SimpleFileVisitor,java.io.IOException)",
        "java.nio.file.SimpleFileVisitor.postVisitDirectory(T,java.io.IOException)"
    ],
    "javax.security.auth.kerberos.delegationpermission.equals": [
        "javax.security.auth.kerberos.DelegationPermission.equals(java.lang.Object)"
    ],
    "javax.sound.midi.sequencer.getmastersyncmode": [
        "javax.sound.midi.Sequencer.getMasterSyncMode()"
    ],
    "javax.swing.text.html.paragraphview.setpropertiesfromattributes": [
        "javax.swing.text.html.ParagraphView.setPropertiesFromAttributes()"
    ],
    "javax.swing.border.titledborder.getborderinsets": [
        "javax.swing.border.TitledBorder.getBorderInsets(java.awt.Component,java.awt.Insets)"
    ],
    "javax.swing.rowfilter.orfilter": [
        "javax.swing.RowFilter.orFilter(java.lang.Iterable<? extends javax.swing.RowFilter<? super,? super I>>)"
    ],
    "java.applet.appletstub.getcodebase": [
        "java.applet.AppletStub.getCodeBase()"
    ],
    "javax.xml.xpath.xpathvariableresolver.resolvevariable": [
        "javax.xml.xpath.XPathVariableResolver.resolveVariable(javax.xml.namespace.QName)"
    ],
    "javax.swing.jsplitpane.setlastdividerlocation": [
        "javax.swing.JSplitPane.setLastDividerLocation(int)"
    ],
    "javax.swing.text.glyphview.getpreferredspan": [
        "javax.swing.text.GlyphView.getPreferredSpan(int)"
    ],
    "java.util.arraylist.addall": [
        "java.util.ArrayList.addAll(int,java.util.Collection<? extends java.util.ArrayList>)",
        "java.util.ArrayList.addAll(java.util.Collection<? extends E>)",
        "java.util.ArrayList.addAll(int,java.util.Collection<? extends E>)",
        "java.util.ArrayList.addAll(java.util.Collection<? extends java.util.ArrayList>)"
    ],
    "javax.xml.crypto.dsig.dom.domvalidatecontext.getnode": [
        "javax.xml.crypto.dsig.dom.DOMValidateContext.getNode()"
    ],
    "java.awt.image.indexcolormodel.getdataelement": [
        "java.awt.image.IndexColorModel.getDataElement(int[],int)"
    ],
    "java.util.concurrent.concurrentmap.replaceall": [
        "java.util.concurrent.ConcurrentMap.replaceAll(java.util.function.BiFunction<? super,? super,? extends java.util.concurrent.ConcurrentMap>)",
        "java.util.concurrent.ConcurrentMap.replaceAll(java.util.function.BiFunction<? super,? super,? extends V>)"
    ],
    "java.util.navigableset.headset": [
        "java.util.NavigableSet.headSet(java.util.NavigableSet)",
        "java.util.NavigableSet.headSet(E)"
    ],
    "javax.swing.plaf.synth.synthbuttonui.getsizingicon": [
        "javax.swing.plaf.synth.SynthButtonUI.getSizingIcon(javax.swing.AbstractButton)"
    ],
    "java.awt.geom.ellipse2d.double.getbounds2d": [
        "java.awt.geom.Ellipse2D.Double.getBounds2D()"
    ],
    "java.sql.callablestatement.getclob": [
        "java.sql.CallableStatement.getClob(int)",
        "java.sql.CallableStatement.getClob(java.lang.String)"
    ],
    "javax.swing.jtextarea.getaccessiblecontext": [
        "javax.swing.JTextArea.getAccessibleContext()"
    ],
    "java.net.datagramsocketimpl.close": [
        "java.net.DatagramSocketImpl.close()"
    ],
    "javax.imageio.spi.serviceregistry.getserviceproviderbyclass": [
        "javax.imageio.spi.ServiceRegistry.getServiceProviderByClass(java.lang.Class<T>)"
    ],
    "java.awt.geom.ellipse2d.float.getx": [
        "java.awt.geom.Ellipse2D.Float.getX()"
    ],
    "java.lang.management.runtimemxbean.getspecname": [
        "java.lang.management.RuntimeMXBean.getSpecName()"
    ],
    "java.lang.byte.tounsignedlong": [
        "java.lang.Byte.toUnsignedLong(byte)"
    ],
    "javax.naming.namingexception.getresolvedobj": [
        "javax.naming.NamingException.getResolvedObj()"
    ],
    "javax.sound.midi.midichannel.setomni": [
        "javax.sound.midi.MidiChannel.setOmni(boolean)"
    ],
    "org.omg.corba.typecode.default_index": [
        "org.omg.CORBA.TypeCode.default_index()"
    ],
    "javax.swing.text.flowview.flowstrategy.insertupdate": [
        "javax.swing.text.FlowView.FlowStrategy.insertUpdate(javax.swing.text.FlowView,javax.swing.event.DocumentEvent,java.awt.Rectangle)"
    ],
    "javax.swing.jtable.createdefaulteditors": [
        "javax.swing.JTable.createDefaultEditors()"
    ],
    "javax.swing.plaf.basic.basicspinnerui.uninstalldefaults": [
        "javax.swing.plaf.basic.BasicSpinnerUI.uninstallDefaults()"
    ],
    "java.lang.strictmath.toradians": [
        "java.lang.StrictMath.toRadians(double)"
    ],
    "javax.swing.tree.defaultmutabletreenode.getroot": [
        "javax.swing.tree.DefaultMutableTreeNode.getRoot()"
    ],
    "javax.xml.bind.datatypeconverter.parsetime": [
        "javax.xml.bind.DatatypeConverter.parseTime(java.lang.String)"
    ],
    "javax.swing.plaf.multi.multilistui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiListUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "org.omg.portableserver.servant._this_object": [
        "org.omg.PortableServer.Servant._this_object(org.omg.CORBA.ORB)",
        "org.omg.PortableServer.Servant._this_object()"
    ],
    "javax.sound.sampled.mixer.info.tostring": [
        "javax.sound.sampled.Mixer.Info.toString()"
    ],
    "java.awt.geom.quadcurve2d.float.getp2": [
        "java.awt.geom.QuadCurve2D.Float.getP2()"
    ],
    "javax.swing.borderfactory.createbevelborder": [
        "javax.swing.BorderFactory.createBevelBorder(int)",
        "javax.swing.BorderFactory.createBevelBorder(int,java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Color)",
        "javax.swing.BorderFactory.createBevelBorder(int,java.awt.Color,java.awt.Color)"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.updateleadindex": [
        "javax.swing.tree.DefaultTreeSelectionModel.updateLeadIndex()"
    ],
    "org.omg.dynamicany.dynvalueboxoperations.set_boxed_value_as_dyn_any": [
        "org.omg.DynamicAny.DynValueBoxOperations.set_boxed_value_as_dyn_any(org.omg.DynamicAny.DynAny)"
    ],
    "javax.print.simpledoc.getdocflavor": [
        "javax.print.SimpleDoc.getDocFlavor()"
    ],
    "java.awt.button.addnotify": [
        "java.awt.Button.addNotify()"
    ],
    "java.awt.font.glyphvector.getglyphoutline": [
        "java.awt.font.GlyphVector.getGlyphOutline(int)",
        "java.awt.font.GlyphVector.getGlyphOutline(int,float,float)"
    ],
    "javax.sound.sampled.audiosystem.getaudiofileformat": [
        "javax.sound.sampled.AudioSystem.getAudioFileFormat(java.io.File)",
        "javax.sound.sampled.AudioSystem.getAudioFileFormat(java.net.URL)",
        "javax.sound.sampled.AudioSystem.getAudioFileFormat(java.io.InputStream)"
    ],
    "javax.management.monitor.countermonitormbean.setmodulus": [
        "javax.management.monitor.CounterMonitorMBean.setModulus(java.lang.Number)"
    ],
    "javax.swing.jmenuitem.setaccelerator": [
        "javax.swing.JMenuItem.setAccelerator(javax.swing.KeyStroke)"
    ],
    "org.omg.dynamicany._dynarraystub.insert_long": [
        "org.omg.DynamicAny._DynArrayStub.insert_long(int)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getmenuselectedforeground": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getMenuSelectedForeground()"
    ],
    "javax.swing.abstractlistmodel.addlistdatalistener": [
        "javax.swing.AbstractListModel.addListDataListener(javax.swing.event.ListDataListener)"
    ],
    "org.w3c.dom.attr.getschematypeinfo": [
        "org.w3c.dom.Attr.getSchemaTypeInfo()"
    ],
    "javax.swing.plaf.multi.multitabbedpaneui.getuis": [
        "javax.swing.plaf.multi.MultiTabbedPaneUI.getUIs()"
    ],
    "javax.swing.jformattedtextfield.abstractformatter.invalidedit": [
        "javax.swing.JFormattedTextField.AbstractFormatter.invalidEdit()"
    ],
    "java.awt.geom.line2d.getx1": [
        "java.awt.geom.Line2D.getX1()"
    ],
    "javax.imageio.stream.imageinputstream.mark": [
        "javax.imageio.stream.ImageInputStream.mark()"
    ],
    "java.awt.geom.rectangle2d.float.createintersection": [
        "java.awt.geom.Rectangle2D.Float.createIntersection(java.awt.geom.Rectangle2D)"
    ],
    "javax.swing.plaf.synth.synthspinnerui.createnextbutton": [
        "javax.swing.plaf.synth.SynthSpinnerUI.createNextButton()"
    ],
    "javax.xml.transform.transformer.seturiresolver": [
        "javax.xml.transform.Transformer.setURIResolver(javax.xml.transform.URIResolver)"
    ],
    "javax.sql.rowsetmetadata.setcolumntype": [
        "javax.sql.RowSetMetaData.setColumnType(int,int)"
    ],
    "javax.swing.plaf.synth.synthsliderui.getbaseline": [
        "javax.swing.plaf.synth.SynthSliderUI.getBaseline(javax.swing.JComponent,int,int)"
    ],
    "javax.net.ssl.sslsession.getvaluenames": [
        "javax.net.ssl.SSLSession.getValueNames()"
    ],
    "javax.naming.reference.getall": [
        "javax.naming.Reference.getAll()"
    ],
    "java.awt.image.bufferedimage.addtileobserver": [
        "java.awt.image.BufferedImage.addTileObserver(java.awt.image.TileObserver)"
    ],
    "javax.swing.jlabel.getverticalalignment": [
        "javax.swing.JLabel.getVerticalAlignment()"
    ],
    "java.time.temporal.temporalunit.istimebased": [
        "java.time.temporal.TemporalUnit.isTimeBased()"
    ],
    "javax.sound.sampled.audiosystem.isfiletypesupported": [
        "javax.sound.sampled.AudioSystem.isFileTypeSupported(javax.sound.sampled.AudioFileFormat.Type,javax.sound.sampled.AudioInputStream)",
        "javax.sound.sampled.AudioSystem.isFileTypeSupported(javax.sound.sampled.AudioFileFormat.Type)"
    ],
    "java.lang.strictmath.nextafter": [
        "java.lang.StrictMath.nextAfter(float,double)",
        "java.lang.StrictMath.nextAfter(double,double)"
    ],
    "java.rmi.activation.activationgroupdesc.commandenvironment.equals": [
        "java.rmi.activation.ActivationGroupDesc.CommandEnvironment.equals(java.lang.Object)"
    ],
    "java.time.localtime.from": [
        "java.time.LocalTime.from(java.time.temporal.TemporalAccessor)"
    ],
    "org.omg.dynamicany._dynanystub.insert_short": [
        "org.omg.DynamicAny._DynAnyStub.insert_short(short)"
    ],
    "org.omg.iop.codecoperations.decode_value": [
        "org.omg.IOP.CodecOperations.decode_value(byte[],org.omg.CORBA.TypeCode)"
    ],
    "javax.swing.listselectionmodel.setvalueisadjusting": [
        "javax.swing.ListSelectionModel.setValueIsAdjusting(boolean)"
    ],
    "java.sql.preparedstatement.settime": [
        "java.sql.PreparedStatement.setTime(int,java.sql.Time)",
        "java.sql.PreparedStatement.setTime(int,java.sql.Time,java.util.Calendar)"
    ],
    "javax.print.attribute.hashattributeset.remove": [
        "javax.print.attribute.HashAttributeSet.remove(java.lang.Class<?>)",
        "javax.print.attribute.HashAttributeSet.remove(javax.print.attribute.Attribute)"
    ],
    "java.util.collections.checkedmap": [
        "java.util.Collections.checkedMap(,V>,java.lang.Class<K>,java.lang.Class<V>)"
    ],
    "javax.xml.soap.soapelement.getallattributes": [
        "javax.xml.soap.SOAPElement.getAllAttributes()"
    ],
    "java.security.cert.certpath.getcertificates": [
        "java.security.cert.CertPath.getCertificates()"
    ],
    "java.math.biginteger.abs": [
        "java.math.BigInteger.abs()"
    ],
    "java.sql.callablestatement.seturl": [
        "java.sql.CallableStatement.setURL(java.lang.String,java.net.URL)"
    ],
    "org.omg.portableinterceptor.serverrequestinfooperations.get_server_policy": [
        "org.omg.PortableInterceptor.ServerRequestInfoOperations.get_server_policy(int)"
    ],
    "javax.sound.midi.midifileformat.properties": [
        "javax.sound.midi.MidiFileFormat.properties()"
    ],
    "java.util.collections.singletonmap": [
        "java.util.Collections.singletonMap(K,V)"
    ],
    "javax.swing.plaf.multi.multitoolbarui.contains": [
        "javax.swing.plaf.multi.MultiToolBarUI.contains(javax.swing.JComponent,int,int)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintoptionpaneborder": [
        "javax.swing.plaf.synth.SynthPainter.paintOptionPaneBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.colorchooser.defaultcolorselectionmodel.addchangelistener": [
        "javax.swing.colorchooser.DefaultColorSelectionModel.addChangeListener(javax.swing.event.ChangeListener)"
    ],
    "java.security.acl.acl.getname": [
        "java.security.acl.Acl.getName()"
    ],
    "java.security.cert.pkixcertpathbuilderresult.tostring": [
        "java.security.cert.PKIXCertPathBuilderResult.toString()"
    ],
    "java.lang.thread.getallstacktraces": [
        "java.lang.Thread.getAllStackTraces()"
    ],
    "java.util.zip.zipinputstream.createzipentry": [
        "java.util.zip.ZipInputStream.createZipEntry(java.lang.String)"
    ],
    "java.awt.adjustable.getminimum": [
        "java.awt.Adjustable.getMinimum()"
    ],
    "java.security.cert.x509certificate.getserialnumber": [
        "java.security.cert.X509Certificate.getSerialNumber()"
    ],
    "java.awt.flowlayout.getalignment": [
        "java.awt.FlowLayout.getAlignment()"
    ],
    "java.util.logging.logger.gethandlers": [
        "java.util.logging.Logger.getHandlers()"
    ],
    "javax.swing.plaf.basic.basicsplitpanedivider.createrightonetouchbutton": [
        "javax.swing.plaf.basic.BasicSplitPaneDivider.createRightOneTouchButton()"
    ],
    "javax.swing.joptionpane.setwantsinput": [
        "javax.swing.JOptionPane.setWantsInput(boolean)"
    ],
    "java.util.logging.logger.info": [
        "java.util.logging.Logger.info(java.util.function.Supplier<java.lang.String>)",
        "java.util.logging.Logger.info(java.lang.String)"
    ],
    "java.util.linkedlist.pop": [
        "java.util.LinkedList.pop()"
    ],
    "java.util.simpletimezone.setstartrule": [
        "java.util.SimpleTimeZone.setStartRule(int,int,int,int)",
        "java.util.SimpleTimeZone.setStartRule(int,int,int)",
        "java.util.SimpleTimeZone.setStartRule(int,int,int,int,boolean)"
    ],
    "javax.swing.tree.defaultmutabletreenode.getfirstchild": [
        "javax.swing.tree.DefaultMutableTreeNode.getFirstChild()"
    ],
    "javax.xml.ws.spi.http.httpexchange.isuserinrole": [
        "javax.xml.ws.spi.http.HttpExchange.isUserInRole(java.lang.String)"
    ],
    "javax.sql.rowset.joinrowset.addrowset": [
        "javax.sql.rowset.JoinRowSet.addRowSet(javax.sql.rowset.Joinable)",
        "javax.sql.rowset.JoinRowSet.addRowSet(javax.sql.RowSet,java.lang.String)",
        "javax.sql.rowset.JoinRowSet.addRowSet(javax.sql.RowSet[],int[])",
        "javax.sql.rowset.JoinRowSet.addRowSet(javax.sql.RowSet[],java.lang.String[])",
        "javax.sql.rowset.JoinRowSet.addRowSet(javax.sql.RowSet,int)"
    ],
    "java.nio.doublebuffer.asreadonlybuffer": [
        "java.nio.DoubleBuffer.asReadOnlyBuffer()"
    ],
    "java.nio.channels.socketchannel.getlocaladdress": [
        "java.nio.channels.SocketChannel.getLocalAddress()"
    ],
    "java.util.logging.logger.fine": [
        "java.util.logging.Logger.fine(java.lang.String)",
        "java.util.logging.Logger.fine(java.util.function.Supplier<java.lang.String>)"
    ],
    "java.util.concurrent.scheduledthreadpoolexecutor.getremoveoncancelpolicy": [
        "java.util.concurrent.ScheduledThreadPoolExecutor.getRemoveOnCancelPolicy()"
    ],
    "java.util.timertask.scheduledexecutiontime": [
        "java.util.TimerTask.scheduledExecutionTime()"
    ],
    "javax.management.monitor.gaugemonitor.getlowthreshold": [
        "javax.management.monitor.GaugeMonitor.getLowThreshold()"
    ],
    "java.nio.file.path.getname": [
        "java.nio.file.Path.getName(int)"
    ],
    "java.awt.font.textlayout.getascent": [
        "java.awt.font.TextLayout.getAscent()"
    ],
    "javax.swing.jlabel.geticontextgap": [
        "javax.swing.JLabel.getIconTextGap()"
    ],
    "javax.imageio.plugins.jpeg.jpegimagewriteparam.setoptimizehuffmantables": [
        "javax.imageio.plugins.jpeg.JPEGImageWriteParam.setOptimizeHuffmanTables(boolean)"
    ],
    "javax.sound.sampled.audioformat.tostring": [
        "javax.sound.sampled.AudioFormat.toString()"
    ],
    "javax.swing.plaf.basic.basicspinnerui.createpreviousbutton": [
        "javax.swing.plaf.basic.BasicSpinnerUI.createPreviousButton()"
    ],
    "java.awt.color.colorspace.getname": [
        "java.awt.color.ColorSpace.getName(int)"
    ],
    "java.sql.preparedstatement.setobject": [
        "java.sql.PreparedStatement.setObject(int,java.lang.Object,int,int)",
        "java.sql.PreparedStatement.setObject(int,java.lang.Object,int)",
        "java.sql.PreparedStatement.setObject(int,java.lang.Object,java.sql.SQLType)",
        "java.sql.PreparedStatement.setObject(int,java.lang.Object)",
        "java.sql.PreparedStatement.setObject(int,java.lang.Object,java.sql.SQLType,int)"
    ],
    "java.time.localdate.getmonth": [
        "java.time.LocalDate.getMonth()"
    ],
    "javax.swing.jmenu.firemenuselected": [
        "javax.swing.JMenu.fireMenuSelected()"
    ],
    "java.util.queue.peek": [
        "java.util.Queue.peek()"
    ],
    "org.omg.corba.portable.inputstream.read_double_array": [
        "org.omg.CORBA.portable.InputStream.read_double_array(double[],int,int)"
    ],
    "javax.print.attribute.standard.mediatray.getenumvaluetable": [
        "javax.print.attribute.standard.MediaTray.getEnumValueTable()"
    ],
    "javax.swing.jtoolbar.setrollover": [
        "javax.swing.JToolBar.setRollover(boolean)"
    ],
    "javax.swing.border.titledborder.gettitle": [
        "javax.swing.border.TitledBorder.getTitle()"
    ],
    "javax.xml.stream.xmleventfactory.createprocessinginstruction": [
        "javax.xml.stream.XMLEventFactory.createProcessingInstruction(java.lang.String,java.lang.String)"
    ],
    "java.awt.awteventmulticaster.ancestormoved": [
        "java.awt.AWTEventMulticaster.ancestorMoved(java.awt.event.HierarchyEvent)"
    ],
    "javax.swing.plaf.synth.synthcomboboxui.uninstalllisteners": [
        "javax.swing.plaf.synth.SynthComboBoxUI.uninstallListeners()"
    ],
    "java.awt.image.bufferedimage.getsubimage": [
        "java.awt.image.BufferedImage.getSubimage(int,int,int,int)"
    ],
    "java.util.intsummarystatistics.getaverage": [
        "java.util.IntSummaryStatistics.getAverage()"
    ],
    "java.util.locale.builder.setscript": [
        "java.util.Locale.Builder.setScript(java.lang.String)"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.getyear": [
        "javax.xml.datatype.XMLGregorianCalendar.getYear()"
    ],
    "java.time.duration.minusdays": [
        "java.time.Duration.minusDays(long)"
    ],
    "java.text.decimalformatsymbols.getdigit": [
        "java.text.DecimalFormatSymbols.getDigit()"
    ],
    "javax.swing.plaf.multi.multiscrollbarui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiScrollBarUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "org.omg.portableinterceptor.orbinitinfooperations.add_ior_interceptor": [
        "org.omg.PortableInterceptor.ORBInitInfoOperations.add_ior_interceptor(org.omg.PortableInterceptor.IORInterceptor)"
    ],
    "java.nio.file.filesystem.close": [
        "java.nio.file.FileSystem.close()"
    ],
    "javax.swing.buttonmodel.setrollover": [
        "javax.swing.ButtonModel.setRollover(boolean)"
    ],
    "javax.sql.statementeventlistener.statementerroroccurred": [
        "javax.sql.StatementEventListener.statementErrorOccurred(javax.sql.StatementEvent)"
    ],
    "java.util.concurrent.concurrentlinkeddeque.removefirstoccurrence": [
        "java.util.concurrent.ConcurrentLinkedDeque.removeFirstOccurrence(java.lang.Object)"
    ],
    "java.nio.charset.spi.charsetprovider.charsetforname": [
        "java.nio.charset.spi.CharsetProvider.charsetForName(java.lang.String)"
    ],
    "javax.swing.jtree.addtreeexpansionlistener": [
        "javax.swing.JTree.addTreeExpansionListener(javax.swing.event.TreeExpansionListener)"
    ],
    "java.awt.mediatracker.statusid": [
        "java.awt.MediaTracker.statusID(int,boolean)"
    ],
    "java.lang.reflect.method.togenericstring": [
        "java.lang.reflect.Method.toGenericString()"
    ],
    "javax.swing.plaf.multi.multitableheaderui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiTableHeaderUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "java.security.spec.rsaprivatecrtkeyspec.getpublicexponent": [
        "java.security.spec.RSAPrivateCrtKeySpec.getPublicExponent()"
    ],
    "javax.rmi.corba.utildelegate.writeremoteobject": [
        "javax.rmi.CORBA.UtilDelegate.writeRemoteObject(org.omg.CORBA.portable.OutputStream,java.lang.Object)"
    ],
    "javax.management.openmbean.tabulardata.gettabulartype": [
        "javax.management.openmbean.TabularData.getTabularType()"
    ],
    "javax.swing.jmenubar.updateui": [
        "javax.swing.JMenuBar.updateUI()"
    ],
    "java.time.localdate.getchronology": [
        "java.time.LocalDate.getChronology()"
    ],
    "java.lang.securitymanager.checkdelete": [
        "java.lang.SecurityManager.checkDelete(java.lang.String)"
    ],
    "javax.swing.jpasswordfield.getuiclassid": [
        "javax.swing.JPasswordField.getUIClassID()"
    ],
    "java.util.stream.doublestream.nonematch": [
        "java.util.stream.DoubleStream.noneMatch(java.util.function.DoublePredicate)"
    ],
    "java.security.cert.pkixcertpathchecker.isforwardcheckingsupported": [
        "java.security.cert.PKIXCertPathChecker.isForwardCheckingSupported()"
    ],
    "javax.swing.tree.treeselectionmodel.setselectionpath": [
        "javax.swing.tree.TreeSelectionModel.setSelectionPath(javax.swing.tree.TreePath)"
    ],
    "java.util.eventobject.getsource": [
        "java.util.EventObject.getSource()"
    ],
    "java.awt.gridbaglayout.getlayoutalignmenty": [
        "java.awt.GridBagLayout.getLayoutAlignmentY(java.awt.Container)"
    ],
    "javax.swing.text.plaindocument.getdefaultrootelement": [
        "javax.swing.text.PlainDocument.getDefaultRootElement()"
    ],
    "java.time.duration.ofdays": [
        "java.time.Duration.ofDays(long)"
    ],
    "java.lang.thread.state.valueof": [
        "java.lang.Thread.State.valueOf(java.lang.String)"
    ],
    "java.time.zone.zonerules.gettransitionrules": [
        "java.time.zone.ZoneRules.getTransitionRules()"
    ],
    "java.util.function.biconsumer.andthen": [
        "java.util.function.BiConsumer.andThen(java.util.function.BiConsumer<? super,? super U>)",
        "java.util.function.BiConsumer.andThen(java.util.function.BiConsumer<? super,? super java.util.function.BiConsumer>)"
    ],
    "javax.naming.directory.attribute.clone": [
        "javax.naming.directory.Attribute.clone()"
    ],
    "javax.swing.plaf.metal.metaltogglebuttonui.painticon": [
        "javax.swing.plaf.metal.MetalToggleButtonUI.paintIcon(java.awt.Graphics,javax.swing.AbstractButton,java.awt.Rectangle)"
    ],
    "java.awt.image.colorconvertop.filter": [
        "java.awt.image.ColorConvertOp.filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)",
        "java.awt.image.ColorConvertOp.filter(java.awt.image.Raster,java.awt.image.WritableRaster)"
    ],
    "javax.swing.text.tabset.hashcode": [
        "javax.swing.text.TabSet.hashCode()"
    ],
    "javax.swing.springlayout.constraints.sety": [
        "javax.swing.SpringLayout.Constraints.setY(javax.swing.Spring)"
    ],
    "javax.swing.tree.treeselectionmodel.getselectionpath": [
        "javax.swing.tree.TreeSelectionModel.getSelectionPath()"
    ],
    "javax.management.remote.jmxconnector.connect": [
        "javax.management.remote.JMXConnector.connect(,?>)",
        "javax.management.remote.JMXConnector.connect()"
    ],
    "java.util.map.entryset": [
        "java.util.Map.entrySet()"
    ],
    "java.util.stream.stream.builder.build": [
        "java.util.stream.Stream.Builder.build()"
    ],
    "javax.sound.midi.mididevice.close": [
        "javax.sound.midi.MidiDevice.close()"
    ],
    "java.beans.beandescriptor.getbeanclass": [
        "java.beans.BeanDescriptor.getBeanClass()"
    ],
    "javax.swing.text.componentview.setparent": [
        "javax.swing.text.ComponentView.setParent(javax.swing.text.View)"
    ],
    "javax.swing.buttonmodel.setselected": [
        "javax.swing.ButtonModel.setSelected(boolean)"
    ],
    "javax.swing.borderfactory.createraisedbevelborder": [
        "javax.swing.BorderFactory.createRaisedBevelBorder()"
    ],
    "javax.swing.jtree.getcelleditor": [
        "javax.swing.JTree.getCellEditor()"
    ],
    "javax.xml.ws.handler.messagecontext.scope.values": [
        "javax.xml.ws.handler.MessageContext.Scope.values()"
    ],
    "javax.swing.jtable.getdroplocation": [
        "javax.swing.JTable.getDropLocation()"
    ],
    "java.awt.dnd.draggestureevent.getdragaction": [
        "java.awt.dnd.DragGestureEvent.getDragAction()"
    ],
    "java.awt.geom.cubiccurve2d.double.getctrly1": [
        "java.awt.geom.CubicCurve2D.Double.getCtrlY1()"
    ],
    "javax.swing.text.glyphview.modeltoview": [
        "javax.swing.text.GlyphView.modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)"
    ],
    "java.nio.channels.selectionkey.selector": [
        "java.nio.channels.SelectionKey.selector()"
    ],
    "org.omg.dynamicany._dynunionstub.insert_char": [
        "org.omg.DynamicAny._DynUnionStub.insert_char(char)"
    ],
    "org.omg.dynamicany._dynarraystub.get_ulong": [
        "org.omg.DynamicAny._DynArrayStub.get_ulong()"
    ],
    "javax.swing.defaultlistselectionmodel.removelistselectionlistener": [
        "javax.swing.DefaultListSelectionModel.removeListSelectionListener(javax.swing.event.ListSelectionListener)"
    ],
    "org.xml.sax.helpers.attributesimpl.getlength": [
        "org.xml.sax.helpers.AttributesImpl.getLength()"
    ],
    "java.lang.comparable.compareto": [
        "java.lang.Comparable.compareTo(T)",
        "java.lang.Comparable.compareTo(java.lang.Comparable)"
    ],
    "org.omg.dynamicany._dynenumstub.get_ulong": [
        "org.omg.DynamicAny._DynEnumStub.get_ulong()"
    ],
    "javax.management.monitor.countermonitormbean.setdifferencemode": [
        "javax.management.monitor.CounterMonitorMBean.setDifferenceMode(boolean)"
    ],
    "org.omg.dynamicany._dynenumstub.get_val": [
        "org.omg.DynamicAny._DynEnumStub.get_val()"
    ],
    "java.awt.graphics.getclipbounds": [
        "java.awt.Graphics.getClipBounds(java.awt.Rectangle)",
        "java.awt.Graphics.getClipBounds()"
    ],
    "javax.imageio.imagewriter.processthumbnailstarted": [
        "javax.imageio.ImageWriter.processThumbnailStarted(int,int)"
    ],
    "javax.swing.jtabbedpane.updateui": [
        "javax.swing.JTabbedPane.updateUI()"
    ],
    "javax.xml.stream.events.notationdeclaration.getpublicid": [
        "javax.xml.stream.events.NotationDeclaration.getPublicId()"
    ],
    "java.util.enumset.allof": [
        "java.util.EnumSet.allOf(java.lang.Class<E>)"
    ],
    "javax.swing.springlayout.constraints.getheight": [
        "javax.swing.SpringLayout.Constraints.getHeight()"
    ],
    "java.util.timezone.getoffset": [
        "java.util.TimeZone.getOffset(int,int,int,int,int,int)",
        "java.util.TimeZone.getOffset(long)"
    ],
    "java.time.chrono.minguodate.minus": [
        "java.time.chrono.MinguoDate.minus(java.time.temporal.TemporalAmount)"
    ],
    "java.lang.reflect.annotatedarraytype.getannotatedgenericcomponenttype": [
        "java.lang.reflect.AnnotatedArrayType.getAnnotatedGenericComponentType()"
    ],
    "javax.accessibility.accessiblecomponent.setcursor": [
        "javax.accessibility.AccessibleComponent.setCursor(java.awt.Cursor)"
    ],
    "javax.swing.jspinner.getvalue": [
        "javax.swing.JSpinner.getValue()"
    ],
    "javax.print.attribute.resolutionsyntax.getfeedresolution": [
        "javax.print.attribute.ResolutionSyntax.getFeedResolution(int)"
    ],
    "javax.imageio.imageio.read": [
        "javax.imageio.ImageIO.read(java.io.File)",
        "javax.imageio.ImageIO.read(java.io.InputStream)",
        "javax.imageio.ImageIO.read(javax.imageio.stream.ImageInputStream)",
        "javax.imageio.ImageIO.read(java.net.URL)"
    ],
    "java.util.listresourcebundle.handlekeyset": [
        "java.util.ListResourceBundle.handleKeySet()"
    ],
    "java.awt.graphics.fillrect": [
        "java.awt.Graphics.fillRect(int,int,int,int)"
    ],
    "javax.swing.plaf.multi.multiviewportui.update": [
        "javax.swing.plaf.multi.MultiViewportUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.sound.midi.mididevice.gettransmitter": [
        "javax.sound.midi.MidiDevice.getTransmitter()"
    ],
    "java.net.urlstreamhandler.parseurl": [
        "java.net.URLStreamHandler.parseURL(java.net.URL,java.lang.String,int,int)"
    ],
    "java.util.concurrent.copyonwritearraylist.lastindexof": [
        "java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(E,int)",
        "java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(java.lang.Object)",
        "java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(java.util.concurrent.CopyOnWriteArrayList,int)"
    ],
    "java.security.acl.group.removemember": [
        "java.security.acl.Group.removeMember(java.security.Principal)"
    ],
    "java.util.concurrent.arrayblockingqueue.spliterator": [
        "java.util.concurrent.ArrayBlockingQueue.spliterator()"
    ],
    "javax.xml.crypto.dsig.xmlsignature.getkeyselectorresult": [
        "javax.xml.crypto.dsig.XMLSignature.getKeySelectorResult()"
    ],
    "java.security.timestamp.hashcode": [
        "java.security.Timestamp.hashCode()"
    ],
    "java.awt.color.icc_profile.getinstance": [
        "java.awt.color.ICC_Profile.getInstance(byte[])",
        "java.awt.color.ICC_Profile.getInstance(java.lang.String)",
        "java.awt.color.ICC_Profile.getInstance(java.io.InputStream)"
    ],
    "javax.swing.text.fieldview.getfontmetrics": [
        "javax.swing.text.FieldView.getFontMetrics()"
    ],
    "java.util.stream.longstream.skip": [
        "java.util.stream.LongStream.skip(long)"
    ],
    "javax.imageio.imagewriter.getlocale": [
        "javax.imageio.ImageWriter.getLocale()"
    ],
    "javax.swing.debuggraphics.setflashcount": [
        "javax.swing.DebugGraphics.setFlashCount(int)"
    ],
    "java.util.concurrent.atomic.atomiclongfieldupdater.updateandget": [
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.updateAndGet(T,java.util.function.LongUnaryOperator)",
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.updateAndGet(java.util.concurrent.atomic.AtomicLongFieldUpdater,java.util.function.LongUnaryOperator)"
    ],
    "javax.management.mbeaninfo.equals": [
        "javax.management.MBeanInfo.equals(java.lang.Object)"
    ],
    "java.text.spi.dateformatprovider.getdatetimeinstance": [
        "java.text.spi.DateFormatProvider.getDateTimeInstance(int,int,java.util.Locale)"
    ],
    "javax.management.openmbean.openmbeanattributeinfosupport.hashcode": [
        "javax.management.openmbean.OpenMBeanAttributeInfoSupport.hashCode()"
    ],
    "java.awt.font.textlayout.getblackboxbounds": [
        "java.awt.font.TextLayout.getBlackBoxBounds(int,int)"
    ],
    "java.lang.classloader.getparent": [
        "java.lang.ClassLoader.getParent()"
    ],
    "javax.net.ssl.sniservername.gettype": [
        "javax.net.ssl.SNIServerName.getType()"
    ],
    "javax.naming.ldap.ldapcontext.getconnectcontrols": [
        "javax.naming.ldap.LdapContext.getConnectControls()"
    ],
    "java.net.inet4address.hashcode": [
        "java.net.Inet4Address.hashCode()"
    ],
    "java.awt.renderinghints.entryset": [
        "java.awt.RenderingHints.entrySet()"
    ],
    "java.io.objectoutputstream.writefloat": [
        "java.io.ObjectOutputStream.writeFloat(float)"
    ],
    "java.security.cert.x509crlselector.addissuer": [
        "java.security.cert.X509CRLSelector.addIssuer(javax.security.auth.x500.X500Principal)"
    ],
    "java.awt.event.keyevent.getkeymodifierstext": [
        "java.awt.event.KeyEvent.getKeyModifiersText(int)"
    ],
    "javax.accessibility.accessiblevalue.setcurrentaccessiblevalue": [
        "javax.accessibility.AccessibleValue.setCurrentAccessibleValue(java.lang.Number)"
    ],
    "javax.swing.plaf.basic.basicoptionpaneui.createbuttonarea": [
        "javax.swing.plaf.basic.BasicOptionPaneUI.createButtonArea()"
    ],
    "javax.annotation.processing.abstractprocessor.getcompletions": [
        "javax.annotation.processing.AbstractProcessor.getCompletions(javax.lang.model.element.Element,javax.lang.model.element.AnnotationMirror,javax.lang.model.element.ExecutableElement,java.lang.String)"
    ],
    "java.io.objectoutputstream.writebyte": [
        "java.io.ObjectOutputStream.writeByte(int)"
    ],
    "org.xml.sax.helpers.parseradapter.getfeature": [
        "org.xml.sax.helpers.ParserAdapter.getFeature(java.lang.String)"
    ],
    "javax.swing.plaf.nimbus.nimbuslookandfeel.register": [
        "javax.swing.plaf.nimbus.NimbusLookAndFeel.register(javax.swing.plaf.synth.Region,java.lang.String)"
    ],
    "javax.swing.defaultlistmodel.remove": [
        "javax.swing.DefaultListModel.remove(int)"
    ],
    "java.nio.charset.charsetencoder.implreplacewith": [
        "java.nio.charset.CharsetEncoder.implReplaceWith(byte[])"
    ],
    "java.lang.strictmath.todegrees": [
        "java.lang.StrictMath.toDegrees(double)"
    ],
    "java.security.cert.collectioncertstoreparameters.getcollection": [
        "java.security.cert.CollectionCertStoreParameters.getCollection()"
    ],
    "java.rmi.activation.activationgroup.activeobject": [
        "java.rmi.activation.ActivationGroup.activeObject(java.rmi.activation.ActivationID,java.rmi.Remote)"
    ],
    "javax.xml.transform.sax.saxtransformerfactory.newtransformerhandler": [
        "javax.xml.transform.sax.SAXTransformerFactory.newTransformerHandler(javax.xml.transform.Templates)",
        "javax.xml.transform.sax.SAXTransformerFactory.newTransformerHandler(javax.xml.transform.Source)",
        "javax.xml.transform.sax.SAXTransformerFactory.newTransformerHandler()"
    ],
    "java.security.cert.x509certselector.getcertificatevalid": [
        "java.security.cert.X509CertSelector.getCertificateValid()"
    ],
    "java.awt.image.bufferedimage.getmintiley": [
        "java.awt.image.BufferedImage.getMinTileY()"
    ],
    "javax.swing.text.html.htmlwriter.endtag": [
        "javax.swing.text.html.HTMLWriter.endTag(javax.swing.text.Element)"
    ],
    "java.awt.geom.arc2d.getangleextent": [
        "java.awt.geom.Arc2D.getAngleExtent()"
    ],
    "java.net.socket.getreceivebuffersize": [
        "java.net.Socket.getReceiveBufferSize()"
    ],
    "java.awt.geom.cubiccurve2d.getx1": [
        "java.awt.geom.CubicCurve2D.getX1()"
    ],
    "org.omg.dynamicany._dynstructstub.insert_float": [
        "org.omg.DynamicAny._DynStructStub.insert_float(float)"
    ],
    "javax.lang.model.util.simpletypevisitor6.visitprimitive": [
        "javax.lang.model.util.SimpleTypeVisitor6.visitPrimitive(javax.lang.model.type.PrimitiveType,javax.lang.model.util.SimpleTypeVisitor6)"
    ],
    "javax.crypto.spec.rc2parameterspec.getiv": [
        "javax.crypto.spec.RC2ParameterSpec.getIV()"
    ],
    "javax.management.mbeanserverbuilder.newmbeanserverdelegate": [
        "javax.management.MBeanServerBuilder.newMBeanServerDelegate()"
    ],
    "java.awt.im.inputmethodrequests.getinsertpositionoffset": [
        "java.awt.im.InputMethodRequests.getInsertPositionOffset()"
    ],
    "java.beans.xmldecoder.getexceptionlistener": [
        "java.beans.XMLDecoder.getExceptionListener()"
    ],
    "java.util.logging.level.hashcode": [
        "java.util.logging.Level.hashCode()"
    ],
    "java.net.urisyntaxexception.getmessage": [
        "java.net.URISyntaxException.getMessage()"
    ],
    "javax.imageio.stream.imageoutputstream.writelongs": [
        "javax.imageio.stream.ImageOutputStream.writeLongs(long[],int,int)"
    ],
    "javax.xml.stream.xmlstreamreader.getpidata": [
        "javax.xml.stream.XMLStreamReader.getPIData()"
    ],
    "javax.swing.text.html.parser.parser.error": [
        "javax.swing.text.html.parser.Parser.error(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
    ],
    "java.awt.geom.quadcurve2d.getctrly": [
        "java.awt.geom.QuadCurve2D.getCtrlY()"
    ],
    "javax.xml.namespace.namespacecontext.getnamespaceuri": [
        "javax.xml.namespace.NamespaceContext.getNamespaceURI(java.lang.String)"
    ],
    "javax.swing.jmenu.getsubelements": [
        "javax.swing.JMenu.getSubElements()"
    ],
    "java.awt.font.shapegraphicattribute.getadvance": [
        "java.awt.font.ShapeGraphicAttribute.getAdvance()"
    ],
    "org.omg.corba.charholder._type": [
        "org.omg.CORBA.CharHolder._type()"
    ],
    "java.awt.dnd.dragsourcelistener.dragover": [
        "java.awt.dnd.DragSourceListener.dragOver(java.awt.dnd.DragSourceDragEvent)"
    ],
    "java.nio.file.path.relativize": [
        "java.nio.file.Path.relativize(java.nio.file.Path)"
    ],
    "javax.swing.jprogressbar.isstringpainted": [
        "javax.swing.JProgressBar.isStringPainted()"
    ],
    "java.nio.file.files.move": [
        "java.nio.file.Files.move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption)",
        "java.nio.file.Files.move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption...)"
    ],
    "java.net.url.equals": [
        "java.net.URL.equals(java.lang.Object)"
    ],
    "java.net.urlconnection.getcontentlengthlong": [
        "java.net.URLConnection.getContentLengthLong()"
    ],
    "javax.swing.table.tablecolumnmodel.addcolumnmodellistener": [
        "javax.swing.table.TableColumnModel.addColumnModelListener(javax.swing.event.TableColumnModelListener)"
    ],
    "java.sql.clob.truncate": [
        "java.sql.Clob.truncate(long)"
    ],
    "java.awt.font.textlayout.tostring": [
        "java.awt.font.TextLayout.toString()"
    ],
    "org.omg.dynamicany._dynfixedstub.insert_dyn_any": [
        "org.omg.DynamicAny._DynFixedStub.insert_dyn_any(org.omg.DynamicAny.DynAny)"
    ],
    "java.sql.statement.setlargemaxrows": [
        "java.sql.Statement.setLargeMaxRows(long)"
    ],
    "java.time.duration.from": [
        "java.time.Duration.from(java.time.temporal.TemporalAmount)"
    ],
    "javax.swing.text.defaultstyleddocument.getforeground": [
        "javax.swing.text.DefaultStyledDocument.getForeground(javax.swing.text.AttributeSet)"
    ],
    "java.util.uuid.fromstring": [
        "java.util.UUID.fromString(java.lang.String)"
    ],
    "java.awt.scrollpaneadjustable.setvalueisadjusting": [
        "java.awt.ScrollPaneAdjustable.setValueIsAdjusting(boolean)"
    ],
    "javax.swing.plaf.multi.multitreeui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiTreeUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "javax.swing.text.html.htmldocument.settokenthreshold": [
        "javax.swing.text.html.HTMLDocument.setTokenThreshold(int)"
    ],
    "java.lang.invoke.methodhandles.lookup.tostring": [
        "java.lang.invoke.MethodHandles.Lookup.toString()"
    ],
    "javax.swing.text.stylededitorkit.underlineaction.actionperformed": [
        "javax.swing.text.StyledEditorKit.UnderlineAction.actionPerformed(java.awt.event.ActionEvent)"
    ],
    "java.math.mathcontext.getprecision": [
        "java.math.MathContext.getPrecision()"
    ],
    "java.nio.channels.spi.asynchronouschannelprovider.provider": [
        "java.nio.channels.spi.AsynchronousChannelProvider.provider()"
    ],
    "javax.management.openmbean.compositetype.gettype": [
        "javax.management.openmbean.CompositeType.getType(java.lang.String)"
    ],
    "java.awt.scrollbar.setblockincrement": [
        "java.awt.Scrollbar.setBlockIncrement(int)"
    ],
    "javax.security.sasl.saslclient.getnegotiatedproperty": [
        "javax.security.sasl.SaslClient.getNegotiatedProperty(java.lang.String)"
    ],
    "javax.print.attribute.standard.datetimeatcompleted.equals": [
        "javax.print.attribute.standard.DateTimeAtCompleted.equals(java.lang.Object)"
    ],
    "javax.imageio.metadata.iiometadataformat.getattributeminvalue": [
        "javax.imageio.metadata.IIOMetadataFormat.getAttributeMinValue(java.lang.String,java.lang.String)"
    ],
    "java.sql.databasemetadata.getstringfunctions": [
        "java.sql.DatabaseMetaData.getStringFunctions()"
    ],
    "javax.swing.jfilechooser.removechoosablefilefilter": [
        "javax.swing.JFileChooser.removeChoosableFileFilter(javax.swing.filechooser.FileFilter)"
    ],
    "javax.swing.jtree.getdefaulttreemodel": [
        "javax.swing.JTree.getDefaultTreeModel()"
    ],
    "javax.swing.text.stylededitorkit.boldaction.actionperformed": [
        "javax.swing.text.StyledEditorKit.BoldAction.actionPerformed(java.awt.event.ActionEvent)"
    ],
    "javax.swing.jformattedtextfield.processinputmethodevent": [
        "javax.swing.JFormattedTextField.processInputMethodEvent(java.awt.event.InputMethodEvent)"
    ],
    "org.omg.dynamicany._dynenumstub.get_char": [
        "org.omg.DynamicAny._DynEnumStub.get_char()"
    ],
    "org.w3c.dom.events.mouseevent.getclientx": [
        "org.w3c.dom.events.MouseEvent.getClientX()"
    ],
    "java.awt.toolkit.createlabel": [
        "java.awt.Toolkit.createLabel(java.awt.Label)"
    ],
    "javax.sql.rowset.serial.serialdatalink.clone": [
        "javax.sql.rowset.serial.SerialDatalink.clone()"
    ],
    "javax.swing.text.abstractdocument.gettext": [
        "javax.swing.text.AbstractDocument.getText(int,int)",
        "javax.swing.text.AbstractDocument.getText(int,int,javax.swing.text.Segment)"
    ],
    "java.awt.geom.rectangularshape.getheight": [
        "java.awt.geom.RectangularShape.getHeight()"
    ],
    "javax.swing.jtable.setdefaultrenderer": [
        "javax.swing.JTable.setDefaultRenderer(java.lang.Class<?>,javax.swing.table.TableCellRenderer)"
    ],
    "java.util.collections.checkednavigableset": [
        "java.util.Collections.checkedNavigableSet(java.util.NavigableSet<E>,java.lang.Class<E>)"
    ],
    "java.util.simpletimezone.setrawoffset": [
        "java.util.SimpleTimeZone.setRawOffset(int)"
    ],
    "org.w3c.dom.events.uievent.inituievent": [
        "org.w3c.dom.events.UIEvent.initUIEvent(java.lang.String,boolean,boolean,org.w3c.dom.views.AbstractView,int)"
    ],
    "java.awt.toolkit.isframestatesupported": [
        "java.awt.Toolkit.isFrameStateSupported(int)"
    ],
    "java.awt.image.kernel.getyorigin": [
        "java.awt.image.Kernel.getYOrigin()"
    ],
    "java.awt.geom.rectangle2d.double.setrect": [
        "java.awt.geom.Rectangle2D.Double.setRect(double,double,double,double)"
    ],
    "javax.swing.plaf.multi.multifilechooserui.getminimumsize": [
        "javax.swing.plaf.multi.MultiFileChooserUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.removeselectionpaths": [
        "javax.swing.tree.DefaultTreeSelectionModel.removeSelectionPaths(javax.swing.tree.TreePath[])"
    ],
    "java.awt.font.shapegraphicattribute.hashcode": [
        "java.awt.font.ShapeGraphicAttribute.hashCode()"
    ],
    "javax.swing.jcombobox.configurepropertiesfromaction": [
        "javax.swing.JComboBox.configurePropertiesFromAction(javax.swing.Action)"
    ],
    "org.omg.corba.exceptionlist.count": [
        "org.omg.CORBA.ExceptionList.count()"
    ],
    "java.awt.color.getgreen": [
        "java.awt.Color.getGreen()"
    ],
    "java.awt.image.componentcolormodel.getalpharaster": [
        "java.awt.image.ComponentColorModel.getAlphaRaster(java.awt.image.WritableRaster)"
    ],
    "java.awt.window.getwindowstatelisteners": [
        "java.awt.Window.getWindowStateListeners()"
    ],
    "javax.swing.plaf.synth.synthtreeui.createdefaultcellrenderer": [
        "javax.swing.plaf.synth.SynthTreeUI.createDefaultCellRenderer()"
    ],
    "java.awt.image.bufferedimagefilter.imagecomplete": [
        "java.awt.image.BufferedImageFilter.imageComplete(int)"
    ],
    "javax.swing.text.plaindocument.removeupdate": [
        "javax.swing.text.PlainDocument.removeUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent)"
    ],
    "javax.swing.plaf.metal.metaltheme.getinactivecontroltextcolor": [
        "javax.swing.plaf.metal.MetalTheme.getInactiveControlTextColor()"
    ],
    "javax.xml.bind.datatypeconverterinterface.printbyte": [
        "javax.xml.bind.DatatypeConverterInterface.printByte(byte)"
    ],
    "javax.security.auth.login.configuration.refresh": [
        "javax.security.auth.login.Configuration.refresh()"
    ],
    "java.awt.toolkit.createbutton": [
        "java.awt.Toolkit.createButton(java.awt.Button)"
    ],
    "java.lang.invoke.methodhandle.invokewitharguments": [
        "java.lang.invoke.MethodHandle.invokeWithArguments(java.lang.Object...)",
        "java.lang.invoke.MethodHandle.invokeWithArguments(java.lang.Object)",
        "java.lang.invoke.MethodHandle.invokeWithArguments(java.util.List<?>)"
    ],
    "java.net.proxy.hashcode": [
        "java.net.Proxy.hashCode()"
    ],
    "javax.lang.model.element.packageelement.getqualifiedname": [
        "javax.lang.model.element.PackageElement.getQualifiedName()"
    ],
    "javax.swing.tree.fixedheightlayoutcache.getpathforrow": [
        "javax.swing.tree.FixedHeightLayoutCache.getPathForRow(int)"
    ],
    "javax.management.relation.roleinfo.getmaxdegree": [
        "javax.management.relation.RoleInfo.getMaxDegree()"
    ],
    "javax.management.modelmbean.modelmbeaninfosupport.clone": [
        "javax.management.modelmbean.ModelMBeanInfoSupport.clone()"
    ],
    "java.awt.fontmetrics.getascent": [
        "java.awt.FontMetrics.getAscent()"
    ],
    "java.net.url.toexternalform": [
        "java.net.URL.toExternalForm()"
    ],
    "java.awt.image.rgbimagefilter.filterindexcolormodel": [
        "java.awt.image.RGBImageFilter.filterIndexColorModel(java.awt.image.IndexColorModel)"
    ],
    "java.security.cert.pkixrevocationchecker.getoptions": [
        "java.security.cert.PKIXRevocationChecker.getOptions()"
    ],
    "java.lang.character.subset.hashcode": [
        "java.lang.Character.Subset.hashCode()"
    ],
    "javax.swing.timer.setlogtimers": [
        "javax.swing.Timer.setLogTimers(boolean)"
    ],
    "java.awt.geom.roundrectangle2d.float.setroundrect": [
        "java.awt.geom.RoundRectangle2D.Float.setRoundRect(float,float,float,float,float,float)",
        "java.awt.geom.RoundRectangle2D.Float.setRoundRect(double,double,double,double,double,double)"
    ],
    "javax.swing.border.matteborder.getmattecolor": [
        "javax.swing.border.MatteBorder.getMatteColor()"
    ],
    "java.util.concurrent.countedcompleter.compute": [
        "java.util.concurrent.CountedCompleter.compute()"
    ],
    "java.security.messagedigestspi.engineupdate": [
        "java.security.MessageDigestSpi.engineUpdate(byte)",
        "java.security.MessageDigestSpi.engineUpdate(byte[],int,int)",
        "java.security.MessageDigestSpi.engineUpdate(java.nio.ByteBuffer)"
    ],
    "javax.swing.joptionpane.setmessagetype": [
        "javax.swing.JOptionPane.setMessageType(int)"
    ],
    "javax.net.ssl.sslengine.getsession": [
        "javax.net.ssl.SSLEngine.getSession()"
    ],
    "java.time.format.datetimeformatterbuilder.appendfraction": [
        "java.time.format.DateTimeFormatterBuilder.appendFraction(java.time.temporal.TemporalField,int,int,boolean)"
    ],
    "javax.management.remote.rmi.rmiconnection.addnotificationlisteners": [
        "javax.management.remote.rmi.RMIConnection.addNotificationListeners(javax.management.ObjectName[],java.rmi.MarshalledObject[],javax.security.auth.Subject[])"
    ],
    "javax.swing.jmenubar.setselectionmodel": [
        "javax.swing.JMenuBar.setSelectionModel(javax.swing.SingleSelectionModel)"
    ],
    "java.awt.geom.affinetransform.getmatrix": [
        "java.awt.geom.AffineTransform.getMatrix(double[])"
    ],
    "javax.swing.repaintmanager.getoffscreenbuffer": [
        "javax.swing.RepaintManager.getOffscreenBuffer(java.awt.Component,int,int)"
    ],
    "java.awt.checkboxmenuitem.getlisteners": [
        "java.awt.CheckboxMenuItem.getListeners(java.lang.Class<T>)"
    ],
    "java.lang.math.acos": [
        "java.lang.Math.acos(double)"
    ],
    "javax.management.badbinaryopvalueexpexception.getexp": [
        "javax.management.BadBinaryOpValueExpException.getExp()"
    ],
    "javax.imageio.event.iiowritewarninglistener.warningoccurred": [
        "javax.imageio.event.IIOWriteWarningListener.warningOccurred(javax.imageio.ImageWriter,int,java.lang.String)"
    ],
    "java.io.printstream.clearerror": [
        "java.io.PrintStream.clearError()"
    ],
    "java.awt.geom.quadcurve2d.double.getctrlx": [
        "java.awt.geom.QuadCurve2D.Double.getCtrlX()"
    ],
    "java.text.normalizer.form.valueof": [
        "java.text.Normalizer.Form.valueOf(java.lang.String)"
    ],
    "org.xml.sax.helpers.attributesimpl.getlocalname": [
        "org.xml.sax.helpers.AttributesImpl.getLocalName(int)"
    ],
    "javax.swing.table.tablecolumn.setminwidth": [
        "javax.swing.table.TableColumn.setMinWidth(int)"
    ],
    "java.util.concurrent.linkedblockingdeque.size": [
        "java.util.concurrent.LinkedBlockingDeque.size()"
    ],
    "javax.swing.plaf.basic.basictableheaderui.rollovercolumnupdated": [
        "javax.swing.plaf.basic.BasicTableHeaderUI.rolloverColumnUpdated(int,int)"
    ],
    "javax.swing.jslider.updateui": [
        "javax.swing.JSlider.updateUI()"
    ],
    "java.sql.resultset.updateint": [
        "java.sql.ResultSet.updateInt(int,int)",
        "java.sql.ResultSet.updateInt(java.lang.String,int)"
    ],
    "javax.lang.model.util.simpleannotationvaluevisitor6.visitchar": [
        "javax.lang.model.util.SimpleAnnotationValueVisitor6.visitChar(char,javax.lang.model.util.SimpleAnnotationValueVisitor6)"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.getselectionrows": [
        "javax.swing.tree.DefaultTreeSelectionModel.getSelectionRows()"
    ],
    "javax.crypto.mac.clone": [
        "javax.crypto.Mac.clone()"
    ],
    "javax.lang.model.element.elementvisitor.visit": [
        "javax.lang.model.element.ElementVisitor.visit(javax.lang.model.element.Element,javax.lang.model.element.ElementVisitor)"
    ],
    "javax.swing.timer.setinitialdelay": [
        "javax.swing.Timer.setInitialDelay(int)"
    ],
    "javax.swing.jmenubar.getmargin": [
        "javax.swing.JMenuBar.getMargin()"
    ],
    "java.rmi.activation.activationgroup.creategroup": [
        "java.rmi.activation.ActivationGroup.createGroup(java.rmi.activation.ActivationGroupID,java.rmi.activation.ActivationGroupDesc,long)"
    ],
    "javax.imageio.imagereader.getnumthumbnails": [
        "javax.imageio.ImageReader.getNumThumbnails(int)"
    ],
    "java.lang.class.getsigners": [
        "java.lang.Class.getSigners()"
    ],
    "javax.management.remote.rmi.rmiconnection.isregistered": [
        "javax.management.remote.rmi.RMIConnection.isRegistered(javax.management.ObjectName,javax.security.auth.Subject)"
    ],
    "javax.swing.jslider.updatelabeluis": [
        "javax.swing.JSlider.updateLabelUIs()"
    ],
    "javax.xml.bind.helpers.abstractmarshallerimpl.setschemalocation": [
        "javax.xml.bind.helpers.AbstractMarshallerImpl.setSchemaLocation(java.lang.String)"
    ],
    "java.lang.invoke.methodtype.equals": [
        "java.lang.invoke.MethodType.equals(java.lang.Object)"
    ],
    "java.awt.desktop.getdesktop": [
        "java.awt.Desktop.getDesktop()"
    ],
    "java.awt.dnd.droptargetdragevent.gettransferable": [
        "java.awt.dnd.DropTargetDragEvent.getTransferable()"
    ],
    "javax.swing.text.internationalformatter.install": [
        "javax.swing.text.InternationalFormatter.install(javax.swing.JFormattedTextField)"
    ],
    "javax.swing.jlist.setselectedvalue": [
        "javax.swing.JList.setSelectedValue(java.lang.Object,boolean)"
    ],
    "org.ietf.jgss.gsscontext.requestconf": [
        "org.ietf.jgss.GSSContext.requestConf(boolean)"
    ],
    "java.sql.resultset.clearwarnings": [
        "java.sql.ResultSet.clearWarnings()"
    ],
    "javax.swing.abstractcelleditor.removecelleditorlistener": [
        "javax.swing.AbstractCellEditor.removeCellEditorListener(javax.swing.event.CellEditorListener)"
    ],
    "javax.sql.connectionevent.getsqlexception": [
        "javax.sql.ConnectionEvent.getSQLException()"
    ],
    "java.nio.file.accessmode.valueof": [
        "java.nio.file.AccessMode.valueOf(java.lang.String)"
    ],
    "javax.swing.listselectionmodel.addselectioninterval": [
        "javax.swing.ListSelectionModel.addSelectionInterval(int,int)"
    ],
    "java.security.codesource.tostring": [
        "java.security.CodeSource.toString()"
    ],
    "java.time.instant.minus": [
        "java.time.Instant.minus(java.time.temporal.TemporalAmount)",
        "java.time.Instant.minus(long,java.time.temporal.TemporalUnit)"
    ],
    "javax.net.ssl.sslsessioncontext.getsessioncachesize": [
        "javax.net.ssl.SSLSessionContext.getSessionCacheSize()"
    ],
    "java.sql.sqloutput.writebyte": [
        "java.sql.SQLOutput.writeByte(byte)"
    ],
    "javax.xml.ws.service.getport": [
        "javax.xml.ws.Service.getPort(javax.xml.namespace.QName,java.lang.Class<T>)",
        "javax.xml.ws.Service.getPort(javax.xml.namespace.QName,java.lang.Class<T>,javax.xml.ws.WebServiceFeature...)",
        "javax.xml.ws.Service.getPort(java.lang.Class<T>)",
        "javax.xml.ws.Service.getPort(javax.xml.ws.EndpointReference,java.lang.Class<T>,javax.xml.ws.WebServiceFeature...)",
        "javax.xml.ws.Service.getPort(java.lang.Class<T>,javax.xml.ws.WebServiceFeature...)"
    ],
    "org.w3c.dom.node.issupported": [
        "org.w3c.dom.Node.isSupported(java.lang.String,java.lang.String)"
    ],
    "javax.swing.jcomponent.requestfocusinwindow": [
        "javax.swing.JComponent.requestFocusInWindow()",
        "javax.swing.JComponent.requestFocusInWindow(boolean)"
    ],
    "org.omg.corba.orb.create_policy": [
        "org.omg.CORBA.ORB.create_policy(int,org.omg.CORBA.Any)"
    ],
    "javax.swing.text.html.parser.entity.getname": [
        "javax.swing.text.html.parser.Entity.getName()"
    ],
    "javax.swing.jscrollpane.setviewportview": [
        "javax.swing.JScrollPane.setViewportView(java.awt.Component)"
    ],
    "javax.swing.layoutfocustraversalpolicy.getfirstcomponent": [
        "javax.swing.LayoutFocusTraversalPolicy.getFirstComponent(java.awt.Container)"
    ],
    "javax.xml.bind.datatypeconverterinterface.parsefloat": [
        "javax.xml.bind.DatatypeConverterInterface.parseFloat(java.lang.String)"
    ],
    "java.security.cert.x509certselector.getsubjectkeyidentifier": [
        "java.security.cert.X509CertSelector.getSubjectKeyIdentifier()"
    ],
    "org.w3c.dom.ls.lsparserfilter.startelement": [
        "org.w3c.dom.ls.LSParserFilter.startElement(org.w3c.dom.Element)"
    ],
    "java.util.concurrent.forkjoinworkerthread.onstart": [
        "java.util.concurrent.ForkJoinWorkerThread.onStart()"
    ],
    "org.ietf.jgss.oid.equals": [
        "org.ietf.jgss.Oid.equals(java.lang.Object)"
    ],
    "java.awt.image.memoryimagesource.setfullbufferupdates": [
        "java.awt.image.MemoryImageSource.setFullBufferUpdates(boolean)"
    ],
    "java.security.cert.x509certselector.getextendedkeyusage": [
        "java.security.cert.X509CertSelector.getExtendedKeyUsage()"
    ],
    "java.sql.connection.commit": [
        "java.sql.Connection.commit()"
    ],
    "java.sql.connection.createblob": [
        "java.sql.Connection.createBlob()"
    ],
    "javax.management.mbeanpermission.equals": [
        "javax.management.MBeanPermission.equals(java.lang.Object)"
    ],
    "java.sql.databasemetadata.supportssubqueriesinins": [
        "java.sql.DatabaseMetaData.supportsSubqueriesInIns()"
    ],
    "java.sql.resultset.updatetimestamp": [
        "java.sql.ResultSet.updateTimestamp(java.lang.String,java.sql.Timestamp)",
        "java.sql.ResultSet.updateTimestamp(int,java.sql.Timestamp)"
    ],
    "javax.swing.lookandfeel.getdesktoppropertyvalue": [
        "javax.swing.LookAndFeel.getDesktopPropertyValue(java.lang.String,java.lang.Object)"
    ],
    "javax.imageio.stream.imageinputstream.setbyteorder": [
        "javax.imageio.stream.ImageInputStream.setByteOrder(java.nio.ByteOrder)"
    ],
    "javax.swing.plaf.multi.multicomboboxui.paint": [
        "javax.swing.plaf.multi.MultiComboBoxUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.awt.geom.quadcurve2d.double.getctrlpt": [
        "java.awt.geom.QuadCurve2D.Double.getCtrlPt()"
    ],
    "java.text.messageformat.setformatsbyargumentindex": [
        "java.text.MessageFormat.setFormatsByArgumentIndex(java.text.Format[])",
        "java.text.MessageFormat.setFormatsByArgumentIndex(java.text.Format)"
    ],
    "javax.swing.undo.stateedit.removeredundantstate": [
        "javax.swing.undo.StateEdit.removeRedundantState()"
    ],
    "java.awt.graphics2d.settransform": [
        "java.awt.Graphics2D.setTransform(java.awt.geom.AffineTransform)"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writelong": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeLong(long)"
    ],
    "java.net.inet6address.gethostaddress": [
        "java.net.Inet6Address.getHostAddress()"
    ],
    "java.awt.layoutmanager2.getlayoutalignmenty": [
        "java.awt.LayoutManager2.getLayoutAlignmentY(java.awt.Container)"
    ],
    "java.awt.font.linemetrics.getstrikethroughoffset": [
        "java.awt.font.LineMetrics.getStrikethroughOffset()"
    ],
    "java.awt.keyboardfocusmanager.getkeyeventdispatchers": [
        "java.awt.KeyboardFocusManager.getKeyEventDispatchers()"
    ],
    "java.awt.font.multiplemaster.derivemmfont": [
        "java.awt.font.MultipleMaster.deriveMMFont(float[],float,float,float,float)",
        "java.awt.font.MultipleMaster.deriveMMFont(float[])"
    ],
    "javax.sound.sampled.line.iscontrolsupported": [
        "javax.sound.sampled.Line.isControlSupported(javax.sound.sampled.Control.Type)"
    ],
    "java.util.concurrent.executors.unconfigurablescheduledexecutorservice": [
        "java.util.concurrent.Executors.unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService)"
    ],
    "javax.lang.model.type.executabletype.getthrowntypes": [
        "javax.lang.model.type.ExecutableType.getThrownTypes()"
    ],
    "java.awt.image.pixelinterleavedsamplemodel.createcompatiblesamplemodel": [
        "java.awt.image.PixelInterleavedSampleModel.createCompatibleSampleModel(int,int)"
    ],
    "java.awt.event.windowevent.paramstring": [
        "java.awt.event.WindowEvent.paramString()"
    ],
    "javax.sound.midi.sequencer.syncmode.tostring": [
        "javax.sound.midi.Sequencer.SyncMode.toString()"
    ],
    "javax.print.attribute.standard.printerstate.getstringtable": [
        "javax.print.attribute.standard.PrinterState.getStringTable()"
    ],
    "javax.management.monitor.stringmonitor.stop": [
        "javax.management.monitor.StringMonitor.stop()"
    ],
    "javax.swing.jtextarea.getuiclassid": [
        "javax.swing.JTextArea.getUIClassID()"
    ],
    "java.lang.invoke.methodtype.methodtype": [
        "java.lang.invoke.MethodType.methodType(java.lang.Class<?>,java.lang.Class<?>,java.lang.Class<?>...)",
        "java.lang.invoke.MethodType.methodType(java.lang.Class<?>,java.lang.Class<?>[])",
        "java.lang.invoke.MethodType.methodType(java.lang.Class<?>,java.util.List<java.lang.Class<?>>)",
        "java.lang.invoke.MethodType.methodType(java.lang.Class<?>)",
        "java.lang.invoke.MethodType.methodType(java.lang.Class<?>,java.lang.Class<?>)",
        "java.lang.invoke.MethodType.methodType(java.lang.Class<?>,java.lang.Class<?>,java.lang.Class<?>)",
        "java.lang.invoke.MethodType.methodType(java.lang.Class<?>,java.lang.invoke.MethodType)"
    ],
    "java.awt.borderlayout.gethgap": [
        "java.awt.BorderLayout.getHgap()"
    ],
    "java.awt.image.renderable.parameterblock.getrenderablesource": [
        "java.awt.image.renderable.ParameterBlock.getRenderableSource(int)"
    ],
    "javax.lang.model.util.elementfilter.fieldsin": [
        "javax.lang.model.util.ElementFilter.fieldsIn(java.util.Set<? extends javax.lang.model.element.Element>)",
        "javax.lang.model.util.ElementFilter.fieldsIn(java.lang.Iterable<? extends javax.lang.model.element.Element>)"
    ],
    "java.nio.file.spi.filetypedetector.probecontenttype": [
        "java.nio.file.spi.FileTypeDetector.probeContentType(java.nio.file.Path)"
    ],
    "javax.naming.ldap.control.iscritical": [
        "javax.naming.ldap.Control.isCritical()"
    ],
    "java.net.cookiestore.geturis": [
        "java.net.CookieStore.getURIs()"
    ],
    "javax.accessibility.accessiblestateset.remove": [
        "javax.accessibility.AccessibleStateSet.remove(javax.accessibility.AccessibleState)"
    ],
    "java.awt.datatransfer.flavortable.getflavorsfornative": [
        "java.awt.datatransfer.FlavorTable.getFlavorsForNative(java.lang.String)"
    ],
    "javax.swing.jcombobox.setselecteditem": [
        "javax.swing.JComboBox.setSelectedItem(java.lang.Object)"
    ],
    "java.awt.event.focusevent.paramstring": [
        "java.awt.event.FocusEvent.paramString()"
    ],
    "javax.swing.jrootpane.getuiclassid": [
        "javax.swing.JRootPane.getUIClassID()"
    ],
    "javax.print.event.printjobattributeevent.getprintjob": [
        "javax.print.event.PrintJobAttributeEvent.getPrintJob()"
    ],
    "java.awt.textfield.setcolumns": [
        "java.awt.TextField.setColumns(int)"
    ],
    "java.lang.management.memorypoolmxbean.setcollectionusagethreshold": [
        "java.lang.management.MemoryPoolMXBean.setCollectionUsageThreshold(long)"
    ],
    "javax.net.ssl.sslserversocketfactory.getdefaultciphersuites": [
        "javax.net.ssl.SSLServerSocketFactory.getDefaultCipherSuites()"
    ],
    "javax.sql.rowset.cachedrowset.previouspage": [
        "javax.sql.rowset.CachedRowSet.previousPage()"
    ],
    "java.awt.frame.gettitle": [
        "java.awt.Frame.getTitle()"
    ],
    "java.nio.charbuffer.tostring": [
        "java.nio.CharBuffer.toString()"
    ],
    "java.io.file.mkdir": [
        "java.io.File.mkdir()"
    ],
    "java.lang.double.shortvalue": [
        "java.lang.Double.shortValue()"
    ],
    "javax.print.docprintjob.getattributes": [
        "javax.print.DocPrintJob.getAttributes()"
    ],
    "javax.swing.japplet.setjmenubar": [
        "javax.swing.JApplet.setJMenuBar(javax.swing.JMenuBar)"
    ],
    "javax.sql.rowset.serial.serialref.hashcode": [
        "javax.sql.rowset.serial.SerialRef.hashCode()"
    ],
    "javax.xml.bind.jaxbelement.getdeclaredtype": [
        "javax.xml.bind.JAXBElement.getDeclaredType()"
    ],
    "java.io.chararrayreader.skip": [
        "java.io.CharArrayReader.skip(long)"
    ],
    "javax.print.attribute.standard.printerinfo.equals": [
        "javax.print.attribute.standard.PrinterInfo.equals(java.lang.Object)"
    ],
    "java.time.offsetdatetime.plusmonths": [
        "java.time.OffsetDateTime.plusMonths(long)"
    ],
    "java.util.concurrent.linkedblockingdeque.element": [
        "java.util.concurrent.LinkedBlockingDeque.element()"
    ],
    "java.nio.channels.socketchannel.isconnected": [
        "java.nio.channels.SocketChannel.isConnected()"
    ],
    "java.text.decimalformatsymbols.getpermill": [
        "java.text.DecimalFormatSymbols.getPerMill()"
    ],
    "java.util.spliterator.estimatesize": [
        "java.util.Spliterator.estimateSize()"
    ],
    "javax.swing.table.tablecolumnmodel.getcolumnindexatx": [
        "javax.swing.table.TableColumnModel.getColumnIndexAtX(int)"
    ],
    "javax.management.monitor.monitor.removeobservedobject": [
        "javax.management.monitor.Monitor.removeObservedObject(javax.management.ObjectName)"
    ],
    "java.util.concurrent.atomic.atomicreferencefieldupdater.weakcompareandset": [
        "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.weakCompareAndSet(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater)",
        "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.weakCompareAndSet(T,V,V)"
    ],
    "java.io.chararraywriter.write": [
        "java.io.CharArrayWriter.write(java.lang.String,int,int)",
        "java.io.CharArrayWriter.write(char[],int,int)",
        "java.io.CharArrayWriter.write(int)"
    ],
    "org.omg.dynamicany._dynunionstub.insert_wchar": [
        "org.omg.DynamicAny._DynUnionStub.insert_wchar(char)"
    ],
    "javax.swing.jcombobox.createdefaultkeyselectionmanager": [
        "javax.swing.JComboBox.createDefaultKeySelectionManager()"
    ],
    "java.util.stream.intstream.maptolong": [
        "java.util.stream.IntStream.mapToLong(java.util.function.IntToLongFunction)"
    ],
    "java.awt.awteventmulticaster.mousedragged": [
        "java.awt.AWTEventMulticaster.mouseDragged(java.awt.event.MouseEvent)"
    ],
    "javax.swing.text.editorkit.createdefaultdocument": [
        "javax.swing.text.EditorKit.createDefaultDocument()"
    ],
    "org.omg.dynamicany._dynenumstub.get_wstring": [
        "org.omg.DynamicAny._DynEnumStub.get_wstring()"
    ],
    "java.awt.font.textmeasurer.getadvancebetween": [
        "java.awt.font.TextMeasurer.getAdvanceBetween(int,int)"
    ],
    "java.awt.datatransfer.systemflavormap.getflavorsfornative": [
        "java.awt.datatransfer.SystemFlavorMap.getFlavorsForNative(java.lang.String)"
    ],
    "javax.swing.plaf.multi.multitreeui.update": [
        "javax.swing.plaf.multi.MultiTreeUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.io.objectoutputstream.flush": [
        "java.io.ObjectOutputStream.flush()"
    ],
    "org.omg.dynamicany._dynsequencestub.get_elements": [
        "org.omg.DynamicAny._DynSequenceStub.get_elements()"
    ],
    "java.awt.container.applycomponentorientation": [
        "java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"
    ],
    "java.awt.menuitem.paramstring": [
        "java.awt.MenuItem.paramString()"
    ],
    "java.awt.image.bufferstrategy.getcapabilities": [
        "java.awt.image.BufferStrategy.getCapabilities()"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writeshort": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeShort(short)"
    ],
    "java.nio.channels.readablebytechannel.read": [
        "java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)"
    ],
    "javax.swing.plaf.basic.basiccombopopup.installlistlisteners": [
        "javax.swing.plaf.basic.BasicComboPopup.installListListeners()"
    ],
    "javax.activation.filetypemap.setdefaultfiletypemap": [
        "javax.activation.FileTypeMap.setDefaultFileTypeMap(javax.activation.FileTypeMap)"
    ],
    "java.lang.system.lineseparator": [
        "java.lang.System.lineSeparator()"
    ],
    "javax.xml.crypto.xmlcryptocontext.setbaseuri": [
        "javax.xml.crypto.XMLCryptoContext.setBaseURI(java.lang.String)"
    ],
    "javax.swing.tree.treemodel.removetreemodellistener": [
        "javax.swing.tree.TreeModel.removeTreeModelListener(javax.swing.event.TreeModelListener)"
    ],
    "javax.swing.colorchooser.defaultcolorselectionmodel.getselectedcolor": [
        "javax.swing.colorchooser.DefaultColorSelectionModel.getSelectedColor()"
    ],
    "javax.swing.table.tablecellrenderer.gettablecellrenderercomponent": [
        "javax.swing.table.TableCellRenderer.getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)"
    ],
    "java.sql.preparedstatement.setclob": [
        "java.sql.PreparedStatement.setClob(int,java.io.Reader)",
        "java.sql.PreparedStatement.setClob(int,java.sql.Clob)",
        "java.sql.PreparedStatement.setClob(int,java.io.Reader,long)"
    ],
    "javax.swing.plaf.basic.basictextui.setview": [
        "javax.swing.plaf.basic.BasicTextUI.setView(javax.swing.text.View)"
    ],
    "javax.management.remote.rmi.rmiserverimpl.closeclient": [
        "javax.management.remote.rmi.RMIServerImpl.closeClient(javax.management.remote.rmi.RMIConnection)"
    ],
    "java.util.timezone.setdefault": [
        "java.util.TimeZone.setDefault(java.util.TimeZone)"
    ],
    "javax.imageio.plugins.jpeg.jpegimagewriteparam.unsetcompression": [
        "javax.imageio.plugins.jpeg.JPEGImageWriteParam.unsetCompression()"
    ],
    "javax.xml.datatype.duration.hashcode": [
        "javax.xml.datatype.Duration.hashCode()"
    ],
    "javax.swing.jcomponent.getwidth": [
        "javax.swing.JComponent.getWidth()"
    ],
    "javax.swing.text.abstractdocument.getdocumentfilter": [
        "javax.swing.text.AbstractDocument.getDocumentFilter()"
    ],
    "java.util.gregoriancalendar.getminimum": [
        "java.util.GregorianCalendar.getMinimum(int)"
    ],
    "javax.swing.text.defaultcaret.getdotbias": [
        "javax.swing.text.DefaultCaret.getDotBias()"
    ],
    "javax.crypto.encryptedprivatekeyinfo.getencrypteddata": [
        "javax.crypto.EncryptedPrivateKeyInfo.getEncryptedData()"
    ],
    "java.time.chrono.chronozoneddatetime.toepochsecond": [
        "java.time.chrono.ChronoZonedDateTime.toEpochSecond()"
    ],
    "java.awt.focustraversalpolicy.getcomponentafter": [
        "java.awt.FocusTraversalPolicy.getComponentAfter(java.awt.Container,java.awt.Component)"
    ],
    "javax.imageio.imagewriter.endwritesequence": [
        "javax.imageio.ImageWriter.endWriteSequence()"
    ],
    "org.omg.corba.any.extract_boolean": [
        "org.omg.CORBA.Any.extract_boolean()"
    ],
    "java.text.simpledateformat.applypattern": [
        "java.text.SimpleDateFormat.applyPattern(java.lang.String)"
    ],
    "java.util.concurrent.recursiveaction.exec": [
        "java.util.concurrent.RecursiveAction.exec()"
    ],
    "java.lang.float.parsefloat": [
        "java.lang.Float.parseFloat(java.lang.String)"
    ],
    "javax.activation.datahandler.getbean": [
        "javax.activation.DataHandler.getBean(javax.activation.CommandInfo)"
    ],
    "java.security.cert.certpathvalidatorexception.getcertpath": [
        "java.security.cert.CertPathValidatorException.getCertPath()"
    ],
    "java.security.interfaces.rsaprivatecrtkey.getprimeexponentq": [
        "java.security.interfaces.RSAPrivateCrtKey.getPrimeExponentQ()"
    ],
    "javax.swing.jmenu.getpopupmenu": [
        "javax.swing.JMenu.getPopupMenu()"
    ],
    "java.nio.charset.charsetencoder.implreset": [
        "java.nio.charset.CharsetEncoder.implReset()"
    ],
    "javax.swing.plaf.multi.multitableui.getuis": [
        "javax.swing.plaf.multi.MultiTableUI.getUIs()"
    ],
    "java.awt.toolkit.createframe": [
        "java.awt.Toolkit.createFrame(java.awt.Frame)"
    ],
    "javax.sound.sampled.line.open": [
        "javax.sound.sampled.Line.open()"
    ],
    "org.omg.dynamicany._dynarraystub.get_elements_as_dyn_any": [
        "org.omg.DynamicAny._DynArrayStub.get_elements_as_dyn_any()"
    ],
    "java.util.treemap.ceilingentry": [
        "java.util.TreeMap.ceilingEntry(K)"
    ],
    "java.lang.package.tostring": [
        "java.lang.Package.toString()"
    ],
    "java.awt.container.update": [
        "java.awt.Container.update(java.awt.Graphics)"
    ],
    "javax.swing.jfilechooser.setcurrentdirectory": [
        "javax.swing.JFileChooser.setCurrentDirectory(java.io.File)"
    ],
    "org.omg.corba.orb.create_output_stream": [
        "org.omg.CORBA.ORB.create_output_stream()"
    ],
    "java.rmi.activation.activationdesc.getdata": [
        "java.rmi.activation.ActivationDesc.getData()"
    ],
    "javax.swing.jprogressbar.setorientation": [
        "javax.swing.JProgressBar.setOrientation(int)"
    ],
    "javax.imageio.imagereader.processthumbnailstarted": [
        "javax.imageio.ImageReader.processThumbnailStarted(int,int)"
    ],
    "javax.xml.datatype.duration.tostring": [
        "javax.xml.datatype.Duration.toString()"
    ],
    "javax.xml.stream.xmleventwriter.getnamespacecontext": [
        "javax.xml.stream.XMLEventWriter.getNamespaceContext()"
    ],
    "javax.annotation.processing.processingenvironment.getoptions": [
        "javax.annotation.processing.ProcessingEnvironment.getOptions()"
    ],
    "java.lang.reflect.array.getfloat": [
        "java.lang.reflect.Array.getFloat(java.lang.Object,int)"
    ],
    "javax.xml.soap.mimeheader.getname": [
        "javax.xml.soap.MimeHeader.getName()"
    ],
    "java.util.stream.doublestream.builder.build": [
        "java.util.stream.DoubleStream.Builder.build()"
    ],
    "javax.swing.abstractbutton.setfocuspainted": [
        "javax.swing.AbstractButton.setFocusPainted(boolean)"
    ],
    "java.rmi.server.unicastremoteobject.exportobject": [
        "java.rmi.server.UnicastRemoteObject.exportObject(java.rmi.Remote,int)",
        "java.rmi.server.UnicastRemoteObject.exportObject(java.rmi.Remote,int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)"
    ],
    "java.lang.number.longvalue": [
        "java.lang.Number.longValue()"
    ],
    "java.applet.appletcontext.getstream": [
        "java.applet.AppletContext.getStream(java.lang.String)"
    ],
    "javax.swing.text.html.htmldocument.gettokenthreshold": [
        "javax.swing.text.html.HTMLDocument.getTokenThreshold()"
    ],
    "javax.print.attribute.standard.jobimpressions.getcategory": [
        "javax.print.attribute.standard.JobImpressions.getCategory()"
    ],
    "java.io.bufferedreader.mark": [
        "java.io.BufferedReader.mark(int)"
    ],
    "java.awt.dialog.gettitle": [
        "java.awt.Dialog.getTitle()"
    ],
    "java.awt.geom.ellipse2d.double.gety": [
        "java.awt.geom.Ellipse2D.Double.getY()"
    ],
    "java.util.logging.logmanager.getlogmanager": [
        "java.util.logging.LogManager.getLogManager()"
    ],
    "java.util.concurrent.blockingqueue.poll": [
        "java.util.concurrent.BlockingQueue.poll(long,java.util.concurrent.TimeUnit)"
    ],
    "java.nio.channels.seekablebytechannel.write": [
        "java.nio.channels.SeekableByteChannel.write(java.nio.ByteBuffer)"
    ],
    "javax.swing.text.styleddocument.getparagraphelement": [
        "javax.swing.text.StyledDocument.getParagraphElement(int)"
    ],
    "java.security.cert.x509crlselector.addissuername": [
        "java.security.cert.X509CRLSelector.addIssuerName(byte[])"
    ],
    "java.time.zoneddatetime.truncatedto": [
        "java.time.ZonedDateTime.truncatedTo(java.time.temporal.TemporalUnit)"
    ],
    "javax.accessibility.accessibleextendedtable.getaccessiblecolumn": [
        "javax.accessibility.AccessibleExtendedTable.getAccessibleColumn(int)"
    ],
    "java.net.httpcookie.setdiscard": [
        "java.net.HttpCookie.setDiscard(boolean)"
    ],
    "java.util.concurrent.phaser.forcetermination": [
        "java.util.concurrent.Phaser.forceTermination()"
    ],
    "java.time.duration.plushours": [
        "java.time.Duration.plusHours(long)"
    ],
    "javax.xml.ws.endpoint.getmetadata": [
        "javax.xml.ws.Endpoint.getMetadata()"
    ],
    "javax.xml.parsers.documentbuilderfactory.newdocumentbuilder": [
        "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()"
    ],
    "java.util.prefs.abstractpreferences.tostring": [
        "java.util.prefs.AbstractPreferences.toString()"
    ],
    "javax.management.standardmbean.getimpact": [
        "javax.management.StandardMBean.getImpact(javax.management.MBeanOperationInfo)"
    ],
    "java.time.chrono.hijrahdate.lengthofmonth": [
        "java.time.chrono.HijrahDate.lengthOfMonth()"
    ],
    "javax.swing.border.matteborder.getborderinsets": [
        "javax.swing.border.MatteBorder.getBorderInsets()",
        "javax.swing.border.MatteBorder.getBorderInsets(java.awt.Component,java.awt.Insets)"
    ],
    "javax.management.mbeanregistration.postderegister": [
        "javax.management.MBeanRegistration.postDeregister()"
    ],
    "javax.management.relation.relationservice.getallroles": [
        "javax.management.relation.RelationService.getAllRoles(java.lang.String)"
    ],
    "javax.xml.xpath.xpathfunctionresolver.resolvefunction": [
        "javax.xml.xpath.XPathFunctionResolver.resolveFunction(javax.xml.namespace.QName,int)"
    ],
    "javax.imageio.imagewriter.replaceimagemetadata": [
        "javax.imageio.ImageWriter.replaceImageMetadata(int,javax.imageio.metadata.IIOMetadata)"
    ],
    "javax.swing.text.html.html.getintegerattributevalue": [
        "javax.swing.text.html.HTML.getIntegerAttributeValue(javax.swing.text.AttributeSet,javax.swing.text.html.HTML.Attribute,int)"
    ],
    "javax.naming.nameclasspair.tostring": [
        "javax.naming.NameClassPair.toString()"
    ],
    "java.awt.multiplegradientpaint.colorspacetype.values": [
        "java.awt.MultipleGradientPaint.ColorSpaceType.values()"
    ],
    "javax.swing.uidefaults.getui": [
        "javax.swing.UIDefaults.getUI(javax.swing.JComponent)"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.getfractionalsecond": [
        "javax.xml.datatype.XMLGregorianCalendar.getFractionalSecond()"
    ],
    "java.awt.geom.cubiccurve2d.double.setcurve": [
        "java.awt.geom.CubicCurve2D.Double.setCurve(double,double,double,double,double,double,double,double)"
    ],
    "javax.swing.tooltipmanager.getdismissdelay": [
        "javax.swing.ToolTipManager.getDismissDelay()"
    ],
    "java.lang.short.tounsignedlong": [
        "java.lang.Short.toUnsignedLong(short)"
    ],
    "java.security.cert.pkixrevocationchecker.getocspextensions": [
        "java.security.cert.PKIXRevocationChecker.getOcspExtensions()"
    ],
    "java.awt.filedialog.setmultiplemode": [
        "java.awt.FileDialog.setMultipleMode(boolean)"
    ],
    "javax.net.ssl.httpsurlconnection.getsslsocketfactory": [
        "javax.net.ssl.HttpsURLConnection.getSSLSocketFactory()"
    ],
    "javax.sql.rowset.clearparameters": [
        "javax.sql.RowSet.clearParameters()"
    ],
    "javax.swing.plaf.basic.basicprogressbarui.incrementanimationindex": [
        "javax.swing.plaf.basic.BasicProgressBarUI.incrementAnimationIndex()"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.setdocumentlocator": [
        "org.xml.sax.helpers.XMLFilterImpl.setDocumentLocator(org.xml.sax.Locator)"
    ],
    "java.awt.image.renderedimage.getcolormodel": [
        "java.awt.image.RenderedImage.getColorModel()"
    ],
    "java.util.currency.getinstance": [
        "java.util.Currency.getInstance(java.lang.String)",
        "java.util.Currency.getInstance(java.util.Locale)"
    ],
    "java.time.localdate.adjustinto": [
        "java.time.LocalDate.adjustInto(java.time.temporal.Temporal)"
    ],
    "java.net.urlpermission.getactions": [
        "java.net.URLPermission.getActions()"
    ],
    "java.util.concurrent.countedcompleter.onexceptionalcompletion": [
        "java.util.concurrent.CountedCompleter.onExceptionalCompletion(java.lang.Throwable,java.util.concurrent.CountedCompleter<?>)"
    ],
    "org.omg.dynamicany._dynstructstub.get_reference": [
        "org.omg.DynamicAny._DynStructStub.get_reference()"
    ],
    "javax.imageio.imagereader.processreadaborted": [
        "javax.imageio.ImageReader.processReadAborted()"
    ],
    "java.io.reader.read": [
        "java.io.Reader.read(char[])",
        "java.io.Reader.read(char[],int,int)",
        "java.io.Reader.read(java.nio.CharBuffer)",
        "java.io.Reader.read()"
    ],
    "java.nio.charset.coderresult.malformedforlength": [
        "java.nio.charset.CoderResult.malformedForLength(int)"
    ],
    "javax.management.badattributevalueexpexception.tostring": [
        "javax.management.BadAttributeValueExpException.toString()"
    ],
    "javax.swing.text.defaultformatterfactory.getnullformatter": [
        "javax.swing.text.DefaultFormatterFactory.getNullFormatter()"
    ],
    "java.awt.scrollpane.paramstring": [
        "java.awt.ScrollPane.paramString()"
    ],
    "java.beans.featuredescriptor.setdisplayname": [
        "java.beans.FeatureDescriptor.setDisplayName(java.lang.String)"
    ],
    "java.sql.connection.createsqlxml": [
        "java.sql.Connection.createSQLXML()"
    ],
    "java.util.concurrent.atomic.atomiclongfieldupdater.getandincrement": [
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndIncrement(T)",
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndIncrement(java.util.concurrent.atomic.AtomicLongFieldUpdater)"
    ],
    "javax.management.modelmbean.descriptorsupport.equals": [
        "javax.management.modelmbean.DescriptorSupport.equals(java.lang.Object)"
    ],
    "javax.sql.rowset.cachedrowset.tocollection": [
        "javax.sql.rowset.CachedRowSet.toCollection(int)",
        "javax.sql.rowset.CachedRowSet.toCollection()",
        "javax.sql.rowset.CachedRowSet.toCollection(java.lang.String)"
    ],
    "java.util.concurrent.atomic.atomicreferencearray.tostring": [
        "java.util.concurrent.atomic.AtomicReferenceArray.toString()"
    ],
    "javax.lang.model.util.abstracttypevisitor6.visitunion": [
        "javax.lang.model.util.AbstractTypeVisitor6.visitUnion(javax.lang.model.type.UnionType,javax.lang.model.util.AbstractTypeVisitor6)"
    ],
    "java.time.format.textstyle.values": [
        "java.time.format.TextStyle.values()"
    ],
    "java.nio.channels.selectionkey.readyops": [
        "java.nio.channels.SelectionKey.readyOps()"
    ],
    "java.security.cert.x509crlentry.getcertificateissuer": [
        "java.security.cert.X509CRLEntry.getCertificateIssuer()"
    ],
    "java.io.randomaccessfile.readunsignedshort": [
        "java.io.RandomAccessFile.readUnsignedShort()"
    ],
    "org.omg.corba.portable.inputstream.read_float": [
        "org.omg.CORBA.portable.InputStream.read_float()"
    ],
    "java.awt.fontmetrics.getdescent": [
        "java.awt.FontMetrics.getDescent()"
    ],
    "org.w3c.dom.namelist.getname": [
        "org.w3c.dom.NameList.getName(int)"
    ],
    "java.net.inet6address.equals": [
        "java.net.Inet6Address.equals(java.lang.Object)"
    ],
    "java.awt.polygon.getbounds": [
        "java.awt.Polygon.getBounds()"
    ],
    "javax.accessibility.accessibletable.getaccessiblesummary": [
        "javax.accessibility.AccessibleTable.getAccessibleSummary()"
    ],
    "org.omg.dynamicany._dynunionstub.seek": [
        "org.omg.DynamicAny._DynUnionStub.seek(int)"
    ],
    "javax.swing.tree.treeselectionmodel.getselectionmode": [
        "javax.swing.tree.TreeSelectionModel.getSelectionMode()"
    ],
    "javax.swing.defaultbuttonmodel.ispressed": [
        "javax.swing.DefaultButtonModel.isPressed()"
    ],
    "javax.swing.table.tablemodel.getrowcount": [
        "javax.swing.table.TableModel.getRowCount()"
    ],
    "javax.lang.model.util.elementscanner6.visitpackage": [
        "javax.lang.model.util.ElementScanner6.visitPackage(javax.lang.model.element.PackageElement,javax.lang.model.util.ElementScanner6)"
    ],
    "javax.management.monitor.monitor.preregister": [
        "javax.management.monitor.Monitor.preRegister(javax.management.MBeanServer,javax.management.ObjectName)"
    ],
    "java.util.treeset.ceiling": [
        "java.util.TreeSet.ceiling(E)"
    ],
    "javax.swing.plaf.basic.basictreeui.getrowx": [
        "javax.swing.plaf.basic.BasicTreeUI.getRowX(int,int)"
    ],
    "java.awt.image.bufferedimageop.getpoint2d": [
        "java.awt.image.BufferedImageOp.getPoint2D(java.awt.geom.Point2D,java.awt.geom.Point2D)"
    ],
    "java.time.localdatetime.getdayofmonth": [
        "java.time.LocalDateTime.getDayOfMonth()"
    ],
    "javax.sound.midi.midifileformat.getmicrosecondlength": [
        "javax.sound.midi.MidiFileFormat.getMicrosecondLength()"
    ],
    "javax.swing.text.jtextcomponent.getselectioncolor": [
        "javax.swing.text.JTextComponent.getSelectionColor()"
    ],
    "javax.xml.bind.helpers.abstractunmarshallerimpl.createunmarshalexception": [
        "javax.xml.bind.helpers.AbstractUnmarshallerImpl.createUnmarshalException(org.xml.sax.SAXException)"
    ],
    "javax.accessibility.accessibletable.getselectedaccessiblecolumns": [
        "javax.accessibility.AccessibleTable.getSelectedAccessibleColumns()"
    ],
    "javax.swing.jmenuitem.firemenukeytyped": [
        "javax.swing.JMenuItem.fireMenuKeyTyped(javax.swing.event.MenuKeyEvent)"
    ],
    "java.awt.image.componentsamplemodel.getbankindices": [
        "java.awt.image.ComponentSampleModel.getBankIndices()"
    ],
    "javax.management.remote.jmxconnector.removeconnectionnotificationlistener": [
        "javax.management.remote.JMXConnector.removeConnectionNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)",
        "javax.management.remote.JMXConnector.removeConnectionNotificationListener(javax.management.NotificationListener)"
    ],
    "javax.lang.model.element.element.getenclosedelements": [
        "javax.lang.model.element.Element.getEnclosedElements()"
    ],
    "java.awt.geom.roundrectangle2d.float.getbounds2d": [
        "java.awt.geom.RoundRectangle2D.Float.getBounds2D()"
    ],
    "java.awt.component.gethierarchyboundslisteners": [
        "java.awt.Component.getHierarchyBoundsListeners()"
    ],
    "java.time.yearmonth.getmonth": [
        "java.time.YearMonth.getMonth()"
    ],
    "javax.imageio.imagereader.readtileraster": [
        "javax.imageio.ImageReader.readTileRaster(int,int,int)"
    ],
    "org.omg.dynamicany._dynfixedstub.insert_float": [
        "org.omg.DynamicAny._DynFixedStub.insert_float(float)"
    ],
    "java.security.spec.ecfieldf2m.getmidtermsofreductionpolynomial": [
        "java.security.spec.ECFieldF2m.getMidTermsOfReductionPolynomial()"
    ],
    "javax.swing.jseparator.getaccessiblecontext": [
        "javax.swing.JSeparator.getAccessibleContext()"
    ],
    "javax.swing.undo.undoableeditsupport.tostring": [
        "javax.swing.undo.UndoableEditSupport.toString()"
    ],
    "org.omg.dynamicany.dynanyoperations.insert_dyn_any": [
        "org.omg.DynamicAny.DynAnyOperations.insert_dyn_any(org.omg.DynamicAny.DynAny)"
    ],
    "java.awt.print.book.getnumberofpages": [
        "java.awt.print.Book.getNumberOfPages()"
    ],
    "java.awt.event.mouseevent.getlocationonscreen": [
        "java.awt.event.MouseEvent.getLocationOnScreen()"
    ],
    "org.omg.dynamicany._dynstructstub.seek": [
        "org.omg.DynamicAny._DynStructStub.seek(int)"
    ],
    "javax.swing.plaf.basic.basictextui.uninstalllisteners": [
        "javax.swing.plaf.basic.BasicTextUI.uninstallListeners()"
    ],
    "javax.xml.ws.spi.http.httpexchange.getrequestbody": [
        "javax.xml.ws.spi.http.HttpExchange.getRequestBody()"
    ],
    "javax.swing.border.lineborder.getborderinsets": [
        "javax.swing.border.LineBorder.getBorderInsets(java.awt.Component,java.awt.Insets)"
    ],
    "java.time.zone.zoneoffsettransition.hashcode": [
        "java.time.zone.ZoneOffsetTransition.hashCode()"
    ],
    "java.util.stream.intstream.builder": [
        "java.util.stream.IntStream.builder()"
    ],
    "java.awt.window.setcursor": [
        "java.awt.Window.setCursor(java.awt.Cursor)"
    ],
    "java.lang.invoke.callsite.dynamicinvoker": [
        "java.lang.invoke.CallSite.dynamicInvoker()"
    ],
    "javax.management.openmbean.openmbeanconstructorinfo.getdescription": [
        "javax.management.openmbean.OpenMBeanConstructorInfo.getDescription()"
    ],
    "javax.swing.text.jtextcomponent.setdisabledtextcolor": [
        "javax.swing.text.JTextComponent.setDisabledTextColor(java.awt.Color)"
    ],
    "java.awt.font.tostring": [
        "java.awt.Font.toString()"
    ],
    "java.util.logging.logger.logrb": [
        "java.util.logging.Logger.logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.util.ResourceBundle,java.lang.String,java.lang.Throwable)",
        "java.util.logging.Logger.logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.util.ResourceBundle,java.lang.String,java.lang.Object...)",
        "java.util.logging.Logger.logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.util.ResourceBundle,java.lang.String,java.lang.Object)"
    ],
    "javax.swing.swingutilities.convertrectangle": [
        "javax.swing.SwingUtilities.convertRectangle(java.awt.Component,java.awt.Rectangle,java.awt.Component)"
    ],
    "javax.swing.text.caret.setselectionvisible": [
        "javax.swing.text.Caret.setSelectionVisible(boolean)"
    ],
    "javax.swing.tree.treeselectionmodel.getselectionpaths": [
        "javax.swing.tree.TreeSelectionModel.getSelectionPaths()"
    ],
    "javax.naming.spi.resolveresult.setresolvedobj": [
        "javax.naming.spi.ResolveResult.setResolvedObj(java.lang.Object)"
    ],
    "java.net.httpretryexception.responsecode": [
        "java.net.HttpRetryException.responseCode()"
    ],
    "org.omg.corba.floatholder._write": [
        "org.omg.CORBA.FloatHolder._write(org.omg.CORBA.portable.OutputStream)"
    ],
    "javax.swing.jinternalframe.pack": [
        "javax.swing.JInternalFrame.pack()"
    ],
    "javax.net.ssl.sniservername.getencoded": [
        "javax.net.ssl.SNIServerName.getEncoded()"
    ],
    "java.security.securerandomspi.enginegenerateseed": [
        "java.security.SecureRandomSpi.engineGenerateSeed(int)"
    ],
    "javax.swing.jtabbedpane.geticonat": [
        "javax.swing.JTabbedPane.getIconAt(int)"
    ],
    "org.xml.sax.ext.attributes2impl.setdeclared": [
        "org.xml.sax.ext.Attributes2Impl.setDeclared(int,boolean)"
    ],
    "javax.xml.crypto.algorithmmethod.getparameterspec": [
        "javax.xml.crypto.AlgorithmMethod.getParameterSpec()"
    ],
    "java.util.concurrent.concurrentlinkedqueue.add": [
        "java.util.concurrent.ConcurrentLinkedQueue.add(java.util.concurrent.ConcurrentLinkedQueue)",
        "java.util.concurrent.ConcurrentLinkedQueue.add(E)"
    ],
    "javax.swing.jradiobutton.updateui": [
        "javax.swing.JRadioButton.updateUI()"
    ],
    "java.awt.image.databuffer.setelemdouble": [
        "java.awt.image.DataBuffer.setElemDouble(int,int,double)"
    ],
    "java.awt.color.gethsbcolor": [
        "java.awt.Color.getHSBColor(float,float,float)"
    ],
    "javax.swing.plaf.splitpaneui.finishedpaintingchildren": [
        "javax.swing.plaf.SplitPaneUI.finishedPaintingChildren(javax.swing.JSplitPane,java.awt.Graphics)"
    ],
    "java.util.concurrent.atomic.doubleaccumulator.floatvalue": [
        "java.util.concurrent.atomic.DoubleAccumulator.floatValue()"
    ],
    "javax.swing.text.tableview.layoutcolumns": [
        "javax.swing.text.TableView.layoutColumns(int,int[],int[],javax.swing.SizeRequirements[])"
    ],
    "java.awt.container.validate": [
        "java.awt.Container.validate()"
    ],
    "java.time.localdatetime.from": [
        "java.time.LocalDateTime.from(java.time.temporal.TemporalAccessor)"
    ],
    "java.util.concurrent.delayqueue.toarray": [
        "java.util.concurrent.DelayQueue.toArray()",
        "java.util.concurrent.DelayQueue.toArray(T[])"
    ],
    "javax.swing.transferhandler.getvisualrepresentation": [
        "javax.swing.TransferHandler.getVisualRepresentation(java.awt.datatransfer.Transferable)"
    ],
    "java.awt.font.textlayout.getlogicalrangesforvisualselection": [
        "java.awt.font.TextLayout.getLogicalRangesForVisualSelection(java.awt.font.TextHitInfo,java.awt.font.TextHitInfo)"
    ],
    "java.sql.statement.getlargeupdatecount": [
        "java.sql.Statement.getLargeUpdateCount()"
    ],
    "java.awt.component.setlocale": [
        "java.awt.Component.setLocale(java.util.Locale)"
    ],
    "java.text.rulebasedcollator.getrules": [
        "java.text.RuleBasedCollator.getRules()"
    ],
    "java.time.localtime.atoffset": [
        "java.time.LocalTime.atOffset(java.time.ZoneOffset)"
    ],
    "org.omg.corba.dataoutputstream.write_object": [
        "org.omg.CORBA.DataOutputStream.write_Object(org.omg.CORBA.Object)"
    ],
    "javax.accessibility.accessiblecontext.getaccessiblecomponent": [
        "javax.accessibility.AccessibleContext.getAccessibleComponent()"
    ],
    "javax.sound.midi.midisystem.getmidifileformat": [
        "javax.sound.midi.MidiSystem.getMidiFileFormat(java.io.File)",
        "javax.sound.midi.MidiSystem.getMidiFileFormat(java.net.URL)",
        "javax.sound.midi.MidiSystem.getMidiFileFormat(java.io.InputStream)"
    ],
    "java.util.optionallong.empty": [
        "java.util.OptionalLong.empty()"
    ],
    "javax.lang.model.util.elementfilter.typesin": [
        "javax.lang.model.util.ElementFilter.typesIn(java.util.Set<? extends javax.lang.model.element.Element>)",
        "javax.lang.model.util.ElementFilter.typesIn(java.lang.Iterable<? extends javax.lang.model.element.Element>)"
    ],
    "javax.swing.defaultdesktopmanager.deiconifyframe": [
        "javax.swing.DefaultDesktopManager.deiconifyFrame(javax.swing.JInternalFrame)"
    ],
    "javax.print.attribute.standard.documentname.equals": [
        "javax.print.attribute.standard.DocumentName.equals(java.lang.Object)"
    ],
    "javax.management.openmbean.openmbeaninfo.getoperations": [
        "javax.management.openmbean.OpenMBeanInfo.getOperations()"
    ],
    "java.awt.geom.arc2d.float.getanglestart": [
        "java.awt.geom.Arc2D.Float.getAngleStart()"
    ],
    "org.ietf.jgss.gssname.hashcode": [
        "org.ietf.jgss.GSSName.hashCode()"
    ],
    "java.awt.geom.ellipse2d.float.gety": [
        "java.awt.geom.Ellipse2D.Float.getY()"
    ],
    "javax.sql.rowset.getusername": [
        "javax.sql.RowSet.getUsername()"
    ],
    "javax.swing.plaf.synth.synthpainter.painttextfieldbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintTextFieldBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.text.compositeview.modeltoview": [
        "javax.swing.text.CompositeView.modelToView(int,javax.swing.text.Position.Bias,int,javax.swing.text.Position.Bias,java.awt.Shape)",
        "javax.swing.text.CompositeView.modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)"
    ],
    "java.util.vector.set": [
        "java.util.Vector.set(int,E)",
        "java.util.Vector.set(int,java.util.Vector)"
    ],
    "java.util.scanner.nextshort": [
        "java.util.Scanner.nextShort(int)",
        "java.util.Scanner.nextShort()"
    ],
    "java.time.zone.zonerulesprovider.getrules": [
        "java.time.zone.ZoneRulesProvider.getRules(java.lang.String,boolean)"
    ],
    "java.util.logging.logger.finest": [
        "java.util.logging.Logger.finest(java.lang.String)",
        "java.util.logging.Logger.finest(java.util.function.Supplier<java.lang.String>)"
    ],
    "java.time.clock.systemutc": [
        "java.time.Clock.systemUTC()"
    ],
    "org.xml.sax.helpers.defaulthandler.setdocumentlocator": [
        "org.xml.sax.helpers.DefaultHandler.setDocumentLocator(org.xml.sax.Locator)"
    ],
    "java.awt.checkbox.paramstring": [
        "java.awt.Checkbox.paramString()"
    ],
    "java.util.concurrent.copyonwritearraylist.addall": [
        "java.util.concurrent.CopyOnWriteArrayList.addAll(java.util.Collection<? extends java.util.concurrent.CopyOnWriteArrayList>)",
        "java.util.concurrent.CopyOnWriteArrayList.addAll(int,java.util.Collection<? extends java.util.concurrent.CopyOnWriteArrayList>)",
        "java.util.concurrent.CopyOnWriteArrayList.addAll(int,java.util.Collection<? extends E>)",
        "java.util.concurrent.CopyOnWriteArrayList.addAll(java.util.Collection<? extends E>)"
    ],
    "javax.swing.abstractbutton.configurepropertiesfromaction": [
        "javax.swing.AbstractButton.configurePropertiesFromAction(javax.swing.Action)"
    ],
    "javax.management.loading.classloaderrepository.loadclassbefore": [
        "javax.management.loading.ClassLoaderRepository.loadClassBefore(java.lang.ClassLoader,java.lang.String)"
    ],
    "org.omg.dynamicany.dynanyoperations.insert_wchar": [
        "org.omg.DynamicAny.DynAnyOperations.insert_wchar(char)"
    ],
    "javax.swing.text.asyncboxview.settopinset": [
        "javax.swing.text.AsyncBoxView.setTopInset(float)"
    ],
    "javax.swing.plaf.multi.multibuttonui.paint": [
        "javax.swing.plaf.multi.MultiButtonUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.util.concurrent.atomic.doubleaccumulator.tostring": [
        "java.util.concurrent.atomic.DoubleAccumulator.toString()"
    ],
    "java.sql.sqldata.writesql": [
        "java.sql.SQLData.writeSQL(java.sql.SQLOutput)"
    ],
    "javax.swing.jframe.paramstring": [
        "javax.swing.JFrame.paramString()"
    ],
    "java.time.chrono.hijrahdate.minus": [
        "java.time.chrono.HijrahDate.minus(java.time.temporal.TemporalAmount)"
    ],
    "javax.xml.bind.binder.seteventhandler": [
        "javax.xml.bind.Binder.setEventHandler(javax.xml.bind.ValidationEventHandler)"
    ],
    "java.awt.graphicsdevice.getbestconfiguration": [
        "java.awt.GraphicsDevice.getBestConfiguration(java.awt.GraphicsConfigTemplate)"
    ],
    "javax.swing.plaf.multi.multisplitpaneui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiSplitPaneUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "org.w3c.dom.attr.getvalue": [
        "org.w3c.dom.Attr.getValue()"
    ],
    "java.awt.component.setlocation": [
        "java.awt.Component.setLocation(java.awt.Point)",
        "java.awt.Component.setLocation(int,int)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintspinnerborder": [
        "javax.swing.plaf.synth.SynthPainter.paintSpinnerBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.awt.multiplegradientpaint.gettransform": [
        "java.awt.MultipleGradientPaint.getTransform()"
    ],
    "javax.swing.jtoolbar.addimpl": [
        "javax.swing.JToolBar.addImpl(java.awt.Component,java.lang.Object,int)"
    ],
    "javax.print.attribute.standard.printerstatereason.getstringtable": [
        "javax.print.attribute.standard.PrinterStateReason.getStringTable()"
    ],
    "java.awt.event.awteventlistenerproxy.geteventmask": [
        "java.awt.event.AWTEventListenerProxy.getEventMask()"
    ],
    "javax.sql.rowset.serial.serialblob.setbytes": [
        "javax.sql.rowset.serial.SerialBlob.setBytes(long,byte[],int,int)",
        "javax.sql.rowset.serial.SerialBlob.setBytes(long,byte[])"
    ],
    "javax.swing.text.styleconstants.setbold": [
        "javax.swing.text.StyleConstants.setBold(javax.swing.text.MutableAttributeSet,boolean)"
    ],
    "java.awt.image.affinetransformop.createcompatibledestimage": [
        "java.awt.image.AffineTransformOp.createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writenclob": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeNClob(java.sql.NClob)"
    ],
    "javax.swing.jtabbedpane.getmnemonicat": [
        "javax.swing.JTabbedPane.getMnemonicAt(int)"
    ],
    "javax.swing.plaf.synth.synthtreeui.paint": [
        "javax.swing.plaf.synth.SynthTreeUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",
        "javax.swing.plaf.synth.SynthTreeUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.awt.print.pageformat.getheight": [
        "java.awt.print.PageFormat.getHeight()"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getacceleratorselectedforeground": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getAcceleratorSelectedForeground()"
    ],
    "javax.naming.ldap.rdn.equals": [
        "javax.naming.ldap.Rdn.equals(java.lang.Object)"
    ],
    "java.awt.geom.arc2d.intersects": [
        "java.awt.geom.Arc2D.intersects(double,double,double,double)"
    ],
    "java.awt.textfield.addnotify": [
        "java.awt.TextField.addNotify()"
    ],
    "java.awt.image.raster.createwritableraster": [
        "java.awt.image.Raster.createWritableRaster(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Point)",
        "java.awt.image.Raster.createWritableRaster(java.awt.image.SampleModel,java.awt.Point)"
    ],
    "javax.management.timer.timermbean.getsendpastnotifications": [
        "javax.management.timer.TimerMBean.getSendPastNotifications()"
    ],
    "javax.swing.jcomponent.revalidate": [
        "javax.swing.JComponent.revalidate()"
    ],
    "java.awt.shape.intersects": [
        "java.awt.Shape.intersects(java.awt.geom.Rectangle2D)",
        "java.awt.Shape.intersects(double,double,double,double)"
    ],
    "java.util.map.entry.getvalue": [
        "java.util.Map.Entry.getValue()"
    ],
    "javax.crypto.spec.secretkeyspec.hashcode": [
        "javax.crypto.spec.SecretKeySpec.hashCode()"
    ],
    "java.awt.scrollpane.getscrollbardisplaypolicy": [
        "java.awt.ScrollPane.getScrollbarDisplayPolicy()"
    ],
    "java.text.dateformat.field.readresolve": [
        "java.text.DateFormat.Field.readResolve()"
    ],
    "javax.sound.midi.sequencer.gettrackmute": [
        "javax.sound.midi.Sequencer.getTrackMute(int)"
    ],
    "java.util.concurrent.threadpoolexecutor.setrejectedexecutionhandler": [
        "java.util.concurrent.ThreadPoolExecutor.setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)"
    ],
    "javax.tools.diagnostic.kind.values": [
        "javax.tools.Diagnostic.Kind.values()"
    ],
    "javax.swing.plaf.synth.synthtoolbarui.paintcontent": [
        "javax.swing.plaf.synth.SynthToolBarUI.paintContent(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,java.awt.Rectangle)"
    ],
    "org.omg.corba.datainputstream.read_ulonglong": [
        "org.omg.CORBA.DataInputStream.read_ulonglong()"
    ],
    "java.beans.propertyeditor.paintvalue": [
        "java.beans.PropertyEditor.paintValue(java.awt.Graphics,java.awt.Rectangle)"
    ],
    "java.nio.channels.asynchronoussocketchannel.getremoteaddress": [
        "java.nio.channels.AsynchronousSocketChannel.getRemoteAddress()"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.characters": [
        "org.xml.sax.helpers.XMLFilterImpl.characters(char[],int,int)"
    ],
    "java.lang.string.endswith": [
        "java.lang.String.endsWith(java.lang.String)"
    ],
    "javax.swing.plaf.multi.multimenubarui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiMenuBarUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "org.omg.corba.localobject._get_policy": [
        "org.omg.CORBA.LocalObject._get_policy(int)"
    ],
    "java.lang.management.threadmxbean.getcurrentthreadusertime": [
        "java.lang.management.ThreadMXBean.getCurrentThreadUserTime()"
    ],
    "java.util.calendar.isset": [
        "java.util.Calendar.isSet(int)"
    ],
    "javax.naming.spi.resolveresult.setremainingname": [
        "javax.naming.spi.ResolveResult.setRemainingName(javax.naming.Name)"
    ],
    "java.nio.charset.charset.tostring": [
        "java.nio.charset.Charset.toString()"
    ],
    "javax.swing.jspinner.defaulteditor.getbaselineresizebehavior": [
        "javax.swing.JSpinner.DefaultEditor.getBaselineResizeBehavior()"
    ],
    "java.util.calendar.builder.setweekdefinition": [
        "java.util.Calendar.Builder.setWeekDefinition(int,int)"
    ],
    "java.lang.integer.rotateright": [
        "java.lang.Integer.rotateRight(int,int)"
    ],
    "java.sql.preparedstatement.setbinarystream": [
        "java.sql.PreparedStatement.setBinaryStream(int,java.io.InputStream,long)",
        "java.sql.PreparedStatement.setBinaryStream(int,java.io.InputStream)",
        "java.sql.PreparedStatement.setBinaryStream(int,java.io.InputStream,int)"
    ],
    "java.nio.channels.asynchronousbytechannel.write": [
        "java.nio.channels.AsynchronousByteChannel.write(java.nio.ByteBuffer)",
        "java.nio.channels.AsynchronousByteChannel.write(java.nio.ByteBuffer,A,,? super A>)"
    ],
    "java.util.stream.doublestream.limit": [
        "java.util.stream.DoubleStream.limit(long)"
    ],
    "java.util.timezone.getdisplayname": [
        "java.util.TimeZone.getDisplayName(java.util.Locale)",
        "java.util.TimeZone.getDisplayName()",
        "java.util.TimeZone.getDisplayName(boolean,int)",
        "java.util.TimeZone.getDisplayName(boolean,int,java.util.Locale)"
    ],
    "javax.naming.directory.attribute.remove": [
        "javax.naming.directory.Attribute.remove(int)",
        "javax.naming.directory.Attribute.remove(java.lang.Object)"
    ],
    "javax.xml.transform.stream.streamresult.getoutputstream": [
        "javax.xml.transform.stream.StreamResult.getOutputStream()"
    ],
    "java.lang.stacktraceelement.hashcode": [
        "java.lang.StackTraceElement.hashCode()"
    ],
    "java.util.missingresourceexception.getkey": [
        "java.util.MissingResourceException.getKey()"
    ],
    "javax.management.openmbean.openmbeaninfo.getdescription": [
        "javax.management.openmbean.OpenMBeanInfo.getDescription()"
    ],
    "org.omg.dynamicany._dynfixedstub.get_ulong": [
        "org.omg.DynamicAny._DynFixedStub.get_ulong()"
    ],
    "javax.xml.soap.soapfault.getdetail": [
        "javax.xml.soap.SOAPFault.getDetail()"
    ],
    "javax.print.attribute.standard.compression.getcategory": [
        "javax.print.attribute.standard.Compression.getCategory()"
    ],
    "javax.swing.plaf.listui.getcellbounds": [
        "javax.swing.plaf.ListUI.getCellBounds(javax.swing.JList,int,int)"
    ],
    "java.io.file.lastmodified": [
        "java.io.File.lastModified()"
    ],
    "java.util.function.objlongconsumer.accept": [
        "java.util.function.ObjLongConsumer.accept(T,long)",
        "java.util.function.ObjLongConsumer.accept(java.util.function.ObjLongConsumer,long)"
    ],
    "java.awt.geom.arc2d.float.gety": [
        "java.awt.geom.Arc2D.Float.getY()"
    ],
    "javax.swing.jcomponent.updateui": [
        "javax.swing.JComponent.updateUI()"
    ],
    "java.awt.geom.cubiccurve2d.getflatnesssq": [
        "java.awt.geom.CubicCurve2D.getFlatnessSq(double,double,double,double,double,double,double,double)",
        "java.awt.geom.CubicCurve2D.getFlatnessSq()",
        "java.awt.geom.CubicCurve2D.getFlatnessSq(double[],int)"
    ],
    "javax.swing.text.html.inlineview.setpropertiesfromattributes": [
        "javax.swing.text.html.InlineView.setPropertiesFromAttributes()"
    ],
    "javax.xml.stream.xmleventreader.peek": [
        "javax.xml.stream.XMLEventReader.peek()"
    ],
    "javax.swing.text.defaultstyleddocument.getstyle": [
        "javax.swing.text.DefaultStyledDocument.getStyle(java.lang.String)"
    ],
    "java.sql.resultset.refreshrow": [
        "java.sql.ResultSet.refreshRow()"
    ],
    "java.util.concurrent.linkedblockingqueue.remove": [
        "java.util.concurrent.LinkedBlockingQueue.remove(java.lang.Object)"
    ],
    "java.sql.connection.createstatement": [
        "java.sql.Connection.createStatement(int,int,int)",
        "java.sql.Connection.createStatement()",
        "java.sql.Connection.createStatement(int,int)"
    ],
    "java.awt.graphics2d.drawrenderedimage": [
        "java.awt.Graphics2D.drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)"
    ],
    "javax.crypto.cipheroutputstream.write": [
        "javax.crypto.CipherOutputStream.write(int)",
        "javax.crypto.CipherOutputStream.write(byte[],int,int)"
    ],
    "java.security.provider.service.newinstance": [
        "java.security.Provider.Service.newInstance(java.lang.Object)"
    ],
    "java.awt.textcomponent.getlisteners": [
        "java.awt.TextComponent.getListeners(java.lang.Class<T>)"
    ],
    "javax.swing.jspinner.getaccessiblecontext": [
        "javax.swing.JSpinner.getAccessibleContext()"
    ],
    "javax.swing.plaf.basic.basicoptionpaneui.resetinputvalue": [
        "javax.swing.plaf.basic.BasicOptionPaneUI.resetInputValue()"
    ],
    "java.awt.geom.point2d.double.getx": [
        "java.awt.geom.Point2D.Double.getX()"
    ],
    "javax.swing.rowfilter.numberfilter": [
        "javax.swing.RowFilter.numberFilter(javax.swing.RowFilter.ComparisonType,java.lang.Number,int...)"
    ],
    "java.lang.thread.setuncaughtexceptionhandler": [
        "java.lang.Thread.setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)"
    ],
    "javax.swing.plaf.multi.multisplitpaneui.paint": [
        "javax.swing.plaf.multi.MultiSplitPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.nio.file.directorystream.filter.accept": [
        "java.nio.file.DirectoryStream.Filter.accept(T)",
        "java.nio.file.DirectoryStream.Filter.accept(java.nio.file.DirectoryStream.Filter)"
    ],
    "javax.imageio.imagereader.removealliioreadwarninglisteners": [
        "javax.imageio.ImageReader.removeAllIIOReadWarningListeners()"
    ],
    "javax.swing.jtextpane.getstyleddocument": [
        "javax.swing.JTextPane.getStyledDocument()"
    ],
    "java.util.currency.getsymbol": [
        "java.util.Currency.getSymbol()",
        "java.util.Currency.getSymbol(java.util.Locale)"
    ],
    "javax.print.attribute.standard.jobholduntil.getcategory": [
        "javax.print.attribute.standard.JobHoldUntil.getCategory()"
    ],
    "org.xml.sax.helpers.locatorimpl.getsystemid": [
        "org.xml.sax.helpers.LocatorImpl.getSystemId()"
    ],
    "javax.swing.plaf.synth.synthtextfieldui.paint": [
        "javax.swing.plaf.synth.SynthTextFieldUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)"
    ],
    "javax.management.loading.mletmbean.getresource": [
        "javax.management.loading.MLetMBean.getResource(java.lang.String)"
    ],
    "java.util.concurrent.atomic.atomicreferencefieldupdater.accumulateandget": [
        "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.accumulateAndGet(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.function.BinaryOperator<java.util.concurrent.atomic.AtomicReferenceFieldUpdater>)",
        "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.accumulateAndGet(T,V,java.util.function.BinaryOperator<V>)"
    ],
    "javax.swing.text.html.stylesheet.getrule": [
        "javax.swing.text.html.StyleSheet.getRule(javax.swing.text.html.HTML.Tag,javax.swing.text.Element)",
        "javax.swing.text.html.StyleSheet.getRule(java.lang.String)"
    ],
    "javax.sound.sampled.clip.setlooppoints": [
        "javax.sound.sampled.Clip.setLoopPoints(int,int)"
    ],
    "javax.print.attribute.standard.jobstatereasons.getname": [
        "javax.print.attribute.standard.JobStateReasons.getName()"
    ],
    "java.lang.byte.hashcode": [
        "java.lang.Byte.hashCode(byte)",
        "java.lang.Byte.hashCode()"
    ],
    "javax.accessibility.accessibleeditabletext.paste": [
        "javax.accessibility.AccessibleEditableText.paste(int)"
    ],
    "java.nio.file.filesystemexception.getfile": [
        "java.nio.file.FileSystemException.getFile()"
    ],
    "java.nio.file.attribute.basicfileattributes.lastmodifiedtime": [
        "java.nio.file.attribute.BasicFileAttributes.lastModifiedTime()"
    ],
    "java.util.identityhashmap.size": [
        "java.util.IdentityHashMap.size()"
    ],
    "org.omg.dynamicany._dynarraystub.insert_float": [
        "org.omg.DynamicAny._DynArrayStub.insert_float(float)"
    ],
    "java.util.concurrent.completionservice.submit": [
        "java.util.concurrent.CompletionService.submit(java.util.concurrent.Callable<V>)",
        "java.util.concurrent.CompletionService.submit(java.lang.Runnable,V)",
        "java.util.concurrent.CompletionService.submit(java.lang.Runnable,java.util.concurrent.CompletionService)",
        "java.util.concurrent.CompletionService.submit(java.util.concurrent.Callable<java.util.concurrent.CompletionService>)"
    ],
    "java.security.securerandom.getprovider": [
        "java.security.SecureRandom.getProvider()"
    ],
    "java.util.linkedlist.removefirst": [
        "java.util.LinkedList.removeFirst()"
    ],
    "javax.lang.model.element.modifier.values": [
        "javax.lang.model.element.Modifier.values()"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.setselectionmode": [
        "javax.swing.tree.DefaultTreeSelectionModel.setSelectionMode(int)"
    ],
    "java.awt.image.samplemodel.getpixels": [
        "java.awt.image.SampleModel.getPixels(int,int,int,int,float[],java.awt.image.DataBuffer)",
        "java.awt.image.SampleModel.getPixels(int,int,int,int,int[],java.awt.image.DataBuffer)",
        "java.awt.image.SampleModel.getPixels(int,int,int,int,double[],java.awt.image.DataBuffer)"
    ],
    "javax.swing.jmenuitem.firemenudragmousereleased": [
        "javax.swing.JMenuItem.fireMenuDragMouseReleased(javax.swing.event.MenuDragMouseEvent)"
    ],
    "javax.lang.model.type.typekind.values": [
        "javax.lang.model.type.TypeKind.values()"
    ],
    "java.io.objectinput.available": [
        "java.io.ObjectInput.available()"
    ],
    "javax.xml.datatype.datatypefactory.newxmlgregoriancalendartime": [
        "javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendarTime(int,int,int,int)",
        "javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendarTime(int,int,int,java.math.BigDecimal,int)",
        "javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendarTime(int,int,int,int,int)"
    ],
    "java.awt.jobattributes.setdefaultselection": [
        "java.awt.JobAttributes.setDefaultSelection(java.awt.JobAttributes.DefaultSelectionType)"
    ],
    "java.awt.trayicon.messagetype.valueof": [
        "java.awt.TrayIcon.MessageType.valueOf(java.lang.String)"
    ],
    "javax.xml.ws.handler.messagecontext.getscope": [
        "javax.xml.ws.handler.MessageContext.getScope(java.lang.String)"
    ],
    "javax.swing.plaf.basic.combopopup.show": [
        "javax.swing.plaf.basic.ComboPopup.show()"
    ],
    "javax.security.auth.kerberos.kerberoskey.getprincipal": [
        "javax.security.auth.kerberos.KerberosKey.getPrincipal()"
    ],
    "javax.swing.text.html.htmlframehyperlinkevent.gettarget": [
        "javax.swing.text.html.HTMLFrameHyperlinkEvent.getTarget()"
    ],
    "javax.swing.jlayeredpane.lowestlayer": [
        "javax.swing.JLayeredPane.lowestLayer()"
    ],
    "javax.lang.model.element.typeparameterelement.getbounds": [
        "javax.lang.model.element.TypeParameterElement.getBounds()"
    ],
    "java.util.zip.deflater.getbyteswritten": [
        "java.util.zip.Deflater.getBytesWritten()"
    ],
    "javax.swing.jfilechooser.showsavedialog": [
        "javax.swing.JFileChooser.showSaveDialog(java.awt.Component)"
    ],
    "javax.sound.midi.receiver.close": [
        "javax.sound.midi.Receiver.close()"
    ],
    "javax.management.monitor.stringmonitor.getstringtocompare": [
        "javax.management.monitor.StringMonitor.getStringToCompare()"
    ],
    "javax.swing.plaf.metal.metaltheme.getcontroltextfont": [
        "javax.swing.plaf.metal.MetalTheme.getControlTextFont()"
    ],
    "javax.lang.model.util.types.boxedclass": [
        "javax.lang.model.util.Types.boxedClass(javax.lang.model.type.PrimitiveType)"
    ],
    "org.omg.dynamicany._dynarraystub.get_wstring": [
        "org.omg.DynamicAny._DynArrayStub.get_wstring()"
    ],
    "javax.xml.crypto.dsig.xmlsignature.signaturevalue.validate": [
        "javax.xml.crypto.dsig.XMLSignature.SignatureValue.validate(javax.xml.crypto.dsig.XMLValidateContext)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getsubtextfont": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getSubTextFont()"
    ],
    "java.awt.image.singlepixelpackedsamplemodel.setsamples": [
        "java.awt.image.SinglePixelPackedSampleModel.setSamples(int,int,int,int,int,int[],java.awt.image.DataBuffer)"
    ],
    "java.awt.window.processevent": [
        "java.awt.Window.processEvent(java.awt.AWTEvent)"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.getselectioncount": [
        "javax.swing.tree.DefaultTreeSelectionModel.getSelectionCount()"
    ],
    "javax.swing.defaultlistmodel.addelement": [
        "javax.swing.DefaultListModel.addElement(javax.swing.DefaultListModel)"
    ],
    "java.io.randomaccessfile.writechar": [
        "java.io.RandomAccessFile.writeChar(int)"
    ],
    "java.lang.float.valueof": [
        "java.lang.Float.valueOf(float)",
        "java.lang.Float.valueOf(java.lang.String)"
    ],
    "javax.swing.jslider.setvalueisadjusting": [
        "javax.swing.JSlider.setValueIsAdjusting(boolean)"
    ],
    "java.awt.awteventmulticaster.windowopened": [
        "java.awt.AWTEventMulticaster.windowOpened(java.awt.event.WindowEvent)"
    ],
    "java.lang.system.clearproperty": [
        "java.lang.System.clearProperty(java.lang.String)"
    ],
    "javax.xml.stream.location.getcolumnnumber": [
        "javax.xml.stream.Location.getColumnNumber()"
    ],
    "javax.swing.text.boxview.flipeastandwestatends": [
        "javax.swing.text.BoxView.flipEastAndWestAtEnds(int,javax.swing.text.Position.Bias)"
    ],
    "java.security.cert.x509crlselector.getcertificatechecking": [
        "java.security.cert.X509CRLSelector.getCertificateChecking()"
    ],
    "javax.print.streamprintservice.isdisposed": [
        "javax.print.StreamPrintService.isDisposed()"
    ],
    "javax.swing.plaf.multi.multitreeui.paint": [
        "javax.swing.plaf.multi.MultiTreeUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.xml.parsers.saxparser.getxmlreader": [
        "javax.xml.parsers.SAXParser.getXMLReader()"
    ],
    "java.util.intsummarystatistics.combine": [
        "java.util.IntSummaryStatistics.combine(java.util.IntSummaryStatistics)"
    ],
    "java.awt.keyboardfocusmanager.clearfocusowner": [
        "java.awt.KeyboardFocusManager.clearFocusOwner()"
    ],
    "javax.swing.jfilechooser.setapprovebuttontooltiptext": [
        "javax.swing.JFileChooser.setApproveButtonToolTipText(java.lang.String)"
    ],
    "java.security.digestoutputstream.setmessagedigest": [
        "java.security.DigestOutputStream.setMessageDigest(java.security.MessageDigest)"
    ],
    "java.awt.image.singlepixelpackedsamplemodel.getscanlinestride": [
        "java.awt.image.SinglePixelPackedSampleModel.getScanlineStride()"
    ],
    "javax.print.attribute.standard.printquality.getoffset": [
        "javax.print.attribute.standard.PrintQuality.getOffset()"
    ],
    "javax.xml.datatype.datatypeconfigurationexception.printstacktrace": [
        "javax.xml.datatype.DatatypeConfigurationException.printStackTrace(java.io.PrintWriter)",
        "javax.xml.datatype.DatatypeConfigurationException.printStackTrace()",
        "javax.xml.datatype.DatatypeConfigurationException.printStackTrace(java.io.PrintStream)"
    ],
    "java.net.cookiestore.remove": [
        "java.net.CookieStore.remove(java.net.URI,java.net.HttpCookie)"
    ],
    "java.text.attributedcharacteriterator.attribute.tostring": [
        "java.text.AttributedCharacterIterator.Attribute.toString()"
    ],
    "javax.print.attribute.standard.jobsheets.getname": [
        "javax.print.attribute.standard.JobSheets.getName()"
    ],
    "java.util.zip.zipoutputstream.write": [
        "java.util.zip.ZipOutputStream.write(byte[],int,int)"
    ],
    "java.awt.geom.cubiccurve2d.float.getbounds2d": [
        "java.awt.geom.CubicCurve2D.Float.getBounds2D()"
    ],
    "java.time.chrono.thaibuddhistdate.lengthofmonth": [
        "java.time.chrono.ThaiBuddhistDate.lengthOfMonth()"
    ],
    "javax.management.mbeaninfo.getattributes": [
        "javax.management.MBeanInfo.getAttributes()"
    ],
    "java.awt.list.getselectedindex": [
        "java.awt.List.getSelectedIndex()"
    ],
    "javax.swing.plaf.basic.basictreeui.createmouselistener": [
        "javax.swing.plaf.basic.BasicTreeUI.createMouseListener()"
    ],
    "java.util.resourcebundle.getlocale": [
        "java.util.ResourceBundle.getLocale()"
    ],
    "javax.sql.rowset.getmaxrows": [
        "javax.sql.RowSet.getMaxRows()"
    ],
    "java.io.objectinputstream.readunshared": [
        "java.io.ObjectInputStream.readUnshared()"
    ],
    "javax.swing.progressmonitor.getaccessiblecontext": [
        "javax.swing.ProgressMonitor.getAccessibleContext()"
    ],
    "javax.print.docprintjob.getprintservice": [
        "javax.print.DocPrintJob.getPrintService()"
    ],
    "java.awt.graphics.getfont": [
        "java.awt.Graphics.getFont()"
    ],
    "javax.swing.text.defaultformatterfactory.seteditformatter": [
        "javax.swing.text.DefaultFormatterFactory.setEditFormatter(javax.swing.JFormattedTextField.AbstractFormatter)"
    ],
    "javax.swing.jdesktoppane.getselectedframe": [
        "javax.swing.JDesktopPane.getSelectedFrame()"
    ],
    "javax.xml.soap.attachmentpart.clearcontent": [
        "javax.xml.soap.AttachmentPart.clearContent()"
    ],
    "java.awt.font.glyphvector.getpixelbounds": [
        "java.awt.font.GlyphVector.getPixelBounds(java.awt.font.FontRenderContext,float,float)"
    ],
    "javax.swing.plaf.multi.multiprogressbarui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiProgressBarUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "java.awt.image.raster.createtranslatedchild": [
        "java.awt.image.Raster.createTranslatedChild(int,int)"
    ],
    "javax.xml.bind.helpers.validationeventlocatorimpl.seturl": [
        "javax.xml.bind.helpers.ValidationEventLocatorImpl.setURL(java.net.URL)"
    ],
    "java.nio.file.securedirectorystream.deletedirectory": [
        "java.nio.file.SecureDirectoryStream.deleteDirectory(T)",
        "java.nio.file.SecureDirectoryStream.deleteDirectory(java.nio.file.SecureDirectoryStream)"
    ],
    "javax.swing.abstractbutton.fireactionperformed": [
        "javax.swing.AbstractButton.fireActionPerformed(java.awt.event.ActionEvent)"
    ],
    "javax.swing.border.titledborder.settitle": [
        "javax.swing.border.TitledBorder.setTitle(java.lang.String)"
    ],
    "javax.swing.jpasswordfield.getpassword": [
        "javax.swing.JPasswordField.getPassword()"
    ],
    "java.net.serversocket.setsocketfactory": [
        "java.net.ServerSocket.setSocketFactory(java.net.SocketImplFactory)"
    ],
    "javax.management.monitor.countermonitor.getinitthreshold": [
        "javax.management.monitor.CounterMonitor.getInitThreshold()"
    ],
    "java.util.concurrent.executors.newscheduledthreadpool": [
        "java.util.concurrent.Executors.newScheduledThreadPool(int,java.util.concurrent.ThreadFactory)",
        "java.util.concurrent.Executors.newScheduledThreadPool(int)"
    ],
    "org.omg.dynamicany._dynfixedstub.get_ulonglong": [
        "org.omg.DynamicAny._DynFixedStub.get_ulonglong()"
    ],
    "javax.swing.grouplayout.removelayoutcomponent": [
        "javax.swing.GroupLayout.removeLayoutComponent(java.awt.Component)"
    ],
    "java.time.month.from": [
        "java.time.Month.from(java.time.temporal.TemporalAccessor)"
    ],
    "javax.management.relation.roleinfo.tostring": [
        "javax.management.relation.RoleInfo.toString()"
    ],
    "java.io.objectstreamclass.getfield": [
        "java.io.ObjectStreamClass.getField(java.lang.String)"
    ],
    "javax.rmi.corba.utildelegate.islocal": [
        "javax.rmi.CORBA.UtilDelegate.isLocal(javax.rmi.CORBA.Stub)"
    ],
    "javax.swing.jviewport.computeblit": [
        "javax.swing.JViewport.computeBlit(int,int,java.awt.Point,java.awt.Point,java.awt.Dimension,java.awt.Rectangle)"
    ],
    "javax.swing.text.labelview.setpropertiesfromattributes": [
        "javax.swing.text.LabelView.setPropertiesFromAttributes()"
    ],
    "javax.swing.jcombobox.setprototypedisplayvalue": [
        "javax.swing.JComboBox.setPrototypeDisplayValue(javax.swing.JComboBox)"
    ],
    "javax.swing.text.defaultcaret.damage": [
        "javax.swing.text.DefaultCaret.damage(java.awt.Rectangle)"
    ],
    "java.time.zone.zonerules.nexttransition": [
        "java.time.zone.ZoneRules.nextTransition(java.time.Instant)"
    ],
    "java.util.function.intbinaryoperator.applyasint": [
        "java.util.function.IntBinaryOperator.applyAsInt(int,int)"
    ],
    "java.io.file.length": [
        "java.io.File.length()"
    ],
    "java.nio.charset.charsetdecoder.implreset": [
        "java.nio.charset.CharsetDecoder.implReset()"
    ],
    "java.sql.statement.setmaxrows": [
        "java.sql.Statement.setMaxRows(int)"
    ],
    "javax.management.openmbean.tabulartype.getrowtype": [
        "javax.management.openmbean.TabularType.getRowType()"
    ],
    "java.sql.datatruncation.getindex": [
        "java.sql.DataTruncation.getIndex()"
    ],
    "java.awt.graphicsdevice.getidstring": [
        "java.awt.GraphicsDevice.getIDstring()"
    ],
    "javax.imageio.stream.imageinputstream.readbit": [
        "javax.imageio.stream.ImageInputStream.readBit()"
    ],
    "javax.swing.jsplitpane.getdividersize": [
        "javax.swing.JSplitPane.getDividerSize()"
    ],
    "java.lang.string.format": [
        "java.lang.String.format(java.lang.String,java.lang.Object...)",
        "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object...)",
        "java.lang.String.format(java.lang.String,java.lang.Object)",
        "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object)"
    ],
    "org.w3c.dom.document.getinputencoding": [
        "org.w3c.dom.Document.getInputEncoding()"
    ],
    "java.awt.font.getname": [
        "java.awt.Font.getName()"
    ],
    "java.util.concurrent.threadlocalrandom.nextint": [
        "java.util.concurrent.ThreadLocalRandom.nextInt()"
    ],
    "javax.xml.stream.events.entityreference.getdeclaration": [
        "javax.xml.stream.events.EntityReference.getDeclaration()"
    ],
    "javax.management.modelmbean.modelmbean.setmodelmbeaninfo": [
        "javax.management.modelmbean.ModelMBean.setModelMBeanInfo(javax.management.modelmbean.ModelMBeanInfo)"
    ],
    "java.awt.gridlayout.layoutcontainer": [
        "java.awt.GridLayout.layoutContainer(java.awt.Container)"
    ],
    "java.io.streamtokenizer.lineno": [
        "java.io.StreamTokenizer.lineno()"
    ],
    "java.nio.charset.charsetdecoder.reset": [
        "java.nio.charset.CharsetDecoder.reset()"
    ],
    "java.util.objects.hashcode": [
        "java.util.Objects.hashCode(java.lang.Object)"
    ],
    "java.io.file.compareto": [
        "java.io.File.compareTo(java.io.File)"
    ],
    "javax.swing.jmenuitem.firemenudragmouseexited": [
        "javax.swing.JMenuItem.fireMenuDragMouseExited(javax.swing.event.MenuDragMouseEvent)"
    ],
    "javax.swing.plaf.basic.basicradiobuttonui.paint": [
        "javax.swing.plaf.basic.BasicRadioButtonUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.security.cert.certselector.match": [
        "java.security.cert.CertSelector.match(java.security.cert.Certificate)"
    ],
    "org.omg.dynamicany._dynenumstub.get_longlong": [
        "org.omg.DynamicAny._DynEnumStub.get_longlong()"
    ],
    "javax.swing.plaf.multi.multiscrollpaneui.createui": [
        "javax.swing.plaf.multi.MultiScrollPaneUI.createUI(javax.swing.JComponent)"
    ],
    "java.rmi.activation.activationgroup.setsystem": [
        "java.rmi.activation.ActivationGroup.setSystem(java.rmi.activation.ActivationSystem)"
    ],
    "java.awt.event.keyevent.setkeycode": [
        "java.awt.event.KeyEvent.setKeyCode(int)"
    ],
    "java.awt.textcomponent.removenotify": [
        "java.awt.TextComponent.removeNotify()"
    ],
    "javax.xml.transform.sourcelocator.getlinenumber": [
        "javax.xml.transform.SourceLocator.getLineNumber()"
    ],
    "java.security.cert.x509certificate.getsigalgparams": [
        "java.security.cert.X509Certificate.getSigAlgParams()"
    ],
    "javax.swing.tree.defaulttreecelleditor.addcelleditorlistener": [
        "javax.swing.tree.DefaultTreeCellEditor.addCellEditorListener(javax.swing.event.CellEditorListener)"
    ],
    "java.util.concurrent.future.cancel": [
        "java.util.concurrent.Future.cancel(boolean)"
    ],
    "java.security.acl.acl.entries": [
        "java.security.acl.Acl.entries()"
    ],
    "org.omg.corba.valuebaseholder._read": [
        "org.omg.CORBA.ValueBaseHolder._read(org.omg.CORBA.portable.InputStream)"
    ],
    "javax.swing.plaf.synth.synthbuttonui.update": [
        "javax.swing.plaf.synth.SynthButtonUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.jslider.firestatechanged": [
        "javax.swing.JSlider.fireStateChanged()"
    ],
    "java.time.offsetdatetime.withnano": [
        "java.time.OffsetDateTime.withNano(int)"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.resolveentity": [
        "org.xml.sax.helpers.XMLFilterImpl.resolveEntity(java.lang.String,java.lang.String)"
    ],
    "java.awt.window.getowner": [
        "java.awt.Window.getOwner()"
    ],
    "java.net.uri.getrawquery": [
        "java.net.URI.getRawQuery()"
    ],
    "java.awt.image.bufferedimage.coercedata": [
        "java.awt.image.BufferedImage.coerceData(boolean)"
    ],
    "javax.management.mbeanserverfactory.newmbeanserver": [
        "javax.management.MBeanServerFactory.newMBeanServer(java.lang.String)",
        "javax.management.MBeanServerFactory.newMBeanServer()"
    ],
    "java.time.localdate.lengthofmonth": [
        "java.time.LocalDate.lengthOfMonth()"
    ],
    "java.awt.textarea.getcolumns": [
        "java.awt.TextArea.getColumns()"
    ],
    "java.time.instant.atoffset": [
        "java.time.Instant.atOffset(java.time.ZoneOffset)"
    ],
    "java.security.unresolvedpermission.equals": [
        "java.security.UnresolvedPermission.equals(java.lang.Object)"
    ],
    "java.nio.file.path.getparent": [
        "java.nio.file.Path.getParent()"
    ],
    "java.time.offsetdatetime.getlong": [
        "java.time.OffsetDateTime.getLong(java.time.temporal.TemporalField)"
    ],
    "javax.print.attribute.standard.printermoreinfo.getcategory": [
        "javax.print.attribute.standard.PrinterMoreInfo.getCategory()"
    ],
    "java.util.jar.attributes.equals": [
        "java.util.jar.Attributes.equals(java.lang.Object)"
    ],
    "java.nio.charbuffer.slice": [
        "java.nio.CharBuffer.slice()"
    ],
    "java.sql.clob.setstring": [
        "java.sql.Clob.setString(long,java.lang.String)",
        "java.sql.Clob.setString(long,java.lang.String,int,int)"
    ],
    "java.util.resourcebundle.control.getnofallbackcontrol": [
        "java.util.ResourceBundle.Control.getNoFallbackControl(java.util.List<java.lang.String>)"
    ],
    "javax.swing.plaf.basic.basicsplitpanedivider.getbasicsplitpaneui": [
        "javax.swing.plaf.basic.BasicSplitPaneDivider.getBasicSplitPaneUI()"
    ],
    "java.awt.graphicsconfiguration.getnormalizingtransform": [
        "java.awt.GraphicsConfiguration.getNormalizingTransform()"
    ],
    "java.nio.channels.socketchannel.finishconnect": [
        "java.nio.channels.SocketChannel.finishConnect()"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.resetlayoutmanager": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.resetLayoutManager()"
    ],
    "javax.security.auth.callback.textinputcallback.getprompt": [
        "javax.security.auth.callback.TextInputCallback.getPrompt()"
    ],
    "javax.swing.text.plainview.updatedamage": [
        "javax.swing.text.PlainView.updateDamage(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "javax.swing.border.titledborder.gettitleposition": [
        "javax.swing.border.TitledBorder.getTitlePosition()"
    ],
    "java.beans.propertyeditormanager.findeditor": [
        "java.beans.PropertyEditorManager.findEditor(java.lang.Class<?>)"
    ],
    "javax.imageio.metadata.iiometadataformatimpl.removeelement": [
        "javax.imageio.metadata.IIOMetadataFormatImpl.removeElement(java.lang.String)"
    ],
    "javax.imageio.imagewriter.processimagestarted": [
        "javax.imageio.ImageWriter.processImageStarted(int)"
    ],
    "java.lang.securitymanager.checkpackagedefinition": [
        "java.lang.SecurityManager.checkPackageDefinition(java.lang.String)"
    ],
    "javax.print.attribute.standard.sheetcollate.getstringtable": [
        "javax.print.attribute.standard.SheetCollate.getStringTable()"
    ],
    "java.awt.font.textlayout.getleading": [
        "java.awt.font.TextLayout.getLeading()"
    ],
    "javax.xml.crypto.xmlcryptocontext.getproperty": [
        "javax.xml.crypto.XMLCryptoContext.getProperty(java.lang.String)"
    ],
    "java.awt.image.bandcombineop.getbounds2d": [
        "java.awt.image.BandCombineOp.getBounds2D(java.awt.image.Raster)"
    ],
    "java.lang.string.intern": [
        "java.lang.String.intern()"
    ],
    "java.nio.file.watchkey.cancel": [
        "java.nio.file.WatchKey.cancel()"
    ],
    "javax.swing.plaf.multi.multilabelui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiLabelUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "javax.imageio.imagereader.getformatname": [
        "javax.imageio.ImageReader.getFormatName()"
    ],
    "javax.swing.plaf.treeui.getrowforpath": [
        "javax.swing.plaf.TreeUI.getRowForPath(javax.swing.JTree,javax.swing.tree.TreePath)"
    ],
    "javax.imageio.imageio.getimagereaders": [
        "javax.imageio.ImageIO.getImageReaders(java.lang.Object)"
    ],
    "javax.swing.defaultlistselectionmodel.clone": [
        "javax.swing.DefaultListSelectionModel.clone()"
    ],
    "javax.xml.ws.dispatch.invoke": [
        "javax.xml.ws.Dispatch.invoke(javax.xml.ws.Dispatch)"
    ],
    "java.util.calendar.builder.setdate": [
        "java.util.Calendar.Builder.setDate(int,int,int)"
    ],
    "java.util.zip.deflaterinputstream.close": [
        "java.util.zip.DeflaterInputStream.close()"
    ],
    "javax.xml.xpath.xpathfactory.setxpathvariableresolver": [
        "javax.xml.xpath.XPathFactory.setXPathVariableResolver(javax.xml.xpath.XPathVariableResolver)"
    ],
    "javax.swing.text.defaultcaret.repaint": [
        "javax.swing.text.DefaultCaret.repaint()"
    ],
    "java.awt.component.repaint": [
        "java.awt.Component.repaint(long,int,int,int,int)",
        "java.awt.Component.repaint()",
        "java.awt.Component.repaint(int,int,int,int)",
        "java.awt.Component.repaint(long)"
    ],
    "java.util.optionalint.empty": [
        "java.util.OptionalInt.empty()"
    ],
    "javax.swing.plaf.synth.synthdesktopiconui.getcontext": [
        "javax.swing.plaf.synth.SynthDesktopIconUI.getContext(javax.swing.JComponent)"
    ],
    "org.w3c.dom.domconfiguration.getparameter": [
        "org.w3c.dom.DOMConfiguration.getParameter(java.lang.String)"
    ],
    "java.nio.file.attribute.dosfileattributeview.setarchive": [
        "java.nio.file.attribute.DosFileAttributeView.setArchive(boolean)"
    ],
    "javax.swing.jtextfield.getaccessiblecontext": [
        "javax.swing.JTextField.getAccessibleContext()"
    ],
    "java.sql.databasemetadata.getcolumnprivileges": [
        "java.sql.DatabaseMetaData.getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
    ],
    "javax.xml.bind.validationevent.getmessage": [
        "javax.xml.bind.ValidationEvent.getMessage()"
    ],
    "java.security.signature.initverify": [
        "java.security.Signature.initVerify(java.security.cert.Certificate)",
        "java.security.Signature.initVerify(java.security.PublicKey)"
    ],
    "javax.swing.jsplitpane.getmaximumdividerlocation": [
        "javax.swing.JSplitPane.getMaximumDividerLocation()"
    ],
    "javax.sql.rowset.baserowset.initparams": [
        "javax.sql.rowset.BaseRowSet.initParams()"
    ],
    "javax.swing.plaf.synth.synthtreeui.paintverticalpartofleg": [
        "javax.swing.plaf.synth.SynthTreeUI.paintVerticalPartOfLeg(java.awt.Graphics,java.awt.Rectangle,java.awt.Insets,javax.swing.tree.TreePath)"
    ],
    "java.util.calendar.getleastmaximum": [
        "java.util.Calendar.getLeastMaximum(int)"
    ],
    "javax.xml.soap.soapfault.setfaultstring": [
        "javax.xml.soap.SOAPFault.setFaultString(java.lang.String)",
        "javax.xml.soap.SOAPFault.setFaultString(java.lang.String,java.util.Locale)"
    ],
    "javax.swing.jtree.expandrow": [
        "javax.swing.JTree.expandRow(int)"
    ],
    "javax.print.attribute.standard.jobstate.getstringtable": [
        "javax.print.attribute.standard.JobState.getStringTable()"
    ],
    "javax.sound.sampled.booleancontrol.setvalue": [
        "javax.sound.sampled.BooleanControl.setValue(boolean)"
    ],
    "org.w3c.dom.events.eventlistener.handleevent": [
        "org.w3c.dom.events.EventListener.handleEvent(org.w3c.dom.events.Event)"
    ],
    "java.util.optionaldouble.tostring": [
        "java.util.OptionalDouble.toString()"
    ],
    "javax.swing.imageicon.painticon": [
        "javax.swing.ImageIcon.paintIcon(java.awt.Component,java.awt.Graphics,int,int)"
    ],
    "javax.xml.soap.attachmentpart.getmimeheader": [
        "javax.xml.soap.AttachmentPart.getMimeHeader(java.lang.String)"
    ],
    "java.util.collection.toarray": [
        "java.util.Collection.toArray(T[])",
        "java.util.Collection.toArray()"
    ],
    "javax.swing.jframe.processwindowevent": [
        "javax.swing.JFrame.processWindowEvent(java.awt.event.WindowEvent)"
    ],
    "javax.sound.sampled.spi.audiofilereader.getaudiofileformat": [
        "javax.sound.sampled.spi.AudioFileReader.getAudioFileFormat(java.io.File)",
        "javax.sound.sampled.spi.AudioFileReader.getAudioFileFormat(java.net.URL)",
        "javax.sound.sampled.spi.AudioFileReader.getAudioFileFormat(java.io.InputStream)"
    ],
    "java.awt.font.linemetrics.getbaselineoffsets": [
        "java.awt.font.LineMetrics.getBaselineOffsets()"
    ],
    "java.time.offsetdatetime.plus": [
        "java.time.OffsetDateTime.plus(java.time.temporal.TemporalAmount)",
        "java.time.OffsetDateTime.plus(long,java.time.temporal.TemporalUnit)"
    ],
    "org.omg.corba.object._request": [
        "org.omg.CORBA.Object._request(java.lang.String)"
    ],
    "javax.swing.plaf.metal.metaltheme.gettexthighlightcolor": [
        "javax.swing.plaf.metal.MetalTheme.getTextHighlightColor()"
    ],
    "javax.imageio.metadata.iiometadataformat.getattributedefaultvalue": [
        "javax.imageio.metadata.IIOMetadataFormat.getAttributeDefaultValue(java.lang.String,java.lang.String)"
    ],
    "java.awt.menucomponent.dispatchevent": [
        "java.awt.MenuComponent.dispatchEvent(java.awt.AWTEvent)"
    ],
    "javax.management.relation.roleinfo.getrefmbeanclassname": [
        "javax.management.relation.RoleInfo.getRefMBeanClassName()"
    ],
    "javax.print.attribute.standard.mediaprintablearea.getprintablearea": [
        "javax.print.attribute.standard.MediaPrintableArea.getPrintableArea(int)"
    ],
    "java.util.concurrent.concurrentmap.replace": [
        "java.util.concurrent.ConcurrentMap.replace(java.util.concurrent.ConcurrentMap,java.util.concurrent.ConcurrentMap,java.util.concurrent.ConcurrentMap)",
        "java.util.concurrent.ConcurrentMap.replace(java.util.concurrent.ConcurrentMap,java.util.concurrent.ConcurrentMap)",
        "java.util.concurrent.ConcurrentMap.replace(K,V,V)",
        "java.util.concurrent.ConcurrentMap.replace(K,V)"
    ],
    "javax.management.query.times": [
        "javax.management.Query.times(javax.management.ValueExp,javax.management.ValueExp)"
    ],
    "java.awt.image.singlepixelpackedsamplemodel.setpixel": [
        "java.awt.image.SinglePixelPackedSampleModel.setPixel(int,int,int[],java.awt.image.DataBuffer)"
    ],
    "java.awt.polygon.intersects": [
        "java.awt.Polygon.intersects(java.awt.geom.Rectangle2D)",
        "java.awt.Polygon.intersects(double,double,double,double)"
    ],
    "java.time.chrono.japanesedate.getchronology": [
        "java.time.chrono.JapaneseDate.getChronology()"
    ],
    "javax.swing.text.asyncboxview.setleftinset": [
        "javax.swing.text.AsyncBoxView.setLeftInset(float)"
    ],
    "java.util.concurrent.locks.reentrantlock.lock": [
        "java.util.concurrent.locks.ReentrantLock.lock()"
    ],
    "javax.net.ssl.certpathtrustmanagerparameters.getparameters": [
        "javax.net.ssl.CertPathTrustManagerParameters.getParameters()"
    ],
    "java.io.randomaccessfile.readboolean": [
        "java.io.RandomAccessFile.readBoolean()"
    ],
    "javax.swing.joptionpane.showinternalmessagedialog": [
        "javax.swing.JOptionPane.showInternalMessageDialog(java.awt.Component,java.lang.Object)",
        "javax.swing.JOptionPane.showInternalMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)",
        "javax.swing.JOptionPane.showInternalMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int,javax.swing.Icon)"
    ],
    "java.awt.point.gety": [
        "java.awt.Point.getY()"
    ],
    "javax.crypto.cipherinputstream.read": [
        "javax.crypto.CipherInputStream.read()",
        "javax.crypto.CipherInputStream.read(byte[],int,int)"
    ],
    "javax.xml.bind.datatypeconverterinterface.printshort": [
        "javax.xml.bind.DatatypeConverterInterface.printShort(short)"
    ],
    "java.time.dayofweek.get": [
        "java.time.DayOfWeek.get(java.time.temporal.TemporalField)"
    ],
    "java.lang.stacktraceelement.getclassname": [
        "java.lang.StackTraceElement.getClassName()"
    ],
    "java.lang.management.runtimemxbean.getmanagementspecversion": [
        "java.lang.management.RuntimeMXBean.getManagementSpecVersion()"
    ],
    "javax.sql.rowset.baserowset.setusername": [
        "javax.sql.rowset.BaseRowSet.setUsername(java.lang.String)"
    ],
    "javax.swing.text.view.breakview": [
        "javax.swing.text.View.breakView(int,int,float,float)"
    ],
    "java.lang.thread.setdefaultuncaughtexceptionhandler": [
        "java.lang.Thread.setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)"
    ],
    "java.security.interfaces.rsamultiprimeprivatecrtkey.getpublicexponent": [
        "java.security.interfaces.RSAMultiPrimePrivateCrtKey.getPublicExponent()"
    ],
    "java.math.mathcontext.getroundingmode": [
        "java.math.MathContext.getRoundingMode()"
    ],
    "javax.swing.text.styleconstants.getfontsize": [
        "javax.swing.text.StyleConstants.getFontSize(javax.swing.text.AttributeSet)"
    ],
    "javax.swing.plaf.textui.geteditorkit": [
        "javax.swing.plaf.TextUI.getEditorKit(javax.swing.text.JTextComponent)"
    ],
    "java.math.biginteger.bytevalueexact": [
        "java.math.BigInteger.byteValueExact()"
    ],
    "javax.management.monitor.gaugemonitormbean.getnotifyhigh": [
        "javax.management.monitor.GaugeMonitorMBean.getNotifyHigh()"
    ],
    "javax.print.attribute.standard.jobname.getname": [
        "javax.print.attribute.standard.JobName.getName()"
    ],
    "java.text.breakiterator.settext": [
        "java.text.BreakIterator.setText(java.lang.String)",
        "java.text.BreakIterator.setText(java.text.CharacterIterator)"
    ],
    "org.omg.dynamicany._dynanystub.insert_wstring": [
        "org.omg.DynamicAny._DynAnyStub.insert_wstring(java.lang.String)"
    ],
    "javax.imageio.stream.fileimageinputstream.length": [
        "javax.imageio.stream.FileImageInputStream.length()"
    ],
    "org.omg.corba.portable.inputstream.read_typecode": [
        "org.omg.CORBA.portable.InputStream.read_TypeCode()"
    ],
    "java.nio.file.attribute.userdefinedfileattributeview.list": [
        "java.nio.file.attribute.UserDefinedFileAttributeView.list()"
    ],
    "javax.swing.jlabel.setui": [
        "javax.swing.JLabel.setUI(javax.swing.plaf.LabelUI)"
    ],
    "java.awt.image.colorconvertop.getrenderinghints": [
        "java.awt.image.ColorConvertOp.getRenderingHints()"
    ],
    "javax.xml.soap.soapheader.examineheaderelements": [
        "javax.xml.soap.SOAPHeader.examineHeaderElements(java.lang.String)"
    ],
    "java.awt.window.setmodalexclusiontype": [
        "java.awt.Window.setModalExclusionType(java.awt.Dialog.ModalExclusionType)"
    ],
    "java.security.keystore.entry.attribute.getname": [
        "java.security.KeyStore.Entry.Attribute.getName()"
    ],
    "javax.swing.text.html.htmlwriter.output": [
        "javax.swing.text.html.HTMLWriter.output(char[],int,int)"
    ],
    "java.util.concurrent.locks.abstractqueuedsynchronizer.getstate": [
        "java.util.concurrent.locks.AbstractQueuedSynchronizer.getState()"
    ],
    "javax.lang.model.util.elementkindvisitor6.visittypeasclass": [
        "javax.lang.model.util.ElementKindVisitor6.visitTypeAsClass(javax.lang.model.element.TypeElement,javax.lang.model.util.ElementKindVisitor6)"
    ],
    "javax.swing.jlist.fireselectionvaluechanged": [
        "javax.swing.JList.fireSelectionValueChanged(int,int,boolean)"
    ],
    "javax.management.relation.relationservicembean.getrole": [
        "javax.management.relation.RelationServiceMBean.getRole(java.lang.String,java.lang.String)"
    ],
    "org.omg.portableinterceptor.clientrequestinfooperations.add_request_service_context": [
        "org.omg.PortableInterceptor.ClientRequestInfoOperations.add_request_service_context(org.omg.IOP.ServiceContext,boolean)"
    ],
    "java.sql.databasemetadata.getmaxcursornamelength": [
        "java.sql.DatabaseMetaData.getMaxCursorNameLength()"
    ],
    "javax.swing.plaf.basic.basictreeui.paintrow": [
        "javax.swing.plaf.basic.BasicTreeUI.paintRow(java.awt.Graphics,java.awt.Rectangle,java.awt.Insets,java.awt.Rectangle,javax.swing.tree.TreePath,int,boolean,boolean,boolean)"
    ],
    "java.beans.propertychangesupport.fireindexedpropertychange": [
        "java.beans.PropertyChangeSupport.fireIndexedPropertyChange(java.lang.String,int,int,int)",
        "java.beans.PropertyChangeSupport.fireIndexedPropertyChange(java.lang.String,int,java.lang.Object,java.lang.Object)",
        "java.beans.PropertyChangeSupport.fireIndexedPropertyChange(java.lang.String,int,boolean,boolean)"
    ],
    "org.omg.corba.domainmanageroperations.get_domain_policy": [
        "org.omg.CORBA.DomainManagerOperations.get_domain_policy(int)"
    ],
    "java.lang.management.threadmxbean.getthreadcputime": [
        "java.lang.management.ThreadMXBean.getThreadCpuTime(long)"
    ],
    "java.lang.threadgroup.setdaemon": [
        "java.lang.ThreadGroup.setDaemon(boolean)"
    ],
    "java.util.bitset.and": [
        "java.util.BitSet.and(java.util.BitSet)"
    ],
    "javax.naming.directory.searchresult.setattributes": [
        "javax.naming.directory.SearchResult.setAttributes(javax.naming.directory.Attributes)"
    ],
    "java.awt.container.paramstring": [
        "java.awt.Container.paramString()"
    ],
    "java.util.abstractmap.simpleentry.equals": [
        "java.util.AbstractMap.SimpleEntry.equals(java.lang.Object)"
    ],
    "java.time.format.decimalstyle.withzerodigit": [
        "java.time.format.DecimalStyle.withZeroDigit(char)"
    ],
    "javax.imageio.imagetranscoder.convertstreammetadata": [
        "javax.imageio.ImageTranscoder.convertStreamMetadata(javax.imageio.metadata.IIOMetadata,javax.imageio.ImageWriteParam)"
    ],
    "org.omg.dynamicany._dynvaluestub.type": [
        "org.omg.DynamicAny._DynValueStub.type()"
    ],
    "java.io.fileoutputstream.finalize": [
        "java.io.FileOutputStream.finalize()"
    ],
    "java.util.treeset.spliterator": [
        "java.util.TreeSet.spliterator()"
    ],
    "org.omg.dynamicany._dynenumstub.insert_boolean": [
        "org.omg.DynamicAny._DynEnumStub.insert_boolean(boolean)"
    ],
    "org.omg.dynamicany._dynanystub.type": [
        "org.omg.DynamicAny._DynAnyStub.type()"
    ],
    "javax.swing.text.html.htmldocument.setouterhtml": [
        "javax.swing.text.html.HTMLDocument.setOuterHTML(javax.swing.text.Element,java.lang.String)"
    ],
    "java.lang.reflect.field.tostring": [
        "java.lang.reflect.Field.toString()"
    ],
    "javax.swing.tree.defaultmutabletreenode.getpath": [
        "javax.swing.tree.DefaultMutableTreeNode.getPath()"
    ],
    "java.lang.management.garbagecollectormxbean.getcollectioncount": [
        "java.lang.management.GarbageCollectorMXBean.getCollectionCount()"
    ],
    "javax.swing.text.glyphview.glyphpainter.getnextvisualpositionfrom": [
        "javax.swing.text.GlyphView.GlyphPainter.getNextVisualPositionFrom(javax.swing.text.GlyphView,int,javax.swing.text.Position.Bias,java.awt.Shape,int,javax.swing.text.Position.Bias[])"
    ],
    "org.omg.dynamicany._dynarraystub.insert_octet": [
        "org.omg.DynamicAny._DynArrayStub.insert_octet(byte)"
    ],
    "java.lang.system.load": [
        "java.lang.System.load(java.lang.String)"
    ],
    "org.xml.sax.helpers.xmlreaderadapter.startelement": [
        "org.xml.sax.helpers.XMLReaderAdapter.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
    ],
    "java.time.chrono.japanesechronology.eraof": [
        "java.time.chrono.JapaneseChronology.eraOf(int)"
    ],
    "org.omg.corba.completionstatus.value": [
        "org.omg.CORBA.CompletionStatus.value()"
    ],
    "java.awt.image.raster.createbandedraster": [
        "java.awt.image.Raster.createBandedRaster(int,int,int,int,java.awt.Point)",
        "java.awt.image.Raster.createBandedRaster(java.awt.image.DataBuffer,int,int,int,int[],int[],java.awt.Point)",
        "java.awt.image.Raster.createBandedRaster(int,int,int,int,int[],int[],java.awt.Point)"
    ],
    "java.awt.menuitem.isenabled": [
        "java.awt.MenuItem.isEnabled()"
    ],
    "javax.swing.abstractbutton.setrollovericon": [
        "javax.swing.AbstractButton.setRolloverIcon(javax.swing.Icon)"
    ],
    "javax.xml.transform.sax.saxresult.setlexicalhandler": [
        "javax.xml.transform.sax.SAXResult.setLexicalHandler(org.xml.sax.ext.LexicalHandler)"
    ],
    "java.net.uri.relativize": [
        "java.net.URI.relativize(java.net.URI)"
    ],
    "java.util.timezone.indaylighttime": [
        "java.util.TimeZone.inDaylightTime(java.util.Date)"
    ],
    "java.awt.geom.path2d.createtransformedshape": [
        "java.awt.geom.Path2D.createTransformedShape(java.awt.geom.AffineTransform)"
    ],
    "javax.crypto.exemptionmechanism.iscryptoallowed": [
        "javax.crypto.ExemptionMechanism.isCryptoAllowed(java.security.Key)"
    ],
    "javax.swing.rowsorter.setsortkeys": [
        "javax.swing.RowSorter.setSortKeys(java.util.List<? extends javax.swing.RowSorter.SortKey>)"
    ],
    "javax.swing.plaf.synth.synthmenuitemui.getcontext": [
        "javax.swing.plaf.synth.SynthMenuItemUI.getContext(javax.swing.JComponent)"
    ],
    "org.omg.dynamicany._dynenumstub.get_any": [
        "org.omg.DynamicAny._DynEnumStub.get_any()"
    ],
    "javax.swing.plaf.multi.multimenuitemui.contains": [
        "javax.swing.plaf.multi.MultiMenuItemUI.contains(javax.swing.JComponent,int,int)"
    ],
    "javax.swing.jprogressbar.getorientation": [
        "javax.swing.JProgressBar.getOrientation()"
    ],
    "java.nio.file.attribute.posixfilepermissions.asfileattribute": [
        "java.nio.file.attribute.PosixFilePermissions.asFileAttribute(java.util.Set<java.nio.file.attribute.PosixFilePermission>)"
    ],
    "javax.swing.jpopupmenu.createactioncomponent": [
        "javax.swing.JPopupMenu.createActionComponent(javax.swing.Action)"
    ],
    "javax.swing.jmenu.applycomponentorientation": [
        "javax.swing.JMenu.applyComponentOrientation(java.awt.ComponentOrientation)"
    ],
    "java.awt.image.indexcolormodel.getalphas": [
        "java.awt.image.IndexColorModel.getAlphas(byte[])"
    ],
    "javax.swing.event.tablecolumnmodelevent.gettoindex": [
        "javax.swing.event.TableColumnModelEvent.getToIndex()"
    ],
    "javax.swing.jlist.getselectedvalueslist": [
        "javax.swing.JList.getSelectedValuesList()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintradiobuttonbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintRadioButtonBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.awt.scrollpane.setlayout": [
        "java.awt.ScrollPane.setLayout(java.awt.LayoutManager)"
    ],
    "java.lang.strictmath.sinh": [
        "java.lang.StrictMath.sinh(double)"
    ],
    "javax.net.ssl.httpsurlconnection.sethostnameverifier": [
        "javax.net.ssl.HttpsURLConnection.setHostnameVerifier(javax.net.ssl.HostnameVerifier)"
    ],
    "javax.swing.jviewport.updateui": [
        "javax.swing.JViewport.updateUI()"
    ],
    "javax.net.ssl.sslengine.getpeerport": [
        "javax.net.ssl.SSLEngine.getPeerPort()"
    ],
    "org.omg.dynamicany.dynanyoperations.assign": [
        "org.omg.DynamicAny.DynAnyOperations.assign(org.omg.DynamicAny.DynAny)"
    ],
    "javax.management.monitor.monitornotification.getobservedattribute": [
        "javax.management.monitor.MonitorNotification.getObservedAttribute()"
    ],
    "javax.management.remote.jmxauthenticator.authenticate": [
        "javax.management.remote.JMXAuthenticator.authenticate(java.lang.Object)"
    ],
    "java.io.file.getfreespace": [
        "java.io.File.getFreeSpace()"
    ],
    "javax.naming.event.namingevent.getoldbinding": [
        "javax.naming.event.NamingEvent.getOldBinding()"
    ],
    "java.awt.dnd.droptarget.getdefaultactions": [
        "java.awt.dnd.DropTarget.getDefaultActions()"
    ],
    "javax.sound.midi.spi.midifilewriter.write": [
        "javax.sound.midi.spi.MidiFileWriter.write(javax.sound.midi.Sequence,int,java.io.OutputStream)",
        "javax.sound.midi.spi.MidiFileWriter.write(javax.sound.midi.Sequence,int,java.io.File)"
    ],
    "javax.swing.plaf.synth.synthtextpaneui.createui": [
        "javax.swing.plaf.synth.SynthTextPaneUI.createUI(javax.swing.JComponent)"
    ],
    "javax.management.mbeaninfo.getnotifications": [
        "javax.management.MBeanInfo.getNotifications()"
    ],
    "java.lang.thread.tostring": [
        "java.lang.Thread.toString()"
    ],
    "java.awt.dnd.dragsource.createdefaultdraggesturerecognizer": [
        "java.awt.dnd.DragSource.createDefaultDragGestureRecognizer(java.awt.Component,int,java.awt.dnd.DragGestureListener)"
    ],
    "javax.xml.stream.xmleventreader.getproperty": [
        "javax.xml.stream.XMLEventReader.getProperty(java.lang.String)"
    ],
    "org.xml.sax.contenthandler.enddocument": [
        "org.xml.sax.ContentHandler.endDocument()"
    ],
    "javax.activation.mimetypeparameterlist.set": [
        "javax.activation.MimeTypeParameterList.set(java.lang.String,java.lang.String)"
    ],
    "javax.swing.undo.abstractundoableedit.getundopresentationname": [
        "javax.swing.undo.AbstractUndoableEdit.getUndoPresentationName()"
    ],
    "java.security.provider.entryset": [
        "java.security.Provider.entrySet()"
    ],
    "java.awt.image.renderable.parameterblock.addsource": [
        "java.awt.image.renderable.ParameterBlock.addSource(java.lang.Object)"
    ],
    "javax.swing.text.defaultstyleddocument.insert": [
        "javax.swing.text.DefaultStyledDocument.insert(int,javax.swing.text.DefaultStyledDocument.ElementSpec[])"
    ],
    "javax.swing.text.html.imageview.paint": [
        "javax.swing.text.html.ImageView.paint(java.awt.Graphics,java.awt.Shape)"
    ],
    "javax.print.attribute.standard.numberup.getname": [
        "javax.print.attribute.standard.NumberUp.getName()"
    ],
    "javax.naming.directory.basicattribute.add": [
        "javax.naming.directory.BasicAttribute.add(java.lang.Object)"
    ],
    "javax.swing.joptionpane.getoptiontype": [
        "javax.swing.JOptionPane.getOptionType()"
    ],
    "org.xml.sax.xmlreader.getproperty": [
        "org.xml.sax.XMLReader.getProperty(java.lang.String)"
    ],
    "org.omg.portableinterceptor.policyfactoryoperations.create_policy": [
        "org.omg.PortableInterceptor.PolicyFactoryOperations.create_policy(int,org.omg.CORBA.Any)"
    ],
    "java.nio.file.watchservice.close": [
        "java.nio.file.WatchService.close()"
    ],
    "java.util.locale.languagerange.getrange": [
        "java.util.Locale.LanguageRange.getRange()"
    ],
    "javax.swing.plaf.multi.multibuttonui.update": [
        "javax.swing.plaf.multi.MultiButtonUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.jformattedtextfield.abstractformatter.stringtovalue": [
        "javax.swing.JFormattedTextField.AbstractFormatter.stringToValue(java.lang.String)"
    ],
    "java.util.arraylist.clone": [
        "java.util.ArrayList.clone()"
    ],
    "java.security.cert.pkixrevocationchecker.setocspextensions": [
        "java.security.cert.PKIXRevocationChecker.setOcspExtensions(java.util.List<java.security.cert.Extension>)"
    ],
    "javax.lang.model.element.elementkind.valueof": [
        "javax.lang.model.element.ElementKind.valueOf(java.lang.String)"
    ],
    "java.net.interfaceaddress.getbroadcast": [
        "java.net.InterfaceAddress.getBroadcast()"
    ],
    "java.util.concurrent.completionstage.thenacceptbothasync": [
        "java.util.concurrent.CompletionStage.thenAcceptBothAsync(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiConsumer<? super,? super U>,java.util.concurrent.Executor)",
        "java.util.concurrent.CompletionStage.thenAcceptBothAsync(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiConsumer<? super,? super U>)"
    ],
    "javax.imageio.imagereader.read": [
        "javax.imageio.ImageReader.read(int,javax.imageio.ImageReadParam)",
        "javax.imageio.ImageReader.read(int)"
    ],
    "java.awt.desktop.issupported": [
        "java.awt.Desktop.isSupported(java.awt.Desktop.Action)"
    ],
    "javax.swing.plaf.multi.multitableui.installui": [
        "javax.swing.plaf.multi.MultiTableUI.installUI(javax.swing.JComponent)"
    ],
    "java.sql.databasemetadata.getclientinfoproperties": [
        "java.sql.DatabaseMetaData.getClientInfoProperties()"
    ],
    "javax.xml.transform.transformerfactory.setattribute": [
        "javax.xml.transform.TransformerFactory.setAttribute(java.lang.String,java.lang.Object)"
    ],
    "org.xml.sax.contenthandler.setdocumentlocator": [
        "org.xml.sax.ContentHandler.setDocumentLocator(org.xml.sax.Locator)"
    ],
    "org.omg.dynamicany._dynsequencestub.set_length": [
        "org.omg.DynamicAny._DynSequenceStub.set_length(int)"
    ],
    "javax.naming.name.getsuffix": [
        "javax.naming.Name.getSuffix(int)"
    ],
    "javax.naming.directory.searchcontrols.gettimelimit": [
        "javax.naming.directory.SearchControls.getTimeLimit()"
    ],
    "javax.xml.bind.datatypeconverterinterface.parsebase64binary": [
        "javax.xml.bind.DatatypeConverterInterface.parseBase64Binary(java.lang.String)"
    ],
    "javax.lang.model.element.typeelement.gettypeparameters": [
        "javax.lang.model.element.TypeElement.getTypeParameters()"
    ],
    "javax.swing.table.abstracttablemodel.firetablerowsdeleted": [
        "javax.swing.table.AbstractTableModel.fireTableRowsDeleted(int,int)"
    ],
    "java.util.enummap.get": [
        "java.util.EnumMap.get(java.lang.Object)"
    ],
    "java.nio.file.filestore.name": [
        "java.nio.file.FileStore.name()"
    ],
    "javax.sql.rowset.baserowset.setmaxfieldsize": [
        "javax.sql.rowset.BaseRowSet.setMaxFieldSize(int)"
    ],
    "javax.swing.jviewport.getaccessiblecontext": [
        "javax.swing.JViewport.getAccessibleContext()"
    ],
    "java.beans.beancontext.beancontextservicerevokedevent.getsourceasbeancontextservices": [
        "java.beans.beancontext.BeanContextServiceRevokedEvent.getSourceAsBeanContextServices()"
    ],
    "javax.swing.desktopmanager.endresizingframe": [
        "javax.swing.DesktopManager.endResizingFrame(javax.swing.JComponent)"
    ],
    "java.util.queue.add": [
        "java.util.Queue.add(E)",
        "java.util.Queue.add(java.util.Queue)"
    ],
    "javax.swing.jrootpane.getglasspane": [
        "javax.swing.JRootPane.getGlassPane()"
    ],
    "java.text.fieldposition.setendindex": [
        "java.text.FieldPosition.setEndIndex(int)"
    ],
    "javax.management.jmx.newmxbeanproxy": [
        "javax.management.JMX.newMXBeanProxy(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class<T>,boolean)",
        "javax.management.JMX.newMXBeanProxy(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class<T>)"
    ],
    "java.awt.image.rasterop.filter": [
        "java.awt.image.RasterOp.filter(java.awt.image.Raster,java.awt.image.WritableRaster)"
    ],
    "java.security.accesscontrolcontext.checkpermission": [
        "java.security.AccessControlContext.checkPermission(java.security.Permission)"
    ],
    "javax.management.remote.rmi.rmiconnection.getobjectinstance": [
        "javax.management.remote.rmi.RMIConnection.getObjectInstance(javax.management.ObjectName,javax.security.auth.Subject)"
    ],
    "java.util.resourcebundle.control.tobundlename": [
        "java.util.ResourceBundle.Control.toBundleName(java.lang.String,java.util.Locale)"
    ],
    "javax.swing.plaf.basic.basicfilechooserui.setdirectoryselected": [
        "javax.swing.plaf.basic.BasicFileChooserUI.setDirectorySelected(boolean)"
    ],
    "java.awt.image.lookuptable.getoffset": [
        "java.awt.image.LookupTable.getOffset()"
    ],
    "java.util.zip.deflaterinputstream.read": [
        "java.util.zip.DeflaterInputStream.read(byte[],int,int)",
        "java.util.zip.DeflaterInputStream.read()"
    ],
    "javax.activation.datacontenthandler.gettransferdataflavors": [
        "javax.activation.DataContentHandler.getTransferDataFlavors()"
    ],
    "javax.swing.text.editorkit.getcontenttype": [
        "javax.swing.text.EditorKit.getContentType()"
    ],
    "java.time.temporal.valuerange.getminimum": [
        "java.time.temporal.ValueRange.getMinimum()"
    ],
    "java.nio.file.spi.filesystemprovider.deleteifexists": [
        "java.nio.file.spi.FileSystemProvider.deleteIfExists(java.nio.file.Path)"
    ],
    "java.time.zoneddatetime.with": [
        "java.time.ZonedDateTime.with(java.time.temporal.TemporalAdjuster)",
        "java.time.ZonedDateTime.with(java.time.temporal.TemporalField,long)"
    ],
    "java.util.concurrent.completionstage.exceptionally": [
        "java.util.concurrent.CompletionStage.exceptionally(,? extends java.util.concurrent.CompletionStage>)",
        "java.util.concurrent.CompletionStage.exceptionally(,? extends T>)"
    ],
    "javax.print.attribute.enumsyntax.tostring": [
        "javax.print.attribute.EnumSyntax.toString()"
    ],
    "java.time.chrono.chronolocaldatetime.atzone": [
        "java.time.chrono.ChronoLocalDateTime.atZone(java.time.ZoneId)"
    ],
    "java.nio.channels.spi.abstractselectablechannel.register": [
        "java.nio.channels.spi.AbstractSelectableChannel.register(java.nio.channels.Selector,int,java.lang.Object)"
    ],
    "javax.security.auth.kerberos.kerberosticket.destroy": [
        "javax.security.auth.kerberos.KerberosTicket.destroy()"
    ],
    "javax.sql.rowsetmetadata.setautoincrement": [
        "javax.sql.RowSetMetaData.setAutoIncrement(int,boolean)"
    ],
    "javax.swing.text.utilities.getpositionabove": [
        "javax.swing.text.Utilities.getPositionAbove(javax.swing.text.JTextComponent,int,int)"
    ],
    "java.nio.channels.selector.keys": [
        "java.nio.channels.Selector.keys()"
    ],
    "java.time.period.of": [
        "java.time.Period.of(int,int,int)"
    ],
    "javax.sound.sampled.audioformat.getframesize": [
        "javax.sound.sampled.AudioFormat.getFrameSize()"
    ],
    "java.util.identityhashmap.keyset": [
        "java.util.IdentityHashMap.keySet()"
    ],
    "java.awt.point.setlocation": [
        "java.awt.Point.setLocation(java.awt.Point)",
        "java.awt.Point.setLocation(int,int)",
        "java.awt.Point.setLocation(double,double)"
    ],
    "java.net.url.hashcode": [
        "java.net.URL.hashCode()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintscrollbarbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintScrollBarBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",
        "javax.swing.plaf.synth.SynthPainter.paintScrollBarBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)"
    ],
    "java.util.intsummarystatistics.getcount": [
        "java.util.IntSummaryStatistics.getCount()"
    ],
    "javax.swing.plaf.basic.basictreeui.setrowheight": [
        "javax.swing.plaf.basic.BasicTreeUI.setRowHeight(int)"
    ],
    "java.beans.beancontext.beancontextservices.removebeancontextserviceslistener": [
        "java.beans.beancontext.BeanContextServices.removeBeanContextServicesListener(java.beans.beancontext.BeanContextServicesListener)"
    ],
    "javax.swing.jpopupmenu.getpopupmenulisteners": [
        "javax.swing.JPopupMenu.getPopupMenuListeners()"
    ],
    "java.lang.reflect.method.getdefaultvalue": [
        "java.lang.reflect.Method.getDefaultValue()"
    ],
    "javax.sql.rowset.rowsetfactory.createfilteredrowset": [
        "javax.sql.rowset.RowSetFactory.createFilteredRowSet()"
    ],
    "javax.print.attribute.standard.outputdeviceassigned.equals": [
        "javax.print.attribute.standard.OutputDeviceAssigned.equals(java.lang.Object)"
    ],
    "javax.swing.tree.abstractlayoutcache.getmodel": [
        "javax.swing.tree.AbstractLayoutCache.getModel()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintsliderthumbbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintSliderThumbBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)"
    ],
    "java.text.decimalformatsymbols.getinfinity": [
        "java.text.DecimalFormatSymbols.getInfinity()"
    ],
    "javax.swing.text.abstractdocument.getlisteners": [
        "javax.swing.text.AbstractDocument.getListeners(java.lang.Class<T>)"
    ],
    "javax.print.attribute.standard.pageranges.getcategory": [
        "javax.print.attribute.standard.PageRanges.getCategory()"
    ],
    "java.text.decimalformatsymbols.setinternationalcurrencysymbol": [
        "java.text.DecimalFormatSymbols.setInternationalCurrencySymbol(java.lang.String)"
    ],
    "org.omg.dynamicany._dynvaluestub.insert_typecode": [
        "org.omg.DynamicAny._DynValueStub.insert_typecode(org.omg.CORBA.TypeCode)"
    ],
    "javax.swing.spinnerdatemodel.getdate": [
        "javax.swing.SpinnerDateModel.getDate()"
    ],
    "java.nio.channels.channels.newwriter": [
        "java.nio.channels.Channels.newWriter(java.nio.channels.WritableByteChannel,java.nio.charset.CharsetEncoder,int)",
        "java.nio.channels.Channels.newWriter(java.nio.channels.WritableByteChannel,java.lang.String)"
    ],
    "javax.sound.midi.midievent.getmessage": [
        "javax.sound.midi.MidiEvent.getMessage()"
    ],
    "java.awt.awteventmulticaster.keypressed": [
        "java.awt.AWTEventMulticaster.keyPressed(java.awt.event.KeyEvent)"
    ],
    "javax.xml.ws.spi.http.httpexchange.getresponseheaders": [
        "javax.xml.ws.spi.http.HttpExchange.getResponseHeaders()"
    ],
    "javax.tools.javafileobject.kind.values": [
        "javax.tools.JavaFileObject.Kind.values()"
    ],
    "javax.swing.uimanager.getfont": [
        "javax.swing.UIManager.getFont(java.lang.Object,java.util.Locale)",
        "javax.swing.UIManager.getFont(java.lang.Object)"
    ],
    "javax.sound.midi.midichannel.setpolypressure": [
        "javax.sound.midi.MidiChannel.setPolyPressure(int,int)"
    ],
    "java.nio.file.spi.filesystemprovider.getfileattributeview": [
        "java.nio.file.spi.FileSystemProvider.getFileAttributeView(java.nio.file.Path,java.lang.Class<V>,java.nio.file.LinkOption...)",
        "java.nio.file.spi.FileSystemProvider.getFileAttributeView(java.nio.file.Path,java.lang.Class<V>,java.nio.file.LinkOption)"
    ],
    "javax.swing.transferhandler.canimport": [
        "javax.swing.TransferHandler.canImport(javax.swing.JComponent,java.awt.datatransfer.DataFlavor[])"
    ],
    "java.awt.im.inputcontext.iscompositionenabled": [
        "java.awt.im.InputContext.isCompositionEnabled()"
    ],
    "java.awt.image.samplemodel.getpixel": [
        "java.awt.image.SampleModel.getPixel(int,int,float[],java.awt.image.DataBuffer)",
        "java.awt.image.SampleModel.getPixel(int,int,double[],java.awt.image.DataBuffer)",
        "java.awt.image.SampleModel.getPixel(int,int,int[],java.awt.image.DataBuffer)"
    ],
    "javax.sound.sampled.audiofileformat.tostring": [
        "javax.sound.sampled.AudioFileFormat.toString()"
    ],
    "java.security.acl.aclentry.tostring": [
        "java.security.acl.AclEntry.toString()"
    ],
    "java.awt.awtkeystroke.getkeychar": [
        "java.awt.AWTKeyStroke.getKeyChar()"
    ],
    "java.util.abstractsequentiallist.get": [
        "java.util.AbstractSequentialList.get(int)"
    ],
    "javax.swing.jscrollbar.getadjustmentlisteners": [
        "javax.swing.JScrollBar.getAdjustmentListeners()"
    ],
    "javax.swing.filechooser.filesystemview.getsystemdisplayname": [
        "javax.swing.filechooser.FileSystemView.getSystemDisplayName(java.io.File)"
    ],
    "javax.swing.plaf.basic.basiccombopopup.createitemlistener": [
        "javax.swing.plaf.basic.BasicComboPopup.createItemListener()"
    ],
    "javax.net.ssl.sslengineresult.status.values": [
        "javax.net.ssl.SSLEngineResult.Status.values()"
    ],
    "javax.swing.text.styleconstants.getcomponent": [
        "javax.swing.text.StyleConstants.getComponent(javax.swing.text.AttributeSet)"
    ],
    "java.security.cert.x509extension.hasunsupportedcriticalextension": [
        "java.security.cert.X509Extension.hasUnsupportedCriticalExtension()"
    ],
    "java.lang.management.managementfactory.getcompilationmxbean": [
        "java.lang.management.ManagementFactory.getCompilationMXBean()"
    ],
    "javax.management.monitor.countermonitormbean.getnotify": [
        "javax.management.monitor.CounterMonitorMBean.getNotify()"
    ],
    "java.security.secureclassloader.getpermissions": [
        "java.security.SecureClassLoader.getPermissions(java.security.CodeSource)"
    ],
    "javax.imageio.iioparam.getsourcexsubsampling": [
        "javax.imageio.IIOParam.getSourceXSubsampling()"
    ],
    "javax.swing.jinternalframe.jdesktopicon.getuiclassid": [
        "javax.swing.JInternalFrame.JDesktopIcon.getUIClassID()"
    ],
    "java.io.objectoutputstream.reset": [
        "java.io.ObjectOutputStream.reset()"
    ],
    "javax.net.ssl.sslengine.setwantclientauth": [
        "javax.net.ssl.SSLEngine.setWantClientAuth(boolean)"
    ],
    "java.awt.font.glyphvector.getlogicalbounds": [
        "java.awt.font.GlyphVector.getLogicalBounds()"
    ],
    "java.util.sortedmap.entryset": [
        "java.util.SortedMap.entrySet()"
    ],
    "java.sql.resultset.updateobject": [
        "java.sql.ResultSet.updateObject(java.lang.String,java.lang.Object,java.sql.SQLType,int)",
        "java.sql.ResultSet.updateObject(java.lang.String,java.lang.Object,int)",
        "java.sql.ResultSet.updateObject(int,java.lang.Object,java.sql.SQLType)",
        "java.sql.ResultSet.updateObject(int,java.lang.Object,java.sql.SQLType,int)",
        "java.sql.ResultSet.updateObject(int,java.lang.Object,int)",
        "java.sql.ResultSet.updateObject(java.lang.String,java.lang.Object)",
        "java.sql.ResultSet.updateObject(int,java.lang.Object)",
        "java.sql.ResultSet.updateObject(java.lang.String,java.lang.Object,java.sql.SQLType)"
    ],
    "java.nio.charset.charset.compareto": [
        "java.nio.charset.Charset.compareTo(java.nio.charset.Charset)"
    ],
    "java.sql.sqlinput.readobject": [
        "java.sql.SQLInput.readObject(java.lang.Class<T>)",
        "java.sql.SQLInput.readObject()"
    ],
    "javax.xml.soap.soapfault.getfaultrole": [
        "javax.xml.soap.SOAPFault.getFaultRole()"
    ],
    "javax.imageio.imagewriteparam.setcompressiontype": [
        "javax.imageio.ImageWriteParam.setCompressionType(java.lang.String)"
    ],
    "java.awt.graphicsconfiguration.getimagecapabilities": [
        "java.awt.GraphicsConfiguration.getImageCapabilities()"
    ],
    "javax.swing.plaf.multi.multipopupmenuui.createui": [
        "javax.swing.plaf.multi.MultiPopupMenuUI.createUI(javax.swing.JComponent)"
    ],
    "javax.swing.jdialog.setrootpanecheckingenabled": [
        "javax.swing.JDialog.setRootPaneCheckingEnabled(boolean)"
    ],
    "java.security.provider.computeifpresent": [
        "java.security.Provider.computeIfPresent(java.lang.Object,java.util.function.BiFunction<? super,? super,? extends java.lang.Object>)"
    ],
    "java.util.concurrent.concurrentlinkeddeque.size": [
        "java.util.concurrent.ConcurrentLinkedDeque.size()"
    ],
    "java.awt.filedialog.getdirectory": [
        "java.awt.FileDialog.getDirectory()"
    ],
    "javax.swing.inputmap.clear": [
        "javax.swing.InputMap.clear()"
    ],
    "javax.swing.jlist.getui": [
        "javax.swing.JList.getUI()"
    ],
    "javax.swing.plaf.treeui.getpathforrow": [
        "javax.swing.plaf.TreeUI.getPathForRow(javax.swing.JTree,int)"
    ],
    "java.net.urlpermission.implies": [
        "java.net.URLPermission.implies(java.security.Permission)"
    ],
    "java.lang.enum.valueof": [
        "java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)"
    ],
    "java.lang.classloader.getsystemclassloader": [
        "java.lang.ClassLoader.getSystemClassLoader()"
    ],
    "javax.swing.colorchooser.abstractcolorchooserpanel.paint": [
        "javax.swing.colorchooser.AbstractColorChooserPanel.paint(java.awt.Graphics)"
    ],
    "javax.swing.plaf.basic.basiclistui.createlistselectionlistener": [
        "javax.swing.plaf.basic.BasicListUI.createListSelectionListener()"
    ],
    "javax.swing.text.abstractwriter.getcanwraplines": [
        "javax.swing.text.AbstractWriter.getCanWrapLines()"
    ],
    "javax.imageio.imagetypespecifier.createinterleaved": [
        "javax.imageio.ImageTypeSpecifier.createInterleaved(java.awt.color.ColorSpace,int[],int,boolean,boolean)"
    ],
    "javax.swing.defaultlistselectionmodel.getanchorselectionindex": [
        "javax.swing.DefaultListSelectionModel.getAnchorSelectionIndex()"
    ],
    "org.omg.dynamicany.dynsequenceoperations.set_elements": [
        "org.omg.DynamicAny.DynSequenceOperations.set_elements(org.omg.CORBA.Any[])"
    ],
    "javax.swing.text.asyncboxview.getpreferredspan": [
        "javax.swing.text.AsyncBoxView.getPreferredSpan(int)"
    ],
    "org.omg.dynamicany._dynarraystub.insert_val": [
        "org.omg.DynamicAny._DynArrayStub.insert_val(java.io.Serializable)"
    ],
    "java.lang.math.todegrees": [
        "java.lang.Math.toDegrees(double)"
    ],
    "javax.swing.table.defaulttablecellrenderer.revalidate": [
        "javax.swing.table.DefaultTableCellRenderer.revalidate()"
    ],
    "java.lang.reflect.constructor.hashcode": [
        "java.lang.reflect.Constructor.hashCode()"
    ],
    "javax.crypto.exemptionmechanism.genexemptionblob": [
        "javax.crypto.ExemptionMechanism.genExemptionBlob()",
        "javax.crypto.ExemptionMechanism.genExemptionBlob(byte[])",
        "javax.crypto.ExemptionMechanism.genExemptionBlob(byte[],int)"
    ],
    "java.security.secureclassloader.defineclass": [
        "java.security.SecureClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.CodeSource)",
        "java.security.SecureClassLoader.defineClass(java.lang.String,java.nio.ByteBuffer,java.security.CodeSource)"
    ],
    "java.net.socket.getlocalport": [
        "java.net.Socket.getLocalPort()"
    ],
    "java.util.concurrent.locks.abstractqueuedlongsynchronizer.conditionobject.awaituntil": [
        "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.awaitUntil(java.util.Date)"
    ],
    "java.util.function.intfunction.apply": [
        "java.util.function.IntFunction.apply(int)"
    ],
    "java.io.streamtokenizer.eolissignificant": [
        "java.io.StreamTokenizer.eolIsSignificant(boolean)"
    ],
    "javax.xml.soap.soapfault.getfaultreasontexts": [
        "javax.xml.soap.SOAPFault.getFaultReasonTexts()"
    ],
    "javax.naming.linkexception.setlinkresolvedname": [
        "javax.naming.LinkException.setLinkResolvedName(javax.naming.Name)"
    ],
    "java.sql.callablestatement.setobject": [
        "java.sql.CallableStatement.setObject(java.lang.String,java.lang.Object)",
        "java.sql.CallableStatement.setObject(java.lang.String,java.lang.Object,java.sql.SQLType)",
        "java.sql.CallableStatement.setObject(java.lang.String,java.lang.Object,int,int)",
        "java.sql.CallableStatement.setObject(java.lang.String,java.lang.Object,int)",
        "java.sql.CallableStatement.setObject(java.lang.String,java.lang.Object,java.sql.SQLType,int)"
    ],
    "javax.swing.jmenubar.setmargin": [
        "javax.swing.JMenuBar.setMargin(java.awt.Insets)"
    ],
    "java.lang.class.getdeclaredconstructors": [
        "java.lang.Class.getDeclaredConstructors()"
    ],
    "java.util.concurrent.atomic.atomicreference.accumulateandget": [
        "java.util.concurrent.atomic.AtomicReference.accumulateAndGet(V,java.util.function.BinaryOperator<V>)",
        "java.util.concurrent.atomic.AtomicReference.accumulateAndGet(java.util.concurrent.atomic.AtomicReference,java.util.function.BinaryOperator<java.util.concurrent.atomic.AtomicReference>)"
    ],
    "java.awt.print.printergraphics.getprinterjob": [
        "java.awt.print.PrinterGraphics.getPrinterJob()"
    ],
    "java.awt.geom.cubiccurve2d.getpathiterator": [
        "java.awt.geom.CubicCurve2D.getPathIterator(java.awt.geom.AffineTransform)",
        "java.awt.geom.CubicCurve2D.getPathIterator(java.awt.geom.AffineTransform,double)"
    ],
    "javax.crypto.cipher.init": [
        "javax.crypto.Cipher.init(int,java.security.Key,java.security.AlgorithmParameters)",
        "javax.crypto.Cipher.init(int,java.security.cert.Certificate)",
        "javax.crypto.Cipher.init(int,java.security.cert.Certificate,java.security.SecureRandom)",
        "javax.crypto.Cipher.init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)",
        "javax.crypto.Cipher.init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
        "javax.crypto.Cipher.init(int,java.security.Key,java.security.SecureRandom)",
        "javax.crypto.Cipher.init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)",
        "javax.crypto.Cipher.init(int,java.security.Key)"
    ],
    "java.util.logging.logger.warning": [
        "java.util.logging.Logger.warning(java.util.function.Supplier<java.lang.String>)",
        "java.util.logging.Logger.warning(java.lang.String)"
    ],
    "javax.swing.plaf.basic.basicdirectorymodel.removepropertychangelistener": [
        "javax.swing.plaf.basic.BasicDirectoryModel.removePropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "javax.sound.sampled.sourcedataline.open": [
        "javax.sound.sampled.SourceDataLine.open(javax.sound.sampled.AudioFormat,int)",
        "javax.sound.sampled.SourceDataLine.open(javax.sound.sampled.AudioFormat)"
    ],
    "java.awt.font.linemetrics.getleading": [
        "java.awt.font.LineMetrics.getLeading()"
    ],
    "javax.swing.jtree.firetreewillexpand": [
        "javax.swing.JTree.fireTreeWillExpand(javax.swing.tree.TreePath)"
    ],
    "java.net.socket.getreuseaddress": [
        "java.net.Socket.getReuseAddress()"
    ],
    "java.sql.sqldata.readsql": [
        "java.sql.SQLData.readSQL(java.sql.SQLInput,java.lang.String)"
    ],
    "java.util.stream.intstream.maptoobj": [
        "java.util.stream.IntStream.mapToObj(java.util.function.IntFunction<? extends U>)"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.setcontinuouslayout": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.setContinuousLayout(boolean)"
    ],
    "java.sql.sqlxml.setbinarystream": [
        "java.sql.SQLXML.setBinaryStream()"
    ],
    "javax.management.query.between": [
        "javax.management.Query.between(javax.management.ValueExp,javax.management.ValueExp,javax.management.ValueExp)"
    ],
    "org.omg.dynamicany._dynsequencestub.insert_string": [
        "org.omg.DynamicAny._DynSequenceStub.insert_string(java.lang.String)"
    ],
    "javax.swing.progressmonitor.getnote": [
        "javax.swing.ProgressMonitor.getNote()"
    ],
    "java.io.printwriter.clearerror": [
        "java.io.PrintWriter.clearError()"
    ],
    "java.time.yearmonth.plusmonths": [
        "java.time.YearMonth.plusMonths(long)"
    ],
    "javax.swing.jcombobox.fireactionevent": [
        "javax.swing.JComboBox.fireActionEvent()"
    ],
    "org.w3c.dom.nodelist.item": [
        "org.w3c.dom.NodeList.item(int)"
    ],
    "javax.swing.plaf.basic.basicarrowbutton.getdirection": [
        "javax.swing.plaf.basic.BasicArrowButton.getDirection()"
    ],
    "java.awt.button.processevent": [
        "java.awt.Button.processEvent(java.awt.AWTEvent)"
    ],
    "javax.swing.swingutilities.convertpoint": [
        "javax.swing.SwingUtilities.convertPoint(java.awt.Component,java.awt.Point,java.awt.Component)"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.getwaitqueuelength": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.getWaitQueueLength(java.util.concurrent.locks.Condition)"
    ],
    "java.nio.channels.filechannel.position": [
        "java.nio.channels.FileChannel.position()",
        "java.nio.channels.FileChannel.position(long)"
    ],
    "javax.sql.rowset.getcommand": [
        "javax.sql.RowSet.getCommand()"
    ],
    "java.awt.component.processhierarchyevent": [
        "java.awt.Component.processHierarchyEvent(java.awt.event.HierarchyEvent)"
    ],
    "java.util.properties.propertynames": [
        "java.util.Properties.propertyNames()"
    ],
    "java.awt.component.baselineresizebehavior.values": [
        "java.awt.Component.BaselineResizeBehavior.values()"
    ],
    "java.util.concurrent.locks.abstractqueuedlongsynchronizer.conditionobject.getwaitqueuelength": [
        "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.getWaitQueueLength()"
    ],
    "java.util.zip.zipinputstream.closeentry": [
        "java.util.zip.ZipInputStream.closeEntry()"
    ],
    "org.ietf.jgss.gssmanager.createname": [
        "org.ietf.jgss.GSSManager.createName(java.lang.String,org.ietf.jgss.Oid)",
        "org.ietf.jgss.GSSManager.createName(java.lang.String,org.ietf.jgss.Oid,org.ietf.jgss.Oid)",
        "org.ietf.jgss.GSSManager.createName(byte[],org.ietf.jgss.Oid)",
        "org.ietf.jgss.GSSManager.createName(byte[],org.ietf.jgss.Oid,org.ietf.jgss.Oid)"
    ],
    "java.util.concurrent.priorityblockingqueue.spliterator": [
        "java.util.concurrent.PriorityBlockingQueue.spliterator()"
    ],
    "javax.swing.jpopupmenu.show": [
        "javax.swing.JPopupMenu.show(java.awt.Component,int,int)"
    ],
    "java.awt.image.componentsamplemodel.createcompatiblesamplemodel": [
        "java.awt.image.ComponentSampleModel.createCompatibleSampleModel(int,int)"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.createdefaultnoncontinuouslayoutdivider": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.createDefaultNonContinuousLayoutDivider()"
    ],
    "javax.xml.soap.soapmessage.getsoapheader": [
        "javax.xml.soap.SOAPMessage.getSOAPHeader()"
    ],
    "javax.swing.borderfactory.createdashedborder": [
        "javax.swing.BorderFactory.createDashedBorder(java.awt.Paint,float,float,float,boolean)",
        "javax.swing.BorderFactory.createDashedBorder(java.awt.Paint)",
        "javax.swing.BorderFactory.createDashedBorder(java.awt.Paint,float,float)"
    ],
    "javax.swing.swingutilities.computeunion": [
        "javax.swing.SwingUtilities.computeUnion(int,int,int,int,java.awt.Rectangle)"
    ],
    "javax.swing.rootpanecontainer.getglasspane": [
        "javax.swing.RootPaneContainer.getGlassPane()"
    ],
    "javax.lang.model.element.annotationmirror.getannotationtype": [
        "javax.lang.model.element.AnnotationMirror.getAnnotationType()"
    ],
    "javax.security.auth.kerberos.servicepermission.getactions": [
        "javax.security.auth.kerberos.ServicePermission.getActions()"
    ],
    "java.time.offsetdatetime.timelineorder": [
        "java.time.OffsetDateTime.timeLineOrder()"
    ],
    "javax.xml.stream.xmlstreamreader.getnamespaceprefix": [
        "javax.xml.stream.XMLStreamReader.getNamespacePrefix(int)"
    ],
    "java.awt.image.databufferint.getelem": [
        "java.awt.image.DataBufferInt.getElem(int,int)"
    ],
    "java.awt.textcomponent.setcaretposition": [
        "java.awt.TextComponent.setCaretPosition(int)"
    ],
    "org.w3c.dom.events.mouseevent.getclienty": [
        "org.w3c.dom.events.MouseEvent.getClientY()"
    ],
    "javax.swing.sortingfocustraversalpolicy.getdefaultcomponent": [
        "javax.swing.SortingFocusTraversalPolicy.getDefaultComponent(java.awt.Container)"
    ],
    "java.time.chrono.thaibuddhistdate.of": [
        "java.time.chrono.ThaiBuddhistDate.of(int,int,int)"
    ],
    "javax.swing.undo.undomanager.tostring": [
        "javax.swing.undo.UndoManager.toString()"
    ],
    "org.omg.corba.orb.create_abstract_interface_tc": [
        "org.omg.CORBA.ORB.create_abstract_interface_tc(java.lang.String,java.lang.String)"
    ],
    "javax.crypto.exemptionmechanism.getinstance": [
        "javax.crypto.ExemptionMechanism.getInstance(java.lang.String)",
        "javax.crypto.ExemptionMechanism.getInstance(java.lang.String,java.security.Provider)",
        "javax.crypto.ExemptionMechanism.getInstance(java.lang.String,java.lang.String)"
    ],
    "java.awt.image.rasterop.createcompatibledestraster": [
        "java.awt.image.RasterOp.createCompatibleDestRaster(java.awt.image.Raster)"
    ],
    "javax.swing.jlayeredpane.removeall": [
        "javax.swing.JLayeredPane.removeAll()"
    ],
    "java.util.intsummarystatistics.getmin": [
        "java.util.IntSummaryStatistics.getMin()"
    ],
    "java.util.stream.collectors.joining": [
        "java.util.stream.Collectors.joining()",
        "java.util.stream.Collectors.joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)"
    ],
    "java.time.localtime.minus": [
        "java.time.LocalTime.minus(long,java.time.temporal.TemporalUnit)",
        "java.time.LocalTime.minus(java.time.temporal.TemporalAmount)"
    ],
    "java.util.vector.get": [
        "java.util.Vector.get(int)"
    ],
    "java.sql.connection.createnclob": [
        "java.sql.Connection.createNClob()"
    ],
    "java.awt.component.getfont": [
        "java.awt.Component.getFont()"
    ],
    "javax.net.ssl.sslsession.getpeercertificatechain": [
        "javax.net.ssl.SSLSession.getPeerCertificateChain()"
    ],
    "javax.xml.ws.wsaddressing.w3cendpointreferencebuilder.interfacename": [
        "javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.interfaceName(javax.xml.namespace.QName)"
    ],
    "javax.rmi.corba.valuehandler.writevalue": [
        "javax.rmi.CORBA.ValueHandler.writeValue(org.omg.CORBA.portable.OutputStream,java.io.Serializable)"
    ],
    "org.ietf.jgss.gsscredential.getname": [
        "org.ietf.jgss.GSSCredential.getName(org.ietf.jgss.Oid)",
        "org.ietf.jgss.GSSCredential.getName()"
    ],
    "java.awt.image.convolveop.getedgecondition": [
        "java.awt.image.ConvolveOp.getEdgeCondition()"
    ],
    "javax.swing.menuelement.processkeyevent": [
        "javax.swing.MenuElement.processKeyEvent(java.awt.event.KeyEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)"
    ],
    "javax.swing.text.caret.setdot": [
        "javax.swing.text.Caret.setDot(int)"
    ],
    "javax.swing.border.strokeborder.getpaint": [
        "javax.swing.border.StrokeBorder.getPaint()"
    ],
    "javax.net.ssl.httpsurlconnection.getlocalprincipal": [
        "javax.net.ssl.HttpsURLConnection.getLocalPrincipal()"
    ],
    "java.nio.file.attribute.posixfilepermission.valueof": [
        "java.nio.file.attribute.PosixFilePermission.valueOf(java.lang.String)"
    ],
    "javax.xml.datatype.duration.getxmlschematype": [
        "javax.xml.datatype.Duration.getXMLSchemaType()"
    ],
    "javax.net.ssl.trustmanagerfactory.gettrustmanagers": [
        "javax.net.ssl.TrustManagerFactory.getTrustManagers()"
    ],
    "java.security.cert.pkixrevocationchecker.getocsprespondercert": [
        "java.security.cert.PKIXRevocationChecker.getOcspResponderCert()"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.finishdraggingto": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.finishDraggingTo(int)"
    ],
    "javax.print.printservice.equals": [
        "javax.print.PrintService.equals(java.lang.Object)"
    ],
    "org.omg.corba.portable.outputstream.write_boolean_array": [
        "org.omg.CORBA.portable.OutputStream.write_boolean_array(boolean[],int,int)"
    ],
    "java.io.pipedwriter.close": [
        "java.io.PipedWriter.close()"
    ],
    "javax.swing.jviewport.setviewsize": [
        "javax.swing.JViewport.setViewSize(java.awt.Dimension)"
    ],
    "javax.activation.filedatasource.getoutputstream": [
        "javax.activation.FileDataSource.getOutputStream()"
    ],
    "java.util.concurrent.copyonwritearraylist.set": [
        "java.util.concurrent.CopyOnWriteArrayList.set(int,E)",
        "java.util.concurrent.CopyOnWriteArrayList.set(int,java.util.concurrent.CopyOnWriteArrayList)"
    ],
    "javax.swing.text.stylededitorkit.alignmentaction.actionperformed": [
        "javax.swing.text.StyledEditorKit.AlignmentAction.actionPerformed(java.awt.event.ActionEvent)"
    ],
    "javax.imageio.imageio.setcachedirectory": [
        "javax.imageio.ImageIO.setCacheDirectory(java.io.File)"
    ],
    "java.util.regex.matcher.usetransparentbounds": [
        "java.util.regex.Matcher.useTransparentBounds(boolean)"
    ],
    "javax.swing.jtree.collapserow": [
        "javax.swing.JTree.collapseRow(int)"
    ],
    "java.beans.propertyeditorsupport.gettags": [
        "java.beans.PropertyEditorSupport.getTags()"
    ],
    "java.util.function.predicate.negate": [
        "java.util.function.Predicate.negate()"
    ],
    "javax.swing.jscrollpane.getaccessiblecontext": [
        "javax.swing.JScrollPane.getAccessibleContext()"
    ],
    "java.util.zip.inflater.end": [
        "java.util.zip.Inflater.end()"
    ],
    "javax.swing.text.view.removeupdate": [
        "javax.swing.text.View.removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "org.omg.corba.request.return_value": [
        "org.omg.CORBA.Request.return_value()"
    ],
    "java.lang.character.subset.equals": [
        "java.lang.Character.Subset.equals(java.lang.Object)"
    ],
    "org.omg.cosnaming._namingcontextextstub.to_url": [
        "org.omg.CosNaming._NamingContextExtStub.to_url(java.lang.String,java.lang.String)"
    ],
    "java.time.instant.compareto": [
        "java.time.Instant.compareTo(java.time.Instant)"
    ],
    "javax.accessibility.accessiblestateset.add": [
        "javax.accessibility.AccessibleStateSet.add(javax.accessibility.AccessibleState)"
    ],
    "java.io.objectinputstream.skipbytes": [
        "java.io.ObjectInputStream.skipBytes(int)"
    ],
    "java.lang.classloader.definepackage": [
        "java.lang.ClassLoader.definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)"
    ],
    "java.time.localtime.get": [
        "java.time.LocalTime.get(java.time.temporal.TemporalField)"
    ],
    "java.lang.runtime.freememory": [
        "java.lang.Runtime.freeMemory()"
    ],
    "org.w3c.dom.characterdata.setdata": [
        "org.w3c.dom.CharacterData.setData(java.lang.String)"
    ],
    "javax.xml.parsers.documentbuilder.parse": [
        "javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream,java.lang.String)",
        "javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)",
        "javax.xml.parsers.DocumentBuilder.parse(org.xml.sax.InputSource)",
        "javax.xml.parsers.DocumentBuilder.parse(java.lang.String)",
        "javax.xml.parsers.DocumentBuilder.parse(java.io.File)"
    ],
    "javax.swing.text.caret.setblinkrate": [
        "javax.swing.text.Caret.setBlinkRate(int)"
    ],
    "javax.tools.standardlocation.valueof": [
        "javax.tools.StandardLocation.valueOf(java.lang.String)"
    ],
    "javax.swing.jsplitpane.setdividersize": [
        "javax.swing.JSplitPane.setDividerSize(int)"
    ],
    "java.time.offsetdatetime.get": [
        "java.time.OffsetDateTime.get(java.time.temporal.TemporalField)"
    ],
    "java.time.chrono.thaibuddhistdate.from": [
        "java.time.chrono.ThaiBuddhistDate.from(java.time.temporal.TemporalAccessor)"
    ],
    "javax.swing.jtextarea.getlinecount": [
        "javax.swing.JTextArea.getLineCount()"
    ],
    "java.lang.enum.compareto": [
        "java.lang.Enum.compareTo(E)",
        "java.lang.Enum.compareTo(java.lang.Enum)"
    ],
    "javax.swing.tree.treecellrenderer.gettreecellrenderercomponent": [
        "javax.swing.tree.TreeCellRenderer.getTreeCellRendererComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int,boolean)"
    ],
    "java.awt.component.getpreferredsize": [
        "java.awt.Component.getPreferredSize()"
    ],
    "java.security.keystore.secretkeyentry.tostring": [
        "java.security.KeyStore.SecretKeyEntry.toString()"
    ],
    "java.time.chrono.japanesechronology.dateyearday": [
        "java.time.chrono.JapaneseChronology.dateYearDay(int,int)",
        "java.time.chrono.JapaneseChronology.dateYearDay(java.time.chrono.Era,int,int)"
    ],
    "java.util.enummap.keyset": [
        "java.util.EnumMap.keySet()"
    ],
    "java.nio.file.watchevent.modifier.name": [
        "java.nio.file.WatchEvent.Modifier.name()"
    ],
    "java.lang.character.tocodepoint": [
        "java.lang.Character.toCodePoint(char,char)"
    ],
    "org.w3c.dom.document.createentityreference": [
        "org.w3c.dom.Document.createEntityReference(java.lang.String)"
    ],
    "java.security.cert.policyqualifierinfo.getpolicyqualifierid": [
        "java.security.cert.PolicyQualifierInfo.getPolicyQualifierId()"
    ],
    "javax.swing.plaf.basic.basichtml.gethtmlbaseline": [
        "javax.swing.plaf.basic.BasicHTML.getHTMLBaseline(javax.swing.text.View,int,int)"
    ],
    "javax.swing.jbutton.getuiclassid": [
        "javax.swing.JButton.getUIClassID()"
    ],
    "javax.swing.plaf.synth.synthseparatorui.paintborder": [
        "javax.swing.plaf.synth.SynthSeparatorUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.jdesktoppane.addimpl": [
        "javax.swing.JDesktopPane.addImpl(java.awt.Component,java.lang.Object,int)"
    ],
    "javax.xml.soap.soappart.getmatchingmimeheaders": [
        "javax.xml.soap.SOAPPart.getMatchingMimeHeaders(java.lang.String[])"
    ],
    "java.rmi.server.rmiclientsocketfactory.createsocket": [
        "java.rmi.server.RMIClientSocketFactory.createSocket(java.lang.String,int)"
    ],
    "javax.accessibility.accessibletext.getselectionstart": [
        "javax.accessibility.AccessibleText.getSelectionStart()"
    ],
    "javax.management.relation.roleinfo.getname": [
        "javax.management.relation.RoleInfo.getName()"
    ],
    "java.awt.color.icc_profile.getmajorversion": [
        "java.awt.color.ICC_Profile.getMajorVersion()"
    ],
    "javax.security.auth.callback.namecallback.setname": [
        "javax.security.auth.callback.NameCallback.setName(java.lang.String)"
    ],
    "javax.xml.bind.datatypeconverterinterface.printboolean": [
        "javax.xml.bind.DatatypeConverterInterface.printBoolean(boolean)"
    ],
    "org.omg.dynamicany._dynenumstub.next": [
        "org.omg.DynamicAny._DynEnumStub.next()"
    ],
    "java.text.decimalformatsymbols.getinternationalcurrencysymbol": [
        "java.text.DecimalFormatSymbols.getInternationalCurrencySymbol()"
    ],
    "org.w3c.dom.domlocator.getcolumnnumber": [
        "org.w3c.dom.DOMLocator.getColumnNumber()"
    ],
    "java.text.messageformat.setlocale": [
        "java.text.MessageFormat.setLocale(java.util.Locale)"
    ],
    "java.sql.databasemetadata.supportsconvert": [
        "java.sql.DatabaseMetaData.supportsConvert(int,int)",
        "java.sql.DatabaseMetaData.supportsConvert()"
    ],
    "org.omg.dynamicany._dynvaluestub.set_members_as_dyn_any": [
        "org.omg.DynamicAny._DynValueStub.set_members_as_dyn_any(org.omg.DynamicAny.NameDynAnyPair[])"
    ],
    "java.beans.encoder.getexceptionlistener": [
        "java.beans.Encoder.getExceptionListener()"
    ],
    "javax.tools.javafilemanager.getclassloader": [
        "javax.tools.JavaFileManager.getClassLoader(javax.tools.JavaFileManager.Location)"
    ],
    "java.awt.image.componentsamplemodel.getdataelements": [
        "java.awt.image.ComponentSampleModel.getDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)"
    ],
    "org.omg.corba.portable.delegate.hashcode": [
        "org.omg.CORBA.portable.Delegate.hashCode(org.omg.CORBA.Object)"
    ],
    "java.lang.threadgroup.tostring": [
        "java.lang.ThreadGroup.toString()"
    ],
    "javax.swing.plaf.basic.basicpanelui.getbaseline": [
        "javax.swing.plaf.basic.BasicPanelUI.getBaseline(javax.swing.JComponent,int,int)"
    ],
    "java.util.treemap.floorentry": [
        "java.util.TreeMap.floorEntry(K)"
    ],
    "javax.sql.rowset.setpassword": [
        "javax.sql.RowSet.setPassword(java.lang.String)"
    ],
    "javax.lang.model.util.typekindvisitor6.visitprimitiveasfloat": [
        "javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsFloat(javax.lang.model.type.PrimitiveType,javax.lang.model.util.TypeKindVisitor6)"
    ],
    "java.security.permissioncollection.tostring": [
        "java.security.PermissionCollection.toString()"
    ],
    "org.ietf.jgss.gssexception.getmajorstring": [
        "org.ietf.jgss.GSSException.getMajorString()"
    ],
    "java.rmi.activation.activator.activate": [
        "java.rmi.activation.Activator.activate(java.rmi.activation.ActivationID,boolean)"
    ],
    "org.w3c.dom.document.createprocessinginstruction": [
        "org.w3c.dom.Document.createProcessingInstruction(java.lang.String,java.lang.String)"
    ],
    "javax.swing.jfilechooser.setcontrolbuttonsareshown": [
        "javax.swing.JFileChooser.setControlButtonsAreShown(boolean)"
    ],
    "java.awt.image.samplemodel.setdataelements": [
        "java.awt.image.SampleModel.setDataElements(int,int,int,int,java.lang.Object,java.awt.image.DataBuffer)",
        "java.awt.image.SampleModel.setDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)"
    ],
    "javax.management.mbeanparameterinfo.gettype": [
        "javax.management.MBeanParameterInfo.getType()"
    ],
    "java.awt.menu.insertseparator": [
        "java.awt.Menu.insertSeparator(int)"
    ],
    "javax.swing.table.tablecolumn.getheadervalue": [
        "javax.swing.table.TableColumn.getHeaderValue()"
    ],
    "javax.management.relation.roleresult.setrolesunresolved": [
        "javax.management.relation.RoleResult.setRolesUnresolved(javax.management.relation.RoleUnresolvedList)"
    ],
    "java.awt.geom.quadcurve2d.getbounds": [
        "java.awt.geom.QuadCurve2D.getBounds()"
    ],
    "java.awt.pageattributes.getprinterresolution": [
        "java.awt.PageAttributes.getPrinterResolution()"
    ],
    "java.awt.font.shapegraphicattribute.getbounds": [
        "java.awt.font.ShapeGraphicAttribute.getBounds()"
    ],
    "javax.swing.text.utilities.gettabbedtextoffset": [
        "javax.swing.text.Utilities.getTabbedTextOffset(javax.swing.text.Segment,java.awt.FontMetrics,int,int,javax.swing.text.TabExpander,int)"
    ],
    "org.omg.dynamicany._dynvaluestub.get_ulonglong": [
        "org.omg.DynamicAny._DynValueStub.get_ulonglong()"
    ],
    "java.lang.typenotpresentexception.typename": [
        "java.lang.TypeNotPresentException.typeName()"
    ],
    "java.io.writer.close": [
        "java.io.Writer.close()"
    ],
    "java.beans.beancontext.beancontextchildsupport.getbeancontextchildpeer": [
        "java.beans.beancontext.BeanContextChildSupport.getBeanContextChildPeer()"
    ],
    "javax.swing.text.asyncboxview.getviewindexatposition": [
        "javax.swing.text.AsyncBoxView.getViewIndexAtPosition(int,javax.swing.text.Position.Bias)"
    ],
    "java.awt.textfield.settext": [
        "java.awt.TextField.setText(java.lang.String)"
    ],
    "java.util.navigablemap.floorentry": [
        "java.util.NavigableMap.floorEntry(K)",
        "java.util.NavigableMap.floorEntry(java.util.NavigableMap)"
    ],
    "java.io.datainput.readdouble": [
        "java.io.DataInput.readDouble()"
    ],
    "javax.swing.jdialog.remove": [
        "javax.swing.JDialog.remove(java.awt.Component)"
    ],
    "java.util.resourcebundle.setparent": [
        "java.util.ResourceBundle.setParent(java.util.ResourceBundle)"
    ],
    "java.awt.component.removekeylistener": [
        "java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"
    ],
    "javax.swing.text.caret.getmagiccaretposition": [
        "javax.swing.text.Caret.getMagicCaretPosition()"
    ],
    "java.lang.long.tounsignedstring": [
        "java.lang.Long.toUnsignedString(long)",
        "java.lang.Long.toUnsignedString(long,int)"
    ],
    "java.util.deque.addlast": [
        "java.util.Deque.addLast(java.util.Deque)",
        "java.util.Deque.addLast(E)"
    ],
    "javax.swing.japplet.gettransferhandler": [
        "javax.swing.JApplet.getTransferHandler()"
    ],
    "java.awt.print.printerjob.setprintable": [
        "java.awt.print.PrinterJob.setPrintable(java.awt.print.Printable)",
        "java.awt.print.PrinterJob.setPrintable(java.awt.print.Printable,java.awt.print.PageFormat)"
    ],
    "java.util.concurrent.executorservice.invokeany": [
        "java.util.concurrent.ExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>)",
        "java.util.concurrent.ExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>,long,java.util.concurrent.TimeUnit)"
    ],
    "java.sql.resultset.updatebytes": [
        "java.sql.ResultSet.updateBytes(int,byte[])",
        "java.sql.ResultSet.updateBytes(java.lang.String,byte[])"
    ],
    "java.util.priorityqueue.toarray": [
        "java.util.PriorityQueue.toArray(T[])",
        "java.util.PriorityQueue.toArray()"
    ],
    "javax.management.loading.mletcontent.getdocumentbase": [
        "javax.management.loading.MLetContent.getDocumentBase()"
    ],
    "javax.xml.soap.messagefactory.newinstance": [
        "javax.xml.soap.MessageFactory.newInstance()",
        "javax.xml.soap.MessageFactory.newInstance(java.lang.String)"
    ],
    "java.text.attributedcharacteriterator.attribute.hashcode": [
        "java.text.AttributedCharacterIterator.Attribute.hashCode()"
    ],
    "javax.script.scriptenginemanager.registerenginemimetype": [
        "javax.script.ScriptEngineManager.registerEngineMimeType(java.lang.String,javax.script.ScriptEngineFactory)"
    ],
    "java.sql.databasemetadata.supportslikeescapeclause": [
        "java.sql.DatabaseMetaData.supportsLikeEscapeClause()"
    ],
    "java.awt.datatransfer.systemflavormap.encodejavamimetype": [
        "java.awt.datatransfer.SystemFlavorMap.encodeJavaMIMEType(java.lang.String)"
    ],
    "javax.sound.sampled.floatcontrol.getmidlabel": [
        "javax.sound.sampled.FloatControl.getMidLabel()"
    ],
    "org.omg.corba.portable.outputstream.write_char": [
        "org.omg.CORBA.portable.OutputStream.write_char(char)"
    ],
    "java.lang.management.threadmxbean.isthreadcontentionmonitoringsupported": [
        "java.lang.management.ThreadMXBean.isThreadContentionMonitoringSupported()"
    ],
    "javax.xml.stream.xmlstreamreader.getattributevalue": [
        "javax.xml.stream.XMLStreamReader.getAttributeValue(int)",
        "javax.xml.stream.XMLStreamReader.getAttributeValue(java.lang.String,java.lang.String)"
    ],
    "javax.lang.model.util.elements.gettypeelement": [
        "javax.lang.model.util.Elements.getTypeElement(java.lang.CharSequence)"
    ],
    "java.security.interfaces.rsaprivatecrtkey.getcrtcoefficient": [
        "java.security.interfaces.RSAPrivateCrtKey.getCrtCoefficient()"
    ],
    "javax.swing.plaf.multi.multipopupmenuui.update": [
        "javax.swing.plaf.multi.MultiPopupMenuUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.sql.preparedstatement.setbyte": [
        "java.sql.PreparedStatement.setByte(int,byte)"
    ],
    "java.beans.propertyeditorsupport.getastext": [
        "java.beans.PropertyEditorSupport.getAsText()"
    ],
    "java.util.stream.collector.characteristics.valueof": [
        "java.util.stream.Collector.Characteristics.valueOf(java.lang.String)"
    ],
    "java.security.algorithmparameters.getprovider": [
        "java.security.AlgorithmParameters.getProvider()"
    ],
    "java.sql.resultsetmetadata.issigned": [
        "java.sql.ResultSetMetaData.isSigned(int)"
    ],
    "javax.print.printservice.getattribute": [
        "javax.print.PrintService.getAttribute(java.lang.Class<T>)"
    ],
    "javax.security.cert.x509certificate.getnotbefore": [
        "javax.security.cert.X509Certificate.getNotBefore()"
    ],
    "javax.management.monitor.monitor.start": [
        "javax.management.monitor.Monitor.start()"
    ],
    "javax.script.simplescriptcontext.setwriter": [
        "javax.script.SimpleScriptContext.setWriter(java.io.Writer)"
    ],
    "javax.rmi.corba.valuehandler.iscustommarshaled": [
        "javax.rmi.CORBA.ValueHandler.isCustomMarshaled(java.lang.Class)"
    ],
    "java.lang.securitymanager.checkaccess": [
        "java.lang.SecurityManager.checkAccess(java.lang.Thread)",
        "java.lang.SecurityManager.checkAccess(java.lang.ThreadGroup)"
    ],
    "java.lang.management.compilationmxbean.iscompilationtimemonitoringsupported": [
        "java.lang.management.CompilationMXBean.isCompilationTimeMonitoringSupported()"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readbyte": [
        "javax.sql.rowset.serial.SQLInputImpl.readByte()"
    ],
    "java.sql.databasemetadata.supportsstoredfunctionsusingcallsyntax": [
        "java.sql.DatabaseMetaData.supportsStoredFunctionsUsingCallSyntax()"
    ],
    "javax.security.auth.callback.unsupportedcallbackexception.getcallback": [
        "javax.security.auth.callback.UnsupportedCallbackException.getCallback()"
    ],
    "javax.security.auth.callback.choicecallback.getdefaultchoice": [
        "javax.security.auth.callback.ChoiceCallback.getDefaultChoice()"
    ],
    "javax.swing.text.fieldview.getresizeweight": [
        "javax.swing.text.FieldView.getResizeWeight(int)"
    ],
    "javax.swing.tree.abstractlayoutcache.getbounds": [
        "javax.swing.tree.AbstractLayoutCache.getBounds(javax.swing.tree.TreePath,java.awt.Rectangle)"
    ],
    "java.util.concurrent.completionservice.take": [
        "java.util.concurrent.CompletionService.take()"
    ],
    "java.sql.databasemetadata.nullsaresortedatend": [
        "java.sql.DatabaseMetaData.nullsAreSortedAtEnd()"
    ],
    "javax.xml.ws.handler.messagecontext.setscope": [
        "javax.xml.ws.handler.MessageContext.setScope(java.lang.String,javax.xml.ws.handler.MessageContext.Scope)"
    ],
    "org.omg.corba.any.insert_string": [
        "org.omg.CORBA.Any.insert_string(java.lang.String)"
    ],
    "javax.xml.crypto.dsig.keyinfo.pgpdata.getkeyid": [
        "javax.xml.crypto.dsig.keyinfo.PGPData.getKeyId()"
    ],
    "java.io.dataoutput.writedouble": [
        "java.io.DataOutput.writeDouble(double)"
    ],
    "javax.management.loading.classloaderrepository.loadclasswithout": [
        "javax.management.loading.ClassLoaderRepository.loadClassWithout(java.lang.ClassLoader,java.lang.String)"
    ],
    "javax.net.ssl.sslsocket.getsslparameters": [
        "javax.net.ssl.SSLSocket.getSSLParameters()"
    ],
    "java.lang.invoke.mutablecallsite.settarget": [
        "java.lang.invoke.MutableCallSite.setTarget(java.lang.invoke.MethodHandle)"
    ],
    "javax.swing.jscrollpane.createviewport": [
        "javax.swing.JScrollPane.createViewport()"
    ],
    "javax.xml.ws.service.getwsdldocumentlocation": [
        "javax.xml.ws.Service.getWSDLDocumentLocation()"
    ],
    "javax.xml.transform.stream.streamsource.getpublicid": [
        "javax.xml.transform.stream.StreamSource.getPublicId()"
    ],
    "java.lang.invoke.methodhandles.exactinvoker": [
        "java.lang.invoke.MethodHandles.exactInvoker(java.lang.invoke.MethodType)"
    ],
    "java.sql.drivermanager.println": [
        "java.sql.DriverManager.println(java.lang.String)"
    ],
    "java.rmi.server.remoteref.invoke": [
        "java.rmi.server.RemoteRef.invoke(java.rmi.Remote,java.lang.reflect.Method,java.lang.Object[],long)"
    ],
    "javax.swing.plaf.synth.synthgraphicsutils.getminimumsize": [
        "javax.swing.plaf.synth.SynthGraphicsUtils.getMinimumSize(javax.swing.plaf.synth.SynthContext,java.awt.Font,java.lang.String,javax.swing.Icon,int,int,int,int,int,int)"
    ],
    "org.ietf.jgss.gsscontext.requestlifetime": [
        "org.ietf.jgss.GSSContext.requestLifetime(int)"
    ],
    "javax.swing.defaultdesktopmanager.iconifyframe": [
        "javax.swing.DefaultDesktopManager.iconifyFrame(javax.swing.JInternalFrame)"
    ],
    "java.awt.fontmetrics.getmaxascent": [
        "java.awt.FontMetrics.getMaxAscent()"
    ],
    "java.util.concurrent.atomic.atomiclongfieldupdater.getanddecrement": [
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndDecrement(T)",
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndDecrement(java.util.concurrent.atomic.AtomicLongFieldUpdater)"
    ],
    "javax.net.ssl.httpsurlconnection.gethostnameverifier": [
        "javax.net.ssl.HttpsURLConnection.getHostnameVerifier()"
    ],
    "javax.swing.plaf.basic.basiclistui.uninstalllisteners": [
        "javax.swing.plaf.basic.BasicListUI.uninstallListeners()"
    ],
    "javax.swing.jmenubar.paintborder": [
        "javax.swing.JMenuBar.paintBorder(java.awt.Graphics)"
    ],
    "java.time.instant.now": [
        "java.time.Instant.now(java.time.Clock)",
        "java.time.Instant.now()"
    ],
    "javax.swing.text.mutableattributeset.setresolveparent": [
        "javax.swing.text.MutableAttributeSet.setResolveParent(javax.swing.text.AttributeSet)"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.uninstalllisteners": [
        "javax.swing.plaf.basic.BasicComboBoxUI.uninstallListeners()"
    ],
    "java.lang.integer.hashcode": [
        "java.lang.Integer.hashCode(int)",
        "java.lang.Integer.hashCode()"
    ],
    "javax.swing.jrootpane.getlayeredpane": [
        "javax.swing.JRootPane.getLayeredPane()"
    ],
    "java.lang.invoke.methodhandles.arrayelementgetter": [
        "java.lang.invoke.MethodHandles.arrayElementGetter(java.lang.Class<?>)"
    ],
    "javax.swing.table.defaulttablecolumnmodel.addcolumn": [
        "javax.swing.table.DefaultTableColumnModel.addColumn(javax.swing.table.TableColumn)"
    ],
    "javax.swing.plaf.basic.basicsplitpanedivider.getdividersize": [
        "javax.swing.plaf.basic.BasicSplitPaneDivider.getDividerSize()"
    ],
    "javax.xml.stream.xmleventfactory.createspace": [
        "javax.xml.stream.XMLEventFactory.createSpace(java.lang.String)"
    ],
    "java.util.concurrent.locks.abstractqueuedsynchronizer.tryreleaseshared": [
        "java.util.concurrent.locks.AbstractQueuedSynchronizer.tryReleaseShared(int)"
    ],
    "org.omg.dynamicany._dynsequencestub.get_dyn_any": [
        "org.omg.DynamicAny._DynSequenceStub.get_dyn_any()"
    ],
    "javax.lang.model.util.abstracttypevisitor6.visitintersection": [
        "javax.lang.model.util.AbstractTypeVisitor6.visitIntersection(javax.lang.model.type.IntersectionType,javax.lang.model.util.AbstractTypeVisitor6)"
    ],
    "java.nio.channels.channels.newreader": [
        "java.nio.channels.Channels.newReader(java.nio.channels.ReadableByteChannel,java.nio.charset.CharsetDecoder,int)",
        "java.nio.channels.Channels.newReader(java.nio.channels.ReadableByteChannel,java.lang.String)"
    ],
    "javax.naming.directory.modificationitem.tostring": [
        "javax.naming.directory.ModificationItem.toString()"
    ],
    "javax.sql.rowset.serial.serialref.setobject": [
        "javax.sql.rowset.serial.SerialRef.setObject(java.lang.Object)"
    ],
    "javax.swing.plaf.componentui.getmaximumsize": [
        "javax.swing.plaf.ComponentUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "java.time.period.getyears": [
        "java.time.Period.getYears()"
    ],
    "java.util.concurrent.concurrentlinkeddeque.remove": [
        "java.util.concurrent.ConcurrentLinkedDeque.remove(java.lang.Object)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintmenuitembackground": [
        "javax.swing.plaf.synth.SynthPainter.paintMenuItemBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.io.console.flush": [
        "java.io.Console.flush()"
    ],
    "javax.imageio.imagewriter.abort": [
        "javax.imageio.ImageWriter.abort()"
    ],
    "javax.swing.spinnernumbermodel.getmaximum": [
        "javax.swing.SpinnerNumberModel.getMaximum()"
    ],
    "javax.swing.abstractbutton.geticontextgap": [
        "javax.swing.AbstractButton.getIconTextGap()"
    ],
    "javax.swing.jcomponent.getaccessiblecontext": [
        "javax.swing.JComponent.getAccessibleContext()"
    ],
    "javax.swing.buttonmodel.removechangelistener": [
        "javax.swing.ButtonModel.removeChangeListener(javax.swing.event.ChangeListener)"
    ],
    "javax.swing.defaultdesktopmanager.setwasicon": [
        "javax.swing.DefaultDesktopManager.setWasIcon(javax.swing.JInternalFrame,java.lang.Boolean)"
    ],
    "javax.swing.text.html.htmldocument.setbase": [
        "javax.swing.text.html.HTMLDocument.setBase(java.net.URL)"
    ],
    "javax.lang.model.element.annotationvaluevisitor.visitint": [
        "javax.lang.model.element.AnnotationValueVisitor.visitInt(int,javax.lang.model.element.AnnotationValueVisitor)"
    ],
    "java.lang.class.getcanonicalname": [
        "java.lang.Class.getCanonicalName()"
    ],
    "java.util.resourcebundle.getbasebundlename": [
        "java.util.ResourceBundle.getBaseBundleName()"
    ],
    "javax.crypto.spec.secretkeyspec.getformat": [
        "javax.crypto.spec.SecretKeySpec.getFormat()"
    ],
    "javax.swing.jcheckboxmenuitem.getstate": [
        "javax.swing.JCheckBoxMenuItem.getState()"
    ],
    "java.awt.datatransfer.dataflavor.isrepresentationclassinputstream": [
        "java.awt.datatransfer.DataFlavor.isRepresentationClassInputStream()"
    ],
    "java.sql.callablestatement.setdouble": [
        "java.sql.CallableStatement.setDouble(java.lang.String,double)"
    ],
    "java.awt.graphicsenvironment.getscreendevices": [
        "java.awt.GraphicsEnvironment.getScreenDevices()"
    ],
    "java.util.zip.zipoutputstream.close": [
        "java.util.zip.ZipOutputStream.close()"
    ],
    "javax.net.ssl.sslsession.getpeercertificates": [
        "javax.net.ssl.SSLSession.getPeerCertificates()"
    ],
    "java.security.provider.replace": [
        "java.security.Provider.replace(java.lang.Object,java.lang.Object,java.lang.Object)",
        "java.security.Provider.replace(java.lang.Object,java.lang.Object)"
    ],
    "javax.lang.model.util.simpletypevisitor6.visitnotype": [
        "javax.lang.model.util.SimpleTypeVisitor6.visitNoType(javax.lang.model.type.NoType,javax.lang.model.util.SimpleTypeVisitor6)"
    ],
    "java.lang.reflect.method.getexceptiontypes": [
        "java.lang.reflect.Method.getExceptionTypes()"
    ],
    "javax.swing.plaf.basic.basictreeui.painthorizontalpartofleg": [
        "javax.swing.plaf.basic.BasicTreeUI.paintHorizontalPartOfLeg(java.awt.Graphics,java.awt.Rectangle,java.awt.Insets,java.awt.Rectangle,javax.swing.tree.TreePath,int,boolean,boolean,boolean)"
    ],
    "java.text.messageformat.applypattern": [
        "java.text.MessageFormat.applyPattern(java.lang.String)"
    ],
    "java.time.localtime.tosecondofday": [
        "java.time.LocalTime.toSecondOfDay()"
    ],
    "org.omg.corba.datainputstream.read_wstring": [
        "org.omg.CORBA.DataInputStream.read_wstring()"
    ],
    "javax.print.attribute.standard.outputdeviceassigned.getname": [
        "javax.print.attribute.standard.OutputDeviceAssigned.getName()"
    ],
    "java.util.timezone.tozoneid": [
        "java.util.TimeZone.toZoneId()"
    ],
    "org.omg.corba.stringholder._read": [
        "org.omg.CORBA.StringHolder._read(org.omg.CORBA.portable.InputStream)"
    ],
    "java.io.fileinputstream.close": [
        "java.io.FileInputStream.close()"
    ],
    "javax.xml.crypto.dsig.xmlsignaturefactory.newreference": [
        "javax.xml.crypto.dsig.XMLSignatureFactory.newReference(java.lang.String,javax.xml.crypto.dsig.DigestMethod,java.util.List,javax.xml.crypto.Data,java.util.List,java.lang.String,java.lang.String)",
        "javax.xml.crypto.dsig.XMLSignatureFactory.newReference(java.lang.String,javax.xml.crypto.dsig.DigestMethod)",
        "javax.xml.crypto.dsig.XMLSignatureFactory.newReference(java.lang.String,javax.xml.crypto.dsig.DigestMethod,java.util.List,java.lang.String,java.lang.String)",
        "javax.xml.crypto.dsig.XMLSignatureFactory.newReference(java.lang.String,javax.xml.crypto.dsig.DigestMethod,java.util.List,java.lang.String,java.lang.String,byte[])"
    ],
    "java.awt.geom.cubiccurve2d.getctrlp1": [
        "java.awt.geom.CubicCurve2D.getCtrlP1()"
    ],
    "java.text.spi.numberformatprovider.getintegerinstance": [
        "java.text.spi.NumberFormatProvider.getIntegerInstance(java.util.Locale)"
    ],
    "org.omg.portableinterceptor.orbinitinfooperations.register_policy_factory": [
        "org.omg.PortableInterceptor.ORBInitInfoOperations.register_policy_factory(int,org.omg.PortableInterceptor.PolicyFactory)"
    ],
    "javax.swing.jinternalframe.seticon": [
        "javax.swing.JInternalFrame.setIcon(boolean)"
    ],
    "java.lang.invoke.methodhandles.arrayelementsetter": [
        "java.lang.invoke.MethodHandles.arrayElementSetter(java.lang.Class<?>)"
    ],
    "javax.lang.model.type.unknowntypeexception.getargument": [
        "javax.lang.model.type.UnknownTypeException.getArgument()"
    ],
    "java.awt.component.setpreferredsize": [
        "java.awt.Component.setPreferredSize(java.awt.Dimension)"
    ],
    "java.time.yearmonth.of": [
        "java.time.YearMonth.of(int,int)",
        "java.time.YearMonth.of(int,java.time.Month)"
    ],
    "java.time.offsettime.withminute": [
        "java.time.OffsetTime.withMinute(int)"
    ],
    "javax.swing.tree.treeselectionmodel.removetreeselectionlistener": [
        "javax.swing.tree.TreeSelectionModel.removeTreeSelectionListener(javax.swing.event.TreeSelectionListener)"
    ],
    "java.nio.intbuffer.duplicate": [
        "java.nio.IntBuffer.duplicate()"
    ],
    "javax.management.relation.relationservice.hasrelation": [
        "javax.management.relation.RelationService.hasRelation(java.lang.String)"
    ],
    "java.lang.string.matches": [
        "java.lang.String.matches(java.lang.String)"
    ],
    "java.time.temporal.temporaladjusters.previous": [
        "java.time.temporal.TemporalAdjusters.previous(java.time.DayOfWeek)"
    ],
    "java.nio.charset.charset.isregistered": [
        "java.nio.charset.Charset.isRegistered()"
    ],
    "javax.swing.plaf.basic.basictreeui.getbaseline": [
        "javax.swing.plaf.basic.BasicTreeUI.getBaseline(javax.swing.JComponent,int,int)"
    ],
    "javax.swing.jscrollpane.setcolumnheaderview": [
        "javax.swing.JScrollPane.setColumnHeaderView(java.awt.Component)"
    ],
    "java.beans.featuredescriptor.setname": [
        "java.beans.FeatureDescriptor.setName(java.lang.String)"
    ],
    "javax.naming.refaddr.hashcode": [
        "javax.naming.RefAddr.hashCode()"
    ],
    "java.awt.image.directcolormodel.getred": [
        "java.awt.image.DirectColorModel.getRed(java.lang.Object)",
        "java.awt.image.DirectColorModel.getRed(int)"
    ],
    "java.util.stream.longstream.builder.accept": [
        "java.util.stream.LongStream.Builder.accept(long)"
    ],
    "java.security.cert.certstore.getdefaulttype": [
        "java.security.cert.CertStore.getDefaultType()"
    ],
    "java.nio.file.path.getfilesystem": [
        "java.nio.file.Path.getFileSystem()"
    ],
    "javax.swing.plaf.multi.multiscrollpaneui.paint": [
        "javax.swing.plaf.multi.MultiScrollPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.rmi.dgc.lease.getvmid": [
        "java.rmi.dgc.Lease.getVMID()"
    ],
    "java.util.locale.getvariant": [
        "java.util.Locale.getVariant()"
    ],
    "org.omg.corba.datainputstream.read_boolean_array": [
        "org.omg.CORBA.DataInputStream.read_boolean_array(org.omg.CORBA.BooleanSeqHolder,int,int)"
    ],
    "java.security.keystore.passwordprotection.isdestroyed": [
        "java.security.KeyStore.PasswordProtection.isDestroyed()"
    ],
    "java.util.primitiveiterator.oflong.nextlong": [
        "java.util.PrimitiveIterator.OfLong.nextLong()"
    ],
    "javax.swing.tree.defaulttreemodel.removenodefromparent": [
        "javax.swing.tree.DefaultTreeModel.removeNodeFromParent(javax.swing.tree.MutableTreeNode)"
    ],
    "javax.imageio.spi.imagereaderspi.createreaderinstance": [
        "javax.imageio.spi.ImageReaderSpi.createReaderInstance()",
        "javax.imageio.spi.ImageReaderSpi.createReaderInstance(java.lang.Object)"
    ],
    "java.sql.preparedstatement.setdouble": [
        "java.sql.PreparedStatement.setDouble(int,double)"
    ],
    "javax.net.ssl.sslengine.getenabledprotocols": [
        "javax.net.ssl.SSLEngine.getEnabledProtocols()"
    ],
    "java.security.key.getalgorithm": [
        "java.security.Key.getAlgorithm()"
    ],
    "javax.swing.plaf.multi.multioptionpaneui.createui": [
        "javax.swing.plaf.multi.MultiOptionPaneUI.createUI(javax.swing.JComponent)"
    ],
    "javax.swing.text.caret.getblinkrate": [
        "javax.swing.text.Caret.getBlinkRate()"
    ],
    "org.omg.dynamicany._dynarraystub.insert_dyn_any": [
        "org.omg.DynamicAny._DynArrayStub.insert_dyn_any(org.omg.DynamicAny.DynAny)"
    ],
    "java.sql.resultsetmetadata.isautoincrement": [
        "java.sql.ResultSetMetaData.isAutoIncrement(int)"
    ],
    "java.awt.label.getalignment": [
        "java.awt.Label.getAlignment()"
    ],
    "javax.management.remote.rmi.rmiconnection.getattribute": [
        "javax.management.remote.rmi.RMIConnection.getAttribute(javax.management.ObjectName,java.lang.String,javax.security.auth.Subject)"
    ],
    "java.beans.beancontext.beancontextsupport.getlocale": [
        "java.beans.beancontext.BeanContextSupport.getLocale()"
    ],
    "javax.swing.jlist.setselectedindex": [
        "javax.swing.JList.setSelectedIndex(int)"
    ],
    "java.util.abstractlist.sublist": [
        "java.util.AbstractList.subList(int,int)"
    ],
    "org.omg.cosnaming.namingcontextoperations.unbind": [
        "org.omg.CosNaming.NamingContextOperations.unbind(org.omg.CosNaming.NameComponent[])"
    ],
    "javax.accessibility.accessibleselection.isaccessiblechildselected": [
        "javax.accessibility.AccessibleSelection.isAccessibleChildSelected(int)"
    ],
    "javax.management.openmbean.tabulardatasupport.keyset": [
        "javax.management.openmbean.TabularDataSupport.keySet()"
    ],
    "javax.imageio.event.iioreadprogresslistener.readaborted": [
        "javax.imageio.event.IIOReadProgressListener.readAborted(javax.imageio.ImageReader)"
    ],
    "javax.swing.plaf.synth.synthviewportui.installui": [
        "javax.swing.plaf.synth.SynthViewportUI.installUI(javax.swing.JComponent)"
    ],
    "javax.swing.text.defaultstyleddocument.getlogicalstyle": [
        "javax.swing.text.DefaultStyledDocument.getLogicalStyle(int)"
    ],
    "javax.xml.stream.events.attribute.isspecified": [
        "javax.xml.stream.events.Attribute.isSpecified()"
    ],
    "javax.management.openmbean.compositetype.isvalue": [
        "javax.management.openmbean.CompositeType.isValue(java.lang.Object)"
    ],
    "java.io.printstream.print": [
        "java.io.PrintStream.print(java.lang.Object)",
        "java.io.PrintStream.print(char)",
        "java.io.PrintStream.print(java.lang.String)",
        "java.io.PrintStream.print(long)",
        "java.io.PrintStream.print(boolean)",
        "java.io.PrintStream.print(int)",
        "java.io.PrintStream.print(char[])"
    ],
    "javax.imageio.spi.iioserviceprovider.getdescription": [
        "javax.imageio.spi.IIOServiceProvider.getDescription(java.util.Locale)"
    ],
    "javax.xml.soap.mimeheaders.getnonmatchingheaders": [
        "javax.xml.soap.MimeHeaders.getNonMatchingHeaders(java.lang.String[])"
    ],
    "javax.imageio.imagewriteparam.getbitrate": [
        "javax.imageio.ImageWriteParam.getBitRate(float)"
    ],
    "javax.script.invocable.getinterface": [
        "javax.script.Invocable.getInterface(java.lang.Object,java.lang.Class<T>)",
        "javax.script.Invocable.getInterface(java.lang.Class<T>)"
    ],
    "javax.lang.model.element.packageelement.getenclosingelement": [
        "javax.lang.model.element.PackageElement.getEnclosingElement()"
    ],
    "javax.swing.jfilechooser.paramstring": [
        "javax.swing.JFileChooser.paramString()"
    ],
    "javax.management.mbeanserverconnection.isregistered": [
        "javax.management.MBeanServerConnection.isRegistered(javax.management.ObjectName)"
    ],
    "java.time.chrono.chronology.getcalendartype": [
        "java.time.chrono.Chronology.getCalendarType()"
    ],
    "javax.lang.model.element.element.hashcode": [
        "javax.lang.model.element.Element.hashCode()"
    ],
    "java.time.offsetdatetime.plusyears": [
        "java.time.OffsetDateTime.plusYears(long)"
    ],
    "javax.swing.inputmap.keys": [
        "javax.swing.InputMap.keys()"
    ],
    "java.security.accesscontrolcontext.hashcode": [
        "java.security.AccessControlContext.hashCode()"
    ],
    "javax.imageio.spi.serviceregistry.getcategories": [
        "javax.imageio.spi.ServiceRegistry.getCategories()"
    ],
    "java.nio.file.filestore.getfilestoreattributeview": [
        "java.nio.file.FileStore.getFileStoreAttributeView(java.lang.Class<V>)"
    ],
    "javax.management.openmbean.tabulardatasupport.clone": [
        "javax.management.openmbean.TabularDataSupport.clone()"
    ],
    "javax.xml.bind.annotation.adapters.xmladapter.unmarshal": [
        "javax.xml.bind.annotation.adapters.XmlAdapter.unmarshal(javax.xml.bind.annotation.adapters.XmlAdapter)"
    ],
    "java.sql.connection.setautocommit": [
        "java.sql.Connection.setAutoCommit(boolean)"
    ],
    "javax.net.ssl.httpsurlconnection.setdefaultsslsocketfactory": [
        "javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getdesktopcolor": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getDesktopColor()"
    ],
    "java.beans.designmode.isdesigntime": [
        "java.beans.DesignMode.isDesignTime()"
    ],
    "java.security.cert.certpathbuilderspi.enginebuild": [
        "java.security.cert.CertPathBuilderSpi.engineBuild(java.security.cert.CertPathParameters)"
    ],
    "java.sql.callablestatement.setncharacterstream": [
        "java.sql.CallableStatement.setNCharacterStream(java.lang.String,java.io.Reader)",
        "java.sql.CallableStatement.setNCharacterStream(java.lang.String,java.io.Reader,long)"
    ],
    "javax.print.attribute.standard.presentationdirection.getname": [
        "javax.print.attribute.standard.PresentationDirection.getName()"
    ],
    "java.lang.float.equals": [
        "java.lang.Float.equals(java.lang.Object)"
    ],
    "javax.swing.plaf.basic.basictreeui.setlargemodel": [
        "javax.swing.plaf.basic.BasicTreeUI.setLargeModel(boolean)"
    ],
    "java.io.filterinputstream.reset": [
        "java.io.FilterInputStream.reset()"
    ],
    "javax.xml.soap.soapbody.hasfault": [
        "javax.xml.soap.SOAPBody.hasFault()"
    ],
    "java.net.proxy.address": [
        "java.net.Proxy.address()"
    ],
    "javax.print.attribute.standard.mediaprintablearea.equals": [
        "javax.print.attribute.standard.MediaPrintableArea.equals(java.lang.Object)"
    ],
    "java.util.hashtable.keyset": [
        "java.util.Hashtable.keySet()"
    ],
    "javax.swing.jinternalframe.getcontentpane": [
        "javax.swing.JInternalFrame.getContentPane()"
    ],
    "java.util.navigablemap.descendingmap": [
        "java.util.NavigableMap.descendingMap()"
    ],
    "javax.sound.midi.midisystem.getsoundbank": [
        "javax.sound.midi.MidiSystem.getSoundbank(java.io.File)",
        "javax.sound.midi.MidiSystem.getSoundbank(java.net.URL)",
        "javax.sound.midi.MidiSystem.getSoundbank(java.io.InputStream)"
    ],
    "javax.swing.plaf.treeui.getclosestpathforlocation": [
        "javax.swing.plaf.TreeUI.getClosestPathForLocation(javax.swing.JTree,int,int)"
    ],
    "javax.swing.event.tablecolumnmodellistener.columnmarginchanged": [
        "javax.swing.event.TableColumnModelListener.columnMarginChanged(javax.swing.event.ChangeEvent)"
    ],
    "javax.management.modelmbean.modelmbeanattributeinfo.tostring": [
        "javax.management.modelmbean.ModelMBeanAttributeInfo.toString()"
    ],
    "java.awt.jobattributes.setsidestodefault": [
        "java.awt.JobAttributes.setSidesToDefault()"
    ],
    "javax.print.streamprintservicefactory.lookupstreamprintservicefactories": [
        "javax.print.StreamPrintServiceFactory.lookupStreamPrintServiceFactories(javax.print.DocFlavor,java.lang.String)"
    ],
    "java.awt.font.shapegraphicattribute.draw": [
        "java.awt.font.ShapeGraphicAttribute.draw(java.awt.Graphics2D,float,float)"
    ],
    "javax.lang.model.util.simpletypevisitor7.visitunion": [
        "javax.lang.model.util.SimpleTypeVisitor7.visitUnion(javax.lang.model.type.UnionType,javax.lang.model.util.SimpleTypeVisitor7)"
    ],
    "javax.xml.soap.soapexception.getcause": [
        "javax.xml.soap.SOAPException.getCause()"
    ],
    "java.io.file.hashcode": [
        "java.io.File.hashCode()"
    ],
    "javax.management.loading.classloaderrepository.loadclass": [
        "javax.management.loading.ClassLoaderRepository.loadClass(java.lang.String)"
    ],
    "javax.crypto.cipherspi.engineinit": [
        "javax.crypto.CipherSpi.engineInit(int,java.security.Key,java.security.SecureRandom)",
        "javax.crypto.CipherSpi.engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)",
        "javax.crypto.CipherSpi.engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
    ],
    "org.omg.corba.localobject._request": [
        "org.omg.CORBA.LocalObject._request(java.lang.String,boolean)",
        "org.omg.CORBA.LocalObject._request(java.lang.String)"
    ],
    "javax.sql.rowset.serial.serialclob.truncate": [
        "javax.sql.rowset.serial.SerialClob.truncate(long)"
    ],
    "java.util.formatter.close": [
        "java.util.Formatter.close()"
    ],
    "javax.swing.text.html.htmldocument.processhtmlframehyperlinkevent": [
        "javax.swing.text.html.HTMLDocument.processHTMLFrameHyperlinkEvent(javax.swing.text.html.HTMLFrameHyperlinkEvent)"
    ],
    "javax.sql.rowsetreader.readdata": [
        "javax.sql.RowSetReader.readData(javax.sql.RowSetInternal)"
    ],
    "java.time.temporal.temporalunit.between": [
        "java.time.temporal.TemporalUnit.between(java.time.temporal.Temporal,java.time.temporal.Temporal)"
    ],
    "javax.xml.crypto.dsig.reference.getdigestmethod": [
        "javax.xml.crypto.dsig.Reference.getDigestMethod()"
    ],
    "javax.swing.plaf.metal.metaltheme.getusertextcolor": [
        "javax.swing.plaf.metal.MetalTheme.getUserTextColor()"
    ],
    "java.awt.awteventmulticaster.focusgained": [
        "java.awt.AWTEventMulticaster.focusGained(java.awt.event.FocusEvent)"
    ],
    "javax.swing.plaf.multi.multiviewportui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiViewportUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "javax.swing.abstractspinnermodel.firestatechanged": [
        "javax.swing.AbstractSpinnerModel.fireStateChanged()"
    ],
    "java.util.concurrent.atomic.atomicboolean.getandset": [
        "java.util.concurrent.atomic.AtomicBoolean.getAndSet(boolean)"
    ],
    "java.security.policy.getpermissions": [
        "java.security.Policy.getPermissions(java.security.CodeSource)",
        "java.security.Policy.getPermissions(java.security.ProtectionDomain)"
    ],
    "java.security.cert.certstore.getinstance": [
        "java.security.cert.CertStore.getInstance(java.lang.String,java.security.cert.CertStoreParameters,java.lang.String)",
        "java.security.cert.CertStore.getInstance(java.lang.String,java.security.cert.CertStoreParameters)",
        "java.security.cert.CertStore.getInstance(java.lang.String,java.security.cert.CertStoreParameters,java.security.Provider)"
    ],
    "javax.imageio.imagereadparam.setsourceprogressivepasses": [
        "javax.imageio.ImageReadParam.setSourceProgressivePasses(int,int)"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.installkeyboardactions": [
        "javax.swing.plaf.basic.BasicComboBoxUI.installKeyboardActions()"
    ],
    "javax.swing.plaf.metal.metalmenubarui.createui": [
        "javax.swing.plaf.metal.MetalMenuBarUI.createUI(javax.swing.JComponent)"
    ],
    "org.omg.corba.typecode.equal": [
        "org.omg.CORBA.TypeCode.equal(org.omg.CORBA.TypeCode)"
    ],
    "javax.swing.jlabel.gettext": [
        "javax.swing.JLabel.getText()"
    ],
    "org.omg.corba.portable.outputstream.write_context": [
        "org.omg.CORBA.portable.OutputStream.write_Context(org.omg.CORBA.Context,org.omg.CORBA.ContextList)"
    ],
    "javax.swing.abstractlistmodel.firecontentschanged": [
        "javax.swing.AbstractListModel.fireContentsChanged(java.lang.Object,int,int)"
    ],
    "javax.xml.stream.xmlinputfactory.setxmlresolver": [
        "javax.xml.stream.XMLInputFactory.setXMLResolver(javax.xml.stream.XMLResolver)"
    ],
    "java.util.hashmap.remove": [
        "java.util.HashMap.remove(java.lang.Object)"
    ],
    "javax.xml.bind.datatypeconverter.parseunsignedint": [
        "javax.xml.bind.DatatypeConverter.parseUnsignedInt(java.lang.String)"
    ],
    "javax.swing.table.tablecolumn.setcellrenderer": [
        "javax.swing.table.TableColumn.setCellRenderer(javax.swing.table.TableCellRenderer)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getblack": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getBlack()"
    ],
    "javax.management.remote.targetednotification.getlistenerid": [
        "javax.management.remote.TargetedNotification.getListenerID()"
    ],
    "java.io.pipedoutputstream.close": [
        "java.io.PipedOutputStream.close()"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.getlisteners": [
        "javax.swing.tree.DefaultTreeSelectionModel.getListeners(java.lang.Class<T>)"
    ],
    "javax.swing.plaf.multi.multitextui.gettooltiptext": [
        "javax.swing.plaf.multi.MultiTextUI.getToolTipText(javax.swing.text.JTextComponent,java.awt.Point)"
    ],
    "javax.swing.abstractbutton.setverticaltextposition": [
        "javax.swing.AbstractButton.setVerticalTextPosition(int)"
    ],
    "javax.xml.stream.xmlstreamreader.getelementtext": [
        "javax.xml.stream.XMLStreamReader.getElementText()"
    ],
    "org.omg.dynamicany._dynarraystub.get_double": [
        "org.omg.DynamicAny._DynArrayStub.get_double()"
    ],
    "java.util.stringtokenizer.nexttoken": [
        "java.util.StringTokenizer.nextToken(java.lang.String)",
        "java.util.StringTokenizer.nextToken()"
    ],
    "javax.rmi.corba.tie.thisobject": [
        "javax.rmi.CORBA.Tie.thisObject()"
    ],
    "javax.net.ssl.sslsession.getpeerhost": [
        "javax.net.ssl.SSLSession.getPeerHost()"
    ],
    "java.awt.image.bandedsamplemodel.setpixel": [
        "java.awt.image.BandedSampleModel.setPixel(int,int,int[],java.awt.image.DataBuffer)"
    ],
    "javax.sound.sampled.floatcontrol.getunits": [
        "javax.sound.sampled.FloatControl.getUnits()"
    ],
    "javax.swing.swingutilities.convertmouseevent": [
        "javax.swing.SwingUtilities.convertMouseEvent(java.awt.Component,java.awt.event.MouseEvent,java.awt.Component)"
    ],
    "java.security.uriparameter.geturi": [
        "java.security.URIParameter.getURI()"
    ],
    "java.time.temporal.temporalamount.get": [
        "java.time.temporal.TemporalAmount.get(java.time.temporal.TemporalUnit)"
    ],
    "java.lang.management.managementfactory.getmemorymanagermxbeans": [
        "java.lang.management.ManagementFactory.getMemoryManagerMXBeans()"
    ],
    "javax.sound.sampled.mixer.getsourcelineinfo": [
        "javax.sound.sampled.Mixer.getSourceLineInfo()",
        "javax.sound.sampled.Mixer.getSourceLineInfo(javax.sound.sampled.Line.Info)"
    ],
    "javax.script.bindings.get": [
        "javax.script.Bindings.get(java.lang.Object)"
    ],
    "org.xml.sax.helpers.namespacesupport.setnamespacedecluris": [
        "org.xml.sax.helpers.NamespaceSupport.setNamespaceDeclUris(boolean)"
    ],
    "javax.swing.plaf.synth.synthdesktopiconui.update": [
        "javax.swing.plaf.synth.SynthDesktopIconUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.lang.management.threadmxbean.finddeadlockedthreads": [
        "java.lang.management.ThreadMXBean.findDeadlockedThreads()"
    ],
    "java.time.temporal.temporalamount.getunits": [
        "java.time.temporal.TemporalAmount.getUnits()"
    ],
    "javax.swing.tooltipmanager.unregistercomponent": [
        "javax.swing.ToolTipManager.unregisterComponent(javax.swing.JComponent)"
    ],
    "java.time.localdatetime.getminute": [
        "java.time.LocalDateTime.getMinute()"
    ],
    "javax.imageio.imagereader.processsequencestarted": [
        "javax.imageio.ImageReader.processSequenceStarted(int)"
    ],
    "javax.print.attribute.integersyntax.getvalue": [
        "javax.print.attribute.IntegerSyntax.getValue()"
    ],
    "javax.swing.jdialog.setdefaultcloseoperation": [
        "javax.swing.JDialog.setDefaultCloseOperation(int)"
    ],
    "java.util.concurrent.forkjointask.pollnextlocaltask": [
        "java.util.concurrent.ForkJoinTask.pollNextLocalTask()"
    ],
    "java.awt.geom.quadcurve2d.double.getx2": [
        "java.awt.geom.QuadCurve2D.Double.getX2()"
    ],
    "java.awt.image.databufferushort.getbankdata": [
        "java.awt.image.DataBufferUShort.getBankData()"
    ],
    "java.lang.reflect.executable.gettypeparameters": [
        "java.lang.reflect.Executable.getTypeParameters()"
    ],
    "javax.xml.transform.transformerexception.getexception": [
        "javax.xml.transform.TransformerException.getException()"
    ],
    "java.nio.channels.filelock.release": [
        "java.nio.channels.FileLock.release()"
    ],
    "java.awt.im.spi.inputmethod.reconvert": [
        "java.awt.im.spi.InputMethod.reconvert()"
    ],
    "javax.xml.stream.events.characters.getdata": [
        "javax.xml.stream.events.Characters.getData()"
    ],
    "java.lang.processbuilder.redirecterror": [
        "java.lang.ProcessBuilder.redirectError()",
        "java.lang.ProcessBuilder.redirectError(java.lang.ProcessBuilder.Redirect)",
        "java.lang.ProcessBuilder.redirectError(java.io.File)"
    ],
    "java.util.locale.builder.setlocale": [
        "java.util.Locale.Builder.setLocale(java.util.Locale)"
    ],
    "javax.sound.sampled.floatcontrol.getmaxlabel": [
        "javax.sound.sampled.FloatControl.getMaxLabel()"
    ],
    "javax.swing.tree.defaultmutabletreenode.getchildat": [
        "javax.swing.tree.DefaultMutableTreeNode.getChildAt(int)"
    ],
    "java.beans.statement.gettarget": [
        "java.beans.Statement.getTarget()"
    ],
    "java.beans.eventhandler.getaction": [
        "java.beans.EventHandler.getAction()"
    ],
    "javax.sound.midi.sequence.getticklength": [
        "javax.sound.midi.Sequence.getTickLength()"
    ],
    "java.security.domainloadstoreparameter.getprotectionparams": [
        "java.security.DomainLoadStoreParameter.getProtectionParams()"
    ],
    "java.nio.file.files.deleteifexists": [
        "java.nio.file.Files.deleteIfExists(java.nio.file.Path)"
    ],
    "java.sql.preparedstatement.setcharacterstream": [
        "java.sql.PreparedStatement.setCharacterStream(int,java.io.Reader)",
        "java.sql.PreparedStatement.setCharacterStream(int,java.io.Reader,int)",
        "java.sql.PreparedStatement.setCharacterStream(int,java.io.Reader,long)"
    ],
    "java.lang.invoke.serializedlambda.getfunctionalinterfacemethodsignature": [
        "java.lang.invoke.SerializedLambda.getFunctionalInterfaceMethodSignature()"
    ],
    "javax.swing.jcomponent.setinputverifier": [
        "javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"
    ],
    "javax.management.remote.rmi.rmiconnectorserver.start": [
        "javax.management.remote.rmi.RMIConnectorServer.start()"
    ],
    "javax.naming.directory.attribute.get": [
        "javax.naming.directory.Attribute.get(int)"
    ],
    "javax.naming.compoundname.getsuffix": [
        "javax.naming.CompoundName.getSuffix(int)"
    ],
    "java.time.period.getmonths": [
        "java.time.Period.getMonths()"
    ],
    "javax.xml.stream.xmlinputfactory.newfactory": [
        "javax.xml.stream.XMLInputFactory.newFactory(java.lang.String,java.lang.ClassLoader)",
        "javax.xml.stream.XMLInputFactory.newFactory()"
    ],
    "javax.swing.jmenuitem.paramstring": [
        "javax.swing.JMenuItem.paramString()"
    ],
    "javax.swing.text.view.changedupdate": [
        "javax.swing.text.View.changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "java.awt.image.raster.getminy": [
        "java.awt.image.Raster.getMinY()"
    ],
    "javax.net.ssl.sslsessioncontext.setsessioncachesize": [
        "javax.net.ssl.SSLSessionContext.setSessionCacheSize(int)"
    ],
    "java.time.chrono.chronolocaldatetime.getchronology": [
        "java.time.chrono.ChronoLocalDateTime.getChronology()"
    ],
    "javax.naming.reference.tostring": [
        "javax.naming.Reference.toString()"
    ],
    "java.awt.compositecontext.compose": [
        "java.awt.CompositeContext.compose(java.awt.image.Raster,java.awt.image.Raster,java.awt.image.WritableRaster)"
    ],
    "java.util.map.get": [
        "java.util.Map.get(java.lang.Object)"
    ],
    "java.io.filterreader.skip": [
        "java.io.FilterReader.skip(long)"
    ],
    "java.awt.dnd.draggestureevent.getdragsource": [
        "java.awt.dnd.DragGestureEvent.getDragSource()"
    ],
    "javax.accessibility.accessiblecontext.getaccessibletable": [
        "javax.accessibility.AccessibleContext.getAccessibleTable()"
    ],
    "javax.management.monitor.monitor.getobservedobjects": [
        "javax.management.monitor.Monitor.getObservedObjects()"
    ],
    "javax.swing.plaf.multi.multifilechooserui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiFileChooserUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "java.security.cert.x509certselector.getbasicconstraints": [
        "java.security.cert.X509CertSelector.getBasicConstraints()"
    ],
    "java.net.urisyntaxexception.getindex": [
        "java.net.URISyntaxException.getIndex()"
    ],
    "javax.swing.text.html.css.attribute.getdefaultvalue": [
        "javax.swing.text.html.CSS.Attribute.getDefaultValue()"
    ],
    "javax.swing.table.defaulttablecolumnmodel.setcolumnselectionallowed": [
        "javax.swing.table.DefaultTableColumnModel.setColumnSelectionAllowed(boolean)"
    ],
    "java.util.stringjoiner.length": [
        "java.util.StringJoiner.length()"
    ],
    "java.security.unresolvedpermission.tostring": [
        "java.security.UnresolvedPermission.toString()"
    ],
    "org.omg.corba.dataoutputstream.write_wchar": [
        "org.omg.CORBA.DataOutputStream.write_wchar(char)"
    ],
    "java.rmi.activation.activationdesc.getlocation": [
        "java.rmi.activation.ActivationDesc.getLocation()"
    ],
    "javax.imageio.imagetypespecifier.creategrayscale": [
        "javax.imageio.ImageTypeSpecifier.createGrayscale(int,int,boolean,boolean)",
        "javax.imageio.ImageTypeSpecifier.createGrayscale(int,int,boolean)"
    ],
    "javax.sound.midi.sequencer.settrackmute": [
        "javax.sound.midi.Sequencer.setTrackMute(int,boolean)"
    ],
    "javax.tools.simplejavafileobject.openoutputstream": [
        "javax.tools.SimpleJavaFileObject.openOutputStream()"
    ],
    "javax.swing.plaf.basic.basictableheaderui.installlisteners": [
        "javax.swing.plaf.basic.BasicTableHeaderUI.installListeners()"
    ],
    "java.net.socket.getlocaladdress": [
        "java.net.Socket.getLocalAddress()"
    ],
    "javax.swing.actionmap.put": [
        "javax.swing.ActionMap.put(java.lang.Object,javax.swing.Action)"
    ],
    "java.net.socket.getlocalsocketaddress": [
        "java.net.Socket.getLocalSocketAddress()"
    ],
    "java.lang.math.cos": [
        "java.lang.Math.cos(double)"
    ],
    "javax.management.dynamicmbean.getattributes": [
        "javax.management.DynamicMBean.getAttributes(java.lang.String[])"
    ],
    "javax.sound.midi.sequencer.getmastersyncmodes": [
        "javax.sound.midi.Sequencer.getMasterSyncModes()"
    ],
    "java.rmi.server.uid.equals": [
        "java.rmi.server.UID.equals(java.lang.Object)"
    ],
    "javax.sql.rowset.baserowset.getfetchsize": [
        "javax.sql.rowset.BaseRowSet.getFetchSize()"
    ],
    "javax.swing.text.style.removechangelistener": [
        "javax.swing.text.Style.removeChangeListener(javax.swing.event.ChangeListener)"
    ],
    "java.nio.bytebuffer.asshortbuffer": [
        "java.nio.ByteBuffer.asShortBuffer()"
    ],
    "java.io.bytearrayinputstream.skip": [
        "java.io.ByteArrayInputStream.skip(long)"
    ],
    "javax.print.attribute.textsyntax.getvalue": [
        "javax.print.attribute.TextSyntax.getValue()"
    ],
    "java.util.hashmap.put": [
        "java.util.HashMap.put(java.util.HashMap,java.util.HashMap)",
        "java.util.HashMap.put(K,V)"
    ],
    "java.io.filteroutputstream.flush": [
        "java.io.FilterOutputStream.flush()"
    ],
    "javax.xml.validation.schemafactory.setproperty": [
        "javax.xml.validation.SchemaFactory.setProperty(java.lang.String,java.lang.Object)"
    ],
    "javax.swing.text.html.stylesheet.boxpainter.paint": [
        "javax.swing.text.html.StyleSheet.BoxPainter.paint(java.awt.Graphics,float,float,float,float,javax.swing.text.View)"
    ],
    "javax.swing.jmenu.getpopupmenuorigin": [
        "javax.swing.JMenu.getPopupMenuOrigin()"
    ],
    "java.util.zip.inflater.getbytesread": [
        "java.util.zip.Inflater.getBytesRead()"
    ],
    "javax.swing.jslider.setlabeltable": [
        "javax.swing.JSlider.setLabelTable(java.util.Dictionary)"
    ],
    "java.text.decimalformatsymbols.setpercent": [
        "java.text.DecimalFormatSymbols.setPercent(char)"
    ],
    "java.awt.print.book.append": [
        "java.awt.print.Book.append(java.awt.print.Printable,java.awt.print.PageFormat)",
        "java.awt.print.Book.append(java.awt.print.Printable,java.awt.print.PageFormat,int)"
    ],
    "javax.xml.crypto.dsig.spec.excc14nparameterspec.getprefixlist": [
        "javax.xml.crypto.dsig.spec.ExcC14NParameterSpec.getPrefixList()"
    ],
    "java.text.decimalformat.tolocalizedpattern": [
        "java.text.DecimalFormat.toLocalizedPattern()"
    ],
    "java.util.regex.matchresult.groupcount": [
        "java.util.regex.MatchResult.groupCount()"
    ],
    "javax.swing.jrootpane.setdoublebuffered": [
        "javax.swing.JRootPane.setDoubleBuffered(boolean)"
    ],
    "javax.xml.transform.stream.streamresult.setoutputstream": [
        "javax.xml.transform.stream.StreamResult.setOutputStream(java.io.OutputStream)"
    ],
    "javax.swing.plaf.multi.multisliderui.getuis": [
        "javax.swing.plaf.multi.MultiSliderUI.getUIs()"
    ],
    "java.awt.cardlayout.getlayoutalignmentx": [
        "java.awt.CardLayout.getLayoutAlignmentX(java.awt.Container)"
    ],
    "javax.swing.jslider.setfont": [
        "javax.swing.JSlider.setFont(java.awt.Font)"
    ],
    "javax.sql.rowset.baserowset.setdouble": [
        "javax.sql.rowset.BaseRowSet.setDouble(java.lang.String,double)",
        "javax.sql.rowset.BaseRowSet.setDouble(int,double)"
    ],
    "java.awt.checkboxmenuitem.getaccessiblecontext": [
        "java.awt.CheckboxMenuItem.getAccessibleContext()"
    ],
    "javax.swing.jtextpane.getparagraphattributes": [
        "javax.swing.JTextPane.getParagraphAttributes()"
    ],
    "java.awt.geom.affinetransform.getdeterminant": [
        "java.awt.geom.AffineTransform.getDeterminant()"
    ],
    "javax.sound.sampled.booleancontrol.getvalue": [
        "javax.sound.sampled.BooleanControl.getValue()"
    ],
    "java.sql.callablestatement.getref": [
        "java.sql.CallableStatement.getRef(java.lang.String)",
        "java.sql.CallableStatement.getRef(int)"
    ],
    "javax.swing.plaf.multi.multiprogressbarui.createui": [
        "javax.swing.plaf.multi.MultiProgressBarUI.createUI(javax.swing.JComponent)"
    ],
    "org.omg.dynamicany._dynvaluestub.get_reference": [
        "org.omg.DynamicAny._DynValueStub.get_reference()"
    ],
    "javax.swing.jlayer.removeall": [
        "javax.swing.JLayer.removeAll()"
    ],
    "javax.tools.javafilemanager.getjavafileforinput": [
        "javax.tools.JavaFileManager.getJavaFileForInput(javax.tools.JavaFileManager.Location,java.lang.String,javax.tools.JavaFileObject.Kind)"
    ],
    "java.lang.reflect.executable.getannotatedparametertypes": [
        "java.lang.reflect.Executable.getAnnotatedParameterTypes()"
    ],
    "java.sql.parametermetadata.getprecision": [
        "java.sql.ParameterMetaData.getPrecision(int)"
    ],
    "java.awt.image.memoryimagesource.addconsumer": [
        "java.awt.image.MemoryImageSource.addConsumer(java.awt.image.ImageConsumer)"
    ],
    "java.time.offsetdatetime.minusyears": [
        "java.time.OffsetDateTime.minusYears(long)"
    ],
    "javax.swing.text.asyncboxview.updatelayout": [
        "javax.swing.text.AsyncBoxView.updateLayout(javax.swing.event.DocumentEvent.ElementChange,javax.swing.event.DocumentEvent,java.awt.Shape)"
    ],
    "java.util.locale.setdefault": [
        "java.util.Locale.setDefault(java.util.Locale)",
        "java.util.Locale.setDefault(java.util.Locale.Category,java.util.Locale)"
    ],
    "org.xml.sax.xmlreader.parse": [
        "org.xml.sax.XMLReader.parse(org.xml.sax.InputSource)"
    ],
    "javax.swing.defaultsingleselectionmodel.firestatechanged": [
        "javax.swing.DefaultSingleSelectionModel.fireStateChanged()"
    ],
    "java.awt.image.colormodel.getpixelsize": [
        "java.awt.image.ColorModel.getPixelSize()"
    ],
    "javax.crypto.keyagreementspi.enginegeneratesecret": [
        "javax.crypto.KeyAgreementSpi.engineGenerateSecret(byte[],int)",
        "javax.crypto.KeyAgreementSpi.engineGenerateSecret()",
        "javax.crypto.KeyAgreementSpi.engineGenerateSecret(java.lang.String)"
    ],
    "org.w3c.dom.node.settextcontent": [
        "org.w3c.dom.Node.setTextContent(java.lang.String)"
    ],
    "javax.print.attribute.size2dsyntax.tostring": [
        "javax.print.attribute.Size2DSyntax.toString()",
        "javax.print.attribute.Size2DSyntax.toString(int,java.lang.String)"
    ],
    "java.net.httpcookie.clone": [
        "java.net.HttpCookie.clone()"
    ],
    "javax.swing.text.keymap.removekeystrokebinding": [
        "javax.swing.text.Keymap.removeKeyStrokeBinding(javax.swing.KeyStroke)"
    ],
    "org.omg.dynamicany._dynvaluestub.get_typecode": [
        "org.omg.DynamicAny._DynValueStub.get_typecode()"
    ],
    "java.awt.geom.rectangularshape.getwidth": [
        "java.awt.geom.RectangularShape.getWidth()"
    ],
    "java.awt.image.raster.getbounds": [
        "java.awt.image.Raster.getBounds()"
    ],
    "java.time.temporal.temporalfield.getrangeunit": [
        "java.time.temporal.TemporalField.getRangeUnit()"
    ],
    "javax.swing.jcomponent.getgraphics": [
        "javax.swing.JComponent.getGraphics()"
    ],
    "java.util.concurrent.atomic.longadder.doublevalue": [
        "java.util.concurrent.atomic.LongAdder.doubleValue()"
    ],
    "java.time.zoneoffset.gettotalseconds": [
        "java.time.ZoneOffset.getTotalSeconds()"
    ],
    "javax.sql.connectioneventlistener.connectionerroroccurred": [
        "javax.sql.ConnectionEventListener.connectionErrorOccurred(javax.sql.ConnectionEvent)"
    ],
    "java.util.concurrent.linkedblockingdeque.drainto": [
        "java.util.concurrent.LinkedBlockingDeque.drainTo(java.util.Collection<? super E>,int)",
        "java.util.concurrent.LinkedBlockingDeque.drainTo(java.util.Collection<? super E>)"
    ],
    "java.time.zone.zoneoffsettransitionrule.getoffsetbefore": [
        "java.time.zone.ZoneOffsetTransitionRule.getOffsetBefore()"
    ],
    "javax.management.remote.mbeanserverforwarder.getmbeanserver": [
        "javax.management.remote.MBeanServerForwarder.getMBeanServer()"
    ],
    "javax.accessibility.accessiblecontext.getaccessibleaction": [
        "javax.accessibility.AccessibleContext.getAccessibleAction()"
    ],
    "javax.rmi.corba.stubdelegate.tostring": [
        "javax.rmi.CORBA.StubDelegate.toString(javax.rmi.CORBA.Stub)"
    ],
    "java.security.security.insertproviderat": [
        "java.security.Security.insertProviderAt(java.security.Provider,int)"
    ],
    "java.awt.toolkit.getscreensize": [
        "java.awt.Toolkit.getScreenSize()"
    ],
    "java.lang.management.memoryusage.getmax": [
        "java.lang.management.MemoryUsage.getMax()"
    ],
    "java.net.inetaddress.getaddress": [
        "java.net.InetAddress.getAddress()"
    ],
    "javax.swing.sizesequence.getsize": [
        "javax.swing.SizeSequence.getSize(int)"
    ],
    "javax.sql.rowset.baserowset.isreadonly": [
        "javax.sql.rowset.BaseRowSet.isReadOnly()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintcolorchooserborder": [
        "javax.swing.plaf.synth.SynthPainter.paintColorChooserBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.lang.string.valueof": [
        "java.lang.String.valueOf(java.lang.Object)",
        "java.lang.String.valueOf(float)",
        "java.lang.String.valueOf(double)",
        "java.lang.String.valueOf(int)",
        "java.lang.String.valueOf(boolean)",
        "java.lang.String.valueOf(char[])",
        "java.lang.String.valueOf(long)",
        "java.lang.String.valueOf(char)",
        "java.lang.String.valueOf(char[],int,int)"
    ],
    "java.awt.dnd.droptargetdropevent.gettransferable": [
        "java.awt.dnd.DropTargetDropEvent.getTransferable()"
    ],
    "javax.swing.plaf.multi.multiscrollpaneui.getminimumsize": [
        "javax.swing.plaf.multi.MultiScrollPaneUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "javax.swing.text.styleconstants.getfontfamily": [
        "javax.swing.text.StyleConstants.getFontFamily(javax.swing.text.AttributeSet)"
    ],
    "java.text.numberformat.setmaximumintegerdigits": [
        "java.text.NumberFormat.setMaximumIntegerDigits(int)"
    ],
    "javax.swing.jlabel.getverticaltextposition": [
        "javax.swing.JLabel.getVerticalTextPosition()"
    ],
    "javax.xml.datatype.duration.getmonths": [
        "javax.xml.datatype.Duration.getMonths()"
    ],
    "java.time.duration.abs": [
        "java.time.Duration.abs()"
    ],
    "java.io.objectinput.close": [
        "java.io.ObjectInput.close()"
    ],
    "javax.xml.stream.xmlstreamreader.getattributeprefix": [
        "javax.xml.stream.XMLStreamReader.getAttributePrefix(int)"
    ],
    "java.awt.image.colorconvertop.geticc_profiles": [
        "java.awt.image.ColorConvertOp.getICC_Profiles()"
    ],
    "javax.swing.jcombobox.additem": [
        "javax.swing.JComboBox.addItem(javax.swing.JComboBox)"
    ],
    "java.util.locale.forlanguagetag": [
        "java.util.Locale.forLanguageTag(java.lang.String)"
    ],
    "javax.swing.rowfilter.entry.getvaluecount": [
        "javax.swing.RowFilter.Entry.getValueCount()"
    ],
    "org.omg.dynamicany._dynstructstub.get_short": [
        "org.omg.DynamicAny._DynStructStub.get_short()"
    ],
    "javax.xml.crypto.dsig.xmlsignaturefactory.newmanifest": [
        "javax.xml.crypto.dsig.XMLSignatureFactory.newManifest(java.util.List,java.lang.String)",
        "javax.xml.crypto.dsig.XMLSignatureFactory.newManifest(java.util.List)"
    ],
    "java.awt.component.getinputmethodrequests": [
        "java.awt.Component.getInputMethodRequests()"
    ],
    "java.awt.geom.point2d.float.getx": [
        "java.awt.geom.Point2D.Float.getX()"
    ],
    "javax.xml.stream.xmlstreamwriter.writeattribute": [
        "javax.xml.stream.XMLStreamWriter.writeAttribute(java.lang.String,java.lang.String,java.lang.String)",
        "javax.xml.stream.XMLStreamWriter.writeAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
        "javax.xml.stream.XMLStreamWriter.writeAttribute(java.lang.String,java.lang.String)"
    ],
    "java.util.concurrent.completionstage.runafterboth": [
        "java.util.concurrent.CompletionStage.runAfterBoth(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)"
    ],
    "java.text.bidi.tostring": [
        "java.text.Bidi.toString()"
    ],
    "javax.swing.jviewport.setextentsize": [
        "javax.swing.JViewport.setExtentSize(java.awt.Dimension)"
    ],
    "javax.net.ssl.sslcontext.createsslengine": [
        "javax.net.ssl.SSLContext.createSSLEngine(java.lang.String,int)",
        "javax.net.ssl.SSLContext.createSSLEngine()"
    ],
    "java.awt.scrollbar.removeadjustmentlistener": [
        "java.awt.Scrollbar.removeAdjustmentListener(java.awt.event.AdjustmentListener)"
    ],
    "java.util.concurrent.forkjointask.quietlycomplete": [
        "java.util.concurrent.ForkJoinTask.quietlyComplete()"
    ],
    "javax.imageio.stream.imageoutputstream.writechars": [
        "javax.imageio.stream.ImageOutputStream.writeChars(java.lang.String)",
        "javax.imageio.stream.ImageOutputStream.writeChars(char[],int,int)"
    ],
    "javax.swing.buttongroup.getbuttoncount": [
        "javax.swing.ButtonGroup.getButtonCount()"
    ],
    "java.awt.image.directcolormodel.getgreen": [
        "java.awt.image.DirectColorModel.getGreen(java.lang.Object)",
        "java.awt.image.DirectColorModel.getGreen(int)"
    ],
    "java.util.concurrent.locks.condition.await": [
        "java.util.concurrent.locks.Condition.await()",
        "java.util.concurrent.locks.Condition.await(long,java.util.concurrent.TimeUnit)"
    ],
    "java.io.sequenceinputstream.close": [
        "java.io.SequenceInputStream.close()"
    ],
    "java.awt.font.textlayout.getdescent": [
        "java.awt.font.TextLayout.getDescent()"
    ],
    "java.text.characteriterator.getbeginindex": [
        "java.text.CharacterIterator.getBeginIndex()"
    ],
    "javax.sound.midi.shortmessage.getchannel": [
        "javax.sound.midi.ShortMessage.getChannel()"
    ],
    "javax.swing.tree.defaulttreecelleditor.valuechanged": [
        "javax.swing.tree.DefaultTreeCellEditor.valueChanged(javax.swing.event.TreeSelectionEvent)"
    ],
    "java.io.file.listroots": [
        "java.io.File.listRoots()"
    ],
    "javax.swing.plaf.synth.synthsplitpaneui.createui": [
        "javax.swing.plaf.synth.SynthSplitPaneUI.createUI(javax.swing.JComponent)"
    ],
    "java.time.zoneddatetime.ofstrict": [
        "java.time.ZonedDateTime.ofStrict(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneId)"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.getcolumntypename": [
        "javax.sql.rowset.RowSetMetaDataImpl.getColumnTypeName(int)"
    ],
    "java.time.chrono.thaibuddhistdate.with": [
        "java.time.chrono.ThaiBuddhistDate.with(java.time.temporal.TemporalAdjuster)"
    ],
    "org.w3c.dom.node.removechild": [
        "org.w3c.dom.Node.removeChild(org.w3c.dom.Node)"
    ],
    "javax.swing.text.abstractwriter.getwriter": [
        "javax.swing.text.AbstractWriter.getWriter()"
    ],
    "java.time.localdatetime.adjustinto": [
        "java.time.LocalDateTime.adjustInto(java.time.temporal.Temporal)"
    ],
    "javax.sql.rowset.cachedrowset.undodelete": [
        "javax.sql.rowset.CachedRowSet.undoDelete()"
    ],
    "javax.naming.ldap.rdn.unescapevalue": [
        "javax.naming.ldap.Rdn.unescapeValue(java.lang.String)"
    ],
    "javax.naming.cannotproceedexception.getaltname": [
        "javax.naming.CannotProceedException.getAltName()"
    ],
    "org.omg.corba.orb.create_native_tc": [
        "org.omg.CORBA.ORB.create_native_tc(java.lang.String,java.lang.String)"
    ],
    "java.nio.file.attribute.posixfileattributeview.setpermissions": [
        "java.nio.file.attribute.PosixFileAttributeView.setPermissions(java.util.Set<java.nio.file.attribute.PosixFilePermission>)"
    ],
    "java.awt.texturepaint.gettransparency": [
        "java.awt.TexturePaint.getTransparency()"
    ],
    "javax.swing.plaf.metal.metaltheme.getmenutextfont": [
        "javax.swing.plaf.metal.MetalTheme.getMenuTextFont()"
    ],
    "java.awt.awteventmulticaster.ancestorresized": [
        "java.awt.AWTEventMulticaster.ancestorResized(java.awt.event.HierarchyEvent)"
    ],
    "java.util.locale.getunicodelocaleattributes": [
        "java.util.Locale.getUnicodeLocaleAttributes()"
    ],
    "java.text.format.clone": [
        "java.text.Format.clone()"
    ],
    "java.awt.image.indexcolormodel.getblue": [
        "java.awt.image.IndexColorModel.getBlue(int)"
    ],
    "java.text.fieldposition.setbeginindex": [
        "java.text.FieldPosition.setBeginIndex(int)"
    ],
    "java.awt.geom.line2d.double.getx2": [
        "java.awt.geom.Line2D.Double.getX2()"
    ],
    "java.util.simpletimezone.equals": [
        "java.util.SimpleTimeZone.equals(java.lang.Object)"
    ],
    "java.awt.image.bandcombineop.getpoint2d": [
        "java.awt.image.BandCombineOp.getPoint2D(java.awt.geom.Point2D,java.awt.geom.Point2D)"
    ],
    "java.awt.dialog.setbackground": [
        "java.awt.Dialog.setBackground(java.awt.Color)"
    ],
    "javax.net.ssl.sslsession.getapplicationbuffersize": [
        "javax.net.ssl.SSLSession.getApplicationBufferSize()"
    ],
    "java.awt.menuitem.addnotify": [
        "java.awt.MenuItem.addNotify()"
    ],
    "javax.swing.text.abstractdocument.content.getchars": [
        "javax.swing.text.AbstractDocument.Content.getChars(int,int,javax.swing.text.Segment)"
    ],
    "org.omg.portableserver.servant._default_poa": [
        "org.omg.PortableServer.Servant._default_POA()"
    ],
    "java.lang.string.trim": [
        "java.lang.String.trim()"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.issigned": [
        "javax.sql.rowset.RowSetMetaDataImpl.isSigned(int)"
    ],
    "javax.crypto.cipher.getexemptionmechanism": [
        "javax.crypto.Cipher.getExemptionMechanism()"
    ],
    "javax.imageio.stream.filecacheimageinputstream.finalize": [
        "javax.imageio.stream.FileCacheImageInputStream.finalize()"
    ],
    "java.util.concurrent.locks.abstractqueuedlongsynchronizer.conditionobject.haswaiters": [
        "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.hasWaiters()"
    ],
    "java.sql.databasemetadata.getmaxstatementlength": [
        "java.sql.DatabaseMetaData.getMaxStatementLength()"
    ],
    "java.util.concurrent.concurrentskiplistset.add": [
        "java.util.concurrent.ConcurrentSkipListSet.add(java.util.concurrent.ConcurrentSkipListSet)",
        "java.util.concurrent.ConcurrentSkipListSet.add(E)"
    ],
    "javax.xml.bind.helpers.abstractmarshallerimpl.setproperty": [
        "javax.xml.bind.helpers.AbstractMarshallerImpl.setProperty(java.lang.String,java.lang.Object)"
    ],
    "java.io.file.setexecutable": [
        "java.io.File.setExecutable(boolean,boolean)",
        "java.io.File.setExecutable(boolean)"
    ],
    "java.util.logging.logrecord.getsequencenumber": [
        "java.util.logging.LogRecord.getSequenceNumber()"
    ],
    "javax.sql.rowset.baserowset.settransactionisolation": [
        "javax.sql.rowset.BaseRowSet.setTransactionIsolation(int)"
    ],
    "java.awt.component.removehierarchyboundslistener": [
        "java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"
    ],
    "java.time.duration.minusnanos": [
        "java.time.Duration.minusNanos(long)"
    ],
    "java.nio.channels.asynchronousserversocketchannel.bind": [
        "java.nio.channels.AsynchronousServerSocketChannel.bind(java.net.SocketAddress)",
        "java.nio.channels.AsynchronousServerSocketChannel.bind(java.net.SocketAddress,int)"
    ],
    "javax.swing.text.styleconstants.geticon": [
        "javax.swing.text.StyleConstants.getIcon(javax.swing.text.AttributeSet)"
    ],
    "java.awt.window.dispose": [
        "java.awt.Window.dispose()"
    ],
    "java.awt.itemselectable.additemlistener": [
        "java.awt.ItemSelectable.addItemListener(java.awt.event.ItemListener)"
    ],
    "java.lang.invoke.methodtype.unwrap": [
        "java.lang.invoke.MethodType.unwrap()"
    ],
    "javax.imageio.metadata.iiometadata.getnativemetadataformatname": [
        "javax.imageio.metadata.IIOMetadata.getNativeMetadataFormatName()"
    ],
    "javax.xml.soap.text.iscomment": [
        "javax.xml.soap.Text.isComment()"
    ],
    "javax.management.relation.role.rolevaluetostring": [
        "javax.management.relation.Role.roleValueToString(java.util.List<javax.management.ObjectName>)"
    ],
    "java.net.httpurlconnection.getheaderfield": [
        "java.net.HttpURLConnection.getHeaderField(int)"
    ],
    "javax.management.remote.rmi.rmiconnection.fetchnotifications": [
        "javax.management.remote.rmi.RMIConnection.fetchNotifications(long,int,long)"
    ],
    "javax.sound.midi.midisystem.getreceiver": [
        "javax.sound.midi.MidiSystem.getReceiver()"
    ],
    "javax.swing.jlabel.gethorizontalalignment": [
        "javax.swing.JLabel.getHorizontalAlignment()"
    ],
    "javax.imageio.metadata.iiometadata.getstandardtextnode": [
        "javax.imageio.metadata.IIOMetadata.getStandardTextNode()"
    ],
    "javax.swing.plaf.basic.basiclistui.selectnextindex": [
        "javax.swing.plaf.basic.BasicListUI.selectNextIndex()"
    ],
    "java.util.concurrent.locks.locksupport.parkuntil": [
        "java.util.concurrent.locks.LockSupport.parkUntil(java.lang.Object,long)",
        "java.util.concurrent.locks.LockSupport.parkUntil(long)"
    ],
    "java.lang.system.loadlibrary": [
        "java.lang.System.loadLibrary(java.lang.String)"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.setentityresolver": [
        "org.xml.sax.helpers.XMLFilterImpl.setEntityResolver(org.xml.sax.EntityResolver)"
    ],
    "javax.xml.ws.spi.http.httpexchange.getrequestheaders": [
        "javax.xml.ws.spi.http.HttpExchange.getRequestHeaders()"
    ],
    "java.util.concurrent.locks.abstractqueuedsynchronizer.compareandsetstate": [
        "java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int,int)"
    ],
    "java.awt.event.mousewheelevent.getscrollamount": [
        "java.awt.event.MouseWheelEvent.getScrollAmount()"
    ],
    "javax.swing.text.defaulthighlighter.defaulthighlightpainter.paint": [
        "javax.swing.text.DefaultHighlighter.DefaultHighlightPainter.paint(java.awt.Graphics,int,int,java.awt.Shape,javax.swing.text.JTextComponent)"
    ],
    "javax.swing.jeditorpane.read": [
        "javax.swing.JEditorPane.read(java.io.InputStream,java.lang.Object)"
    ],
    "java.util.collections.unmodifiablesortedset": [
        "java.util.Collections.unmodifiableSortedSet(java.util.SortedSet<T>)"
    ],
    "java.time.chrono.chronology.of": [
        "java.time.chrono.Chronology.of(java.lang.String)"
    ],
    "javax.naming.ldap.starttlsresponse.negotiate": [
        "javax.naming.ldap.StartTlsResponse.negotiate(javax.net.ssl.SSLSocketFactory)",
        "javax.naming.ldap.StartTlsResponse.negotiate()"
    ],
    "javax.security.sasl.sasl.getsaslserverfactories": [
        "javax.security.sasl.Sasl.getSaslServerFactories()"
    ],
    "java.lang.integer.longvalue": [
        "java.lang.Integer.longValue()"
    ],
    "java.awt.image.rescaleop.filter": [
        "java.awt.image.RescaleOp.filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)",
        "java.awt.image.RescaleOp.filter(java.awt.image.Raster,java.awt.image.WritableRaster)"
    ],
    "javax.management.remote.jmxconnectorservermbean.start": [
        "javax.management.remote.JMXConnectorServerMBean.start()"
    ],
    "java.lang.classloader.registerasparallelcapable": [
        "java.lang.ClassLoader.registerAsParallelCapable()"
    ],
    "java.lang.management.runtimemxbean.getspecvendor": [
        "java.lang.management.RuntimeMXBean.getSpecVendor()"
    ],
    "javax.lang.model.util.elementfilter.packagesin": [
        "javax.lang.model.util.ElementFilter.packagesIn(java.util.Set<? extends javax.lang.model.element.Element>)",
        "javax.lang.model.util.ElementFilter.packagesIn(java.lang.Iterable<? extends javax.lang.model.element.Element>)"
    ],
    "java.net.urlconnection.getinputstream": [
        "java.net.URLConnection.getInputStream()"
    ],
    "java.time.zone.zonerules.hashcode": [
        "java.time.zone.ZoneRules.hashCode()"
    ],
    "javax.sql.rowset.getescapeprocessing": [
        "javax.sql.RowSet.getEscapeProcessing()"
    ],
    "javax.sql.rowset.baserowset.notifycursormoved": [
        "javax.sql.rowset.BaseRowSet.notifyCursorMoved()"
    ],
    "javax.swing.plaf.multi.multisliderui.paint": [
        "javax.swing.plaf.multi.MultiSliderUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "org.omg.corba.charholder._write": [
        "org.omg.CORBA.CharHolder._write(org.omg.CORBA.portable.OutputStream)"
    ],
    "java.util.hashset.iterator": [
        "java.util.HashSet.iterator()"
    ],
    "javax.swing.jmenuitem.firemenukeyreleased": [
        "javax.swing.JMenuItem.fireMenuKeyReleased(javax.swing.event.MenuKeyEvent)"
    ],
    "java.lang.invoke.methodhandleproxies.wrapperinstancetype": [
        "java.lang.invoke.MethodHandleProxies.wrapperInstanceType(java.lang.Object)"
    ],
    "java.awt.image.databuffer.getelemdouble": [
        "java.awt.image.DataBuffer.getElemDouble(int,int)"
    ],
    "java.sql.databasemetadata.supportsgroupby": [
        "java.sql.DatabaseMetaData.supportsGroupBy()"
    ],
    "javax.swing.plaf.multi.multiseparatorui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiSeparatorUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.synth.synthtableheaderui.rollovercolumnupdated": [
        "javax.swing.plaf.synth.SynthTableHeaderUI.rolloverColumnUpdated(int,int)"
    ],
    "java.util.concurrent.atomic.atomiclongfieldupdater.compareandset": [
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.compareAndSet(T,long,long)",
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.compareAndSet(java.util.concurrent.atomic.AtomicLongFieldUpdater,long,long)"
    ],
    "javax.swing.jmenu.firemenucanceled": [
        "javax.swing.JMenu.fireMenuCanceled()"
    ],
    "java.awt.graphicsconfiguration.createcompatibleimage": [
        "java.awt.GraphicsConfiguration.createCompatibleImage(int,int)",
        "java.awt.GraphicsConfiguration.createCompatibleImage(int,int,int)"
    ],
    "javax.swing.text.abstractdocument.elementedit.getelement": [
        "javax.swing.text.AbstractDocument.ElementEdit.getElement()"
    ],
    "javax.swing.jtabbedpane.settabcomponentat": [
        "javax.swing.JTabbedPane.setTabComponentAt(int,java.awt.Component)"
    ],
    "javax.lang.model.util.elementkindvisitor6.visittypeparameter": [
        "javax.lang.model.util.ElementKindVisitor6.visitTypeParameter(javax.lang.model.element.TypeParameterElement,javax.lang.model.util.ElementKindVisitor6)"
    ],
    "org.w3c.dom.ls.lsserializerfilter.getwhattoshow": [
        "org.w3c.dom.ls.LSSerializerFilter.getWhatToShow()"
    ],
    "javax.swing.text.view.gettooltiptext": [
        "javax.swing.text.View.getToolTipText(float,float,java.awt.Shape)"
    ],
    "java.net.uri.getrawuserinfo": [
        "java.net.URI.getRawUserInfo()"
    ],
    "javax.swing.plaf.basic.basictreeui.getclosestpathforlocation": [
        "javax.swing.plaf.basic.BasicTreeUI.getClosestPathForLocation(javax.swing.JTree,int,int)"
    ],
    "javax.crypto.spec.gcmparameterspec.gettlen": [
        "javax.crypto.spec.GCMParameterSpec.getTLen()"
    ],
    "javax.imageio.imagereadparam.getsourceminprogressivepass": [
        "javax.imageio.ImageReadParam.getSourceMinProgressivePass()"
    ],
    "javax.lang.model.util.elements.hides": [
        "javax.lang.model.util.Elements.hides(javax.lang.model.element.Element,javax.lang.model.element.Element)"
    ],
    "org.omg.dynamicany.dynunionoperations.member_name": [
        "org.omg.DynamicAny.DynUnionOperations.member_name()"
    ],
    "java.util.concurrent.threadpoolexecutor.setkeepalivetime": [
        "java.util.concurrent.ThreadPoolExecutor.setKeepAliveTime(long,java.util.concurrent.TimeUnit)"
    ],
    "java.io.printstream.println": [
        "java.io.PrintStream.println(java.lang.String)",
        "java.io.PrintStream.println(float)",
        "java.io.PrintStream.println()",
        "java.io.PrintStream.println(long)",
        "java.io.PrintStream.println(double)",
        "java.io.PrintStream.println(int)",
        "java.io.PrintStream.println(boolean)",
        "java.io.PrintStream.println(char)",
        "java.io.PrintStream.println(java.lang.Object)",
        "java.io.PrintStream.println(char[])"
    ],
    "javax.activation.commandinfo.getcommandclass": [
        "javax.activation.CommandInfo.getCommandClass()"
    ],
    "java.awt.list.paramstring": [
        "java.awt.List.paramString()"
    ],
    "java.awt.image.affinetransformop.getrenderinghints": [
        "java.awt.image.AffineTransformOp.getRenderingHints()"
    ],
    "org.xml.sax.attributes.getlocalname": [
        "org.xml.sax.Attributes.getLocalName(int)"
    ],
    "java.awt.textcomponent.processevent": [
        "java.awt.TextComponent.processEvent(java.awt.AWTEvent)"
    ],
    "javax.swing.colorchooser.colorselectionmodel.addchangelistener": [
        "javax.swing.colorchooser.ColorSelectionModel.addChangeListener(javax.swing.event.ChangeListener)"
    ],
    "java.lang.annotation.target.value": [
        "java.lang.annotation.Target.value()"
    ],
    "java.awt.awtevent.setsource": [
        "java.awt.AWTEvent.setSource(java.lang.Object)"
    ],
    "org.omg.corba.datainputstream.read_longlong": [
        "org.omg.CORBA.DataInputStream.read_longlong()"
    ],
    "javax.swing.plaf.multi.multitoolbarui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiToolBarUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "org.omg.cosnaming._bindingiteratorstub.destroy": [
        "org.omg.CosNaming._BindingIteratorStub.destroy()"
    ],
    "java.awt.keyboardfocusmanager.setdefaultfocustraversalkeys": [
        "java.awt.KeyboardFocusManager.setDefaultFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"
    ],
    "javax.swing.rowfilter.andfilter": [
        "javax.swing.RowFilter.andFilter(java.lang.Iterable<? extends javax.swing.RowFilter<? super,? super I>>)"
    ],
    "javax.lang.model.util.types.erasure": [
        "javax.lang.model.util.Types.erasure(javax.lang.model.type.TypeMirror)"
    ],
    "javax.swing.text.html.stylesheet.getbackground": [
        "javax.swing.text.html.StyleSheet.getBackground(javax.swing.text.AttributeSet)"
    ],
    "javax.xml.transform.stream.streamsource.getreader": [
        "javax.xml.transform.stream.StreamSource.getReader()"
    ],
    "org.omg.corba.typecodeholder._write": [
        "org.omg.CORBA.TypeCodeHolder._write(org.omg.CORBA.portable.OutputStream)"
    ],
    "javax.swing.text.boxview.paint": [
        "javax.swing.text.BoxView.paint(java.awt.Graphics,java.awt.Shape)"
    ],
    "java.lang.charsequence.codepoints": [
        "java.lang.CharSequence.codePoints()"
    ],
    "java.rmi.activation.activationsystem.setactivationgroupdesc": [
        "java.rmi.activation.ActivationSystem.setActivationGroupDesc(java.rmi.activation.ActivationGroupID,java.rmi.activation.ActivationGroupDesc)"
    ],
    "javax.xml.bind.annotation.xmlaccessorder.values": [
        "javax.xml.bind.annotation.XmlAccessOrder.values()"
    ],
    "javax.xml.ws.endpoint.getendpointreference": [
        "javax.xml.ws.Endpoint.getEndpointReference(java.lang.Class<T>,org.w3c.dom.Element...)",
        "javax.xml.ws.Endpoint.getEndpointReference(org.w3c.dom.Element...)"
    ],
    "java.awt.list.getitem": [
        "java.awt.List.getItem(int)"
    ],
    "javax.net.ssl.sslparameters.getciphersuites": [
        "javax.net.ssl.SSLParameters.getCipherSuites()"
    ],
    "java.sql.databasemetadata.getidentifierquotestring": [
        "java.sql.DatabaseMetaData.getIdentifierQuoteString()"
    ],
    "java.awt.adjustable.setblockincrement": [
        "java.awt.Adjustable.setBlockIncrement(int)"
    ],
    "java.util.vector.indexof": [
        "java.util.Vector.indexOf(java.lang.Object)",
        "java.util.Vector.indexOf(java.lang.Object,int)"
    ],
    "java.awt.geom.point2d.gety": [
        "java.awt.geom.Point2D.getY()"
    ],
    "java.lang.boolean.logicalor": [
        "java.lang.Boolean.logicalOr(boolean,boolean)"
    ],
    "javax.swing.event.ancestorevent.getancestorparent": [
        "javax.swing.event.AncestorEvent.getAncestorParent()"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getinactivesystemtextcolor": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getInactiveSystemTextColor()"
    ],
    "javax.accessibility.accessibletext.getcharacterattribute": [
        "javax.accessibility.AccessibleText.getCharacterAttribute(int)"
    ],
    "java.time.instant.with": [
        "java.time.Instant.with(java.time.temporal.TemporalAdjuster)",
        "java.time.Instant.with(java.time.temporal.TemporalField,long)"
    ],
    "javax.naming.ldap.hascontrols.getcontrols": [
        "javax.naming.ldap.HasControls.getControls()"
    ],
    "javax.sql.xadatasource.getxaconnection": [
        "javax.sql.XADataSource.getXAConnection(java.lang.String,java.lang.String)",
        "javax.sql.XADataSource.getXAConnection()"
    ],
    "java.rmi.activation.activationsystem.getactivationgroupdesc": [
        "java.rmi.activation.ActivationSystem.getActivationGroupDesc(java.rmi.activation.ActivationGroupID)"
    ],
    "javax.print.attribute.resolutionsyntax.getfeedresolutiondphi": [
        "javax.print.attribute.ResolutionSyntax.getFeedResolutionDphi()"
    ],
    "java.time.zoneoffset.adjustinto": [
        "java.time.ZoneOffset.adjustInto(java.time.temporal.Temporal)"
    ],
    "javax.swing.plaf.basic.basiccombopopup.createlistmousemotionlistener": [
        "javax.swing.plaf.basic.BasicComboPopup.createListMouseMotionListener()"
    ],
    "javax.swing.tree.variableheightlayoutcache.getpathforrow": [
        "javax.swing.tree.VariableHeightLayoutCache.getPathForRow(int)"
    ],
    "javax.print.attribute.standard.printerstatereason.getname": [
        "javax.print.attribute.standard.PrinterStateReason.getName()"
    ],
    "org.omg.corba.object._non_existent": [
        "org.omg.CORBA.Object._non_existent()"
    ],
    "java.util.linkedlist.remove": [
        "java.util.LinkedList.remove(java.lang.Object)",
        "java.util.LinkedList.remove(int)"
    ],
    "java.sql.databasemetadata.supportsextendedsqlgrammar": [
        "java.sql.DatabaseMetaData.supportsExtendedSQLGrammar()"
    ],
    "java.util.zip.inflateroutputstream.write": [
        "java.util.zip.InflaterOutputStream.write(int)",
        "java.util.zip.InflaterOutputStream.write(byte[],int,int)"
    ],
    "javax.swing.jcolorchooser.showdialog": [
        "javax.swing.JColorChooser.showDialog(java.awt.Component,java.lang.String,java.awt.Color)"
    ],
    "javax.swing.plaf.basic.basiclookandfeel.initclassdefaults": [
        "javax.swing.plaf.basic.BasicLookAndFeel.initClassDefaults(javax.swing.UIDefaults)"
    ],
    "javax.swing.text.html.htmlwriter.comment": [
        "javax.swing.text.html.HTMLWriter.comment(javax.swing.text.Element)"
    ],
    "javax.accessibility.accessibleeditabletext.replacetext": [
        "javax.accessibility.AccessibleEditableText.replaceText(int,int,java.lang.String)"
    ],
    "java.awt.graphics.setcolor": [
        "java.awt.Graphics.setColor(java.awt.Color)"
    ],
    "javax.sound.midi.midichannel.setpitchbend": [
        "javax.sound.midi.MidiChannel.setPitchBend(int)"
    ],
    "java.util.enummap.entryset": [
        "java.util.EnumMap.entrySet()"
    ],
    "javax.imageio.imagetypespecifier.getsamplemodel": [
        "javax.imageio.ImageTypeSpecifier.getSampleModel(int,int)",
        "javax.imageio.ImageTypeSpecifier.getSampleModel()"
    ],
    "javax.swing.plaf.multi.multidesktopiconui.uninstallui": [
        "javax.swing.plaf.multi.MultiDesktopIconUI.uninstallUI(javax.swing.JComponent)"
    ],
    "javax.activation.mimetypeparameterlist.get": [
        "javax.activation.MimeTypeParameterList.get(java.lang.String)"
    ],
    "java.time.duration.tominutes": [
        "java.time.Duration.toMinutes()"
    ],
    "java.util.vector.lastindexof": [
        "java.util.Vector.lastIndexOf(java.lang.Object,int)",
        "java.util.Vector.lastIndexOf(java.lang.Object)"
    ],
    "java.awt.geom.line2d.ptlinedistsq": [
        "java.awt.geom.Line2D.ptLineDistSq(java.awt.geom.Point2D)",
        "java.awt.geom.Line2D.ptLineDistSq(double,double)",
        "java.awt.geom.Line2D.ptLineDistSq(double,double,double,double,double,double)"
    ],
    "javax.sql.rowset.baserowset.setstring": [
        "javax.sql.rowset.BaseRowSet.setString(java.lang.String,java.lang.String)",
        "javax.sql.rowset.BaseRowSet.setString(int,java.lang.String)"
    ],
    "java.lang.instrument.instrumentation.isredefineclassessupported": [
        "java.lang.instrument.Instrumentation.isRedefineClassesSupported()"
    ],
    "javax.naming.nameclasspair.getnameinnamespace": [
        "javax.naming.NameClassPair.getNameInNamespace()"
    ],
    "java.beans.propertydescriptor.setbound": [
        "java.beans.PropertyDescriptor.setBound(boolean)"
    ],
    "javax.swing.jrootpane.getcontentpane": [
        "javax.swing.JRootPane.getContentPane()"
    ],
    "javax.swing.jcomponent.getminimumsize": [
        "javax.swing.JComponent.getMinimumSize()"
    ],
    "java.awt.graphicsdevice.getdefaultconfiguration": [
        "java.awt.GraphicsDevice.getDefaultConfiguration()"
    ],
    "java.time.offsetdatetime.minushours": [
        "java.time.OffsetDateTime.minusHours(long)"
    ],
    "javax.swing.jwindow.getaccessiblecontext": [
        "javax.swing.JWindow.getAccessibleContext()"
    ],
    "java.util.enummap.hashcode": [
        "java.util.EnumMap.hashCode()"
    ],
    "javax.swing.jformattedtextfield.processfocusevent": [
        "javax.swing.JFormattedTextField.processFocusEvent(java.awt.event.FocusEvent)"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.uninstalldefaults": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.uninstallDefaults()"
    ],
    "java.util.concurrent.completablefuture.thenaccept": [
        "java.util.concurrent.CompletableFuture.thenAccept(java.util.function.Consumer<? super T>)"
    ],
    "javax.activation.mimetypeparameterlist.remove": [
        "javax.activation.MimeTypeParameterList.remove(java.lang.String)"
    ],
    "javax.swing.jtree.cleartoggledpaths": [
        "javax.swing.JTree.clearToggledPaths()"
    ],
    "javax.swing.plaf.basic.basictreeui.selectpathforevent": [
        "javax.swing.plaf.basic.BasicTreeUI.selectPathForEvent(javax.swing.tree.TreePath,java.awt.event.MouseEvent)"
    ],
    "javax.print.attribute.standard.fidelity.getname": [
        "javax.print.attribute.standard.Fidelity.getName()"
    ],
    "javax.xml.crypto.keyselectorresult.getkey": [
        "javax.xml.crypto.KeySelectorResult.getKey()"
    ],
    "java.lang.long.floatvalue": [
        "java.lang.Long.floatValue()"
    ],
    "java.util.stream.intstream.foreach": [
        "java.util.stream.IntStream.forEach(java.util.function.IntConsumer)"
    ],
    "javax.swing.abstractbutton.getchangelisteners": [
        "javax.swing.AbstractButton.getChangeListeners()"
    ],
    "javax.swing.tree.mutabletreenode.removefromparent": [
        "javax.swing.tree.MutableTreeNode.removeFromParent()"
    ],
    "java.text.breakiterator.previous": [
        "java.text.BreakIterator.previous()"
    ],
    "javax.script.simplescriptcontext.setattribute": [
        "javax.script.SimpleScriptContext.setAttribute(java.lang.String,java.lang.Object,int)"
    ],
    "javax.lang.model.util.elementkindvisitor6.visitvariableasfield": [
        "javax.lang.model.util.ElementKindVisitor6.visitVariableAsField(javax.lang.model.element.VariableElement,javax.lang.model.util.ElementKindVisitor6)"
    ],
    "javax.swing.text.keymap.setresolveparent": [
        "javax.swing.text.Keymap.setResolveParent(javax.swing.text.Keymap)"
    ],
    "java.io.pipedinputstream.receive": [
        "java.io.PipedInputStream.receive(int)"
    ],
    "java.time.chrono.chronology.localdatetime": [
        "java.time.chrono.Chronology.localDateTime(java.time.temporal.TemporalAccessor)"
    ],
    "java.io.printwriter.print": [
        "java.io.PrintWriter.print(char[])",
        "java.io.PrintWriter.print(java.lang.String)",
        "java.io.PrintWriter.print(char)",
        "java.io.PrintWriter.print(int)",
        "java.io.PrintWriter.print(java.lang.Object)",
        "java.io.PrintWriter.print(boolean)",
        "java.io.PrintWriter.print(long)"
    ],
    "javax.accessibility.accessiblecomponent.setbounds": [
        "javax.accessibility.AccessibleComponent.setBounds(java.awt.Rectangle)"
    ],
    "javax.swing.plaf.multi.multisliderui.update": [
        "javax.swing.plaf.multi.MultiSliderUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.xml.ws.spi.http.httpcontext.getpath": [
        "javax.xml.ws.spi.http.HttpContext.getPath()"
    ],
    "javax.management.objectname.getinstance": [
        "javax.management.ObjectName.getInstance(javax.management.ObjectName)",
        "javax.management.ObjectName.getInstance(java.lang.String)",
        "javax.management.ObjectName.getInstance(java.lang.String,java.lang.String,java.lang.String)",
        "javax.management.ObjectName.getInstance(java.lang.String,,java.lang.String>)"
    ],
    "javax.imageio.event.iioreadprogresslistener.imageprogress": [
        "javax.imageio.event.IIOReadProgressListener.imageProgress(javax.imageio.ImageReader,float)"
    ],
    "java.sql.databasemetadata.getdatabasemajorversion": [
        "java.sql.DatabaseMetaData.getDatabaseMajorVersion()"
    ],
    "java.awt.image.samplemodel.getdataelements": [
        "java.awt.image.SampleModel.getDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)",
        "java.awt.image.SampleModel.getDataElements(int,int,int,int,java.lang.Object,java.awt.image.DataBuffer)"
    ],
    "org.omg.portableserver.poaoperations.get_servant": [
        "org.omg.PortableServer.POAOperations.get_servant()"
    ],
    "java.awt.image.rescaleop.getbounds2d": [
        "java.awt.image.RescaleOp.getBounds2D(java.awt.image.BufferedImage)",
        "java.awt.image.RescaleOp.getBounds2D(java.awt.image.Raster)"
    ],
    "javax.xml.soap.soapheader.addheaderelement": [
        "javax.xml.soap.SOAPHeader.addHeaderElement(javax.xml.soap.Name)",
        "javax.xml.soap.SOAPHeader.addHeaderElement(javax.xml.namespace.QName)"
    ],
    "javax.xml.transform.transformer.getparameter": [
        "javax.xml.transform.Transformer.getParameter(java.lang.String)"
    ],
    "org.omg.corba.dataoutputstream.write_boolean_array": [
        "org.omg.CORBA.DataOutputStream.write_boolean_array(boolean[],int,int)"
    ],
    "javax.print.attribute.standard.jobsheets.getcategory": [
        "javax.print.attribute.standard.JobSheets.getCategory()"
    ],
    "java.awt.scrollpane.printcomponents": [
        "java.awt.ScrollPane.printComponents(java.awt.Graphics)"
    ],
    "javax.sound.midi.sequencer.setmastersyncmode": [
        "javax.sound.midi.Sequencer.setMasterSyncMode(javax.sound.midi.Sequencer.SyncMode)"
    ],
    "org.w3c.dom.ls.lsinput.getencoding": [
        "org.w3c.dom.ls.LSInput.getEncoding()"
    ],
    "javax.net.ssl.sslserversocket.setsslparameters": [
        "javax.net.ssl.SSLServerSocket.setSSLParameters(javax.net.ssl.SSLParameters)"
    ],
    "org.omg.dynamicany._dynarraystub.component_count": [
        "org.omg.DynamicAny._DynArrayStub.component_count()"
    ],
    "java.util.concurrent.copyonwritearraylist.equals": [
        "java.util.concurrent.CopyOnWriteArrayList.equals(java.lang.Object)"
    ],
    "javax.xml.bind.annotation.adapters.xmladapter.marshal": [
        "javax.xml.bind.annotation.adapters.XmlAdapter.marshal(javax.xml.bind.annotation.adapters.XmlAdapter)"
    ],
    "javax.accessibility.accessiblecontext.getaccessiblevalue": [
        "javax.accessibility.AccessibleContext.getAccessibleValue()"
    ],
    "java.lang.throwable.tostring": [
        "java.lang.Throwable.toString()"
    ],
    "java.util.resourcebundle.control.getcontrol": [
        "java.util.ResourceBundle.Control.getControl(java.util.List<java.lang.String>)"
    ],
    "java.lang.math.ulp": [
        "java.lang.Math.ulp(float)",
        "java.lang.Math.ulp(double)"
    ],
    "javax.crypto.encryptedprivatekeyinfo.getalgname": [
        "javax.crypto.EncryptedPrivateKeyInfo.getAlgName()"
    ],
    "java.awt.basicstroke.getendcap": [
        "java.awt.BasicStroke.getEndCap()"
    ],
    "javax.swing.jtextfield.getactionlisteners": [
        "javax.swing.JTextField.getActionListeners()"
    ],
    "javax.swing.jtextfield.getscrolloffset": [
        "javax.swing.JTextField.getScrollOffset()"
    ],
    "java.util.comparator.nullsfirst": [
        "java.util.Comparator.nullsFirst(java.util.Comparator<? super T>)"
    ],
    "java.lang.stringbuilder.appendcodepoint": [
        "java.lang.StringBuilder.appendCodePoint(int)"
    ],
    "java.awt.toolkit.addawteventlistener": [
        "java.awt.Toolkit.addAWTEventListener(java.awt.event.AWTEventListener,long)"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.readlock.lockinterruptibly": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.lockInterruptibly()"
    ],
    "org.omg.corba.portable.inputstream.read_ushort": [
        "org.omg.CORBA.portable.InputStream.read_ushort()"
    ],
    "javax.swing.swingworker.getprogress": [
        "javax.swing.SwingWorker.getProgress()"
    ],
    "java.io.datainput.readfully": [
        "java.io.DataInput.readFully(byte[],int,int)",
        "java.io.DataInput.readFully(byte[])"
    ],
    "java.lang.integer.signum": [
        "java.lang.Integer.signum(int)"
    ],
    "javax.swing.text.element.getattributes": [
        "javax.swing.text.Element.getAttributes()"
    ],
    "java.awt.layoutmanager2.getlayoutalignmentx": [
        "java.awt.LayoutManager2.getLayoutAlignmentX(java.awt.Container)"
    ],
    "java.awt.font.glyphvector.getfontrendercontext": [
        "java.awt.font.GlyphVector.getFontRenderContext()"
    ],
    "javax.xml.bind.datatypeconverterinterface.parseinteger": [
        "javax.xml.bind.DatatypeConverterInterface.parseInteger(java.lang.String)"
    ],
    "java.awt.component.getdroptarget": [
        "java.awt.Component.getDropTarget()"
    ],
    "java.nio.channels.selector.selectedkeys": [
        "java.nio.channels.Selector.selectedKeys()"
    ],
    "javax.naming.directory.searchcontrols.getdereflinkflag": [
        "javax.naming.directory.SearchControls.getDerefLinkFlag()"
    ],
    "java.security.cert.x509certselector.setcertificatevalid": [
        "java.security.cert.X509CertSelector.setCertificateValid(java.util.Date)"
    ],
    "javax.swing.lookandfeel.installproperty": [
        "javax.swing.LookAndFeel.installProperty(javax.swing.JComponent,java.lang.String,java.lang.Object)"
    ],
    "javax.swing.text.simpleattributeset.setresolveparent": [
        "javax.swing.text.SimpleAttributeSet.setResolveParent(javax.swing.text.AttributeSet)"
    ],
    "javax.swing.plaf.synth.synthtextareaui.createui": [
        "javax.swing.plaf.synth.SynthTextAreaUI.createUI(javax.swing.JComponent)"
    ],
    "java.awt.frame.getaccessiblecontext": [
        "java.awt.Frame.getAccessibleContext()"
    ],
    "javax.swing.plaf.multi.multipanelui.uninstallui": [
        "javax.swing.plaf.multi.MultiPanelUI.uninstallUI(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.synth.synthcomboboxui.getdefaultsize": [
        "javax.swing.plaf.synth.SynthComboBoxUI.getDefaultSize()"
    ],
    "java.util.function.intpredicate.negate": [
        "java.util.function.IntPredicate.negate()"
    ],
    "java.net.socket.setreceivebuffersize": [
        "java.net.Socket.setReceiveBufferSize(int)"
    ],
    "javax.management.remote.jmxprincipal.getname": [
        "javax.management.remote.JMXPrincipal.getName()"
    ],
    "java.sql.databasemetadata.supportsouterjoins": [
        "java.sql.DatabaseMetaData.supportsOuterJoins()"
    ],
    "org.omg.dynamicany._dynarraystub.destroy": [
        "org.omg.DynamicAny._DynArrayStub.destroy()"
    ],
    "java.util.concurrent.forkjointask.setforkjointasktag": [
        "java.util.concurrent.ForkJoinTask.setForkJoinTaskTag(short)"
    ],
    "javax.swing.plaf.synth.synthprogressbarui.getcontext": [
        "javax.swing.plaf.synth.SynthProgressBarUI.getContext(javax.swing.JComponent)"
    ],
    "java.awt.geom.rectangularshape.getmaxy": [
        "java.awt.geom.RectangularShape.getMaxY()"
    ],
    "javax.swing.jcombobox.removeallitems": [
        "javax.swing.JComboBox.removeAllItems()"
    ],
    "java.util.stream.intstream.sorted": [
        "java.util.stream.IntStream.sorted()"
    ],
    "java.util.concurrent.concurrentlinkeddeque.descendingiterator": [
        "java.util.concurrent.ConcurrentLinkedDeque.descendingIterator()"
    ],
    "javax.swing.spinnerdatemodel.getstart": [
        "javax.swing.SpinnerDateModel.getStart()"
    ],
    "javax.swing.text.iconview.getpreferredspan": [
        "javax.swing.text.IconView.getPreferredSpan(int)"
    ],
    "javax.accessibility.accessibleselection.clearaccessibleselection": [
        "javax.accessibility.AccessibleSelection.clearAccessibleSelection()"
    ],
    "javax.swing.listselectionmodel.insertindexinterval": [
        "javax.swing.ListSelectionModel.insertIndexInterval(int,int,boolean)"
    ],
    "javax.script.scriptcontext.setbindings": [
        "javax.script.ScriptContext.setBindings(javax.script.Bindings,int)"
    ],
    "javax.swing.plaf.metal.defaultmetaltheme.getprimary3": [
        "javax.swing.plaf.metal.DefaultMetalTheme.getPrimary3()"
    ],
    "java.awt.image.renderedimage.getheight": [
        "java.awt.image.RenderedImage.getHeight()"
    ],
    "javax.swing.plaf.multi.multipanelui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiPanelUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "java.awt.geom.quadcurve2d.getctrlx": [
        "java.awt.geom.QuadCurve2D.getCtrlX()"
    ],
    "java.util.arraylist.spliterator": [
        "java.util.ArrayList.spliterator()"
    ],
    "java.awt.datatransfer.dataflavor.gethumanpresentablename": [
        "java.awt.datatransfer.DataFlavor.getHumanPresentableName()"
    ],
    "java.awt.awtevent.isconsumed": [
        "java.awt.AWTEvent.isConsumed()"
    ],
    "javax.swing.text.stylededitorkit.getviewfactory": [
        "javax.swing.text.StyledEditorKit.getViewFactory()"
    ],
    "java.awt.image.singlepixelpackedsamplemodel.createcompatiblesamplemodel": [
        "java.awt.image.SinglePixelPackedSampleModel.createCompatibleSampleModel(int,int)"
    ],
    "java.sql.databasemetadata.supportstransactions": [
        "java.sql.DatabaseMetaData.supportsTransactions()"
    ],
    "java.nio.file.watchevent.kind.name": [
        "java.nio.file.WatchEvent.Kind.name()"
    ],
    "java.time.zoneoffset.range": [
        "java.time.ZoneOffset.range(java.time.temporal.TemporalField)"
    ],
    "javax.swing.lookandfeel.getlayoutstyle": [
        "javax.swing.LookAndFeel.getLayoutStyle()"
    ],
    "javax.swing.table.tablerowsorter.setmodel": [
        "javax.swing.table.TableRowSorter.setModel(javax.swing.table.TableRowSorter)"
    ],
    "javax.lang.model.element.typeelement.getenclosingelement": [
        "javax.lang.model.element.TypeElement.getEnclosingElement()"
    ],
    "javax.management.attributelist.addall": [
        "javax.management.AttributeList.addAll(javax.management.AttributeList)",
        "javax.management.AttributeList.addAll(int,java.util.Collection<?>)",
        "javax.management.AttributeList.addAll(java.util.Collection<?>)",
        "javax.management.AttributeList.addAll(int,javax.management.AttributeList)"
    ],
    "java.security.interfaces.dsaprivatekey.getx": [
        "java.security.interfaces.DSAPrivateKey.getX()"
    ],
    "java.io.file.getparent": [
        "java.io.File.getParent()"
    ],
    "javax.swing.plaf.multi.multilistui.indextolocation": [
        "javax.swing.plaf.multi.MultiListUI.indexToLocation(javax.swing.JList,int)"
    ],
    "java.text.attributedcharacteriterator.attribute.getname": [
        "java.text.AttributedCharacterIterator.Attribute.getName()"
    ],
    "java.sql.databasemetadata.getjdbcmajorversion": [
        "java.sql.DatabaseMetaData.getJDBCMajorVersion()"
    ],
    "java.rmi.activation.activationsystem.getactivationdesc": [
        "java.rmi.activation.ActivationSystem.getActivationDesc(java.rmi.activation.ActivationID)"
    ],
    "javax.naming.initialcontext.geturlordefaultinitctx": [
        "javax.naming.InitialContext.getURLOrDefaultInitCtx(javax.naming.Name)",
        "javax.naming.InitialContext.getURLOrDefaultInitCtx(java.lang.String)"
    ],
    "javax.sound.sampled.audioinputstream.getframelength": [
        "javax.sound.sampled.AudioInputStream.getFrameLength()"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.isnavigationkey": [
        "javax.swing.plaf.basic.BasicComboBoxUI.isNavigationKey(int)"
    ],
    "javax.naming.compoundname.getprefix": [
        "javax.naming.CompoundName.getPrefix(int)"
    ],
    "java.awt.graphics2d.translate": [
        "java.awt.Graphics2D.translate(double,double)"
    ],
    "javax.sound.sampled.floatcontrol.getupdateperiod": [
        "javax.sound.sampled.FloatControl.getUpdatePeriod()"
    ],
    "javax.xml.soap.soapelement.getchildelements": [
        "javax.xml.soap.SOAPElement.getChildElements(javax.xml.soap.Name)",
        "javax.xml.soap.SOAPElement.getChildElements(javax.xml.namespace.QName)",
        "javax.xml.soap.SOAPElement.getChildElements()"
    ],
    "javax.sql.rowset.serial.serialref.getbasetypename": [
        "javax.sql.rowset.serial.SerialRef.getBaseTypeName()"
    ],
    "javax.security.auth.login.configuration.gettype": [
        "javax.security.auth.login.Configuration.getType()"
    ],
    "javax.lang.model.type.typevisitor.visiterror": [
        "javax.lang.model.type.TypeVisitor.visitError(javax.lang.model.type.ErrorType,javax.lang.model.type.TypeVisitor)"
    ],
    "javax.sound.midi.mididevicetransmitter.getmididevice": [
        "javax.sound.midi.MidiDeviceTransmitter.getMidiDevice()"
    ],
    "java.awt.toolkit.getbestcursorsize": [
        "java.awt.Toolkit.getBestCursorSize(int,int)"
    ],
    "javax.swing.plaf.basic.basictreeui.paintverticalline": [
        "javax.swing.plaf.basic.BasicTreeUI.paintVerticalLine(java.awt.Graphics,javax.swing.JComponent,int,int,int)"
    ],
    "java.awt.choice.getselecteditem": [
        "java.awt.Choice.getSelectedItem()"
    ],
    "javax.management.mbeanserverconnection.getdomains": [
        "javax.management.MBeanServerConnection.getDomains()"
    ],
    "javax.management.relation.relation.getrelationtypename": [
        "javax.management.relation.Relation.getRelationTypeName()"
    ],
    "javax.swing.text.wrappedplainview.nexttabstop": [
        "javax.swing.text.WrappedPlainView.nextTabStop(float,int)"
    ],
    "java.time.zoneddatetime.ofinstant": [
        "java.time.ZonedDateTime.ofInstant(java.time.Instant,java.time.ZoneId)",
        "java.time.ZonedDateTime.ofInstant(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneId)"
    ],
    "java.util.collections.rotate": [
        "java.util.Collections.rotate(java.util.List<?>,int)"
    ],
    "java.sql.preparedstatement.setint": [
        "java.sql.PreparedStatement.setInt(int,int)"
    ],
    "java.time.zoneddatetime.getlong": [
        "java.time.ZonedDateTime.getLong(java.time.temporal.TemporalField)"
    ],
    "javax.swing.text.html.htmleditorkit.getactions": [
        "javax.swing.text.html.HTMLEditorKit.getActions()"
    ],
    "javax.tools.javafilemanager.getfileforoutput": [
        "javax.tools.JavaFileManager.getFileForOutput(javax.tools.JavaFileManager.Location,java.lang.String,java.lang.String,javax.tools.FileObject)"
    ],
    "javax.swing.viewportlayout.addlayoutcomponent": [
        "javax.swing.ViewportLayout.addLayoutComponent(java.lang.String,java.awt.Component)"
    ],
    "javax.lang.model.element.elementvisitor.visitvariable": [
        "javax.lang.model.element.ElementVisitor.visitVariable(javax.lang.model.element.VariableElement,javax.lang.model.element.ElementVisitor)"
    ],
    "java.io.linenumberreader.read": [
        "java.io.LineNumberReader.read()",
        "java.io.LineNumberReader.read(char[],int,int)"
    ],
    "javax.swing.text.glyphview.getbackground": [
        "javax.swing.text.GlyphView.getBackground()"
    ],
    "java.security.allpermission.newpermissioncollection": [
        "java.security.AllPermission.newPermissionCollection()"
    ],
    "javax.print.attribute.standard.jobkoctetsprocessed.equals": [
        "javax.print.attribute.standard.JobKOctetsProcessed.equals(java.lang.Object)"
    ],
    "javax.swing.jcomponent.addvetoablechangelistener": [
        "javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"
    ],
    "javax.crypto.spec.dhparameterspec.getg": [
        "javax.crypto.spec.DHParameterSpec.getG()"
    ],
    "java.nio.channels.spi.selectorprovider.openpipe": [
        "java.nio.channels.spi.SelectorProvider.openPipe()"
    ],
    "javax.management.openmbean.openmbeanparameterinfosupport.hashcode": [
        "javax.management.openmbean.OpenMBeanParameterInfoSupport.hashCode()"
    ],
    "javax.swing.jviewport.removechangelistener": [
        "javax.swing.JViewport.removeChangeListener(javax.swing.event.ChangeListener)"
    ],
    "javax.swing.overlaylayout.addlayoutcomponent": [
        "javax.swing.OverlayLayout.addLayoutComponent(java.awt.Component,java.lang.Object)",
        "javax.swing.OverlayLayout.addLayoutComponent(java.lang.String,java.awt.Component)"
    ],
    "javax.swing.jcomponent.ispaintingorigin": [
        "javax.swing.JComponent.isPaintingOrigin()"
    ],
    "java.awt.event.inputmethodevent.gettext": [
        "java.awt.event.InputMethodEvent.getText()"
    ],
    "javax.imageio.spi.serviceregistry.registerserviceproviders": [
        "javax.imageio.spi.ServiceRegistry.registerServiceProviders(java.util.Iterator<?>)"
    ],
    "javax.swing.jscrollbar.setmaximum": [
        "javax.swing.JScrollBar.setMaximum(int)"
    ],
    "java.awt.geom.area.transform": [
        "java.awt.geom.Area.transform(java.awt.geom.AffineTransform)"
    ],
    "java.time.format.datetimeparseexception.getparsedstring": [
        "java.time.format.DateTimeParseException.getParsedString()"
    ],
    "java.awt.window.getwindowlisteners": [
        "java.awt.Window.getWindowListeners()"
    ],
    "javax.net.ssl.keymanagerfactory.getalgorithm": [
        "javax.net.ssl.KeyManagerFactory.getAlgorithm()"
    ],
    "javax.swing.jtree.addtreewillexpandlistener": [
        "javax.swing.JTree.addTreeWillExpandListener(javax.swing.event.TreeWillExpandListener)"
    ],
    "javax.swing.plaf.synth.synthcomboboxui.createeditor": [
        "javax.swing.plaf.synth.SynthComboBoxUI.createEditor()"
    ],
    "javax.swing.uimanager.addauxiliarylookandfeel": [
        "javax.swing.UIManager.addAuxiliaryLookAndFeel(javax.swing.LookAndFeel)"
    ],
    "java.awt.print.pageformat.getmatrix": [
        "java.awt.print.PageFormat.getMatrix()"
    ],
    "javax.swing.lookandfeel.installcolorsandfont": [
        "javax.swing.LookAndFeel.installColorsAndFont(javax.swing.JComponent,java.lang.String,java.lang.String,java.lang.String)"
    ],
    "javax.swing.border.etchedborder.getborderinsets": [
        "javax.swing.border.EtchedBorder.getBorderInsets(java.awt.Component,java.awt.Insets)"
    ],
    "javax.swing.text.view.getviewfactory": [
        "javax.swing.text.View.getViewFactory()"
    ],
    "java.util.concurrent.locks.lock.lock": [
        "java.util.concurrent.locks.Lock.lock()"
    ],
    "org.omg.dynamicany._dynsequencestub.get_char": [
        "org.omg.DynamicAny._DynSequenceStub.get_char()"
    ],
    "javax.swing.jprogressbar.getmaximum": [
        "javax.swing.JProgressBar.getMaximum()"
    ],
    "org.omg.dynamicany.dynanyoperations.current_component": [
        "org.omg.DynamicAny.DynAnyOperations.current_component()"
    ],
    "java.awt.font.numericshaper.getcontextualshaper": [
        "java.awt.font.NumericShaper.getContextualShaper(java.util.Set<java.awt.font.NumericShaper.Range>,java.awt.font.NumericShaper.Range)",
        "java.awt.font.NumericShaper.getContextualShaper(int,int)",
        "java.awt.font.NumericShaper.getContextualShaper(java.util.Set<java.awt.font.NumericShaper.Range>)",
        "java.awt.font.NumericShaper.getContextualShaper(int)"
    ],
    "java.time.temporal.weekfields.getminimaldaysinfirstweek": [
        "java.time.temporal.WeekFields.getMinimalDaysInFirstWeek()"
    ],
    "javax.accessibility.accessiblerelationset.tostring": [
        "javax.accessibility.AccessibleRelationSet.toString()"
    ],
    "javax.swing.undo.undomanager.setlimit": [
        "javax.swing.undo.UndoManager.setLimit(int)"
    ],
    "javax.swing.event.documentevent.elementchange.getindex": [
        "javax.swing.event.DocumentEvent.ElementChange.getIndex()"
    ],
    "org.w3c.dom.events.mutationevent.getnewvalue": [
        "org.w3c.dom.events.MutationEvent.getNewValue()"
    ],
    "javax.sound.midi.soundbank.getvendor": [
        "javax.sound.midi.Soundbank.getVendor()"
    ],
    "java.awt.menu.paramstring": [
        "java.awt.Menu.paramString()"
    ],
    "javax.security.auth.callback.namecallback.getprompt": [
        "javax.security.auth.callback.NameCallback.getPrompt()"
    ],
    "javax.swing.text.paragraphview.breakview": [
        "javax.swing.text.ParagraphView.breakView(int,float,java.awt.Shape)"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.setyear": [
        "javax.xml.datatype.XMLGregorianCalendar.setYear(int)",
        "javax.xml.datatype.XMLGregorianCalendar.setYear(java.math.BigInteger)"
    ],
    "java.lang.object.wait": [
        "java.lang.Object.wait()",
        "java.lang.Object.wait(long,int)",
        "java.lang.Object.wait(long)"
    ],
    "java.awt.keyboardfocusmanager.getglobalfocusedwindow": [
        "java.awt.KeyboardFocusManager.getGlobalFocusedWindow()"
    ],
    "java.awt.font.getavailableattributes": [
        "java.awt.Font.getAvailableAttributes()"
    ],
    "javax.swing.jcombobox.islightweightpopupenabled": [
        "javax.swing.JComboBox.isLightWeightPopupEnabled()"
    ],
    "java.net.socket.getinputstream": [
        "java.net.Socket.getInputStream()"
    ],
    "javax.swing.desktopmanager.iconifyframe": [
        "javax.swing.DesktopManager.iconifyFrame(javax.swing.JInternalFrame)"
    ],
    "javax.swing.jtextpane.getinputattributes": [
        "javax.swing.JTextPane.getInputAttributes()"
    ],
    "java.util.abstractlist.lastindexof": [
        "java.util.AbstractList.lastIndexOf(java.lang.Object)"
    ],
    "javax.print.attribute.urisyntax.hashcode": [
        "javax.print.attribute.URISyntax.hashCode()"
    ],
    "java.util.concurrent.concurrentlinkeddeque.addlast": [
        "java.util.concurrent.ConcurrentLinkedDeque.addLast(java.util.concurrent.ConcurrentLinkedDeque)",
        "java.util.concurrent.ConcurrentLinkedDeque.addLast(E)"
    ],
    "javax.print.attribute.standard.colorsupported.getcategory": [
        "javax.print.attribute.standard.ColorSupported.getCategory()"
    ],
    "javax.sql.rowset.baserowset.setbinarystream": [
        "javax.sql.rowset.BaseRowSet.setBinaryStream(java.lang.String,java.io.InputStream)",
        "javax.sql.rowset.BaseRowSet.setBinaryStream(int,java.io.InputStream)",
        "javax.sql.rowset.BaseRowSet.setBinaryStream(int,java.io.InputStream,int)",
        "javax.sql.rowset.BaseRowSet.setBinaryStream(java.lang.String,java.io.InputStream,int)"
    ],
    "java.lang.instrument.instrumentation.isretransformclassessupported": [
        "java.lang.instrument.Instrumentation.isRetransformClassesSupported()"
    ],
    "java.applet.applet.getparameterinfo": [
        "java.applet.Applet.getParameterInfo()"
    ],
    "javax.xml.stream.xmlstreamreader.gettext": [
        "javax.xml.stream.XMLStreamReader.getText()"
    ],
    "java.util.concurrent.countedcompleter.helpcomplete": [
        "java.util.concurrent.CountedCompleter.helpComplete(int)"
    ],
    "java.util.prefs.abstractpreferences.getchild": [
        "java.util.prefs.AbstractPreferences.getChild(java.lang.String)"
    ],
    "javax.swing.plaf.metal.metaltheme.getcontrolshadow": [
        "javax.swing.plaf.metal.MetalTheme.getControlShadow()"
    ],
    "javax.management.relation.relationnotification.getobjectname": [
        "javax.management.relation.RelationNotification.getObjectName()"
    ],
    "org.w3c.dom.document.createcdatasection": [
        "org.w3c.dom.Document.createCDATASection(java.lang.String)"
    ],
    "java.time.chrono.hijrahera.valueof": [
        "java.time.chrono.HijrahEra.valueOf(java.lang.String)"
    ],
    "javax.swing.jtextpane.addstyle": [
        "javax.swing.JTextPane.addStyle(java.lang.String,javax.swing.text.Style)"
    ],
    "javax.swing.table.tablecolumnmodel.removecolumnmodellistener": [
        "javax.swing.table.TableColumnModel.removeColumnModelListener(javax.swing.event.TableColumnModelListener)"
    ],
    "java.text.annotation.getvalue": [
        "java.text.Annotation.getValue()"
    ],
    "java.util.concurrent.copyonwritearraylist.replaceall": [
        "java.util.concurrent.CopyOnWriteArrayList.replaceAll(java.util.function.UnaryOperator<E>)"
    ],
    "java.io.printstream.flush": [
        "java.io.PrintStream.flush()"
    ],
    "java.text.collator.getinstance": [
        "java.text.Collator.getInstance(java.util.Locale)",
        "java.text.Collator.getInstance()"
    ],
    "java.lang.annotation.annotationtypemismatchexception.element": [
        "java.lang.annotation.AnnotationTypeMismatchException.element()"
    ],
    "java.sql.statement.executelargebatch": [
        "java.sql.Statement.executeLargeBatch()"
    ],
    "java.awt.window.setlocation": [
        "java.awt.Window.setLocation(int,int)",
        "java.awt.Window.setLocation(java.awt.Point)"
    ],
    "javax.management.notificationbroadcaster.addnotificationlistener": [
        "javax.management.NotificationBroadcaster.addNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)"
    ],
    "javax.swing.transferhandler.droplocation.getdroppoint": [
        "javax.swing.TransferHandler.DropLocation.getDropPoint()"
    ],
    "javax.swing.jfilechooser.setselectedfiles": [
        "javax.swing.JFileChooser.setSelectedFiles(java.io.File[])"
    ],
    "javax.swing.plaf.synth.synthcomboboxui.uninstalldefaults": [
        "javax.swing.plaf.synth.SynthComboBoxUI.uninstallDefaults()"
    ],
    "java.security.accesscontroller.doprivilegedwithcombiner": [
        "java.security.AccessController.doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction<T>)",
        "java.security.AccessController.doPrivilegedWithCombiner(java.security.PrivilegedAction<T>,java.security.AccessControlContext,java.security.Permission...)",
        "java.security.AccessController.doPrivilegedWithCombiner(java.security.PrivilegedAction<T>)",
        "java.security.AccessController.doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction<T>,java.security.AccessControlContext,java.security.Permission...)"
    ],
    "javax.imageio.imagewriter.getdefaultstreammetadata": [
        "javax.imageio.ImageWriter.getDefaultStreamMetadata(javax.imageio.ImageWriteParam)"
    ],
    "java.io.pushbackinputstream.marksupported": [
        "java.io.PushbackInputStream.markSupported()"
    ],
    "org.omg.corba.portable.outputstream.write_long_array": [
        "org.omg.CORBA.portable.OutputStream.write_long_array(int[],int,int)"
    ],
    "java.awt.image.renderable.contextualrenderedimagefactory.maprendercontext": [
        "java.awt.image.renderable.ContextualRenderedImageFactory.mapRenderContext(int,java.awt.image.renderable.RenderContext,java.awt.image.renderable.ParameterBlock,java.awt.image.renderable.RenderableImage)"
    ],
    "java.time.period.minusdays": [
        "java.time.Period.minusDays(long)"
    ],
    "java.lang.securitymanager.checkwrite": [
        "java.lang.SecurityManager.checkWrite(java.io.FileDescriptor)",
        "java.lang.SecurityManager.checkWrite(java.lang.String)"
    ],
    "java.util.concurrent.timeunit.values": [
        "java.util.concurrent.TimeUnit.values()"
    ],
    "java.net.socket.getchannel": [
        "java.net.Socket.getChannel()"
    ],
    "java.text.bidi.getrunlimit": [
        "java.text.Bidi.getRunLimit(int)"
    ],
    "java.awt.label.settext": [
        "java.awt.Label.setText(java.lang.String)"
    ],
    "javax.swing.defaultbuttonmodel.getactionlisteners": [
        "javax.swing.DefaultButtonModel.getActionListeners()"
    ],
    "java.sql.databasemetadata.nullsaresortedatstart": [
        "java.sql.DatabaseMetaData.nullsAreSortedAtStart()"
    ],
    "java.lang.ref.referencequeue.remove": [
        "java.lang.ref.ReferenceQueue.remove()",
        "java.lang.ref.ReferenceQueue.remove(long)"
    ],
    "org.omg.dynamicany._dynunionstub.insert_typecode": [
        "org.omg.DynamicAny._DynUnionStub.insert_typecode(org.omg.CORBA.TypeCode)"
    ],
    "java.time.year.of": [
        "java.time.Year.of(int)"
    ],
    "javax.swing.plaf.synth.synthpainter.painttabbedpanetabareabackground": [
        "javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabAreaBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",
        "javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabAreaBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)"
    ],
    "java.lang.stringbuffer.getchars": [
        "java.lang.StringBuffer.getChars(int,int,char[],int)"
    ],
    "org.omg.dynamicany._dynunionstub.equal": [
        "org.omg.DynamicAny._DynUnionStub.equal(org.omg.DynamicAny.DynAny)"
    ],
    "java.awt.font.numericshaper.range.valueof": [
        "java.awt.font.NumericShaper.Range.valueOf(java.lang.String)"
    ],
    "java.util.prefs.preferences.getbytearray": [
        "java.util.prefs.Preferences.getByteArray(java.lang.String,byte[])"
    ],
    "java.awt.print.pageformat.getorientation": [
        "java.awt.print.PageFormat.getOrientation()"
    ],
    "java.time.chrono.abstractchronology.resolvedate": [
        "java.time.chrono.AbstractChronology.resolveDate(,java.lang.Long>,java.time.format.ResolverStyle)"
    ],
    "javax.swing.imageicon.getimage": [
        "javax.swing.ImageIcon.getImage()"
    ],
    "javax.swing.plaf.multi.multifilechooserui.createui": [
        "javax.swing.plaf.multi.MultiFileChooserUI.createUI(javax.swing.JComponent)"
    ],
    "javax.sql.rowset.baserowset.seturl": [
        "javax.sql.rowset.BaseRowSet.setURL(java.lang.String)",
        "javax.sql.rowset.BaseRowSet.setUrl(int,java.net.URL)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintrootpanebackground": [
        "javax.swing.plaf.synth.SynthPainter.paintRootPaneBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.plaf.metal.metaltheme.getprimary1": [
        "javax.swing.plaf.metal.MetalTheme.getPrimary1()"
    ],
    "javax.swing.jspinner.defaulteditor.statechanged": [
        "javax.swing.JSpinner.DefaultEditor.stateChanged(javax.swing.event.ChangeEvent)"
    ],
    "javax.lang.model.util.simpleelementvisitor6.visitexecutable": [
        "javax.lang.model.util.SimpleElementVisitor6.visitExecutable(javax.lang.model.element.ExecutableElement,javax.lang.model.util.SimpleElementVisitor6)"
    ],
    "javax.management.loading.mletmbean.getresourceasstream": [
        "javax.management.loading.MLetMBean.getResourceAsStream(java.lang.String)"
    ],
    "java.awt.gradientpaint.gettransparency": [
        "java.awt.GradientPaint.getTransparency()"
    ],
    "javax.sound.sampled.control.tostring": [
        "javax.sound.sampled.Control.toString()"
    ],
    "java.net.inet4address.equals": [
        "java.net.Inet4Address.equals(java.lang.Object)"
    ],
    "javax.xml.crypto.dsig.spec.hmacparameterspec.getoutputlength": [
        "javax.xml.crypto.dsig.spec.HMACParameterSpec.getOutputLength()"
    ],
    "java.security.interfaces.rsakey.getmodulus": [
        "java.security.interfaces.RSAKey.getModulus()"
    ],
    "javax.imageio.iioparam.activatecontroller": [
        "javax.imageio.IIOParam.activateController()"
    ],
    "javax.management.mbeanattributeinfo.isreadable": [
        "javax.management.MBeanAttributeInfo.isReadable()"
    ],
    "javax.lang.model.util.typekindvisitor6.visitprimitiveasshort": [
        "javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsShort(javax.lang.model.type.PrimitiveType,javax.lang.model.util.TypeKindVisitor6)"
    ],
    "javax.swing.tree.defaulttreecellrenderer.validate": [
        "javax.swing.tree.DefaultTreeCellRenderer.validate()"
    ],
    "java.security.cert.trustanchor.getcaname": [
        "java.security.cert.TrustAnchor.getCAName()"
    ],
    "javax.accessibility.accessibleicon.getaccessibleiconheight": [
        "javax.accessibility.AccessibleIcon.getAccessibleIconHeight()"
    ],
    "javax.imageio.imagereader.processthumbnailpassstarted": [
        "javax.imageio.ImageReader.processThumbnailPassStarted(java.awt.image.BufferedImage,int,int,int,int,int,int,int,int[])"
    ],
    "javax.swing.transferhandler.createtransferable": [
        "javax.swing.TransferHandler.createTransferable(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.metal.oceantheme.getinactivecontroltextcolor": [
        "javax.swing.plaf.metal.OceanTheme.getInactiveControlTextColor()"
    ],
    "javax.swing.jcolorchooser.setui": [
        "javax.swing.JColorChooser.setUI(javax.swing.plaf.ColorChooserUI)"
    ],
    "java.awt.scrollpaneadjustable.removeadjustmentlistener": [
        "java.awt.ScrollPaneAdjustable.removeAdjustmentListener(java.awt.event.AdjustmentListener)"
    ],
    "org.omg.dynamicany.dynanyoperations.insert_boolean": [
        "org.omg.DynamicAny.DynAnyOperations.insert_boolean(boolean)"
    ],
    "java.nio.file.standardcopyoption.values": [
        "java.nio.file.StandardCopyOption.values()"
    ],
    "javax.swing.text.abstractdocument.elementedit.undo": [
        "javax.swing.text.AbstractDocument.ElementEdit.undo()"
    ],
    "javax.swing.jinternalframe.jdesktopicon.getaccessiblecontext": [
        "javax.swing.JInternalFrame.JDesktopIcon.getAccessibleContext()"
    ],
    "javax.xml.ws.soap.addressingfeature.getid": [
        "javax.xml.ws.soap.AddressingFeature.getID()"
    ],
    "javax.swing.jmenu.getitemcount": [
        "javax.swing.JMenu.getItemCount()"
    ],
    "java.awt.component.getmousemotionlisteners": [
        "java.awt.Component.getMouseMotionListeners()"
    ],
    "java.nio.channels.spi.abstractselector.register": [
        "java.nio.channels.spi.AbstractSelector.register(java.nio.channels.spi.AbstractSelectableChannel,int,java.lang.Object)"
    ],
    "javax.swing.event.menukeyevent.getpath": [
        "javax.swing.event.MenuKeyEvent.getPath()"
    ],
    "java.awt.image.volatileimage.getsnapshot": [
        "java.awt.image.VolatileImage.getSnapshot()"
    ],
    "org.omg.corba.typecode.content_type": [
        "org.omg.CORBA.TypeCode.content_type()"
    ],
    "javax.swing.jtabbedpane.gettabruncount": [
        "javax.swing.JTabbedPane.getTabRunCount()"
    ],
    "java.beans.beancontext.beancontextchildsupport.initializebeancontextresources": [
        "java.beans.beancontext.BeanContextChildSupport.initializeBeanContextResources()"
    ],
    "javax.swing.text.defaultcaret.getmarkbias": [
        "javax.swing.text.DefaultCaret.getMarkBias()"
    ],
    "java.time.chrono.chronoperiod.subtractfrom": [
        "java.time.chrono.ChronoPeriod.subtractFrom(java.time.temporal.Temporal)"
    ],
    "javax.swing.plaf.basic.basicsliderui.getticklength": [
        "javax.swing.plaf.basic.BasicSliderUI.getTickLength()"
    ],
    "javax.swing.jlabel.setverticalalignment": [
        "javax.swing.JLabel.setVerticalAlignment(int)"
    ],
    "javax.swing.text.jtextcomponent.getcaretposition": [
        "javax.swing.text.JTextComponent.getCaretPosition()"
    ],
    "javax.swing.japplet.setlayout": [
        "javax.swing.JApplet.setLayout(java.awt.LayoutManager)"
    ],
    "javax.crypto.cipher.getmaxallowedkeylength": [
        "javax.crypto.Cipher.getMaxAllowedKeyLength(java.lang.String)"
    ],
    "javax.xml.soap.soapelement.addnamespacedeclaration": [
        "javax.xml.soap.SOAPElement.addNamespaceDeclaration(java.lang.String,java.lang.String)"
    ],
    "java.awt.filedialog.setdirectory": [
        "java.awt.FileDialog.setDirectory(java.lang.String)"
    ],
    "java.security.messagedigest.getprovider": [
        "java.security.MessageDigest.getProvider()"
    ],
    "java.awt.graphics2d.drawglyphvector": [
        "java.awt.Graphics2D.drawGlyphVector(java.awt.font.GlyphVector,float,float)"
    ],
    "javax.swing.event.rowsorterevent.type.valueof": [
        "javax.swing.event.RowSorterEvent.Type.valueOf(java.lang.String)"
    ],
    "java.time.offsettime.tolocaltime": [
        "java.time.OffsetTime.toLocalTime()"
    ],
    "org.omg.dynamicany._dynunionstub.get_short": [
        "org.omg.DynamicAny._DynUnionStub.get_short()"
    ],
    "org.w3c.dom.events.mouseevent.getrelatedtarget": [
        "org.w3c.dom.events.MouseEvent.getRelatedTarget()"
    ],
    "java.awt.toolkit.getscreeninsets": [
        "java.awt.Toolkit.getScreenInsets(java.awt.GraphicsConfiguration)"
    ],
    "javax.swing.filechooser.filesystemview.isfilesystem": [
        "javax.swing.filechooser.FileSystemView.isFileSystem(java.io.File)"
    ],
    "java.time.offsettime.until": [
        "java.time.OffsetTime.until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)"
    ],
    "java.lang.securitymanager.getsecuritycontext": [
        "java.lang.SecurityManager.getSecurityContext()"
    ],
    "java.awt.fontmetrics.getmaxdescent": [
        "java.awt.FontMetrics.getMaxDescent()"
    ],
    "java.awt.dnd.droptargetevent.getdroptargetcontext": [
        "java.awt.dnd.DropTargetEvent.getDropTargetContext()"
    ],
    "java.security.permissioncollection.implies": [
        "java.security.PermissionCollection.implies(java.security.Permission)"
    ],
    "javax.swing.spinnernumbermodel.getvalue": [
        "javax.swing.SpinnerNumberModel.getValue()"
    ],
    "org.omg.iop.codecoperations.encode_value": [
        "org.omg.IOP.CodecOperations.encode_value(org.omg.CORBA.Any)"
    ],
    "java.time.year.minusyears": [
        "java.time.Year.minusYears(long)"
    ],
    "java.lang.management.threadinfo.issuspended": [
        "java.lang.management.ThreadInfo.isSuspended()"
    ],
    "java.nio.channels.asynchronouschannelgroup.withfixedthreadpool": [
        "java.nio.channels.AsynchronousChannelGroup.withFixedThreadPool(int,java.util.concurrent.ThreadFactory)"
    ],
    "javax.swing.jlayer.setlayout": [
        "javax.swing.JLayer.setLayout(java.awt.LayoutManager)"
    ],
    "javax.management.openmbean.openmbeanparameterinfo.getdefaultvalue": [
        "javax.management.openmbean.OpenMBeanParameterInfo.getDefaultValue()"
    ],
    "java.time.zone.zonerulesprovider.getversions": [
        "java.time.zone.ZoneRulesProvider.getVersions(java.lang.String)"
    ],
    "javax.swing.abstractbutton.getverticaltextposition": [
        "javax.swing.AbstractButton.getVerticalTextPosition()"
    ],
    "java.lang.management.threadmxbean.isobjectmonitorusagesupported": [
        "java.lang.management.ThreadMXBean.isObjectMonitorUsageSupported()"
    ],
    "javax.swing.text.html.formsubmitevent.getmethod": [
        "javax.swing.text.html.FormSubmitEvent.getMethod()"
    ],
    "java.security.acl.acl.addentry": [
        "java.security.acl.Acl.addEntry(java.security.Principal,java.security.acl.AclEntry)"
    ],
    "java.util.abstractmap.simpleimmutableentry.hashcode": [
        "java.util.AbstractMap.SimpleImmutableEntry.hashCode()"
    ],
    "javax.lang.model.element.annotationvaluevisitor.visitenumconstant": [
        "javax.lang.model.element.AnnotationValueVisitor.visitEnumConstant(javax.lang.model.element.VariableElement,javax.lang.model.element.AnnotationValueVisitor)"
    ],
    "java.util.logging.memoryhandler.publish": [
        "java.util.logging.MemoryHandler.publish(java.util.logging.LogRecord)"
    ],
    "javax.swing.plaf.basic.basictextui.modeltoview": [
        "javax.swing.plaf.basic.BasicTextUI.modelToView(javax.swing.text.JTextComponent,int,javax.swing.text.Position.Bias)",
        "javax.swing.plaf.basic.BasicTextUI.modelToView(javax.swing.text.JTextComponent,int)"
    ],
    "java.io.objectoutputstream.writedouble": [
        "java.io.ObjectOutputStream.writeDouble(double)"
    ],
    "org.omg.portableinterceptor.iorinterceptoroperations.establish_components": [
        "org.omg.PortableInterceptor.IORInterceptorOperations.establish_components(org.omg.PortableInterceptor.IORInfo)"
    ],
    "java.awt.borderlayout.getconstraints": [
        "java.awt.BorderLayout.getConstraints(java.awt.Component)"
    ],
    "javax.sql.rowset.joinrowset.getwhereclause": [
        "javax.sql.rowset.JoinRowSet.getWhereClause()"
    ],
    "javax.swing.plaf.metal.metallookandfeel.initclassdefaults": [
        "javax.swing.plaf.metal.MetalLookAndFeel.initClassDefaults(javax.swing.UIDefaults)"
    ],
    "java.sql.databasemetadata.storesmixedcasequotedidentifiers": [
        "java.sql.DatabaseMetaData.storesMixedCaseQuotedIdentifiers()"
    ],
    "javax.swing.abstractbutton.setmodel": [
        "javax.swing.AbstractButton.setModel(javax.swing.ButtonModel)"
    ],
    "org.omg.corba.orb.create_exception_tc": [
        "org.omg.CORBA.ORB.create_exception_tc(java.lang.String,java.lang.String,org.omg.CORBA.StructMember[])"
    ],
    "org.ietf.jgss.gsscontext.requestinteg": [
        "org.ietf.jgss.GSSContext.requestInteg(boolean)"
    ],
    "java.io.objectinputstream.enableresolveobject": [
        "java.io.ObjectInputStream.enableResolveObject(boolean)"
    ],
    "java.security.cert.certpath.getencoded": [
        "java.security.cert.CertPath.getEncoded(java.lang.String)",
        "java.security.cert.CertPath.getEncoded()"
    ],
    "javax.security.auth.kerberos.kerberoskey.getversionnumber": [
        "javax.security.auth.kerberos.KerberosKey.getVersionNumber()"
    ],
    "java.net.serversocket.getlocalport": [
        "java.net.ServerSocket.getLocalPort()"
    ],
    "javax.swing.jtree.geteditingpath": [
        "javax.swing.JTree.getEditingPath()"
    ],
    "javax.swing.text.documentfilter.filterbypass.replace": [
        "javax.swing.text.DocumentFilter.FilterBypass.replace(int,int,java.lang.String,javax.swing.text.AttributeSet)"
    ],
    "org.xml.sax.attributes.getvalue": [
        "org.xml.sax.Attributes.getValue(int)",
        "org.xml.sax.Attributes.getValue(java.lang.String,java.lang.String)"
    ],
    "javax.swing.defaultrowsorter.getsortkeys": [
        "javax.swing.DefaultRowSorter.getSortKeys()"
    ],
    "java.nio.buffer.mark": [
        "java.nio.Buffer.mark()"
    ],
    "javax.swing.plaf.metal.metaltheme.getwindowtitleinactiveforeground": [
        "javax.swing.plaf.metal.MetalTheme.getWindowTitleInactiveForeground()"
    ],
    "javax.swing.jtextarea.getpreferredscrollableviewportsize": [
        "javax.swing.JTextArea.getPreferredScrollableViewportSize()"
    ],
    "java.lang.stringbuffer.trimtosize": [
        "java.lang.StringBuffer.trimToSize()"
    ],
    "javax.swing.tree.treepath.equals": [
        "javax.swing.tree.TreePath.equals(java.lang.Object)"
    ],
    "java.util.treemap.get": [
        "java.util.TreeMap.get(java.lang.Object)"
    ],
    "java.lang.management.memorymxbean.getnonheapmemoryusage": [
        "java.lang.management.MemoryMXBean.getNonHeapMemoryUsage()"
    ],
    "java.awt.geom.cubiccurve2d.float.getx2": [
        "java.awt.geom.CubicCurve2D.Float.getX2()"
    ],
    "java.lang.management.memorypoolmxbean.resetpeakusage": [
        "java.lang.management.MemoryPoolMXBean.resetPeakUsage()"
    ],
    "java.awt.component.add": [
        "java.awt.Component.add(java.awt.PopupMenu)"
    ],
    "java.util.concurrent.blockingdeque.takefirst": [
        "java.util.concurrent.BlockingDeque.takeFirst()"
    ],
    "java.util.stream.intstream.distinct": [
        "java.util.stream.IntStream.distinct()"
    ],
    "javax.swing.jtooltip.settiptext": [
        "javax.swing.JToolTip.setTipText(java.lang.String)"
    ],
    "javax.print.attribute.standard.sheetcollate.getcategory": [
        "javax.print.attribute.standard.SheetCollate.getCategory()"
    ],
    "javax.accessibility.accessibletablemodelchange.getfirstcolumn": [
        "javax.accessibility.AccessibleTableModelChange.getFirstColumn()"
    ],
    "java.util.concurrent.concurrenthashmap.reduceentriestolong": [
        "java.util.concurrent.ConcurrentHashMap.reduceEntriesToLong(long,,java.util.concurrent.ConcurrentHashMap>>,long,java.util.function.LongBinaryOperator)"
    ],
    "java.beans.beancontext.beancontextsupport.dontusegui": [
        "java.beans.beancontext.BeanContextSupport.dontUseGui()"
    ],
    "java.nio.channels.serversocketchannel.validops": [
        "java.nio.channels.ServerSocketChannel.validOps()"
    ],
    "javax.swing.plaf.basic.basictextpaneui.getpropertyprefix": [
        "javax.swing.plaf.basic.BasicTextPaneUI.getPropertyPrefix()"
    ],
    "javax.swing.plaf.multi.multibuttonui.getuis": [
        "javax.swing.plaf.multi.MultiButtonUI.getUIs()"
    ],
    "javax.swing.jslider.getvalue": [
        "javax.swing.JSlider.getValue()"
    ],
    "org.omg.dynamicany.dynanyoperations.seek": [
        "org.omg.DynamicAny.DynAnyOperations.seek(int)"
    ],
    "org.omg.corba.orb.get_primitive_tc": [
        "org.omg.CORBA.ORB.get_primitive_tc(org.omg.CORBA.TCKind)"
    ],
    "javax.xml.crypto.nosuchmechanismexception.printstacktrace": [
        "javax.xml.crypto.NoSuchMechanismException.printStackTrace()"
    ],
    "java.sql.statement.execute": [
        "java.sql.Statement.execute(java.lang.String,int)",
        "java.sql.Statement.execute(java.lang.String)",
        "java.sql.Statement.execute(java.lang.String,java.lang.String)",
        "java.sql.Statement.execute(java.lang.String,java.lang.String[])",
        "java.sql.Statement.execute(java.lang.String,int[])"
    ],
    "javax.swing.jscrollpane.setlayout": [
        "javax.swing.JScrollPane.setLayout(java.awt.LayoutManager)"
    ],
    "javax.swing.jtree.createtreemodel": [
        "javax.swing.JTree.createTreeModel(java.lang.Object)"
    ],
    "javax.imageio.imagewriter.processimageprogress": [
        "javax.imageio.ImageWriter.processImageProgress(float)"
    ],
    "javax.swing.event.listselectionevent.getfirstindex": [
        "javax.swing.event.ListSelectionEvent.getFirstIndex()"
    ],
    "org.omg.dynamicany._dynunionstub.insert_octet": [
        "org.omg.DynamicAny._DynUnionStub.insert_octet(byte)"
    ],
    "javax.swing.text.internationalformatter.getmaximum": [
        "javax.swing.text.InternationalFormatter.getMaximum()"
    ],
    "javax.swing.jtable.setautoresizemode": [
        "javax.swing.JTable.setAutoResizeMode(int)"
    ],
    "javax.swing.text.html.stylesheet.createsmallattributeset": [
        "javax.swing.text.html.StyleSheet.createSmallAttributeSet(javax.swing.text.AttributeSet)"
    ],
    "javax.swing.tree.fixedheightlayoutcache.setexpandedstate": [
        "javax.swing.tree.FixedHeightLayoutCache.setExpandedState(javax.swing.tree.TreePath,boolean)"
    ],
    "java.util.zip.deflateroutputstream.close": [
        "java.util.zip.DeflaterOutputStream.close()"
    ],
    "javax.sql.rowset.joinable.getmatchcolumnnames": [
        "javax.sql.rowset.Joinable.getMatchColumnNames()"
    ],
    "javax.swing.jscrollpane.getverticalscrollbar": [
        "javax.swing.JScrollPane.getVerticalScrollBar()"
    ],
    "java.awt.print.book.getprintable": [
        "java.awt.print.Book.getPrintable(int)"
    ],
    "javax.swing.plaf.basic.basiclistui.selectpreviousindex": [
        "javax.swing.plaf.basic.BasicListUI.selectPreviousIndex()"
    ],
    "org.omg.corba.portable.outputstream.write_short": [
        "org.omg.CORBA.portable.OutputStream.write_short(short)"
    ],
    "javax.sql.rowset.spi.syncfactory.getinstance": [
        "javax.sql.rowset.spi.SyncFactory.getInstance(java.lang.String)"
    ],
    "javax.swing.text.html.parser.dtd.read": [
        "javax.swing.text.html.parser.DTD.read(java.io.DataInputStream)"
    ],
    "javax.security.auth.kerberos.delegationpermission.newpermissioncollection": [
        "javax.security.auth.kerberos.DelegationPermission.newPermissionCollection()"
    ],
    "java.time.temporal.weekfields.weekofyear": [
        "java.time.temporal.WeekFields.weekOfYear()"
    ],
    "java.lang.math.nextdown": [
        "java.lang.Math.nextDown(float)",
        "java.lang.Math.nextDown(double)"
    ],
    "javax.accessibility.accessibleextendedtext.gettextsequencebefore": [
        "javax.accessibility.AccessibleExtendedText.getTextSequenceBefore(int,int)"
    ],
    "javax.swing.text.abstractdocument.createposition": [
        "javax.swing.text.AbstractDocument.createPosition(int)"
    ],
    "javax.swing.border.lineborder.getlinecolor": [
        "javax.swing.border.LineBorder.getLineColor()"
    ],
    "org.omg.dynamicany.dynvalueboxoperations.set_boxed_value": [
        "org.omg.DynamicAny.DynValueBoxOperations.set_boxed_value(org.omg.CORBA.Any)"
    ],
    "java.awt.window.processwindowfocusevent": [
        "java.awt.Window.processWindowFocusEvent(java.awt.event.WindowEvent)"
    ],
    "org.omg.corba.typecode.member_label": [
        "org.omg.CORBA.TypeCode.member_label(int)"
    ],
    "java.lang.character.isidentifierignorable": [
        "java.lang.Character.isIdentifierIgnorable(char)"
    ],
    "javax.swing.text.rtf.rtfeditorkit.write": [
        "javax.swing.text.rtf.RTFEditorKit.write(java.io.Writer,javax.swing.text.Document,int,int)",
        "javax.swing.text.rtf.RTFEditorKit.write(java.io.OutputStream,javax.swing.text.Document,int,int)"
    ],
    "java.lang.strictmath.round": [
        "java.lang.StrictMath.round(float)",
        "java.lang.StrictMath.round(double)"
    ],
    "javax.sql.rowset.setasciistream": [
        "javax.sql.RowSet.setAsciiStream(java.lang.String,java.io.InputStream)",
        "javax.sql.RowSet.setAsciiStream(int,java.io.InputStream)",
        "javax.sql.RowSet.setAsciiStream(java.lang.String,java.io.InputStream,int)",
        "javax.sql.RowSet.setAsciiStream(int,java.io.InputStream,int)"
    ],
    "javax.swing.colorchooser.abstractcolorchooserpanel.getsmalldisplayicon": [
        "javax.swing.colorchooser.AbstractColorChooserPanel.getSmallDisplayIcon()"
    ],
    "java.awt.rectangle.getsize": [
        "java.awt.Rectangle.getSize()"
    ],
    "javax.swing.scrollpanelayout.getcolumnheader": [
        "javax.swing.ScrollPaneLayout.getColumnHeader()"
    ],
    "javax.swing.text.stylededitorkit.clone": [
        "javax.swing.text.StyledEditorKit.clone()"
    ],
    "java.awt.dnd.droptargetcontext.isdataflavorsupported": [
        "java.awt.dnd.DropTargetContext.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)"
    ],
    "javax.swing.jinternalframe.removeinternalframelistener": [
        "javax.swing.JInternalFrame.removeInternalFrameListener(javax.swing.event.InternalFrameListener)"
    ],
    "org.omg.dynamicany._dynanystub.insert_double": [
        "org.omg.DynamicAny._DynAnyStub.insert_double(double)"
    ],
    "java.util.zip.adler32.update": [
        "java.util.zip.Adler32.update(java.nio.ByteBuffer)",
        "java.util.zip.Adler32.update(byte[],int,int)",
        "java.util.zip.Adler32.update(byte[])"
    ],
    "org.omg.corba.dataoutputstream.write_any_array": [
        "org.omg.CORBA.DataOutputStream.write_any_array(org.omg.CORBA.Any[],int,int)"
    ],
    "javax.swing.jlayeredpane.setposition": [
        "javax.swing.JLayeredPane.setPosition(java.awt.Component,int)"
    ],
    "javax.swing.event.tablemodelevent.getcolumn": [
        "javax.swing.event.TableModelEvent.getColumn()"
    ],
    "java.io.randomaccessfile.writeint": [
        "java.io.RandomAccessFile.writeInt(int)"
    ],
    "java.time.localdatetime.withnano": [
        "java.time.LocalDateTime.withNano(int)"
    ],
    "org.w3c.dom.characterdata.getdata": [
        "org.w3c.dom.CharacterData.getData()"
    ],
    "java.security.signedobject.getsignature": [
        "java.security.SignedObject.getSignature()"
    ],
    "javax.swing.swingutilities.layoutcompoundlabel": [
        "javax.swing.SwingUtilities.layoutCompoundLabel(javax.swing.JComponent,java.awt.FontMetrics,java.lang.String,javax.swing.Icon,int,int,int,int,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle,int)",
        "javax.swing.SwingUtilities.layoutCompoundLabel(java.awt.FontMetrics,java.lang.String,javax.swing.Icon,int,int,int,int,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle,int)"
    ],
    "javax.swing.uimanager.getborder": [
        "javax.swing.UIManager.getBorder(java.lang.Object,java.util.Locale)",
        "javax.swing.UIManager.getBorder(java.lang.Object)"
    ],
    "org.omg.dynamicany._dynanystub.get_wchar": [
        "org.omg.DynamicAny._DynAnyStub.get_wchar()"
    ],
    "java.awt.image.componentcolormodel.getblue": [
        "java.awt.image.ComponentColorModel.getBlue(int)",
        "java.awt.image.ComponentColorModel.getBlue(java.lang.Object)"
    ],
    "javax.swing.abstractbutton.fireitemstatechanged": [
        "javax.swing.AbstractButton.fireItemStateChanged(java.awt.event.ItemEvent)"
    ],
    "javax.imageio.metadata.iiometadataformat.getattributenames": [
        "javax.imageio.metadata.IIOMetadataFormat.getAttributeNames(java.lang.String)"
    ],
    "java.security.cert.certificaterevokedexception.getrevocationdate": [
        "java.security.cert.CertificateRevokedException.getRevocationDate()"
    ],
    "javax.swing.text.jtextcomponent.write": [
        "javax.swing.text.JTextComponent.write(java.io.Writer)"
    ],
    "javax.management.openmbean.openmbeanattributeinfo.tostring": [
        "javax.management.openmbean.OpenMBeanAttributeInfo.toString()"
    ],
    "javax.swing.text.abstractwriter.output": [
        "javax.swing.text.AbstractWriter.output(char[],int,int)"
    ],
    "java.beans.indexedpropertydescriptor.equals": [
        "java.beans.IndexedPropertyDescriptor.equals(java.lang.Object)"
    ],
    "java.sql.resultset.findcolumn": [
        "java.sql.ResultSet.findColumn(java.lang.String)"
    ],
    "javax.swing.plaf.basic.basicspinnerui.createnextbutton": [
        "javax.swing.plaf.basic.BasicSpinnerUI.createNextButton()"
    ],
    "java.util.resourcebundle.handlekeyset": [
        "java.util.ResourceBundle.handleKeySet()"
    ],
    "javax.accessibility.accessiblecontext.getaccessibleselection": [
        "javax.accessibility.AccessibleContext.getAccessibleSelection()"
    ],
    "java.util.concurrent.atomic.atomicreferencearray.getandset": [
        "java.util.concurrent.atomic.AtomicReferenceArray.getAndSet(int,E)",
        "java.util.concurrent.atomic.AtomicReferenceArray.getAndSet(int,java.util.concurrent.atomic.AtomicReferenceArray)"
    ],
    "org.omg.portableinterceptor.clientrequestinterceptoroperations.receive_reply": [
        "org.omg.PortableInterceptor.ClientRequestInterceptorOperations.receive_reply(org.omg.PortableInterceptor.ClientRequestInfo)"
    ],
    "java.lang.class.cast": [
        "java.lang.Class.cast(java.lang.Object)"
    ],
    "javax.activation.mimetype.getparameter": [
        "javax.activation.MimeType.getParameter(java.lang.String)"
    ],
    "javax.swing.jlayeredpane.paint": [
        "javax.swing.JLayeredPane.paint(java.awt.Graphics)"
    ],
    "javax.swing.text.abstractdocument.getcurrentwriter": [
        "javax.swing.text.AbstractDocument.getCurrentWriter()"
    ],
    "javax.swing.sizerequirements.calculatealignedpositions": [
        "javax.swing.SizeRequirements.calculateAlignedPositions(int,javax.swing.SizeRequirements,javax.swing.SizeRequirements[],int[],int[],boolean)",
        "javax.swing.SizeRequirements.calculateAlignedPositions(int,javax.swing.SizeRequirements,javax.swing.SizeRequirements[],int[],int[])"
    ],
    "java.util.stream.collector.characteristics": [
        "java.util.stream.Collector.characteristics()"
    ],
    "javax.swing.plaf.multi.multicolorchooserui.contains": [
        "javax.swing.plaf.multi.MultiColorChooserUI.contains(javax.swing.JComponent,int,int)"
    ],
    "java.util.concurrent.concurrenthashmap.computeifabsent": [
        "java.util.concurrent.ConcurrentHashMap.computeIfAbsent(K,java.util.function.Function<? super,? extends V>)",
        "java.util.concurrent.ConcurrentHashMap.computeIfAbsent(java.util.concurrent.ConcurrentHashMap,java.util.function.Function<? super,? extends java.util.concurrent.ConcurrentHashMap>)"
    ],
    "javax.swing.jtree.droplocation.tostring": [
        "javax.swing.JTree.DropLocation.toString()"
    ],
    "javax.swing.plaf.multi.multiinternalframeui.uninstallui": [
        "javax.swing.plaf.multi.MultiInternalFrameUI.uninstallUI(javax.swing.JComponent)"
    ],
    "java.awt.adjustable.getvisibleamount": [
        "java.awt.Adjustable.getVisibleAmount()"
    ],
    "java.util.uuid.clocksequence": [
        "java.util.UUID.clockSequence()"
    ],
    "java.net.datagramsocket.setbroadcast": [
        "java.net.DatagramSocket.setBroadcast(boolean)"
    ],
    "java.util.concurrent.atomic.atomiclongfieldupdater.getandaccumulate": [
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndAccumulate(java.util.concurrent.atomic.AtomicLongFieldUpdater,long,java.util.function.LongBinaryOperator)",
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndAccumulate(T,long,java.util.function.LongBinaryOperator)"
    ],
    "java.awt.mediatracker.iserrorid": [
        "java.awt.MediaTracker.isErrorID(int)"
    ],
    "javax.swing.event.tablecolumnmodellistener.columnmoved": [
        "javax.swing.event.TableColumnModelListener.columnMoved(javax.swing.event.TableColumnModelEvent)"
    ],
    "javax.sound.midi.sequencer.getloopcount": [
        "javax.sound.midi.Sequencer.getLoopCount()"
    ],
    "java.util.navigablemap.lowerentry": [
        "java.util.NavigableMap.lowerEntry(K)",
        "java.util.NavigableMap.lowerEntry(java.util.NavigableMap)"
    ],
    "javax.swing.grayfilter.createdisabledimage": [
        "javax.swing.GrayFilter.createDisabledImage(java.awt.Image)"
    ],
    "javax.security.auth.callback.choicecallback.getchoices": [
        "javax.security.auth.callback.ChoiceCallback.getChoices()"
    ],
    "javax.xml.bind.jaxb.unmarshal": [
        "javax.xml.bind.JAXB.unmarshal(java.io.File,java.lang.Class<T>)",
        "javax.xml.bind.JAXB.unmarshal(java.io.Reader,java.lang.Class<T>)",
        "javax.xml.bind.JAXB.unmarshal(java.lang.String,java.lang.Class<T>)",
        "javax.xml.bind.JAXB.unmarshal(java.io.InputStream,java.lang.Class<T>)",
        "javax.xml.bind.JAXB.unmarshal(java.net.URI,java.lang.Class<T>)",
        "javax.xml.bind.JAXB.unmarshal(javax.xml.transform.Source,java.lang.Class<T>)",
        "javax.xml.bind.JAXB.unmarshal(java.net.URL,java.lang.Class<T>)"
    ],
    "javax.swing.jcomponent.setforeground": [
        "javax.swing.JComponent.setForeground(java.awt.Color)"
    ],
    "java.awt.image.bandcombineop.createcompatibledestraster": [
        "java.awt.image.BandCombineOp.createCompatibleDestRaster(java.awt.image.Raster)"
    ],
    "javax.swing.plaf.basic.basicprogressbarui.getboxlength": [
        "javax.swing.plaf.basic.BasicProgressBarUI.getBoxLength(int,int)"
    ],
    "javax.sound.midi.sequencer.getsequence": [
        "javax.sound.midi.Sequencer.getSequence()"
    ],
    "java.awt.awtkeystroke.getawtkeystroke": [
        "java.awt.AWTKeyStroke.getAWTKeyStroke(char)",
        "java.awt.AWTKeyStroke.getAWTKeyStroke(int,int)",
        "java.awt.AWTKeyStroke.getAWTKeyStroke(int,int,boolean)",
        "java.awt.AWTKeyStroke.getAWTKeyStroke(java.lang.Character,int)",
        "java.awt.AWTKeyStroke.getAWTKeyStroke(java.lang.String)"
    ],
    "org.omg.portableinterceptor.clientrequestinfooperations.effective_profile": [
        "org.omg.PortableInterceptor.ClientRequestInfoOperations.effective_profile()"
    ],
    "java.awt.eventqueue.invokelater": [
        "java.awt.EventQueue.invokeLater(java.lang.Runnable)"
    ],
    "javax.swing.jcomponent.setopaque": [
        "javax.swing.JComponent.setOpaque(boolean)"
    ],
    "java.sql.resultsetmetadata.getcolumndisplaysize": [
        "java.sql.ResultSetMetaData.getColumnDisplaySize(int)"
    ],
    "javax.sound.sampled.lineevent.getline": [
        "javax.sound.sampled.LineEvent.getLine()"
    ],
    "javax.print.attribute.setofintegersyntax.equals": [
        "javax.print.attribute.SetOfIntegerSyntax.equals(java.lang.Object)"
    ],
    "java.sql.databasemetadata.supportsdatadefinitionanddatamanipulationtransactions": [
        "java.sql.DatabaseMetaData.supportsDataDefinitionAndDataManipulationTransactions()"
    ],
    "javax.xml.ws.soap.addressingfeature.getresponses": [
        "javax.xml.ws.soap.AddressingFeature.getResponses()"
    ],
    "java.lang.invoke.methodtype.frommethoddescriptorstring": [
        "java.lang.invoke.MethodType.fromMethodDescriptorString(java.lang.String,java.lang.ClassLoader)"
    ],
    "java.util.concurrent.forkjoinpool.getrunningthreadcount": [
        "java.util.concurrent.ForkJoinPool.getRunningThreadCount()"
    ],
    "javax.swing.plaf.synth.synthpainter.painttextpaneborder": [
        "javax.swing.plaf.synth.SynthPainter.paintTextPaneBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.time.offsetdatetime.now": [
        "java.time.OffsetDateTime.now(java.time.Clock)",
        "java.time.OffsetDateTime.now()",
        "java.time.OffsetDateTime.now(java.time.ZoneId)"
    ],
    "java.util.stream.longstream.average": [
        "java.util.stream.LongStream.average()"
    ],
    "java.awt.component.getbaseline": [
        "java.awt.Component.getBaseline(int,int)"
    ],
    "javax.swing.text.jtextcomponent.getselectionstart": [
        "javax.swing.text.JTextComponent.getSelectionStart()"
    ],
    "java.lang.management.lockinfo.getclassname": [
        "java.lang.management.LockInfo.getClassName()"
    ],
    "java.text.parseposition.geterrorindex": [
        "java.text.ParsePosition.getErrorIndex()"
    ],
    "org.omg.corba.portable.delegate.tostring": [
        "org.omg.CORBA.portable.Delegate.toString(org.omg.CORBA.Object)"
    ],
    "javax.security.sasl.authorizecallback.getauthenticationid": [
        "javax.security.sasl.AuthorizeCallback.getAuthenticationID()"
    ],
    "java.sql.databasemetadata.getdatabaseproductversion": [
        "java.sql.DatabaseMetaData.getDatabaseProductVersion()"
    ],
    "java.util.regex.pattern.matcher": [
        "java.util.regex.Pattern.matcher(java.lang.CharSequence)"
    ],
    "javax.xml.bind.validationeventlocator.getnode": [
        "javax.xml.bind.ValidationEventLocator.getNode()"
    ],
    "javax.swing.jformattedtextfield.setvalue": [
        "javax.swing.JFormattedTextField.setValue(java.lang.Object)"
    ],
    "javax.swing.plaf.synth.synthspinnerui.update": [
        "javax.swing.plaf.synth.SynthSpinnerUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.plaf.basic.basictextui.viewtomodel": [
        "javax.swing.plaf.basic.BasicTextUI.viewToModel(javax.swing.text.JTextComponent,java.awt.Point,javax.swing.text.Position.Bias[])",
        "javax.swing.plaf.basic.BasicTextUI.viewToModel(javax.swing.text.JTextComponent,java.awt.Point)"
    ],
    "java.math.bigdecimal.longvalueexact": [
        "java.math.BigDecimal.longValueExact()"
    ],
    "java.io.stringreader.mark": [
        "java.io.StringReader.mark(int)"
    ],
    "javax.swing.plaf.synth.synthspinnerui.installdefaults": [
        "javax.swing.plaf.synth.SynthSpinnerUI.installDefaults()"
    ],
    "java.awt.paintcontext.getraster": [
        "java.awt.PaintContext.getRaster(int,int,int,int)"
    ],
    "java.security.cert.x509certselector.setsubjectalternativenames": [
        "java.security.cert.X509CertSelector.setSubjectAlternativeNames(java.util.Collection<java.util.List<?>>)"
    ],
    "javax.swing.jmenuitem.firemenukeypressed": [
        "javax.swing.JMenuItem.fireMenuKeyPressed(javax.swing.event.MenuKeyEvent)"
    ],
    "javax.sql.commondatasource.getparentlogger": [
        "javax.sql.CommonDataSource.getParentLogger()"
    ],
    "java.awt.image.lookuptable.lookuppixel": [
        "java.awt.image.LookupTable.lookupPixel(int[],int[])"
    ],
    "java.awt.image.multipixelpackedsamplemodel.createsubsetsamplemodel": [
        "java.awt.image.MultiPixelPackedSampleModel.createSubsetSampleModel(int[])"
    ],
    "org.omg.corba.portable.delegate.get_interface_def": [
        "org.omg.CORBA.portable.Delegate.get_interface_def(org.omg.CORBA.Object)"
    ],
    "java.net.socket.getremotesocketaddress": [
        "java.net.Socket.getRemoteSocketAddress()"
    ],
    "javax.imageio.metadata.iiometadatanode.getattributes": [
        "javax.imageio.metadata.IIOMetadataNode.getAttributes()"
    ],
    "javax.security.auth.callback.choicecallback.setselectedindex": [
        "javax.security.auth.callback.ChoiceCallback.setSelectedIndex(int)"
    ],
    "org.omg.corba.datainputstream.read_float_array": [
        "org.omg.CORBA.DataInputStream.read_float_array(org.omg.CORBA.FloatSeqHolder,int,int)"
    ],
    "javax.swing.joptionpane.setrootframe": [
        "javax.swing.JOptionPane.setRootFrame(java.awt.Frame)"
    ],
    "javax.swing.plaf.multi.multilookandfeel.getname": [
        "javax.swing.plaf.multi.MultiLookAndFeel.getName()"
    ],
    "java.time.offsetdatetime.withminute": [
        "java.time.OffsetDateTime.withMinute(int)"
    ],
    "javax.swing.plaf.basic.basicprogressbarui.getselectionbackground": [
        "javax.swing.plaf.basic.BasicProgressBarUI.getSelectionBackground()"
    ],
    "java.awt.font.linemetrics.getunderlineoffset": [
        "java.awt.font.LineMetrics.getUnderlineOffset()"
    ],
    "javax.management.runtimeerrorexception.gettargeterror": [
        "javax.management.RuntimeErrorException.getTargetError()"
    ],
    "org.xml.sax.helpers.defaulthandler.enddocument": [
        "org.xml.sax.helpers.DefaultHandler.endDocument()"
    ],
    "java.rmi.server.uid.tostring": [
        "java.rmi.server.UID.toString()"
    ],
    "javax.sql.rowset.setnclob": [
        "javax.sql.RowSet.setNClob(java.lang.String,java.io.Reader)",
        "javax.sql.RowSet.setNClob(int,java.sql.NClob)",
        "javax.sql.RowSet.setNClob(int,java.io.Reader,long)",
        "javax.sql.RowSet.setNClob(java.lang.String,java.io.Reader,long)",
        "javax.sql.RowSet.setNClob(java.lang.String,java.sql.NClob)",
        "javax.sql.RowSet.setNClob(int,java.io.Reader)"
    ],
    "javax.print.serviceuifactory.getuiclassnamesforrole": [
        "javax.print.ServiceUIFactory.getUIClassNamesForRole(int)"
    ],
    "java.awt.print.printerjob.setcopies": [
        "java.awt.print.PrinterJob.setCopies(int)"
    ],
    "javax.tools.fileobject.openreader": [
        "javax.tools.FileObject.openReader(boolean)"
    ],
    "org.ietf.jgss.gsscontext.wrap": [
        "org.ietf.jgss.GSSContext.wrap(byte[],int,int,org.ietf.jgss.MessageProp)",
        "org.ietf.jgss.GSSContext.wrap(java.io.InputStream,java.io.OutputStream,org.ietf.jgss.MessageProp)"
    ],
    "java.util.concurrent.concurrentskiplistset.lower": [
        "java.util.concurrent.ConcurrentSkipListSet.lower(E)"
    ],
    "javax.swing.plaf.multi.multisliderui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiSliderUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.multi.multilistui.createui": [
        "javax.swing.plaf.multi.MultiListUI.createUI(javax.swing.JComponent)"
    ],
    "org.xml.sax.helpers.namespacesupport.pushcontext": [
        "org.xml.sax.helpers.NamespaceSupport.pushContext()"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.getleadselectionpath": [
        "javax.swing.tree.DefaultTreeSelectionModel.getLeadSelectionPath()"
    ],
    "javax.swing.plaf.multi.multimenubarui.getminimumsize": [
        "javax.swing.plaf.multi.MultiMenuBarUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "javax.swing.tree.defaulttreemodel.setroot": [
        "javax.swing.tree.DefaultTreeModel.setRoot(javax.swing.tree.TreeNode)"
    ],
    "javax.swing.table.defaulttablecolumnmodel.firecolumnselectionchanged": [
        "javax.swing.table.DefaultTableColumnModel.fireColumnSelectionChanged(javax.swing.event.ListSelectionEvent)"
    ],
    "java.net.url.tostring": [
        "java.net.URL.toString()"
    ],
    "java.util.locale.getavailablelocales": [
        "java.util.Locale.getAvailableLocales()"
    ],
    "javax.accessibility.accessiblestateset.toarray": [
        "javax.accessibility.AccessibleStateSet.toArray()"
    ],
    "java.net.socket.tostring": [
        "java.net.Socket.toString()"
    ],
    "java.util.logging.logger.exiting": [
        "java.util.logging.Logger.exiting(java.lang.String,java.lang.String,java.lang.Object)",
        "java.util.logging.Logger.exiting(java.lang.String,java.lang.String)"
    ],
    "java.time.chrono.chronolocaldatetime.adjustinto": [
        "java.time.chrono.ChronoLocalDateTime.adjustInto(java.time.temporal.Temporal)"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.setcolumntype": [
        "javax.sql.rowset.RowSetMetaDataImpl.setColumnType(int,int)"
    ],
    "javax.sound.sampled.spi.mixerprovider.getmixerinfo": [
        "javax.sound.sampled.spi.MixerProvider.getMixerInfo()"
    ],
    "java.text.dateformat.gettimezone": [
        "java.text.DateFormat.getTimeZone()"
    ],
    "javax.swing.jlayer.getglasspane": [
        "javax.swing.JLayer.getGlassPane()"
    ],
    "javax.swing.tree.treepath.pathbyaddingchild": [
        "javax.swing.tree.TreePath.pathByAddingChild(java.lang.Object)"
    ],
    "java.util.concurrent.concurrentlinkedqueue.size": [
        "java.util.concurrent.ConcurrentLinkedQueue.size()"
    ],
    "javax.xml.crypto.dsig.xmlobject.getmimetype": [
        "javax.xml.crypto.dsig.XMLObject.getMimeType()"
    ],
    "java.time.localtime.of": [
        "java.time.LocalTime.of(int,int,int,int)",
        "java.time.LocalTime.of(int,int,int)",
        "java.time.LocalTime.of(int,int)"
    ],
    "java.awt.renderinghints.tostring": [
        "java.awt.RenderingHints.toString()"
    ],
    "javax.lang.model.element.packageelement.getenclosedelements": [
        "javax.lang.model.element.PackageElement.getEnclosedElements()"
    ],
    "javax.swing.jscrollpane.sethorizontalscrollbar": [
        "javax.swing.JScrollPane.setHorizontalScrollBar(javax.swing.JScrollBar)"
    ],
    "javax.swing.comboboxeditor.addactionlistener": [
        "javax.swing.ComboBoxEditor.addActionListener(java.awt.event.ActionListener)"
    ],
    "javax.swing.table.defaulttablecolumnmodel.firecolumnmarginchanged": [
        "javax.swing.table.DefaultTableColumnModel.fireColumnMarginChanged()"
    ],
    "javax.sql.rowset.cachedrowset.getoriginalrow": [
        "javax.sql.rowset.CachedRowSet.getOriginalRow()"
    ],
    "java.time.format.datetimeformatterbuilder.appendzoneid": [
        "java.time.format.DateTimeFormatterBuilder.appendZoneId()"
    ],
    "java.util.concurrent.concurrentlinkeddeque.offerfirst": [
        "java.util.concurrent.ConcurrentLinkedDeque.offerFirst(E)",
        "java.util.concurrent.ConcurrentLinkedDeque.offerFirst(java.util.concurrent.ConcurrentLinkedDeque)"
    ],
    "java.beans.beancontext.beancontextserviceavailableevent.getsourceasbeancontextservices": [
        "java.beans.beancontext.BeanContextServiceAvailableEvent.getSourceAsBeanContextServices()"
    ],
    "javax.swing.text.asyncboxview.replace": [
        "javax.swing.text.AsyncBoxView.replace(int,int,javax.swing.text.View[])"
    ],
    "java.io.objectoutputstream.annotateclass": [
        "java.io.ObjectOutputStream.annotateClass(java.lang.Class<?>)"
    ],
    "javax.swing.plaf.basic.basiceditorpaneui.geteditorkit": [
        "javax.swing.plaf.basic.BasicEditorPaneUI.getEditorKit(javax.swing.text.JTextComponent)"
    ],
    "java.io.closeable.close": [
        "java.io.Closeable.close()"
    ],
    "java.awt.gridlayout.tostring": [
        "java.awt.GridLayout.toString()"
    ],
    "javax.security.auth.x500.x500privatecredential.getprivatekey": [
        "javax.security.auth.x500.X500PrivateCredential.getPrivateKey()"
    ],
    "java.util.concurrent.forkjoinpool.getparallelism": [
        "java.util.concurrent.ForkJoinPool.getParallelism()"
    ],
    "java.util.locale.builder.setregion": [
        "java.util.Locale.Builder.setRegion(java.lang.String)"
    ],
    "javax.swing.spinnernumbermodel.getminimum": [
        "javax.swing.SpinnerNumberModel.getMinimum()"
    ],
    "javax.print.attribute.standard.numberup.getcategory": [
        "javax.print.attribute.standard.NumberUp.getCategory()"
    ],
    "javax.security.sasl.saslserver.getauthorizationid": [
        "javax.security.sasl.SaslServer.getAuthorizationID()"
    ],
    "java.time.zoneoffset.of": [
        "java.time.ZoneOffset.of(java.lang.String)"
    ],
    "javax.sql.datasource.getconnection": [
        "javax.sql.DataSource.getConnection()",
        "javax.sql.DataSource.getConnection(java.lang.String,java.lang.String)"
    ],
    "java.lang.management.threadmxbean.isthreadcputimesupported": [
        "java.lang.management.ThreadMXBean.isThreadCpuTimeSupported()"
    ],
    "java.lang.thread.setdaemon": [
        "java.lang.Thread.setDaemon(boolean)"
    ],
    "java.util.bitset.cardinality": [
        "java.util.BitSet.cardinality()"
    ],
    "org.omg.dynamicany._dynstructstub.get_members_as_dyn_any": [
        "org.omg.DynamicAny._DynStructStub.get_members_as_dyn_any()"
    ],
    "java.sql.parametermetadata.issigned": [
        "java.sql.ParameterMetaData.isSigned(int)"
    ],
    "javax.swing.uidefaults.setdefaultlocale": [
        "javax.swing.UIDefaults.setDefaultLocale(java.util.Locale)"
    ],
    "javax.xml.transform.transformerfactory.seturiresolver": [
        "javax.xml.transform.TransformerFactory.setURIResolver(javax.xml.transform.URIResolver)"
    ],
    "java.awt.scrollpane.dolayout": [
        "java.awt.ScrollPane.doLayout()"
    ],
    "java.security.cert.certificaterevokedexception.getauthorityname": [
        "java.security.cert.CertificateRevokedException.getAuthorityName()"
    ],
    "java.util.concurrent.cyclicbarrier.await": [
        "java.util.concurrent.CyclicBarrier.await(long,java.util.concurrent.TimeUnit)",
        "java.util.concurrent.CyclicBarrier.await()"
    ],
    "java.awt.geom.cubiccurve2d.getctrlp2": [
        "java.awt.geom.CubicCurve2D.getCtrlP2()"
    ],
    "javax.management.remote.notificationresult.getnextsequencenumber": [
        "javax.management.remote.NotificationResult.getNextSequenceNumber()"
    ],
    "java.lang.management.platformloggingmxbean.setloggerlevel": [
        "java.lang.management.PlatformLoggingMXBean.setLoggerLevel(java.lang.String,java.lang.String)"
    ],
    "org.w3c.dom.events.mouseevent.getscreenx": [
        "org.w3c.dom.events.MouseEvent.getScreenX()"
    ],
    "java.lang.reflect.annotatedparameterizedtype.getannotatedactualtypearguments": [
        "java.lang.reflect.AnnotatedParameterizedType.getAnnotatedActualTypeArguments()"
    ],
    "org.omg.portableinterceptor.currentoperations.set_slot": [
        "org.omg.PortableInterceptor.CurrentOperations.set_slot(int,org.omg.CORBA.Any)"
    ],
    "java.util.navigableset.floor": [
        "java.util.NavigableSet.floor(java.util.NavigableSet)",
        "java.util.NavigableSet.floor(E)"
    ],
    "javax.activation.datahandler.getcontenttype": [
        "javax.activation.DataHandler.getContentType()"
    ],
    "javax.swing.plaf.synth.synthstyle.getint": [
        "javax.swing.plaf.synth.SynthStyle.getInt(javax.swing.plaf.synth.SynthContext,java.lang.Object,int)"
    ],
    "java.nio.floatbuffer.compareto": [
        "java.nio.FloatBuffer.compareTo(java.nio.FloatBuffer)"
    ],
    "javax.xml.crypto.uridereferencer.dereference": [
        "javax.xml.crypto.URIDereferencer.dereference(javax.xml.crypto.URIReference,javax.xml.crypto.XMLCryptoContext)"
    ],
    "java.awt.trayicon.getactionlisteners": [
        "java.awt.TrayIcon.getActionListeners()"
    ],
    "javax.xml.stream.util.streamreaderdelegate.getparent": [
        "javax.xml.stream.util.StreamReaderDelegate.getParent()"
    ],
    "javax.swing.abstractaction.getpropertychangelisteners": [
        "javax.swing.AbstractAction.getPropertyChangeListeners()"
    ],
    "javax.swing.text.paragraphview.createrow": [
        "javax.swing.text.ParagraphView.createRow()"
    ],
    "java.util.logging.handler.isloggable": [
        "java.util.logging.Handler.isLoggable(java.util.logging.LogRecord)"
    ],
    "java.util.concurrent.forkjoinpool.managedblocker.block": [
        "java.util.concurrent.ForkJoinPool.ManagedBlocker.block()"
    ],
    "java.sql.resultset.getblob": [
        "java.sql.ResultSet.getBlob(java.lang.String)",
        "java.sql.ResultSet.getBlob(int)"
    ],
    "org.omg.dynamicany._dynarraystub.get_any": [
        "org.omg.DynamicAny._DynArrayStub.get_any()"
    ],
    "javax.tools.simplejavafileobject.getcharcontent": [
        "javax.tools.SimpleJavaFileObject.getCharContent(boolean)"
    ],
    "javax.swing.text.styleconstants.getbidilevel": [
        "javax.swing.text.StyleConstants.getBidiLevel(javax.swing.text.AttributeSet)"
    ],
    "javax.swing.event.tablecolumnmodellistener.columnremoved": [
        "javax.swing.event.TableColumnModelListener.columnRemoved(javax.swing.event.TableColumnModelEvent)"
    ],
    "javax.naming.spi.directorymanager.getstatetobind": [
        "javax.naming.spi.DirectoryManager.getStateToBind(java.lang.Object,javax.naming.Name,javax.naming.Context,,?>,javax.naming.directory.Attributes)"
    ],
    "java.security.keypairgenerator.generatekeypair": [
        "java.security.KeyPairGenerator.generateKeyPair()"
    ],
    "java.awt.dnd.dragsourcecontext.getcursor": [
        "java.awt.dnd.DragSourceContext.getCursor()"
    ],
    "java.awt.geom.quadcurve2d.float.getbounds2d": [
        "java.awt.geom.QuadCurve2D.Float.getBounds2D()"
    ],
    "java.text.numberformat.getcurrencyinstance": [
        "java.text.NumberFormat.getCurrencyInstance(java.util.Locale)",
        "java.text.NumberFormat.getCurrencyInstance()"
    ],
    "javax.swing.event.treeselectionevent.getpaths": [
        "javax.swing.event.TreeSelectionEvent.getPaths()"
    ],
    "javax.xml.validation.schemafactory.getresourceresolver": [
        "javax.xml.validation.SchemaFactory.getResourceResolver()"
    ],
    "javax.sql.rowsetinternal.setmetadata": [
        "javax.sql.RowSetInternal.setMetaData(javax.sql.RowSetMetaData)"
    ],
    "java.lang.invoke.methodhandles.lookup.findsetter": [
        "java.lang.invoke.MethodHandles.Lookup.findSetter(java.lang.Class<?>,java.lang.String,java.lang.Class<?>)"
    ],
    "javax.management.relation.relationtypesupport.getrelationtypename": [
        "javax.management.relation.RelationTypeSupport.getRelationTypeName()"
    ],
    "java.awt.geom.quadcurve2d.float.gety1": [
        "java.awt.geom.QuadCurve2D.Float.getY1()"
    ],
    "java.nio.file.watchservice.take": [
        "java.nio.file.WatchService.take()"
    ],
    "javax.swing.table.tablecolumn.getminwidth": [
        "javax.swing.table.TableColumn.getMinWidth()"
    ],
    "java.awt.awtkeystroke.registersubclass": [
        "java.awt.AWTKeyStroke.registerSubclass(java.lang.Class<?>)"
    ],
    "javax.swing.repaintmanager.adddirtyregion": [
        "javax.swing.RepaintManager.addDirtyRegion(javax.swing.JComponent,int,int,int,int)",
        "javax.swing.RepaintManager.addDirtyRegion(java.applet.Applet,int,int,int,int)",
        "javax.swing.RepaintManager.addDirtyRegion(java.awt.Window,int,int,int,int)"
    ],
    "javax.swing.plaf.basic.basictextareaui.propertychange": [
        "javax.swing.plaf.basic.BasicTextAreaUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "java.awt.scrollpane.processmousewheelevent": [
        "java.awt.ScrollPane.processMouseWheelEvent(java.awt.event.MouseWheelEvent)"
    ],
    "javax.sound.midi.soundbankresource.getdata": [
        "javax.sound.midi.SoundbankResource.getData()"
    ],
    "org.xml.sax.xmlreader.setdtdhandler": [
        "org.xml.sax.XMLReader.setDTDHandler(org.xml.sax.DTDHandler)"
    ],
    "org.xml.sax.inputsource.setbytestream": [
        "org.xml.sax.InputSource.setByteStream(java.io.InputStream)"
    ],
    "javax.swing.text.jtextcomponent.setselectedtextcolor": [
        "javax.swing.text.JTextComponent.setSelectedTextColor(java.awt.Color)"
    ],
    "java.lang.invoke.volatilecallsite.settarget": [
        "java.lang.invoke.VolatileCallSite.setTarget(java.lang.invoke.MethodHandle)"
    ],
    "javax.swing.plaf.splitpaneui.getmaximumdividerlocation": [
        "javax.swing.plaf.SplitPaneUI.getMaximumDividerLocation(javax.swing.JSplitPane)"
    ],
    "org.omg.dynamicany._dynstructstub.insert_typecode": [
        "org.omg.DynamicAny._DynStructStub.insert_typecode(org.omg.CORBA.TypeCode)"
    ],
    "java.awt.font.getstyle": [
        "java.awt.Font.getStyle()"
    ],
    "java.nio.channels.filechannel.truncate": [
        "java.nio.channels.FileChannel.truncate(long)"
    ],
    "java.util.concurrent.atomic.atomiclong.lazyset": [
        "java.util.concurrent.atomic.AtomicLong.lazySet(long)"
    ],
    "org.omg.portableinterceptor.iorinfooperations.get_effective_policy": [
        "org.omg.PortableInterceptor.IORInfoOperations.get_effective_policy(int)"
    ],
    "java.awt.image.getheight": [
        "java.awt.Image.getHeight(java.awt.image.ImageObserver)"
    ],
    "java.lang.stringbuffer.append": [
        "java.lang.StringBuffer.append(java.lang.Object)",
        "java.lang.StringBuffer.append(char)",
        "java.lang.StringBuffer.append(java.lang.String)",
        "java.lang.StringBuffer.append(long)",
        "java.lang.StringBuffer.append(java.lang.CharSequence)",
        "java.lang.StringBuffer.append(boolean)",
        "java.lang.StringBuffer.append(double)",
        "java.lang.StringBuffer.append(int)",
        "java.lang.StringBuffer.append(java.lang.StringBuffer)",
        "java.lang.StringBuffer.append(float)",
        "java.lang.StringBuffer.append(char[],int,int)",
        "java.lang.StringBuffer.append(java.lang.CharSequence,int,int)",
        "java.lang.StringBuffer.append(char[])"
    ],
    "java.util.function.unaryoperator.identity": [
        "java.util.function.UnaryOperator.identity()"
    ],
    "javax.tools.toolprovider.getsystemdocumentationtool": [
        "javax.tools.ToolProvider.getSystemDocumentationTool()"
    ],
    "java.util.optionallong.orelseget": [
        "java.util.OptionalLong.orElseGet(java.util.function.LongSupplier)"
    ],
    "java.lang.management.runtimemxbean.getname": [
        "java.lang.management.RuntimeMXBean.getName()"
    ],
    "javax.swing.plaf.multi.multitreeui.getminimumsize": [
        "javax.swing.plaf.multi.MultiTreeUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "java.util.calendar.computetime": [
        "java.util.Calendar.computeTime()"
    ],
    "java.awt.geom.path2d.double.getpathiterator": [
        "java.awt.geom.Path2D.Double.getPathIterator(java.awt.geom.AffineTransform)"
    ],
    "java.util.locale.builder.setvariant": [
        "java.util.Locale.Builder.setVariant(java.lang.String)"
    ],
    "java.time.chrono.chronolocaldate.from": [
        "java.time.chrono.ChronoLocalDate.from(java.time.temporal.TemporalAccessor)"
    ],
    "org.omg.corba.portable.outputstream.write_double_array": [
        "org.omg.CORBA.portable.OutputStream.write_double_array(double[],int,int)"
    ],
    "javax.swing.jsplitpane.getlastdividerlocation": [
        "javax.swing.JSplitPane.getLastDividerLocation()"
    ],
    "java.awt.image.bufferedimage.getminy": [
        "java.awt.image.BufferedImage.getMinY()"
    ],
    "java.nio.charset.charsetencoder.flush": [
        "java.nio.charset.CharsetEncoder.flush(java.nio.ByteBuffer)"
    ],
    "javax.sound.midi.midisystem.getsequence": [
        "javax.sound.midi.MidiSystem.getSequence(java.io.InputStream)",
        "javax.sound.midi.MidiSystem.getSequence(java.net.URL)",
        "javax.sound.midi.MidiSystem.getSequence(java.io.File)"
    ],
    "javax.crypto.secretkeyfactory.translatekey": [
        "javax.crypto.SecretKeyFactory.translateKey(javax.crypto.SecretKey)"
    ],
    "javax.swing.text.view.getviewcount": [
        "javax.swing.text.View.getViewCount()"
    ],
    "java.util.concurrent.scheduledexecutorservice.scheduleatfixedrate": [
        "java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)"
    ],
    "javax.sound.midi.sequence.createtrack": [
        "javax.sound.midi.Sequence.createTrack()"
    ],
    "java.sql.connection.releasesavepoint": [
        "java.sql.Connection.releaseSavepoint(java.sql.Savepoint)"
    ],
    "javax.xml.soap.soapelement.getallattributesasqnames": [
        "javax.xml.soap.SOAPElement.getAllAttributesAsQNames()"
    ],
    "java.time.localtime.withminute": [
        "java.time.LocalTime.withMinute(int)"
    ],
    "java.awt.image.lookupop.filter": [
        "java.awt.image.LookupOp.filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)",
        "java.awt.image.LookupOp.filter(java.awt.image.Raster,java.awt.image.WritableRaster)"
    ],
    "java.security.keystore.getkey": [
        "java.security.KeyStore.getKey(java.lang.String,char[])"
    ],
    "java.time.zoneddatetime.getmonthvalue": [
        "java.time.ZonedDateTime.getMonthValue()"
    ],
    "javax.swing.abstractbutton.setui": [
        "javax.swing.AbstractButton.setUI(javax.swing.plaf.ButtonUI)"
    ],
    "org.omg.corba.request.poll_response": [
        "org.omg.CORBA.Request.poll_response()"
    ],
    "javax.swing.text.asyncboxview.preferencechanged": [
        "javax.swing.text.AsyncBoxView.preferenceChanged(javax.swing.text.View,boolean,boolean)"
    ],
    "java.io.inputstreamreader.getencoding": [
        "java.io.InputStreamReader.getEncoding()"
    ],
    "org.omg.portableserver.poaoperations.create_thread_policy": [
        "org.omg.PortableServer.POAOperations.create_thread_policy(org.omg.PortableServer.ThreadPolicyValue)"
    ],
    "javax.swing.jpopupmenu.processmouseevent": [
        "javax.swing.JPopupMenu.processMouseEvent(java.awt.event.MouseEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)"
    ],
    "javax.accessibility.accessibletext.getselectionend": [
        "javax.accessibility.AccessibleText.getSelectionEnd()"
    ],
    "java.time.zone.zoneoffsettransitionrule.getdayofmonthindicator": [
        "java.time.zone.ZoneOffsetTransitionRule.getDayOfMonthIndicator()"
    ],
    "javax.swing.text.simpleattributeset.addattributes": [
        "javax.swing.text.SimpleAttributeSet.addAttributes(javax.swing.text.AttributeSet)"
    ],
    "org.omg.dynamicany._dynarraystub.get_reference": [
        "org.omg.DynamicAny._DynArrayStub.get_reference()"
    ],
    "java.nio.file.files.find": [
        "java.nio.file.Files.find(java.nio.file.Path,int,,java.nio.file.attribute.BasicFileAttributes>,java.nio.file.FileVisitOption...)"
    ],
    "javax.swing.plaf.basic.basictreeui.paintdropline": [
        "javax.swing.plaf.basic.BasicTreeUI.paintDropLine(java.awt.Graphics)"
    ],
    "java.util.concurrent.atomic.atomiclongarray.get": [
        "java.util.concurrent.atomic.AtomicLongArray.get(int)"
    ],
    "javax.swing.jtextfield.setactioncommand": [
        "javax.swing.JTextField.setActionCommand(java.lang.String)"
    ],
    "java.io.dataoutputstream.size": [
        "java.io.DataOutputStream.size()"
    ],
    "javax.swing.uimanager.getboolean": [
        "javax.swing.UIManager.getBoolean(java.lang.Object)",
        "javax.swing.UIManager.getBoolean(java.lang.Object,java.util.Locale)"
    ],
    "java.awt.textcomponent.select": [
        "java.awt.TextComponent.select(int,int)"
    ],
    "javax.swing.timer.removeactionlistener": [
        "javax.swing.Timer.removeActionListener(java.awt.event.ActionListener)"
    ],
    "javax.xml.crypto.dsig.keyinfo.pgpdata.getexternalelements": [
        "javax.xml.crypto.dsig.keyinfo.PGPData.getExternalElements()"
    ],
    "java.beans.xmldecoder.close": [
        "java.beans.XMLDecoder.close()"
    ],
    "org.omg.dynamicany._dynfixedstub.insert_longlong": [
        "org.omg.DynamicAny._DynFixedStub.insert_longlong(long)"
    ],
    "javax.swing.jtree.getanchorselectionpath": [
        "javax.swing.JTree.getAnchorSelectionPath()"
    ],
    "javax.xml.soap.soapmessage.savechanges": [
        "javax.xml.soap.SOAPMessage.saveChanges()"
    ],
    "java.awt.geom.roundrectangle2d.float.getwidth": [
        "java.awt.geom.RoundRectangle2D.Float.getWidth()"
    ],
    "java.util.concurrent.threadpoolexecutor.execute": [
        "java.util.concurrent.ThreadPoolExecutor.execute(java.lang.Runnable)"
    ],
    "javax.lang.model.type.executabletype.getparametertypes": [
        "javax.lang.model.type.ExecutableType.getParameterTypes()"
    ],
    "java.util.map.remove": [
        "java.util.Map.remove(java.lang.Object,java.lang.Object)"
    ],
    "javax.print.attribute.standard.compression.getstringtable": [
        "javax.print.attribute.standard.Compression.getStringTable()"
    ],
    "javax.swing.border.titledborder.setborder": [
        "javax.swing.border.TitledBorder.setBorder(javax.swing.border.Border)"
    ],
    "java.sql.databasemetadata.storesmixedcaseidentifiers": [
        "java.sql.DatabaseMetaData.storesMixedCaseIdentifiers()"
    ],
    "org.omg.dynamicany._dynunionstub.insert_dyn_any": [
        "org.omg.DynamicAny._DynUnionStub.insert_dyn_any(org.omg.DynamicAny.DynAny)"
    ],
    "javax.swing.jinternalframe.getdesktopicon": [
        "javax.swing.JInternalFrame.getDesktopIcon()"
    ],
    "javax.swing.tree.abstractlayoutcache.getpreferredheight": [
        "javax.swing.tree.AbstractLayoutCache.getPreferredHeight()"
    ],
    "java.io.printstream.append": [
        "java.io.PrintStream.append(java.lang.CharSequence)",
        "java.io.PrintStream.append(char)",
        "java.io.PrintStream.append(java.lang.CharSequence,int,int)"
    ],
    "javax.swing.abstractbutton.setpressedicon": [
        "javax.swing.AbstractButton.setPressedIcon(javax.swing.Icon)"
    ],
    "java.sql.resultset.previous": [
        "java.sql.ResultSet.previous()"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.setmillisecond": [
        "javax.xml.datatype.XMLGregorianCalendar.setMillisecond(int)"
    ],
    "javax.management.relation.roleunresolved.getrolevalue": [
        "javax.management.relation.RoleUnresolved.getRoleValue()"
    ],
    "java.util.arraylist.retainall": [
        "java.util.ArrayList.retainAll(java.util.Collection<?>)"
    ],
    "javax.swing.jeditorpane.getstream": [
        "javax.swing.JEditorPane.getStream(java.net.URL)"
    ],
    "org.omg.dynamicany._dynsequencestub.insert_long": [
        "org.omg.DynamicAny._DynSequenceStub.insert_long(int)"
    ],
    "javax.lang.model.util.types.getnulltype": [
        "javax.lang.model.util.Types.getNullType()"
    ],
    "org.omg.corba.objectholder._type": [
        "org.omg.CORBA.ObjectHolder._type()"
    ],
    "java.util.concurrent.atomic.atomicintegerarray.weakcompareandset": [
        "java.util.concurrent.atomic.AtomicIntegerArray.weakCompareAndSet(int,int,int)"
    ],
    "javax.swing.plaf.basic.basicoptionpaneui.getinitialvalueindex": [
        "javax.swing.plaf.basic.BasicOptionPaneUI.getInitialValueIndex()"
    ],
    "org.omg.corba.localobject._invoke": [
        "org.omg.CORBA.LocalObject._invoke(org.omg.CORBA.portable.OutputStream)"
    ],
    "java.util.gregoriancalendar.getleastmaximum": [
        "java.util.GregorianCalendar.getLeastMaximum(int)"
    ],
    "java.awt.dnd.dragsource.getdragsourcelisteners": [
        "java.awt.dnd.DragSource.getDragSourceListeners()"
    ],
    "java.awt.toolkit.createdialog": [
        "java.awt.Toolkit.createDialog(java.awt.Dialog)"
    ],
    "javax.xml.transform.sax.saxsource.setinputsource": [
        "javax.xml.transform.sax.SAXSource.setInputSource(org.xml.sax.InputSource)"
    ],
    "org.omg.corba.any.insert_wchar": [
        "org.omg.CORBA.Any.insert_wchar(char)"
    ],
    "org.omg.corba.localobject._servant_preinvoke": [
        "org.omg.CORBA.LocalObject._servant_preinvoke(java.lang.String,java.lang.Class)"
    ],
    "javax.swing.jdialog.getglasspane": [
        "javax.swing.JDialog.getGlassPane()"
    ],
    "javax.xml.validation.validatorhandler.setresourceresolver": [
        "javax.xml.validation.ValidatorHandler.setResourceResolver(org.w3c.dom.ls.LSResourceResolver)"
    ],
    "javax.management.attribute.tostring": [
        "javax.management.Attribute.toString()"
    ],
    "java.awt.menucomponent.getname": [
        "java.awt.MenuComponent.getName()"
    ],
    "javax.naming.ldap.control.getid": [
        "javax.naming.ldap.Control.getID()"
    ],
    "java.awt.scrollbar.setunitincrement": [
        "java.awt.Scrollbar.setUnitIncrement(int)"
    ],
    "java.time.format.datetimeformatterbuilder.appendtext": [
        "java.time.format.DateTimeFormatterBuilder.appendText(java.time.temporal.TemporalField,,java.lang.String>)",
        "java.time.format.DateTimeFormatterBuilder.appendText(java.time.temporal.TemporalField)",
        "java.time.format.DateTimeFormatterBuilder.appendText(java.time.temporal.TemporalField,java.time.format.TextStyle)"
    ],
    "javax.xml.stream.xmlstreamreader.getname": [
        "javax.xml.stream.XMLStreamReader.getName()"
    ],
    "java.lang.annotation.incompleteannotationexception.annotationtype": [
        "java.lang.annotation.IncompleteAnnotationException.annotationType()"
    ],
    "java.nio.shortbuffer.tostring": [
        "java.nio.ShortBuffer.toString()"
    ],
    "java.awt.keyboardfocusmanager.getvetoablechangelisteners": [
        "java.awt.KeyboardFocusManager.getVetoableChangeListeners(java.lang.String)",
        "java.awt.KeyboardFocusManager.getVetoableChangeListeners()"
    ],
    "java.util.concurrent.locks.stampedlock.tryunlockread": [
        "java.util.concurrent.locks.StampedLock.tryUnlockRead()"
    ],
    "java.awt.geom.line2d.getx2": [
        "java.awt.geom.Line2D.getX2()"
    ],
    "javax.imageio.stream.imageinputstreamimpl.skipbytes": [
        "javax.imageio.stream.ImageInputStreamImpl.skipBytes(long)",
        "javax.imageio.stream.ImageInputStreamImpl.skipBytes(int)"
    ],
    "javax.sql.rowset.cachedrowset.restoreoriginal": [
        "javax.sql.rowset.CachedRowSet.restoreOriginal()"
    ],
    "javax.swing.tree.mutabletreenode.insert": [
        "javax.swing.tree.MutableTreeNode.insert(javax.swing.tree.MutableTreeNode,int)"
    ],
    "javax.management.timer.timermbean.getnotificationtype": [
        "javax.management.timer.TimerMBean.getNotificationType(java.lang.Integer)"
    ],
    "javax.sql.rowsetmetadata.setcolumnname": [
        "javax.sql.RowSetMetaData.setColumnName(int,java.lang.String)"
    ],
    "org.xml.sax.helpers.parseradapter.getdtdhandler": [
        "org.xml.sax.helpers.ParserAdapter.getDTDHandler()"
    ],
    "javax.xml.bind.binder.updatejaxb": [
        "javax.xml.bind.Binder.updateJAXB(javax.xml.bind.Binder)"
    ],
    "org.omg.dynamicany._dynsequencestub.get_wchar": [
        "org.omg.DynamicAny._DynSequenceStub.get_wchar()"
    ],
    "java.time.offsetdatetime.getyear": [
        "java.time.OffsetDateTime.getYear()"
    ],
    "javax.xml.transform.errorlistener.fatalerror": [
        "javax.xml.transform.ErrorListener.fatalError(javax.xml.transform.TransformerException)"
    ],
    "javax.management.openmbean.compositedata.getall": [
        "javax.management.openmbean.CompositeData.getAll(java.lang.String[])"
    ],
    "javax.swing.jframe.setlayeredpane": [
        "javax.swing.JFrame.setLayeredPane(javax.swing.JLayeredPane)"
    ],
    "javax.management.timer.timer.removeallnotifications": [
        "javax.management.timer.Timer.removeAllNotifications()"
    ],
    "javax.imageio.stream.imageinputstream.getbyteorder": [
        "javax.imageio.stream.ImageInputStream.getByteOrder()"
    ],
    "javax.swing.jtable.printmode.values": [
        "javax.swing.JTable.PrintMode.values()"
    ],
    "javax.naming.compoundname.clone": [
        "javax.naming.CompoundName.clone()"
    ],
    "java.util.hashmap.foreach": [
        "java.util.HashMap.forEach(java.util.function.BiConsumer<? super,? super V>)"
    ],
    "java.util.concurrent.completablefuture.obtrudeexception": [
        "java.util.concurrent.CompletableFuture.obtrudeException(java.lang.Throwable)"
    ],
    "java.awt.im.inputmethodrequests.getselectedtext": [
        "java.awt.im.InputMethodRequests.getSelectedText(java.text.AttributedCharacterIterator.Attribute[])"
    ],
    "java.util.concurrent.locks.stampedlock.getreadlockcount": [
        "java.util.concurrent.locks.StampedLock.getReadLockCount()"
    ],
    "java.awt.image.renderable.rendercontext.clone": [
        "java.awt.image.renderable.RenderContext.clone()"
    ],
    "java.applet.applet.getaccessiblecontext": [
        "java.applet.Applet.getAccessibleContext()"
    ],
    "javax.swing.jtextfield.getactions": [
        "javax.swing.JTextField.getActions()"
    ],
    "org.omg.dynamicany._dynarraystub.get_wchar": [
        "org.omg.DynamicAny._DynArrayStub.get_wchar()"
    ],
    "java.nio.file.spi.filesystemprovider.newinputstream": [
        "java.nio.file.spi.FileSystemProvider.newInputStream(java.nio.file.Path,java.nio.file.OpenOption)",
        "java.nio.file.spi.FileSystemProvider.newInputStream(java.nio.file.Path,java.nio.file.OpenOption...)"
    ],
    "java.io.objectoutputstream.writefields": [
        "java.io.ObjectOutputStream.writeFields()"
    ],
    "javax.swing.jinternalframe.isicon": [
        "javax.swing.JInternalFrame.isIcon()"
    ],
    "javax.swing.plaf.basic.basiclabelui.getbaselineresizebehavior": [
        "javax.swing.plaf.basic.BasicLabelUI.getBaselineResizeBehavior(javax.swing.JComponent)"
    ],
    "java.util.primitiveiterator.oflong.next": [
        "java.util.PrimitiveIterator.OfLong.next()"
    ],
    "java.nio.channels.asynchronouschannel.close": [
        "java.nio.channels.AsynchronousChannel.close()"
    ],
    "javax.management.dynamicmbean.invoke": [
        "javax.management.DynamicMBean.invoke(java.lang.String,java.lang.Object[],java.lang.String[])"
    ],
    "javax.management.relation.roleunresolved.tostring": [
        "javax.management.relation.RoleUnresolved.toString()"
    ],
    "java.lang.threadlocal.set": [
        "java.lang.ThreadLocal.set(java.lang.ThreadLocal)",
        "java.lang.ThreadLocal.set(T)"
    ],
    "java.net.urlconnection.getcontentlength": [
        "java.net.URLConnection.getContentLength()"
    ],
    "java.awt.geom.arc2d.double.setanglestart": [
        "java.awt.geom.Arc2D.Double.setAngleStart(double)"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.setdividerlocation": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.setDividerLocation(javax.swing.JSplitPane,int)"
    ],
    "java.rmi.activation.activationexception.getmessage": [
        "java.rmi.activation.ActivationException.getMessage()"
    ],
    "javax.sound.midi.mididevice.info.getname": [
        "javax.sound.midi.MidiDevice.Info.getName()"
    ],
    "javax.swing.plaf.synth.synthlistui.uninstalldefaults": [
        "javax.swing.plaf.synth.SynthListUI.uninstallDefaults()"
    ],
    "java.net.httpcookie.getversion": [
        "java.net.HttpCookie.getVersion()"
    ],
    "java.net.cookiemanager.getcookiestore": [
        "java.net.CookieManager.getCookieStore()"
    ],
    "java.time.month.length": [
        "java.time.Month.length(boolean)"
    ],
    "javax.management.mbeaninfo.clone": [
        "javax.management.MBeanInfo.clone()"
    ],
    "javax.management.monitor.monitor.prederegister": [
        "javax.management.monitor.Monitor.preDeregister()"
    ],
    "java.awt.event.mouseevent.getxonscreen": [
        "java.awt.event.MouseEvent.getXOnScreen()"
    ],
    "javax.swing.jinternalframe.gettitle": [
        "javax.swing.JInternalFrame.getTitle()"
    ],
    "java.time.temporal.temporaladjusters.dayofweekinmonth": [
        "java.time.temporal.TemporalAdjusters.dayOfWeekInMonth(int,java.time.DayOfWeek)"
    ],
    "javax.management.monitor.stringmonitormbean.getstringtocompare": [
        "javax.management.monitor.StringMonitorMBean.getStringToCompare()"
    ],
    "java.lang.management.threadmxbean.dumpallthreads": [
        "java.lang.management.ThreadMXBean.dumpAllThreads(boolean,boolean)"
    ],
    "java.security.signaturespi.enginesetparameter": [
        "java.security.SignatureSpi.engineSetParameter(java.security.spec.AlgorithmParameterSpec)"
    ],
    "javax.xml.bind.jaxbelement.getvalue": [
        "javax.xml.bind.JAXBElement.getValue()"
    ],
    "java.security.spec.dsagenparameterspec.getprimeplength": [
        "java.security.spec.DSAGenParameterSpec.getPrimePLength()"
    ],
    "java.util.logging.logger.isloggable": [
        "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
    ],
    "java.util.stream.stream.of": [
        "java.util.stream.Stream.of(T)",
        "java.util.stream.Stream.of(T...)"
    ],
    "java.util.resourcebundle.getbundle": [
        "java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle.Control)",
        "java.util.ResourceBundle.getBundle(java.lang.String)",
        "java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)",
        "java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale)",
        "java.util.ResourceBundle.getBundle(java.lang.String,java.util.ResourceBundle.Control)",
        "java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale,java.util.ResourceBundle.Control)"
    ],
    "java.awt.toolkit.getproperty": [
        "java.awt.Toolkit.getProperty(java.lang.String,java.lang.String)"
    ],
    "java.awt.graphics2d.setcomposite": [
        "java.awt.Graphics2D.setComposite(java.awt.Composite)"
    ],
    "javax.swing.jtree.dynamicutiltreenode.loadchildren": [
        "javax.swing.JTree.DynamicUtilTreeNode.loadChildren()"
    ],
    "javax.swing.uimanager.getinstalledlookandfeels": [
        "javax.swing.UIManager.getInstalledLookAndFeels()"
    ],
    "org.omg.corba.context.delete_values": [
        "org.omg.CORBA.Context.delete_values(java.lang.String)"
    ],
    "java.net.socket.isclosed": [
        "java.net.Socket.isClosed()"
    ],
    "javax.swing.text.html.stylesheet.setbasefontsize": [
        "javax.swing.text.html.StyleSheet.setBaseFontSize(java.lang.String)",
        "javax.swing.text.html.StyleSheet.setBaseFontSize(int)"
    ],
    "java.text.dateformat.setnumberformat": [
        "java.text.DateFormat.setNumberFormat(java.text.NumberFormat)"
    ],
    "java.util.concurrent.atomic.atomicboolean.tostring": [
        "java.util.concurrent.atomic.AtomicBoolean.toString()"
    ],
    "javax.tools.tool.getsourceversions": [
        "javax.tools.Tool.getSourceVersions()"
    ],
    "javax.management.loading.mlet.setlibrarydirectory": [
        "javax.management.loading.MLet.setLibraryDirectory(java.lang.String)"
    ],
    "javax.sound.midi.sequencer.gettempoinmpq": [
        "javax.sound.midi.Sequencer.getTempoInMPQ()"
    ],
    "java.util.stream.intstream.findfirst": [
        "java.util.stream.IntStream.findFirst()"
    ],
    "javax.swing.text.flowview.getflowspan": [
        "javax.swing.text.FlowView.getFlowSpan(int)"
    ],
    "org.omg.corba.portable.objectimpl._is_local": [
        "org.omg.CORBA.portable.ObjectImpl._is_local()"
    ],
    "java.lang.number.bytevalue": [
        "java.lang.Number.byteValue()"
    ],
    "javax.management.relation.roleunresolvedlist.set": [
        "javax.management.relation.RoleUnresolvedList.set(int,javax.management.relation.RoleUnresolved)"
    ],
    "java.util.calendar.settime": [
        "java.util.Calendar.setTime(java.util.Date)"
    ],
    "java.time.localtime.getnano": [
        "java.time.LocalTime.getNano()"
    ],
    "javax.swing.layoutstyle.componentplacement.valueof": [
        "javax.swing.LayoutStyle.ComponentPlacement.valueOf(java.lang.String)"
    ],
    "javax.sql.rowset.getpassword": [
        "javax.sql.RowSet.getPassword()"
    ],
    "javax.swing.jviewport.getviewrect": [
        "javax.swing.JViewport.getViewRect()"
    ],
    "org.omg.dynamicany._dynenumstub.get_wchar": [
        "org.omg.DynamicAny._DynEnumStub.get_wchar()"
    ],
    "java.security.keypairgeneratorspi.initialize": [
        "java.security.KeyPairGeneratorSpi.initialize(int,java.security.SecureRandom)",
        "java.security.KeyPairGeneratorSpi.initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
    ],
    "java.beans.beancontext.beancontext.removebeancontextmembershiplistener": [
        "java.beans.beancontext.BeanContext.removeBeanContextMembershipListener(java.beans.beancontext.BeanContextMembershipListener)"
    ],
    "java.util.base64.encoder.encode": [
        "java.util.Base64.Encoder.encode(byte[])",
        "java.util.Base64.Encoder.encode(byte[],byte[])"
    ],
    "java.io.randomaccessfile.writelong": [
        "java.io.RandomAccessFile.writeLong(long)"
    ],
    "java.sql.timestamp.from": [
        "java.sql.Timestamp.from(java.time.Instant)"
    ],
    "java.nio.charset.unsupportedcharsetexception.getcharsetname": [
        "java.nio.charset.UnsupportedCharsetException.getCharsetName()"
    ],
    "javax.swing.jcomponent.getmaximumsize": [
        "javax.swing.JComponent.getMaximumSize()"
    ],
    "org.omg.corba.typecode.member_type": [
        "org.omg.CORBA.TypeCode.member_type(int)"
    ],
    "java.security.cert.certstore.getcertificates": [
        "java.security.cert.CertStore.getCertificates(java.security.cert.CertSelector)"
    ],
    "org.w3c.dom.element.getattributenodens": [
        "org.w3c.dom.Element.getAttributeNodeNS(java.lang.String,java.lang.String)"
    ],
    "javax.swing.rowfilter.datefilter": [
        "javax.swing.RowFilter.dateFilter(javax.swing.RowFilter.ComparisonType,java.util.Date,int...)"
    ],
    "org.w3c.dom.node.gettextcontent": [
        "org.w3c.dom.Node.getTextContent()"
    ],
    "java.math.biginteger.clearbit": [
        "java.math.BigInteger.clearBit(int)"
    ],
    "java.awt.geom.path2d.lineto": [
        "java.awt.geom.Path2D.lineTo(double,double)"
    ],
    "java.awt.trayicon.getsize": [
        "java.awt.TrayIcon.getSize()"
    ],
    "javax.naming.binaryrefaddr.tostring": [
        "javax.naming.BinaryRefAddr.toString()"
    ],
    "java.net.cookiestore.add": [
        "java.net.CookieStore.add(java.net.URI,java.net.HttpCookie)"
    ],
    "java.awt.image.renderable.parameterblock.getfloatparameter": [
        "java.awt.image.renderable.ParameterBlock.getFloatParameter(int)"
    ],
    "java.util.locale.builder.clear": [
        "java.util.Locale.Builder.clear()"
    ],
    "javax.swing.plaf.layerui.getpropertychangelisteners": [
        "javax.swing.plaf.LayerUI.getPropertyChangeListeners()",
        "javax.swing.plaf.LayerUI.getPropertyChangeListeners(java.lang.String)"
    ],
    "java.nio.file.files.newinputstream": [
        "java.nio.file.Files.newInputStream(java.nio.file.Path,java.nio.file.OpenOption...)",
        "java.nio.file.Files.newInputStream(java.nio.file.Path,java.nio.file.OpenOption)"
    ],
    "javax.swing.event.documentevent.elementchange.getchildrenremoved": [
        "javax.swing.event.DocumentEvent.ElementChange.getChildrenRemoved()"
    ],
    "javax.sql.rowset.baserowset.setint": [
        "javax.sql.rowset.BaseRowSet.setInt(int,int)",
        "javax.sql.rowset.BaseRowSet.setInt(java.lang.String,int)"
    ],
    "javax.sound.midi.sequencer.getslavesyncmode": [
        "javax.sound.midi.Sequencer.getSlaveSyncMode()"
    ],
    "java.util.jar.attributes.size": [
        "java.util.jar.Attributes.size()"
    ],
    "javax.imageio.spi.imagereaderwriterspi.getformatnames": [
        "javax.imageio.spi.ImageReaderWriterSpi.getFormatNames()"
    ],
    "java.lang.instrument.instrumentation.getobjectsize": [
        "java.lang.instrument.Instrumentation.getObjectSize(java.lang.Object)"
    ],
    "java.io.objectoutputstream.write": [
        "java.io.ObjectOutputStream.write(byte[])",
        "java.io.ObjectOutputStream.write(byte[],int,int)",
        "java.io.ObjectOutputStream.write(int)"
    ],
    "java.sql.sqlinput.readblob": [
        "java.sql.SQLInput.readBlob()"
    ],
    "java.util.concurrent.forkjointask.reinitialize": [
        "java.util.concurrent.ForkJoinTask.reinitialize()"
    ],
    "org.w3c.dom.node.setuserdata": [
        "org.w3c.dom.Node.setUserData(java.lang.String,java.lang.Object,org.w3c.dom.UserDataHandler)"
    ],
    "javax.swing.uimanager.getcolor": [
        "javax.swing.UIManager.getColor(java.lang.Object)",
        "javax.swing.UIManager.getColor(java.lang.Object,java.util.Locale)"
    ],
    "javax.xml.stream.xmlstreamreader.getattributenamespace": [
        "javax.xml.stream.XMLStreamReader.getAttributeNamespace(int)"
    ],
    "java.io.pushbackreader.close": [
        "java.io.PushbackReader.close()"
    ],
    "java.net.inetsocketaddress.getport": [
        "java.net.InetSocketAddress.getPort()"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.canpathsbeadded": [
        "javax.swing.tree.DefaultTreeSelectionModel.canPathsBeAdded(javax.swing.tree.TreePath[])"
    ],
    "java.time.chrono.hijrahdate.withvariant": [
        "java.time.chrono.HijrahDate.withVariant(java.time.chrono.HijrahChronology)"
    ],
    "java.lang.boolean.logicalxor": [
        "java.lang.Boolean.logicalXor(boolean,boolean)"
    ],
    "org.omg.dynamicany._dynsequencestub.get_any": [
        "org.omg.DynamicAny._DynSequenceStub.get_any()"
    ],
    "org.omg.corba.orb.create_operation_list": [
        "org.omg.CORBA.ORB.create_operation_list(org.omg.CORBA.Object)"
    ],
    "java.net.url.getprotocol": [
        "java.net.URL.getProtocol()"
    ],
    "java.time.offsetdatetime.toepochsecond": [
        "java.time.OffsetDateTime.toEpochSecond()"
    ],
    "javax.sound.midi.instrument.getpatch": [
        "javax.sound.midi.Instrument.getPatch()"
    ],
    "java.util.calendar.internalget": [
        "java.util.Calendar.internalGet(int)"
    ],
    "javax.swing.listselectionmodel.getselectionmode": [
        "javax.swing.ListSelectionModel.getSelectionMode()"
    ],
    "javax.xml.bind.datatypeconverter.printunsignedint": [
        "javax.xml.bind.DatatypeConverter.printUnsignedInt(long)"
    ],
    "javax.sound.midi.sequencer.getmicrosecondposition": [
        "javax.sound.midi.Sequencer.getMicrosecondPosition()"
    ],
    "java.lang.annotation.retentionpolicy.values": [
        "java.lang.annotation.RetentionPolicy.values()"
    ],
    "java.util.calendar.gettimezone": [
        "java.util.Calendar.getTimeZone()"
    ],
    "java.awt.scrollpaneadjustable.setminimum": [
        "java.awt.ScrollPaneAdjustable.setMinimum(int)"
    ],
    "javax.security.auth.kerberos.keytab.getkeys": [
        "javax.security.auth.kerberos.KeyTab.getKeys(javax.security.auth.kerberos.KerberosPrincipal)"
    ],
    "javax.swing.jslider.setui": [
        "javax.swing.JSlider.setUI(javax.swing.plaf.SliderUI)"
    ],
    "javax.swing.text.editorkit.clone": [
        "javax.swing.text.EditorKit.clone()"
    ],
    "javax.swing.tree.defaultmutabletreenode.getparent": [
        "javax.swing.tree.DefaultMutableTreeNode.getParent()"
    ],
    "org.omg.dynamicany.dynanyoperations.get_wchar": [
        "org.omg.DynamicAny.DynAnyOperations.get_wchar()"
    ],
    "javax.swing.text.html.stylesheet.getforeground": [
        "javax.swing.text.html.StyleSheet.getForeground(javax.swing.text.AttributeSet)"
    ],
    "org.ietf.jgss.gssexception.setminor": [
        "org.ietf.jgss.GSSException.setMinor(int,java.lang.String)"
    ],
    "javax.swing.desktopmanager.closeframe": [
        "javax.swing.DesktopManager.closeFrame(javax.swing.JInternalFrame)"
    ],
    "java.time.format.datetimeformatter.getzone": [
        "java.time.format.DateTimeFormatter.getZone()"
    ],
    "javax.swing.jscrollbar.setunitincrement": [
        "javax.swing.JScrollBar.setUnitIncrement(int)"
    ],
    "java.lang.invoke.methodhandleproxies.wrapperinstancetarget": [
        "java.lang.invoke.MethodHandleProxies.wrapperInstanceTarget(java.lang.Object)"
    ],
    "javax.swing.plaf.multi.multitabbedpaneui.installui": [
        "javax.swing.plaf.multi.MultiTabbedPaneUI.installUI(javax.swing.JComponent)"
    ],
    "java.beans.beancontext.beancontextcontainerproxy.getcontainer": [
        "java.beans.beancontext.BeanContextContainerProxy.getContainer()"
    ],
    "org.omg.portableserver.poaoperations.create_id_assignment_policy": [
        "org.omg.PortableServer.POAOperations.create_id_assignment_policy(org.omg.PortableServer.IdAssignmentPolicyValue)"
    ],
    "javax.swing.filechooser.filesystemview.getsystemicon": [
        "javax.swing.filechooser.FileSystemView.getSystemIcon(java.io.File)"
    ],
    "java.nio.channels.channels.newoutputstream": [
        "java.nio.channels.Channels.newOutputStream(java.nio.channels.WritableByteChannel)",
        "java.nio.channels.Channels.newOutputStream(java.nio.channels.AsynchronousByteChannel)"
    ],
    "java.net.urlclassloader.getpermissions": [
        "java.net.URLClassLoader.getPermissions(java.security.CodeSource)"
    ],
    "javax.swing.plaf.basic.basictoolbarui.createfloatingwindow": [
        "javax.swing.plaf.basic.BasicToolBarUI.createFloatingWindow(javax.swing.JToolBar)"
    ],
    "org.omg.dynamicany._dynarraystub.get_ushort": [
        "org.omg.DynamicAny._DynArrayStub.get_ushort()"
    ],
    "java.sql.drivermanager.getlogintimeout": [
        "java.sql.DriverManager.getLoginTimeout()"
    ],
    "javax.swing.jfilechooser.getchoosablefilefilters": [
        "javax.swing.JFileChooser.getChoosableFileFilters()"
    ],
    "javax.swing.plaf.synth.synthseparatorui.getmaximumsize": [
        "javax.swing.plaf.synth.SynthSeparatorUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "javax.swing.uidefaults.addresourcebundle": [
        "javax.swing.UIDefaults.addResourceBundle(java.lang.String)"
    ],
    "javax.management.relation.relationservice.getreferencedmbeans": [
        "javax.management.relation.RelationService.getReferencedMBeans(java.lang.String)"
    ],
    "java.awt.geom.affinetransform.tostring": [
        "java.awt.geom.AffineTransform.toString()"
    ],
    "java.awt.image.indexcolormodel.createcompatiblesamplemodel": [
        "java.awt.image.IndexColorModel.createCompatibleSampleModel(int,int)"
    ],
    "java.beans.propertyeditor.removepropertychangelistener": [
        "java.beans.PropertyEditor.removePropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "javax.xml.bind.datatypeconverterinterface.printanysimpletype": [
        "javax.xml.bind.DatatypeConverterInterface.printAnySimpleType(java.lang.String)"
    ],
    "javax.swing.plaf.multi.multiseparatorui.paint": [
        "javax.swing.plaf.multi.MultiSeparatorUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.io.printwriter.format": [
        "java.io.PrintWriter.format(java.util.Locale,java.lang.String,java.lang.Object)",
        "java.io.PrintWriter.format(java.lang.String,java.lang.Object...)",
        "java.io.PrintWriter.format(java.util.Locale,java.lang.String,java.lang.Object...)",
        "java.io.PrintWriter.format(java.lang.String,java.lang.Object)"
    ],
    "org.w3c.dom.document.getstricterrorchecking": [
        "org.w3c.dom.Document.getStrictErrorChecking()"
    ],
    "java.security.digestoutputstream.getmessagedigest": [
        "java.security.DigestOutputStream.getMessageDigest()"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.getbaseline": [
        "javax.swing.plaf.basic.BasicComboBoxUI.getBaseline(javax.swing.JComponent,int,int)"
    ],
    "javax.swing.plaf.basic.basicmenuitemui.painttext": [
        "javax.swing.plaf.basic.BasicMenuItemUI.paintText(java.awt.Graphics,javax.swing.JMenuItem,java.awt.Rectangle,java.lang.String)"
    ],
    "java.awt.keyboardfocusmanager.setglobalfocusedwindow": [
        "java.awt.KeyboardFocusManager.setGlobalFocusedWindow(java.awt.Window)"
    ],
    "java.awt.focustraversalpolicy.getdefaultcomponent": [
        "java.awt.FocusTraversalPolicy.getDefaultComponent(java.awt.Container)"
    ],
    "java.awt.component.imageupdate": [
        "java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"
    ],
    "java.awt.geom.point2d.getx": [
        "java.awt.geom.Point2D.getX()"
    ],
    "java.awt.font.textmeasurer.deletechar": [
        "java.awt.font.TextMeasurer.deleteChar(java.text.AttributedCharacterIterator,int)"
    ],
    "javax.management.monitor.countermonitor.start": [
        "javax.management.monitor.CounterMonitor.start()"
    ],
    "java.util.calendar.toinstant": [
        "java.util.Calendar.toInstant()"
    ],
    "javax.swing.jtable.getintercellspacing": [
        "javax.swing.JTable.getIntercellSpacing()"
    ],
    "java.util.function.binaryoperator.maxby": [
        "java.util.function.BinaryOperator.maxBy(java.util.Comparator<? super T>)"
    ],
    "javax.sound.sampled.dataline.info.tostring": [
        "javax.sound.sampled.DataLine.Info.toString()"
    ],
    "java.awt.image.raster.createinterleavedraster": [
        "java.awt.image.Raster.createInterleavedRaster(int,int,int,int,int,int[],java.awt.Point)",
        "java.awt.image.Raster.createInterleavedRaster(int,int,int,int,java.awt.Point)",
        "java.awt.image.Raster.createInterleavedRaster(java.awt.image.DataBuffer,int,int,int,int,int[],java.awt.Point)"
    ],
    "java.awt.itemselectable.removeitemlistener": [
        "java.awt.ItemSelectable.removeItemListener(java.awt.event.ItemListener)"
    ],
    "java.awt.image.bandedsamplemodel.getsamples": [
        "java.awt.image.BandedSampleModel.getSamples(int,int,int,int,int,int[],java.awt.image.DataBuffer)"
    ],
    "java.sql.databasemetadata.supportsmultipleopenresults": [
        "java.sql.DatabaseMetaData.supportsMultipleOpenResults()"
    ],
    "java.io.objectoutputstream.annotateproxyclass": [
        "java.io.ObjectOutputStream.annotateProxyClass(java.lang.Class<?>)"
    ],
    "java.time.temporal.temporalfield.range": [
        "java.time.temporal.TemporalField.range()"
    ],
    "javax.xml.soap.soapheaderelement.getrole": [
        "javax.xml.soap.SOAPHeaderElement.getRole()"
    ],
    "javax.naming.compositename.getsuffix": [
        "javax.naming.CompositeName.getSuffix(int)"
    ],
    "javax.swing.border.compoundborder.paintborder": [
        "javax.swing.border.CompoundBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)"
    ],
    "java.util.concurrent.completionstage.tocompletablefuture": [
        "java.util.concurrent.CompletionStage.toCompletableFuture()"
    ],
    "javax.management.modelmbean.requiredmodelmbean.prederegister": [
        "javax.management.modelmbean.RequiredModelMBean.preDeregister()"
    ],
    "javax.swing.jeditorpane.scrolltoreference": [
        "javax.swing.JEditorPane.scrollToReference(java.lang.String)"
    ],
    "java.util.stream.intstream.map": [
        "java.util.stream.IntStream.map(java.util.function.IntUnaryOperator)"
    ],
    "java.awt.image.samplemodel.createcompatiblesamplemodel": [
        "java.awt.image.SampleModel.createCompatibleSampleModel(int,int)"
    ],
    "org.omg.corba.floatholder._type": [
        "org.omg.CORBA.FloatHolder._type()"
    ],
    "java.sql.resultset.getcharacterstream": [
        "java.sql.ResultSet.getCharacterStream(java.lang.String)",
        "java.sql.ResultSet.getCharacterStream(int)"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.getwriteholdcount": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.getWriteHoldCount()"
    ],
    "javax.swing.table.tablestringconverter.tostring": [
        "javax.swing.table.TableStringConverter.toString(javax.swing.table.TableModel,int,int)"
    ],
    "java.beans.propertydescriptor.setpropertyeditorclass": [
        "java.beans.PropertyDescriptor.setPropertyEditorClass(java.lang.Class<?>)"
    ],
    "java.awt.pageattributes.hashcode": [
        "java.awt.PageAttributes.hashCode()"
    ],
    "org.xml.sax.attributes.getindex": [
        "org.xml.sax.Attributes.getIndex(java.lang.String,java.lang.String)"
    ],
    "java.util.stream.basestream.iterator": [
        "java.util.stream.BaseStream.iterator()"
    ],
    "java.awt.geom.path2d.double.moveto": [
        "java.awt.geom.Path2D.Double.moveTo(double,double)"
    ],
    "javax.swing.abstractbutton.getactionlisteners": [
        "javax.swing.AbstractButton.getActionListeners()"
    ],
    "javax.swing.text.html.formview.getmaximumspan": [
        "javax.swing.text.html.FormView.getMaximumSpan(int)"
    ],
    "javax.security.auth.kerberos.delegationpermission.hashcode": [
        "javax.security.auth.kerberos.DelegationPermission.hashCode()"
    ],
    "java.lang.reflect.executable.getannotatedreceivertype": [
        "java.lang.reflect.Executable.getAnnotatedReceiverType()"
    ],
    "javax.swing.plaf.synth.synthtreeui.propertychange": [
        "javax.swing.plaf.synth.SynthTreeUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintpopupmenubackground": [
        "javax.swing.plaf.synth.SynthPainter.paintPopupMenuBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.text.html.parser.parser.parsedtdmarkup": [
        "javax.swing.text.html.parser.Parser.parseDTDMarkup()"
    ],
    "javax.xml.ws.service.mode.valueof": [
        "javax.xml.ws.Service.Mode.valueOf(java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthtreeui.painthorizontalline": [
        "javax.swing.plaf.synth.SynthTreeUI.paintHorizontalLine(java.awt.Graphics,javax.swing.JComponent,int,int,int)"
    ],
    "javax.accessibility.accessibletext.getbeforeindex": [
        "javax.accessibility.AccessibleText.getBeforeIndex(int,int)"
    ],
    "java.util.stream.stream.min": [
        "java.util.stream.Stream.min(java.util.Comparator<? super java.util.stream.Stream>)",
        "java.util.stream.Stream.min(java.util.Comparator<? super T>)"
    ],
    "javax.lang.model.util.types.getprimitivetype": [
        "javax.lang.model.util.Types.getPrimitiveType(javax.lang.model.type.TypeKind)"
    ],
    "javax.swing.jspinner.addchangelistener": [
        "javax.swing.JSpinner.addChangeListener(javax.swing.event.ChangeListener)"
    ],
    "java.nio.file.paths.get": [
        "java.nio.file.Paths.get(java.lang.String,java.lang.String)",
        "java.nio.file.Paths.get(java.lang.String,java.lang.String...)",
        "java.nio.file.Paths.get(java.net.URI)"
    ],
    "java.util.jar.attributes.values": [
        "java.util.jar.Attributes.values()"
    ],
    "java.util.calendar.hashcode": [
        "java.util.Calendar.hashCode()"
    ],
    "org.omg.dynamicany.dynanyoperations.insert_double": [
        "org.omg.DynamicAny.DynAnyOperations.insert_double(double)"
    ],
    "java.awt.dnd.droptargetdragevent.rejectdrag": [
        "java.awt.dnd.DropTargetDragEvent.rejectDrag()"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.issearchable": [
        "javax.sql.rowset.RowSetMetaDataImpl.isSearchable(int)"
    ],
    "javax.swing.plaf.basic.basictreeui.setrootvisible": [
        "javax.swing.plaf.basic.BasicTreeUI.setRootVisible(boolean)"
    ],
    "javax.sql.rowset.baserowset.setbigdecimal": [
        "javax.sql.rowset.BaseRowSet.setBigDecimal(int,java.math.BigDecimal)",
        "javax.sql.rowset.BaseRowSet.setBigDecimal(java.lang.String,java.math.BigDecimal)"
    ],
    "java.awt.gridlayout.getvgap": [
        "java.awt.GridLayout.getVgap()"
    ],
    "java.security.keyfactoryspi.enginetranslatekey": [
        "java.security.KeyFactorySpi.engineTranslateKey(java.security.Key)"
    ],
    "java.util.abstractqueue.element": [
        "java.util.AbstractQueue.element()"
    ],
    "org.omg.corba_2_3.portable.inputstream.read_value": [
        "org.omg.CORBA_2_3.portable.InputStream.read_value(java.io.Serializable)",
        "org.omg.CORBA_2_3.portable.InputStream.read_value()",
        "org.omg.CORBA_2_3.portable.InputStream.read_value(java.lang.String)",
        "org.omg.CORBA_2_3.portable.InputStream.read_value(java.lang.Class)",
        "org.omg.CORBA_2_3.portable.InputStream.read_value(org.omg.CORBA.portable.BoxedValueHelper)"
    ],
    "java.awt.gridbaglayout.getlayoutweights": [
        "java.awt.GridBagLayout.getLayoutWeights()"
    ],
    "javax.management.modelmbean.modelmbeanoperationinfo.tostring": [
        "javax.management.modelmbean.ModelMBeanOperationInfo.toString()"
    ],
    "java.awt.image.volatileimage.getcapabilities": [
        "java.awt.image.VolatileImage.getCapabilities()"
    ],
    "java.util.concurrent.locks.abstractqueuedlongsynchronizer.getqueuelength": [
        "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getQueueLength()"
    ],
    "javax.swing.spinnerlistmodel.setvalue": [
        "javax.swing.SpinnerListModel.setValue(java.lang.Object)"
    ],
    "java.lang.threadlocal.initialvalue": [
        "java.lang.ThreadLocal.initialValue()"
    ],
    "java.util.spliterators.abstractdoublespliterator.trysplit": [
        "java.util.Spliterators.AbstractDoubleSpliterator.trySplit()"
    ],
    "java.awt.color.icc_profilergb.getmediawhitepoint": [
        "java.awt.color.ICC_ProfileRGB.getMediaWhitePoint()"
    ],
    "java.text.stringcharacteriterator.setindex": [
        "java.text.StringCharacterIterator.setIndex(int)"
    ],
    "java.lang.reflect.method.getparametertypes": [
        "java.lang.reflect.Method.getParameterTypes()"
    ],
    "java.util.logging.memoryhandler.push": [
        "java.util.logging.MemoryHandler.push()"
    ],
    "javax.sql.rowset.baserowset.getusername": [
        "javax.sql.rowset.BaseRowSet.getUsername()"
    ],
    "javax.naming.directory.dircontext.getschema": [
        "javax.naming.directory.DirContext.getSchema(javax.naming.Name)",
        "javax.naming.directory.DirContext.getSchema(java.lang.String)"
    ],
    "javax.swing.defaultlistselectionmodel.setselectioninterval": [
        "javax.swing.DefaultListSelectionModel.setSelectionInterval(int,int)"
    ],
    "javax.activation.commandinfo.getcommandname": [
        "javax.activation.CommandInfo.getCommandName()"
    ],
    "javax.swing.layoutstyle.getcontainergap": [
        "javax.swing.LayoutStyle.getContainerGap(javax.swing.JComponent,int,java.awt.Container)"
    ],
    "java.awt.adjustable.getmaximum": [
        "java.awt.Adjustable.getMaximum()"
    ],
    "java.util.concurrent.completablefuture.accepteither": [
        "java.util.concurrent.CompletableFuture.acceptEither(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Consumer<? super T>)"
    ],
    "java.util.treeset.clone": [
        "java.util.TreeSet.clone()"
    ],
    "java.lang.invoke.methodhandles.lookup.in": [
        "java.lang.invoke.MethodHandles.Lookup.in(java.lang.Class<?>)"
    ],
    "java.util.regex.matchresult.group": [
        "java.util.regex.MatchResult.group()",
        "java.util.regex.MatchResult.group(int)"
    ],
    "javax.swing.jeditorpane.setpage": [
        "javax.swing.JEditorPane.setPage(java.lang.String)",
        "javax.swing.JEditorPane.setPage(java.net.URL)"
    ],
    "java.math.bigdecimal.tobiginteger": [
        "java.math.BigDecimal.toBigInteger()"
    ],
    "javax.swing.jcombobox.removeitemat": [
        "javax.swing.JComboBox.removeItemAt(int)"
    ],
    "java.time.zone.zoneoffsettransitionrule.timedefinition.valueof": [
        "java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.valueOf(java.lang.String)"
    ],
    "javax.swing.text.glyphview.gettext": [
        "javax.swing.text.GlyphView.getText(int,int)"
    ],
    "javax.management.timer.timermbean.removenotifications": [
        "javax.management.timer.TimerMBean.removeNotifications(java.lang.String)"
    ],
    "javax.activation.datahandler.getdatasource": [
        "javax.activation.DataHandler.getDataSource()"
    ],
    "java.beans.beancontext.beancontextsupport.add": [
        "java.beans.beancontext.BeanContextSupport.add(java.lang.Object)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintprogressbarforeground": [
        "javax.swing.plaf.synth.SynthPainter.paintProgressBarForeground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)"
    ],
    "javax.print.attribute.standard.mediaprintablearea.getheight": [
        "javax.print.attribute.standard.MediaPrintableArea.getHeight(int)"
    ],
    "java.lang.package.getname": [
        "java.lang.Package.getName()"
    ],
    "javax.swing.jpopupmenu.paramstring": [
        "javax.swing.JPopupMenu.paramString()"
    ],
    "org.xml.sax.xmlfilter.setparent": [
        "org.xml.sax.XMLFilter.setParent(org.xml.sax.XMLReader)"
    ],
    "javax.xml.soap.name.getlocalname": [
        "javax.xml.soap.Name.getLocalName()"
    ],
    "java.lang.reflect.constructor.equals": [
        "java.lang.reflect.Constructor.equals(java.lang.Object)"
    ],
    "javax.management.objectinstance.getclassname": [
        "javax.management.ObjectInstance.getClassName()"
    ],
    "java.security.cert.x509certselector.getsubjectalternativenames": [
        "java.security.cert.X509CertSelector.getSubjectAlternativeNames()"
    ],
    "javax.script.scriptenginefactory.getoutputstatement": [
        "javax.script.ScriptEngineFactory.getOutputStatement(java.lang.String)"
    ],
    "javax.sql.rowset.spi.syncfactory.setjndicontext": [
        "javax.sql.rowset.spi.SyncFactory.setJNDIContext(javax.naming.Context)"
    ],
    "javax.management.monitor.monitornotification.getobservedobject": [
        "javax.management.monitor.MonitorNotification.getObservedObject()"
    ],
    "javax.swing.jtree.expandpath": [
        "javax.swing.JTree.expandPath(javax.swing.tree.TreePath)"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readbinarystream": [
        "javax.sql.rowset.serial.SQLInputImpl.readBinaryStream()"
    ],
    "javax.swing.jtoolbar.separator.getpreferredsize": [
        "javax.swing.JToolBar.Separator.getPreferredSize()"
    ],
    "javax.swing.plaf.nimbus.nimbusstyle.getforegroundpainter": [
        "javax.swing.plaf.nimbus.NimbusStyle.getForegroundPainter(javax.swing.plaf.synth.SynthContext)"
    ],
    "javax.swing.plaf.layerui.processmousewheelevent": [
        "javax.swing.plaf.LayerUI.processMouseWheelEvent(java.awt.event.MouseWheelEvent,javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)"
    ],
    "javax.imageio.event.iioreadwarninglistener.warningoccurred": [
        "javax.imageio.event.IIOReadWarningListener.warningOccurred(javax.imageio.ImageReader,java.lang.String)"
    ],
    "javax.sql.rowset.setcommand": [
        "javax.sql.RowSet.setCommand(java.lang.String)"
    ],
    "java.lang.reflect.field.setfloat": [
        "java.lang.reflect.Field.setFloat(java.lang.Object,float)"
    ],
    "java.awt.image.rasterop.getpoint2d": [
        "java.awt.image.RasterOp.getPoint2D(java.awt.geom.Point2D,java.awt.geom.Point2D)"
    ],
    "java.util.zip.deflater.setstrategy": [
        "java.util.zip.Deflater.setStrategy(int)"
    ],
    "java.awt.datatransfer.clipboard.setcontents": [
        "java.awt.datatransfer.Clipboard.setContents(java.awt.datatransfer.Transferable,java.awt.datatransfer.ClipboardOwner)"
    ],
    "java.text.dateformat.parseobject": [
        "java.text.DateFormat.parseObject(java.lang.String,java.text.ParsePosition)"
    ],
    "java.util.stream.doublestream.findfirst": [
        "java.util.stream.DoubleStream.findFirst()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintmenubarborder": [
        "javax.swing.plaf.synth.SynthPainter.paintMenuBarBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.lang.throwable.getlocalizedmessage": [
        "java.lang.Throwable.getLocalizedMessage()"
    ],
    "javax.swing.plaf.nimbus.nimbuslookandfeel.shouldupdatestyleonevent": [
        "javax.swing.plaf.nimbus.NimbusLookAndFeel.shouldUpdateStyleOnEvent(java.beans.PropertyChangeEvent)"
    ],
    "java.security.keypairgenerator.getinstance": [
        "java.security.KeyPairGenerator.getInstance(java.lang.String,java.lang.String)",
        "java.security.KeyPairGenerator.getInstance(java.lang.String)",
        "java.security.KeyPairGenerator.getInstance(java.lang.String,java.security.Provider)"
    ],
    "javax.swing.japplet.getjmenubar": [
        "javax.swing.JApplet.getJMenuBar()"
    ],
    "javax.swing.plaf.multi.multitableui.createui": [
        "javax.swing.plaf.multi.MultiTableUI.createUI(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.nimbus.nimbusstyle.getcolorforstate": [
        "javax.swing.plaf.nimbus.NimbusStyle.getColorForState(javax.swing.plaf.synth.SynthContext,javax.swing.plaf.synth.ColorType)"
    ],
    "java.security.interfaces.rsaprivatekey.getprivateexponent": [
        "java.security.interfaces.RSAPrivateKey.getPrivateExponent()"
    ],
    "javax.management.remote.jmxconnector.getmbeanserverconnection": [
        "javax.management.remote.JMXConnector.getMBeanServerConnection()",
        "javax.management.remote.JMXConnector.getMBeanServerConnection(javax.security.auth.Subject)"
    ],
    "javax.swing.tree.fixedheightlayoutcache.getrowcount": [
        "javax.swing.tree.FixedHeightLayoutCache.getRowCount()"
    ],
    "java.awt.image.samplemodel.getnumbands": [
        "java.awt.image.SampleModel.getNumBands()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintscrollbarborder": [
        "javax.swing.plaf.synth.SynthPainter.paintScrollBarBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",
        "javax.swing.plaf.synth.SynthPainter.paintScrollBarBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.management.mbeanoperationinfo.clone": [
        "javax.management.MBeanOperationInfo.clone()"
    ],
    "javax.swing.jscrollbar.getvalueisadjusting": [
        "javax.swing.JScrollBar.getValueIsAdjusting()"
    ],
    "java.lang.reflect.constructor.newinstance": [
        "java.lang.reflect.Constructor.newInstance(java.lang.Object)",
        "java.lang.reflect.Constructor.newInstance(java.lang.Object...)"
    ],
    "javax.swing.plaf.synth.synthstyle.getinsets": [
        "javax.swing.plaf.synth.SynthStyle.getInsets(javax.swing.plaf.synth.SynthContext,java.awt.Insets)"
    ],
    "javax.imageio.imagereader.getlocale": [
        "javax.imageio.ImageReader.getLocale()"
    ],
    "java.beans.propertychangelistener.propertychange": [
        "java.beans.PropertyChangeListener.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "java.time.zone.zoneoffsettransition.getoffsetbefore": [
        "java.time.zone.ZoneOffsetTransition.getOffsetBefore()"
    ],
    "java.lang.reflect.undeclaredthrowableexception.getundeclaredthrowable": [
        "java.lang.reflect.UndeclaredThrowableException.getUndeclaredThrowable()"
    ],
    "java.util.concurrent.recursivetask.compute": [
        "java.util.concurrent.RecursiveTask.compute()"
    ],
    "javax.swing.plaf.layerui.removepropertychangelistener": [
        "javax.swing.plaf.LayerUI.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",
        "javax.swing.plaf.LayerUI.removePropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "javax.net.ssl.sslengine.setneedclientauth": [
        "javax.net.ssl.SSLEngine.setNeedClientAuth(boolean)"
    ],
    "org.omg.dynamicany._dynarraystub.get_ulonglong": [
        "org.omg.DynamicAny._DynArrayStub.get_ulonglong()"
    ],
    "java.security.keystorespi.enginegetcertificate": [
        "java.security.KeyStoreSpi.engineGetCertificate(java.lang.String)"
    ],
    "javax.xml.crypto.dsig.transform.transform": [
        "javax.xml.crypto.dsig.Transform.transform(javax.xml.crypto.Data,javax.xml.crypto.XMLCryptoContext,java.io.OutputStream)",
        "javax.xml.crypto.dsig.Transform.transform(javax.xml.crypto.Data,javax.xml.crypto.XMLCryptoContext)"
    ],
    "javax.swing.text.boxview.getoffset": [
        "javax.swing.text.BoxView.getOffset(int,int)"
    ],
    "java.awt.textfield.getaccessiblecontext": [
        "java.awt.TextField.getAccessibleContext()"
    ],
    "org.omg.corba.object._set_policy_override": [
        "org.omg.CORBA.Object._set_policy_override(org.omg.CORBA.Policy[],org.omg.CORBA.SetOverrideType)"
    ],
    "javax.swing.abstractbutton.addimpl": [
        "javax.swing.AbstractButton.addImpl(java.awt.Component,java.lang.Object,int)"
    ],
    "java.nio.file.filesystemexception.getreason": [
        "java.nio.file.FileSystemException.getReason()"
    ],
    "javax.swing.jtooltip.gettiptext": [
        "javax.swing.JToolTip.getTipText()"
    ],
    "java.sql.drivermanager.setlogintimeout": [
        "java.sql.DriverManager.setLoginTimeout(int)"
    ],
    "java.util.deque.offerlast": [
        "java.util.Deque.offerLast(E)",
        "java.util.Deque.offerLast(java.util.Deque)"
    ],
    "java.awt.image.renderable.rendercontext.preconcatenatetransform": [
        "java.awt.image.renderable.RenderContext.preConcatenateTransform(java.awt.geom.AffineTransform)"
    ],
    "java.time.zoneddatetime.tooffsetdatetime": [
        "java.time.ZonedDateTime.toOffsetDateTime()"
    ],
    "javax.swing.spinnernumbermodel.setvalue": [
        "javax.swing.SpinnerNumberModel.setValue(java.lang.Object)"
    ],
    "java.time.format.datetimeformatter.withdecimalstyle": [
        "java.time.format.DateTimeFormatter.withDecimalStyle(java.time.format.DecimalStyle)"
    ],
    "javax.naming.reference.size": [
        "javax.naming.Reference.size()"
    ],
    "java.util.logging.memoryhandler.isloggable": [
        "java.util.logging.MemoryHandler.isLoggable(java.util.logging.LogRecord)"
    ],
    "javax.xml.bind.jaxbexception.geterrorcode": [
        "javax.xml.bind.JAXBException.getErrorCode()"
    ],
    "org.omg.dynamicany._dynvaluestub.get_float": [
        "org.omg.DynamicAny._DynValueStub.get_float()"
    ],
    "javax.swing.jsplitpane.getresizeweight": [
        "javax.swing.JSplitPane.getResizeWeight()"
    ],
    "javax.swing.plaf.multi.multipopupmenuui.ispopuptrigger": [
        "javax.swing.plaf.multi.MultiPopupMenuUI.isPopupTrigger(java.awt.event.MouseEvent)"
    ],
    "java.sql.resultset.updateblob": [
        "java.sql.ResultSet.updateBlob(int,java.sql.Blob)",
        "java.sql.ResultSet.updateBlob(java.lang.String,java.io.InputStream)",
        "java.sql.ResultSet.updateBlob(java.lang.String,java.io.InputStream,long)",
        "java.sql.ResultSet.updateBlob(java.lang.String,java.sql.Blob)",
        "java.sql.ResultSet.updateBlob(int,java.io.InputStream,long)",
        "java.sql.ResultSet.updateBlob(int,java.io.InputStream)"
    ],
    "java.time.chrono.chronolocaldate.lengthofmonth": [
        "java.time.chrono.ChronoLocalDate.lengthOfMonth()"
    ],
    "javax.swing.plaf.basic.basictableheaderui.installdefaults": [
        "javax.swing.plaf.basic.BasicTableHeaderUI.installDefaults()"
    ],
    "java.text.dateformat.getdatetimeinstance": [
        "java.text.DateFormat.getDateTimeInstance(int,int)",
        "java.text.DateFormat.getDateTimeInstance(int,int,java.util.Locale)",
        "java.text.DateFormat.getDateTimeInstance()"
    ],
    "java.awt.image.bufferedimage.getdata": [
        "java.awt.image.BufferedImage.getData(java.awt.Rectangle)",
        "java.awt.image.BufferedImage.getData()"
    ],
    "java.awt.trayicon.displaymessage": [
        "java.awt.TrayIcon.displayMessage(java.lang.String,java.lang.String,java.awt.TrayIcon.MessageType)"
    ],
    "javax.swing.text.utilities.getpositionbelow": [
        "javax.swing.text.Utilities.getPositionBelow(javax.swing.text.JTextComponent,int,int)"
    ],
    "java.util.simpletimezone.tostring": [
        "java.util.SimpleTimeZone.toString()"
    ],
    "java.time.zone.zonerules.previoustransition": [
        "java.time.zone.ZoneRules.previousTransition(java.time.Instant)"
    ],
    "javax.swing.tree.variableheightlayoutcache.getrowcount": [
        "javax.swing.tree.VariableHeightLayoutCache.getRowCount()"
    ],
    "java.net.httpcookie.tostring": [
        "java.net.HttpCookie.toString()"
    ],
    "javax.swing.celleditor.getcelleditorvalue": [
        "javax.swing.CellEditor.getCellEditorValue()"
    ],
    "javax.swing.spinnernumbermodel.setmaximum": [
        "javax.swing.SpinnerNumberModel.setMaximum(java.lang.Comparable)"
    ],
    "javax.swing.text.gapcontent.length": [
        "javax.swing.text.GapContent.length()"
    ],
    "java.util.scanner.delimiter": [
        "java.util.Scanner.delimiter()"
    ],
    "javax.accessibility.accessiblerelationset.size": [
        "javax.accessibility.AccessibleRelationSet.size()"
    ],
    "java.io.fileinputstream.read": [
        "java.io.FileInputStream.read()",
        "java.io.FileInputStream.read(byte[],int,int)"
    ],
    "java.lang.management.managementfactory.getplatformmanagementinterfaces": [
        "java.lang.management.ManagementFactory.getPlatformManagementInterfaces()"
    ],
    "java.util.concurrent.atomic.atomicmarkablereference.set": [
        "java.util.concurrent.atomic.AtomicMarkableReference.set(java.util.concurrent.atomic.AtomicMarkableReference,boolean)",
        "java.util.concurrent.atomic.AtomicMarkableReference.set(V,boolean)"
    ],
    "javax.swing.plaf.metal.metaltheme.getcontrolinfo": [
        "javax.swing.plaf.metal.MetalTheme.getControlInfo()"
    ],
    "javax.swing.undo.abstractundoableedit.tostring": [
        "javax.swing.undo.AbstractUndoableEdit.toString()"
    ],
    "javax.swing.event.tablecolumnmodelevent.getfromindex": [
        "javax.swing.event.TableColumnModelEvent.getFromIndex()"
    ],
    "java.awt.list.getselectedindexes": [
        "java.awt.List.getSelectedIndexes()"
    ],
    "javax.swing.jscrollpane.createverticalscrollbar": [
        "javax.swing.JScrollPane.createVerticalScrollBar()"
    ],
    "java.awt.defaultkeyboardfocusmanager.downfocuscycle": [
        "java.awt.DefaultKeyboardFocusManager.downFocusCycle(java.awt.Container)"
    ],
    "javax.swing.plaf.multi.multiinternalframeui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiInternalFrameUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "javax.management.relation.relationsupport.getrelationtypename": [
        "javax.management.relation.RelationSupport.getRelationTypeName()"
    ],
    "java.awt.eventqueue.invokeandwait": [
        "java.awt.EventQueue.invokeAndWait(java.lang.Runnable)"
    ],
    "javax.security.sasl.saslserver.getnegotiatedproperty": [
        "javax.security.sasl.SaslServer.getNegotiatedProperty(java.lang.String)"
    ],
    "javax.swing.scrollpanelayout.setverticalscrollbarpolicy": [
        "javax.swing.ScrollPaneLayout.setVerticalScrollBarPolicy(int)"
    ],
    "java.security.keystore.privatekeyentry.tostring": [
        "java.security.KeyStore.PrivateKeyEntry.toString()"
    ],
    "javax.swing.jtabbedpane.setbackgroundat": [
        "javax.swing.JTabbedPane.setBackgroundAt(int,java.awt.Color)"
    ],
    "java.beans.beaninfo.getbeandescriptor": [
        "java.beans.BeanInfo.getBeanDescriptor()"
    ],
    "javax.sql.rowset.baserowset.getmaxfieldsize": [
        "javax.sql.rowset.BaseRowSet.getMaxFieldSize()"
    ],
    "org.omg.portableserver.iduniquenesspolicyoperations.value": [
        "org.omg.PortableServer.IdUniquenessPolicyOperations.value()"
    ],
    "javax.swing.text.boxview.getchildallocation": [
        "javax.swing.text.BoxView.getChildAllocation(int,java.awt.Shape)"
    ],
    "javax.swing.plaf.synth.synthpainter.painttabbedpanebackground": [
        "javax.swing.plaf.synth.SynthPainter.paintTabbedPaneBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.text.html.parser.element.getindex": [
        "javax.swing.text.html.parser.Element.getIndex()"
    ],
    "javax.swing.swingutilities.getlocalbounds": [
        "javax.swing.SwingUtilities.getLocalBounds(java.awt.Component)"
    ],
    "javax.swing.spinnermodel.getpreviousvalue": [
        "javax.swing.SpinnerModel.getPreviousValue()"
    ],
    "java.lang.processbuilder.redirect.type.valueof": [
        "java.lang.ProcessBuilder.Redirect.Type.valueOf(java.lang.String)"
    ],
    "java.awt.frame.paramstring": [
        "java.awt.Frame.paramString()"
    ],
    "javax.accessibility.accessiblerelation.settarget": [
        "javax.accessibility.AccessibleRelation.setTarget(java.lang.Object)",
        "javax.accessibility.AccessibleRelation.setTarget(java.lang.Object[])"
    ],
    "java.awt.geom.quadcurve2d.getp1": [
        "java.awt.geom.QuadCurve2D.getP1()"
    ],
    "javax.sound.midi.shortmessage.getdata1": [
        "javax.sound.midi.ShortMessage.getData1()"
    ],
    "javax.swing.defaultrowsorter.modelwrapper.getstringvalueat": [
        "javax.swing.DefaultRowSorter.ModelWrapper.getStringValueAt(int,int)"
    ],
    "javax.accessibility.accessibleselection.removeaccessibleselection": [
        "javax.accessibility.AccessibleSelection.removeAccessibleSelection(int)"
    ],
    "javax.xml.bind.datatypeconverter.parsebase64binary": [
        "javax.xml.bind.DatatypeConverter.parseBase64Binary(java.lang.String)"
    ],
    "javax.swing.table.defaulttablemodel.getcolumnname": [
        "javax.swing.table.DefaultTableModel.getColumnName(int)"
    ],
    "java.awt.menubar.deleteshortcut": [
        "java.awt.MenuBar.deleteShortcut(java.awt.MenuShortcut)"
    ],
    "javax.swing.tree.defaultmutabletreenode.setuserobject": [
        "javax.swing.tree.DefaultMutableTreeNode.setUserObject(java.lang.Object)"
    ],
    "javax.management.attributechangenotificationfilter.enableattribute": [
        "javax.management.AttributeChangeNotificationFilter.enableAttribute(java.lang.String)"
    ],
    "java.time.chrono.japanesedate.lengthofmonth": [
        "java.time.chrono.JapaneseDate.lengthOfMonth()"
    ],
    "javax.print.attribute.standard.printerstatereasons.put": [
        "javax.print.attribute.standard.PrinterStateReasons.put(javax.print.attribute.standard.PrinterStateReason,javax.print.attribute.standard.Severity)"
    ],
    "java.util.concurrent.atomic.atomicreference.set": [
        "java.util.concurrent.atomic.AtomicReference.set(V)",
        "java.util.concurrent.atomic.AtomicReference.set(java.util.concurrent.atomic.AtomicReference)"
    ],
    "javax.management.mbeanserverpermission.equals": [
        "javax.management.MBeanServerPermission.equals(java.lang.Object)"
    ],
    "javax.lang.model.type.typevisitor.visitexecutable": [
        "javax.lang.model.type.TypeVisitor.visitExecutable(javax.lang.model.type.ExecutableType,javax.lang.model.type.TypeVisitor)"
    ],
    "java.sql.databasemetadata.getprocedures": [
        "java.sql.DatabaseMetaData.getProcedures(java.lang.String,java.lang.String,java.lang.String)"
    ],
    "java.util.calendar.set": [
        "java.util.Calendar.set(int,int,int,int,int)",
        "java.util.Calendar.set(int,int,int,int,int,int)",
        "java.util.Calendar.set(int,int)",
        "java.util.Calendar.set(int,int,int)"
    ],
    "java.awt.awtkeystroke.isonkeyrelease": [
        "java.awt.AWTKeyStroke.isOnKeyRelease()"
    ],
    "java.net.url.getcontent": [
        "java.net.URL.getContent(java.lang.Class)",
        "java.net.URL.getContent()",
        "java.net.URL.getContent(java.lang.Class[])"
    ],
    "javax.swing.plaf.multi.multipopupmenuui.paint": [
        "javax.swing.plaf.multi.MultiPopupMenuUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.plaf.synth.synthradiobuttonui.createui": [
        "javax.swing.plaf.synth.SynthRadioButtonUI.createUI(javax.swing.JComponent)"
    ],
    "javax.swing.text.jtextcomponent.selectall": [
        "javax.swing.text.JTextComponent.selectAll()"
    ],
    "javax.swing.plaf.synth.synthviewportui.paint": [
        "javax.swing.plaf.synth.SynthViewportUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",
        "javax.swing.plaf.synth.SynthViewportUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.lang.math.round": [
        "java.lang.Math.round(float)",
        "java.lang.Math.round(double)"
    ],
    "javax.swing.plaf.synth.synthcheckboxmenuitemui.paintborder": [
        "javax.swing.plaf.synth.SynthCheckBoxMenuItemUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.awt.geom.affinetransform.settorotation": [
        "java.awt.geom.AffineTransform.setToRotation(double,double,double,double)",
        "java.awt.geom.AffineTransform.setToRotation(double)",
        "java.awt.geom.AffineTransform.setToRotation(double,double,double)",
        "java.awt.geom.AffineTransform.setToRotation(double,double)"
    ],
    "org.omg.dynamicany._dynanystub.get_longlong": [
        "org.omg.DynamicAny._DynAnyStub.get_longlong()"
    ],
    "java.awt.geom.affinetransform.hashcode": [
        "java.awt.geom.AffineTransform.hashCode()"
    ],
    "java.awt.image.databufferbyte.getelem": [
        "java.awt.image.DataBufferByte.getElem(int,int)"
    ],
    "java.sql.connection.createarrayof": [
        "java.sql.Connection.createArrayOf(java.lang.String,java.lang.Object)",
        "java.sql.Connection.createArrayOf(java.lang.String,java.lang.Object[])"
    ],
    "java.util.zip.adler32.getvalue": [
        "java.util.zip.Adler32.getValue()"
    ],
    "javax.swing.jinternalframe.getdesktoppane": [
        "javax.swing.JInternalFrame.getDesktopPane()"
    ],
    "java.awt.image.indexcolormodel.gettransparency": [
        "java.awt.image.IndexColorModel.getTransparency()"
    ],
    "javax.net.ssl.handshakecompletedevent.getlocalprincipal": [
        "javax.net.ssl.HandshakeCompletedEvent.getLocalPrincipal()"
    ],
    "java.io.randomaccessfile.writeshort": [
        "java.io.RandomAccessFile.writeShort(int)"
    ],
    "java.util.concurrent.threadlocalrandom.nextboolean": [
        "java.util.concurrent.ThreadLocalRandom.nextBoolean()"
    ],
    "javax.imageio.spi.imageoutputstreamspi.getoutputclass": [
        "javax.imageio.spi.ImageOutputStreamSpi.getOutputClass()"
    ],
    "java.awt.font.candisplayupto": [
        "java.awt.Font.canDisplayUpTo(java.lang.String)",
        "java.awt.Font.canDisplayUpTo(java.text.CharacterIterator,int,int)",
        "java.awt.Font.canDisplayUpTo(char[],int,int)"
    ],
    "java.io.objectstreamfield.isunshared": [
        "java.io.ObjectStreamField.isUnshared()"
    ],
    "javax.swing.text.plainview.linetorect": [
        "javax.swing.text.PlainView.lineToRect(java.awt.Shape,int)"
    ],
    "java.util.properties.getproperty": [
        "java.util.Properties.getProperty(java.lang.String,java.lang.String)",
        "java.util.Properties.getProperty(java.lang.String)"
    ],
    "java.sql.databasemetadata.supportsansi92entrylevelsql": [
        "java.sql.DatabaseMetaData.supportsANSI92EntryLevelSQL()"
    ],
    "javax.management.modelmbean.requiredmodelmbean.getattribute": [
        "javax.management.modelmbean.RequiredModelMBean.getAttribute(java.lang.String)"
    ],
    "javax.swing.jtree.getui": [
        "javax.swing.JTree.getUI()"
    ],
    "javax.swing.text.defaultformatter.clone": [
        "javax.swing.text.DefaultFormatter.clone()"
    ],
    "javax.swing.jmenuitem.firemenudragmousedragged": [
        "javax.swing.JMenuItem.fireMenuDragMouseDragged(javax.swing.event.MenuDragMouseEvent)"
    ],
    "javax.swing.text.paragraphview.getflowspan": [
        "javax.swing.text.ParagraphView.getFlowSpan(int)"
    ],
    "javax.swing.tree.defaulttreecellrenderer.invalidate": [
        "javax.swing.tree.DefaultTreeCellRenderer.invalidate()"
    ],
    "java.util.concurrent.atomic.atomiclong.getandset": [
        "java.util.concurrent.atomic.AtomicLong.getAndSet(long)"
    ],
    "javax.swing.jcheckbox.getaccessiblecontext": [
        "javax.swing.JCheckBox.getAccessibleContext()"
    ],
    "java.security.interfaces.dsaparams.getp": [
        "java.security.interfaces.DSAParams.getP()"
    ],
    "javax.swing.text.labelview.setunderline": [
        "javax.swing.text.LabelView.setUnderline(boolean)"
    ],
    "javax.naming.linkexception.setlinkexplanation": [
        "javax.naming.LinkException.setLinkExplanation(java.lang.String)"
    ],
    "javax.sound.sampled.control.type.hashcode": [
        "javax.sound.sampled.Control.Type.hashCode()"
    ],
    "javax.xml.transform.transformer.seterrorlistener": [
        "javax.xml.transform.Transformer.setErrorListener(javax.xml.transform.ErrorListener)"
    ],
    "javax.management.openmbean.openmbeanconstructorinfo.tostring": [
        "javax.management.openmbean.OpenMBeanConstructorInfo.toString()"
    ],
    "java.util.zip.zipentry.getextra": [
        "java.util.zip.ZipEntry.getExtra()"
    ],
    "java.sql.databasemetadata.supportsansi92fullsql": [
        "java.sql.DatabaseMetaData.supportsANSI92FullSQL()"
    ],
    "java.io.objectstreamclass.forclass": [
        "java.io.ObjectStreamClass.forClass()"
    ],
    "javax.swing.plaf.multi.multicomboboxui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiComboBoxUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "java.rmi.server.rmiclassloader.loadclass": [
        "java.rmi.server.RMIClassLoader.loadClass(java.net.URL,java.lang.String)",
        "java.rmi.server.RMIClassLoader.loadClass(java.lang.String,java.lang.String,java.lang.ClassLoader)",
        "java.rmi.server.RMIClassLoader.loadClass(java.lang.String,java.lang.String)"
    ],
    "org.omg.dynamicany.dynstructoperations.get_members": [
        "org.omg.DynamicAny.DynStructOperations.get_members()"
    ],
    "javax.sql.rowset.setbigdecimal": [
        "javax.sql.RowSet.setBigDecimal(java.lang.String,java.math.BigDecimal)",
        "javax.sql.RowSet.setBigDecimal(int,java.math.BigDecimal)"
    ],
    "javax.swing.jtogglebutton.getuiclassid": [
        "javax.swing.JToggleButton.getUIClassID()"
    ],
    "org.omg.dynamicany._dynanystub.get_dyn_any": [
        "org.omg.DynamicAny._DynAnyStub.get_dyn_any()"
    ],
    "javax.swing.text.element.getparentelement": [
        "javax.swing.text.Element.getParentElement()"
    ],
    "javax.xml.xpath.xpath.reset": [
        "javax.xml.xpath.XPath.reset()"
    ],
    "javax.management.remote.rmi.rmiconnection.getconnectionid": [
        "javax.management.remote.rmi.RMIConnection.getConnectionId()"
    ],
    "javax.swing.jtabbedpane.gettitleat": [
        "javax.swing.JTabbedPane.getTitleAt(int)"
    ],
    "java.awt.textarea.getminimumsize": [
        "java.awt.TextArea.getMinimumSize(int,int)",
        "java.awt.TextArea.getMinimumSize()"
    ],
    "java.awt.font.glyphmetrics.getadvancex": [
        "java.awt.font.GlyphMetrics.getAdvanceX()"
    ],
    "org.omg.dynamicany._dynarraystub.insert_char": [
        "org.omg.DynamicAny._DynArrayStub.insert_char(char)"
    ],
    "java.util.bitset.valueof": [
        "java.util.BitSet.valueOf(java.nio.ByteBuffer)",
        "java.util.BitSet.valueOf(long[])",
        "java.util.BitSet.valueOf(byte[])",
        "java.util.BitSet.valueOf(java.nio.LongBuffer)"
    ],
    "java.time.year.length": [
        "java.time.Year.length()"
    ],
    "java.net.httpcookie.getmaxage": [
        "java.net.HttpCookie.getMaxAge()"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.getcolumnlabel": [
        "javax.sql.rowset.RowSetMetaDataImpl.getColumnLabel(int)"
    ],
    "java.lang.integer.shortvalue": [
        "java.lang.Integer.shortValue()"
    ],
    "java.security.policy.refresh": [
        "java.security.Policy.refresh()"
    ],
    "javax.swing.plaf.multi.multioptionpaneui.installui": [
        "javax.swing.plaf.multi.MultiOptionPaneUI.installUI(javax.swing.JComponent)"
    ],
    "javax.swing.jtextarea.getlineendoffset": [
        "javax.swing.JTextArea.getLineEndOffset(int)"
    ],
    "javax.sql.rowset.rowsetwarning.setnextwarning": [
        "javax.sql.rowset.RowSetWarning.setNextWarning(javax.sql.rowset.RowSetWarning)"
    ],
    "java.util.logging.logger.throwing": [
        "java.util.logging.Logger.throwing(java.lang.String,java.lang.String,java.lang.Throwable)"
    ],
    "javax.swing.jlist.getselectionmodel": [
        "javax.swing.JList.getSelectionModel()"
    ],
    "javax.swing.jtextpane.setcharacterattributes": [
        "javax.swing.JTextPane.setCharacterAttributes(javax.swing.text.AttributeSet,boolean)"
    ],
    "javax.swing.plaf.synth.synthtableheaderui.installdefaults": [
        "javax.swing.plaf.synth.SynthTableHeaderUI.installDefaults()"
    ],
    "java.awt.im.inputmethodhighlight.isselected": [
        "java.awt.im.InputMethodHighlight.isSelected()"
    ],
    "javax.print.attribute.printserviceattributeset.addall": [
        "javax.print.attribute.PrintServiceAttributeSet.addAll(javax.print.attribute.AttributeSet)"
    ],
    "javax.print.attribute.standard.jobimpressions.equals": [
        "javax.print.attribute.standard.JobImpressions.equals(java.lang.Object)"
    ],
    "java.security.keystorespi.enginegetcertificatechain": [
        "java.security.KeyStoreSpi.engineGetCertificateChain(java.lang.String)"
    ],
    "java.awt.menu.insert": [
        "java.awt.Menu.insert(java.awt.MenuItem,int)",
        "java.awt.Menu.insert(java.lang.String,int)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintpanelbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintPanelBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.management.loading.mletmbean.getmbeansfromurl": [
        "javax.management.loading.MLetMBean.getMBeansFromURL(java.lang.String)",
        "javax.management.loading.MLetMBean.getMBeansFromURL(java.net.URL)"
    ],
    "java.lang.reflect.executable.getparameterannotations": [
        "java.lang.reflect.Executable.getParameterAnnotations()"
    ],
    "java.rmi.activation.activationgroupdesc.getlocation": [
        "java.rmi.activation.ActivationGroupDesc.getLocation()"
    ],
    "javax.xml.stream.xmleventfactory.createcomment": [
        "javax.xml.stream.XMLEventFactory.createComment(java.lang.String)"
    ],
    "javax.swing.lookandfeel.makekeybindings": [
        "javax.swing.LookAndFeel.makeKeyBindings(java.lang.Object[])"
    ],
    "javax.swing.tree.treeselectionmodel.getmaxselectionrow": [
        "javax.swing.tree.TreeSelectionModel.getMaxSelectionRow()"
    ],
    "java.net.httpcookie.setcommenturl": [
        "java.net.HttpCookie.setCommentURL(java.lang.String)"
    ],
    "java.nio.file.files.walk": [
        "java.nio.file.Files.walk(java.nio.file.Path,int,java.nio.file.FileVisitOption)",
        "java.nio.file.Files.walk(java.nio.file.Path,int,java.nio.file.FileVisitOption...)",
        "java.nio.file.Files.walk(java.nio.file.Path,java.nio.file.FileVisitOption)",
        "java.nio.file.Files.walk(java.nio.file.Path,java.nio.file.FileVisitOption...)"
    ],
    "org.omg.dynamicany._dynfixedstub.get_wstring": [
        "org.omg.DynamicAny._DynFixedStub.get_wstring()"
    ],
    "java.security.spec.rsamultiprimeprivatecrtkeyspec.getprimeexponentq": [
        "java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPrimeExponentQ()"
    ],
    "javax.xml.soap.soappart.setcontent": [
        "javax.xml.soap.SOAPPart.setContent(javax.xml.transform.Source)"
    ],
    "java.lang.stringbuffer.deletecharat": [
        "java.lang.StringBuffer.deleteCharAt(int)"
    ],
    "javax.xml.xpath.xpath.setxpathvariableresolver": [
        "javax.xml.xpath.XPath.setXPathVariableResolver(javax.xml.xpath.XPathVariableResolver)"
    ],
    "java.awt.geom.quadcurve2d.float.getctrly": [
        "java.awt.geom.QuadCurve2D.Float.getCtrlY()"
    ],
    "javax.imageio.stream.imageinputstream.readline": [
        "javax.imageio.stream.ImageInputStream.readLine()"
    ],
    "javax.swing.event.menudragmouseevent.getmenuselectionmanager": [
        "javax.swing.event.MenuDragMouseEvent.getMenuSelectionManager()"
    ],
    "javax.swing.text.componentview.getmaximumspan": [
        "javax.swing.text.ComponentView.getMaximumSpan(int)"
    ],
    "java.net.socket.getoutputstream": [
        "java.net.Socket.getOutputStream()"
    ],
    "javax.swing.plaf.multi.multiscrollbarui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiScrollBarUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "java.security.cert.x509certselector.getsubjectpublickey": [
        "java.security.cert.X509CertSelector.getSubjectPublicKey()"
    ],
    "javax.xml.validation.validator.setfeature": [
        "javax.xml.validation.Validator.setFeature(java.lang.String,boolean)"
    ],
    "java.util.collections.binarysearch": [
        "java.util.Collections.binarySearch(java.util.List<? extends T>,T,java.util.Comparator<? super T>)",
        "java.util.Collections.binarySearch(java.util.List<? extends java.lang.Comparable<? super T>>,T)"
    ],
    "javax.naming.ldap.ldapcontext.getrequestcontrols": [
        "javax.naming.ldap.LdapContext.getRequestControls()"
    ],
    "java.time.offsetdatetime.withoffsetsameinstant": [
        "java.time.OffsetDateTime.withOffsetSameInstant(java.time.ZoneOffset)"
    ],
    "org.omg.dynamicany.dynanyoperations.from_any": [
        "org.omg.DynamicAny.DynAnyOperations.from_any(org.omg.CORBA.Any)"
    ],
    "javax.swing.plaf.multi.multitreeui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiTreeUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "javax.swing.event.listselectionevent.tostring": [
        "javax.swing.event.ListSelectionEvent.toString()"
    ],
    "javax.management.valueexp.apply": [
        "javax.management.ValueExp.apply(javax.management.ObjectName)"
    ],
    "javax.swing.text.segment.getindex": [
        "javax.swing.text.Segment.getIndex()"
    ],
    "java.sql.array.getbasetypename": [
        "java.sql.Array.getBaseTypeName()"
    ],
    "java.security.cert.x509crl.hashcode": [
        "java.security.cert.X509CRL.hashCode()"
    ],
    "java.awt.geom.line2d.ptlinedist": [
        "java.awt.geom.Line2D.ptLineDist(java.awt.geom.Point2D)",
        "java.awt.geom.Line2D.ptLineDist(double,double)",
        "java.awt.geom.Line2D.ptLineDist(double,double,double,double,double,double)"
    ],
    "javax.swing.text.jtextcomponent.loadkeymap": [
        "javax.swing.text.JTextComponent.loadKeymap(javax.swing.text.Keymap,javax.swing.text.JTextComponent.KeyBinding[],javax.swing.Action[])"
    ],
    "java.time.chrono.chronozoneddatetime.minus": [
        "java.time.chrono.ChronoZonedDateTime.minus(long,java.time.temporal.TemporalUnit)",
        "java.time.chrono.ChronoZonedDateTime.minus(java.time.temporal.TemporalAmount)"
    ],
    "java.awt.dnd.dragsourcelistener.dragexit": [
        "java.awt.dnd.DragSourceListener.dragExit(java.awt.dnd.DragSourceEvent)"
    ],
    "java.util.concurrent.concurrentskiplistset.subset": [
        "java.util.concurrent.ConcurrentSkipListSet.subSet(E,boolean,E,boolean)",
        "java.util.concurrent.ConcurrentSkipListSet.subSet(E,E)"
    ],
    "java.awt.window.geticonimages": [
        "java.awt.Window.getIconImages()"
    ],
    "javax.swing.text.mutableattributeset.addattribute": [
        "javax.swing.text.MutableAttributeSet.addAttribute(java.lang.Object,java.lang.Object)"
    ],
    "org.xml.sax.saxparseexception.getcolumnnumber": [
        "org.xml.sax.SAXParseException.getColumnNumber()"
    ],
    "java.awt.image.renderedimage.getmintilex": [
        "java.awt.image.RenderedImage.getMinTileX()"
    ],
    "javax.swing.text.defaultformatterfactory.getformatter": [
        "javax.swing.text.DefaultFormatterFactory.getFormatter(javax.swing.JFormattedTextField)"
    ],
    "java.util.prefs.preferences.flush": [
        "java.util.prefs.Preferences.flush()"
    ],
    "javax.xml.soap.soapfault.getfaultreasontext": [
        "javax.xml.soap.SOAPFault.getFaultReasonText(java.util.Locale)"
    ],
    "javax.sound.sampled.line.addlinelistener": [
        "javax.sound.sampled.Line.addLineListener(javax.sound.sampled.LineListener)"
    ],
    "java.beans.propertyeditor.getjavainitializationstring": [
        "java.beans.PropertyEditor.getJavaInitializationString()"
    ],
    "javax.swing.text.html.stylesheet.getstylesheets": [
        "javax.swing.text.html.StyleSheet.getStyleSheets()"
    ],
    "java.awt.font.createfont": [
        "java.awt.Font.createFont(int,java.io.InputStream)",
        "java.awt.Font.createFont(int,java.io.File)"
    ],
    "java.sql.connection.getclientinfo": [
        "java.sql.Connection.getClientInfo(java.lang.String)",
        "java.sql.Connection.getClientInfo()"
    ],
    "javax.naming.ldap.ldapname.get": [
        "javax.naming.ldap.LdapName.get(int)"
    ],
    "javax.lang.model.element.typeelement.getsimplename": [
        "javax.lang.model.element.TypeElement.getSimpleName()"
    ],
    "javax.imageio.stream.imageoutputstream.writebytes": [
        "javax.imageio.stream.ImageOutputStream.writeBytes(java.lang.String)"
    ],
    "java.text.dateformatsymbols.setlocalpatternchars": [
        "java.text.DateFormatSymbols.setLocalPatternChars(java.lang.String)"
    ],
    "javax.swing.text.defaultcaret.getblinkrate": [
        "javax.swing.text.DefaultCaret.getBlinkRate()"
    ],
    "javax.swing.jtooltip.paramstring": [
        "javax.swing.JToolTip.paramString()"
    ],
    "java.sql.resultset.getcursorname": [
        "java.sql.ResultSet.getCursorName()"
    ],
    "javax.management.modelmbean.requiredmodelmbean.setattribute": [
        "javax.management.modelmbean.RequiredModelMBean.setAttribute(javax.management.Attribute)"
    ],
    "javax.naming.directory.searchcontrols.getsearchscope": [
        "javax.naming.directory.SearchControls.getSearchScope()"
    ],
    "org.omg.dynamicany._dynfixedstub.seek": [
        "org.omg.DynamicAny._DynFixedStub.seek(int)"
    ],
    "java.net.socket.gettcpnodelay": [
        "java.net.Socket.getTcpNoDelay()"
    ],
    "java.util.collection.size": [
        "java.util.Collection.size()"
    ],
    "java.lang.classloader.getpackage": [
        "java.lang.ClassLoader.getPackage(java.lang.String)"
    ],
    "java.util.concurrent.concurrenthashmap.put": [
        "java.util.concurrent.ConcurrentHashMap.put(java.util.concurrent.ConcurrentHashMap,java.util.concurrent.ConcurrentHashMap)",
        "java.util.concurrent.ConcurrentHashMap.put(K,V)"
    ],
    "java.net.inetaddress.hashcode": [
        "java.net.InetAddress.hashCode()"
    ],
    "javax.net.ssl.sslsession.getpacketbuffersize": [
        "javax.net.ssl.SSLSession.getPacketBufferSize()"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.setselectionpath": [
        "javax.swing.tree.DefaultTreeSelectionModel.setSelectionPath(javax.swing.tree.TreePath)"
    ],
    "java.sql.resultset.getshort": [
        "java.sql.ResultSet.getShort(java.lang.String)",
        "java.sql.ResultSet.getShort(int)"
    ],
    "javax.swing.sortingfocustraversalpolicy.getcomparator": [
        "javax.swing.SortingFocusTraversalPolicy.getComparator()"
    ],
    "javax.management.mbeanexception.getcause": [
        "javax.management.MBeanException.getCause()"
    ],
    "javax.imageio.metadata.iiometadata.setcontroller": [
        "javax.imageio.metadata.IIOMetadata.setController(javax.imageio.metadata.IIOMetadataController)"
    ],
    "java.security.keystore.trustedcertificateentry.tostring": [
        "java.security.KeyStore.TrustedCertificateEntry.toString()"
    ],
    "javax.sql.rowset.rowsetfactory.createcachedrowset": [
        "javax.sql.rowset.RowSetFactory.createCachedRowSet()"
    ],
    "javax.swing.text.plainview.changedupdate": [
        "javax.swing.text.PlainView.changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "javax.management.remote.jmxconnectorserverfactory.newjmxconnectorserver": [
        "javax.management.remote.JMXConnectorServerFactory.newJMXConnectorServer(javax.management.remote.JMXServiceURL,,?>,javax.management.MBeanServer)"
    ],
    "javax.swing.text.html.minimalhtmlwriter.writebody": [
        "javax.swing.text.html.MinimalHTMLWriter.writeBody()"
    ],
    "javax.swing.cellrendererpane.paintcomponent": [
        "javax.swing.CellRendererPane.paintComponent(java.awt.Graphics,java.awt.Component,java.awt.Container,int,int,int,int,boolean)"
    ],
    "java.util.jar.jarinputstream.getmanifest": [
        "java.util.jar.JarInputStream.getManifest()"
    ],
    "javax.management.remote.rmi.rmiserverimpl.setdefaultclassloader": [
        "javax.management.remote.rmi.RMIServerImpl.setDefaultClassLoader(java.lang.ClassLoader)"
    ],
    "java.time.chrono.japanesedate.equals": [
        "java.time.chrono.JapaneseDate.equals(java.lang.Object)"
    ],
    "javax.security.sasl.saslclient.getmechanismname": [
        "javax.security.sasl.SaslClient.getMechanismName()"
    ],
    "javax.swing.text.gapcontent.getchars": [
        "javax.swing.text.GapContent.getChars(int,int,javax.swing.text.Segment)"
    ],
    "java.rmi.server.remoteserver.getclienthost": [
        "java.rmi.server.RemoteServer.getClientHost()"
    ],
    "java.nio.file.files.setlastmodifiedtime": [
        "java.nio.file.Files.setLastModifiedTime(java.nio.file.Path,java.nio.file.attribute.FileTime)"
    ],
    "javax.naming.directory.basicattribute.tostring": [
        "javax.naming.directory.BasicAttribute.toString()"
    ],
    "java.net.urlconnection.getheaderfieldkey": [
        "java.net.URLConnection.getHeaderFieldKey(int)"
    ],
    "java.sql.parametermetadata.getparametercount": [
        "java.sql.ParameterMetaData.getParameterCount()"
    ],
    "org.xml.sax.saxexception.getcause": [
        "org.xml.sax.SAXException.getCause()"
    ],
    "javax.swing.plaf.basic.basictreeui.getpreferredminsize": [
        "javax.swing.plaf.basic.BasicTreeUI.getPreferredMinSize()"
    ],
    "javax.swing.jtoolbar.add": [
        "javax.swing.JToolBar.add(javax.swing.Action)"
    ],
    "javax.swing.text.wrappedplainview.getminimumspan": [
        "javax.swing.text.WrappedPlainView.getMinimumSpan(int)"
    ],
    "javax.security.auth.callback.languagecallback.setlocale": [
        "javax.security.auth.callback.LanguageCallback.setLocale(java.util.Locale)"
    ],
    "javax.swing.abstractbutton.getverticalalignment": [
        "javax.swing.AbstractButton.getVerticalAlignment()"
    ],
    "org.omg.portableinterceptor.orbinitinfooperations.codec_factory": [
        "org.omg.PortableInterceptor.ORBInitInfoOperations.codec_factory()"
    ],
    "java.sql.databasemetadata.supportsrefcursors": [
        "java.sql.DatabaseMetaData.supportsRefCursors()"
    ],
    "java.nio.channels.asynchronousserversocketchannel.accept": [
        "java.nio.channels.AsynchronousServerSocketChannel.accept()",
        "java.nio.channels.AsynchronousServerSocketChannel.accept(A,,? super A>)"
    ],
    "java.awt.component.getx": [
        "java.awt.Component.getX()"
    ],
    "java.util.stream.doublestream.sum": [
        "java.util.stream.DoubleStream.sum()"
    ],
    "java.rmi.activation.activationgroupdesc.commandenvironment.getcommandpath": [
        "java.rmi.activation.ActivationGroupDesc.CommandEnvironment.getCommandPath()"
    ],
    "java.awt.trayicon.setactioncommand": [
        "java.awt.TrayIcon.setActionCommand(java.lang.String)"
    ],
    "java.awt.geom.path2d.double.clone": [
        "java.awt.geom.Path2D.Double.clone()"
    ],
    "javax.print.flavorexception.getunsupportedflavors": [
        "javax.print.FlavorException.getUnsupportedFlavors()"
    ],
    "java.awt.dnd.draggestureevent.toarray": [
        "java.awt.dnd.DragGestureEvent.toArray()",
        "java.awt.dnd.DragGestureEvent.toArray(java.lang.Object[])"
    ],
    "javax.annotation.processing.filer.getresource": [
        "javax.annotation.processing.Filer.getResource(javax.tools.JavaFileManager.Location,java.lang.CharSequence,java.lang.CharSequence)"
    ],
    "java.lang.long.bytevalue": [
        "java.lang.Long.byteValue()"
    ],
    "javax.swing.tree.defaulttreecellrenderer.getborderselectioncolor": [
        "javax.swing.tree.DefaultTreeCellRenderer.getBorderSelectionColor()"
    ],
    "javax.swing.text.wrappedplainview.insertupdate": [
        "javax.swing.text.WrappedPlainView.insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "java.awt.container.getfocustraversalkeys": [
        "java.awt.Container.getFocusTraversalKeys(int)"
    ],
    "java.lang.system.runfinalization": [
        "java.lang.System.runFinalization()"
    ],
    "java.util.function.longunaryoperator.applyaslong": [
        "java.util.function.LongUnaryOperator.applyAsLong(long)"
    ],
    "javax.swing.jcomponent.gettooltiplocation": [
        "javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"
    ],
    "java.time.year.with": [
        "java.time.Year.with(java.time.temporal.TemporalAdjuster)",
        "java.time.Year.with(java.time.temporal.TemporalField,long)"
    ],
    "org.w3c.dom.document.setxmlversion": [
        "org.w3c.dom.Document.setXmlVersion(java.lang.String)"
    ],
    "java.util.concurrent.locks.abstractqueuedlongsynchronizer.conditionobject.getwaitingthreads": [
        "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.getWaitingThreads()"
    ],
    "java.time.temporal.temporalunit.addto": [
        "java.time.temporal.TemporalUnit.addTo(R,long)"
    ],
    "javax.xml.crypto.dsig.keyinfo.keyinfofactory.isfeaturesupported": [
        "javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.isFeatureSupported(java.lang.String)"
    ],
    "java.awt.image.samplemodel.createdatabuffer": [
        "java.awt.image.SampleModel.createDataBuffer()"
    ],
    "java.time.chrono.minguodate.lengthofmonth": [
        "java.time.chrono.MinguoDate.lengthOfMonth()"
    ],
    "java.awt.geom.cubiccurve2d.float.getctrly1": [
        "java.awt.geom.CubicCurve2D.Float.getCtrlY1()"
    ],
    "javax.swing.plaf.multi.multioptionpaneui.containscustomcomponents": [
        "javax.swing.plaf.multi.MultiOptionPaneUI.containsCustomComponents(javax.swing.JOptionPane)"
    ],
    "javax.swing.jcomponent.getborder": [
        "javax.swing.JComponent.getBorder()"
    ],
    "java.awt.image.pixelgrabber.startgrabbing": [
        "java.awt.image.PixelGrabber.startGrabbing()"
    ],
    "javax.activation.datahandler.gettransferdata": [
        "javax.activation.DataHandler.getTransferData(java.awt.datatransfer.DataFlavor)"
    ],
    "javax.swing.text.jtextcomponent.setnavigationfilter": [
        "javax.swing.text.JTextComponent.setNavigationFilter(javax.swing.text.NavigationFilter)"
    ],
    "java.awt.graphics2d.getstroke": [
        "java.awt.Graphics2D.getStroke()"
    ],
    "javax.imageio.spi.serviceregistry.deregisterall": [
        "javax.imageio.spi.ServiceRegistry.deregisterAll(java.lang.Class<?>)"
    ],
    "java.util.list.get": [
        "java.util.List.get(int)"
    ],
    "javax.management.openmbean.tabulartype.hashcode": [
        "javax.management.openmbean.TabularType.hashCode()"
    ],
    "java.awt.component.removepropertychangelistener": [
        "java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",
        "java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "javax.jws.soap.soapbinding.parameterstyle.valueof": [
        "javax.jws.soap.SOAPBinding.ParameterStyle.valueOf(java.lang.String)"
    ],
    "org.omg.corba.portable.delegate.invoke": [
        "org.omg.CORBA.portable.Delegate.invoke(org.omg.CORBA.Object,org.omg.CORBA.portable.OutputStream)"
    ],
    "java.lang.reflect.modifier.fieldmodifiers": [
        "java.lang.reflect.Modifier.fieldModifiers()"
    ],
    "org.omg.corba.any.insert_char": [
        "org.omg.CORBA.Any.insert_char(char)"
    ],
    "org.xml.sax.helpers.locatorimpl.getpublicid": [
        "org.xml.sax.helpers.LocatorImpl.getPublicId()"
    ],
    "javax.swing.jlayer.paint": [
        "javax.swing.JLayer.paint(java.awt.Graphics)"
    ],
    "javax.swing.plaf.basic.basicbuttonui.getbaselineresizebehavior": [
        "javax.swing.plaf.basic.BasicButtonUI.getBaselineResizeBehavior(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.synth.synthtreeui.createui": [
        "javax.swing.plaf.synth.SynthTreeUI.createUI(javax.swing.JComponent)"
    ],
    "java.rmi.activation.activationid.activate": [
        "java.rmi.activation.ActivationID.activate(boolean)"
    ],
    "javax.script.scriptengine.eval": [
        "javax.script.ScriptEngine.eval(java.lang.String,javax.script.ScriptContext)",
        "javax.script.ScriptEngine.eval(java.lang.String,javax.script.Bindings)",
        "javax.script.ScriptEngine.eval(java.lang.String)"
    ],
    "javax.swing.table.tablecolumn.addpropertychangelistener": [
        "javax.swing.table.TableColumn.addPropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "org.xml.sax.helpers.locatorimpl.setsystemid": [
        "org.xml.sax.helpers.LocatorImpl.setSystemId(java.lang.String)"
    ],
    "javax.print.attribute.standard.referenceurischemessupported.getenumvaluetable": [
        "javax.print.attribute.standard.ReferenceUriSchemesSupported.getEnumValueTable()"
    ],
    "java.io.inputstream.marksupported": [
        "java.io.InputStream.markSupported()"
    ],
    "javax.xml.validation.schemafactory.geterrorhandler": [
        "javax.xml.validation.SchemaFactory.getErrorHandler()"
    ],
    "java.awt.toolkit.prepareimage": [
        "java.awt.Toolkit.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"
    ],
    "java.lang.management.threadinfo.getwaitedcount": [
        "java.lang.management.ThreadInfo.getWaitedCount()"
    ],
    "java.awt.adjustable.setmaximum": [
        "java.awt.Adjustable.setMaximum(int)"
    ],
    "javax.management.remote.rmi.rmiserverimpl.closeserver": [
        "javax.management.remote.rmi.RMIServerImpl.closeServer()"
    ],
    "javax.swing.jdesktoppane.getdragmode": [
        "javax.swing.JDesktopPane.getDragMode()"
    ],
    "javax.swing.plaf.basic.basicmenuitemui.createpropertychangelistener": [
        "javax.swing.plaf.basic.BasicMenuItemUI.createPropertyChangeListener(javax.swing.JComponent)"
    ],
    "java.awt.component.getbaselineresizebehavior": [
        "java.awt.Component.getBaselineResizeBehavior()"
    ],
    "java.math.biginteger.bitcount": [
        "java.math.BigInteger.bitCount()"
    ],
    "javax.management.modelmbean.modelmbeanconstructorinfo.getdescriptor": [
        "javax.management.modelmbean.ModelMBeanConstructorInfo.getDescriptor()"
    ],
    "javax.swing.text.stringcontent.length": [
        "javax.swing.text.StringContent.length()"
    ],
    "javax.swing.jtable.getcellrect": [
        "javax.swing.JTable.getCellRect(int,int,boolean)"
    ],
    "javax.swing.jwindow.setglasspane": [
        "javax.swing.JWindow.setGlassPane(java.awt.Component)"
    ],
    "java.util.arraydeque.offerlast": [
        "java.util.ArrayDeque.offerLast(E)",
        "java.util.ArrayDeque.offerLast(java.util.ArrayDeque)"
    ],
    "java.security.keystore.setkeyentry": [
        "java.security.KeyStore.setKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate)",
        "java.security.KeyStore.setKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])"
    ],
    "javax.management.openmbean.openmbeanattributeinfosupport.tostring": [
        "javax.management.openmbean.OpenMBeanAttributeInfoSupport.toString()"
    ],
    "javax.swing.jlist.setmodel": [
        "javax.swing.JList.setModel(javax.swing.ListModel<javax.swing.JList>)"
    ],
    "java.nio.channels.spi.abstractselectablechannel.provider": [
        "java.nio.channels.spi.AbstractSelectableChannel.provider()"
    ],
    "java.util.stream.stream.allmatch": [
        "java.util.stream.Stream.allMatch(java.util.function.Predicate<? super java.util.stream.Stream>)",
        "java.util.stream.Stream.allMatch(java.util.function.Predicate<? super T>)"
    ],
    "javax.crypto.spec.desedekeyspec.getkey": [
        "javax.crypto.spec.DESedeKeySpec.getKey()"
    ],
    "java.awt.event.inputevent.getmodifiers": [
        "java.awt.event.InputEvent.getModifiers()"
    ],
    "java.beans.propertydescriptor.isbound": [
        "java.beans.PropertyDescriptor.isBound()"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.writelock.tostring": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.toString()"
    ],
    "javax.swing.jlayeredpane.setlayer": [
        "javax.swing.JLayeredPane.setLayer(java.awt.Component,int,int)",
        "javax.swing.JLayeredPane.setLayer(java.awt.Component,int)"
    ],
    "javax.management.relation.role.setrolename": [
        "javax.management.relation.Role.setRoleName(java.lang.String)"
    ],
    "javax.print.multidoc.getdoc": [
        "javax.print.MultiDoc.getDoc()"
    ],
    "javax.imageio.imageio.createimageinputstream": [
        "javax.imageio.ImageIO.createImageInputStream(java.lang.Object)"
    ],
    "javax.swing.event.eventlistenerlist.getlisteners": [
        "javax.swing.event.EventListenerList.getListeners(java.lang.Class<T>)"
    ],
    "java.util.concurrent.copyonwritearraylist.clone": [
        "java.util.concurrent.CopyOnWriteArrayList.clone()"
    ],
    "java.rmi.naming.lookup": [
        "java.rmi.Naming.lookup(java.lang.String)"
    ],
    "javax.security.auth.subject.getprivatecredentials": [
        "javax.security.auth.Subject.getPrivateCredentials()",
        "javax.security.auth.Subject.getPrivateCredentials(java.lang.Class<T>)"
    ],
    "javax.xml.bind.datatypeconverterinterface.printstring": [
        "javax.xml.bind.DatatypeConverterInterface.printString(java.lang.String)"
    ],
    "javax.swing.plaf.basic.basicprogressbarui.getbox": [
        "javax.swing.plaf.basic.BasicProgressBarUI.getBox(java.awt.Rectangle)"
    ],
    "java.util.stream.doublestream.skip": [
        "java.util.stream.DoubleStream.skip(long)"
    ],
    "javax.naming.event.namingevent.geteventcontext": [
        "javax.naming.event.NamingEvent.getEventContext()"
    ],
    "javax.xml.validation.validator.setresourceresolver": [
        "javax.xml.validation.Validator.setResourceResolver(org.w3c.dom.ls.LSResourceResolver)"
    ],
    "javax.naming.directory.attributes.get": [
        "javax.naming.directory.Attributes.get(java.lang.String)"
    ],
    "java.awt.font.linemetrics.getheight": [
        "java.awt.font.LineMetrics.getHeight()"
    ],
    "java.awt.dnd.droptargetdragevent.isdataflavorsupported": [
        "java.awt.dnd.DropTargetDragEvent.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)"
    ],
    "org.omg.dynamicany.dynanyoperations.get_octet": [
        "org.omg.DynamicAny.DynAnyOperations.get_octet()"
    ],
    "javax.xml.soap.soapconnectionfactory.createconnection": [
        "javax.xml.soap.SOAPConnectionFactory.createConnection()"
    ],
    "org.omg.portableserver.threadpolicyoperations.value": [
        "org.omg.PortableServer.ThreadPolicyOperations.value()"
    ],
    "java.nio.charset.charsetencoder.charset": [
        "java.nio.charset.CharsetEncoder.charset()"
    ],
    "javax.swing.jlist.locationtoindex": [
        "javax.swing.JList.locationToIndex(java.awt.Point)"
    ],
    "javax.naming.directory.attribute.getattributedefinition": [
        "javax.naming.directory.Attribute.getAttributeDefinition()"
    ],
    "java.awt.keyboardfocusmanager.setglobalactivewindow": [
        "java.awt.KeyboardFocusManager.setGlobalActiveWindow(java.awt.Window)"
    ],
    "java.awt.dnd.droptargetdropevent.isdataflavorsupported": [
        "java.awt.dnd.DropTargetDropEvent.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)"
    ],
    "javax.sql.rowset.baserowset.setrowid": [
        "javax.sql.rowset.BaseRowSet.setRowId(int,java.sql.RowId)",
        "javax.sql.rowset.BaseRowSet.setRowId(java.lang.String,java.sql.RowId)"
    ],
    "java.security.cert.x509certificate.verify": [
        "java.security.cert.X509Certificate.verify(java.security.PublicKey,java.security.Provider)"
    ],
    "java.awt.image.affinetransformop.filter": [
        "java.awt.image.AffineTransformOp.filter(java.awt.image.Raster,java.awt.image.WritableRaster)",
        "java.awt.image.AffineTransformOp.filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)"
    ],
    "java.awt.image.singlepixelpackedsamplemodel.setpixels": [
        "java.awt.image.SinglePixelPackedSampleModel.setPixels(int,int,int,int,int[],java.awt.image.DataBuffer)"
    ],
    "javax.swing.plaf.metal.metaltheme.getsecondary3": [
        "javax.swing.plaf.metal.MetalTheme.getSecondary3()"
    ],
    "javax.xml.soap.soapfault.setfaultnode": [
        "javax.xml.soap.SOAPFault.setFaultNode(java.lang.String)"
    ],
    "java.awt.print.pageformat.getimageablewidth": [
        "java.awt.print.PageFormat.getImageableWidth()"
    ],
    "javax.swing.table.jtableheader.setdraggedcolumn": [
        "javax.swing.table.JTableHeader.setDraggedColumn(javax.swing.table.TableColumn)"
    ],
    "javax.swing.jtable.setrowsorter": [
        "javax.swing.JTable.setRowSorter(javax.swing.RowSorter<? extends javax.swing.table.TableModel>)"
    ],
    "javax.sound.sampled.spi.formatconversionprovider.isconversionsupported": [
        "javax.sound.sampled.spi.FormatConversionProvider.isConversionSupported(javax.sound.sampled.AudioFormat,javax.sound.sampled.AudioFormat)",
        "javax.sound.sampled.spi.FormatConversionProvider.isConversionSupported(javax.sound.sampled.AudioFormat.Encoding,javax.sound.sampled.AudioFormat)"
    ],
    "java.util.concurrent.concurrentskiplistset.iterator": [
        "java.util.concurrent.ConcurrentSkipListSet.iterator()"
    ],
    "javax.swing.boundedrangemodel.getmaximum": [
        "javax.swing.BoundedRangeModel.getMaximum()"
    ],
    "javax.sql.rowset.spi.syncfactory.setlogger": [
        "javax.sql.rowset.spi.SyncFactory.setLogger(java.util.logging.Logger,java.util.logging.Level)"
    ],
    "org.omg.corba.datainputstream.read_short_array": [
        "org.omg.CORBA.DataInputStream.read_short_array(org.omg.CORBA.ShortSeqHolder,int,int)"
    ],
    "javax.swing.border.compoundborder.getoutsideborder": [
        "javax.swing.border.CompoundBorder.getOutsideBorder()"
    ],
    "javax.swing.jlist.updateui": [
        "javax.swing.JList.updateUI()"
    ],
    "java.awt.geom.point2d.double.tostring": [
        "java.awt.geom.Point2D.Double.toString()"
    ],
    "java.lang.integer.getinteger": [
        "java.lang.Integer.getInteger(java.lang.String)",
        "java.lang.Integer.getInteger(java.lang.String,java.lang.Integer)",
        "java.lang.Integer.getInteger(java.lang.String,int)"
    ],
    "javax.activation.datahandler.getinputstream": [
        "javax.activation.DataHandler.getInputStream()"
    ],
    "java.util.zip.deflater.end": [
        "java.util.zip.Deflater.end()"
    ],
    "javax.management.relation.relationservice.getallrelationids": [
        "javax.management.relation.RelationService.getAllRelationIds()"
    ],
    "java.nio.channels.filelock.channel": [
        "java.nio.channels.FileLock.channel()"
    ],
    "javax.swing.table.abstracttablemodel.firetablestructurechanged": [
        "javax.swing.table.AbstractTableModel.fireTableStructureChanged()"
    ],
    "javax.swing.text.editorkit.createcaret": [
        "javax.swing.text.EditorKit.createCaret()"
    ],
    "javax.swing.jcomponent.getheight": [
        "javax.swing.JComponent.getHeight()"
    ],
    "org.w3c.dom.characterdata.insertdata": [
        "org.w3c.dom.CharacterData.insertData(int,java.lang.String)"
    ],
    "java.awt.window.addpropertychangelistener": [
        "java.awt.Window.addPropertyChangeListener(java.beans.PropertyChangeListener)",
        "java.awt.Window.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"
    ],
    "javax.xml.soap.soapfault.setfaultrole": [
        "javax.xml.soap.SOAPFault.setFaultRole(java.lang.String)"
    ],
    "java.lang.float.compare": [
        "java.lang.Float.compare(float,float)"
    ],
    "javax.swing.spring.getminimumvalue": [
        "javax.swing.Spring.getMinimumValue()"
    ],
    "javax.management.descriptor.clone": [
        "javax.management.Descriptor.clone()"
    ],
    "javax.swing.plaf.synth.synthmenuui.propertychange": [
        "javax.swing.plaf.synth.SynthMenuUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "javax.swing.jtable.movecolumn": [
        "javax.swing.JTable.moveColumn(int,int)"
    ],
    "java.util.concurrent.concurrenthashmap.searchvalues": [
        "java.util.concurrent.ConcurrentHashMap.searchValues(long,java.util.function.Function<? super,? extends U>)"
    ],
    "java.util.concurrent.executors.defaultthreadfactory": [
        "java.util.concurrent.Executors.defaultThreadFactory()"
    ],
    "javax.swing.defaultrowsorter.convertrowindextomodel": [
        "javax.swing.DefaultRowSorter.convertRowIndexToModel(int)"
    ],
    "javax.swing.jinternalframe.jdesktopicon.setinternalframe": [
        "javax.swing.JInternalFrame.JDesktopIcon.setInternalFrame(javax.swing.JInternalFrame)"
    ],
    "java.awt.focustraversalpolicy.getcomponentbefore": [
        "java.awt.FocusTraversalPolicy.getComponentBefore(java.awt.Container,java.awt.Component)"
    ],
    "java.util.concurrent.completionstage.applytoeither": [
        "java.util.concurrent.CompletionStage.applyToEither(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Function<? super,U>)",
        "java.util.concurrent.CompletionStage.applyToEither(java.util.concurrent.CompletionStage<? extends java.util.concurrent.CompletionStage>,java.util.function.Function<? super,U>)"
    ],
    "org.omg.dynamicany.dynenumoperations.set_as_ulong": [
        "org.omg.DynamicAny.DynEnumOperations.set_as_ulong(int)"
    ],
    "java.nio.channels.filechannel.trylock": [
        "java.nio.channels.FileChannel.tryLock()",
        "java.nio.channels.FileChannel.tryLock(long,long,boolean)"
    ],
    "javax.swing.abstractbutton.createchangelistener": [
        "javax.swing.AbstractButton.createChangeListener()"
    ],
    "javax.security.sasl.sasl.getsaslclientfactories": [
        "javax.security.sasl.Sasl.getSaslClientFactories()"
    ],
    "javax.swing.abstractbutton.getrollovericon": [
        "javax.swing.AbstractButton.getRolloverIcon()"
    ],
    "javax.naming.name.size": [
        "javax.naming.Name.size()"
    ],
    "java.lang.invoke.switchpoint.guardwithtest": [
        "java.lang.invoke.SwitchPoint.guardWithTest(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)"
    ],
    "javax.management.relation.relationservicembean.findrelationsoftype": [
        "javax.management.relation.RelationServiceMBean.findRelationsOfType(java.lang.String)"
    ],
    "javax.management.mbeanserver.unregistermbean": [
        "javax.management.MBeanServer.unregisterMBean(javax.management.ObjectName)"
    ],
    "java.awt.trayicon.getmouselisteners": [
        "java.awt.TrayIcon.getMouseListeners()"
    ],
    "java.lang.invoke.constantcallsite.gettarget": [
        "java.lang.invoke.ConstantCallSite.getTarget()"
    ],
    "java.util.locale.languagerange.mapequivalents": [
        "java.util.Locale.LanguageRange.mapEquivalents(java.util.List<java.util.Locale.LanguageRange>,,java.util.List<java.lang.String>>)"
    ],
    "javax.swing.progressmonitor.setmaximum": [
        "javax.swing.ProgressMonitor.setMaximum(int)"
    ],
    "org.omg.dynamicany._dynanystub.to_any": [
        "org.omg.DynamicAny._DynAnyStub.to_any()"
    ],
    "java.nio.file.attribute.basicfileattributeview.readattributes": [
        "java.nio.file.attribute.BasicFileAttributeView.readAttributes()"
    ],
    "java.util.regex.pattern.pattern": [
        "java.util.regex.Pattern.pattern()"
    ],
    "java.security.security.getprovider": [
        "java.security.Security.getProvider(java.lang.String)"
    ],
    "javax.swing.plaf.multi.multiscrollbarui.update": [
        "javax.swing.plaf.multi.MultiScrollBarUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.lang.invoke.methodhandles.lookup.lookupmodes": [
        "java.lang.invoke.MethodHandles.Lookup.lookupModes()"
    ],
    "javax.swing.text.styleconstants.setspacebelow": [
        "javax.swing.text.StyleConstants.setSpaceBelow(javax.swing.text.MutableAttributeSet,float)"
    ],
    "java.text.decimalformat.getnegativeprefix": [
        "java.text.DecimalFormat.getNegativePrefix()"
    ],
    "javax.imageio.imagewriter.processimagecomplete": [
        "javax.imageio.ImageWriter.processImageComplete()"
    ],
    "javax.sql.rowset.baserowset.setdate": [
        "javax.sql.rowset.BaseRowSet.setDate(java.lang.String,java.sql.Date)",
        "javax.sql.rowset.BaseRowSet.setDate(int,java.sql.Date)",
        "javax.sql.rowset.BaseRowSet.setDate(int,java.sql.Date,java.util.Calendar)",
        "javax.sql.rowset.BaseRowSet.setDate(java.lang.String,java.sql.Date,java.util.Calendar)"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.installdefaults": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.installDefaults()"
    ],
    "javax.xml.stream.xmloutputfactory.createxmleventwriter": [
        "javax.xml.stream.XMLOutputFactory.createXMLEventWriter(javax.xml.transform.Result)",
        "javax.xml.stream.XMLOutputFactory.createXMLEventWriter(java.io.Writer)",
        "javax.xml.stream.XMLOutputFactory.createXMLEventWriter(java.io.OutputStream)",
        "javax.xml.stream.XMLOutputFactory.createXMLEventWriter(java.io.OutputStream,java.lang.String)"
    ],
    "org.omg.corba.portable.outputstream.write_wchar": [
        "org.omg.CORBA.portable.OutputStream.write_wchar(char)"
    ],
    "java.util.missingformatwidthexception.getformatspecifier": [
        "java.util.MissingFormatWidthException.getFormatSpecifier()"
    ],
    "java.util.concurrent.copyonwritearraylist.spliterator": [
        "java.util.concurrent.CopyOnWriteArrayList.spliterator()"
    ],
    "javax.xml.bind.datatypeconverterinterface.printqname": [
        "javax.xml.bind.DatatypeConverterInterface.printQName(javax.xml.namespace.QName,javax.xml.namespace.NamespaceContext)"
    ],
    "javax.script.simplescriptcontext.getscopes": [
        "javax.script.SimpleScriptContext.getScopes()"
    ],
    "java.util.concurrent.forkjointask.exec": [
        "java.util.concurrent.ForkJoinTask.exec()"
    ],
    "java.lang.reflect.field.getbyte": [
        "java.lang.reflect.Field.getByte(java.lang.Object)"
    ],
    "java.awt.shape.getpathiterator": [
        "java.awt.Shape.getPathIterator(java.awt.geom.AffineTransform,double)",
        "java.awt.Shape.getPathIterator(java.awt.geom.AffineTransform)"
    ],
    "javax.swing.desktopmanager.minimizeframe": [
        "javax.swing.DesktopManager.minimizeFrame(javax.swing.JInternalFrame)"
    ],
    "java.util.concurrent.forkjointask.peeknextlocaltask": [
        "java.util.concurrent.ForkJoinTask.peekNextLocalTask()"
    ],
    "java.awt.component.tostring": [
        "java.awt.Component.toString()"
    ],
    "javax.swing.text.compositeview.replace": [
        "javax.swing.text.CompositeView.replace(int,int,javax.swing.text.View[])"
    ],
    "org.omg.portableserver.poaoperations.id": [
        "org.omg.PortableServer.POAOperations.id()"
    ],
    "javax.rmi.corba.util.wrapexception": [
        "javax.rmi.CORBA.Util.wrapException(java.lang.Throwable)"
    ],
    "javax.swing.text.keymap.getkeystrokesforaction": [
        "javax.swing.text.Keymap.getKeyStrokesForAction(javax.swing.Action)"
    ],
    "javax.tools.diagnostic.getcode": [
        "javax.tools.Diagnostic.getCode()"
    ],
    "javax.print.attribute.enumsyntax.readresolve": [
        "javax.print.attribute.EnumSyntax.readResolve()"
    ],
    "javax.xml.soap.saajmetafactory.newsoapfactory": [
        "javax.xml.soap.SAAJMetaFactory.newSOAPFactory(java.lang.String)"
    ],
    "java.beans.featuredescriptor.setexpert": [
        "java.beans.FeatureDescriptor.setExpert(boolean)"
    ],
    "java.util.logging.streamhandler.isloggable": [
        "java.util.logging.StreamHandler.isLoggable(java.util.logging.LogRecord)"
    ],
    "java.awt.gridbaglayout.invalidatelayout": [
        "java.awt.GridBagLayout.invalidateLayout(java.awt.Container)"
    ],
    "java.awt.image.bufferedimage.getmintilex": [
        "java.awt.image.BufferedImage.getMinTileX()"
    ],
    "javax.xml.ws.wsaddressing.w3cendpointreferencebuilder.address": [
        "javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.address(java.lang.String)"
    ],
    "javax.swing.comboboxeditor.getitem": [
        "javax.swing.ComboBoxEditor.getItem()"
    ],
    "java.util.spi.localenameprovider.getdisplayvariant": [
        "java.util.spi.LocaleNameProvider.getDisplayVariant(java.lang.String,java.util.Locale)"
    ],
    "java.util.stream.doublestream.of": [
        "java.util.stream.DoubleStream.of(double...)",
        "java.util.stream.DoubleStream.of(double)"
    ],
    "java.security.keypair.getprivate": [
        "java.security.KeyPair.getPrivate()"
    ],
    "java.lang.management.memoryusage.getused": [
        "java.lang.management.MemoryUsage.getUsed()"
    ],
    "javax.swing.text.abstractdocument.elementedit.getchildrenadded": [
        "javax.swing.text.AbstractDocument.ElementEdit.getChildrenAdded()"
    ],
    "java.nio.channels.serversocketchannel.getlocaladdress": [
        "java.nio.channels.ServerSocketChannel.getLocalAddress()"
    ],
    "java.awt.im.inputcontext.setcompositionenabled": [
        "java.awt.im.InputContext.setCompositionEnabled(boolean)"
    ],
    "javax.swing.imageicon.getaccessiblecontext": [
        "javax.swing.ImageIcon.getAccessibleContext()"
    ],
    "java.nio.channels.datagramchannel.getlocaladdress": [
        "java.nio.channels.DatagramChannel.getLocalAddress()"
    ],
    "javax.swing.plaf.basic.basictoolbarui.setbordertononrollover": [
        "javax.swing.plaf.basic.BasicToolBarUI.setBorderToNonRollover(java.awt.Component)"
    ],
    "javax.management.notificationbroadcaster.getnotificationinfo": [
        "javax.management.NotificationBroadcaster.getNotificationInfo()"
    ],
    "java.awt.gridbaglayout.layoutcontainer": [
        "java.awt.GridBagLayout.layoutContainer(java.awt.Container)"
    ],
    "java.io.objectinputstream.close": [
        "java.io.ObjectInputStream.close()"
    ],
    "javax.swing.table.tablecolumnmodel.setselectionmodel": [
        "javax.swing.table.TableColumnModel.setSelectionModel(javax.swing.ListSelectionModel)"
    ],
    "java.awt.window.setbounds": [
        "java.awt.Window.setBounds(java.awt.Rectangle)",
        "java.awt.Window.setBounds(int,int,int,int)"
    ],
    "java.util.concurrent.locks.stampedlock.unlock": [
        "java.util.concurrent.locks.StampedLock.unlock(long)"
    ],
    "java.util.concurrent.locks.abstractqueuedsynchronizer.conditionobject.getwaitqueuelength": [
        "java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.getWaitQueueLength()"
    ],
    "java.util.zip.zipoutputstream.putnextentry": [
        "java.util.zip.ZipOutputStream.putNextEntry(java.util.zip.ZipEntry)"
    ],
    "javax.management.loading.mletcontent.getcodebase": [
        "javax.management.loading.MLetContent.getCodeBase()"
    ],
    "java.lang.string.getbytes": [
        "java.lang.String.getBytes(java.lang.String)",
        "java.lang.String.getBytes(java.nio.charset.Charset)",
        "java.lang.String.getBytes()"
    ],
    "java.nio.file.attribute.filetime.tomillis": [
        "java.nio.file.attribute.FileTime.toMillis()"
    ],
    "java.io.randomaccessfile.skipbytes": [
        "java.io.RandomAccessFile.skipBytes(int)"
    ],
    "javax.swing.text.html.minimalhtmlwriter.writeattributes": [
        "javax.swing.text.html.MinimalHTMLWriter.writeAttributes(javax.swing.text.AttributeSet)"
    ],
    "java.nio.file.filestore.getattribute": [
        "java.nio.file.FileStore.getAttribute(java.lang.String)"
    ],
    "javax.swing.abstractbutton.setdisabledicon": [
        "javax.swing.AbstractButton.setDisabledIcon(javax.swing.Icon)"
    ],
    "java.io.randomaccessfile.writebytes": [
        "java.io.RandomAccessFile.writeBytes(java.lang.String)"
    ],
    "java.sql.clob.getcharacterstream": [
        "java.sql.Clob.getCharacterStream()",
        "java.sql.Clob.getCharacterStream(long,long)"
    ],
    "javax.swing.jseparator.getui": [
        "javax.swing.JSeparator.getUI()"
    ],
    "org.omg.cosnaming.namingcontextoperations.rebind": [
        "org.omg.CosNaming.NamingContextOperations.rebind(org.omg.CosNaming.NameComponent[],org.omg.CORBA.Object)"
    ],
    "org.omg.dynamicany._dynstructstub.get_ulonglong": [
        "org.omg.DynamicAny._DynStructStub.get_ulonglong()"
    ],
    "javax.management.relation.relationservicembean.setrole": [
        "javax.management.relation.RelationServiceMBean.setRole(java.lang.String,javax.management.relation.Role)"
    ],
    "java.security.cert.certpathvalidator.getrevocationchecker": [
        "java.security.cert.CertPathValidator.getRevocationChecker()"
    ],
    "javax.swing.plaf.synth.synthlookandfeel.getdefaults": [
        "javax.swing.plaf.synth.SynthLookAndFeel.getDefaults()"
    ],
    "javax.xml.stream.xmleventwriter.setprefix": [
        "javax.xml.stream.XMLEventWriter.setPrefix(java.lang.String,java.lang.String)"
    ],
    "javax.swing.plaf.metal.metalcomboboxui.getbaseline": [
        "javax.swing.plaf.metal.MetalComboBoxUI.getBaseline(javax.swing.JComponent,int,int)"
    ],
    "javax.swing.jpopupmenu.getmargin": [
        "javax.swing.JPopupMenu.getMargin()"
    ],
    "javax.crypto.cipherinputstream.skip": [
        "javax.crypto.CipherInputStream.skip(long)"
    ],
    "java.lang.processbuilder.redirect.type.values": [
        "java.lang.ProcessBuilder.Redirect.Type.values()"
    ],
    "java.time.format.datetimeformatterbuilder.appendinstant": [
        "java.time.format.DateTimeFormatterBuilder.appendInstant()",
        "java.time.format.DateTimeFormatterBuilder.appendInstant(int)"
    ],
    "java.awt.renderinghints.key.intkey": [
        "java.awt.RenderingHints.Key.intKey()"
    ],
    "java.awt.geom.cubiccurve2d.setcurve": [
        "java.awt.geom.CubicCurve2D.setCurve(double,double,double,double,double,double,double,double)",
        "java.awt.geom.CubicCurve2D.setCurve(double[],int)",
        "java.awt.geom.CubicCurve2D.setCurve(java.awt.geom.Point2D[],int)",
        "java.awt.geom.CubicCurve2D.setCurve(java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D)",
        "java.awt.geom.CubicCurve2D.setCurve(java.awt.geom.CubicCurve2D)"
    ],
    "javax.swing.transferhandler.transfersupport.getuserdropaction": [
        "javax.swing.TransferHandler.TransferSupport.getUserDropAction()"
    ],
    "java.time.zoneddatetime.withlateroffsetatoverlap": [
        "java.time.ZonedDateTime.withLaterOffsetAtOverlap()"
    ],
    "java.awt.component.checkimage": [
        "java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)",
        "java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"
    ],
    "java.sql.callablestatement.geturl": [
        "java.sql.CallableStatement.getURL(java.lang.String)",
        "java.sql.CallableStatement.getURL(int)"
    ],
    "java.awt.component.processfocusevent": [
        "java.awt.Component.processFocusEvent(java.awt.event.FocusEvent)"
    ],
    "java.util.concurrent.concurrentlinkedqueue.addall": [
        "java.util.concurrent.ConcurrentLinkedQueue.addAll(java.util.Collection<? extends java.util.concurrent.ConcurrentLinkedQueue>)",
        "java.util.concurrent.ConcurrentLinkedQueue.addAll(java.util.Collection<? extends E>)"
    ],
    "javax.swing.jmenu.getcomponent": [
        "javax.swing.JMenu.getComponent()"
    ],
    "javax.swing.border.matteborder.gettileicon": [
        "javax.swing.border.MatteBorder.getTileIcon()"
    ],
    "javax.swing.tree.defaulttreemodel.nodeswereinserted": [
        "javax.swing.tree.DefaultTreeModel.nodesWereInserted(javax.swing.tree.TreeNode,int[])"
    ],
    "javax.xml.soap.attachmentpart.setrawcontentbytes": [
        "javax.xml.soap.AttachmentPart.setRawContentBytes(byte[],int,int,java.lang.String)"
    ],
    "java.awt.image.componentsamplemodel.getsamples": [
        "java.awt.image.ComponentSampleModel.getSamples(int,int,int,int,int,int[],java.awt.image.DataBuffer)"
    ],
    "java.awt.image.renderedimage.gettileheight": [
        "java.awt.image.RenderedImage.getTileHeight()"
    ],
    "org.omg.dynamicany._dynsequencestub.insert_boolean": [
        "org.omg.DynamicAny._DynSequenceStub.insert_boolean(boolean)"
    ],
    "javax.xml.soap.soapexception.getmessage": [
        "javax.xml.soap.SOAPException.getMessage()"
    ],
    "java.net.networkinterface.getinterfaceaddresses": [
        "java.net.NetworkInterface.getInterfaceAddresses()"
    ],
    "java.awt.label.getaccessiblecontext": [
        "java.awt.Label.getAccessibleContext()"
    ],
    "java.nio.channels.networkchannel.supportedoptions": [
        "java.nio.channels.NetworkChannel.supportedOptions()"
    ],
    "javax.lang.model.element.element.astype": [
        "javax.lang.model.element.Element.asType()"
    ],
    "org.w3c.dom.ls.lsserializer.write": [
        "org.w3c.dom.ls.LSSerializer.write(org.w3c.dom.Node,org.w3c.dom.ls.LSOutput)"
    ],
    "org.omg.corba.any.type": [
        "org.omg.CORBA.Any.type(org.omg.CORBA.TypeCode)"
    ],
    "javax.xml.bind.helpers.abstractmarshallerimpl.setencoding": [
        "javax.xml.bind.helpers.AbstractMarshallerImpl.setEncoding(java.lang.String)"
    ],
    "java.awt.menubar.getaccessiblecontext": [
        "java.awt.MenuBar.getAccessibleContext()"
    ],
    "javax.rmi.corba.tie.deactivate": [
        "javax.rmi.CORBA.Tie.deactivate()"
    ],
    "javax.sound.midi.spi.midifilewriter.isfiletypesupported": [
        "javax.sound.midi.spi.MidiFileWriter.isFileTypeSupported(int)",
        "javax.sound.midi.spi.MidiFileWriter.isFileTypeSupported(int,javax.sound.midi.Sequence)"
    ],
    "java.sql.connection.setreadonly": [
        "java.sql.Connection.setReadOnly(boolean)"
    ],
    "java.util.navigableset.higher": [
        "java.util.NavigableSet.higher(java.util.NavigableSet)",
        "java.util.NavigableSet.higher(E)"
    ],
    "java.awt.font.shapegraphicattribute.getdescent": [
        "java.awt.font.ShapeGraphicAttribute.getDescent()"
    ],
    "javax.imageio.plugins.jpeg.jpegimagewriteparam.getachuffmantables": [
        "javax.imageio.plugins.jpeg.JPEGImageWriteParam.getACHuffmanTables()"
    ],
    "javax.net.ssl.sslserversocket.getenabledprotocols": [
        "javax.net.ssl.SSLServerSocket.getEnabledProtocols()"
    ],
    "javax.xml.soap.soapheader.addupgradeheaderelement": [
        "javax.xml.soap.SOAPHeader.addUpgradeHeaderElement(java.util.Iterator)",
        "javax.xml.soap.SOAPHeader.addUpgradeHeaderElement(java.lang.String[])",
        "javax.xml.soap.SOAPHeader.addUpgradeHeaderElement(java.lang.String)"
    ],
    "java.nio.file.spi.filesystemprovider.delete": [
        "java.nio.file.spi.FileSystemProvider.delete(java.nio.file.Path)"
    ],
    "java.util.linkedhashmap.entryset": [
        "java.util.LinkedHashMap.entrySet()"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getmenuselectedbackground": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getMenuSelectedBackground()"
    ],
    "org.w3c.dom.ls.lsparser.getbusy": [
        "org.w3c.dom.ls.LSParser.getBusy()"
    ],
    "java.time.format.datetimeformatterbuilder.parsedefaulting": [
        "java.time.format.DateTimeFormatterBuilder.parseDefaulting(java.time.temporal.TemporalField,long)"
    ],
    "javax.swing.plaf.listui.indextolocation": [
        "javax.swing.plaf.ListUI.indexToLocation(javax.swing.JList,int)"
    ],
    "java.beans.beancontext.beancontextchildsupport.firevetoablechange": [
        "java.beans.beancontext.BeanContextChildSupport.fireVetoableChange(java.lang.String,java.lang.Object,java.lang.Object)"
    ],
    "org.omg.dynamicany._dynsequencestub.get_float": [
        "org.omg.DynamicAny._DynSequenceStub.get_float()"
    ],
    "javax.sql.rowset.jdbcrowset.setshowdeleted": [
        "javax.sql.rowset.JdbcRowSet.setShowDeleted(boolean)"
    ],
    "java.awt.popupmenu.addnotify": [
        "java.awt.PopupMenu.addNotify()"
    ],
    "java.util.stream.doublestream.allmatch": [
        "java.util.stream.DoubleStream.allMatch(java.util.function.DoublePredicate)"
    ],
    "javax.swing.jtabbedpane.setdisablediconat": [
        "javax.swing.JTabbedPane.setDisabledIconAt(int,javax.swing.Icon)"
    ],
    "java.util.concurrent.atomic.atomicintegerarray.addandget": [
        "java.util.concurrent.atomic.AtomicIntegerArray.addAndGet(int,int)"
    ],
    "java.awt.geom.rectangle2d.float.gety": [
        "java.awt.geom.Rectangle2D.Float.getY()"
    ],
    "javax.accessibility.accessibleextendedtext.gettextrange": [
        "javax.accessibility.AccessibleExtendedText.getTextRange(int,int)"
    ],
    "java.net.cacherequest.getbody": [
        "java.net.CacheRequest.getBody()"
    ],
    "javax.swing.plaf.synth.synthui.getcontext": [
        "javax.swing.plaf.synth.SynthUI.getContext(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.basic.basicspinnerui.uninstallui": [
        "javax.swing.plaf.basic.BasicSpinnerUI.uninstallUI(javax.swing.JComponent)"
    ],
    "java.awt.color.colorspace.getnumcomponents": [
        "java.awt.color.ColorSpace.getNumComponents()"
    ],
    "javax.print.attribute.standard.multipledocumenthandling.getenumvaluetable": [
        "javax.print.attribute.standard.MultipleDocumentHandling.getEnumValueTable()"
    ],
    "javax.xml.crypto.dom.domcryptocontext.getproperty": [
        "javax.xml.crypto.dom.DOMCryptoContext.getProperty(java.lang.String)"
    ],
    "java.security.cert.x509crlentry.getencoded": [
        "java.security.cert.X509CRLEntry.getEncoded()"
    ],
    "javax.script.simplebindings.entryset": [
        "javax.script.SimpleBindings.entrySet()"
    ],
    "java.nio.file.standardcopyoption.valueof": [
        "java.nio.file.StandardCopyOption.valueOf(java.lang.String)"
    ],
    "javax.swing.filechooser.filesystemview.getsystemtypedescription": [
        "javax.swing.filechooser.FileSystemView.getSystemTypeDescription(java.io.File)"
    ],
    "javax.xml.soap.soapfault.getfaultcodeasqname": [
        "javax.xml.soap.SOAPFault.getFaultCodeAsQName()"
    ],
    "java.sql.sqlinput.readtime": [
        "java.sql.SQLInput.readTime()"
    ],
    "java.util.concurrent.concurrentlinkeddeque.iterator": [
        "java.util.concurrent.ConcurrentLinkedDeque.iterator()"
    ],
    "java.util.logging.logmanager.getlogger": [
        "java.util.logging.LogManager.getLogger(java.lang.String)"
    ],
    "javax.xml.soap.soapheaderelement.setrole": [
        "javax.xml.soap.SOAPHeaderElement.setRole(java.lang.String)"
    ],
    "java.io.randomaccessfile.getfd": [
        "java.io.RandomAccessFile.getFD()"
    ],
    "java.util.illegalformatcodepointexception.getcodepoint": [
        "java.util.IllegalFormatCodePointException.getCodePoint()"
    ],
    "javax.swing.jtable.getuiclassid": [
        "javax.swing.JTable.getUIClassID()"
    ],
    "java.net.socketoptions.getoption": [
        "java.net.SocketOptions.getOption(int)"
    ],
    "javax.swing.text.defaultstyleddocument.getcharacterelement": [
        "javax.swing.text.DefaultStyledDocument.getCharacterElement(int)"
    ],
    "javax.imageio.iioparam.getcontroller": [
        "javax.imageio.IIOParam.getController()"
    ],
    "javax.swing.jcomponent.setdebuggraphicsoptions": [
        "javax.swing.JComponent.setDebugGraphicsOptions(int)"
    ],
    "javax.management.objectname.compareto": [
        "javax.management.ObjectName.compareTo(javax.management.ObjectName)"
    ],
    "javax.management.openmbean.compositedata.tostring": [
        "javax.management.openmbean.CompositeData.toString()"
    ],
    "java.time.instant.toepochmilli": [
        "java.time.Instant.toEpochMilli()"
    ],
    "java.security.spec.ecfieldf2m.hashcode": [
        "java.security.spec.ECFieldF2m.hashCode()"
    ],
    "javax.swing.plaf.multi.multisliderui.getminimumsize": [
        "javax.swing.plaf.multi.MultiSliderUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "java.sql.callablestatement.getblob": [
        "java.sql.CallableStatement.getBlob(int)",
        "java.sql.CallableStatement.getBlob(java.lang.String)"
    ],
    "java.awt.fontmetrics.getlinemetrics": [
        "java.awt.FontMetrics.getLineMetrics(java.text.CharacterIterator,int,int,java.awt.Graphics)",
        "java.awt.FontMetrics.getLineMetrics(java.lang.String,int,int,java.awt.Graphics)",
        "java.awt.FontMetrics.getLineMetrics(java.lang.String,java.awt.Graphics)",
        "java.awt.FontMetrics.getLineMetrics(char[],int,int,java.awt.Graphics)"
    ],
    "javax.swing.plaf.multi.multitooltipui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiToolTipUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "java.nio.file.attribute.posixfilepermissions.tostring": [
        "java.nio.file.attribute.PosixFilePermissions.toString(java.util.Set<java.nio.file.attribute.PosixFilePermission>)"
    ],
    "org.ietf.jgss.gsscredential.equals": [
        "org.ietf.jgss.GSSCredential.equals(java.lang.Object)"
    ],
    "javax.sql.rowset.baserowset.setasciistream": [
        "javax.sql.rowset.BaseRowSet.setAsciiStream(int,java.io.InputStream,int)",
        "javax.sql.rowset.BaseRowSet.setAsciiStream(java.lang.String,java.io.InputStream,int)",
        "javax.sql.rowset.BaseRowSet.setAsciiStream(int,java.io.InputStream)",
        "javax.sql.rowset.BaseRowSet.setAsciiStream(java.lang.String,java.io.InputStream)"
    ],
    "java.time.chrono.chronolocaldate.plus": [
        "java.time.chrono.ChronoLocalDate.plus(long,java.time.temporal.TemporalUnit)",
        "java.time.chrono.ChronoLocalDate.plus(java.time.temporal.TemporalAmount)"
    ],
    "java.sql.resultset.getarray": [
        "java.sql.ResultSet.getArray(java.lang.String)",
        "java.sql.ResultSet.getArray(int)"
    ],
    "javax.security.auth.callback.callbackhandler.handle": [
        "javax.security.auth.callback.CallbackHandler.handle(javax.security.auth.callback.Callback[])",
        "javax.security.auth.callback.CallbackHandler.handle(javax.security.auth.callback.Callback)"
    ],
    "java.awt.event.keyevent.getkeylocation": [
        "java.awt.event.KeyEvent.getKeyLocation()"
    ],
    "java.nio.channels.selector.select": [
        "java.nio.channels.Selector.select()",
        "java.nio.channels.Selector.select(long)"
    ],
    "javax.swing.plaf.multi.multimenubarui.paint": [
        "javax.swing.plaf.multi.MultiMenuBarUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintseparatorborder": [
        "javax.swing.plaf.synth.SynthPainter.paintSeparatorBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",
        "javax.swing.plaf.synth.SynthPainter.paintSeparatorBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)"
    ],
    "javax.swing.plaf.multi.multiinternalframeui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiInternalFrameUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "java.awt.trayicon.getmousemotionlisteners": [
        "java.awt.TrayIcon.getMouseMotionListeners()"
    ],
    "java.time.offsetdatetime.withoffsetsamelocal": [
        "java.time.OffsetDateTime.withOffsetSameLocal(java.time.ZoneOffset)"
    ],
    "java.util.comparator.thencomparinglong": [
        "java.util.Comparator.thenComparingLong(java.util.function.ToLongFunction<? super T>)",
        "java.util.Comparator.thenComparingLong(java.util.function.ToLongFunction<? super java.util.Comparator>)"
    ],
    "javax.activation.activationdataflavor.getrepresentationclass": [
        "javax.activation.ActivationDataFlavor.getRepresentationClass()"
    ],
    "javax.swing.plaf.synth.synthpainter.painttogglebuttonbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintToggleButtonBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.lang.system.exit": [
        "java.lang.System.exit(int)"
    ],
    "javax.accessibility.accessibletable.getaccessiblerowheader": [
        "javax.accessibility.AccessibleTable.getAccessibleRowHeader()"
    ],
    "java.sql.databasemetadata.supportsdifferenttablecorrelationnames": [
        "java.sql.DatabaseMetaData.supportsDifferentTableCorrelationNames()"
    ],
    "javax.xml.transform.stream.streamsource.setreader": [
        "javax.xml.transform.stream.StreamSource.setReader(java.io.Reader)"
    ],
    "java.sql.databasemetadata.supportspositionedupdate": [
        "java.sql.DatabaseMetaData.supportsPositionedUpdate()"
    ],
    "java.sql.statement.executeupdate": [
        "java.sql.Statement.executeUpdate(java.lang.String,java.lang.String[])",
        "java.sql.Statement.executeUpdate(java.lang.String)",
        "java.sql.Statement.executeUpdate(java.lang.String,int[])",
        "java.sql.Statement.executeUpdate(java.lang.String,int)",
        "java.sql.Statement.executeUpdate(java.lang.String,java.lang.String)"
    ],
    "org.omg.corba.environment.clear": [
        "org.omg.CORBA.Environment.clear()"
    ],
    "java.util.concurrent.atomic.atomicreference.getandset": [
        "java.util.concurrent.atomic.AtomicReference.getAndSet(V)",
        "java.util.concurrent.atomic.AtomicReference.getAndSet(java.util.concurrent.atomic.AtomicReference)"
    ],
    "java.lang.character.unicodeblock.of": [
        "java.lang.Character.UnicodeBlock.of(char)"
    ],
    "java.lang.thread.state.values": [
        "java.lang.Thread.State.values()"
    ],
    "java.awt.image.writableraster.setdataelements": [
        "java.awt.image.WritableRaster.setDataElements(int,int,java.awt.image.Raster)",
        "java.awt.image.WritableRaster.setDataElements(int,int,int,int,java.lang.Object)",
        "java.awt.image.WritableRaster.setDataElements(int,int,java.lang.Object)"
    ],
    "java.util.logging.formatter.gethead": [
        "java.util.logging.Formatter.getHead(java.util.logging.Handler)"
    ],
    "javax.management.relation.relationservice.findrelationsoftype": [
        "javax.management.relation.RelationService.findRelationsOfType(java.lang.String)"
    ],
    "java.util.logging.logrecord.getthrown": [
        "java.util.logging.LogRecord.getThrown()"
    ],
    "javax.swing.text.viewfactory.create": [
        "javax.swing.text.ViewFactory.create(javax.swing.text.Element)"
    ],
    "javax.swing.text.zoneview.setmaxzonesloaded": [
        "javax.swing.text.ZoneView.setMaxZonesLoaded(int)"
    ],
    "java.util.concurrent.locks.locksupport.unpark": [
        "java.util.concurrent.locks.LockSupport.unpark(java.lang.Thread)"
    ],
    "java.util.prefs.preferences.name": [
        "java.util.prefs.Preferences.name()"
    ],
    "javax.swing.text.highlighter.paint": [
        "javax.swing.text.Highlighter.paint(java.awt.Graphics)"
    ],
    "java.lang.class.getdeclaredmethod": [
        "java.lang.Class.getDeclaredMethod(java.lang.String,java.lang.Class<?>)",
        "java.lang.Class.getDeclaredMethod(java.lang.String,java.lang.Class<?>...)"
    ],
    "java.util.propertyresourcebundle.handlekeyset": [
        "java.util.PropertyResourceBundle.handleKeySet()"
    ],
    "java.lang.invoke.methodhandle.astype": [
        "java.lang.invoke.MethodHandle.asType(java.lang.invoke.MethodType)"
    ],
    "java.time.chrono.chronology.period": [
        "java.time.chrono.Chronology.period(int,int,int)"
    ],
    "java.time.localdate.withyear": [
        "java.time.LocalDate.withYear(int)"
    ],
    "java.awt.image.rescaleop.getnumfactors": [
        "java.awt.image.RescaleOp.getNumFactors()"
    ],
    "javax.management.mbeanserverdelegatembean.getmbeanserverid": [
        "javax.management.MBeanServerDelegateMBean.getMBeanServerId()"
    ],
    "org.omg.portableserver.poaoperations.the_parent": [
        "org.omg.PortableServer.POAOperations.the_parent()"
    ],
    "javax.swing.text.defaultstyleddocument.createdefaultroot": [
        "javax.swing.text.DefaultStyledDocument.createDefaultRoot()"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.getlastdraglocation": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.getLastDragLocation()"
    ],
    "javax.swing.progressmonitor.setprogress": [
        "javax.swing.ProgressMonitor.setProgress(int)"
    ],
    "javax.swing.jcolorchooser.setcolor": [
        "javax.swing.JColorChooser.setColor(int)",
        "javax.swing.JColorChooser.setColor(int,int,int)",
        "javax.swing.JColorChooser.setColor(java.awt.Color)"
    ],
    "java.util.function.intpredicate.or": [
        "java.util.function.IntPredicate.or(java.util.function.IntPredicate)"
    ],
    "java.awt.component.addcomponentlistener": [
        "java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"
    ],
    "javax.xml.bind.unmarshaller.geteventhandler": [
        "javax.xml.bind.Unmarshaller.getEventHandler()"
    ],
    "java.util.prefs.preferences.addpreferencechangelistener": [
        "java.util.prefs.Preferences.addPreferenceChangeListener(java.util.prefs.PreferenceChangeListener)"
    ],
    "java.nio.file.files.createdirectories": [
        "java.nio.file.Files.createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>)",
        "java.nio.file.Files.createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>...)"
    ],
    "javax.swing.jwindow.remove": [
        "javax.swing.JWindow.remove(java.awt.Component)"
    ],
    "javax.net.ssl.sslengine.setsslparameters": [
        "javax.net.ssl.SSLEngine.setSSLParameters(javax.net.ssl.SSLParameters)"
    ],
    "javax.swing.jslider.getorientation": [
        "javax.swing.JSlider.getOrientation()"
    ],
    "java.nio.channels.networkchannel.bind": [
        "java.nio.channels.NetworkChannel.bind(java.net.SocketAddress)"
    ],
    "javax.print.attribute.standard.chromaticity.getstringtable": [
        "javax.print.attribute.standard.Chromaticity.getStringTable()"
    ],
    "javax.xml.bind.attachment.attachmentmarshaller.addswarefattachment": [
        "javax.xml.bind.attachment.AttachmentMarshaller.addSwaRefAttachment(javax.activation.DataHandler)"
    ],
    "java.util.bitset.size": [
        "java.util.BitSet.size()"
    ],
    "java.util.spi.timezonenameprovider.getgenericdisplayname": [
        "java.util.spi.TimeZoneNameProvider.getGenericDisplayName(java.lang.String,int,java.util.Locale)"
    ],
    "java.lang.string.equalsignorecase": [
        "java.lang.String.equalsIgnoreCase(java.lang.String)"
    ],
    "java.awt.jobattributes.setminpage": [
        "java.awt.JobAttributes.setMinPage(int)"
    ],
    "java.lang.invoke.methodhandles.guardwithtest": [
        "java.lang.invoke.MethodHandles.guardWithTest(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)"
    ],
    "javax.swing.repaintmanager.setcurrentmanager": [
        "javax.swing.RepaintManager.setCurrentManager(javax.swing.RepaintManager)"
    ],
    "javax.activation.mimetypeparameterlist.tostring": [
        "javax.activation.MimeTypeParameterList.toString()"
    ],
    "java.util.concurrent.locks.reentrantlock.hasqueuedthreads": [
        "java.util.concurrent.locks.ReentrantLock.hasQueuedThreads()"
    ],
    "java.util.calendar.getweeksinweekyear": [
        "java.util.Calendar.getWeeksInWeekYear()"
    ],
    "javax.swing.plaf.metal.metaltheme.getblack": [
        "javax.swing.plaf.metal.MetalTheme.getBlack()"
    ],
    "javax.xml.crypto.dsig.digestmethod.getparameterspec": [
        "javax.xml.crypto.dsig.DigestMethod.getParameterSpec()"
    ],
    "javax.swing.jfilechooser.getfilefilter": [
        "javax.swing.JFileChooser.getFileFilter()"
    ],
    "javax.net.ssl.sslengineresult.getstatus": [
        "javax.net.ssl.SSLEngineResult.getStatus()"
    ],
    "java.time.chrono.era.get": [
        "java.time.chrono.Era.get(java.time.temporal.TemporalField)"
    ],
    "javax.swing.jtable.setdropmode": [
        "javax.swing.JTable.setDropMode(javax.swing.DropMode)"
    ],
    "javax.management.relation.relationservicembean.getallrelationtypenames": [
        "javax.management.relation.RelationServiceMBean.getAllRelationTypeNames()"
    ],
    "org.omg.portableinterceptor.currentoperations.get_slot": [
        "org.omg.PortableInterceptor.CurrentOperations.get_slot(int)"
    ],
    "javax.xml.bind.validationeventlocator.geturl": [
        "javax.xml.bind.ValidationEventLocator.getURL()"
    ],
    "javax.xml.xpath.xpath.getxpathvariableresolver": [
        "javax.xml.xpath.XPath.getXPathVariableResolver()"
    ],
    "java.net.socketimpl.tostring": [
        "java.net.SocketImpl.toString()"
    ],
    "javax.sound.midi.sysexmessage.setmessage": [
        "javax.sound.midi.SysexMessage.setMessage(int,byte[],int)",
        "javax.sound.midi.SysexMessage.setMessage(byte[],int)"
    ],
    "javax.swing.tree.defaulttreemodel.firetreestructurechanged": [
        "javax.swing.tree.DefaultTreeModel.fireTreeStructureChanged(java.lang.Object,java.lang.Object[],int[],java.lang.Object[])"
    ],
    "java.util.hashmap.merge": [
        "java.util.HashMap.merge(K,V,java.util.function.BiFunction<? super,? super,? extends V>)"
    ],
    "javax.naming.binding.setobject": [
        "javax.naming.Binding.setObject(java.lang.Object)"
    ],
    "javax.swing.plaf.multi.multipopupmenuui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiPopupMenuUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "java.lang.throwable.getcause": [
        "java.lang.Throwable.getCause()"
    ],
    "javax.swing.plaf.synth.synthtooltipui.paint": [
        "javax.swing.plaf.synth.SynthToolTipUI.paint(java.awt.Graphics,javax.swing.JComponent)",
        "javax.swing.plaf.synth.SynthToolTipUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)"
    ],
    "javax.swing.jsplitpane.getuiclassid": [
        "javax.swing.JSplitPane.getUIClassID()"
    ],
    "java.util.function.function.identity": [
        "java.util.function.Function.identity()"
    ],
    "javax.swing.plaf.metal.metaltabbedpaneui.getbaselineoffset": [
        "javax.swing.plaf.metal.MetalTabbedPaneUI.getBaselineOffset()"
    ],
    "org.omg.corba.portable.objectimpl._set_policy_override": [
        "org.omg.CORBA.portable.ObjectImpl._set_policy_override(org.omg.CORBA.Policy[],org.omg.CORBA.SetOverrideType)"
    ],
    "javax.swing.defaultlistmodel.toarray": [
        "javax.swing.DefaultListModel.toArray()"
    ],
    "org.omg.corba.portable.outputstream.write_double": [
        "org.omg.CORBA.portable.OutputStream.write_double(double)"
    ],
    "java.lang.long.equals": [
        "java.lang.Long.equals(java.lang.Object)"
    ],
    "javax.swing.uidefaults.getpropertychangelisteners": [
        "javax.swing.UIDefaults.getPropertyChangeListeners()"
    ],
    "java.time.format.datetimeformatterbuilder.appendchronologyid": [
        "java.time.format.DateTimeFormatterBuilder.appendChronologyId()"
    ],
    "javax.management.monitor.gaugemonitormbean.getnotifylow": [
        "javax.management.monitor.GaugeMonitorMBean.getNotifyLow()"
    ],
    "javax.xml.ws.service.addport": [
        "javax.xml.ws.Service.addPort(javax.xml.namespace.QName,java.lang.String,java.lang.String)"
    ],
    "java.nio.file.filevisitresult.valueof": [
        "java.nio.file.FileVisitResult.valueOf(java.lang.String)"
    ],
    "javax.lang.model.element.annotationvaluevisitor.visitannotation": [
        "javax.lang.model.element.AnnotationValueVisitor.visitAnnotation(javax.lang.model.element.AnnotationMirror,javax.lang.model.element.AnnotationValueVisitor)"
    ],
    "javax.swing.plaf.multi.multioptionpaneui.getminimumsize": [
        "javax.swing.plaf.multi.MultiOptionPaneUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "javax.xml.bind.annotation.domhandler.getelement": [
        "javax.xml.bind.annotation.DomHandler.getElement(javax.xml.bind.annotation.DomHandler)"
    ],
    "java.awt.geom.quadcurve2d.subdivide": [
        "java.awt.geom.QuadCurve2D.subdivide(java.awt.geom.QuadCurve2D,java.awt.geom.QuadCurve2D,java.awt.geom.QuadCurve2D)",
        "java.awt.geom.QuadCurve2D.subdivide(java.awt.geom.QuadCurve2D,java.awt.geom.QuadCurve2D)",
        "java.awt.geom.QuadCurve2D.subdivide(double[],int,double[],int,double[],int)"
    ],
    "java.util.regex.matchresult.start": [
        "java.util.regex.MatchResult.start()",
        "java.util.regex.MatchResult.start(int)"
    ],
    "java.sql.callablestatement.setdate": [
        "java.sql.CallableStatement.setDate(java.lang.String,java.sql.Date,java.util.Calendar)",
        "java.sql.CallableStatement.setDate(java.lang.String,java.sql.Date)"
    ],
    "java.util.concurrent.concurrenthashmap.reducekeystoint": [
        "java.util.concurrent.ConcurrentHashMap.reduceKeysToInt(long,java.util.function.ToIntFunction<? super K>,int,java.util.function.IntBinaryOperator)",
        "java.util.concurrent.ConcurrentHashMap.reduceKeysToInt(long,java.util.function.ToIntFunction<? super java.util.concurrent.ConcurrentHashMap>,int,java.util.function.IntBinaryOperator)"
    ],
    "java.lang.reflect.field.getdeclaringclass": [
        "java.lang.reflect.Field.getDeclaringClass()"
    ],
    "javax.sql.rowset.spi.syncproviderexception.getsyncresolver": [
        "javax.sql.rowset.spi.SyncProviderException.getSyncResolver()"
    ],
    "javax.swing.text.defaulteditorkit.getviewfactory": [
        "javax.swing.text.DefaultEditorKit.getViewFactory()"
    ],
    "java.sql.callablestatement.getbyte": [
        "java.sql.CallableStatement.getByte(java.lang.String)",
        "java.sql.CallableStatement.getByte(int)"
    ],
    "javax.swing.spring.getmaximumvalue": [
        "javax.swing.Spring.getMaximumValue()"
    ],
    "javax.accessibility.accessibletable.getaccessibleat": [
        "javax.accessibility.AccessibleTable.getAccessibleAt(int,int)"
    ],
    "javax.xml.xpath.xpath.compile": [
        "javax.xml.xpath.XPath.compile(java.lang.String)"
    ],
    "javax.swing.timer.getlisteners": [
        "javax.swing.Timer.getListeners(java.lang.Class<T>)"
    ],
    "javax.swing.plaf.basic.basictabbedpaneui.getbaselineoffset": [
        "javax.swing.plaf.basic.BasicTabbedPaneUI.getBaselineOffset()"
    ],
    "java.awt.geom.dimension2d.clone": [
        "java.awt.geom.Dimension2D.clone()"
    ],
    "java.util.jar.jarfile.getjarentry": [
        "java.util.jar.JarFile.getJarEntry(java.lang.String)"
    ],
    "javax.print.attribute.standard.jobstate.getname": [
        "javax.print.attribute.standard.JobState.getName()"
    ],
    "org.omg.corba.orb.create_fixed_tc": [
        "org.omg.CORBA.ORB.create_fixed_tc(short,short)"
    ],
    "javax.swing.text.iconview.paint": [
        "javax.swing.text.IconView.paint(java.awt.Graphics,java.awt.Shape)"
    ],
    "javax.swing.jviewport.getextentsize": [
        "javax.swing.JViewport.getExtentSize()"
    ],
    "javax.swing.text.flowview.flowstrategy.removeupdate": [
        "javax.swing.text.FlowView.FlowStrategy.removeUpdate(javax.swing.text.FlowView,javax.swing.event.DocumentEvent,java.awt.Rectangle)"
    ],
    "java.net.proxyselector.select": [
        "java.net.ProxySelector.select(java.net.URI)"
    ],
    "javax.swing.debuggraphics.setcolor": [
        "javax.swing.DebugGraphics.setColor(java.awt.Color)"
    ],
    "java.security.guardedobject.getobject": [
        "java.security.GuardedObject.getObject()"
    ],
    "java.awt.displaymode.getheight": [
        "java.awt.DisplayMode.getHeight()"
    ],
    "javax.swing.plaf.layerui.applypropertychange": [
        "javax.swing.plaf.LayerUI.applyPropertyChange(java.beans.PropertyChangeEvent,javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.setcolumntypename": [
        "javax.sql.rowset.RowSetMetaDataImpl.setColumnTypeName(int,java.lang.String)"
    ],
    "javax.sql.rowset.serial.serialarray.getbasetype": [
        "javax.sql.rowset.serial.SerialArray.getBaseType()"
    ],
    "javax.swing.plaf.metal.metaliconfactory.getmenuitemcheckicon": [
        "javax.swing.plaf.metal.MetalIconFactory.getMenuItemCheckIcon()"
    ],
    "java.util.calendar.get": [
        "java.util.Calendar.get(int)"
    ],
    "java.lang.integer.max": [
        "java.lang.Integer.max(int,int)"
    ],
    "javax.management.mbeanserver.registermbean": [
        "javax.management.MBeanServer.registerMBean(java.lang.Object,javax.management.ObjectName)"
    ],
    "javax.xml.crypto.dsig.canonicalizationmethod.getparameterspec": [
        "javax.xml.crypto.dsig.CanonicalizationMethod.getParameterSpec()"
    ],
    "java.time.chrono.chronology.resolvedate": [
        "java.time.chrono.Chronology.resolveDate(,java.lang.Long>,java.time.format.ResolverStyle)"
    ],
    "java.util.arraylist.size": [
        "java.util.ArrayList.size()"
    ],
    "java.util.arraydeque.offerfirst": [
        "java.util.ArrayDeque.offerFirst(java.util.ArrayDeque)",
        "java.util.ArrayDeque.offerFirst(E)"
    ],
    "java.util.properties.stringpropertynames": [
        "java.util.Properties.stringPropertyNames()"
    ],
    "javax.crypto.spec.pbekeyspec.getkeylength": [
        "javax.crypto.spec.PBEKeySpec.getKeyLength()"
    ],
    "javax.xml.bind.binder.marshal": [
        "javax.xml.bind.Binder.marshal(java.lang.Object,javax.xml.bind.Binder)"
    ],
    "java.awt.dnd.dragsourcecontext.setcursor": [
        "java.awt.dnd.DragSourceContext.setCursor(java.awt.Cursor)"
    ],
    "java.sql.sqlinput.readasciistream": [
        "java.sql.SQLInput.readAsciiStream()"
    ],
    "java.net.socket.getsotimeout": [
        "java.net.Socket.getSoTimeout()"
    ],
    "java.net.inetaddress.getcanonicalhostname": [
        "java.net.InetAddress.getCanonicalHostName()"
    ],
    "javax.swing.jcheckbox.setborderpaintedflat": [
        "javax.swing.JCheckBox.setBorderPaintedFlat(boolean)"
    ],
    "java.nio.bytebuffer.getchar": [
        "java.nio.ByteBuffer.getChar(int)",
        "java.nio.ByteBuffer.getChar()"
    ],
    "javax.swing.timer.stop": [
        "javax.swing.Timer.stop()"
    ],
    "javax.xml.bind.datatypeconverterinterface.printdouble": [
        "javax.xml.bind.DatatypeConverterInterface.printDouble(double)"
    ],
    "java.text.characteriterator.setindex": [
        "java.text.CharacterIterator.setIndex(int)"
    ],
    "java.awt.dnd.dragsourcecontext.adddragsourcelistener": [
        "java.awt.dnd.DragSourceContext.addDragSourceListener(java.awt.dnd.DragSourceListener)"
    ],
    "javax.swing.celleditor.cancelcellediting": [
        "javax.swing.CellEditor.cancelCellEditing()"
    ],
    "java.awt.toolkit.getscreenresolution": [
        "java.awt.Toolkit.getScreenResolution()"
    ],
    "javax.swing.defaultlistmodel.indexof": [
        "javax.swing.DefaultListModel.indexOf(java.lang.Object)",
        "javax.swing.DefaultListModel.indexOf(java.lang.Object,int)"
    ],
    "java.lang.reflect.constructor.getannotatedreturntype": [
        "java.lang.reflect.Constructor.getAnnotatedReturnType()"
    ],
    "org.w3c.dom.domimplementationlist.item": [
        "org.w3c.dom.DOMImplementationList.item(int)"
    ],
    "java.util.arraydeque.clone": [
        "java.util.ArrayDeque.clone()"
    ],
    "javax.swing.plaf.multi.multitableheaderui.getuis": [
        "javax.swing.plaf.multi.MultiTableHeaderUI.getUIs()"
    ],
    "java.sql.callablestatement.setbytes": [
        "java.sql.CallableStatement.setBytes(java.lang.String,byte[])"
    ],
    "java.nio.file.files.setattribute": [
        "java.nio.file.Files.setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption)",
        "java.nio.file.Files.setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption...)"
    ],
    "java.time.localdatetime.range": [
        "java.time.LocalDateTime.range(java.time.temporal.TemporalField)"
    ],
    "java.util.formatflagsconversionmismatchexception.getflags": [
        "java.util.FormatFlagsConversionMismatchException.getFlags()"
    ],
    "javax.print.attribute.standard.printquality.getname": [
        "javax.print.attribute.standard.PrintQuality.getName()"
    ],
    "java.io.chararraywriter.tochararray": [
        "java.io.CharArrayWriter.toCharArray()"
    ],
    "java.sql.sqlxml.setstring": [
        "java.sql.SQLXML.setString(java.lang.String)"
    ],
    "javax.swing.text.elementiterator.first": [
        "javax.swing.text.ElementIterator.first()"
    ],
    "java.security.cert.x509certselector.getsubject": [
        "java.security.cert.X509CertSelector.getSubject()"
    ],
    "java.util.concurrent.concurrenthashmap.keysetview.tostring": [
        "java.util.concurrent.ConcurrentHashMap.KeySetView.toString()"
    ],
    "java.util.scanner.usedelimiter": [
        "java.util.Scanner.useDelimiter(java.util.regex.Pattern)",
        "java.util.Scanner.useDelimiter(java.lang.String)"
    ],
    "javax.swing.jdialog.processwindowevent": [
        "javax.swing.JDialog.processWindowEvent(java.awt.event.WindowEvent)"
    ],
    "javax.swing.jfilechooser.getui": [
        "javax.swing.JFileChooser.getUI()"
    ],
    "java.lang.invoke.methodhandles.invoker": [
        "java.lang.invoke.MethodHandles.invoker(java.lang.invoke.MethodType)"
    ],
    "javax.management.remote.rmi.rmiiiopserverimpl.makeclient": [
        "javax.management.remote.rmi.RMIIIOPServerImpl.makeClient(java.lang.String,javax.security.auth.Subject)"
    ],
    "java.awt.geom.quadcurve2d.getpathiterator": [
        "java.awt.geom.QuadCurve2D.getPathIterator(java.awt.geom.AffineTransform,double)",
        "java.awt.geom.QuadCurve2D.getPathIterator(java.awt.geom.AffineTransform)"
    ],
    "org.omg.dynamicany._dynsequencestub.set_elements_as_dyn_any": [
        "org.omg.DynamicAny._DynSequenceStub.set_elements_as_dyn_any(org.omg.DynamicAny.DynAny[])"
    ],
    "java.beans.beancontext.beancontextservicessupport.removebeancontextserviceslistener": [
        "java.beans.beancontext.BeanContextServicesSupport.removeBeanContextServicesListener(java.beans.beancontext.BeanContextServicesListener)"
    ],
    "java.beans.beancontext.beancontextchildsupport.getbeancontext": [
        "java.beans.beancontext.BeanContextChildSupport.getBeanContext()"
    ],
    "javax.xml.transform.transformerexception.setlocator": [
        "javax.xml.transform.TransformerException.setLocator(javax.xml.transform.SourceLocator)"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.createitemlistener": [
        "javax.swing.plaf.basic.BasicComboBoxUI.createItemListener()"
    ],
    "java.util.arraylist.iterator": [
        "java.util.ArrayList.iterator()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintsliderbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintSliderBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",
        "javax.swing.plaf.synth.SynthPainter.paintSliderBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.management.notificationbroadcaster.removenotificationlistener": [
        "javax.management.NotificationBroadcaster.removeNotificationListener(javax.management.NotificationListener)"
    ],
    "javax.swing.jtable.dolayout": [
        "javax.swing.JTable.doLayout()"
    ],
    "javax.swing.jviewport.reshape": [
        "javax.swing.JViewport.reshape(int,int,int,int)"
    ],
    "java.awt.component.coalesceevents": [
        "java.awt.Component.coalesceEvents(java.awt.AWTEvent,java.awt.AWTEvent)"
    ],
    "javax.swing.tree.treenode.getparent": [
        "javax.swing.tree.TreeNode.getParent()"
    ],
    "java.io.inputstream.read": [
        "java.io.InputStream.read(byte[])",
        "java.io.InputStream.read()",
        "java.io.InputStream.read(byte[],int,int)"
    ],
    "java.lang.package.getimplementationtitle": [
        "java.lang.Package.getImplementationTitle()"
    ],
    "java.security.cert.x509crl.getrevokedcertificate": [
        "java.security.cert.X509CRL.getRevokedCertificate(java.security.cert.X509Certificate)",
        "java.security.cert.X509CRL.getRevokedCertificate(java.math.BigInteger)"
    ],
    "javax.swing.abstractbutton.paintborder": [
        "javax.swing.AbstractButton.paintBorder(java.awt.Graphics)"
    ],
    "javax.management.openmbean.openmbeaninfosupport.hashcode": [
        "javax.management.openmbean.OpenMBeanInfoSupport.hashCode()"
    ],
    "javax.swing.text.defaultcaret.removechangelistener": [
        "javax.swing.text.DefaultCaret.removeChangeListener(javax.swing.event.ChangeListener)"
    ],
    "org.omg.portableserver.lifespanpolicyoperations.value": [
        "org.omg.PortableServer.LifespanPolicyOperations.value()"
    ],
    "javax.swing.plaf.synth.synthspinnerui.createui": [
        "javax.swing.plaf.synth.SynthSpinnerUI.createUI(javax.swing.JComponent)"
    ],
    "javax.net.ssl.sslsocket.starthandshake": [
        "javax.net.ssl.SSLSocket.startHandshake()"
    ],
    "java.util.scanner.nextdouble": [
        "java.util.Scanner.nextDouble()"
    ],
    "javax.accessibility.accessiblecontext.setaccessiblename": [
        "javax.accessibility.AccessibleContext.setAccessibleName(java.lang.String)"
    ],
    "javax.swing.plaf.basic.basicoptionpaneui.burststringinto": [
        "javax.swing.plaf.basic.BasicOptionPaneUI.burstStringInto(java.awt.Container,java.lang.String,int)"
    ],
    "java.sql.connection.clearwarnings": [
        "java.sql.Connection.clearWarnings()"
    ],
    "javax.swing.plaf.basic.basictextui.getkeymapname": [
        "javax.swing.plaf.basic.BasicTextUI.getKeymapName()"
    ],
    "javax.accessibility.accessibletable.isaccessiblerowselected": [
        "javax.accessibility.AccessibleTable.isAccessibleRowSelected(int)"
    ],
    "java.security.security.setproperty": [
        "java.security.Security.setProperty(java.lang.String,java.lang.String)"
    ],
    "javax.xml.ws.spi.servicedelegate.getexecutor": [
        "javax.xml.ws.spi.ServiceDelegate.getExecutor()"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writetime": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeTime(java.sql.Time)"
    ],
    "java.awt.geom.point2d.clone": [
        "java.awt.geom.Point2D.clone()"
    ],
    "java.awt.print.paper.getwidth": [
        "java.awt.print.Paper.getWidth()"
    ],
    "javax.imageio.imagetypespecifier.hashcode": [
        "javax.imageio.ImageTypeSpecifier.hashCode()"
    ],
    "javax.naming.compoundname.get": [
        "javax.naming.CompoundName.get(int)"
    ],
    "javax.xml.bind.jaxbelement.getname": [
        "javax.xml.bind.JAXBElement.getName()"
    ],
    "javax.swing.plaf.basic.basiceditorpaneui.createui": [
        "javax.swing.plaf.basic.BasicEditorPaneUI.createUI(javax.swing.JComponent)"
    ],
    "javax.net.ssl.sslparameters.getuseciphersuitesorder": [
        "javax.net.ssl.SSLParameters.getUseCipherSuitesOrder()"
    ],
    "org.omg.portableinterceptor.serverrequestinfooperations.target_most_derived_interface": [
        "org.omg.PortableInterceptor.ServerRequestInfoOperations.target_most_derived_interface()"
    ],
    "java.rmi.naming.unbind": [
        "java.rmi.Naming.unbind(java.lang.String)"
    ],
    "java.util.zip.zipfile.stream": [
        "java.util.zip.ZipFile.stream()"
    ],
    "java.security.unresolvedpermission.getactions": [
        "java.security.UnresolvedPermission.getActions()"
    ],
    "org.xml.sax.ext.lexicalhandler.startcdata": [
        "org.xml.sax.ext.LexicalHandler.startCDATA()"
    ],
    "org.omg.portableserver._servantlocatorstub.postinvoke": [
        "org.omg.PortableServer._ServantLocatorStub.postinvoke(byte[],org.omg.PortableServer.POA,java.lang.String,java.lang.Object,org.omg.PortableServer.Servant)"
    ],
    "org.omg.corba.any.insert_octet": [
        "org.omg.CORBA.Any.insert_octet(byte)"
    ],
    "java.awt.geom.rectangle2d.double.outcode": [
        "java.awt.geom.Rectangle2D.Double.outcode(double,double)"
    ],
    "org.omg.dynamicany._dynfixedstub.insert_short": [
        "org.omg.DynamicAny._DynFixedStub.insert_short(short)"
    ],
    "javax.swing.jrootpane.createglasspane": [
        "javax.swing.JRootPane.createGlassPane()"
    ],
    "javax.print.streamprintservicefactory.getprintservice": [
        "javax.print.StreamPrintServiceFactory.getPrintService(java.io.OutputStream)"
    ],
    "javax.management.relation.relation.setrole": [
        "javax.management.relation.Relation.setRole(javax.management.relation.Role)"
    ],
    "javax.print.attribute.standard.pagesperminutecolor.getname": [
        "javax.print.attribute.standard.PagesPerMinuteColor.getName()"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.setcurrency": [
        "javax.sql.rowset.RowSetMetaDataImpl.setCurrency(int,boolean)"
    ],
    "org.omg.corba.localobject._release": [
        "org.omg.CORBA.LocalObject._release()"
    ],
    "org.omg.dynamicany._dynanystub.component_count": [
        "org.omg.DynamicAny._DynAnyStub.component_count()"
    ],
    "java.util.jar.attributes.name.tostring": [
        "java.util.jar.Attributes.Name.toString()"
    ],
    "java.security.cert.certificate.tostring": [
        "java.security.cert.Certificate.toString()"
    ],
    "javax.swing.jlayeredpane.putlayer": [
        "javax.swing.JLayeredPane.putLayer(javax.swing.JComponent,int)"
    ],
    "javax.swing.jcombobox.paramstring": [
        "javax.swing.JComboBox.paramString()"
    ],
    "java.util.concurrent.atomic.atomicintegerfieldupdater.decrementandget": [
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.decrementAndGet(T)",
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.decrementAndGet(java.util.concurrent.atomic.AtomicIntegerFieldUpdater)"
    ],
    "javax.swing.transferhandler.getcopyaction": [
        "javax.swing.TransferHandler.getCopyAction()"
    ],
    "javax.crypto.keyagreementspi.engineinit": [
        "javax.crypto.KeyAgreementSpi.engineInit(java.security.Key,java.security.SecureRandom)",
        "javax.crypto.KeyAgreementSpi.engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
    ],
    "javax.swing.jprogressbar.isborderpainted": [
        "javax.swing.JProgressBar.isBorderPainted()"
    ],
    "javax.rmi.corba.stub.tostring": [
        "javax.rmi.CORBA.Stub.toString()"
    ],
    "java.math.bigdecimal.shortvalueexact": [
        "java.math.BigDecimal.shortValueExact()"
    ],
    "javax.swing.jslider.removechangelistener": [
        "javax.swing.JSlider.removeChangeListener(javax.swing.event.ChangeListener)"
    ],
    "javax.net.ssl.sslsocket.gethandshakesession": [
        "javax.net.ssl.SSLSocket.getHandshakeSession()"
    ],
    "java.lang.management.threadinfo.getthreadid": [
        "java.lang.management.ThreadInfo.getThreadId()"
    ],
    "javax.net.ssl.sslcontext.getinstance": [
        "javax.net.ssl.SSLContext.getInstance(java.lang.String,java.lang.String)",
        "javax.net.ssl.SSLContext.getInstance(java.lang.String,java.security.Provider)",
        "javax.net.ssl.SSLContext.getInstance(java.lang.String)"
    ],
    "javax.swing.jcomponent.getclientproperty": [
        "javax.swing.JComponent.getClientProperty(java.lang.Object)"
    ],
    "javax.swing.jtable.preparerenderer": [
        "javax.swing.JTable.prepareRenderer(javax.swing.table.TableCellRenderer,int,int)"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.gettablename": [
        "javax.sql.rowset.RowSetMetaDataImpl.getTableName(int)"
    ],
    "java.util.concurrent.completionstage.thencompose": [
        "java.util.concurrent.CompletionStage.thenCompose(java.util.function.Function<? super,? extends java.util.concurrent.CompletionStage<U>>)"
    ],
    "java.sql.sqloutput.writecharacterstream": [
        "java.sql.SQLOutput.writeCharacterStream(java.io.Reader)"
    ],
    "javax.swing.jfilechooser.resetchoosablefilefilters": [
        "javax.swing.JFileChooser.resetChoosableFileFilters()"
    ],
    "java.util.hashtable.equals": [
        "java.util.Hashtable.equals(java.lang.Object)"
    ],
    "java.nio.channels.filelock.tostring": [
        "java.nio.channels.FileLock.toString()"
    ],
    "javax.management.timer.timer.getnotificationtype": [
        "javax.management.timer.Timer.getNotificationType(java.lang.Integer)"
    ],
    "java.util.zip.zipentry.setcompressedsize": [
        "java.util.zip.ZipEntry.setCompressedSize(long)"
    ],
    "java.awt.borderlayout.getlayoutalignmenty": [
        "java.awt.BorderLayout.getLayoutAlignmentY(java.awt.Container)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintmenuborder": [
        "javax.swing.plaf.synth.SynthPainter.paintMenuBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.util.stream.collectors.groupingbyconcurrent": [
        "java.util.stream.Collectors.groupingByConcurrent(java.util.function.Function<? super,? extends K>,java.util.stream.Collector<? super,,D>)",
        "java.util.stream.Collectors.groupingByConcurrent(java.util.function.Function<? super,? extends K>,java.util.function.Supplier<M>,java.util.stream.Collector<? super,,D>)",
        "java.util.stream.Collectors.groupingByConcurrent(java.util.function.Function<? super,? extends K>)"
    ],
    "java.security.permissioncollection.setreadonly": [
        "java.security.PermissionCollection.setReadOnly()"
    ],
    "java.awt.toolkit.beep": [
        "java.awt.Toolkit.beep()"
    ],
    "java.util.concurrent.countedcompleter.setpendingcount": [
        "java.util.concurrent.CountedCompleter.setPendingCount(int)"
    ],
    "java.awt.geom.cubiccurve2d.double.getx1": [
        "java.awt.geom.CubicCurve2D.Double.getX1()"
    ],
    "java.lang.invoke.methodhandles.lookup.revealdirect": [
        "java.lang.invoke.MethodHandles.Lookup.revealDirect(java.lang.invoke.MethodHandle)"
    ],
    "javax.swing.plaf.synth.synthtreeui.paintborder": [
        "javax.swing.plaf.synth.SynthTreeUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.script.scriptenginefactory.getprogram": [
        "javax.script.ScriptEngineFactory.getProgram(java.lang.String...)"
    ],
    "javax.net.ssl.keymanagerfactory.init": [
        "javax.net.ssl.KeyManagerFactory.init(javax.net.ssl.ManagerFactoryParameters)",
        "javax.net.ssl.KeyManagerFactory.init(java.security.KeyStore,char[])"
    ],
    "java.sql.statement.ispoolable": [
        "java.sql.Statement.isPoolable()"
    ],
    "javax.swing.jfilechooser.setapprovebuttontext": [
        "javax.swing.JFileChooser.setApproveButtonText(java.lang.String)"
    ],
    "java.lang.boolean.logicaland": [
        "java.lang.Boolean.logicalAnd(boolean,boolean)"
    ],
    "javax.management.modelmbean.requiredmodelmbean.getnotificationinfo": [
        "javax.management.modelmbean.RequiredModelMBean.getNotificationInfo()"
    ],
    "org.omg.portableserver.portable.delegate.orb": [
        "org.omg.PortableServer.portable.Delegate.orb(org.omg.PortableServer.Servant)"
    ],
    "javax.swing.jtree.getpathforrow": [
        "javax.swing.JTree.getPathForRow(int)"
    ],
    "javax.swing.event.listselectionevent.getvalueisadjusting": [
        "javax.swing.event.ListSelectionEvent.getValueIsAdjusting()"
    ],
    "java.util.concurrent.atomic.atomicinteger.addandget": [
        "java.util.concurrent.atomic.AtomicInteger.addAndGet(int)"
    ],
    "java.text.collationelementiterator.previous": [
        "java.text.CollationElementIterator.previous()"
    ],
    "java.awt.image.indexcolormodel.getgreen": [
        "java.awt.image.IndexColorModel.getGreen(int)"
    ],
    "java.text.decimalformat.getminimumintegerdigits": [
        "java.text.DecimalFormat.getMinimumIntegerDigits()"
    ],
    "java.lang.invoke.methodhandles.droparguments": [
        "java.lang.invoke.MethodHandles.dropArguments(java.lang.invoke.MethodHandle,int,java.util.List<java.lang.Class<?>>)",
        "java.lang.invoke.MethodHandles.dropArguments(java.lang.invoke.MethodHandle,int,java.lang.Class<?>)",
        "java.lang.invoke.MethodHandles.dropArguments(java.lang.invoke.MethodHandle,int,java.lang.Class<?>...)"
    ],
    "javax.imageio.spi.imagetranscoderspi.getreaderserviceprovidername": [
        "javax.imageio.spi.ImageTranscoderSpi.getReaderServiceProviderName()"
    ],
    "java.lang.reflect.method.getgenericreturntype": [
        "java.lang.reflect.Method.getGenericReturnType()"
    ],
    "javax.lang.model.util.elementscanner6.visittypeparameter": [
        "javax.lang.model.util.ElementScanner6.visitTypeParameter(javax.lang.model.element.TypeParameterElement,javax.lang.model.util.ElementScanner6)"
    ],
    "javax.management.immutabledescriptor.union": [
        "javax.management.ImmutableDescriptor.union(javax.management.Descriptor...)"
    ],
    "javax.swing.border.lineborder.creategraylineborder": [
        "javax.swing.border.LineBorder.createGrayLineBorder()"
    ],
    "java.awt.print.printerjob.setpageable": [
        "java.awt.print.PrinterJob.setPageable(java.awt.print.Pageable)"
    ],
    "org.omg.dynamicany._dynanystub.get_short": [
        "org.omg.DynamicAny._DynAnyStub.get_short()"
    ],
    "org.w3c.dom.document.setstricterrorchecking": [
        "org.w3c.dom.Document.setStrictErrorChecking(boolean)"
    ],
    "java.util.stream.stream.generate": [
        "java.util.stream.Stream.generate(java.util.function.Supplier<T>)"
    ],
    "java.nio.charset.unmappablecharacterexception.getmessage": [
        "java.nio.charset.UnmappableCharacterException.getMessage()"
    ],
    "javax.xml.transform.sax.saxresult.getlexicalhandler": [
        "javax.xml.transform.sax.SAXResult.getLexicalHandler()"
    ],
    "java.util.collections.list": [
        "java.util.Collections.list(java.util.Enumeration<T>)"
    ],
    "javax.swing.table.defaulttablecellrenderer.setvalue": [
        "javax.swing.table.DefaultTableCellRenderer.setValue(java.lang.Object)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintpasswordfieldbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintPasswordFieldBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.awt.print.paper.getimageableheight": [
        "java.awt.print.Paper.getImageableHeight()"
    ],
    "javax.swing.text.html.stylesheet.getdeclaration": [
        "javax.swing.text.html.StyleSheet.getDeclaration(java.lang.String)"
    ],
    "org.omg.corba.localobject._servant_postinvoke": [
        "org.omg.CORBA.LocalObject._servant_postinvoke(org.omg.CORBA.portable.ServantObject)"
    ],
    "java.time.year.getlong": [
        "java.time.Year.getLong(java.time.temporal.TemporalField)"
    ],
    "java.util.concurrent.delayqueue.drainto": [
        "java.util.concurrent.DelayQueue.drainTo(java.util.Collection<? super E>)",
        "java.util.concurrent.DelayQueue.drainTo(java.util.Collection<? super E>,int)"
    ],
    "javax.xml.crypto.dsig.xmlsignaturefactory.newdigestmethod": [
        "javax.xml.crypto.dsig.XMLSignatureFactory.newDigestMethod(java.lang.String,javax.xml.crypto.dsig.spec.DigestMethodParameterSpec)"
    ],
    "java.sql.resultset.updatebigdecimal": [
        "java.sql.ResultSet.updateBigDecimal(int,java.math.BigDecimal)",
        "java.sql.ResultSet.updateBigDecimal(java.lang.String,java.math.BigDecimal)"
    ],
    "java.util.stream.stream.builder.add": [
        "java.util.stream.Stream.Builder.add(java.util.stream.Stream.Builder)",
        "java.util.stream.Stream.Builder.add(T)"
    ],
    "java.applet.appletcontext.getapplet": [
        "java.applet.AppletContext.getApplet(java.lang.String)"
    ],
    "javax.net.socketfactory.getdefault": [
        "javax.net.SocketFactory.getDefault()"
    ],
    "javax.annotation.processing.roundenvironment.getrootelements": [
        "javax.annotation.processing.RoundEnvironment.getRootElements()"
    ],
    "java.beans.eventhandler.create": [
        "java.beans.EventHandler.create(java.lang.Class<T>,java.lang.Object,java.lang.String,java.lang.String,java.lang.String)",
        "java.beans.EventHandler.create(java.lang.Class<T>,java.lang.Object,java.lang.String)",
        "java.beans.EventHandler.create(java.lang.Class<T>,java.lang.Object,java.lang.String,java.lang.String)"
    ],
    "java.util.zip.zipentry.setlastaccesstime": [
        "java.util.zip.ZipEntry.setLastAccessTime(java.nio.file.attribute.FileTime)"
    ],
    "javax.swing.plaf.nimbus.abstractregionpainter.getpaintcontext": [
        "javax.swing.plaf.nimbus.AbstractRegionPainter.getPaintContext()"
    ],
    "javax.swing.jcolorchooser.getui": [
        "javax.swing.JColorChooser.getUI()"
    ],
    "org.w3c.dom.document.getxmlversion": [
        "org.w3c.dom.Document.getXmlVersion()"
    ],
    "java.awt.graphics.tostring": [
        "java.awt.Graphics.toString()"
    ],
    "javax.accessibility.accessiblevalue.getminimumaccessiblevalue": [
        "javax.accessibility.AccessibleValue.getMinimumAccessibleValue()"
    ],
    "java.awt.mediatracker.checkall": [
        "java.awt.MediaTracker.checkAll(boolean)",
        "java.awt.MediaTracker.checkAll()"
    ],
    "javax.management.openmbean.openmbeanconstructorinfo.hashcode": [
        "javax.management.openmbean.OpenMBeanConstructorInfo.hashCode()"
    ],
    "java.net.uri.getfragment": [
        "java.net.URI.getFragment()"
    ],
    "java.util.optional.empty": [
        "java.util.Optional.empty()"
    ],
    "java.awt.shape.getbounds2d": [
        "java.awt.Shape.getBounds2D()"
    ],
    "javax.swing.plaf.basic.basiclookandfeel.getdefaults": [
        "javax.swing.plaf.basic.BasicLookAndFeel.getDefaults()"
    ],
    "java.awt.font.glyphvector.getnumglyphs": [
        "java.awt.font.GlyphVector.getNumGlyphs()"
    ],
    "javax.swing.defaultbuttonmodel.additemlistener": [
        "javax.swing.DefaultButtonModel.addItemListener(java.awt.event.ItemListener)"
    ],
    "java.lang.invoke.methodhandles.lookup.findstatic": [
        "java.lang.invoke.MethodHandles.Lookup.findStatic(java.lang.Class<?>,java.lang.String,java.lang.invoke.MethodType)"
    ],
    "javax.swing.jframe.setlayout": [
        "javax.swing.JFrame.setLayout(java.awt.LayoutManager)"
    ],
    "javax.xml.namespace.qname.equals": [
        "javax.xml.namespace.QName.equals(java.lang.Object)"
    ],
    "java.lang.invoke.methodhandles.constant": [
        "java.lang.invoke.MethodHandles.constant(java.lang.Class<?>,java.lang.Object)"
    ],
    "java.security.basicpermission.equals": [
        "java.security.BasicPermission.equals(java.lang.Object)"
    ],
    "org.omg.corba.portable.inputstream.read_fixed": [
        "org.omg.CORBA.portable.InputStream.read_fixed()"
    ],
    "org.omg.dynamicany.dynanyoperations.destroy": [
        "org.omg.DynamicAny.DynAnyOperations.destroy()"
    ],
    "javax.xml.bind.datatypeconverterinterface.parseshort": [
        "javax.xml.bind.DatatypeConverterInterface.parseShort(java.lang.String)"
    ],
    "javax.accessibility.accessiblestateset.tostring": [
        "javax.accessibility.AccessibleStateSet.toString()"
    ],
    "java.util.navigableset.iterator": [
        "java.util.NavigableSet.iterator()"
    ],
    "java.awt.rectangle.getbounds2d": [
        "java.awt.Rectangle.getBounds2D()"
    ],
    "javax.swing.jtree.setexpandedstate": [
        "javax.swing.JTree.setExpandedState(javax.swing.tree.TreePath,boolean)"
    ],
    "javax.management.mbeanserverconnection.addnotificationlistener": [
        "javax.management.MBeanServerConnection.addNotificationListener(javax.management.ObjectName,javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)",
        "javax.management.MBeanServerConnection.addNotificationListener(javax.management.ObjectName,javax.management.ObjectName,javax.management.NotificationFilter,java.lang.Object)"
    ],
    "javax.swing.plaf.multi.multilistui.getminimumsize": [
        "javax.swing.plaf.multi.MultiListUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "javax.security.auth.callback.namecallback.getdefaultname": [
        "javax.security.auth.callback.NameCallback.getDefaultName()"
    ],
    "java.security.digestinputstream.tostring": [
        "java.security.DigestInputStream.toString()"
    ],
    "java.util.concurrent.forkjoinpool.getfactory": [
        "java.util.concurrent.ForkJoinPool.getFactory()"
    ],
    "javax.swing.plaf.basic.basicarrowbutton.setdirection": [
        "javax.swing.plaf.basic.BasicArrowButton.setDirection(int)"
    ],
    "javax.swing.jlabel.setdisplayedmnemonic": [
        "javax.swing.JLabel.setDisplayedMnemonic(char)",
        "javax.swing.JLabel.setDisplayedMnemonic(int)"
    ],
    "java.security.keyrep.readresolve": [
        "java.security.KeyRep.readResolve()"
    ],
    "javax.security.auth.callback.confirmationcallback.getoptiontype": [
        "javax.security.auth.callback.ConfirmationCallback.getOptionType()"
    ],
    "javax.swing.text.elementiterator.previous": [
        "javax.swing.text.ElementIterator.previous()"
    ],
    "org.w3c.dom.domlocator.getrelatednode": [
        "org.w3c.dom.DOMLocator.getRelatedNode()"
    ],
    "org.xml.sax.helpers.xmlreaderadapter.ignorablewhitespace": [
        "org.xml.sax.helpers.XMLReaderAdapter.ignorableWhitespace(char[],int,int)"
    ],
    "java.lang.boolean.hashcode": [
        "java.lang.Boolean.hashCode()",
        "java.lang.Boolean.hashCode(boolean)"
    ],
    "java.time.localdatetime.minusseconds": [
        "java.time.LocalDateTime.minusSeconds(long)"
    ],
    "javax.swing.text.html.html.gettag": [
        "javax.swing.text.html.HTML.getTag(java.lang.String)"
    ],
    "java.util.concurrent.atomic.atomicintegerfieldupdater.weakcompareandset": [
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.weakCompareAndSet(java.util.concurrent.atomic.AtomicIntegerFieldUpdater,int,int)",
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.weakCompareAndSet(T,int,int)"
    ],
    "javax.swing.jtable.getautoresizemode": [
        "javax.swing.JTable.getAutoResizeMode()"
    ],
    "javax.management.monitor.countermonitor.setinitthreshold": [
        "javax.management.monitor.CounterMonitor.setInitThreshold(java.lang.Number)"
    ],
    "java.util.collection.stream": [
        "java.util.Collection.stream()"
    ],
    "java.net.socket.getkeepalive": [
        "java.net.Socket.getKeepAlive()"
    ],
    "java.awt.component.disableevents": [
        "java.awt.Component.disableEvents(long)"
    ],
    "javax.swing.plaf.synth.synthlistui.paintborder": [
        "javax.swing.plaf.synth.SynthListUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.text.simpledateformat.clone": [
        "java.text.SimpleDateFormat.clone()"
    ],
    "javax.swing.jtoolbar.paramstring": [
        "javax.swing.JToolBar.paramString()"
    ],
    "javax.annotation.processing.completion.getvalue": [
        "javax.annotation.processing.Completion.getValue()"
    ],
    "java.time.chrono.isoera.valueof": [
        "java.time.chrono.IsoEra.valueOf(java.lang.String)"
    ],
    "javax.swing.tree.defaulttreecellrenderer.gettextnonselectioncolor": [
        "javax.swing.tree.DefaultTreeCellRenderer.getTextNonSelectionColor()"
    ],
    "javax.swing.jsplitpane.settopcomponent": [
        "javax.swing.JSplitPane.setTopComponent(java.awt.Component)"
    ],
    "java.text.numberformat.getminimumfractiondigits": [
        "java.text.NumberFormat.getMinimumFractionDigits()"
    ],
    "javax.swing.text.labelview.getforeground": [
        "javax.swing.text.LabelView.getForeground()"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writeblob": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeBlob(java.sql.Blob)"
    ],
    "org.w3c.dom.events.event.geteventphase": [
        "org.w3c.dom.events.Event.getEventPhase()"
    ],
    "java.util.concurrent.concurrentskiplistmap.replace": [
        "java.util.concurrent.ConcurrentSkipListMap.replace(K,V,V)",
        "java.util.concurrent.ConcurrentSkipListMap.replace(K,V)",
        "java.util.concurrent.ConcurrentSkipListMap.replace(java.util.concurrent.ConcurrentSkipListMap,java.util.concurrent.ConcurrentSkipListMap,java.util.concurrent.ConcurrentSkipListMap)",
        "java.util.concurrent.ConcurrentSkipListMap.replace(java.util.concurrent.ConcurrentSkipListMap,java.util.concurrent.ConcurrentSkipListMap)"
    ],
    "java.io.objectinputstream.getfield.getobjectstreamclass": [
        "java.io.ObjectInputStream.GetField.getObjectStreamClass()"
    ],
    "java.awt.geom.cubiccurve2d.subdivide": [
        "java.awt.geom.CubicCurve2D.subdivide(java.awt.geom.CubicCurve2D,java.awt.geom.CubicCurve2D,java.awt.geom.CubicCurve2D)",
        "java.awt.geom.CubicCurve2D.subdivide(java.awt.geom.CubicCurve2D,java.awt.geom.CubicCurve2D)"
    ],
    "javax.swing.jmenuitem.setenabled": [
        "javax.swing.JMenuItem.setEnabled(boolean)"
    ],
    "javax.swing.borderfactory.createsoftbevelborder": [
        "javax.swing.BorderFactory.createSoftBevelBorder(int)",
        "javax.swing.BorderFactory.createSoftBevelBorder(int,java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Color)",
        "javax.swing.BorderFactory.createSoftBevelBorder(int,java.awt.Color,java.awt.Color)"
    ],
    "javax.sound.midi.synthesizer.getdefaultsoundbank": [
        "javax.sound.midi.Synthesizer.getDefaultSoundbank()"
    ],
    "javax.security.auth.x500.x500privatecredential.destroy": [
        "javax.security.auth.x500.X500PrivateCredential.destroy()"
    ],
    "java.nio.intbuffer.hashcode": [
        "java.nio.IntBuffer.hashCode()"
    ],
    "javax.print.attribute.hashattributeset.add": [
        "javax.print.attribute.HashAttributeSet.add(javax.print.attribute.Attribute)"
    ],
    "javax.xml.soap.soapmessage.getattachment": [
        "javax.xml.soap.SOAPMessage.getAttachment(javax.xml.soap.SOAPElement)"
    ],
    "javax.swing.plaf.multi.multitreeui.createui": [
        "javax.swing.plaf.multi.MultiTreeUI.createUI(javax.swing.JComponent)"
    ],
    "java.awt.event.mouseevent.getpoint": [
        "java.awt.event.MouseEvent.getPoint()"
    ],
    "java.rmi.server.uid.hashcode": [
        "java.rmi.server.UID.hashCode()"
    ],
    "org.w3c.dom.ls.lsresourceresolver.resolveresource": [
        "org.w3c.dom.ls.LSResourceResolver.resolveResource(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
    ],
    "java.util.logging.logrecord.getthreadid": [
        "java.util.logging.LogRecord.getThreadID()"
    ],
    "java.util.concurrent.atomic.atomicmarkablereference.get": [
        "java.util.concurrent.atomic.AtomicMarkableReference.get(boolean[])"
    ],
    "javax.swing.jtable.getselectedrow": [
        "javax.swing.JTable.getSelectedRow()"
    ],
    "org.omg.dynamicany._dynsequencestub.get_length": [
        "org.omg.DynamicAny._DynSequenceStub.get_length()"
    ],
    "java.io.chararraywriter.writeto": [
        "java.io.CharArrayWriter.writeTo(java.io.Writer)"
    ],
    "java.awt.image.databufferbyte.setelem": [
        "java.awt.image.DataBufferByte.setElem(int,int,int)"
    ],
    "java.awt.awteventmulticaster.mouseclicked": [
        "java.awt.AWTEventMulticaster.mouseClicked(java.awt.event.MouseEvent)"
    ],
    "java.beans.propertydescriptor.setreadmethod": [
        "java.beans.PropertyDescriptor.setReadMethod(java.lang.reflect.Method)"
    ],
    "java.time.chrono.thaibuddhistdate.plus": [
        "java.time.chrono.ThaiBuddhistDate.plus(java.time.temporal.TemporalAmount)"
    ],
    "java.time.chrono.chronology.datenow": [
        "java.time.chrono.Chronology.dateNow(java.time.ZoneId)",
        "java.time.chrono.Chronology.dateNow()",
        "java.time.chrono.Chronology.dateNow(java.time.Clock)"
    ],
    "javax.security.auth.login.appconfigurationentry.loginmodulecontrolflag.tostring": [
        "javax.security.auth.login.AppConfigurationEntry.LoginModuleControlFlag.toString()"
    ],
    "java.awt.rectangle.setlocation": [
        "java.awt.Rectangle.setLocation(int,int)",
        "java.awt.Rectangle.setLocation(java.awt.Point)"
    ],
    "org.omg.corba.typecode.length": [
        "org.omg.CORBA.TypeCode.length()"
    ],
    "javax.management.openmbean.simpletype.hashcode": [
        "javax.management.openmbean.SimpleType.hashCode()"
    ],
    "java.awt.radialgradientpaint.getcenterpoint": [
        "java.awt.RadialGradientPaint.getCenterPoint()"
    ],
    "java.sql.statement.getmoreresults": [
        "java.sql.Statement.getMoreResults(int)"
    ],
    "java.time.zoneddatetime.minusweeks": [
        "java.time.ZonedDateTime.minusWeeks(long)"
    ],
    "java.text.parseposition.getindex": [
        "java.text.ParsePosition.getIndex()"
    ],
    "javax.tools.diagnostic.getlinenumber": [
        "javax.tools.Diagnostic.getLineNumber()"
    ],
    "java.time.zoneid.ofoffset": [
        "java.time.ZoneId.ofOffset(java.lang.String,java.time.ZoneOffset)"
    ],
    "javax.print.attribute.standard.orientationrequested.getenumvaluetable": [
        "javax.print.attribute.standard.OrientationRequested.getEnumValueTable()"
    ],
    "javax.swing.jlist.getmodel": [
        "javax.swing.JList.getModel()"
    ],
    "javax.swing.jtextpane.getuiclassid": [
        "javax.swing.JTextPane.getUIClassID()"
    ],
    "java.awt.geom.roundrectangle2d.getarcheight": [
        "java.awt.geom.RoundRectangle2D.getArcHeight()"
    ],
    "java.security.provider.merge": [
        "java.security.Provider.merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction<? super,? super,? extends java.lang.Object>)"
    ],
    "org.omg.corba.contextlist.add": [
        "org.omg.CORBA.ContextList.add(java.lang.String)"
    ],
    "java.awt.color.getred": [
        "java.awt.Color.getRed()"
    ],
    "javax.crypto.cipheroutputstream.close": [
        "javax.crypto.CipherOutputStream.close()"
    ],
    "javax.swing.jmenu.insert": [
        "javax.swing.JMenu.insert(javax.swing.Action,int)",
        "javax.swing.JMenu.insert(java.lang.String,int)",
        "javax.swing.JMenu.insert(javax.swing.JMenuItem,int)"
    ],
    "javax.swing.jtabbedpane.gettooltiptextat": [
        "javax.swing.JTabbedPane.getToolTipTextAt(int)"
    ],
    "javax.swing.text.element.getdocument": [
        "javax.swing.text.Element.getDocument()"
    ],
    "java.util.priorityqueue.comparator": [
        "java.util.PriorityQueue.comparator()"
    ],
    "javax.lang.model.element.element.getenclosingelement": [
        "javax.lang.model.element.Element.getEnclosingElement()"
    ],
    "javax.swing.text.styleconstants.setsuperscript": [
        "javax.swing.text.StyleConstants.setSuperscript(javax.swing.text.MutableAttributeSet,boolean)"
    ],
    "javax.xml.bind.unmarshallerhandler.getresult": [
        "javax.xml.bind.UnmarshallerHandler.getResult()"
    ],
    "javax.sound.sampled.mixer.gettargetlines": [
        "javax.sound.sampled.Mixer.getTargetLines()"
    ],
    "java.util.concurrent.concurrentnavigablemap.descendingkeyset": [
        "java.util.concurrent.ConcurrentNavigableMap.descendingKeySet()"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getprimarycontrol": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControl()"
    ],
    "org.omg.dynamicany._dynvaluestub.component_count": [
        "org.omg.DynamicAny._DynValueStub.component_count()"
    ],
    "javax.xml.crypto.dsig.keyinfo.keyname.getname": [
        "javax.xml.crypto.dsig.keyinfo.KeyName.getName()"
    ],
    "java.lang.process.waitfor": [
        "java.lang.Process.waitFor()",
        "java.lang.Process.waitFor(long,java.util.concurrent.TimeUnit)"
    ],
    "javax.management.monitor.monitor.addobservedobject": [
        "javax.management.monitor.Monitor.addObservedObject(javax.management.ObjectName)"
    ],
    "javax.swing.viewportlayout.minimumlayoutsize": [
        "javax.swing.ViewportLayout.minimumLayoutSize(java.awt.Container)"
    ],
    "javax.swing.plaf.basic.basiclookandfeel.initialize": [
        "javax.swing.plaf.basic.BasicLookAndFeel.initialize()"
    ],
    "javax.management.openmbean.openmbeanoperationinfo.getsignature": [
        "javax.management.openmbean.OpenMBeanOperationInfo.getSignature()"
    ],
    "java.util.stream.collector.of": [
        "java.util.stream.Collector.of(java.util.function.Supplier<R>,,T>,java.util.function.BinaryOperator<R>,java.util.stream.Collector.Characteristics...)"
    ],
    "java.awt.geom.arc2d.setframe": [
        "java.awt.geom.Arc2D.setFrame(double,double,double,double)"
    ],
    "javax.swing.plaf.synth.synthsliderui.paintborder": [
        "javax.swing.plaf.synth.SynthSliderUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.jspinner.updateui": [
        "javax.swing.JSpinner.updateUI()"
    ],
    "java.time.chrono.isochronology.dateepochday": [
        "java.time.chrono.IsoChronology.dateEpochDay(long)"
    ],
    "javax.swing.text.jtextcomponent.droplocation.getindex": [
        "javax.swing.text.JTextComponent.DropLocation.getIndex()"
    ],
    "javax.transaction.xa.xaresource.prepare": [
        "javax.transaction.xa.XAResource.prepare(javax.transaction.xa.Xid)"
    ],
    "org.omg.dynamicany.dynunionoperations.discriminator_kind": [
        "org.omg.DynamicAny.DynUnionOperations.discriminator_kind()"
    ],
    "javax.print.event.printserviceattributeevent.getprintservice": [
        "javax.print.event.PrintServiceAttributeEvent.getPrintService()"
    ],
    "java.security.security.getproperty": [
        "java.security.Security.getProperty(java.lang.String)"
    ],
    "javax.swing.jeditorpane.getaccessiblecontext": [
        "javax.swing.JEditorPane.getAccessibleContext()"
    ],
    "javax.swing.text.compositeview.getnextnorthsouthvisualpositionfrom": [
        "javax.swing.text.CompositeView.getNextNorthSouthVisualPositionFrom(int,javax.swing.text.Position.Bias,java.awt.Shape,int,javax.swing.text.Position.Bias[])"
    ],
    "org.omg.corba.portable.applicationexception.getid": [
        "org.omg.CORBA.portable.ApplicationException.getId()"
    ],
    "javax.print.printservicelookup.registerservice": [
        "javax.print.PrintServiceLookup.registerService(javax.print.PrintService)"
    ],
    "javax.imageio.metadata.iiometadataformat.getattributeenumerations": [
        "javax.imageio.metadata.IIOMetadataFormat.getAttributeEnumerations(java.lang.String,java.lang.String)"
    ],
    "javax.naming.context.getnameparser": [
        "javax.naming.Context.getNameParser(javax.naming.Name)",
        "javax.naming.Context.getNameParser(java.lang.String)"
    ],
    "org.omg.dynamicany.dynanyfactoryoperations.create_dyn_any_from_type_code": [
        "org.omg.DynamicAny.DynAnyFactoryOperations.create_dyn_any_from_type_code(org.omg.CORBA.TypeCode)"
    ],
    "javax.swing.defaultrowsorter.sort": [
        "javax.swing.DefaultRowSorter.sort()"
    ],
    "java.awt.gridbaglayout.addlayoutcomponent": [
        "java.awt.GridBagLayout.addLayoutComponent(java.awt.Component,java.lang.Object)"
    ],
    "java.util.concurrent.transferqueue.getwaitingconsumercount": [
        "java.util.concurrent.TransferQueue.getWaitingConsumerCount()"
    ],
    "javax.swing.plaf.synth.synthpainter.painttabbedpanecontentbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintTabbedPaneContentBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.util.concurrent.linkedblockingqueue.spliterator": [
        "java.util.concurrent.LinkedBlockingQueue.spliterator()"
    ],
    "java.beans.appletinitializer.initialize": [
        "java.beans.AppletInitializer.initialize(java.applet.Applet,java.beans.beancontext.BeanContext)"
    ],
    "java.util.stream.doublestream.peek": [
        "java.util.stream.DoubleStream.peek(java.util.function.DoubleConsumer)"
    ],
    "javax.xml.ws.bindingprovider.getresponsecontext": [
        "javax.xml.ws.BindingProvider.getResponseContext()"
    ],
    "java.sql.resultset.updaterowid": [
        "java.sql.ResultSet.updateRowId(int,java.sql.RowId)",
        "java.sql.ResultSet.updateRowId(java.lang.String,java.sql.RowId)"
    ],
    "java.beans.xmldecoder.setexceptionlistener": [
        "java.beans.XMLDecoder.setExceptionListener(java.beans.ExceptionListener)"
    ],
    "java.util.concurrent.concurrenthashmap.get": [
        "java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)"
    ],
    "javax.activation.mailcapcommandmap.getmimetypes": [
        "javax.activation.MailcapCommandMap.getMimeTypes()"
    ],
    "java.util.concurrent.atomic.atomiclongarray.getanddecrement": [
        "java.util.concurrent.atomic.AtomicLongArray.getAndDecrement(int)"
    ],
    "java.awt.textcomponent.gettextlisteners": [
        "java.awt.TextComponent.getTextListeners()"
    ],
    "org.omg.cosnaming._namingcontextstub.unbind": [
        "org.omg.CosNaming._NamingContextStub.unbind(org.omg.CosNaming.NameComponent[])"
    ],
    "javax.naming.ldap.ldapname.getprefix": [
        "javax.naming.ldap.LdapName.getPrefix(int)"
    ],
    "java.rmi.activation.activationgroupdesc.getdata": [
        "java.rmi.activation.ActivationGroupDesc.getData()"
    ],
    "java.security.acl.owner.deleteowner": [
        "java.security.acl.Owner.deleteOwner(java.security.Principal,java.security.Principal)"
    ],
    "javax.swing.text.simpleattributeset.getresolveparent": [
        "javax.swing.text.SimpleAttributeSet.getResolveParent()"
    ],
    "java.lang.reflect.accessibleobject.isaccessible": [
        "java.lang.reflect.AccessibleObject.isAccessible()"
    ],
    "java.text.numberformat.parseobject": [
        "java.text.NumberFormat.parseObject(java.lang.String,java.text.ParsePosition)"
    ],
    "java.time.offsetdatetime.minusminutes": [
        "java.time.OffsetDateTime.minusMinutes(long)"
    ],
    "javax.lang.model.element.elementvisitor.visittypeparameter": [
        "javax.lang.model.element.ElementVisitor.visitTypeParameter(javax.lang.model.element.TypeParameterElement,javax.lang.model.element.ElementVisitor)"
    ],
    "java.awt.awteventmulticaster.keytyped": [
        "java.awt.AWTEventMulticaster.keyTyped(java.awt.event.KeyEvent)"
    ],
    "java.awt.color.getrgbcomponents": [
        "java.awt.Color.getRGBComponents(float[])"
    ],
    "java.text.characteriterator.first": [
        "java.text.CharacterIterator.first()"
    ],
    "java.awt.graphics2d.fill": [
        "java.awt.Graphics2D.fill(java.awt.Shape)"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.removepropertychangelistener": [
        "javax.swing.tree.DefaultTreeSelectionModel.removePropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "org.w3c.dom.ls.lsinput.setencoding": [
        "org.w3c.dom.ls.LSInput.setEncoding(java.lang.String)"
    ],
    "java.awt.dnd.dragsource.createdragsourcecontext": [
        "java.awt.dnd.DragSource.createDragSourceContext(java.awt.dnd.peer.DragSourceContextPeer,java.awt.dnd.DragGestureEvent,java.awt.Cursor,java.awt.Image,java.awt.Point,java.awt.datatransfer.Transferable,java.awt.dnd.DragSourceListener)"
    ],
    "java.sql.savepoint.getsavepointid": [
        "java.sql.Savepoint.getSavepointId()"
    ],
    "org.omg.portableinterceptor.requestinfooperations.get_reply_service_context": [
        "org.omg.PortableInterceptor.RequestInfoOperations.get_reply_service_context(int)"
    ],
    "javax.sql.rowset.execute": [
        "javax.sql.RowSet.execute()"
    ],
    "javax.xml.crypto.dsig.keyinfo.retrievalmethod.dereference": [
        "javax.xml.crypto.dsig.keyinfo.RetrievalMethod.dereference(javax.xml.crypto.XMLCryptoContext)"
    ],
    "javax.swing.desktopmanager.begindraggingframe": [
        "javax.swing.DesktopManager.beginDraggingFrame(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.synth.synthlistui.installlisteners": [
        "javax.swing.plaf.synth.SynthListUI.installListeners()"
    ],
    "javax.xml.stream.xmloutputfactory.newfactory": [
        "javax.xml.stream.XMLOutputFactory.newFactory()",
        "javax.xml.stream.XMLOutputFactory.newFactory(java.lang.String,java.lang.ClassLoader)"
    ],
    "org.omg.corba.typecode.member_name": [
        "org.omg.CORBA.TypeCode.member_name(int)"
    ],
    "java.awt.gridbaglayout.getminsize": [
        "java.awt.GridBagLayout.getMinSize(java.awt.Container,java.awt.GridBagLayoutInfo)",
        "java.awt.GridBagLayout.GetMinSize(java.awt.Container,java.awt.GridBagLayoutInfo)"
    ],
    "javax.naming.ldap.extendedrequest.getencodedvalue": [
        "javax.naming.ldap.ExtendedRequest.getEncodedValue()"
    ],
    "java.util.concurrent.copyonwritearraylist.addifabsent": [
        "java.util.concurrent.CopyOnWriteArrayList.addIfAbsent(E)",
        "java.util.concurrent.CopyOnWriteArrayList.addIfAbsent(java.util.concurrent.CopyOnWriteArrayList)"
    ],
    "javax.script.scriptenginefactory.getnames": [
        "javax.script.ScriptEngineFactory.getNames()"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readclob": [
        "javax.sql.rowset.serial.SQLInputImpl.readClob()"
    ],
    "javax.xml.stream.xmlstreamwriter.setprefix": [
        "javax.xml.stream.XMLStreamWriter.setPrefix(java.lang.String,java.lang.String)"
    ],
    "java.sql.resultset.getholdability": [
        "java.sql.ResultSet.getHoldability()"
    ],
    "javax.swing.plaf.nimbus.nimbusstyle.getfontforstate": [
        "javax.swing.plaf.nimbus.NimbusStyle.getFontForState(javax.swing.plaf.synth.SynthContext)"
    ],
    "javax.swing.text.defaultcaret.setvisible": [
        "javax.swing.text.DefaultCaret.setVisible(boolean)"
    ],
    "java.text.attributedcharacteriterator.getrunlimit": [
        "java.text.AttributedCharacterIterator.getRunLimit(java.util.Set<? extends java.text.AttributedCharacterIterator.Attribute>)",
        "java.text.AttributedCharacterIterator.getRunLimit()",
        "java.text.AttributedCharacterIterator.getRunLimit(java.text.AttributedCharacterIterator.Attribute)"
    ],
    "java.rmi.registry.registry.unbind": [
        "java.rmi.registry.Registry.unbind(java.lang.String)"
    ],
    "javax.xml.crypto.marshalexception.getcause": [
        "javax.xml.crypto.MarshalException.getCause()"
    ],
    "java.net.httpcookie.setpath": [
        "java.net.HttpCookie.setPath(java.lang.String)"
    ],
    "java.security.cert.pkixreason.values": [
        "java.security.cert.PKIXReason.values()"
    ],
    "javax.crypto.cipheroutputstream.flush": [
        "javax.crypto.CipherOutputStream.flush()"
    ],
    "javax.swing.event.treemodelevent.getpath": [
        "javax.swing.event.TreeModelEvent.getPath()"
    ],
    "java.awt.print.book.setpage": [
        "java.awt.print.Book.setPage(int,java.awt.print.Printable,java.awt.print.PageFormat)"
    ],
    "javax.swing.jcombobox.getkeyselectionmanager": [
        "javax.swing.JComboBox.getKeySelectionManager()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintcheckboxmenuitembackground": [
        "javax.swing.plaf.synth.SynthPainter.paintCheckBoxMenuItemBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.table.tablemodel.getcolumnclass": [
        "javax.swing.table.TableModel.getColumnClass(int)"
    ],
    "java.util.abstractcollection.iterator": [
        "java.util.AbstractCollection.iterator()"
    ],
    "java.lang.package.hashcode": [
        "java.lang.Package.hashCode()"
    ],
    "javax.xml.bind.annotation.xmlaccesstype.values": [
        "javax.xml.bind.annotation.XmlAccessType.values()"
    ],
    "javax.swing.uidefaults.lazyvalue.createvalue": [
        "javax.swing.UIDefaults.LazyValue.createValue(javax.swing.UIDefaults)"
    ],
    "java.net.uri.hashcode": [
        "java.net.URI.hashCode()"
    ],
    "java.util.stream.doublestream.builder.add": [
        "java.util.stream.DoubleStream.Builder.add(double)"
    ],
    "java.util.concurrent.concurrentnavigablemap.navigablekeyset": [
        "java.util.concurrent.ConcurrentNavigableMap.navigableKeySet()"
    ],
    "java.io.objectstreamclass.tostring": [
        "java.io.ObjectStreamClass.toString()"
    ],
    "java.lang.class.getconstructor": [
        "java.lang.Class.getConstructor(java.lang.Class<?>)",
        "java.lang.Class.getConstructor(java.lang.Class<?>...)"
    ],
    "javax.sound.sampled.audiosystem.gettargetdataline": [
        "javax.sound.sampled.AudioSystem.getTargetDataLine(javax.sound.sampled.AudioFormat,javax.sound.sampled.Mixer.Info)",
        "javax.sound.sampled.AudioSystem.getTargetDataLine(javax.sound.sampled.AudioFormat)"
    ],
    "javax.print.attribute.standard.severity.getenumvaluetable": [
        "javax.print.attribute.standard.Severity.getEnumValueTable()"
    ],
    "java.text.messageformat.getformatsbyargumentindex": [
        "java.text.MessageFormat.getFormatsByArgumentIndex()"
    ],
    "javax.xml.transform.stax.staxsource.getsystemid": [
        "javax.xml.transform.stax.StAXSource.getSystemId()"
    ],
    "java.awt.font.glyphvector.getglyphcharindex": [
        "java.awt.font.GlyphVector.getGlyphCharIndex(int)"
    ],
    "java.awt.label.addnotify": [
        "java.awt.Label.addNotify()"
    ],
    "java.lang.securitymanager.checksetfactory": [
        "java.lang.SecurityManager.checkSetFactory()"
    ],
    "javax.imageio.metadata.iiometadataformatimpl.getstandardformatinstance": [
        "javax.imageio.metadata.IIOMetadataFormatImpl.getStandardFormatInstance()"
    ],
    "org.omg.dynamicany._dynstructstub.insert_any": [
        "org.omg.DynamicAny._DynStructStub.insert_any(org.omg.CORBA.Any)"
    ],
    "javax.naming.directory.attributemodificationexception.setunexecutedmodifications": [
        "javax.naming.directory.AttributeModificationException.setUnexecutedModifications(javax.naming.directory.ModificationItem[])"
    ],
    "javax.imageio.imagereader.getdestination": [
        "javax.imageio.ImageReader.getDestination(javax.imageio.ImageReadParam,java.util.Iterator<javax.imageio.ImageTypeSpecifier>,int,int)"
    ],
    "java.nio.floatbuffer.slice": [
        "java.nio.FloatBuffer.slice()"
    ],
    "java.sql.sqlinput.readcharacterstream": [
        "java.sql.SQLInput.readCharacterStream()"
    ],
    "java.time.chrono.japanesedate.getera": [
        "java.time.chrono.JapaneseDate.getEra()"
    ],
    "java.rmi.activation.activationsystem.registergroup": [
        "java.rmi.activation.ActivationSystem.registerGroup(java.rmi.activation.ActivationGroupDesc)"
    ],
    "java.text.bidi.getrunlevel": [
        "java.text.Bidi.getRunLevel(int)"
    ],
    "java.lang.double.hashcode": [
        "java.lang.Double.hashCode(double)",
        "java.lang.Double.hashCode()"
    ],
    "java.lang.reflect.array.setdouble": [
        "java.lang.reflect.Array.setDouble(java.lang.Object,int,double)"
    ],
    "javax.rmi.corba.utildelegate.copyobjects": [
        "javax.rmi.CORBA.UtilDelegate.copyObjects(java.lang.Object[],org.omg.CORBA.ORB)"
    ],
    "javax.swing.tree.defaulttreecellrenderer.revalidate": [
        "javax.swing.tree.DefaultTreeCellRenderer.revalidate()"
    ],
    "java.sql.callablestatement.setcharacterstream": [
        "java.sql.CallableStatement.setCharacterStream(java.lang.String,java.io.Reader,int)",
        "java.sql.CallableStatement.setCharacterStream(java.lang.String,java.io.Reader)",
        "java.sql.CallableStatement.setCharacterStream(java.lang.String,java.io.Reader,long)"
    ],
    "java.time.yearmonth.parse": [
        "java.time.YearMonth.parse(java.lang.CharSequence)",
        "java.time.YearMonth.parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)"
    ],
    "org.xml.sax.helpers.namespacesupport.geturi": [
        "org.xml.sax.helpers.NamespaceSupport.getURI(java.lang.String)"
    ],
    "org.omg.dynamicany.dynanyoperations.insert_octet": [
        "org.omg.DynamicAny.DynAnyOperations.insert_octet(byte)"
    ],
    "org.w3c.dom.events.mutationevent.getattrchange": [
        "org.w3c.dom.events.MutationEvent.getAttrChange()"
    ],
    "javax.swing.jcombobox.getui": [
        "javax.swing.JComboBox.getUI()"
    ],
    "java.awt.insets.clone": [
        "java.awt.Insets.clone()"
    ],
    "javax.print.attribute.integersyntax.hashcode": [
        "javax.print.attribute.IntegerSyntax.hashCode()"
    ],
    "javax.swing.defaultlistselectionmodel.getlisteners": [
        "javax.swing.DefaultListSelectionModel.getListeners(java.lang.Class<T>)"
    ],
    "java.sql.databasemetadata.updatesaredetected": [
        "java.sql.DatabaseMetaData.updatesAreDetected(int)"
    ],
    "java.util.calendar.getactualmaximum": [
        "java.util.Calendar.getActualMaximum(int)"
    ],
    "java.awt.font.hashcode": [
        "java.awt.Font.hashCode()"
    ],
    "javax.xml.stream.xmlstreamreader.geteventtype": [
        "javax.xml.stream.XMLStreamReader.getEventType()"
    ],
    "org.omg.portableinterceptor.requestinfooperations.response_expected": [
        "org.omg.PortableInterceptor.RequestInfoOperations.response_expected()"
    ],
    "java.time.instant.plusmillis": [
        "java.time.Instant.plusMillis(long)"
    ],
    "java.awt.dimension.hashcode": [
        "java.awt.Dimension.hashCode()"
    ],
    "javax.print.attribute.standard.outputdeviceassigned.getcategory": [
        "javax.print.attribute.standard.OutputDeviceAssigned.getCategory()"
    ],
    "java.util.navigablemap.higherentry": [
        "java.util.NavigableMap.higherEntry(K)",
        "java.util.NavigableMap.higherEntry(java.util.NavigableMap)"
    ],
    "javax.swing.plaf.metal.metalsplitpaneui.createdefaultdivider": [
        "javax.swing.plaf.metal.MetalSplitPaneUI.createDefaultDivider()"
    ],
    "java.lang.management.threadmxbean.getallthreadids": [
        "java.lang.management.ThreadMXBean.getAllThreadIds()"
    ],
    "javax.swing.sizerequirements.tostring": [
        "javax.swing.SizeRequirements.toString()"
    ],
    "javax.swing.jcomponent.getverifyinputwhenfocustarget": [
        "javax.swing.JComponent.getVerifyInputWhenFocusTarget()"
    ],
    "java.util.concurrent.concurrentmap.merge": [
        "java.util.concurrent.ConcurrentMap.merge(K,V,java.util.function.BiFunction<? super,? super,? extends V>)",
        "java.util.concurrent.ConcurrentMap.merge(java.util.concurrent.ConcurrentMap,java.util.concurrent.ConcurrentMap,java.util.function.BiFunction<? super,? super,? extends java.util.concurrent.ConcurrentMap>)"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.getreadlockcount": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.getReadLockCount()"
    ],
    "java.nio.bytebuffer.hasarray": [
        "java.nio.ByteBuffer.hasArray()"
    ],
    "javax.swing.plaf.synth.synthrootpaneui.update": [
        "javax.swing.plaf.synth.SynthRootPaneUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.awt.image.rescaleop.getrenderinghints": [
        "java.awt.image.RescaleOp.getRenderingHints()"
    ],
    "javax.swing.rowsorter.addrowsorterlistener": [
        "javax.swing.RowSorter.addRowSorterListener(javax.swing.event.RowSorterListener)"
    ],
    "javax.swing.joptionpane.getmessage": [
        "javax.swing.JOptionPane.getMessage()"
    ],
    "java.awt.dnd.droptargetdragevent.acceptdrag": [
        "java.awt.dnd.DropTargetDragEvent.acceptDrag(int)"
    ],
    "org.omg.dynamicany._dynsequencestub.insert_ushort": [
        "org.omg.DynamicAny._DynSequenceStub.insert_ushort(short)"
    ],
    "javax.swing.text.jtextcomponent.getselectedtext": [
        "javax.swing.text.JTextComponent.getSelectedText()"
    ],
    "javax.script.compiledscript.eval": [
        "javax.script.CompiledScript.eval(javax.script.Bindings)",
        "javax.script.CompiledScript.eval()",
        "javax.script.CompiledScript.eval(javax.script.ScriptContext)"
    ],
    "java.security.interfaces.ecpublickey.getw": [
        "java.security.interfaces.ECPublicKey.getW()"
    ],
    "javax.print.attribute.standard.mediaprintablearea.getx": [
        "javax.print.attribute.standard.MediaPrintableArea.getX(int)"
    ],
    "java.security.keypairgenerator.initialize": [
        "java.security.KeyPairGenerator.initialize(int)",
        "java.security.KeyPairGenerator.initialize(java.security.spec.AlgorithmParameterSpec)",
        "java.security.KeyPairGenerator.initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
    ],
    "javax.xml.crypto.dsig.spec.xpathtype.getnamespacemap": [
        "javax.xml.crypto.dsig.spec.XPathType.getNamespaceMap()"
    ],
    "org.w3c.dom.domimplementation.createdocument": [
        "org.w3c.dom.DOMImplementation.createDocument(java.lang.String,java.lang.String,org.w3c.dom.DocumentType)"
    ],
    "javax.swing.abstractbutton.gethorizontaltextposition": [
        "javax.swing.AbstractButton.getHorizontalTextPosition()"
    ],
    "org.omg.corba.datainputstream.read_any": [
        "org.omg.CORBA.DataInputStream.read_any()"
    ],
    "javax.swing.jrootpane.setui": [
        "javax.swing.JRootPane.setUI(javax.swing.plaf.RootPaneUI)"
    ],
    "java.lang.invoke.methodtype.changereturntype": [
        "java.lang.invoke.MethodType.changeReturnType(java.lang.Class<?>)"
    ],
    "javax.naming.ldap.ldapreferralexception.getreferralcontext": [
        "javax.naming.ldap.LdapReferralException.getReferralContext()",
        "javax.naming.ldap.LdapReferralException.getReferralContext(,?>)",
        "javax.naming.ldap.LdapReferralException.getReferralContext(,?>,javax.naming.ldap.Control[])"
    ],
    "java.applet.appletstub.getappletcontext": [
        "java.applet.AppletStub.getAppletContext()"
    ],
    "javax.swing.plaf.basic.basicoptionpaneui.getmaxcharactersperlinecount": [
        "javax.swing.plaf.basic.BasicOptionPaneUI.getMaxCharactersPerLineCount()"
    ],
    "java.awt.toolkit.removeawteventlistener": [
        "java.awt.Toolkit.removeAWTEventListener(java.awt.event.AWTEventListener)"
    ],
    "java.time.temporal.temporalaccessor.range": [
        "java.time.temporal.TemporalAccessor.range(java.time.temporal.TemporalField)"
    ],
    "java.lang.threadgroup.destroy": [
        "java.lang.ThreadGroup.destroy()"
    ],
    "javax.swing.plaf.basic.basictoolbarui.setbordertorollover": [
        "javax.swing.plaf.basic.BasicToolBarUI.setBorderToRollover(java.awt.Component)"
    ],
    "java.text.numberformat.setroundingmode": [
        "java.text.NumberFormat.setRoundingMode(java.math.RoundingMode)"
    ],
    "java.awt.datatransfer.systemflavormap.getdefaultflavormap": [
        "java.awt.datatransfer.SystemFlavorMap.getDefaultFlavorMap()"
    ],
    "javax.imageio.imagewriter.removealliiowriteprogresslisteners": [
        "javax.imageio.ImageWriter.removeAllIIOWriteProgressListeners()"
    ],
    "org.omg.corba.any.extract_object": [
        "org.omg.CORBA.Any.extract_Object()"
    ],
    "java.net.socketoption.name": [
        "java.net.SocketOption.name()"
    ],
    "javax.swing.plaf.basic.basichtml.updaterenderer": [
        "javax.swing.plaf.basic.BasicHTML.updateRenderer(javax.swing.JComponent,java.lang.String)"
    ],
    "java.util.splittablerandom.nextboolean": [
        "java.util.SplittableRandom.nextBoolean()"
    ],
    "java.awt.image.getproperty": [
        "java.awt.Image.getProperty(java.lang.String,java.awt.image.ImageObserver)"
    ],
    "java.awt.menuitem.addactionlistener": [
        "java.awt.MenuItem.addActionListener(java.awt.event.ActionListener)"
    ],
    "javax.management.remote.notificationresult.tostring": [
        "javax.management.remote.NotificationResult.toString()"
    ],
    "javax.script.scriptcontext.setattribute": [
        "javax.script.ScriptContext.setAttribute(java.lang.String,java.lang.Object,int)"
    ],
    "javax.print.attribute.standard.printername.equals": [
        "javax.print.attribute.standard.PrinterName.equals(java.lang.Object)"
    ],
    "javax.xml.crypto.xmlcryptocontext.getkeyselector": [
        "javax.xml.crypto.XMLCryptoContext.getKeySelector()"
    ],
    "java.util.concurrent.futuretask.set": [
        "java.util.concurrent.FutureTask.set(V)",
        "java.util.concurrent.FutureTask.set(java.util.concurrent.FutureTask)"
    ],
    "java.awt.font.multiplemaster.getnumdesignaxes": [
        "java.awt.font.MultipleMaster.getNumDesignAxes()"
    ],
    "javax.swing.jslider.getui": [
        "javax.swing.JSlider.getUI()"
    ],
    "java.awt.paintcontext.dispose": [
        "java.awt.PaintContext.dispose()"
    ],
    "javax.swing.plaf.basic.basictreeui.getpathbounds": [
        "javax.swing.plaf.basic.BasicTreeUI.getPathBounds(javax.swing.JTree,javax.swing.tree.TreePath)"
    ],
    "java.awt.dnd.dragsourcelistener.dragdropend": [
        "java.awt.dnd.DragSourceListener.dragDropEnd(java.awt.dnd.DragSourceDropEvent)"
    ],
    "javax.swing.text.stylecontext.getfont": [
        "javax.swing.text.StyleContext.getFont(java.lang.String,int,int)",
        "javax.swing.text.StyleContext.getFont(javax.swing.text.AttributeSet)"
    ],
    "javax.swing.text.html.stylesheet.listpainter.paint": [
        "javax.swing.text.html.StyleSheet.ListPainter.paint(java.awt.Graphics,float,float,float,float,javax.swing.text.View,int)"
    ],
    "java.lang.system.inheritedchannel": [
        "java.lang.System.inheritedChannel()"
    ],
    "java.util.objects.tostring": [
        "java.util.Objects.toString(java.lang.Object)",
        "java.util.Objects.toString(java.lang.Object,java.lang.String)"
    ],
    "javax.net.ssl.sslparameters.getprotocols": [
        "javax.net.ssl.SSLParameters.getProtocols()"
    ],
    "javax.sql.rowset.baserowset.getconcurrency": [
        "javax.sql.rowset.BaseRowSet.getConcurrency()"
    ],
    "java.security.permission.equals": [
        "java.security.Permission.equals(java.lang.Object)"
    ],
    "javax.imageio.metadata.iiometadatanode.lookupnamespaceuri": [
        "javax.imageio.metadata.IIOMetadataNode.lookupNamespaceURI(java.lang.String)"
    ],
    "javax.lang.model.util.typekindvisitor6.visitprimitiveaslong": [
        "javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsLong(javax.lang.model.type.PrimitiveType,javax.lang.model.util.TypeKindVisitor6)"
    ],
    "javax.sql.rowsetinternal.getconnection": [
        "javax.sql.RowSetInternal.getConnection()"
    ],
    "javax.swing.jtree.removeselectionrows": [
        "javax.swing.JTree.removeSelectionRows(int[])"
    ],
    "java.util.bitset.andnot": [
        "java.util.BitSet.andNot(java.util.BitSet)"
    ],
    "org.xml.sax.saxexception.getmessage": [
        "org.xml.sax.SAXException.getMessage()"
    ],
    "java.util.concurrent.concurrenthashmap.mappingcount": [
        "java.util.concurrent.ConcurrentHashMap.mappingCount()"
    ],
    "java.awt.graphicsconfigtemplate.isgraphicsconfigsupported": [
        "java.awt.GraphicsConfigTemplate.isGraphicsConfigSupported(java.awt.GraphicsConfiguration)"
    ],
    "java.awt.dnd.droptarget.setactive": [
        "java.awt.dnd.DropTarget.setActive(boolean)"
    ],
    "java.security.accesscontroller.checkpermission": [
        "java.security.AccessController.checkPermission(java.security.Permission)"
    ],
    "java.awt.color.icc_profile.setdata": [
        "java.awt.color.ICC_Profile.setData(int,byte[])"
    ],
    "javax.swing.jmenuitem.actionpropertychanged": [
        "javax.swing.JMenuItem.actionPropertyChanged(javax.swing.Action,java.lang.String)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getcontroldarkshadow": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getControlDarkShadow()"
    ],
    "java.awt.button.removeactionlistener": [
        "java.awt.Button.removeActionListener(java.awt.event.ActionListener)"
    ],
    "java.lang.invoke.methodtype.genericmethodtype": [
        "java.lang.invoke.MethodType.genericMethodType(int)",
        "java.lang.invoke.MethodType.genericMethodType(int,boolean)"
    ],
    "java.util.concurrent.forkjoinpool.shutdownnow": [
        "java.util.concurrent.ForkJoinPool.shutdownNow()"
    ],
    "java.awt.container.dolayout": [
        "java.awt.Container.doLayout()"
    ],
    "java.net.proxy.type.values": [
        "java.net.Proxy.Type.values()"
    ],
    "javax.swing.plaf.multi.multitooltipui.contains": [
        "javax.swing.plaf.multi.MultiToolTipUI.contains(javax.swing.JComponent,int,int)"
    ],
    "javax.management.remote.rmi.rmiserverimpl.getmbeanserver": [
        "javax.management.remote.rmi.RMIServerImpl.getMBeanServer()"
    ],
    "javax.management.openmbean.openmbeanparameterinfo.equals": [
        "javax.management.openmbean.OpenMBeanParameterInfo.equals(java.lang.Object)"
    ],
    "java.sql.timestamp.getnanos": [
        "java.sql.Timestamp.getNanos()"
    ],
    "javax.sound.midi.midichannel.allnotesoff": [
        "javax.sound.midi.MidiChannel.allNotesOff()"
    ],
    "javax.accessibility.accessiblerelationset.get": [
        "javax.accessibility.AccessibleRelationSet.get(java.lang.String)"
    ],
    "javax.swing.plaf.metal.oceantheme.getsecondary3": [
        "javax.swing.plaf.metal.OceanTheme.getSecondary3()"
    ],
    "java.net.url.samefile": [
        "java.net.URL.sameFile(java.net.URL)"
    ],
    "java.util.calendar.isweekdatesupported": [
        "java.util.Calendar.isWeekDateSupported()"
    ],
    "javax.print.attribute.standard.queuedjobcount.equals": [
        "javax.print.attribute.standard.QueuedJobCount.equals(java.lang.Object)"
    ],
    "java.nio.file.linkoption.values": [
        "java.nio.file.LinkOption.values()"
    ],
    "java.lang.reflect.member.getmodifiers": [
        "java.lang.reflect.Member.getModifiers()"
    ],
    "javax.imageio.metadata.iiometadatanode.setuserobject": [
        "javax.imageio.metadata.IIOMetadataNode.setUserObject(java.lang.Object)"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.getschemaname": [
        "javax.sql.rowset.RowSetMetaDataImpl.getSchemaName(int)"
    ],
    "javax.swing.lookandfeel.getname": [
        "javax.swing.LookAndFeel.getName()"
    ],
    "java.time.chrono.chronoperiod.getchronology": [
        "java.time.chrono.ChronoPeriod.getChronology()"
    ],
    "java.time.temporal.temporalfield.tostring": [
        "java.time.temporal.TemporalField.toString()"
    ],
    "javax.sound.midi.sequencer.recordenable": [
        "javax.sound.midi.Sequencer.recordEnable(javax.sound.midi.Track,int)"
    ],
    "javax.swing.border.lineborder.createblacklineborder": [
        "javax.swing.border.LineBorder.createBlackLineBorder()"
    ],
    "java.lang.package.getspecificationtitle": [
        "java.lang.Package.getSpecificationTitle()"
    ],
    "java.lang.system.setsecuritymanager": [
        "java.lang.System.setSecurityManager(java.lang.SecurityManager)"
    ],
    "javax.swing.jprogressbar.setstring": [
        "javax.swing.JProgressBar.setString(java.lang.String)"
    ],
    "javax.net.ssl.sslsocket.setneedclientauth": [
        "javax.net.ssl.SSLSocket.setNeedClientAuth(boolean)"
    ],
    "java.security.algorithmparameters.getinstance": [
        "java.security.AlgorithmParameters.getInstance(java.lang.String,java.security.Provider)",
        "java.security.AlgorithmParameters.getInstance(java.lang.String,java.lang.String)",
        "java.security.AlgorithmParameters.getInstance(java.lang.String)"
    ],
    "javax.management.mbeanpermission.getactions": [
        "javax.management.MBeanPermission.getActions()"
    ],
    "java.awt.geom.line2d.float.gety2": [
        "java.awt.geom.Line2D.Float.getY2()"
    ],
    "java.time.zoneddatetime.minushours": [
        "java.time.ZonedDateTime.minusHours(long)"
    ],
    "javax.swing.plaf.multi.multisplitpaneui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiSplitPaneUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "java.util.linkedhashmap.keyset": [
        "java.util.LinkedHashMap.keySet()"
    ],
    "javax.lang.model.element.annotationvaluevisitor.visitchar": [
        "javax.lang.model.element.AnnotationValueVisitor.visitChar(char,javax.lang.model.element.AnnotationValueVisitor)"
    ],
    "java.util.spliterators.abstractlongspliterator.trysplit": [
        "java.util.Spliterators.AbstractLongSpliterator.trySplit()"
    ],
    "java.util.navigablemap.floorkey": [
        "java.util.NavigableMap.floorKey(K)",
        "java.util.NavigableMap.floorKey(java.util.NavigableMap)"
    ],
    "javax.imageio.iioimage.setrenderedimage": [
        "javax.imageio.IIOImage.setRenderedImage(java.awt.image.RenderedImage)"
    ],
    "java.util.bitset.previousclearbit": [
        "java.util.BitSet.previousClearBit(int)"
    ],
    "javax.security.auth.callback.languagecallback.getlocale": [
        "javax.security.auth.callback.LanguageCallback.getLocale()"
    ],
    "java.time.localdatetime.minus": [
        "java.time.LocalDateTime.minus(long,java.time.temporal.TemporalUnit)",
        "java.time.LocalDateTime.minus(java.time.temporal.TemporalAmount)"
    ],
    "java.util.arrays.tostring": [
        "java.util.Arrays.toString(short[])",
        "java.util.Arrays.toString(java.lang.Object)",
        "java.util.Arrays.toString(char[])",
        "java.util.Arrays.toString(boolean[])",
        "java.util.Arrays.toString(java.lang.Object[])",
        "java.util.Arrays.toString(double[])",
        "java.util.Arrays.toString(float[])",
        "java.util.Arrays.toString(byte[])",
        "java.util.Arrays.toString(long[])",
        "java.util.Arrays.toString(int[])"
    ],
    "java.util.concurrent.completablefuture.completedfuture": [
        "java.util.concurrent.CompletableFuture.completedFuture(U)"
    ],
    "javax.swing.jwindow.getrootpane": [
        "javax.swing.JWindow.getRootPane()"
    ],
    "javax.swing.spring.getpreferredvalue": [
        "javax.swing.Spring.getPreferredValue()"
    ],
    "org.omg.corba.orb.create_named_value": [
        "org.omg.CORBA.ORB.create_named_value(java.lang.String,org.omg.CORBA.Any,int)"
    ],
    "java.awt.image.colormodel.tostring": [
        "java.awt.image.ColorModel.toString()"
    ],
    "java.util.concurrent.concurrentskiplistmap.submap": [
        "java.util.concurrent.ConcurrentSkipListMap.subMap(K,K)",
        "java.util.concurrent.ConcurrentSkipListMap.subMap(K,boolean,K,boolean)"
    ],
    "java.time.zone.zoneoffsettransitionrule.gettimedefinition": [
        "java.time.zone.ZoneOffsetTransitionRule.getTimeDefinition()"
    ],
    "javax.sound.midi.soundbankresource.getsoundbank": [
        "javax.sound.midi.SoundbankResource.getSoundbank()"
    ],
    "java.time.instant.getlong": [
        "java.time.Instant.getLong(java.time.temporal.TemporalField)"
    ],
    "java.util.concurrent.locks.stampedlock.tryoptimisticread": [
        "java.util.concurrent.locks.StampedLock.tryOptimisticRead()"
    ],
    "javax.swing.text.styleconstants.getalignment": [
        "javax.swing.text.StyleConstants.getAlignment(javax.swing.text.AttributeSet)"
    ],
    "java.util.concurrent.arrayblockingqueue.size": [
        "java.util.concurrent.ArrayBlockingQueue.size()"
    ],
    "java.time.chrono.minguoera.of": [
        "java.time.chrono.MinguoEra.of(int)"
    ],
    "java.lang.short.valueof": [
        "java.lang.Short.valueOf(short)",
        "java.lang.Short.valueOf(java.lang.String)",
        "java.lang.Short.valueOf(java.lang.String,int)"
    ],
    "java.time.temporal.temporal.with": [
        "java.time.temporal.Temporal.with(java.time.temporal.TemporalField,long)",
        "java.time.temporal.Temporal.with(java.time.temporal.TemporalAdjuster)"
    ],
    "javax.print.attribute.standard.datetimeatcreation.equals": [
        "javax.print.attribute.standard.DateTimeAtCreation.equals(java.lang.Object)"
    ],
    "java.awt.container.arefocustraversalkeysset": [
        "java.awt.Container.areFocusTraversalKeysSet(int)"
    ],
    "javax.swing.plaf.metal.metalborders.gettogglebuttonborder": [
        "javax.swing.plaf.metal.MetalBorders.getToggleButtonBorder()"
    ],
    "java.sql.resultsetmetadata.getcolumntype": [
        "java.sql.ResultSetMetaData.getColumnType(int)"
    ],
    "java.lang.invoke.serializedlambda.getimplclass": [
        "java.lang.invoke.SerializedLambda.getImplClass()"
    ],
    "javax.swing.plaf.synth.synthscrollbarui.painttrack": [
        "javax.swing.plaf.synth.SynthScrollBarUI.paintTrack(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,java.awt.Rectangle)"
    ],
    "org.xml.sax.helpers.namespacesupport.reset": [
        "org.xml.sax.helpers.NamespaceSupport.reset()"
    ],
    "java.rmi.registry.registry.bind": [
        "java.rmi.registry.Registry.bind(java.lang.String,java.rmi.Remote)"
    ],
    "org.omg.dynamicany._dynanystub.get_ulong": [
        "org.omg.DynamicAny._DynAnyStub.get_ulong()"
    ],
    "java.util.function.longtointfunction.applyasint": [
        "java.util.function.LongToIntFunction.applyAsInt(long)"
    ],
    "java.sql.time.toinstant": [
        "java.sql.Time.toInstant()"
    ],
    "java.awt.geom.path2d.double.append": [
        "java.awt.geom.Path2D.Double.append(java.awt.geom.PathIterator,boolean)"
    ],
    "javax.naming.ldap.ldapname.endswith": [
        "javax.naming.ldap.LdapName.endsWith(java.util.List<javax.naming.ldap.Rdn>)",
        "javax.naming.ldap.LdapName.endsWith(javax.naming.Name)"
    ],
    "javax.swing.jpopupmenu.removemenukeylistener": [
        "javax.swing.JPopupMenu.removeMenuKeyListener(javax.swing.event.MenuKeyListener)"
    ],
    "java.util.concurrent.concurrenthashmap.elements": [
        "java.util.concurrent.ConcurrentHashMap.elements()"
    ],
    "java.awt.container.getalignmenty": [
        "java.awt.Container.getAlignmentY()"
    ],
    "javax.swing.jtable.getrowcount": [
        "javax.swing.JTable.getRowCount()"
    ],
    "java.util.zip.inflater.getbyteswritten": [
        "java.util.zip.Inflater.getBytesWritten()"
    ],
    "java.util.gregoriancalendar.roll": [
        "java.util.GregorianCalendar.roll(int,int)"
    ],
    "java.sql.sqlexception.getsqlstate": [
        "java.sql.SQLException.getSQLState()"
    ],
    "org.omg.corba.portable.streamable._read": [
        "org.omg.CORBA.portable.Streamable._read(org.omg.CORBA.portable.InputStream)"
    ],
    "java.time.monthday.with": [
        "java.time.MonthDay.with(java.time.Month)"
    ],
    "java.net.httpretryexception.getlocation": [
        "java.net.HttpRetryException.getLocation()"
    ],
    "java.awt.geom.path2d.append": [
        "java.awt.geom.Path2D.append(java.awt.geom.PathIterator,boolean)",
        "java.awt.geom.Path2D.append(java.awt.Shape,boolean)"
    ],
    "java.rmi.activation.activationgroupdesc.equals": [
        "java.rmi.activation.ActivationGroupDesc.equals(java.lang.Object)"
    ],
    "javax.swing.jpopupmenu.getlabel": [
        "javax.swing.JPopupMenu.getLabel()"
    ],
    "javax.swing.text.abstractwriter.write": [
        "javax.swing.text.AbstractWriter.write(java.lang.String)"
    ],
    "java.awt.frame.setshape": [
        "java.awt.Frame.setShape(java.awt.Shape)"
    ],
    "java.awt.datatransfer.stringselection.gettransferdataflavors": [
        "java.awt.datatransfer.StringSelection.getTransferDataFlavors()"
    ],
    "org.xml.sax.helpers.defaulthandler.ignorablewhitespace": [
        "org.xml.sax.helpers.DefaultHandler.ignorableWhitespace(char[],int,int)"
    ],
    "java.nio.bytebuffer.getint": [
        "java.nio.ByteBuffer.getInt(int)",
        "java.nio.ByteBuffer.getInt()"
    ],
    "java.text.breakiterator.getsentenceinstance": [
        "java.text.BreakIterator.getSentenceInstance(java.util.Locale)",
        "java.text.BreakIterator.getSentenceInstance()"
    ],
    "java.awt.image.indexcolormodel.getcomponentsize": [
        "java.awt.image.IndexColorModel.getComponentSize()"
    ],
    "java.awt.image.rescaleop.createcompatibledestimage": [
        "java.awt.image.RescaleOp.createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)"
    ],
    "javax.security.sasl.saslserver.evaluateresponse": [
        "javax.security.sasl.SaslServer.evaluateResponse(byte[])"
    ],
    "java.awt.color.colorspace.torgb": [
        "java.awt.color.ColorSpace.toRGB(float[])"
    ],
    "javax.swing.plaf.basic.basictextareaui.getbaselineresizebehavior": [
        "javax.swing.plaf.basic.BasicTextAreaUI.getBaselineResizeBehavior(javax.swing.JComponent)"
    ],
    "java.time.localdatetime.plusmonths": [
        "java.time.LocalDateTime.plusMonths(long)"
    ],
    "java.util.concurrent.threadpoolexecutor.abortpolicy.rejectedexecution": [
        "java.util.concurrent.ThreadPoolExecutor.AbortPolicy.rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.getselectionpaths": [
        "javax.swing.tree.DefaultTreeSelectionModel.getSelectionPaths()"
    ],
    "javax.lang.model.util.elementkindvisitor6.visitvariableasresourcevariable": [
        "javax.lang.model.util.ElementKindVisitor6.visitVariableAsResourceVariable(javax.lang.model.element.VariableElement,javax.lang.model.util.ElementKindVisitor6)"
    ],
    "java.awt.pageattributes.getmedia": [
        "java.awt.PageAttributes.getMedia()"
    ],
    "java.lang.invoke.methodhandles.permutearguments": [
        "java.lang.invoke.MethodHandles.permuteArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,int...)"
    ],
    "javax.print.attribute.attributeset.get": [
        "javax.print.attribute.AttributeSet.get(java.lang.Class<?>)"
    ],
    "javax.swing.text.abstractdocument.attributecontext.removeattribute": [
        "javax.swing.text.AbstractDocument.AttributeContext.removeAttribute(javax.swing.text.AttributeSet,java.lang.Object)"
    ],
    "java.time.localtime.now": [
        "java.time.LocalTime.now(java.time.ZoneId)",
        "java.time.LocalTime.now()",
        "java.time.LocalTime.now(java.time.Clock)"
    ],
    "javax.imageio.metadata.iiometadataformat.getobjectclass": [
        "javax.imageio.metadata.IIOMetadataFormat.getObjectClass(java.lang.String)"
    ],
    "java.nio.file.attribute.dosfileattributes.isarchive": [
        "java.nio.file.attribute.DosFileAttributes.isArchive()"
    ],
    "javax.swing.jcheckboxmenuitem.getuiclassid": [
        "javax.swing.JCheckBoxMenuItem.getUIClassID()"
    ],
    "javax.swing.plaf.basic.basicmenuitemui.doclick": [
        "javax.swing.plaf.basic.BasicMenuItemUI.doClick(javax.swing.MenuSelectionManager)"
    ],
    "java.time.format.datetimeformatter.parseunresolved": [
        "java.time.format.DateTimeFormatter.parseUnresolved(java.lang.CharSequence,java.text.ParsePosition)"
    ],
    "java.awt.font.glyphmetrics.getbounds2d": [
        "java.awt.font.GlyphMetrics.getBounds2D()"
    ],
    "javax.xml.stream.events.startelement.getnamespaces": [
        "javax.xml.stream.events.StartElement.getNamespaces()"
    ],
    "javax.swing.menuselectionmanager.getchangelisteners": [
        "javax.swing.MenuSelectionManager.getChangeListeners()"
    ],
    "javax.swing.plaf.multi.multiseparatorui.update": [
        "javax.swing.plaf.multi.MultiSeparatorUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "org.omg.dynamicany._dynstructstub.insert_wchar": [
        "org.omg.DynamicAny._DynStructStub.insert_wchar(char)"
    ],
    "java.lang.stringbuilder.setcharat": [
        "java.lang.StringBuilder.setCharAt(int,char)"
    ],
    "java.awt.component.setdroptarget": [
        "java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"
    ],
    "javax.sql.rowset.spi.syncresolver.previousconflict": [
        "javax.sql.rowset.spi.SyncResolver.previousConflict()"
    ],
    "javax.xml.ws.spi.http.httpexchange.getcontextpath": [
        "javax.xml.ws.spi.http.HttpExchange.getContextPath()"
    ],
    "javax.swing.text.tabset.gettabindexafter": [
        "javax.swing.text.TabSet.getTabIndexAfter(float)"
    ],
    "java.awt.component.addhierarchyboundslistener": [
        "java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"
    ],
    "java.util.weakhashmap.foreach": [
        "java.util.WeakHashMap.forEach(java.util.function.BiConsumer<? super,? super V>)"
    ],
    "java.lang.strictmath.log10": [
        "java.lang.StrictMath.log10(double)"
    ],
    "javax.xml.stream.xmleventwriter.setdefaultnamespace": [
        "javax.xml.stream.XMLEventWriter.setDefaultNamespace(java.lang.String)"
    ],
    "javax.swing.jpopupmenu.updateui": [
        "javax.swing.JPopupMenu.updateUI()"
    ],
    "java.awt.geom.line2d.float.getp2": [
        "java.awt.geom.Line2D.Float.getP2()"
    ],
    "javax.swing.plaf.multi.multitableheaderui.update": [
        "javax.swing.plaf.multi.MultiTableHeaderUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.lang.invoke.methodhandle.isvarargscollector": [
        "java.lang.invoke.MethodHandle.isVarargsCollector()"
    ],
    "javax.swing.menuselectionmanager.firestatechanged": [
        "javax.swing.MenuSelectionManager.fireStateChanged()"
    ],
    "java.awt.im.spi.inputmethod.setcompositionenabled": [
        "java.awt.im.spi.InputMethod.setCompositionEnabled(boolean)"
    ],
    "java.util.prefs.preferences.get": [
        "java.util.prefs.Preferences.get(java.lang.String,java.lang.String)"
    ],
    "javax.crypto.cipherspi.enginesetpadding": [
        "javax.crypto.CipherSpi.engineSetPadding(java.lang.String)"
    ],
    "org.omg.corba.any.create_input_stream": [
        "org.omg.CORBA.Any.create_input_stream()"
    ],
    "javax.security.auth.subject.equals": [
        "javax.security.auth.Subject.equals(java.lang.Object)"
    ],
    "java.sql.callablestatement.setnstring": [
        "java.sql.CallableStatement.setNString(java.lang.String,java.lang.String)"
    ],
    "java.security.authprovider.login": [
        "java.security.AuthProvider.login(javax.security.auth.Subject,javax.security.auth.callback.CallbackHandler)"
    ],
    "javax.swing.jtabbedpane.setforegroundat": [
        "javax.swing.JTabbedPane.setForegroundAt(int,java.awt.Color)"
    ],
    "java.sql.databasemetadata.supportsmixedcaseidentifiers": [
        "java.sql.DatabaseMetaData.supportsMixedCaseIdentifiers()"
    ],
    "java.nio.channels.asynchronousserversocketchannel.getlocaladdress": [
        "java.nio.channels.AsynchronousServerSocketChannel.getLocalAddress()"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.createlayoutmanager": [
        "javax.swing.plaf.basic.BasicComboBoxUI.createLayoutManager()"
    ],
    "java.lang.math.floormod": [
        "java.lang.Math.floorMod(int,int)",
        "java.lang.Math.floorMod(long,long)"
    ],
    "java.util.arraydeque.offer": [
        "java.util.ArrayDeque.offer(E)",
        "java.util.ArrayDeque.offer(java.util.ArrayDeque)"
    ],
    "java.util.jar.jarfile.getinputstream": [
        "java.util.jar.JarFile.getInputStream(java.util.zip.ZipEntry)"
    ],
    "java.lang.management.managementfactory.getgarbagecollectormxbeans": [
        "java.lang.management.ManagementFactory.getGarbageCollectorMXBeans()"
    ],
    "java.awt.window.seticonimages": [
        "java.awt.Window.setIconImages(java.util.List<? extends java.awt.Image>)"
    ],
    "java.net.urlconnection.setrequestproperty": [
        "java.net.URLConnection.setRequestProperty(java.lang.String,java.lang.String)"
    ],
    "java.awt.image.renderable.rendercontext.getrenderinghints": [
        "java.awt.image.renderable.RenderContext.getRenderingHints()"
    ],
    "org.omg.corba.portable.inputstream.read_wchar_array": [
        "org.omg.CORBA.portable.InputStream.read_wchar_array(char[],int,int)"
    ],
    "org.xml.sax.helpers.xmlreaderadapter.characters": [
        "org.xml.sax.helpers.XMLReaderAdapter.characters(char[],int,int)"
    ],
    "java.awt.dnd.dragsource.getdragsourcemotionlisteners": [
        "java.awt.dnd.DragSource.getDragSourceMotionListeners()"
    ],
    "java.net.socket.isconnected": [
        "java.net.Socket.isConnected()"
    ],
    "javax.swing.jtoolbar.separator.setseparatorsize": [
        "javax.swing.JToolBar.Separator.setSeparatorSize(java.awt.Dimension)"
    ],
    "java.util.zip.deflateroutputstream.deflate": [
        "java.util.zip.DeflaterOutputStream.deflate()"
    ],
    "java.security.cert.certpathvalidator.getdefaulttype": [
        "java.security.cert.CertPathValidator.getDefaultType()"
    ],
    "java.time.localtime.getminute": [
        "java.time.LocalTime.getMinute()"
    ],
    "javax.swing.jlist.getlastvisibleindex": [
        "javax.swing.JList.getLastVisibleIndex()"
    ],
    "java.util.logging.logger.getlevel": [
        "java.util.logging.Logger.getLevel()"
    ],
    "java.time.chrono.hijrahdate.now": [
        "java.time.chrono.HijrahDate.now(java.time.ZoneId)",
        "java.time.chrono.HijrahDate.now(java.time.Clock)",
        "java.time.chrono.HijrahDate.now()"
    ],
    "java.awt.image.bufferedimage.gettransparency": [
        "java.awt.image.BufferedImage.getTransparency()"
    ],
    "java.security.permission.hashcode": [
        "java.security.Permission.hashCode()"
    ],
    "javax.swing.filechooser.fileview.geticon": [
        "javax.swing.filechooser.FileView.getIcon(java.io.File)"
    ],
    "javax.xml.bind.typeconstraintexception.getlinkedexception": [
        "javax.xml.bind.TypeConstraintException.getLinkedException()"
    ],
    "java.beans.beancontext.beancontextservices.addservice": [
        "java.beans.beancontext.BeanContextServices.addService(java.lang.Class,java.beans.beancontext.BeanContextServiceProvider)"
    ],
    "javax.swing.text.plainview.nexttabstop": [
        "javax.swing.text.PlainView.nextTabStop(float,int)"
    ],
    "javax.naming.cannotproceedexception.getremainingnewname": [
        "javax.naming.CannotProceedException.getRemainingNewName()"
    ],
    "java.util.function.function.apply": [
        "java.util.function.Function.apply(java.util.function.Function)",
        "java.util.function.Function.apply(T)"
    ],
    "javax.script.scriptcontext.setreader": [
        "javax.script.ScriptContext.setReader(java.io.Reader)"
    ],
    "javax.swing.jmenu.remove": [
        "javax.swing.JMenu.remove(java.awt.Component)",
        "javax.swing.JMenu.remove(javax.swing.JMenuItem)",
        "javax.swing.JMenu.remove(int)"
    ],
    "org.omg.dynamicany._dynunionstub.get_reference": [
        "org.omg.DynamicAny._DynUnionStub.get_reference()"
    ],
    "java.awt.pageattributes.setprinterresolutiontodefault": [
        "java.awt.PageAttributes.setPrinterResolutionToDefault()"
    ],
    "javax.sql.rowset.baserowset.getpassword": [
        "javax.sql.rowset.BaseRowSet.getPassword()"
    ],
    "javax.swing.jtable.addcolumnselectioninterval": [
        "javax.swing.JTable.addColumnSelectionInterval(int,int)"
    ],
    "java.nio.charset.malformedinputexception.getinputlength": [
        "java.nio.charset.MalformedInputException.getInputLength()"
    ],
    "org.omg.dynamicany._dynenumstub.get_ushort": [
        "org.omg.DynamicAny._DynEnumStub.get_ushort()"
    ],
    "java.awt.borderlayout.minimumlayoutsize": [
        "java.awt.BorderLayout.minimumLayoutSize(java.awt.Container)"
    ],
    "javax.swing.jeditorpane.setcontenttype": [
        "javax.swing.JEditorPane.setContentType(java.lang.String)"
    ],
    "javax.swing.jtooltip.getui": [
        "javax.swing.JToolTip.getUI()"
    ],
    "javax.xml.bind.validationevent.getlocator": [
        "javax.xml.bind.ValidationEvent.getLocator()"
    ],
    "java.util.concurrent.atomic.atomicboolean.compareandset": [
        "java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean,boolean)"
    ],
    "javax.swing.plaf.synth.synthgraphicsutils.painttext": [
        "javax.swing.plaf.synth.SynthGraphicsUtils.paintText(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,java.lang.String,javax.swing.Icon,int,int,int,int,int,int,int)",
        "javax.swing.plaf.synth.SynthGraphicsUtils.paintText(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,java.lang.String,int,int,int)",
        "javax.swing.plaf.synth.SynthGraphicsUtils.paintText(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,java.lang.String,java.awt.Rectangle,int)"
    ],
    "javax.security.cert.x509certificate.getsigalgoid": [
        "javax.security.cert.X509Certificate.getSigAlgOID()"
    ],
    "javax.swing.jtabbedpane.firestatechanged": [
        "javax.swing.JTabbedPane.fireStateChanged()"
    ],
    "java.io.stringreader.read": [
        "java.io.StringReader.read()",
        "java.io.StringReader.read(char[],int,int)"
    ],
    "java.util.concurrent.forkjoinpool.submit": [
        "java.util.concurrent.ForkJoinPool.submit(java.util.concurrent.ForkJoinTask<T>)"
    ],
    "org.omg.dynamicany._dynanystub.insert_octet": [
        "org.omg.DynamicAny._DynAnyStub.insert_octet(byte)"
    ],
    "java.util.random.nextlong": [
        "java.util.Random.nextLong()"
    ],
    "java.sql.sqlexception.iterator": [
        "java.sql.SQLException.iterator()"
    ],
    "java.util.zip.zipfile.close": [
        "java.util.zip.ZipFile.close()"
    ],
    "java.lang.suppresswarnings.value": [
        "java.lang.SuppressWarnings.value()"
    ],
    "java.lang.invoke.methodhandle.invoke": [
        "java.lang.invoke.MethodHandle.invoke(java.lang.Object)",
        "java.lang.invoke.MethodHandle.invoke(java.lang.Object...)"
    ],
    "javax.sound.sampled.reverbtype.getearlyreflectionintensity": [
        "javax.sound.sampled.ReverbType.getEarlyReflectionIntensity()"
    ],
    "javax.xml.ws.spi.provider.createservicedelegate": [
        "javax.xml.ws.spi.Provider.createServiceDelegate(java.net.URL,javax.xml.namespace.QName,java.lang.Class<? extends javax.xml.ws.Service>)",
        "javax.xml.ws.spi.Provider.createServiceDelegate(java.net.URL,javax.xml.namespace.QName,java.lang.Class<? extends javax.xml.ws.Service>,javax.xml.ws.WebServiceFeature...)"
    ],
    "javax.swing.spinnernumbermodel.setminimum": [
        "javax.swing.SpinnerNumberModel.setMinimum(java.lang.Comparable)"
    ],
    "java.util.concurrent.countdownlatch.countdown": [
        "java.util.concurrent.CountDownLatch.countDown()"
    ],
    "java.time.temporal.temporalfield.issupportedby": [
        "java.time.temporal.TemporalField.isSupportedBy(java.time.temporal.TemporalAccessor)"
    ],
    "javax.swing.plaf.metal.defaultmetaltheme.getname": [
        "javax.swing.plaf.metal.DefaultMetalTheme.getName()"
    ],
    "java.util.simpletimezone.usedaylighttime": [
        "java.util.SimpleTimeZone.useDaylightTime()"
    ],
    "java.util.concurrent.completablefuture.getnumberofdependents": [
        "java.util.concurrent.CompletableFuture.getNumberOfDependents()"
    ],
    "java.sql.resultset.updatenclob": [
        "java.sql.ResultSet.updateNClob(int,java.io.Reader)",
        "java.sql.ResultSet.updateNClob(java.lang.String,java.io.Reader,long)",
        "java.sql.ResultSet.updateNClob(int,java.sql.NClob)",
        "java.sql.ResultSet.updateNClob(int,java.io.Reader,long)",
        "java.sql.ResultSet.updateNClob(java.lang.String,java.sql.NClob)",
        "java.sql.ResultSet.updateNClob(java.lang.String,java.io.Reader)"
    ],
    "javax.swing.plaf.synth.synthsliderui.uninstalldefaults": [
        "javax.swing.plaf.synth.SynthSliderUI.uninstallDefaults(javax.swing.JSlider)"
    ],
    "javax.swing.defaultbuttonmodel.addchangelistener": [
        "javax.swing.DefaultButtonModel.addChangeListener(javax.swing.event.ChangeListener)"
    ],
    "javax.management.attributevalueexp.getattribute": [
        "javax.management.AttributeValueExp.getAttribute(javax.management.ObjectName)"
    ],
    "java.beans.beancontext.beancontextservicessupport.createbcschild": [
        "java.beans.beancontext.BeanContextServicesSupport.createBCSChild(java.lang.Object,java.lang.Object)"
    ],
    "javax.net.ssl.sslcontext.getprotocol": [
        "javax.net.ssl.SSLContext.getProtocol()"
    ],
    "java.time.zoneddatetime.getnano": [
        "java.time.ZonedDateTime.getNano()"
    ],
    "javax.swing.plaf.multi.multiscrollpaneui.contains": [
        "javax.swing.plaf.multi.MultiScrollPaneUI.contains(javax.swing.JComponent,int,int)"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.setcolumndisplaysize": [
        "javax.sql.rowset.RowSetMetaDataImpl.setColumnDisplaySize(int,int)"
    ],
    "javax.crypto.spec.pbekeyspec.getsalt": [
        "javax.crypto.spec.PBEKeySpec.getSalt()"
    ],
    "javax.xml.crypto.nodesetdata.iterator": [
        "javax.xml.crypto.NodeSetData.iterator()"
    ],
    "javax.swing.text.abstractdocument.attributecontext.reclaim": [
        "javax.swing.text.AbstractDocument.AttributeContext.reclaim(javax.swing.text.AttributeSet)"
    ],
    "java.awt.geom.roundrectangle2d.float.getarcheight": [
        "java.awt.geom.RoundRectangle2D.Float.getArcHeight()"
    ],
    "java.lang.runtime.exec": [
        "java.lang.Runtime.exec(java.lang.String)",
        "java.lang.Runtime.exec(java.lang.String,java.lang.String)",
        "java.lang.Runtime.exec(java.lang.String[],java.lang.String[],java.io.File)",
        "java.lang.Runtime.exec(java.lang.String,java.lang.String[])",
        "java.lang.Runtime.exec(java.lang.String[])",
        "java.lang.Runtime.exec(java.lang.String,java.lang.String[],java.io.File)",
        "java.lang.Runtime.exec(java.lang.String,java.lang.String,java.io.File)",
        "java.lang.Runtime.exec(java.lang.String[],java.lang.String[])"
    ],
    "java.net.proxy.type.valueof": [
        "java.net.Proxy.Type.valueOf(java.lang.String)"
    ],
    "javax.swing.jcomponent.getautoscrolls": [
        "javax.swing.JComponent.getAutoscrolls()"
    ],
    "javax.sound.midi.sequencer.settempofactor": [
        "javax.sound.midi.Sequencer.setTempoFactor(float)"
    ],
    "javax.swing.plaf.multi.multimenubarui.contains": [
        "javax.swing.plaf.multi.MultiMenuBarUI.contains(javax.swing.JComponent,int,int)"
    ],
    "org.omg.dynamicany._dynarraystub.insert_ulong": [
        "org.omg.DynamicAny._DynArrayStub.insert_ulong(int)"
    ],
    "java.time.zone.zoneoffsettransition.getoffsetafter": [
        "java.time.zone.ZoneOffsetTransition.getOffsetAfter()"
    ],
    "javax.swing.japplet.getcontentpane": [
        "javax.swing.JApplet.getContentPane()"
    ],
    "javax.accessibility.accessiblecomponent.setfont": [
        "javax.accessibility.AccessibleComponent.setFont(java.awt.Font)"
    ],
    "java.awt.component.isfontset": [
        "java.awt.Component.isFontSet()"
    ],
    "java.awt.image.kernel.getkerneldata": [
        "java.awt.image.Kernel.getKernelData(float[])"
    ],
    "java.time.chrono.chronology.eraof": [
        "java.time.chrono.Chronology.eraOf(int)"
    ],
    "java.nio.file.path.tostring": [
        "java.nio.file.Path.toString()"
    ],
    "java.util.abstractmap.simpleentry.getvalue": [
        "java.util.AbstractMap.SimpleEntry.getValue()"
    ],
    "javax.swing.jcomponent.getfontmetrics": [
        "javax.swing.JComponent.getFontMetrics(java.awt.Font)"
    ],
    "java.io.bytearrayoutputstream.tobytearray": [
        "java.io.ByteArrayOutputStream.toByteArray()"
    ],
    "java.util.concurrent.phaser.register": [
        "java.util.concurrent.Phaser.register()"
    ],
    "javax.sql.rowset.serial.serialarray.clone": [
        "javax.sql.rowset.serial.SerialArray.clone()"
    ],
    "javax.management.immutabledescriptor.hashcode": [
        "javax.management.ImmutableDescriptor.hashCode()"
    ],
    "java.beans.beancontext.beancontextmembershipevent.size": [
        "java.beans.beancontext.BeanContextMembershipEvent.size()"
    ],
    "java.time.chrono.hijrahera.of": [
        "java.time.chrono.HijrahEra.of(int)"
    ],
    "java.lang.math.getexponent": [
        "java.lang.Math.getExponent(float)"
    ],
    "javax.management.monitor.stringmonitor.start": [
        "javax.management.monitor.StringMonitor.start()"
    ],
    "javax.swing.plaf.metal.metalsliderui.getticklength": [
        "javax.swing.plaf.metal.MetalSliderUI.getTickLength()"
    ],
    "javax.swing.jmenu.doclick": [
        "javax.swing.JMenu.doClick(int)"
    ],
    "javax.rmi.corba.utildelegate.unexportobject": [
        "javax.rmi.CORBA.UtilDelegate.unexportObject(java.rmi.Remote)"
    ],
    "javax.management.openmbean.openmbeanconstructorinfosupport.equals": [
        "javax.management.openmbean.OpenMBeanConstructorInfoSupport.equals(java.lang.Object)"
    ],
    "java.awt.image.bandedsamplemodel.setsamples": [
        "java.awt.image.BandedSampleModel.setSamples(int,int,int,int,int,int[],java.awt.image.DataBuffer)"
    ],
    "java.util.enummap.clear": [
        "java.util.EnumMap.clear()"
    ],
    "java.time.zone.zoneoffsettransition.of": [
        "java.time.zone.ZoneOffsetTransition.of(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneOffset)"
    ],
    "java.util.prefs.abstractpreferences.childspi": [
        "java.util.prefs.AbstractPreferences.childSpi(java.lang.String)"
    ],
    "java.awt.image.rasterop.getrenderinghints": [
        "java.awt.image.RasterOp.getRenderingHints()"
    ],
    "javax.sql.rowset.setboolean": [
        "javax.sql.RowSet.setBoolean(java.lang.String,boolean)",
        "javax.sql.RowSet.setBoolean(int,boolean)"
    ],
    "java.sql.statement.executequery": [
        "java.sql.Statement.executeQuery(java.lang.String)"
    ],
    "javax.swing.transferhandler.getpasteaction": [
        "javax.swing.TransferHandler.getPasteAction()"
    ],
    "java.beans.propertyeditor.setastext": [
        "java.beans.PropertyEditor.setAsText(java.lang.String)"
    ],
    "java.lang.reflect.wildcardtype.getlowerbounds": [
        "java.lang.reflect.WildcardType.getLowerBounds()"
    ],
    "java.nio.file.spi.filesystemprovider.getfilestore": [
        "java.nio.file.spi.FileSystemProvider.getFileStore(java.nio.file.Path)"
    ],
    "javax.imageio.iioparam.getsubsamplingyoffset": [
        "javax.imageio.IIOParam.getSubsamplingYOffset()"
    ],
    "java.util.stream.stream.maptoint": [
        "java.util.stream.Stream.mapToInt(java.util.function.ToIntFunction<? super java.util.stream.Stream>)",
        "java.util.stream.Stream.mapToInt(java.util.function.ToIntFunction<? super T>)"
    ],
    "java.util.concurrent.semaphore.tryacquire": [
        "java.util.concurrent.Semaphore.tryAcquire()",
        "java.util.concurrent.Semaphore.tryAcquire(int)",
        "java.util.concurrent.Semaphore.tryAcquire(long,java.util.concurrent.TimeUnit)",
        "java.util.concurrent.Semaphore.tryAcquire(int,long,java.util.concurrent.TimeUnit)"
    ],
    "javax.imageio.metadata.iiometadatanode.getprevioussibling": [
        "javax.imageio.metadata.IIOMetadataNode.getPreviousSibling()"
    ],
    "java.security.keystore.builder.newinstance": [
        "java.security.KeyStore.Builder.newInstance(java.lang.String,java.security.Provider,java.security.KeyStore.ProtectionParameter)",
        "java.security.KeyStore.Builder.newInstance(java.lang.String,java.security.Provider,java.io.File,java.security.KeyStore.ProtectionParameter)",
        "java.security.KeyStore.Builder.newInstance(java.security.KeyStore,java.security.KeyStore.ProtectionParameter)"
    ],
    "javax.swing.jinternalframe.settitle": [
        "javax.swing.JInternalFrame.setTitle(java.lang.String)"
    ],
    "java.util.vector.insertelementat": [
        "java.util.Vector.insertElementAt(java.util.Vector,int)",
        "java.util.Vector.insertElementAt(E,int)"
    ],
    "javax.swing.plaf.multi.multitreeui.getclosestpathforlocation": [
        "javax.swing.plaf.multi.MultiTreeUI.getClosestPathForLocation(javax.swing.JTree,int,int)"
    ],
    "java.awt.datatransfer.systemflavormap.encodedataflavor": [
        "java.awt.datatransfer.SystemFlavorMap.encodeDataFlavor(java.awt.datatransfer.DataFlavor)"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.getcolumntype": [
        "javax.sql.rowset.RowSetMetaDataImpl.getColumnType(int)"
    ],
    "javax.swing.jpopupmenu.getcomponent": [
        "javax.swing.JPopupMenu.getComponent()"
    ],
    "javax.swing.jmenu.processkeyevent": [
        "javax.swing.JMenu.processKeyEvent(java.awt.event.KeyEvent)"
    ],
    "javax.rmi.corba.util.readany": [
        "javax.rmi.CORBA.Util.readAny(org.omg.CORBA.portable.InputStream)"
    ],
    "java.text.collationelementiterator.tertiaryorder": [
        "java.text.CollationElementIterator.tertiaryOrder(int)"
    ],
    "java.time.offsetdatetime.plushours": [
        "java.time.OffsetDateTime.plusHours(long)"
    ],
    "javax.management.timer.timermbean.getdate": [
        "javax.management.timer.TimerMBean.getDate(java.lang.Integer)"
    ],
    "java.awt.image.writableraster.createwritablechild": [
        "java.awt.image.WritableRaster.createWritableChild(int,int,int,int,int,int,int[])"
    ],
    "javax.swing.defaultlistselectionmodel.getmaxselectionindex": [
        "javax.swing.DefaultListSelectionModel.getMaxSelectionIndex()"
    ],
    "java.util.concurrent.concurrentlinkeddeque.offer": [
        "java.util.concurrent.ConcurrentLinkedDeque.offer(E)",
        "java.util.concurrent.ConcurrentLinkedDeque.offer(java.util.concurrent.ConcurrentLinkedDeque)"
    ],
    "javax.swing.defaultdesktopmanager.openframe": [
        "javax.swing.DefaultDesktopManager.openFrame(javax.swing.JInternalFrame)"
    ],
    "javax.activation.datahandler.setcommandmap": [
        "javax.activation.DataHandler.setCommandMap(javax.activation.CommandMap)"
    ],
    "javax.swing.plaf.basic.basictreeui.updateleadselectionrow": [
        "javax.swing.plaf.basic.BasicTreeUI.updateLeadSelectionRow()"
    ],
    "javax.swing.event.celleditorlistener.editingcanceled": [
        "javax.swing.event.CellEditorListener.editingCanceled(javax.swing.event.ChangeEvent)"
    ],
    "javax.swing.jpopupmenu.getselectionmodel": [
        "javax.swing.JPopupMenu.getSelectionModel()"
    ],
    "javax.rmi.portableremoteobject.unexportobject": [
        "javax.rmi.PortableRemoteObject.unexportObject(java.rmi.Remote)"
    ],
    "javax.xml.bind.annotation.xmlnsform.values": [
        "javax.xml.bind.annotation.XmlNsForm.values()"
    ],
    "java.awt.container.addpropertychangelistener": [
        "java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",
        "java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "java.awt.robot.mouserelease": [
        "java.awt.Robot.mouseRelease(int)"
    ],
    "javax.sql.rowset.setclob": [
        "javax.sql.RowSet.setClob(java.lang.String,java.io.Reader,long)",
        "javax.sql.RowSet.setClob(java.lang.String,java.io.Reader)",
        "javax.sql.RowSet.setClob(java.lang.String,java.sql.Clob)",
        "javax.sql.RowSet.setClob(int,java.sql.Clob)",
        "javax.sql.RowSet.setClob(int,java.io.Reader,long)",
        "javax.sql.RowSet.setClob(int,java.io.Reader)"
    ],
    "javax.crypto.spec.oaepparameterspec.getmgfparameters": [
        "javax.crypto.spec.OAEPParameterSpec.getMGFParameters()"
    ],
    "javax.print.attribute.printrequestattributeset.addall": [
        "javax.print.attribute.PrintRequestAttributeSet.addAll(javax.print.attribute.AttributeSet)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintoptionpanebackground": [
        "javax.swing.plaf.synth.SynthPainter.paintOptionPaneBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.plaf.basic.basictreeui.paintverticalpartofleg": [
        "javax.swing.plaf.basic.BasicTreeUI.paintVerticalPartOfLeg(java.awt.Graphics,java.awt.Rectangle,java.awt.Insets,javax.swing.tree.TreePath)"
    ],
    "javax.swing.jmenuitem.processmenudragmouseevent": [
        "javax.swing.JMenuItem.processMenuDragMouseEvent(javax.swing.event.MenuDragMouseEvent)"
    ],
    "javax.swing.text.utilities.getpreviousword": [
        "javax.swing.text.Utilities.getPreviousWord(javax.swing.text.JTextComponent,int)"
    ],
    "javax.swing.repaintmanager.currentmanager": [
        "javax.swing.RepaintManager.currentManager(java.awt.Component)",
        "javax.swing.RepaintManager.currentManager(javax.swing.JComponent)"
    ],
    "javax.swing.actionmap.remove": [
        "javax.swing.ActionMap.remove(java.lang.Object)"
    ],
    "javax.swing.plaf.multi.multidesktopiconui.paint": [
        "javax.swing.plaf.multi.MultiDesktopIconUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.filechooser.filesystemview.getdefaultdirectory": [
        "javax.swing.filechooser.FileSystemView.getDefaultDirectory()"
    ],
    "javax.swing.plaf.synth.synthsliderui.layout": [
        "javax.swing.plaf.synth.SynthSliderUI.layout()"
    ],
    "javax.naming.context.createsubcontext": [
        "javax.naming.Context.createSubcontext(java.lang.String)",
        "javax.naming.Context.createSubcontext(javax.naming.Name)"
    ],
    "java.util.concurrent.locks.abstractqueuedsynchronizer.haswaiters": [
        "java.util.concurrent.locks.AbstractQueuedSynchronizer.hasWaiters(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)"
    ],
    "javax.print.attribute.standard.printerresolution.getcategory": [
        "javax.print.attribute.standard.PrinterResolution.getCategory()"
    ],
    "java.util.collection.spliterator": [
        "java.util.Collection.spliterator()"
    ],
    "javax.swing.plaf.synth.synthpanelui.update": [
        "javax.swing.plaf.synth.SynthPanelUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.security.cert.extension.encode": [
        "java.security.cert.Extension.encode(java.io.OutputStream)"
    ],
    "java.text.decimalformatsymbols.setdecimalseparator": [
        "java.text.DecimalFormatSymbols.setDecimalSeparator(char)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getmenubackground": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getMenuBackground()"
    ],
    "java.util.zip.gzipoutputstream.finish": [
        "java.util.zip.GZIPOutputStream.finish()"
    ],
    "java.rmi.marshalledobject.equals": [
        "java.rmi.MarshalledObject.equals(java.lang.Object)"
    ],
    "java.sql.callablestatement.setnull": [
        "java.sql.CallableStatement.setNull(java.lang.String,int,java.lang.String)",
        "java.sql.CallableStatement.setNull(java.lang.String,int)"
    ],
    "javax.management.mbeanserverdelegate.getspecificationname": [
        "javax.management.MBeanServerDelegate.getSpecificationName()"
    ],
    "javax.net.ssl.sslengine.closeoutbound": [
        "javax.net.ssl.SSLEngine.closeOutbound()"
    ],
    "java.util.concurrent.arrayblockingqueue.iterator": [
        "java.util.concurrent.ArrayBlockingQueue.iterator()"
    ],
    "java.text.dateformat.parse": [
        "java.text.DateFormat.parse(java.lang.String,java.text.ParsePosition)",
        "java.text.DateFormat.parse(java.lang.String)"
    ],
    "java.time.offsetdatetime.truncatedto": [
        "java.time.OffsetDateTime.truncatedTo(java.time.temporal.TemporalUnit)"
    ],
    "javax.imageio.imagewriter.getoutput": [
        "javax.imageio.ImageWriter.getOutput()"
    ],
    "javax.swing.jpopupmenu.setlocation": [
        "javax.swing.JPopupMenu.setLocation(int,int)"
    ],
    "javax.swing.text.abstractdocument.elementedit.redo": [
        "javax.swing.text.AbstractDocument.ElementEdit.redo()"
    ],
    "java.awt.geom.affinetransform.getrotateinstance": [
        "java.awt.geom.AffineTransform.getRotateInstance(double)",
        "java.awt.geom.AffineTransform.getRotateInstance(double,double,double)",
        "java.awt.geom.AffineTransform.getRotateInstance(double,double,double,double)",
        "java.awt.geom.AffineTransform.getRotateInstance(double,double)"
    ],
    "javax.swing.tree.abstractlayoutcache.setselectionmodel": [
        "javax.swing.tree.AbstractLayoutCache.setSelectionModel(javax.swing.tree.TreeSelectionModel)"
    ],
    "java.io.console.reader": [
        "java.io.Console.reader()"
    ],
    "org.omg.dynamicany._dynsequencestub.insert_float": [
        "org.omg.DynamicAny._DynSequenceStub.insert_float(float)"
    ],
    "javax.swing.text.plaindocument.createdefaultroot": [
        "javax.swing.text.PlainDocument.createDefaultRoot()"
    ],
    "javax.management.mbeaninfo.getdescription": [
        "javax.management.MBeanInfo.getDescription()"
    ],
    "java.awt.image.indexcolormodel.gettransparentpixel": [
        "java.awt.image.IndexColorModel.getTransparentPixel()"
    ],
    "javax.swing.plaf.basic.basictreeui.setcellrenderer": [
        "javax.swing.plaf.basic.BasicTreeUI.setCellRenderer(javax.swing.tree.TreeCellRenderer)"
    ],
    "java.util.stream.longstream.maptoint": [
        "java.util.stream.LongStream.mapToInt(java.util.function.LongToIntFunction)"
    ],
    "java.util.locale.languagerange.parse": [
        "java.util.Locale.LanguageRange.parse(java.lang.String)",
        "java.util.Locale.LanguageRange.parse(java.lang.String,,java.util.List<java.lang.String>>)"
    ],
    "javax.management.monitor.gaugemonitor.setdifferencemode": [
        "javax.management.monitor.GaugeMonitor.setDifferenceMode(boolean)"
    ],
    "javax.swing.text.maskformatter.setinvalidcharacters": [
        "javax.swing.text.MaskFormatter.setInvalidCharacters(java.lang.String)"
    ],
    "org.omg.dynamicany._dynanystub.get_reference": [
        "org.omg.DynamicAny._DynAnyStub.get_reference()"
    ],
    "javax.swing.plaf.popupmenuui.getpopup": [
        "javax.swing.plaf.PopupMenuUI.getPopup(javax.swing.JPopupMenu,int,int)"
    ],
    "java.text.fieldposition.getfield": [
        "java.text.FieldPosition.getField()"
    ],
    "java.sql.resultset.updatefloat": [
        "java.sql.ResultSet.updateFloat(java.lang.String,float)",
        "java.sql.ResultSet.updateFloat(int,float)"
    ],
    "org.omg.dynamicany._dynarraystub.get_elements": [
        "org.omg.DynamicAny._DynArrayStub.get_elements()"
    ],
    "javax.accessibility.accessiblecomponent.getbounds": [
        "javax.accessibility.AccessibleComponent.getBounds()"
    ],
    "java.text.decimalformat.getmaximumfractiondigits": [
        "java.text.DecimalFormat.getMaximumFractionDigits()"
    ],
    "javax.sql.connectioneventlistener.connectionclosed": [
        "javax.sql.ConnectionEventListener.connectionClosed(javax.sql.ConnectionEvent)"
    ],
    "javax.swing.jmenuitem.processmenukeyevent": [
        "javax.swing.JMenuItem.processMenuKeyEvent(javax.swing.event.MenuKeyEvent)"
    ],
    "java.util.zip.crc32.reset": [
        "java.util.zip.CRC32.reset()"
    ],
    "javax.sql.rowset.joinrowset.supportsinnerjoin": [
        "javax.sql.rowset.JoinRowSet.supportsInnerJoin()"
    ],
    "java.net.url.set": [
        "java.net.URL.set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
        "java.net.URL.set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthpainter.painttableheaderbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintTableHeaderBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.management.descriptor.hashcode": [
        "javax.management.Descriptor.hashCode()"
    ],
    "java.io.file.listfiles": [
        "java.io.File.listFiles(java.io.FileFilter)",
        "java.io.File.listFiles()",
        "java.io.File.listFiles(java.io.FilenameFilter)"
    ],
    "javax.management.mbeanserverfactory.findmbeanserver": [
        "javax.management.MBeanServerFactory.findMBeanServer(java.lang.String)"
    ],
    "java.awt.event.hierarchyevent.getchangeflags": [
        "java.awt.event.HierarchyEvent.getChangeFlags()"
    ],
    "org.omg.corba.orb.resolve_initial_references": [
        "org.omg.CORBA.ORB.resolve_initial_references(java.lang.String)"
    ],
    "javax.xml.soap.soapheader.addnotunderstoodheaderelement": [
        "javax.xml.soap.SOAPHeader.addNotUnderstoodHeaderElement(javax.xml.namespace.QName)"
    ],
    "java.awt.image.samplemodel.getwidth": [
        "java.awt.image.SampleModel.getWidth()"
    ],
    "java.net.datagramsocket.setdatagramsocketimplfactory": [
        "java.net.DatagramSocket.setDatagramSocketImplFactory(java.net.DatagramSocketImplFactory)"
    ],
    "java.util.concurrent.locks.condition.awaituntil": [
        "java.util.concurrent.locks.Condition.awaitUntil(java.util.Date)"
    ],
    "javax.swing.timer.fireactionperformed": [
        "javax.swing.Timer.fireActionPerformed(java.awt.event.ActionEvent)"
    ],
    "javax.swing.jinternalframe.jdesktopicon.getinternalframe": [
        "javax.swing.JInternalFrame.JDesktopIcon.getInternalFrame()"
    ],
    "java.awt.image.renderedimage.getsamplemodel": [
        "java.awt.image.RenderedImage.getSampleModel()"
    ],
    "java.awt.textcomponent.getaccessiblecontext": [
        "java.awt.TextComponent.getAccessibleContext()"
    ],
    "java.awt.menu.getaccessiblecontext": [
        "java.awt.Menu.getAccessibleContext()"
    ],
    "org.omg.dynamicany._dynarraystub.get_short": [
        "org.omg.DynamicAny._DynArrayStub.get_short()"
    ],
    "java.awt.containerorderfocustraversalpolicy.getcomponentbefore": [
        "java.awt.ContainerOrderFocusTraversalPolicy.getComponentBefore(java.awt.Container,java.awt.Component)"
    ],
    "java.util.regex.matcher.matches": [
        "java.util.regex.Matcher.matches()"
    ],
    "java.util.concurrent.completionstage.thenrun": [
        "java.util.concurrent.CompletionStage.thenRun(java.lang.Runnable)"
    ],
    "javax.print.attribute.size2dsyntax.gety": [
        "javax.print.attribute.Size2DSyntax.getY(int)"
    ],
    "java.text.dateformatsymbols.getzonestrings": [
        "java.text.DateFormatSymbols.getZoneStrings()"
    ],
    "javax.lang.model.util.simpleannotationvaluevisitor6.visitstring": [
        "javax.lang.model.util.SimpleAnnotationValueVisitor6.visitString(java.lang.String,javax.lang.model.util.SimpleAnnotationValueVisitor6)"
    ],
    "java.awt.print.printerjob.setjobname": [
        "java.awt.print.PrinterJob.setJobName(java.lang.String)"
    ],
    "javax.swing.text.defaultstyleddocument.insertupdate": [
        "javax.swing.text.DefaultStyledDocument.insertUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent,javax.swing.text.AttributeSet)"
    ],
    "java.security.spec.ecfield.getfieldsize": [
        "java.security.spec.ECField.getFieldSize()"
    ],
    "java.util.concurrent.locks.stampedlock.tostring": [
        "java.util.concurrent.locks.StampedLock.toString()"
    ],
    "java.time.localtime.truncatedto": [
        "java.time.LocalTime.truncatedTo(java.time.temporal.TemporalUnit)"
    ],
    "javax.swing.tree.treepath.getpathcount": [
        "javax.swing.tree.TreePath.getPathCount()"
    ],
    "javax.swing.defaultbuttonmodel.setactioncommand": [
        "javax.swing.DefaultButtonModel.setActionCommand(java.lang.String)"
    ],
    "javax.swing.plaf.metal.metaltheme.getwindowtitleforeground": [
        "javax.swing.plaf.metal.MetalTheme.getWindowTitleForeground()"
    ],
    "javax.xml.soap.soapelement.setencodingstyle": [
        "javax.xml.soap.SOAPElement.setEncodingStyle(java.lang.String)"
    ],
    "java.nio.file.attribute.filetime.to": [
        "java.nio.file.attribute.FileTime.to(java.util.concurrent.TimeUnit)"
    ],
    "javax.swing.filechooser.filenameextensionfilter.accept": [
        "javax.swing.filechooser.FileNameExtensionFilter.accept(java.io.File)"
    ],
    "java.nio.shortbuffer.asreadonlybuffer": [
        "java.nio.ShortBuffer.asReadOnlyBuffer()"
    ],
    "java.lang.management.memorytype.valueof": [
        "java.lang.management.MemoryType.valueOf(java.lang.String)"
    ],
    "java.lang.math.atan": [
        "java.lang.Math.atan(double)"
    ],
    "java.util.stream.longstream.count": [
        "java.util.stream.LongStream.count()"
    ],
    "javax.swing.jlist.setfixedcellwidth": [
        "javax.swing.JList.setFixedCellWidth(int)"
    ],
    "javax.swing.plaf.synth.synthrootpaneui.paint": [
        "javax.swing.plaf.synth.SynthRootPaneUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",
        "javax.swing.plaf.synth.SynthRootPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.text.choiceformat.getformats": [
        "java.text.ChoiceFormat.getFormats()"
    ],
    "javax.naming.directory.attribute.set": [
        "javax.naming.directory.Attribute.set(int,java.lang.Object)"
    ],
    "org.omg.cosnaming.namingcontextoperations.list": [
        "org.omg.CosNaming.NamingContextOperations.list(int,org.omg.CosNaming.BindingListHolder,org.omg.CosNaming.BindingIteratorHolder)"
    ],
    "java.util.abstractmap.simpleentry.hashcode": [
        "java.util.AbstractMap.SimpleEntry.hashCode()"
    ],
    "java.lang.process.getoutputstream": [
        "java.lang.Process.getOutputStream()"
    ],
    "javax.script.scriptengine.getfactory": [
        "javax.script.ScriptEngine.getFactory()"
    ],
    "java.lang.character.codepointbefore": [
        "java.lang.Character.codePointBefore(char[],int,int)",
        "java.lang.Character.codePointBefore(java.lang.CharSequence,int)",
        "java.lang.Character.codePointBefore(char[],int)"
    ],
    "javax.swing.defaultlistselectionmodel.setleadselectionindex": [
        "javax.swing.DefaultListSelectionModel.setLeadSelectionIndex(int)"
    ],
    "java.awt.image.databufferbyte.getdata": [
        "java.awt.image.DataBufferByte.getData(int)"
    ],
    "javax.swing.transferhandler.transfersupport.getdropaction": [
        "javax.swing.TransferHandler.TransferSupport.getDropAction()"
    ],
    "java.lang.boolean.valueof": [
        "java.lang.Boolean.valueOf(java.lang.String)",
        "java.lang.Boolean.valueOf(boolean)"
    ],
    "javax.rmi.corba.valuehandler.getrmirepositoryid": [
        "javax.rmi.CORBA.ValueHandler.getRMIRepositoryID(java.lang.Class)"
    ],
    "org.omg.corba.portable.outputstream.write_short_array": [
        "org.omg.CORBA.portable.OutputStream.write_short_array(short[],int,int)"
    ],
    "javax.accessibility.accessiblecontext.getaccessiblechild": [
        "javax.accessibility.AccessibleContext.getAccessibleChild(int)"
    ],
    "javax.print.attribute.standard.jobkoctetsprocessed.getcategory": [
        "javax.print.attribute.standard.JobKOctetsProcessed.getCategory()"
    ],
    "javax.swing.jtable.setrowselectioninterval": [
        "javax.swing.JTable.setRowSelectionInterval(int,int)"
    ],
    "javax.swing.plaf.synth.synthtableui.createui": [
        "javax.swing.plaf.synth.SynthTableUI.createUI(javax.swing.JComponent)"
    ],
    "javax.swing.tree.fixedheightlayoutcache.getbounds": [
        "javax.swing.tree.FixedHeightLayoutCache.getBounds(javax.swing.tree.TreePath,java.awt.Rectangle)"
    ],
    "javax.swing.plaf.metal.metalinternalframeui.createborderlistener": [
        "javax.swing.plaf.metal.MetalInternalFrameUI.createBorderListener(javax.swing.JInternalFrame)"
    ],
    "javax.swing.plaf.multi.multitableui.getminimumsize": [
        "javax.swing.plaf.multi.MultiTableUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "javax.swing.transferhandler.transfersupport.getsourcedropactions": [
        "javax.swing.TransferHandler.TransferSupport.getSourceDropActions()"
    ],
    "javax.print.attribute.standard.jobkoctets.getname": [
        "javax.print.attribute.standard.JobKOctets.getName()"
    ],
    "java.math.bigdecimal.doublevalue": [
        "java.math.BigDecimal.doubleValue()"
    ],
    "java.sql.resultset.getclob": [
        "java.sql.ResultSet.getClob(int)",
        "java.sql.ResultSet.getClob(java.lang.String)"
    ],
    "java.awt.button.getaccessiblecontext": [
        "java.awt.Button.getAccessibleContext()"
    ],
    "java.awt.geom.cubiccurve2d.double.getp2": [
        "java.awt.geom.CubicCurve2D.Double.getP2()"
    ],
    "javax.swing.uimanager.setlookandfeel": [
        "javax.swing.UIManager.setLookAndFeel(java.lang.String)",
        "javax.swing.UIManager.setLookAndFeel(javax.swing.LookAndFeel)"
    ],
    "javax.script.scriptenginemanager.getbindings": [
        "javax.script.ScriptEngineManager.getBindings()"
    ],
    "java.time.chrono.chronolocaldatetime.minus": [
        "java.time.chrono.ChronoLocalDateTime.minus(java.time.temporal.TemporalAmount)",
        "java.time.chrono.ChronoLocalDateTime.minus(long,java.time.temporal.TemporalUnit)"
    ],
    "javax.imageio.stream.imageinputstreamimpl.mark": [
        "javax.imageio.stream.ImageInputStreamImpl.mark()"
    ],
    "org.ietf.jgss.gsscontext.getcreddelegstate": [
        "org.ietf.jgss.GSSContext.getCredDelegState()"
    ],
    "java.lang.invoke.methodtype.erase": [
        "java.lang.invoke.MethodType.erase()"
    ],
    "java.time.offsetdatetime.of": [
        "java.time.OffsetDateTime.of(java.time.LocalDate,java.time.LocalTime,java.time.ZoneOffset)",
        "java.time.OffsetDateTime.of(java.time.LocalDateTime,java.time.ZoneOffset)",
        "java.time.OffsetDateTime.of(int,int,int,int,int,int,int,java.time.ZoneOffset)"
    ],
    "java.awt.insets.set": [
        "java.awt.Insets.set(int,int,int,int)"
    ],
    "java.util.concurrent.locks.abstractqueuedlongsynchronizer.getwaitqueuelength": [
        "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject)"
    ],
    "java.nio.charset.spi.charsetprovider.charsets": [
        "java.nio.charset.spi.CharsetProvider.charsets()"
    ],
    "javax.imageio.event.iioreadupdatelistener.thumbnailupdate": [
        "javax.imageio.event.IIOReadUpdateListener.thumbnailUpdate(javax.imageio.ImageReader,java.awt.image.BufferedImage,int,int,int,int,int,int,int[])"
    ],
    "java.util.calendar.getdisplayname": [
        "java.util.Calendar.getDisplayName(int,int,java.util.Locale)"
    ],
    "javax.swing.undo.undoableeditsupport.addundoableeditlistener": [
        "javax.swing.undo.UndoableEditSupport.addUndoableEditListener(javax.swing.event.UndoableEditListener)"
    ],
    "java.sql.resultset.setfetchsize": [
        "java.sql.ResultSet.setFetchSize(int)"
    ],
    "java.util.concurrent.atomic.doubleaccumulator.longvalue": [
        "java.util.concurrent.atomic.DoubleAccumulator.longValue()"
    ],
    "javax.tools.diagnostic.getendposition": [
        "javax.tools.Diagnostic.getEndPosition()"
    ],
    "java.text.collator.hashcode": [
        "java.text.Collator.hashCode()"
    ],
    "javax.management.mbeanparameterinfo.clone": [
        "javax.management.MBeanParameterInfo.clone()"
    ],
    "java.util.random.nextint": [
        "java.util.Random.nextInt()"
    ],
    "javax.swing.plaf.multi.multicomboboxui.ispopupvisible": [
        "javax.swing.plaf.multi.MultiComboBoxUI.isPopupVisible(javax.swing.JComboBox)"
    ],
    "javax.swing.text.glyphview.clone": [
        "javax.swing.text.GlyphView.clone()"
    ],
    "org.w3c.dom.ls.domimplementationls.createlsparser": [
        "org.w3c.dom.ls.DOMImplementationLS.createLSParser(short,java.lang.String)"
    ],
    "org.omg.dynamicany._dynvaluestub.next": [
        "org.omg.DynamicAny._DynValueStub.next()"
    ],
    "javax.swing.plaf.synth.synthlabelui.getpreferredsize": [
        "javax.swing.plaf.synth.SynthLabelUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "javax.swing.jlabel.seticon": [
        "javax.swing.JLabel.setIcon(javax.swing.Icon)"
    ],
    "java.awt.renderinghints.hashcode": [
        "java.awt.RenderingHints.hashCode()"
    ],
    "javax.swing.text.styleddocument.setlogicalstyle": [
        "javax.swing.text.StyledDocument.setLogicalStyle(int,javax.swing.text.Style)"
    ],
    "javax.swing.jcomponent.setdoublebuffered": [
        "javax.swing.JComponent.setDoubleBuffered(boolean)"
    ],
    "java.util.hashmap.size": [
        "java.util.HashMap.size()"
    ],
    "java.sql.sqloutput.writenclob": [
        "java.sql.SQLOutput.writeNClob(java.sql.NClob)"
    ],
    "javax.swing.jcomponent.getdebuggraphicsoptions": [
        "javax.swing.JComponent.getDebugGraphicsOptions()"
    ],
    "javax.swing.tree.defaulttreecelleditor.getfont": [
        "javax.swing.tree.DefaultTreeCellEditor.getFont()"
    ],
    "java.sql.resultset.updateshort": [
        "java.sql.ResultSet.updateShort(int,short)",
        "java.sql.ResultSet.updateShort(java.lang.String,short)"
    ],
    "java.util.concurrent.linkedtransferqueue.remove": [
        "java.util.concurrent.LinkedTransferQueue.remove(java.lang.Object)"
    ],
    "javax.swing.plaf.multi.multifilechooserui.getacceptallfilefilter": [
        "javax.swing.plaf.multi.MultiFileChooserUI.getAcceptAllFileFilter(javax.swing.JFileChooser)"
    ],
    "java.awt.image.renderable.parameterblock.setsource": [
        "java.awt.image.renderable.ParameterBlock.setSource(java.lang.Object,int)"
    ],
    "javax.swing.tree.defaulttreecellrenderer.getleaficon": [
        "javax.swing.tree.DefaultTreeCellRenderer.getLeafIcon()"
    ],
    "java.util.concurrent.forkjointask.get": [
        "java.util.concurrent.ForkJoinTask.get()"
    ],
    "javax.swing.plaf.multi.multiprogressbarui.paint": [
        "javax.swing.plaf.multi.MultiProgressBarUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.nio.file.attribute.aclentrytype.valueof": [
        "java.nio.file.attribute.AclEntryType.valueOf(java.lang.String)"
    ],
    "javax.naming.ldap.basiccontrol.iscritical": [
        "javax.naming.ldap.BasicControl.isCritical()"
    ],
    "javax.swing.filechooser.filesystemview.isdrive": [
        "javax.swing.filechooser.FileSystemView.isDrive(java.io.File)"
    ],
    "javax.print.attribute.standard.jobkoctetssupported.equals": [
        "javax.print.attribute.standard.JobKOctetsSupported.equals(java.lang.Object)"
    ],
    "org.omg.corba.setoverridetype.value": [
        "org.omg.CORBA.SetOverrideType.value()"
    ],
    "java.awt.geom.line2d.gety2": [
        "java.awt.geom.Line2D.getY2()"
    ],
    "java.beans.defaultpersistencedelegate.initialize": [
        "java.beans.DefaultPersistenceDelegate.initialize(java.lang.Class<?>,java.lang.Object,java.lang.Object,java.beans.Encoder)"
    ],
    "javax.swing.lookandfeel.getdefaults": [
        "javax.swing.LookAndFeel.getDefaults()"
    ],
    "javax.swing.plaf.metal.metaltheme.getwindowbackground": [
        "javax.swing.plaf.metal.MetalTheme.getWindowBackground()"
    ],
    "java.security.spec.rsamultiprimeprivatecrtkeyspec.getcrtcoefficient": [
        "java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getCrtCoefficient()"
    ],
    "javax.xml.soap.soapmessage.setproperty": [
        "javax.xml.soap.SOAPMessage.setProperty(java.lang.String,java.lang.Object)"
    ],
    "javax.swing.jeditorpane.firehyperlinkupdate": [
        "javax.swing.JEditorPane.fireHyperlinkUpdate(javax.swing.event.HyperlinkEvent)"
    ],
    "org.xml.sax.xmlreader.seterrorhandler": [
        "org.xml.sax.XMLReader.setErrorHandler(org.xml.sax.ErrorHandler)"
    ],
    "java.text.simpledateformat.getdateformatsymbols": [
        "java.text.SimpleDateFormat.getDateFormatSymbols()"
    ],
    "java.net.inetaddress.gethostname": [
        "java.net.InetAddress.getHostName()"
    ],
    "java.util.listiterator.nextindex": [
        "java.util.ListIterator.nextIndex()"
    ],
    "java.security.keystorespi.engineload": [
        "java.security.KeyStoreSpi.engineLoad(java.security.KeyStore.LoadStoreParameter)",
        "java.security.KeyStoreSpi.engineLoad(java.io.InputStream,char[])"
    ],
    "java.util.abstractset.hashcode": [
        "java.util.AbstractSet.hashCode()"
    ],
    "javax.swing.jrootpane.getjmenubar": [
        "javax.swing.JRootPane.getJMenuBar()"
    ],
    "javax.xml.soap.soapfactory.newinstance": [
        "javax.xml.soap.SOAPFactory.newInstance()",
        "javax.xml.soap.SOAPFactory.newInstance(java.lang.String)"
    ],
    "javax.swing.tree.defaultmutabletreenode.setallowschildren": [
        "javax.swing.tree.DefaultMutableTreeNode.setAllowsChildren(boolean)"
    ],
    "java.time.offsettime.from": [
        "java.time.OffsetTime.from(java.time.temporal.TemporalAccessor)"
    ],
    "org.omg.corba.idltypeoperations.type": [
        "org.omg.CORBA.IDLTypeOperations.type()"
    ],
    "java.util.concurrent.scheduledthreadpoolexecutor.setexecuteexistingdelayedtasksaftershutdownpolicy": [
        "java.util.concurrent.ScheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean)"
    ],
    "javax.swing.jtree.firetreecollapsed": [
        "javax.swing.JTree.fireTreeCollapsed(javax.swing.tree.TreePath)"
    ],
    "java.security.securerandom.getinstancestrong": [
        "java.security.SecureRandom.getInstanceStrong()"
    ],
    "java.sql.statement.getconnection": [
        "java.sql.Statement.getConnection()"
    ],
    "java.awt.canvas.paint": [
        "java.awt.Canvas.paint(java.awt.Graphics)"
    ],
    "javax.swing.plaf.nimbus.nimbusstyle.installdefaults": [
        "javax.swing.plaf.nimbus.NimbusStyle.installDefaults(javax.swing.plaf.synth.SynthContext)"
    ],
    "org.omg.dynamicany._dynarraystub.current_component": [
        "org.omg.DynamicAny._DynArrayStub.current_component()"
    ],
    "javax.net.ssl.sslengine.closeinbound": [
        "javax.net.ssl.SSLEngine.closeInbound()"
    ],
    "java.nio.charset.charsetencoder.replacewith": [
        "java.nio.charset.CharsetEncoder.replaceWith(byte[])"
    ],
    "javax.swing.scrollpanelayout.addlayoutcomponent": [
        "javax.swing.ScrollPaneLayout.addLayoutComponent(java.lang.String,java.awt.Component)"
    ],
    "javax.xml.bind.datatypeconverter.printshort": [
        "javax.xml.bind.DatatypeConverter.printShort(short)"
    ],
    "javax.imageio.metadata.iiometadataformatimpl.getattributedescription": [
        "javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeDescription(java.lang.String,java.lang.String,java.util.Locale)"
    ],
    "javax.swing.jmenu.paramstring": [
        "javax.swing.JMenu.paramString()"
    ],
    "javax.xml.soap.attachmentpart.setdatahandler": [
        "javax.xml.soap.AttachmentPart.setDataHandler(javax.activation.DataHandler)"
    ],
    "javax.xml.soap.attachmentpart.getsize": [
        "javax.xml.soap.AttachmentPart.getSize()"
    ],
    "javax.net.ssl.sslcontext.getsupportedsslparameters": [
        "javax.net.ssl.SSLContext.getSupportedSSLParameters()"
    ],
    "javax.swing.plaf.multi.multisplitpaneui.resettopreferredsizes": [
        "javax.swing.plaf.multi.MultiSplitPaneUI.resetToPreferredSizes(javax.swing.JSplitPane)"
    ],
    "java.time.localdatetime.withminute": [
        "java.time.LocalDateTime.withMinute(int)"
    ],
    "javax.swing.jtabbedpane.getmodel": [
        "javax.swing.JTabbedPane.getModel()"
    ],
    "java.awt.image.raster.getsamplemodeltranslatey": [
        "java.awt.image.Raster.getSampleModelTranslateY()"
    ],
    "javax.crypto.macspi.enginegetmaclength": [
        "javax.crypto.MacSpi.engineGetMacLength()"
    ],
    "javax.swing.tree.mutabletreenode.setuserobject": [
        "javax.swing.tree.MutableTreeNode.setUserObject(java.lang.Object)"
    ],
    "java.awt.print.paper.clone": [
        "java.awt.print.Paper.clone()"
    ],
    "javax.xml.stream.xmlstreamreader.isstandalone": [
        "javax.xml.stream.XMLStreamReader.isStandalone()"
    ],
    "javax.sql.rowset.baserowset.setreadonly": [
        "javax.sql.rowset.BaseRowSet.setReadOnly(boolean)"
    ],
    "java.util.concurrent.atomic.atomicstampedreference.get": [
        "java.util.concurrent.atomic.AtomicStampedReference.get(int[])"
    ],
    "java.net.uri.toasciistring": [
        "java.net.URI.toASCIIString()"
    ],
    "javax.sound.midi.sequencer.addmetaeventlistener": [
        "javax.sound.midi.Sequencer.addMetaEventListener(javax.sound.midi.MetaEventListener)"
    ],
    "java.awt.graphics2d.draw3drect": [
        "java.awt.Graphics2D.draw3DRect(int,int,int,int,boolean)"
    ],
    "javax.sound.midi.synthesizer.getvoicestatus": [
        "javax.sound.midi.Synthesizer.getVoiceStatus()"
    ],
    "javax.accessibility.accessibletable.getaccessiblecolumnheader": [
        "javax.accessibility.AccessibleTable.getAccessibleColumnHeader()"
    ],
    "javax.net.ssl.sslsession.getlocalcertificates": [
        "javax.net.ssl.SSLSession.getLocalCertificates()"
    ],
    "javax.sound.midi.synthesizer.unloadinstruments": [
        "javax.sound.midi.Synthesizer.unloadInstruments(javax.sound.midi.Soundbank,javax.sound.midi.Patch[])"
    ],
    "org.w3c.dom.text.splittext": [
        "org.w3c.dom.Text.splitText(int)"
    ],
    "java.time.offsetdatetime.gethour": [
        "java.time.OffsetDateTime.getHour()"
    ],
    "java.awt.image.directcolormodel.getdataelements": [
        "java.awt.image.DirectColorModel.getDataElements(int[],int,java.lang.Object)",
        "java.awt.image.DirectColorModel.getDataElements(int,java.lang.Object)"
    ],
    "javax.xml.bind.datatypeconverterinterface.printdatetime": [
        "javax.xml.bind.DatatypeConverterInterface.printDateTime(java.util.Calendar)"
    ],
    "java.net.multicastsocket.getloopbackmode": [
        "java.net.MulticastSocket.getLoopbackMode()"
    ],
    "java.text.dateformatsymbols.getavailablelocales": [
        "java.text.DateFormatSymbols.getAvailableLocales()"
    ],
    "java.net.cacheresponse.getbody": [
        "java.net.CacheResponse.getBody()"
    ],
    "javax.swing.plaf.synth.synthstyle.uninstalldefaults": [
        "javax.swing.plaf.synth.SynthStyle.uninstallDefaults(javax.swing.plaf.synth.SynthContext)"
    ],
    "java.util.zip.gzipinputstream.close": [
        "java.util.zip.GZIPInputStream.close()"
    ],
    "javax.imageio.stream.fileimageoutputstream.finalize": [
        "javax.imageio.stream.FileImageOutputStream.finalize()"
    ],
    "java.security.signaturespi.engineinitverify": [
        "java.security.SignatureSpi.engineInitVerify(java.security.PublicKey)"
    ],
    "java.lang.invoke.methodhandles.lookup.findconstructor": [
        "java.lang.invoke.MethodHandles.Lookup.findConstructor(java.lang.Class<?>,java.lang.invoke.MethodType)"
    ],
    "java.awt.image.componentsamplemodel.createdatabuffer": [
        "java.awt.image.ComponentSampleModel.createDataBuffer()"
    ],
    "java.util.concurrent.atomic.atomicintegerfieldupdater.set": [
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.set(java.util.concurrent.atomic.AtomicIntegerFieldUpdater,int)",
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.set(T,int)"
    ],
    "java.sql.preparedstatement.setasciistream": [
        "java.sql.PreparedStatement.setAsciiStream(int,java.io.InputStream,long)",
        "java.sql.PreparedStatement.setAsciiStream(int,java.io.InputStream,int)",
        "java.sql.PreparedStatement.setAsciiStream(int,java.io.InputStream)"
    ],
    "javax.swing.text.view.getview": [
        "javax.swing.text.View.getView(int)"
    ],
    "java.nio.floatbuffer.tostring": [
        "java.nio.FloatBuffer.toString()"
    ],
    "java.time.zoneddatetime.withzonesamelocal": [
        "java.time.ZonedDateTime.withZoneSameLocal(java.time.ZoneId)"
    ],
    "java.nio.file.files.readalllines": [
        "java.nio.file.Files.readAllLines(java.nio.file.Path,java.nio.charset.Charset)",
        "java.nio.file.Files.readAllLines(java.nio.file.Path)"
    ],
    "javax.transaction.xa.xid.getformatid": [
        "javax.transaction.xa.Xid.getFormatId()"
    ],
    "javax.swing.text.boxview.getheight": [
        "javax.swing.text.BoxView.getHeight()"
    ],
    "java.awt.image.volatileimage.creategraphics": [
        "java.awt.image.VolatileImage.createGraphics()"
    ],
    "java.util.logging.logrecord.setparameters": [
        "java.util.logging.LogRecord.setParameters(java.lang.Object)",
        "java.util.logging.LogRecord.setParameters(java.lang.Object[])"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getprimarycontrolinfo": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlInfo()"
    ],
    "javax.swing.text.boxview.layoutmajoraxis": [
        "javax.swing.text.BoxView.layoutMajorAxis(int,int,int[],int[])"
    ],
    "javax.imageio.imagereadparam.getdestinationbands": [
        "javax.imageio.ImageReadParam.getDestinationBands()"
    ],
    "java.nio.file.attribute.dosfileattributes.isreadonly": [
        "java.nio.file.attribute.DosFileAttributes.isReadOnly()"
    ],
    "java.util.serviceloader.load": [
        "java.util.ServiceLoader.load(java.lang.Class<S>)",
        "java.util.ServiceLoader.load(java.lang.Class<S>,java.lang.ClassLoader)"
    ],
    "javax.sound.midi.midifileformat.getproperty": [
        "javax.sound.midi.MidiFileFormat.getProperty(java.lang.String)"
    ],
    "java.security.timestamp.gettimestamp": [
        "java.security.Timestamp.getTimestamp()"
    ],
    "java.lang.reflect.constructor.getmodifiers": [
        "java.lang.reflect.Constructor.getModifiers()"
    ],
    "javax.xml.crypto.dom.domcryptocontext.put": [
        "javax.xml.crypto.dom.DOMCryptoContext.put(java.lang.Object,java.lang.Object)"
    ],
    "java.awt.list.ismultiplemode": [
        "java.awt.List.isMultipleMode()"
    ],
    "java.awt.image.colormodel.getnumcolorcomponents": [
        "java.awt.image.ColorModel.getNumColorComponents()"
    ],
    "javax.management.openmbean.tabulardatasupport.clear": [
        "javax.management.openmbean.TabularDataSupport.clear()"
    ],
    "javax.lang.model.util.elementkindvisitor6.visitvariableaslocalvariable": [
        "javax.lang.model.util.ElementKindVisitor6.visitVariableAsLocalVariable(javax.lang.model.element.VariableElement,javax.lang.model.util.ElementKindVisitor6)"
    ],
    "javax.swing.text.jtextcomponent.setcaretcolor": [
        "javax.swing.text.JTextComponent.setCaretColor(java.awt.Color)"
    ],
    "javax.swing.jtoolbar.setfloatable": [
        "javax.swing.JToolBar.setFloatable(boolean)"
    ],
    "javax.xml.ws.spi.servicedelegate.getports": [
        "javax.xml.ws.spi.ServiceDelegate.getPorts()"
    ],
    "java.security.cert.x509certselector.setkeyusage": [
        "java.security.cert.X509CertSelector.setKeyUsage(boolean[])"
    ],
    "java.nio.charbuffer.subsequence": [
        "java.nio.CharBuffer.subSequence(int,int)"
    ],
    "java.util.function.longpredicate.test": [
        "java.util.function.LongPredicate.test(long)"
    ],
    "org.omg.dynamicany._dynfixedstub.equal": [
        "org.omg.DynamicAny._DynFixedStub.equal(org.omg.DynamicAny.DynAny)"
    ],
    "java.util.zip.inflaterinputstream.fill": [
        "java.util.zip.InflaterInputStream.fill()"
    ],
    "javax.accessibility.accessiblecontext.setaccessibleparent": [
        "javax.accessibility.AccessibleContext.setAccessibleParent(javax.accessibility.Accessible)"
    ],
    "java.util.concurrent.delayqueue.put": [
        "java.util.concurrent.DelayQueue.put(java.util.concurrent.DelayQueue)",
        "java.util.concurrent.DelayQueue.put(E)"
    ],
    "java.util.concurrent.locks.reentrantlock.getholdcount": [
        "java.util.concurrent.locks.ReentrantLock.getHoldCount()"
    ],
    "javax.print.attribute.resolutionsyntax.hashcode": [
        "javax.print.attribute.ResolutionSyntax.hashCode()"
    ],
    "javax.swing.table.defaulttablecolumnmodel.removecolumn": [
        "javax.swing.table.DefaultTableColumnModel.removeColumn(javax.swing.table.TableColumn)"
    ],
    "org.omg.dynamicany.dynsequenceoperations.get_length": [
        "org.omg.DynamicAny.DynSequenceOperations.get_length()"
    ],
    "javax.swing.jcombobox.actionpropertychanged": [
        "javax.swing.JComboBox.actionPropertyChanged(javax.swing.Action,java.lang.String)"
    ],
    "javax.sql.rowset.cachedrowset.setmetadata": [
        "javax.sql.rowset.CachedRowSet.setMetaData(javax.sql.RowSetMetaData)"
    ],
    "javax.imageio.imagewriter.removeimage": [
        "javax.imageio.ImageWriter.removeImage(int)"
    ],
    "java.security.permission.getname": [
        "java.security.Permission.getName()"
    ],
    "java.util.concurrent.locks.abstractqueuedlongsynchronizer.acquire": [
        "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquire(long)"
    ],
    "java.lang.stringbuilder.delete": [
        "java.lang.StringBuilder.delete(int,int)"
    ],
    "javax.swing.focusmanager.setcurrentmanager": [
        "javax.swing.FocusManager.setCurrentManager(javax.swing.FocusManager)"
    ],
    "java.time.offsetdatetime.minusnanos": [
        "java.time.OffsetDateTime.minusNanos(long)"
    ],
    "javax.xml.bind.helpers.abstractunmarshallerimpl.geteventhandler": [
        "javax.xml.bind.helpers.AbstractUnmarshallerImpl.getEventHandler()"
    ],
    "org.omg.corba.any.insert_long": [
        "org.omg.CORBA.Any.insert_long(int)"
    ],
    "javax.sound.midi.midimessage.getmessage": [
        "javax.sound.midi.MidiMessage.getMessage()"
    ],
    "java.util.linkedhashmap.getordefault": [
        "java.util.LinkedHashMap.getOrDefault(java.lang.Object,V)",
        "java.util.LinkedHashMap.getOrDefault(java.lang.Object,java.util.LinkedHashMap)"
    ],
    "java.util.concurrent.forkjointask.getforkjointasktag": [
        "java.util.concurrent.ForkJoinTask.getForkJoinTaskTag()"
    ],
    "java.nio.channels.selectionkey.attachment": [
        "java.nio.channels.SelectionKey.attachment()"
    ],
    "java.util.concurrent.concurrenthashmap.reducevaluestodouble": [
        "java.util.concurrent.ConcurrentHashMap.reduceValuesToDouble(long,java.util.function.ToDoubleFunction<? super java.util.concurrent.ConcurrentHashMap>,double,java.util.function.DoubleBinaryOperator)",
        "java.util.concurrent.ConcurrentHashMap.reduceValuesToDouble(long,java.util.function.ToDoubleFunction<? super V>,double,java.util.function.DoubleBinaryOperator)"
    ],
    "javax.xml.bind.validationeventlocator.getlinenumber": [
        "javax.xml.bind.ValidationEventLocator.getLineNumber()"
    ],
    "javax.print.attribute.enumsyntax.getenumvaluetable": [
        "javax.print.attribute.EnumSyntax.getEnumValueTable()"
    ],
    "javax.swing.jwindow.getcontentpane": [
        "javax.swing.JWindow.getContentPane()"
    ],
    "javax.swing.border.bevelborder.gethighlightoutercolor": [
        "javax.swing.border.BevelBorder.getHighlightOuterColor(java.awt.Component)",
        "javax.swing.border.BevelBorder.getHighlightOuterColor()"
    ],
    "java.security.signaturespi.engineinitsign": [
        "java.security.SignatureSpi.engineInitSign(java.security.PrivateKey)",
        "java.security.SignatureSpi.engineInitSign(java.security.PrivateKey,java.security.SecureRandom)"
    ],
    "java.security.cert.crlreason.values": [
        "java.security.cert.CRLReason.values()"
    ],
    "java.time.temporal.weekfields.dayofweek": [
        "java.time.temporal.WeekFields.dayOfWeek()"
    ],
    "java.text.attributedstring.getiterator": [
        "java.text.AttributedString.getIterator()",
        "java.text.AttributedString.getIterator(java.text.AttributedCharacterIterator.Attribute,int,int)",
        "java.text.AttributedString.getIterator(java.text.AttributedCharacterIterator.Attribute[],int,int)",
        "java.text.AttributedString.getIterator(java.text.AttributedCharacterIterator.Attribute[])",
        "java.text.AttributedString.getIterator(java.text.AttributedCharacterIterator.Attribute)"
    ],
    "javax.sound.midi.metamessage.setmessage": [
        "javax.sound.midi.MetaMessage.setMessage(int,byte[],int)"
    ],
    "javax.swing.text.keymap.getresolveparent": [
        "javax.swing.text.Keymap.getResolveParent()"
    ],
    "javax.swing.jcomponent.getactionforkeystroke": [
        "javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"
    ],
    "javax.sound.midi.midisystem.gettransmitter": [
        "javax.sound.midi.MidiSystem.getTransmitter()"
    ],
    "java.lang.reflect.executable.getparameters": [
        "java.lang.reflect.Executable.getParameters()"
    ],
    "java.util.concurrent.atomic.atomiclongarray.lazyset": [
        "java.util.concurrent.atomic.AtomicLongArray.lazySet(int,long)"
    ],
    "javax.xml.ws.handler.logicalmessagecontext.getmessage": [
        "javax.xml.ws.handler.LogicalMessageContext.getMessage()"
    ],
    "javax.swing.text.html.minimalhtmlwriter.writecontent": [
        "javax.swing.text.html.MinimalHTMLWriter.writeContent(javax.swing.text.Element,boolean)"
    ],
    "java.net.datagramsocketimpl.connect": [
        "java.net.DatagramSocketImpl.connect(java.net.InetAddress,int)"
    ],
    "javax.swing.layoutfocustraversalpolicy.getlastcomponent": [
        "javax.swing.LayoutFocusTraversalPolicy.getLastComponent(java.awt.Container)"
    ],
    "java.beans.indexedpropertydescriptor.getindexedreadmethod": [
        "java.beans.IndexedPropertyDescriptor.getIndexedReadMethod()"
    ],
    "java.awt.scrollbar.addnotify": [
        "java.awt.Scrollbar.addNotify()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintinternalframetitlepaneborder": [
        "javax.swing.plaf.synth.SynthPainter.paintInternalFrameTitlePaneBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.lookandfeel.makecomponentinputmap": [
        "javax.swing.LookAndFeel.makeComponentInputMap(javax.swing.JComponent,java.lang.Object[])"
    ],
    "java.sql.sqlxml.setresult": [
        "java.sql.SQLXML.setResult(java.lang.Class<T>)"
    ],
    "javax.sound.midi.metamessage.clone": [
        "javax.sound.midi.MetaMessage.clone()"
    ],
    "javax.net.ssl.sslsession.getcreationtime": [
        "javax.net.ssl.SSLSession.getCreationTime()"
    ],
    "javax.swing.jcomponent.requestfocus": [
        "javax.swing.JComponent.requestFocus(boolean)",
        "javax.swing.JComponent.requestFocus()"
    ],
    "java.util.concurrent.atomic.atomicintegerfieldupdater.compareandset": [
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.compareAndSet(T,int,int)",
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.compareAndSet(java.util.concurrent.atomic.AtomicIntegerFieldUpdater,int,int)"
    ],
    "java.awt.list.getpreferredsize": [
        "java.awt.List.getPreferredSize()",
        "java.awt.List.getPreferredSize(int)"
    ],
    "java.security.cert.certstore.gettype": [
        "java.security.cert.CertStore.getType()"
    ],
    "java.lang.invoke.methodtype.changeparametertype": [
        "java.lang.invoke.MethodType.changeParameterType(int,java.lang.Class<?>)"
    ],
    "javax.transaction.xa.xid.getglobaltransactionid": [
        "javax.transaction.xa.Xid.getGlobalTransactionId()"
    ],
    "java.lang.management.runtimemxbean.getspecversion": [
        "java.lang.management.RuntimeMXBean.getSpecVersion()"
    ],
    "java.sql.timestamp.settime": [
        "java.sql.Timestamp.setTime(long)"
    ],
    "javax.accessibility.accessibletable.getaccessiblecaption": [
        "javax.accessibility.AccessibleTable.getAccessibleCaption()"
    ],
    "org.omg.dynamicany._dynvaluestub.get_short": [
        "org.omg.DynamicAny._DynValueStub.get_short()"
    ],
    "java.util.logging.logmanager.getloggingmxbean": [
        "java.util.logging.LogManager.getLoggingMXBean()"
    ],
    "javax.swing.overlaylayout.gettarget": [
        "javax.swing.OverlayLayout.getTarget()"
    ],
    "java.util.concurrent.blockingdeque.putlast": [
        "java.util.concurrent.BlockingDeque.putLast(java.util.concurrent.BlockingDeque)",
        "java.util.concurrent.BlockingDeque.putLast(E)"
    ],
    "javax.swing.plaf.synth.synthtextfieldui.getcontext": [
        "javax.swing.plaf.synth.SynthTextFieldUI.getContext(javax.swing.JComponent)"
    ],
    "java.awt.font.textmeasurer.getlinebreakindex": [
        "java.awt.font.TextMeasurer.getLineBreakIndex(int,float)"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readtimestamp": [
        "javax.sql.rowset.serial.SQLInputImpl.readTimestamp()"
    ],
    "javax.swing.plaf.synth.synthviewportui.propertychange": [
        "javax.swing.plaf.synth.SynthViewportUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "java.security.keystore.privatekeyentry.getcertificate": [
        "java.security.KeyStore.PrivateKeyEntry.getCertificate()"
    ],
    "java.net.httpcookie.setvalue": [
        "java.net.HttpCookie.setValue(java.lang.String)"
    ],
    "javax.management.remote.jmxconnector.getconnectionid": [
        "javax.management.remote.JMXConnector.getConnectionId()"
    ],
    "org.omg.dynamicany._dynunionstub.component_count": [
        "org.omg.DynamicAny._DynUnionStub.component_count()"
    ],
    "java.util.vector.setelementat": [
        "java.util.Vector.setElementAt(java.util.Vector,int)",
        "java.util.Vector.setElementAt(E,int)"
    ],
    "java.util.stream.doublestream.toarray": [
        "java.util.stream.DoubleStream.toArray()"
    ],
    "java.time.period.minusyears": [
        "java.time.Period.minusYears(long)"
    ],
    "javax.swing.text.zoneview.removeupdate": [
        "javax.swing.text.ZoneView.removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "java.beans.propertyeditor.getastext": [
        "java.beans.PropertyEditor.getAsText()"
    ],
    "java.time.yearmonth.getlong": [
        "java.time.YearMonth.getLong(java.time.temporal.TemporalField)"
    ],
    "java.util.concurrent.atomic.doubleadder.longvalue": [
        "java.util.concurrent.atomic.DoubleAdder.longValue()"
    ],
    "javax.xml.transform.source.setsystemid": [
        "javax.xml.transform.Source.setSystemId(java.lang.String)"
    ],
    "javax.sql.rowset.serial.serialarray.free": [
        "javax.sql.rowset.serial.SerialArray.free()"
    ],
    "javax.print.attribute.standard.finishings.getoffset": [
        "javax.print.attribute.standard.Finishings.getOffset()"
    ],
    "javax.swing.jcombobox.setactioncommand": [
        "javax.swing.JComboBox.setActionCommand(java.lang.String)"
    ],
    "javax.xml.xpath.xpath.getxpathfunctionresolver": [
        "javax.xml.xpath.XPath.getXPathFunctionResolver()"
    ],
    "java.time.chrono.japanesedate.from": [
        "java.time.chrono.JapaneseDate.from(java.time.temporal.TemporalAccessor)"
    ],
    "javax.swing.singleselectionmodel.addchangelistener": [
        "javax.swing.SingleSelectionModel.addChangeListener(javax.swing.event.ChangeListener)"
    ],
    "java.util.currency.getcurrencycode": [
        "java.util.Currency.getCurrencyCode()"
    ],
    "javax.swing.overlaylayout.maximumlayoutsize": [
        "javax.swing.OverlayLayout.maximumLayoutSize(java.awt.Container)"
    ],
    "javax.net.ssl.keymanagerfactoryspi.enginegetkeymanagers": [
        "javax.net.ssl.KeyManagerFactorySpi.engineGetKeyManagers()"
    ],
    "javax.swing.plaf.textui.modeltoview": [
        "javax.swing.plaf.TextUI.modelToView(javax.swing.text.JTextComponent,int)",
        "javax.swing.plaf.TextUI.modelToView(javax.swing.text.JTextComponent,int,javax.swing.text.Position.Bias)"
    ],
    "javax.swing.plaf.metal.defaultmetaltheme.getsecondary3": [
        "javax.swing.plaf.metal.DefaultMetalTheme.getSecondary3()"
    ],
    "java.awt.geom.quadcurve2d.double.getp1": [
        "java.awt.geom.QuadCurve2D.Double.getP1()"
    ],
    "java.util.regex.pattern.matches": [
        "java.util.regex.Pattern.matches(java.lang.String,java.lang.CharSequence)"
    ],
    "org.omg.portableserver._servantactivatorstub.etherealize": [
        "org.omg.PortableServer._ServantActivatorStub.etherealize(byte[],org.omg.PortableServer.POA,org.omg.PortableServer.Servant,boolean,boolean)"
    ],
    "java.awt.event.windowevent.getwindow": [
        "java.awt.event.WindowEvent.getWindow()"
    ],
    "java.util.locale.getdisplaylanguage": [
        "java.util.Locale.getDisplayLanguage(java.util.Locale)",
        "java.util.Locale.getDisplayLanguage()"
    ],
    "java.lang.system.arraycopy": [
        "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
    ],
    "javax.swing.jtable.droplocation.tostring": [
        "javax.swing.JTable.DropLocation.toString()"
    ],
    "java.applet.appletcontext.showstatus": [
        "java.applet.AppletContext.showStatus(java.lang.String)"
    ],
    "java.time.format.datetimeformatter.withresolverfields": [
        "java.time.format.DateTimeFormatter.withResolverFields(java.time.temporal.TemporalField...)",
        "java.time.format.DateTimeFormatter.withResolverFields(java.util.Set<java.time.temporal.TemporalField>)",
        "java.time.format.DateTimeFormatter.withResolverFields(java.time.temporal.TemporalField)"
    ],
    "org.w3c.dom.document.getimplementation": [
        "org.w3c.dom.Document.getImplementation()"
    ],
    "java.util.collections.shuffle": [
        "java.util.Collections.shuffle(java.util.List<?>,java.util.Random)",
        "java.util.Collections.shuffle(java.util.List<?>)"
    ],
    "javax.sound.sampled.mixer.info.hashcode": [
        "javax.sound.sampled.Mixer.Info.hashCode()"
    ],
    "java.awt.graphics.drawrect": [
        "java.awt.Graphics.drawRect(int,int,int,int)"
    ],
    "javax.xml.ws.endpoint.getproperties": [
        "javax.xml.ws.Endpoint.getProperties()"
    ],
    "javax.swing.plaf.synth.synthpainter.painttoolbarcontentbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintToolBarContentBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",
        "javax.swing.plaf.synth.SynthPainter.paintToolBarContentBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.text.numberformat.getpercentinstance": [
        "java.text.NumberFormat.getPercentInstance(java.util.Locale)",
        "java.text.NumberFormat.getPercentInstance()"
    ],
    "java.sql.databasemetadata.getfunctioncolumns": [
        "java.sql.DatabaseMetaData.getFunctionColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
    ],
    "javax.swing.jlist.getcellrenderer": [
        "javax.swing.JList.getCellRenderer()"
    ],
    "javax.swing.plaf.multi.multipanelui.paint": [
        "javax.swing.plaf.multi.MultiPanelUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "org.omg.dynamicany._dynstructstub.current_member_kind": [
        "org.omg.DynamicAny._DynStructStub.current_member_kind()"
    ],
    "javax.sql.rowset.baserowset.setbytes": [
        "javax.sql.rowset.BaseRowSet.setBytes(int,byte[])",
        "javax.sql.rowset.BaseRowSet.setBytes(java.lang.String,byte[])"
    ],
    "java.lang.reflect.method.getgenericparametertypes": [
        "java.lang.reflect.Method.getGenericParameterTypes()"
    ],
    "java.awt.frame.geticonimage": [
        "java.awt.Frame.getIconImage()"
    ],
    "java.net.datagrampacket.setaddress": [
        "java.net.DatagramPacket.setAddress(java.net.InetAddress)"
    ],
    "javax.swing.text.glyphview.issuperscript": [
        "javax.swing.text.GlyphView.isSuperscript()"
    ],
    "java.awt.image.bufferedimage.copydata": [
        "java.awt.image.BufferedImage.copyData(java.awt.image.WritableRaster)"
    ],
    "org.omg.corba.nvlist.item": [
        "org.omg.CORBA.NVList.item(int)"
    ],
    "javax.imageio.iioparam.setdestinationtype": [
        "javax.imageio.IIOParam.setDestinationType(javax.imageio.ImageTypeSpecifier)"
    ],
    "java.awt.dnd.droptarget.dragenter": [
        "java.awt.dnd.DropTarget.dragEnter(java.awt.dnd.DropTargetDragEvent)"
    ],
    "java.util.listiterator.previousindex": [
        "java.util.ListIterator.previousIndex()"
    ],
    "java.awt.event.mouseevent.getyonscreen": [
        "java.awt.event.MouseEvent.getYOnScreen()"
    ],
    "org.omg.corba.any.extract_any": [
        "org.omg.CORBA.Any.extract_any()"
    ],
    "java.time.offsettime.withnano": [
        "java.time.OffsetTime.withNano(int)"
    ],
    "javax.swing.spinnermodel.setvalue": [
        "javax.swing.SpinnerModel.setValue(java.lang.Object)"
    ],
    "java.io.objectoutput.writeobject": [
        "java.io.ObjectOutput.writeObject(java.lang.Object)"
    ],
    "java.util.concurrent.countedcompleter.getpendingcount": [
        "java.util.concurrent.CountedCompleter.getPendingCount()"
    ],
    "java.time.period.ofweeks": [
        "java.time.Period.ofWeeks(int)"
    ],
    "javax.swing.plaf.basic.basicprogressbarui.getframecount": [
        "javax.swing.plaf.basic.BasicProgressBarUI.getFrameCount()"
    ],
    "java.awt.window.getfocustraversalkeys": [
        "java.awt.Window.getFocusTraversalKeys(int)"
    ],
    "javax.swing.jscrollbar.setorientation": [
        "javax.swing.JScrollBar.setOrientation(int)"
    ],
    "javax.swing.jtree.getselectioncount": [
        "javax.swing.JTree.getSelectionCount()"
    ],
    "java.awt.image.databufferdouble.getelemdouble": [
        "java.awt.image.DataBufferDouble.getElemDouble(int,int)"
    ],
    "javax.swing.jtextarea.createdefaultmodel": [
        "javax.swing.JTextArea.createDefaultModel()"
    ],
    "java.time.localdate.parse": [
        "java.time.LocalDate.parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)",
        "java.time.LocalDate.parse(java.lang.CharSequence)"
    ],
    "javax.sound.sampled.clip.loop": [
        "javax.sound.sampled.Clip.loop(int)"
    ],
    "javax.swing.event.documentlistener.changedupdate": [
        "javax.swing.event.DocumentListener.changedUpdate(javax.swing.event.DocumentEvent)"
    ],
    "javax.swing.text.html.imageview.setsize": [
        "javax.swing.text.html.ImageView.setSize(float,float)"
    ],
    "java.util.concurrent.forkjointask.getqueuedtaskcount": [
        "java.util.concurrent.ForkJoinTask.getQueuedTaskCount()"
    ],
    "java.awt.component.removefocuslistener": [
        "java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"
    ],
    "javax.swing.plaf.layerui.uninstallui": [
        "javax.swing.plaf.LayerUI.uninstallUI(javax.swing.JComponent)"
    ],
    "java.nio.channels.asynchronousfilechannel.read": [
        "java.nio.channels.AsynchronousFileChannel.read(java.nio.ByteBuffer,long,A,,? super A>)",
        "java.nio.channels.AsynchronousFileChannel.read(java.nio.ByteBuffer,long)"
    ],
    "java.lang.integer.intvalue": [
        "java.lang.Integer.intValue()"
    ],
    "java.util.calendar.getinstance": [
        "java.util.Calendar.getInstance(java.util.TimeZone)",
        "java.util.Calendar.getInstance()",
        "java.util.Calendar.getInstance(java.util.Locale)",
        "java.util.Calendar.getInstance(java.util.TimeZone,java.util.Locale)"
    ],
    "javax.swing.plaf.basic.basictreeui.createselectionmodelpropertychangelistener": [
        "javax.swing.plaf.basic.BasicTreeUI.createSelectionModelPropertyChangeListener()"
    ],
    "java.security.cert.x509crlentry.hashcode": [
        "java.security.cert.X509CRLEntry.hashCode()"
    ],
    "java.util.concurrent.semaphore.acquire": [
        "java.util.concurrent.Semaphore.acquire(int)",
        "java.util.concurrent.Semaphore.acquire()"
    ],
    "java.util.stream.stream.maptodouble": [
        "java.util.stream.Stream.mapToDouble(java.util.function.ToDoubleFunction<? super T>)",
        "java.util.stream.Stream.mapToDouble(java.util.function.ToDoubleFunction<? super java.util.stream.Stream>)"
    ],
    "java.net.datagramsocket.getlocalsocketaddress": [
        "java.net.DatagramSocket.getLocalSocketAddress()"
    ],
    "java.awt.window.getmostrecentfocusowner": [
        "java.awt.Window.getMostRecentFocusOwner()"
    ],
    "javax.management.openmbean.tabulartype.getindexnames": [
        "javax.management.openmbean.TabularType.getIndexNames()"
    ],
    "java.time.offsetdatetime.getdayofmonth": [
        "java.time.OffsetDateTime.getDayOfMonth()"
    ],
    "javax.imageio.imagewriter.removealliiowritewarninglisteners": [
        "javax.imageio.ImageWriter.removeAllIIOWriteWarningListeners()"
    ],
    "javax.swing.jrootpane.setlayeredpane": [
        "javax.swing.JRootPane.setLayeredPane(javax.swing.JLayeredPane)"
    ],
    "java.util.concurrent.atomic.atomicintegerfieldupdater.get": [
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.get(java.util.concurrent.atomic.AtomicIntegerFieldUpdater)",
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.get(T)"
    ],
    "javax.swing.text.stylecontext.getchangelisteners": [
        "javax.swing.text.StyleContext.getChangeListeners()"
    ],
    "javax.swing.jslider.getvalueisadjusting": [
        "javax.swing.JSlider.getValueIsAdjusting()"
    ],
    "javax.xml.transform.dom.domresult.setnode": [
        "javax.xml.transform.dom.DOMResult.setNode(org.w3c.dom.Node)"
    ],
    "javax.net.ssl.sslsession.getvalue": [
        "javax.net.ssl.SSLSession.getValue(java.lang.String)"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.createfocuslistener": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.createFocusListener()"
    ],
    "javax.swing.jeditorpane.geteditorkitforcontenttype": [
        "javax.swing.JEditorPane.getEditorKitForContentType(java.lang.String)"
    ],
    "java.nio.channels.spi.abstractselector.end": [
        "java.nio.channels.spi.AbstractSelector.end()"
    ],
    "javax.swing.text.defaulthighlighter.defaulthighlightpainter.getcolor": [
        "javax.swing.text.DefaultHighlighter.DefaultHighlightPainter.getColor()"
    ],
    "javax.net.ssl.sslparameters.setalgorithmconstraints": [
        "javax.net.ssl.SSLParameters.setAlgorithmConstraints(java.security.AlgorithmConstraints)"
    ],
    "javax.xml.stream.xmlinputfactory.ispropertysupported": [
        "javax.xml.stream.XMLInputFactory.isPropertySupported(java.lang.String)"
    ],
    "java.awt.list.removeall": [
        "java.awt.List.removeAll()"
    ],
    "java.lang.strictmath.cbrt": [
        "java.lang.StrictMath.cbrt(double)"
    ],
    "javax.swing.buttonmodel.removeitemlistener": [
        "javax.swing.ButtonModel.removeItemListener(java.awt.event.ItemListener)"
    ],
    "javax.swing.jfilechooser.setfileview": [
        "javax.swing.JFileChooser.setFileView(javax.swing.filechooser.FileView)"
    ],
    "javax.swing.jtextfield.paramstring": [
        "javax.swing.JTextField.paramString()"
    ],
    "java.sql.statement.setpoolable": [
        "java.sql.Statement.setPoolable(boolean)"
    ],
    "javax.swing.jtree.setscrollsonexpand": [
        "javax.swing.JTree.setScrollsOnExpand(boolean)"
    ],
    "javax.management.modelmbean.descriptorsupport.hashcode": [
        "javax.management.modelmbean.DescriptorSupport.hashCode()"
    ],
    "java.nio.charset.charsetencoder.replacement": [
        "java.nio.charset.CharsetEncoder.replacement()"
    ],
    "javax.xml.bind.datatypeconverter.parsedatetime": [
        "javax.xml.bind.DatatypeConverter.parseDateTime(java.lang.String)"
    ],
    "java.rmi.activation.activationgroup.currentgroupid": [
        "java.rmi.activation.ActivationGroup.currentGroupID()"
    ],
    "java.text.decimalformatsymbols.getexponentseparator": [
        "java.text.DecimalFormatSymbols.getExponentSeparator()"
    ],
    "javax.print.attributeexception.getunsupportedvalues": [
        "javax.print.AttributeException.getUnsupportedValues()"
    ],
    "javax.swing.jtable.convertcolumnindextoview": [
        "javax.swing.JTable.convertColumnIndexToView(int)"
    ],
    "javax.management.loading.mlet.geturls": [
        "javax.management.loading.MLet.getURLs()"
    ],
    "javax.swing.abstractbutton.updateui": [
        "javax.swing.AbstractButton.updateUI()"
    ],
    "java.sql.resultset.first": [
        "java.sql.ResultSet.first()"
    ],
    "javax.imageio.iioimage.setmetadata": [
        "javax.imageio.IIOImage.setMetadata(javax.imageio.metadata.IIOMetadata)"
    ],
    "java.security.algorithmparametergenerator.getprovider": [
        "java.security.AlgorithmParameterGenerator.getProvider()"
    ],
    "java.awt.image.multipixelpackedsamplemodel.getbitoffset": [
        "java.awt.image.MultiPixelPackedSampleModel.getBitOffset(int)"
    ],
    "java.awt.window.addwindowlistener": [
        "java.awt.Window.addWindowListener(java.awt.event.WindowListener)"
    ],
    "org.ietf.jgss.gsscontext.gettargname": [
        "org.ietf.jgss.GSSContext.getTargName()"
    ],
    "javax.swing.plaf.synth.synthbuttonui.getcontext": [
        "javax.swing.plaf.synth.SynthButtonUI.getContext(javax.swing.JComponent)"
    ],
    "javax.sql.rowset.baserowset.setsqlxml": [
        "javax.sql.rowset.BaseRowSet.setSQLXML(java.lang.String,java.sql.SQLXML)",
        "javax.sql.rowset.BaseRowSet.setSQLXML(int,java.sql.SQLXML)"
    ],
    "javax.xml.transform.stream.streamresult.setwriter": [
        "javax.xml.transform.stream.StreamResult.setWriter(java.io.Writer)"
    ],
    "javax.print.attribute.enumsyntax.getstringtable": [
        "javax.print.attribute.EnumSyntax.getStringTable()"
    ],
    "java.awt.container.getcomponentat": [
        "java.awt.Container.getComponentAt(int,int)",
        "java.awt.Container.getComponentAt(java.awt.Point)"
    ],
    "java.lang.reflect.array.getshort": [
        "java.lang.reflect.Array.getShort(java.lang.Object,int)"
    ],
    "javax.print.streamprintservice.getoutputstream": [
        "javax.print.StreamPrintService.getOutputStream()"
    ],
    "javax.security.auth.callback.confirmationcallback.getmessagetype": [
        "javax.security.auth.callback.ConfirmationCallback.getMessageType()"
    ],
    "javax.management.timer.timer.getallnotificationids": [
        "javax.management.timer.Timer.getAllNotificationIDs()"
    ],
    "java.awt.image.bufferedimage.getminx": [
        "java.awt.image.BufferedImage.getMinX()"
    ],
    "java.security.keystore.getcertificate": [
        "java.security.KeyStore.getCertificate(java.lang.String)"
    ],
    "java.awt.font.istransformed": [
        "java.awt.Font.isTransformed()"
    ],
    "javax.swing.plaf.synth.synthtabbedpaneui.getcontext": [
        "javax.swing.plaf.synth.SynthTabbedPaneUI.getContext(javax.swing.JComponent)"
    ],
    "java.beans.beancontext.beancontextservices.getcurrentserviceclasses": [
        "java.beans.beancontext.BeanContextServices.getCurrentServiceClasses()"
    ],
    "javax.xml.ws.endpoint.getexecutor": [
        "javax.xml.ws.Endpoint.getExecutor()"
    ],
    "javax.print.attribute.standard.pagesperminute.getcategory": [
        "javax.print.attribute.standard.PagesPerMinute.getCategory()"
    ],
    "javax.swing.jpopupmenu.separator.getuiclassid": [
        "javax.swing.JPopupMenu.Separator.getUIClassID()"
    ],
    "javax.naming.name.getall": [
        "javax.naming.Name.getAll()"
    ],
    "java.util.optionalint.ifpresent": [
        "java.util.OptionalInt.ifPresent(java.util.function.IntConsumer)"
    ],
    "javax.swing.plaf.basic.basicspinnerui.installpreviousbuttonlisteners": [
        "javax.swing.plaf.basic.BasicSpinnerUI.installPreviousButtonListeners(java.awt.Component)"
    ],
    "java.net.datagramsocketimpl.send": [
        "java.net.DatagramSocketImpl.send(java.net.DatagramPacket)"
    ],
    "javax.management.openmbean.tabulardatasupport.remove": [
        "javax.management.openmbean.TabularDataSupport.remove(java.lang.Object[])"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.hashcode": [
        "javax.xml.datatype.XMLGregorianCalendar.hashCode()"
    ],
    "javax.print.attribute.standard.copies.getname": [
        "javax.print.attribute.standard.Copies.getName()"
    ],
    "javax.swing.text.jtextcomponent.getscrollableblockincrement": [
        "javax.swing.text.JTextComponent.getScrollableBlockIncrement(java.awt.Rectangle,int,int)"
    ],
    "javax.swing.text.html.htmldocument.createdefaultroot": [
        "javax.swing.text.html.HTMLDocument.createDefaultRoot()"
    ],
    "java.util.function.doubletointfunction.applyasint": [
        "java.util.function.DoubleToIntFunction.applyAsInt(double)"
    ],
    "java.awt.event.mouseevent.getmousemodifierstext": [
        "java.awt.event.MouseEvent.getMouseModifiersText(int)"
    ],
    "java.sql.resultset.getnstring": [
        "java.sql.ResultSet.getNString(int)",
        "java.sql.ResultSet.getNString(java.lang.String)"
    ],
    "java.beans.xmlencoder.writeobject": [
        "java.beans.XMLEncoder.writeObject(java.lang.Object)"
    ],
    "java.awt.keyboardfocusmanager.removekeyeventpostprocessor": [
        "java.awt.KeyboardFocusManager.removeKeyEventPostProcessor(java.awt.KeyEventPostProcessor)"
    ],
    "org.omg.dynamicany._dynenumstub.to_any": [
        "org.omg.DynamicAny._DynEnumStub.to_any()"
    ],
    "java.nio.file.invalidpathexception.getindex": [
        "java.nio.file.InvalidPathException.getIndex()"
    ],
    "java.nio.file.attribute.fileownerattributeview.name": [
        "java.nio.file.attribute.FileOwnerAttributeView.name()"
    ],
    "javax.swing.comboboxeditor.geteditorcomponent": [
        "javax.swing.ComboBoxEditor.getEditorComponent()"
    ],
    "javax.naming.spi.directorymanager.getobjectinstance": [
        "javax.naming.spi.DirectoryManager.getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,,?>,javax.naming.directory.Attributes)"
    ],
    "javax.crypto.cipherspi.enginegetparameters": [
        "javax.crypto.CipherSpi.engineGetParameters()"
    ],
    "java.nio.file.invalidpathexception.getinput": [
        "java.nio.file.InvalidPathException.getInput()"
    ],
    "javax.swing.text.boxview.calculateminoraxisrequirements": [
        "javax.swing.text.BoxView.calculateMinorAxisRequirements(int,javax.swing.SizeRequirements)"
    ],
    "java.security.cert.pkixparameters.setexplicitpolicyrequired": [
        "java.security.cert.PKIXParameters.setExplicitPolicyRequired(boolean)"
    ],
    "java.net.urlconnection.getdate": [
        "java.net.URLConnection.getDate()"
    ],
    "javax.accessibility.accessibletable.setaccessiblerowheader": [
        "javax.accessibility.AccessibleTable.setAccessibleRowHeader(javax.accessibility.AccessibleTable)"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.setdtdhandler": [
        "org.xml.sax.helpers.XMLFilterImpl.setDTDHandler(org.xml.sax.DTDHandler)"
    ],
    "java.time.chrono.chronolocaldate.adjustinto": [
        "java.time.chrono.ChronoLocalDate.adjustInto(java.time.temporal.Temporal)"
    ],
    "java.awt.graphics.create": [
        "java.awt.Graphics.create()",
        "java.awt.Graphics.create(int,int,int,int)"
    ],
    "javax.naming.ldap.extendedrequest.createextendedresponse": [
        "javax.naming.ldap.ExtendedRequest.createExtendedResponse(java.lang.String,byte[],int,int)"
    ],
    "java.awt.datatransfer.dataflavor.getsubtype": [
        "java.awt.datatransfer.DataFlavor.getSubType()"
    ],
    "javax.swing.plaf.multi.multitabbedpaneui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiTabbedPaneUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "javax.management.attributechangenotificationfilter.disableallattributes": [
        "javax.management.AttributeChangeNotificationFilter.disableAllAttributes()"
    ],
    "java.awt.toolkit.isalwaysontopsupported": [
        "java.awt.Toolkit.isAlwaysOnTopSupported()"
    ],
    "javax.swing.jcomponent.getrootpane": [
        "javax.swing.JComponent.getRootPane()"
    ],
    "javax.sql.rowset.baserowset.setarray": [
        "javax.sql.rowset.BaseRowSet.setArray(int,java.sql.Array)"
    ],
    "java.awt.font.texthitinfo.hashcode": [
        "java.awt.font.TextHitInfo.hashCode()"
    ],
    "org.xml.sax.ext.attributes2impl.setattributes": [
        "org.xml.sax.ext.Attributes2Impl.setAttributes(org.xml.sax.Attributes)"
    ],
    "java.beans.vetoablechangesupport.removevetoablechangelistener": [
        "java.beans.VetoableChangeSupport.removeVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)",
        "java.beans.VetoableChangeSupport.removeVetoableChangeListener(java.beans.VetoableChangeListener)"
    ],
    "javax.swing.plaf.multi.multisplitpaneui.uninstallui": [
        "javax.swing.plaf.multi.MultiSplitPaneUI.uninstallUI(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.synth.synthscrollbarui.getcontext": [
        "javax.swing.plaf.synth.SynthScrollBarUI.getContext(javax.swing.JComponent)"
    ],
    "javax.print.attribute.hashattributeset.addall": [
        "javax.print.attribute.HashAttributeSet.addAll(javax.print.attribute.AttributeSet)"
    ],
    "javax.naming.binding.tostring": [
        "javax.naming.Binding.toString()"
    ],
    "javax.swing.springlayout.constraints.gety": [
        "javax.swing.SpringLayout.Constraints.getY()"
    ],
    "java.text.decimalformatsymbols.setcurrency": [
        "java.text.DecimalFormatSymbols.setCurrency(java.util.Currency)"
    ],
    "java.beans.beancontext.beancontextsupport.childjustaddedhook": [
        "java.beans.beancontext.BeanContextSupport.childJustAddedHook(java.lang.Object,java.beans.beancontext.BeanContextSupport.BCSChild)"
    ],
    "org.omg.corba.orb.create_recursive_tc": [
        "org.omg.CORBA.ORB.create_recursive_tc(java.lang.String)"
    ],
    "javax.crypto.interfaces.pbekey.getsalt": [
        "javax.crypto.interfaces.PBEKey.getSalt()"
    ],
    "javax.swing.uimanager.getint": [
        "javax.swing.UIManager.getInt(java.lang.Object,java.util.Locale)",
        "javax.swing.UIManager.getInt(java.lang.Object)"
    ],
    "javax.xml.stream.xmleventfactory.createignorablespace": [
        "javax.xml.stream.XMLEventFactory.createIgnorableSpace(java.lang.String)"
    ],
    "org.xml.sax.helpers.attributesimpl.setqname": [
        "org.xml.sax.helpers.AttributesImpl.setQName(int,java.lang.String)"
    ],
    "javax.sql.rowset.setbyte": [
        "javax.sql.RowSet.setByte(int,byte)",
        "javax.sql.RowSet.setByte(java.lang.String,byte)"
    ],
    "java.util.vector.spliterator": [
        "java.util.Vector.spliterator()"
    ],
    "java.awt.image.componentcolormodel.getalpha": [
        "java.awt.image.ComponentColorModel.getAlpha(int)",
        "java.awt.image.ComponentColorModel.getAlpha(java.lang.Object)"
    ],
    "javax.swing.overlaylayout.getlayoutalignmenty": [
        "javax.swing.OverlayLayout.getLayoutAlignmentY(java.awt.Container)"
    ],
    "javax.swing.text.defaultstyleddocument.removestyle": [
        "javax.swing.text.DefaultStyledDocument.removeStyle(java.lang.String)"
    ],
    "javax.xml.stream.events.dtd.getentities": [
        "javax.xml.stream.events.DTD.getEntities()"
    ],
    "java.rmi.server.remoteref.remotetostring": [
        "java.rmi.server.RemoteRef.remoteToString()"
    ],
    "java.awt.dnd.dragsourcecontext.dragenter": [
        "java.awt.dnd.DragSourceContext.dragEnter(java.awt.dnd.DragSourceDragEvent)"
    ],
    "java.net.datagrampacket.getaddress": [
        "java.net.DatagramPacket.getAddress()"
    ],
    "javax.swing.event.hyperlinkevent.getinputevent": [
        "javax.swing.event.HyperlinkEvent.getInputEvent()"
    ],
    "java.awt.choice.removeitemlistener": [
        "java.awt.Choice.removeItemListener(java.awt.event.ItemListener)"
    ],
    "java.rmi.dgc.vmid.tostring": [
        "java.rmi.dgc.VMID.toString()"
    ],
    "java.awt.component.processmousemotionevent": [
        "java.awt.Component.processMouseMotionEvent(java.awt.event.MouseEvent)"
    ],
    "org.omg.dynamicany.dynanyoperations.get_dyn_any": [
        "org.omg.DynamicAny.DynAnyOperations.get_dyn_any()"
    ],
    "java.util.navigableset.tailset": [
        "java.util.NavigableSet.tailSet(E)",
        "java.util.NavigableSet.tailSet(java.util.NavigableSet)"
    ],
    "javax.xml.crypto.keyselectorexception.printstacktrace": [
        "javax.xml.crypto.KeySelectorException.printStackTrace()"
    ],
    "javax.swing.tree.defaulttreecellrenderer.getdefaultleaficon": [
        "javax.swing.tree.DefaultTreeCellRenderer.getDefaultLeafIcon()"
    ],
    "org.omg.dynamicany.dynstructoperations.current_member_name": [
        "org.omg.DynamicAny.DynStructOperations.current_member_name()"
    ],
    "java.net.socketoptions.setoption": [
        "java.net.SocketOptions.setOption(int,java.lang.Object)"
    ],
    "java.beans.beancontext.beancontextservicessupport.addbeancontextserviceslistener": [
        "java.beans.beancontext.BeanContextServicesSupport.addBeanContextServicesListener(java.beans.beancontext.BeanContextServicesListener)"
    ],
    "java.awt.flowlayout.minimumlayoutsize": [
        "java.awt.FlowLayout.minimumLayoutSize(java.awt.Container)"
    ],
    "java.lang.character.gettype": [
        "java.lang.Character.getType(int)",
        "java.lang.Character.getType(char)"
    ],
    "java.util.regex.patternsyntaxexception.getmessage": [
        "java.util.regex.PatternSyntaxException.getMessage()"
    ],
    "javax.swing.jlayeredpane.getcomponentcountinlayer": [
        "javax.swing.JLayeredPane.getComponentCountInLayer(int)"
    ],
    "javax.swing.jmenuitem.init": [
        "javax.swing.JMenuItem.init(java.lang.String,javax.swing.Icon)"
    ],
    "java.awt.geom.arc2d.float.makebounds": [
        "java.awt.geom.Arc2D.Float.makeBounds(double,double,double,double)"
    ],
    "java.awt.im.inputcontext.getlocale": [
        "java.awt.im.InputContext.getLocale()"
    ],
    "java.util.arrays.parallelsetall": [
        "java.util.Arrays.parallelSetAll(T[],java.util.function.IntFunction<? extends T>)",
        "java.util.Arrays.parallelSetAll(int[],java.util.function.IntUnaryOperator)",
        "java.util.Arrays.parallelSetAll(double[],java.util.function.IntToDoubleFunction)",
        "java.util.Arrays.parallelSetAll(long[],java.util.function.IntToLongFunction)"
    ],
    "java.math.bigdecimal.equals": [
        "java.math.BigDecimal.equals(java.lang.Object)"
    ],
    "javax.swing.jlist.getaccessiblecontext": [
        "javax.swing.JList.getAccessibleContext()"
    ],
    "java.lang.management.bufferpoolmxbean.getmemoryused": [
        "java.lang.management.BufferPoolMXBean.getMemoryUsed()"
    ],
    "javax.activation.activationdataflavor.gethumanpresentablename": [
        "javax.activation.ActivationDataFlavor.getHumanPresentableName()"
    ],
    "java.awt.toolkit.createtextfield": [
        "java.awt.Toolkit.createTextField(java.awt.TextField)"
    ],
    "javax.swing.jtextfield.configurepropertiesfromaction": [
        "javax.swing.JTextField.configurePropertiesFromAction(javax.swing.Action)"
    ],
    "javax.tools.fileobject.openinputstream": [
        "javax.tools.FileObject.openInputStream()"
    ],
    "javax.swing.jtextpane.inserticon": [
        "javax.swing.JTextPane.insertIcon(javax.swing.Icon)"
    ],
    "javax.print.attribute.standard.printeruri.getcategory": [
        "javax.print.attribute.standard.PrinterURI.getCategory()"
    ],
    "java.time.offsettime.atdate": [
        "java.time.OffsetTime.atDate(java.time.LocalDate)"
    ],
    "javax.swing.text.stylededitorkit.foregroundaction.actionperformed": [
        "javax.swing.text.StyledEditorKit.ForegroundAction.actionPerformed(java.awt.event.ActionEvent)"
    ],
    "javax.swing.text.styleconstants.gettabset": [
        "javax.swing.text.StyleConstants.getTabSet(javax.swing.text.AttributeSet)"
    ],
    "javax.swing.plaf.multi.multiprogressbarui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiProgressBarUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "java.util.concurrent.atomic.atomiclong.tostring": [
        "java.util.concurrent.atomic.AtomicLong.toString()"
    ],
    "java.util.concurrent.linkedblockingdeque.spliterator": [
        "java.util.concurrent.LinkedBlockingDeque.spliterator()"
    ],
    "javax.swing.text.jtextcomponent.setui": [
        "javax.swing.text.JTextComponent.setUI(javax.swing.plaf.TextUI)"
    ],
    "java.awt.scrollbar.addadjustmentlistener": [
        "java.awt.Scrollbar.addAdjustmentListener(java.awt.event.AdjustmentListener)"
    ],
    "org.ietf.jgss.gssname.tostring": [
        "org.ietf.jgss.GSSName.toString()"
    ],
    "javax.xml.stream.xmlinputfactory.getproperty": [
        "javax.xml.stream.XMLInputFactory.getProperty(java.lang.String)"
    ],
    "java.io.file.createtempfile": [
        "java.io.File.createTempFile(java.lang.String,java.lang.String,java.io.File)",
        "java.io.File.createTempFile(java.lang.String,java.lang.String)"
    ],
    "java.util.concurrent.blockingqueue.add": [
        "java.util.concurrent.BlockingQueue.add(E)",
        "java.util.concurrent.BlockingQueue.add(java.util.concurrent.BlockingQueue)"
    ],
    "java.lang.management.memorypoolmxbean.iscollectionusagethresholdexceeded": [
        "java.lang.management.MemoryPoolMXBean.isCollectionUsageThresholdExceeded()"
    ],
    "javax.imageio.imagereader.reset": [
        "javax.imageio.ImageReader.reset()"
    ],
    "javax.swing.defaultdesktopmanager.removeiconfor": [
        "javax.swing.DefaultDesktopManager.removeIconFor(javax.swing.JInternalFrame)"
    ],
    "java.awt.image.bandcombineop.filter": [
        "java.awt.image.BandCombineOp.filter(java.awt.image.Raster,java.awt.image.WritableRaster)"
    ],
    "java.util.propertypermission.newpermissioncollection": [
        "java.util.PropertyPermission.newPermissionCollection()"
    ],
    "java.awt.graphicsconfiguration.istranslucencycapable": [
        "java.awt.GraphicsConfiguration.isTranslucencyCapable()"
    ],
    "java.sql.rowid.hashcode": [
        "java.sql.RowId.hashCode()"
    ],
    "javax.lang.model.util.typekindvisitor7.visitunion": [
        "javax.lang.model.util.TypeKindVisitor7.visitUnion(javax.lang.model.type.UnionType,javax.lang.model.util.TypeKindVisitor7)"
    ],
    "javax.print.attribute.textsyntax.hashcode": [
        "javax.print.attribute.TextSyntax.hashCode()"
    ],
    "java.util.locale.stripextensions": [
        "java.util.Locale.stripExtensions()"
    ],
    "org.omg.corba.object._hash": [
        "org.omg.CORBA.Object._hash(int)"
    ],
    "javax.swing.border.border.paintborder": [
        "javax.swing.border.Border.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)"
    ],
    "java.awt.list.processactionevent": [
        "java.awt.List.processActionEvent(java.awt.event.ActionEvent)"
    ],
    "javax.swing.tree.treenode.children": [
        "javax.swing.tree.TreeNode.children()"
    ],
    "javax.lang.model.element.annotationvaluevisitor.visitarray": [
        "javax.lang.model.element.AnnotationValueVisitor.visitArray(java.util.List<? extends javax.lang.model.element.AnnotationValue>,javax.lang.model.element.AnnotationValueVisitor)"
    ],
    "javax.xml.stream.xmloutputfactory.newinstance": [
        "javax.xml.stream.XMLOutputFactory.newInstance()"
    ],
    "javax.swing.jtree.getrowforlocation": [
        "javax.swing.JTree.getRowForLocation(int,int)"
    ],
    "java.net.securecacheresponse.getservercertificatechain": [
        "java.net.SecureCacheResponse.getServerCertificateChain()"
    ],
    "java.io.linenumberreader.readline": [
        "java.io.LineNumberReader.readLine()"
    ],
    "java.awt.component.createvolatileimage": [
        "java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities)",
        "java.awt.Component.createVolatileImage(int,int)"
    ],
    "javax.tools.javafilemanager.handleoption": [
        "javax.tools.JavaFileManager.handleOption(java.lang.String,java.util.Iterator<java.lang.String>)"
    ],
    "javax.swing.swingworker.statevalue.valueof": [
        "javax.swing.SwingWorker.StateValue.valueOf(java.lang.String)"
    ],
    "org.omg.corba.portable.inputstream.read_float_array": [
        "org.omg.CORBA.portable.InputStream.read_float_array(float[],int,int)"
    ],
    "javax.xml.bind.helpers.abstractunmarshallerimpl.getxmlreader": [
        "javax.xml.bind.helpers.AbstractUnmarshallerImpl.getXMLReader()"
    ],
    "java.time.chrono.era.range": [
        "java.time.chrono.Era.range(java.time.temporal.TemporalField)"
    ],
    "java.util.logging.handler.geterrormanager": [
        "java.util.logging.Handler.getErrorManager()"
    ],
    "java.security.signature.getparameters": [
        "java.security.Signature.getParameters()"
    ],
    "java.beans.beancontext.beancontextserviceproviderbeaninfo.getservicesbeaninfo": [
        "java.beans.beancontext.BeanContextServiceProviderBeanInfo.getServicesBeanInfo()"
    ],
    "javax.print.attribute.standard.finishings.getcategory": [
        "javax.print.attribute.standard.Finishings.getCategory()"
    ],
    "javax.xml.crypto.dsig.transformservice.getinstance": [
        "javax.xml.crypto.dsig.TransformService.getInstance(java.lang.String,java.lang.String,java.lang.String)",
        "javax.xml.crypto.dsig.TransformService.getInstance(java.lang.String,java.lang.String,java.security.Provider)",
        "javax.xml.crypto.dsig.TransformService.getInstance(java.lang.String,java.lang.String)"
    ],
    "java.security.acl.permission.tostring": [
        "java.security.acl.Permission.toString()"
    ],
    "java.net.httpcookie.getdiscard": [
        "java.net.HttpCookie.getDiscard()"
    ],
    "java.awt.geom.affinetransform.settoidentity": [
        "java.awt.geom.AffineTransform.setToIdentity()"
    ],
    "java.util.abstractmap.values": [
        "java.util.AbstractMap.values()"
    ],
    "javax.swing.uimanager.put": [
        "javax.swing.UIManager.put(java.lang.Object,java.lang.Object)"
    ],
    "javax.sql.rowset.serial.serialblob.length": [
        "javax.sql.rowset.serial.SerialBlob.length()"
    ],
    "java.nio.file.attribute.aclfileattributeview.name": [
        "java.nio.file.attribute.AclFileAttributeView.name()"
    ],
    "javax.management.immutabledescriptor.equals": [
        "javax.management.ImmutableDescriptor.equals(java.lang.Object)"
    ],
    "java.util.dictionary.put": [
        "java.util.Dictionary.put(K,V)",
        "java.util.Dictionary.put(java.util.Dictionary,java.util.Dictionary)"
    ],
    "java.awt.geom.arc2d.double.setangleextent": [
        "java.awt.geom.Arc2D.Double.setAngleExtent(double)"
    ],
    "java.beans.beancontext.beancontextsupport.firechildrenremoved": [
        "java.beans.beancontext.BeanContextSupport.fireChildrenRemoved(java.beans.beancontext.BeanContextMembershipEvent)"
    ],
    "java.util.arraylist.replaceall": [
        "java.util.ArrayList.replaceAll(java.util.function.UnaryOperator<E>)"
    ],
    "java.awt.image.volatileimage.validate": [
        "java.awt.image.VolatileImage.validate(java.awt.GraphicsConfiguration)"
    ],
    "javax.rmi.corba.utildelegate.readany": [
        "javax.rmi.CORBA.UtilDelegate.readAny(org.omg.CORBA.portable.InputStream)"
    ],
    "javax.swing.jslider.getlabeltable": [
        "javax.swing.JSlider.getLabelTable()"
    ],
    "javax.sound.midi.midichannel.setchannelpressure": [
        "javax.sound.midi.MidiChannel.setChannelPressure(int)"
    ],
    "java.util.concurrent.concurrenthashmap.reducekeys": [
        "java.util.concurrent.ConcurrentHashMap.reduceKeys(long,java.util.function.BiFunction<? super,? super,? extends K>)",
        "java.util.concurrent.ConcurrentHashMap.reduceKeys(long,java.util.function.Function<? super,? extends U>,java.util.function.BiFunction<? super,? super,? extends U>)",
        "java.util.concurrent.ConcurrentHashMap.reduceKeys(long,java.util.function.BiFunction<? super,? super,? extends java.util.concurrent.ConcurrentHashMap>)"
    ],
    "java.awt.component.isminimumsizeset": [
        "java.awt.Component.isMinimumSizeSet()"
    ],
    "java.lang.invoke.methodhandle.ascollector": [
        "java.lang.invoke.MethodHandle.asCollector(java.lang.Class<?>,int)"
    ],
    "javax.swing.defaultlistmodel.insertelementat": [
        "javax.swing.DefaultListModel.insertElementAt(javax.swing.DefaultListModel,int)"
    ],
    "javax.sql.rowset.rowsetwarning.getnextwarning": [
        "javax.sql.rowset.RowSetWarning.getNextWarning()"
    ],
    "javax.swing.plaf.synth.synthpopupmenuui.update": [
        "javax.swing.plaf.synth.SynthPopupMenuUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.xml.parsers.documentbuilderfactory.isignoringelementcontentwhitespace": [
        "javax.xml.parsers.DocumentBuilderFactory.isIgnoringElementContentWhitespace()"
    ],
    "javax.xml.ws.handler.messagecontext.scope.valueof": [
        "javax.xml.ws.handler.MessageContext.Scope.valueOf(java.lang.String)"
    ],
    "java.security.cert.certpath.certpathrep.readresolve": [
        "java.security.cert.CertPath.CertPathRep.readResolve()"
    ],
    "java.io.objectinputstream.read": [
        "java.io.ObjectInputStream.read()",
        "java.io.ObjectInputStream.read(byte[],int,int)"
    ],
    "javax.crypto.exemptionmechanismspi.enginegenexemptionblob": [
        "javax.crypto.ExemptionMechanismSpi.engineGenExemptionBlob()",
        "javax.crypto.ExemptionMechanismSpi.engineGenExemptionBlob(byte[],int)"
    ],
    "javax.swing.abstractbutton.setactioncommand": [
        "javax.swing.AbstractButton.setActionCommand(java.lang.String)"
    ],
    "org.omg.dynamicany._dynvaluestub.insert_ushort": [
        "org.omg.DynamicAny._DynValueStub.insert_ushort(short)"
    ],
    "java.awt.menuitem.setenabled": [
        "java.awt.MenuItem.setEnabled(boolean)"
    ],
    "java.awt.event.focusevent.istemporary": [
        "java.awt.event.FocusEvent.isTemporary()"
    ],
    "javax.xml.transform.stax.staxsource.getxmlstreamreader": [
        "javax.xml.transform.stax.StAXSource.getXMLStreamReader()"
    ],
    "java.net.datagrampacket.getdata": [
        "java.net.DatagramPacket.getData()"
    ],
    "javax.lang.model.type.intersectiontype.getbounds": [
        "javax.lang.model.type.IntersectionType.getBounds()"
    ],
    "java.util.concurrent.atomic.atomicstampedreference.attemptstamp": [
        "java.util.concurrent.atomic.AtomicStampedReference.attemptStamp(V,int)",
        "java.util.concurrent.atomic.AtomicStampedReference.attemptStamp(java.util.concurrent.atomic.AtomicStampedReference,int)"
    ],
    "javax.management.runtimeoperationsexception.getcause": [
        "javax.management.RuntimeOperationsException.getCause()"
    ],
    "java.io.reader.mark": [
        "java.io.Reader.mark(int)"
    ],
    "java.lang.thread.getthreadgroup": [
        "java.lang.Thread.getThreadGroup()"
    ],
    "javax.swing.table.defaulttablecolumnmodel.getcolumnmargin": [
        "javax.swing.table.DefaultTableColumnModel.getColumnMargin()"
    ],
    "java.util.navigablemap.higherkey": [
        "java.util.NavigableMap.higherKey(K)",
        "java.util.NavigableMap.higherKey(java.util.NavigableMap)"
    ],
    "java.lang.runtime.totalmemory": [
        "java.lang.Runtime.totalMemory()"
    ],
    "javax.management.remote.rmi.rmiconnection.addnotificationlistener": [
        "javax.management.remote.rmi.RMIConnection.addNotificationListener(javax.management.ObjectName,javax.management.ObjectName,java.rmi.MarshalledObject,java.rmi.MarshalledObject,javax.security.auth.Subject)"
    ],
    "java.text.characteriterator.getindex": [
        "java.text.CharacterIterator.getIndex()"
    ],
    "javax.imageio.imagewriteparam.settiling": [
        "javax.imageio.ImageWriteParam.setTiling(int,int,int,int)"
    ],
    "java.awt.textfield.addactionlistener": [
        "java.awt.TextField.addActionListener(java.awt.event.ActionListener)"
    ],
    "java.nio.file.files.setowner": [
        "java.nio.file.Files.setOwner(java.nio.file.Path,java.nio.file.attribute.UserPrincipal)"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.setsecond": [
        "javax.xml.datatype.XMLGregorianCalendar.setSecond(int)"
    ],
    "java.lang.management.runtimemxbean.getlibrarypath": [
        "java.lang.management.RuntimeMXBean.getLibraryPath()"
    ],
    "java.net.httpurlconnection.getresponsemessage": [
        "java.net.HttpURLConnection.getResponseMessage()"
    ],
    "javax.management.remote.jmxconnectorserverprovider.newjmxconnectorserver": [
        "javax.management.remote.JMXConnectorServerProvider.newJMXConnectorServer(javax.management.remote.JMXServiceURL,,?>,javax.management.MBeanServer)"
    ],
    "java.awt.geom.affinetransform.clone": [
        "java.awt.geom.AffineTransform.clone()"
    ],
    "javax.swing.jwindow.setlayout": [
        "javax.swing.JWindow.setLayout(java.awt.LayoutManager)"
    ],
    "javax.swing.jtree.getinvokesstopcellediting": [
        "javax.swing.JTree.getInvokesStopCellEditing()"
    ],
    "org.ietf.jgss.gssmanager.addprovideratend": [
        "org.ietf.jgss.GSSManager.addProviderAtEnd(java.security.Provider,org.ietf.jgss.Oid)"
    ],
    "java.security.cert.pkixparameters.setanypolicyinhibited": [
        "java.security.cert.PKIXParameters.setAnyPolicyInhibited(boolean)"
    ],
    "java.util.scanner.reset": [
        "java.util.Scanner.reset()"
    ],
    "javax.naming.ldap.unsolicitednotificationevent.dispatch": [
        "javax.naming.ldap.UnsolicitedNotificationEvent.dispatch(javax.naming.ldap.UnsolicitedNotificationListener)"
    ],
    "java.awt.rectangle.setbounds": [
        "java.awt.Rectangle.setBounds(int,int,int,int)",
        "java.awt.Rectangle.setBounds(java.awt.Rectangle)"
    ],
    "javax.swing.text.paragraphview.setjustification": [
        "javax.swing.text.ParagraphView.setJustification(int)"
    ],
    "java.awt.color.icc_profile.getminorversion": [
        "java.awt.color.ICC_Profile.getMinorVersion()"
    ],
    "javax.swing.plaf.multi.multiseparatorui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiSeparatorUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "javax.script.scriptenginemanager.registerenginename": [
        "javax.script.ScriptEngineManager.registerEngineName(java.lang.String,javax.script.ScriptEngineFactory)"
    ],
    "java.sql.callablestatement.gettime": [
        "java.sql.CallableStatement.getTime(int,java.util.Calendar)",
        "java.sql.CallableStatement.getTime(java.lang.String,java.util.Calendar)",
        "java.sql.CallableStatement.getTime(java.lang.String)",
        "java.sql.CallableStatement.getTime(int)"
    ],
    "javax.swing.plaf.synth.synthmenuui.createui": [
        "javax.swing.plaf.synth.SynthMenuUI.createUI(javax.swing.JComponent)"
    ],
    "java.util.vector.removeallelements": [
        "java.util.Vector.removeAllElements()"
    ],
    "java.util.concurrent.forkjointask.join": [
        "java.util.concurrent.ForkJoinTask.join()"
    ],
    "org.omg.corba.serverrequest.set_exception": [
        "org.omg.CORBA.ServerRequest.set_exception(org.omg.CORBA.Any)"
    ],
    "javax.sound.sampled.mixer.info.getversion": [
        "javax.sound.sampled.Mixer.Info.getVersion()"
    ],
    "java.util.listresourcebundle.getcontents": [
        "java.util.ListResourceBundle.getContents()"
    ],
    "java.beans.featuredescriptor.sethidden": [
        "java.beans.FeatureDescriptor.setHidden(boolean)"
    ],
    "java.net.uri.getrawauthority": [
        "java.net.URI.getRawAuthority()"
    ],
    "javax.swing.jinternalframe.tofront": [
        "javax.swing.JInternalFrame.toFront()"
    ],
    "javax.swing.jcomponent.paramstring": [
        "javax.swing.JComponent.paramString()"
    ],
    "javax.swing.abstractspinnermodel.removechangelistener": [
        "javax.swing.AbstractSpinnerModel.removeChangeListener(javax.swing.event.ChangeListener)"
    ],
    "java.awt.image.databuffer.getelem": [
        "java.awt.image.DataBuffer.getElem(int,int)"
    ],
    "javax.management.openmbean.openmbeanattributeinfosupport.getopentype": [
        "javax.management.openmbean.OpenMBeanAttributeInfoSupport.getOpenType()"
    ],
    "java.awt.flowlayout.preferredlayoutsize": [
        "java.awt.FlowLayout.preferredLayoutSize(java.awt.Container)"
    ],
    "java.lang.management.runtimemxbean.getstarttime": [
        "java.lang.management.RuntimeMXBean.getStartTime()"
    ],
    "java.time.chrono.chronology.range": [
        "java.time.chrono.Chronology.range(java.time.temporal.ChronoField)"
    ],
    "javax.swing.plaf.synth.synthtextpaneui.installui": [
        "javax.swing.plaf.synth.SynthTextPaneUI.installUI(javax.swing.JComponent)"
    ],
    "javax.swing.table.defaulttablecolumnmodel.getselectedcolumncount": [
        "javax.swing.table.DefaultTableColumnModel.getSelectedColumnCount()"
    ],
    "java.time.localtime.range": [
        "java.time.LocalTime.range(java.time.temporal.TemporalField)"
    ],
    "javax.security.auth.kerberos.servicepermission.newpermissioncollection": [
        "javax.security.auth.kerberos.ServicePermission.newPermissionCollection()"
    ],
    "javax.swing.plaf.multi.multipanelui.getminimumsize": [
        "javax.swing.plaf.multi.MultiPanelUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "javax.security.auth.login.configurationspi.enginerefresh": [
        "javax.security.auth.login.ConfigurationSpi.engineRefresh()"
    ],
    "java.util.bitset.previoussetbit": [
        "java.util.BitSet.previousSetBit(int)"
    ],
    "org.omg.cosnaming._namingcontextstub.new_context": [
        "org.omg.CosNaming._NamingContextStub.new_context()"
    ],
    "java.util.deque.removelast": [
        "java.util.Deque.removeLast()"
    ],
    "javax.net.ssl.sslsocket.getsupportedprotocols": [
        "javax.net.ssl.SSLSocket.getSupportedProtocols()"
    ],
    "java.util.concurrent.concurrentskiplistset.spliterator": [
        "java.util.concurrent.ConcurrentSkipListSet.spliterator()"
    ],
    "java.lang.management.operatingsystemmxbean.getarch": [
        "java.lang.management.OperatingSystemMXBean.getArch()"
    ],
    "java.util.concurrent.concurrenthashmap.searchkeys": [
        "java.util.concurrent.ConcurrentHashMap.searchKeys(long,java.util.function.Function<? super,? extends U>)"
    ],
    "javax.swing.jviewport.getviewposition": [
        "javax.swing.JViewport.getViewPosition()"
    ],
    "javax.swing.plaf.multi.multiprogressbarui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiProgressBarUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "javax.lang.model.type.typekind.valueof": [
        "javax.lang.model.type.TypeKind.valueOf(java.lang.String)"
    ],
    "javax.swing.jtree.emptyselectionmodel.sharedinstance": [
        "javax.swing.JTree.EmptySelectionModel.sharedInstance()"
    ],
    "java.sql.blob.truncate": [
        "java.sql.Blob.truncate(long)"
    ],
    "java.net.datagramsocketimpl.receive": [
        "java.net.DatagramSocketImpl.receive(java.net.DatagramPacket)"
    ],
    "java.text.spi.breakiteratorprovider.getsentenceinstance": [
        "java.text.spi.BreakIteratorProvider.getSentenceInstance(java.util.Locale)"
    ],
    "java.awt.geom.point2d.distancesq": [
        "java.awt.geom.Point2D.distanceSq(java.awt.geom.Point2D)",
        "java.awt.geom.Point2D.distanceSq(double,double,double,double)",
        "java.awt.geom.Point2D.distanceSq(double,double)"
    ],
    "javax.sql.rowset.baserowset.setncharacterstream": [
        "javax.sql.rowset.BaseRowSet.setNCharacterStream(java.lang.String,java.io.Reader,long)",
        "javax.sql.rowset.BaseRowSet.setNCharacterStream(int,java.io.Reader)",
        "javax.sql.rowset.BaseRowSet.setNCharacterStream(int,java.io.Reader,long)",
        "javax.sql.rowset.BaseRowSet.setNCharacterStream(java.lang.String,java.io.Reader)"
    ],
    "javax.swing.table.defaulttablecellrenderer.validate": [
        "javax.swing.table.DefaultTableCellRenderer.validate()"
    ],
    "javax.tools.javafilemanager.list": [
        "javax.tools.JavaFileManager.list(javax.tools.JavaFileManager.Location,java.lang.String,java.util.Set<javax.tools.JavaFileObject.Kind>,boolean)"
    ],
    "java.util.properties.loadfromxml": [
        "java.util.Properties.loadFromXML(java.io.InputStream)"
    ],
    "javax.swing.defaultbuttonmodel.removeactionlistener": [
        "javax.swing.DefaultButtonModel.removeActionListener(java.awt.event.ActionListener)"
    ],
    "java.awt.dnd.draggesturerecognizer.unregisterlisteners": [
        "java.awt.dnd.DragGestureRecognizer.unregisterListeners()"
    ],
    "java.beans.beancontext.beancontextservices.getservice": [
        "java.beans.beancontext.BeanContextServices.getService(java.beans.beancontext.BeanContextChild,java.lang.Object,java.lang.Class,java.lang.Object,java.beans.beancontext.BeanContextServiceRevokedListener)"
    ],
    "javax.swing.tree.defaulttreecellrenderer.getfont": [
        "javax.swing.tree.DefaultTreeCellRenderer.getFont()"
    ],
    "java.time.offsetdatetime.toinstant": [
        "java.time.OffsetDateTime.toInstant()"
    ],
    "javax.swing.text.defaultcaret.mousedragged": [
        "javax.swing.text.DefaultCaret.mouseDragged(java.awt.event.MouseEvent)"
    ],
    "java.time.duration.withseconds": [
        "java.time.Duration.withSeconds(long)"
    ],
    "java.util.concurrent.completionstage.handle": [
        "java.util.concurrent.CompletionStage.handle(java.util.function.BiFunction<? super,,? extends U>)"
    ],
    "java.sql.drivermanager.getdrivers": [
        "java.sql.DriverManager.getDrivers()"
    ],
    "org.omg.portableserver.dynamicimplementation.invoke": [
        "org.omg.PortableServer.DynamicImplementation.invoke(org.omg.CORBA.ServerRequest)"
    ],
    "java.sql.databasemetadata.supportsminimumsqlgrammar": [
        "java.sql.DatabaseMetaData.supportsMinimumSQLGrammar()"
    ],
    "java.util.linkedlist.offerfirst": [
        "java.util.LinkedList.offerFirst(java.util.LinkedList)",
        "java.util.LinkedList.offerFirst(E)"
    ],
    "java.awt.geom.cubiccurve2d.double.getx2": [
        "java.awt.geom.CubicCurve2D.Double.getX2()"
    ],
    "javax.crypto.sealedobject.getalgorithm": [
        "javax.crypto.SealedObject.getAlgorithm()"
    ],
    "java.security.messagedigestspi.clone": [
        "java.security.MessageDigestSpi.clone()"
    ],
    "java.time.zoneoffset.ofhoursminutesseconds": [
        "java.time.ZoneOffset.ofHoursMinutesSeconds(int,int,int)"
    ],
    "java.awt.color.colorspace.fromrgb": [
        "java.awt.color.ColorSpace.fromRGB(float[])"
    ],
    "javax.swing.text.html.paragraphview.getmaximumspan": [
        "javax.swing.text.html.ParagraphView.getMaximumSpan(int)"
    ],
    "java.text.decimalformatsymbols.setpatternseparator": [
        "java.text.DecimalFormatSymbols.setPatternSeparator(char)"
    ],
    "java.util.concurrent.forkjoinpool.getstealcount": [
        "java.util.concurrent.ForkJoinPool.getStealCount()"
    ],
    "javax.imageio.metadata.iiometadata.getcontroller": [
        "javax.imageio.metadata.IIOMetadata.getController()"
    ],
    "java.sql.resultset.getboolean": [
        "java.sql.ResultSet.getBoolean(java.lang.String)",
        "java.sql.ResultSet.getBoolean(int)"
    ],
    "javax.swing.jlist.getselectionmode": [
        "javax.swing.JList.getSelectionMode()"
    ],
    "javax.management.timer.timer.setsendpastnotifications": [
        "javax.management.timer.Timer.setSendPastNotifications(boolean)"
    ],
    "javax.imageio.imagereader.abort": [
        "javax.imageio.ImageReader.abort()"
    ],
    "java.text.dateformat.getdateinstance": [
        "java.text.DateFormat.getDateInstance(int,java.util.Locale)",
        "java.text.DateFormat.getDateInstance()",
        "java.text.DateFormat.getDateInstance(int)"
    ],
    "java.util.concurrent.concurrentskiplistset.headset": [
        "java.util.concurrent.ConcurrentSkipListSet.headSet(E)"
    ],
    "java.awt.jobattributes.set": [
        "java.awt.JobAttributes.set(java.awt.JobAttributes)"
    ],
    "java.awt.rectangle.union": [
        "java.awt.Rectangle.union(java.awt.Rectangle)"
    ],
    "javax.swing.jviewport.firestatechanged": [
        "javax.swing.JViewport.fireStateChanged()"
    ],
    "javax.swing.jscrollpane.setviewportborder": [
        "javax.swing.JScrollPane.setViewportBorder(javax.swing.border.Border)"
    ],
    "java.time.offsetdatetime.plusminutes": [
        "java.time.OffsetDateTime.plusMinutes(long)"
    ],
    "java.time.temporal.temporalaccessor.get": [
        "java.time.temporal.TemporalAccessor.get(java.time.temporal.TemporalField)"
    ],
    "javax.swing.plaf.synth.synthtreeui.paintdropline": [
        "javax.swing.plaf.synth.SynthTreeUI.paintDropLine(java.awt.Graphics)"
    ],
    "java.awt.component.getfontmetrics": [
        "java.awt.Component.getFontMetrics(java.awt.Font)"
    ],
    "org.omg.cosnaming._namingcontextextstub.to_string": [
        "org.omg.CosNaming._NamingContextExtStub.to_string(org.omg.CosNaming.NameComponent[])"
    ],
    "java.util.concurrent.atomic.atomiclongarray.length": [
        "java.util.concurrent.atomic.AtomicLongArray.length()"
    ],
    "java.awt.component.removecomponentlistener": [
        "java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"
    ],
    "javax.swing.plaf.metal.metalcomboboxicon.geticonheight": [
        "javax.swing.plaf.metal.MetalComboBoxIcon.getIconHeight()"
    ],
    "java.time.zone.zonerulesprovider.providerules": [
        "java.time.zone.ZoneRulesProvider.provideRules(java.lang.String,boolean)"
    ],
    "javax.swing.jcombobox.createactionpropertychangelistener": [
        "javax.swing.JComboBox.createActionPropertyChangeListener(javax.swing.Action)"
    ],
    "java.security.provider.putservice": [
        "java.security.Provider.putService(java.security.Provider.Service)"
    ],
    "java.util.concurrent.executors.callable": [
        "java.util.concurrent.Executors.callable(java.security.PrivilegedAction<?>)",
        "java.util.concurrent.Executors.callable(java.lang.Runnable)",
        "java.util.concurrent.Executors.callable(java.lang.Runnable,T)",
        "java.util.concurrent.Executors.callable(java.security.PrivilegedExceptionAction<?>)"
    ],
    "javax.sql.rowset.settypemap": [
        "javax.sql.RowSet.setTypeMap(,java.lang.Class<?>>)"
    ],
    "javax.swing.plaf.synth.synthpanelui.uninstalllisteners": [
        "javax.swing.plaf.synth.SynthPanelUI.uninstallListeners(javax.swing.JPanel)"
    ],
    "org.omg.dynamicany._dynenumstub.insert_char": [
        "org.omg.DynamicAny._DynEnumStub.insert_char(char)"
    ],
    "java.util.date.from": [
        "java.util.Date.from(java.time.Instant)"
    ],
    "org.omg.dynamicany._dynsequencestub.get_long": [
        "org.omg.DynamicAny._DynSequenceStub.get_long()"
    ],
    "java.lang.compiler.compileclass": [
        "java.lang.Compiler.compileClass(java.lang.Class<?>)"
    ],
    "java.security.spec.ecparameterspec.getcofactor": [
        "java.security.spec.ECParameterSpec.getCofactor()"
    ],
    "java.security.spec.rsaotherprimeinfo.getprime": [
        "java.security.spec.RSAOtherPrimeInfo.getPrime()"
    ],
    "java.util.concurrent.threadpoolexecutor.prestartallcorethreads": [
        "java.util.concurrent.ThreadPoolExecutor.prestartAllCoreThreads()"
    ],
    "java.awt.jobattributes.getmultipledocumenthandling": [
        "java.awt.JobAttributes.getMultipleDocumentHandling()"
    ],
    "java.sql.resultsetmetadata.getschemaname": [
        "java.sql.ResultSetMetaData.getSchemaName(int)"
    ],
    "java.beans.eventsetdescriptor.getlistenermethoddescriptors": [
        "java.beans.EventSetDescriptor.getListenerMethodDescriptors()"
    ],
    "javax.swing.plaf.basic.basicsplitpanedivider.setdividersize": [
        "javax.swing.plaf.basic.BasicSplitPaneDivider.setDividerSize(int)"
    ],
    "java.text.dateformat.getnumberformat": [
        "java.text.DateFormat.getNumberFormat()"
    ],
    "org.w3c.dom.domimplementation.hasfeature": [
        "org.w3c.dom.DOMImplementation.hasFeature(java.lang.String,java.lang.String)"
    ],
    "javax.swing.popupfactory.getpopup": [
        "javax.swing.PopupFactory.getPopup(java.awt.Component,java.awt.Component,int,int)"
    ],
    "javax.imageio.imagewriter.replacepixels": [
        "javax.imageio.ImageWriter.replacePixels(java.awt.image.Raster,javax.imageio.ImageWriteParam)",
        "javax.imageio.ImageWriter.replacePixels(java.awt.image.RenderedImage,javax.imageio.ImageWriteParam)"
    ],
    "javax.xml.stream.events.startelement.getnamespaceuri": [
        "javax.xml.stream.events.StartElement.getNamespaceURI(java.lang.String)"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readsqlxml": [
        "javax.sql.rowset.serial.SQLInputImpl.readSQLXML()"
    ],
    "javax.swing.jlist.getpreferredscrollableviewportsize": [
        "javax.swing.JList.getPreferredScrollableViewportSize()"
    ],
    "javax.swing.jpopupmenu.getdefaultlightweightpopupenabled": [
        "javax.swing.JPopupMenu.getDefaultLightWeightPopupEnabled()"
    ],
    "java.time.zone.zonerules.getoffset": [
        "java.time.zone.ZoneRules.getOffset(java.time.Instant)",
        "java.time.zone.ZoneRules.getOffset(java.time.LocalDateTime)"
    ],
    "java.awt.robot.mousepress": [
        "java.awt.Robot.mousePress(int)"
    ],
    "javax.xml.bind.binder.updatexml": [
        "javax.xml.bind.Binder.updateXML(java.lang.Object,javax.xml.bind.Binder)",
        "javax.xml.bind.Binder.updateXML(java.lang.Object)"
    ],
    "javax.xml.crypto.dsig.keyinfo.keyinfo.getcontent": [
        "javax.xml.crypto.dsig.keyinfo.KeyInfo.getContent()"
    ],
    "javax.swing.plaf.synth.synthpainter.painttogglebuttonborder": [
        "javax.swing.plaf.synth.SynthPainter.paintToggleButtonBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.security.unresolvedpermission.getunresolvedactions": [
        "java.security.UnresolvedPermission.getUnresolvedActions()"
    ],
    "java.security.spec.ecfieldf2m.getfieldsize": [
        "java.security.spec.ECFieldF2m.getFieldSize()"
    ],
    "java.awt.print.printerjob.validatepage": [
        "java.awt.print.PrinterJob.validatePage(java.awt.print.PageFormat)"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.iscurrency": [
        "javax.sql.rowset.RowSetMetaDataImpl.isCurrency(int)"
    ],
    "java.awt.im.inputmethodhighlight.getstyle": [
        "java.awt.im.InputMethodHighlight.getStyle()"
    ],
    "java.awt.scrollpane.eventtypeenabled": [
        "java.awt.ScrollPane.eventTypeEnabled(int)"
    ],
    "javax.jws.soap.soapbinding.style.values": [
        "javax.jws.soap.SOAPBinding.Style.values()"
    ],
    "javax.swing.overlaylayout.preferredlayoutsize": [
        "javax.swing.OverlayLayout.preferredLayoutSize(java.awt.Container)"
    ],
    "javax.swing.text.html.htmleditorkit.clone": [
        "javax.swing.text.html.HTMLEditorKit.clone()"
    ],
    "java.awt.renderinghints.key.equals": [
        "java.awt.RenderingHints.Key.equals(java.lang.Object)"
    ],
    "javax.tools.diagnosticcollector.getdiagnostics": [
        "javax.tools.DiagnosticCollector.getDiagnostics()"
    ],
    "javax.sql.rowset.setquerytimeout": [
        "javax.sql.RowSet.setQueryTimeout(int)"
    ],
    "javax.swing.joptionpane.geticon": [
        "javax.swing.JOptionPane.getIcon()"
    ],
    "java.lang.reflect.constructor.getgenericexceptiontypes": [
        "java.lang.reflect.Constructor.getGenericExceptionTypes()"
    ],
    "java.sql.databasemetadata.getmaxcatalognamelength": [
        "java.sql.DatabaseMetaData.getMaxCatalogNameLength()"
    ],
    "javax.xml.ws.service.sethandlerresolver": [
        "javax.xml.ws.Service.setHandlerResolver(javax.xml.ws.handler.HandlerResolver)"
    ],
    "java.awt.image.pixelgrabber.status": [
        "java.awt.image.PixelGrabber.status()"
    ],
    "org.omg.cosnaming.namingcontextextoperations.resolve_str": [
        "org.omg.CosNaming.NamingContextExtOperations.resolve_str(java.lang.String)"
    ],
    "java.util.stream.stream.findfirst": [
        "java.util.stream.Stream.findFirst()"
    ],
    "javax.swing.buttonmodel.additemlistener": [
        "javax.swing.ButtonModel.addItemListener(java.awt.event.ItemListener)"
    ],
    "java.lang.reflect.method.invoke": [
        "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object)",
        "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...)"
    ],
    "javax.swing.plaf.synth.syntheditorpaneui.paintborder": [
        "javax.swing.plaf.synth.SynthEditorPaneUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.util.linkedlist.addfirst": [
        "java.util.LinkedList.addFirst(E)",
        "java.util.LinkedList.addFirst(java.util.LinkedList)"
    ],
    "javax.sql.rowset.rowsetfactory.createwebrowset": [
        "javax.sql.rowset.RowSetFactory.createWebRowSet()"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getcontrolinfo": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getControlInfo()"
    ],
    "org.omg.dynamicany._dynsequencestub.insert_octet": [
        "org.omg.DynamicAny._DynSequenceStub.insert_octet(byte)"
    ],
    "javax.xml.crypto.xmlcryptocontext.setproperty": [
        "javax.xml.crypto.XMLCryptoContext.setProperty(java.lang.String,java.lang.Object)"
    ],
    "java.util.enumeration.nextelement": [
        "java.util.Enumeration.nextElement()"
    ],
    "javax.swing.event.rowsorterevent.gettype": [
        "javax.swing.event.RowSorterEvent.getType()"
    ],
    "org.omg.dynamicany._dynarraystub.insert_string": [
        "org.omg.DynamicAny._DynArrayStub.insert_string(java.lang.String)"
    ],
    "java.awt.textcomponent.setselectionend": [
        "java.awt.TextComponent.setSelectionEnd(int)"
    ],
    "org.omg.corba.portable.outputstream.write_longlong": [
        "org.omg.CORBA.portable.OutputStream.write_longlong(long)"
    ],
    "javax.swing.jtable.createdefaultcolumnmodel": [
        "javax.swing.JTable.createDefaultColumnModel()"
    ],
    "javax.naming.spi.resolver.resolvetoclass": [
        "javax.naming.spi.Resolver.resolveToClass(java.lang.String,java.lang.Class<? extends javax.naming.Context>)",
        "javax.naming.spi.Resolver.resolveToClass(javax.naming.Name,java.lang.Class<? extends javax.naming.Context>)"
    ],
    "javax.script.scriptengine.getcontext": [
        "javax.script.ScriptEngine.getContext()"
    ],
    "java.util.concurrent.linkedblockingdeque.iterator": [
        "java.util.concurrent.LinkedBlockingDeque.iterator()"
    ],
    "javax.imageio.imagereader.gettileheight": [
        "javax.imageio.ImageReader.getTileHeight(int)"
    ],
    "java.text.breakiterator.getwordinstance": [
        "java.text.BreakIterator.getWordInstance()",
        "java.text.BreakIterator.getWordInstance(java.util.Locale)"
    ],
    "javax.swing.text.view.getalignment": [
        "javax.swing.text.View.getAlignment(int)"
    ],
    "javax.swing.plaf.basic.basicprogressbarui.getcellspacing": [
        "javax.swing.plaf.basic.BasicProgressBarUI.getCellSpacing()"
    ],
    "java.lang.throwable.fillinstacktrace": [
        "java.lang.Throwable.fillInStackTrace()"
    ],
    "java.io.file.equals": [
        "java.io.File.equals(java.lang.Object)"
    ],
    "javax.swing.rowfilter.entry.getmodel": [
        "javax.swing.RowFilter.Entry.getModel()"
    ],
    "javax.crypto.keygeneratorspi.engineinit": [
        "javax.crypto.KeyGeneratorSpi.engineInit(java.security.SecureRandom)",
        "javax.crypto.KeyGeneratorSpi.engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
        "javax.crypto.KeyGeneratorSpi.engineInit(int,java.security.SecureRandom)"
    ],
    "java.util.function.objdoubleconsumer.accept": [
        "java.util.function.ObjDoubleConsumer.accept(java.util.function.ObjDoubleConsumer,double)",
        "java.util.function.ObjDoubleConsumer.accept(T,double)"
    ],
    "javax.management.openmbean.openmbeanparameterinfosupport.getopentype": [
        "javax.management.openmbean.OpenMBeanParameterInfoSupport.getOpenType()"
    ],
    "javax.swing.jcombobox.setui": [
        "javax.swing.JComboBox.setUI(javax.swing.plaf.ComboBoxUI)"
    ],
    "javax.swing.event.treemodelevent.tostring": [
        "javax.swing.event.TreeModelEvent.toString()"
    ],
    "javax.xml.transform.result.setsystemid": [
        "javax.xml.transform.Result.setSystemId(java.lang.String)"
    ],
    "javax.sql.pooledconnection.addconnectioneventlistener": [
        "javax.sql.PooledConnection.addConnectionEventListener(javax.sql.ConnectionEventListener)"
    ],
    "java.util.abstractcollection.tostring": [
        "java.util.AbstractCollection.toString()"
    ],
    "java.awt.renderinghints.equals": [
        "java.awt.RenderingHints.equals(java.lang.Object)"
    ],
    "javax.naming.linkexception.getlinkremainingname": [
        "javax.naming.LinkException.getLinkRemainingName()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintinternalframebackground": [
        "javax.swing.plaf.synth.SynthPainter.paintInternalFrameBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "org.omg.corba.exceptionlist.item": [
        "org.omg.CORBA.ExceptionList.item(int)"
    ],
    "javax.swing.plaf.basic.basicoptionpaneui.addmessagecomponents": [
        "javax.swing.plaf.basic.BasicOptionPaneUI.addMessageComponents(java.awt.Container,java.awt.GridBagConstraints,java.lang.Object,int,boolean)"
    ],
    "javax.swing.text.caret.paint": [
        "javax.swing.text.Caret.paint(java.awt.Graphics)"
    ],
    "javax.script.abstractscriptengine.put": [
        "javax.script.AbstractScriptEngine.put(java.lang.String,java.lang.Object)"
    ],
    "javax.lang.model.element.packageelement.getsimplename": [
        "javax.lang.model.element.PackageElement.getSimpleName()"
    ],
    "org.omg.corba.longholder._read": [
        "org.omg.CORBA.LongHolder._read(org.omg.CORBA.portable.InputStream)"
    ],
    "java.util.gregoriancalendar.tozoneddatetime": [
        "java.util.GregorianCalendar.toZonedDateTime()"
    ],
    "javax.management.relation.relation.getroles": [
        "javax.management.relation.Relation.getRoles(java.lang.String[])"
    ],
    "java.lang.system.seterr": [
        "java.lang.System.setErr(java.io.PrintStream)"
    ],
    "java.text.dateformat.getavailablelocales": [
        "java.text.DateFormat.getAvailableLocales()"
    ],
    "java.awt.canvas.addnotify": [
        "java.awt.Canvas.addNotify()"
    ],
    "javax.management.monitor.monitor.setobservedattribute": [
        "javax.management.monitor.Monitor.setObservedAttribute(java.lang.String)"
    ],
    "javax.print.attribute.enumsyntax.getvalue": [
        "javax.print.attribute.EnumSyntax.getValue()"
    ],
    "java.net.authenticator.getrequestingprompt": [
        "java.net.Authenticator.getRequestingPrompt()"
    ],
    "javax.swing.plaf.multi.multibuttonui.uninstallui": [
        "javax.swing.plaf.multi.MultiButtonUI.uninstallUI(javax.swing.JComponent)"
    ],
    "java.awt.font.glyphvector.getglyphjustificationinfo": [
        "java.awt.font.GlyphVector.getGlyphJustificationInfo(int)"
    ],
    "javax.swing.plaf.basic.basictoolbarui.getfloatingcolor": [
        "javax.swing.plaf.basic.BasicToolBarUI.getFloatingColor()"
    ],
    "java.util.logging.memoryhandler.close": [
        "java.util.logging.MemoryHandler.close()"
    ],
    "java.io.randomaccessfile.writechars": [
        "java.io.RandomAccessFile.writeChars(java.lang.String)"
    ],
    "java.net.urlpermission.hashcode": [
        "java.net.URLPermission.hashCode()"
    ],
    "java.net.networkinterface.supportsmulticast": [
        "java.net.NetworkInterface.supportsMulticast()"
    ],
    "javax.imageio.metadata.iiometadatanode.getnodevalue": [
        "javax.imageio.metadata.IIOMetadataNode.getNodeValue()"
    ],
    "java.awt.event.windowevent.getoppositewindow": [
        "java.awt.event.WindowEvent.getOppositeWindow()"
    ],
    "java.awt.image.rasterop.getbounds2d": [
        "java.awt.image.RasterOp.getBounds2D(java.awt.image.Raster)"
    ],
    "javax.swing.spring.setvalue": [
        "javax.swing.Spring.setValue(int)"
    ],
    "javax.management.notification.setsequencenumber": [
        "javax.management.Notification.setSequenceNumber(long)"
    ],
    "java.sql.databasemetadata.deletesaredetected": [
        "java.sql.DatabaseMetaData.deletesAreDetected(int)"
    ],
    "javax.swing.event.popupmenulistener.popupmenuwillbecomeinvisible": [
        "javax.swing.event.PopupMenuListener.popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent)"
    ],
    "javax.sql.rowset.cachedrowset.execute": [
        "javax.sql.rowset.CachedRowSet.execute(java.sql.Connection)"
    ],
    "java.security.pkcs12attribute.getvalue": [
        "java.security.PKCS12Attribute.getValue()"
    ],
    "java.awt.menuitem.deleteshortcut": [
        "java.awt.MenuItem.deleteShortcut()"
    ],
    "java.util.concurrent.locks.reentrantlock.haswaiters": [
        "java.util.concurrent.locks.ReentrantLock.hasWaiters(java.util.concurrent.locks.Condition)"
    ],
    "javax.swing.jfilechooser.getname": [
        "javax.swing.JFileChooser.getName(java.io.File)"
    ],
    "javax.swing.plaf.textui.getnextvisualpositionfrom": [
        "javax.swing.plaf.TextUI.getNextVisualPositionFrom(javax.swing.text.JTextComponent,int,javax.swing.text.Position.Bias,int,javax.swing.text.Position.Bias[])"
    ],
    "java.text.decimalformatsymbols.getgroupingseparator": [
        "java.text.DecimalFormatSymbols.getGroupingSeparator()"
    ],
    "javax.imageio.imageio.getimagewritersbyformatname": [
        "javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)"
    ],
    "javax.net.ssl.sslcontext.getserversocketfactory": [
        "javax.net.ssl.SSLContext.getServerSocketFactory()"
    ],
    "org.omg.corba.dataoutputstream.write_string": [
        "org.omg.CORBA.DataOutputStream.write_string(java.lang.String)"
    ],
    "java.awt.filedialog.getfilenamefilter": [
        "java.awt.FileDialog.getFilenameFilter()"
    ],
    "javax.imageio.imagereader.setlocale": [
        "javax.imageio.ImageReader.setLocale(java.util.Locale)"
    ],
    "javax.swing.jtabbedpane.setui": [
        "javax.swing.JTabbedPane.setUI(javax.swing.plaf.TabbedPaneUI)"
    ],
    "java.awt.geom.cubiccurve2d.float.getctrlp2": [
        "java.awt.geom.CubicCurve2D.Float.getCtrlP2()"
    ],
    "java.nio.bytebuffer.asintbuffer": [
        "java.nio.ByteBuffer.asIntBuffer()"
    ],
    "javax.xml.validation.validatorhandler.seterrorhandler": [
        "javax.xml.validation.ValidatorHandler.setErrorHandler(org.xml.sax.ErrorHandler)"
    ],
    "java.awt.font.layoutpath.pathtopoint": [
        "java.awt.font.LayoutPath.pathToPoint(java.awt.geom.Point2D,boolean,java.awt.geom.Point2D)"
    ],
    "javax.swing.plaf.nimbus.nimbuslookandfeel.getid": [
        "javax.swing.plaf.nimbus.NimbusLookAndFeel.getID()"
    ],
    "java.util.spi.currencynameprovider.getdisplayname": [
        "java.util.spi.CurrencyNameProvider.getDisplayName(java.lang.String,java.util.Locale)"
    ],
    "javax.xml.stream.xmlstreamexception.getlocation": [
        "javax.xml.stream.XMLStreamException.getLocation()"
    ],
    "javax.xml.crypto.dsig.dom.domsigncontext.getparent": [
        "javax.xml.crypto.dsig.dom.DOMSignContext.getParent()"
    ],
    "java.awt.polygon.addpoint": [
        "java.awt.Polygon.addPoint(int,int)"
    ],
    "javax.swing.plaf.multi.multitreeui.getpathbounds": [
        "javax.swing.plaf.multi.MultiTreeUI.getPathBounds(javax.swing.JTree,javax.swing.tree.TreePath)"
    ],
    "javax.crypto.macspi.clone": [
        "javax.crypto.MacSpi.clone()"
    ],
    "java.util.set.spliterator": [
        "java.util.Set.spliterator()"
    ],
    "java.math.bigdecimal.divideandremainder": [
        "java.math.BigDecimal.divideAndRemainder(java.math.BigDecimal)",
        "java.math.BigDecimal.divideAndRemainder(java.math.BigDecimal,java.math.MathContext)"
    ],
    "java.util.prefs.preferences.node": [
        "java.util.prefs.Preferences.node(java.lang.String)"
    ],
    "javax.swing.table.defaulttablecolumnmodel.getlisteners": [
        "javax.swing.table.DefaultTableColumnModel.getListeners(java.lang.Class<T>)"
    ],
    "javax.swing.jformattedtextfield.getfocuslostbehavior": [
        "javax.swing.JFormattedTextField.getFocusLostBehavior()"
    ],
    "javax.sql.rowset.serial.serialref.clone": [
        "javax.sql.rowset.serial.SerialRef.clone()"
    ],
    "java.net.socket.getinetaddress": [
        "java.net.Socket.getInetAddress()"
    ],
    "java.lang.long.intvalue": [
        "java.lang.Long.intValue()"
    ],
    "javax.lang.model.util.elementkindvisitor6.visitvariableasparameter": [
        "javax.lang.model.util.ElementKindVisitor6.visitVariableAsParameter(javax.lang.model.element.VariableElement,javax.lang.model.util.ElementKindVisitor6)"
    ],
    "javax.swing.plaf.multi.multisplitpaneui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiSplitPaneUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "javax.swing.swingutilities.computeintersection": [
        "javax.swing.SwingUtilities.computeIntersection(int,int,int,int,java.awt.Rectangle)"
    ],
    "java.util.calendar.getavailablecalendartypes": [
        "java.util.Calendar.getAvailableCalendarTypes()"
    ],
    "javax.swing.tree.defaultmutabletreenode.removefromparent": [
        "javax.swing.tree.DefaultMutableTreeNode.removeFromParent()"
    ],
    "java.util.concurrent.atomic.atomiclongarray.getandaccumulate": [
        "java.util.concurrent.atomic.AtomicLongArray.getAndAccumulate(int,long,java.util.function.LongBinaryOperator)"
    ],
    "javax.swing.jcomponent.getregisteredkeystrokes": [
        "javax.swing.JComponent.getRegisteredKeyStrokes()"
    ],
    "javax.management.loading.mlet.getmbeansfromurl": [
        "javax.management.loading.MLet.getMBeansFromURL(java.net.URL)",
        "javax.management.loading.MLet.getMBeansFromURL(java.lang.String)"
    ],
    "java.util.concurrent.threadpoolexecutor.prestartcorethread": [
        "java.util.concurrent.ThreadPoolExecutor.prestartCoreThread()"
    ],
    "java.lang.invoke.serializedlambda.getcapturingclass": [
        "java.lang.invoke.SerializedLambda.getCapturingClass()"
    ],
    "javax.activation.commandobject.setcommandcontext": [
        "javax.activation.CommandObject.setCommandContext(java.lang.String,javax.activation.DataHandler)"
    ],
    "javax.swing.jtable.setautocreaterowsorter": [
        "javax.swing.JTable.setAutoCreateRowSorter(boolean)"
    ],
    "java.awt.image.affinetransformop.gettransform": [
        "java.awt.image.AffineTransformOp.getTransform()"
    ],
    "javax.swing.plaf.metal.metaltheme.gethighlightedtextcolor": [
        "javax.swing.plaf.metal.MetalTheme.getHighlightedTextColor()"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.selectpreviouspossiblevalue": [
        "javax.swing.plaf.basic.BasicComboBoxUI.selectPreviousPossibleValue()"
    ],
    "java.net.urlconnection.setdefaultallowuserinteraction": [
        "java.net.URLConnection.setDefaultAllowUserInteraction(boolean)"
    ],
    "java.beans.xmlencoder.writeexpression": [
        "java.beans.XMLEncoder.writeExpression(java.beans.Expression)"
    ],
    "javax.xml.crypto.dsig.transformexception.printstacktrace": [
        "javax.xml.crypto.dsig.TransformException.printStackTrace()"
    ],
    "org.w3c.dom.node.insertbefore": [
        "org.w3c.dom.Node.insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)"
    ],
    "java.lang.management.threadinfo.getblockedcount": [
        "java.lang.management.ThreadInfo.getBlockedCount()"
    ],
    "javax.xml.transform.result.getsystemid": [
        "javax.xml.transform.Result.getSystemId()"
    ],
    "javax.management.attributechangenotification.getattributetype": [
        "javax.management.AttributeChangeNotification.getAttributeType()"
    ],
    "javax.swing.table.defaulttablemodel.setcolumncount": [
        "javax.swing.table.DefaultTableModel.setColumnCount(int)"
    ],
    "java.text.decimalformat.isdecimalseparatoralwaysshown": [
        "java.text.DecimalFormat.isDecimalSeparatorAlwaysShown()"
    ],
    "java.lang.management.threadmxbean.isthreadcontentionmonitoringenabled": [
        "java.lang.management.ThreadMXBean.isThreadContentionMonitoringEnabled()"
    ],
    "javax.swing.text.flowview.flowstrategy.layout": [
        "javax.swing.text.FlowView.FlowStrategy.layout(javax.swing.text.FlowView)"
    ],
    "javax.swing.text.html.parser.contentmodel.getelements": [
        "javax.swing.text.html.parser.ContentModel.getElements(java.util.Vector<javax.swing.text.html.parser.Element>)"
    ],
    "java.time.offsettime.withoffsetsameinstant": [
        "java.time.OffsetTime.withOffsetSameInstant(java.time.ZoneOffset)"
    ],
    "javax.swing.jtogglebutton.updateui": [
        "javax.swing.JToggleButton.updateUI()"
    ],
    "javax.swing.plaf.basic.basictextui.gettooltiptext": [
        "javax.swing.plaf.basic.BasicTextUI.getToolTipText(javax.swing.text.JTextComponent,java.awt.Point)"
    ],
    "java.awt.trayicon.setpopupmenu": [
        "java.awt.TrayIcon.setPopupMenu(java.awt.PopupMenu)"
    ],
    "javax.management.relation.relationservicembean.hasrelation": [
        "javax.management.relation.RelationServiceMBean.hasRelation(java.lang.String)"
    ],
    "javax.sql.rowset.cachedrowset.getsyncprovider": [
        "javax.sql.rowset.CachedRowSet.getSyncProvider()"
    ],
    "javax.swing.plaf.basic.basicdirectorymodel.firepropertychange": [
        "javax.swing.plaf.basic.BasicDirectoryModel.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)"
    ],
    "java.sql.callablestatement.getobject": [
        "java.sql.CallableStatement.getObject(java.lang.String,java.lang.Class<T>)",
        "java.sql.CallableStatement.getObject(int,java.lang.Class<T>)",
        "java.sql.CallableStatement.getObject(int,,java.lang.Class<?>>)",
        "java.sql.CallableStatement.getObject(java.lang.String,,java.lang.Class<?>>)",
        "java.sql.CallableStatement.getObject(int)",
        "java.sql.CallableStatement.getObject(java.lang.String)"
    ],
    "javax.imageio.iioimage.setthumbnails": [
        "javax.imageio.IIOImage.setThumbnails(java.util.List<? extends java.awt.image.BufferedImage>)"
    ],
    "java.net.urlconnection.getcontenttype": [
        "java.net.URLConnection.getContentType()"
    ],
    "javax.swing.jlabel.setverticaltextposition": [
        "javax.swing.JLabel.setVerticalTextPosition(int)"
    ],
    "java.awt.image.writablerenderedimage.removetileobserver": [
        "java.awt.image.WritableRenderedImage.removeTileObserver(java.awt.image.TileObserver)"
    ],
    "javax.print.attribute.standard.referenceurischemessupported.getstringtable": [
        "javax.print.attribute.standard.ReferenceUriSchemesSupported.getStringTable()"
    ],
    "javax.print.attribute.standard.jobstatereasons.add": [
        "javax.print.attribute.standard.JobStateReasons.add(javax.print.attribute.standard.JobStateReason)"
    ],
    "javax.swing.text.glyphview.insertupdate": [
        "javax.swing.text.GlyphView.insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "java.awt.popupmenu.getaccessiblecontext": [
        "java.awt.PopupMenu.getAccessibleContext()"
    ],
    "java.awt.image.indexcolormodel.getrgb": [
        "java.awt.image.IndexColorModel.getRGB(int)"
    ],
    "javax.imageio.imagereader.readall": [
        "javax.imageio.ImageReader.readAll(int,javax.imageio.ImageReadParam)",
        "javax.imageio.ImageReader.readAll(java.util.Iterator<? extends javax.imageio.ImageReadParam>)"
    ],
    "java.beans.beancontext.beancontextchildsupport.removepropertychangelistener": [
        "java.beans.beancontext.BeanContextChildSupport.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"
    ],
    "javax.swing.plaf.basic.basicsplitpanedivider.getminimumsize": [
        "javax.swing.plaf.basic.BasicSplitPaneDivider.getMinimumSize()"
    ],
    "javax.swing.jprogressbar.setmodel": [
        "javax.swing.JProgressBar.setModel(javax.swing.BoundedRangeModel)"
    ],
    "javax.swing.plaf.metal.metalsliderui.gettrackwidth": [
        "javax.swing.plaf.metal.MetalSliderUI.getTrackWidth()"
    ],
    "java.awt.geom.path2d.float.append": [
        "java.awt.geom.Path2D.Float.append(java.awt.geom.PathIterator,boolean)"
    ],
    "java.util.concurrent.completablefuture.supplyasync": [
        "java.util.concurrent.CompletableFuture.supplyAsync(java.util.function.Supplier<U>,java.util.concurrent.Executor)",
        "java.util.concurrent.CompletableFuture.supplyAsync(java.util.function.Supplier<U>)"
    ],
    "java.nio.file.path.resolve": [
        "java.nio.file.Path.resolve(java.nio.file.Path)",
        "java.nio.file.Path.resolve(java.lang.String)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getwindowtitlefont": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleFont()"
    ],
    "java.security.cert.policynode.getdepth": [
        "java.security.cert.PolicyNode.getDepth()"
    ],
    "javax.swing.plaf.synth.synthtableui.getcontext": [
        "javax.swing.plaf.synth.SynthTableUI.getContext(javax.swing.JComponent)"
    ],
    "java.util.collections.unmodifiablemap": [
        "java.util.Collections.unmodifiableMap(java.util.Map<? extends,? extends V>)"
    ],
    "javax.swing.plaf.basic.basicsplitpanedivider.getborder": [
        "javax.swing.plaf.basic.BasicSplitPaneDivider.getBorder()"
    ],
    "javax.swing.plaf.basic.basictoolbarui.installnonrolloverborders": [
        "javax.swing.plaf.basic.BasicToolBarUI.installNonRolloverBorders(javax.swing.JComponent)"
    ],
    "javax.management.monitor.gaugemonitor.setthresholds": [
        "javax.management.monitor.GaugeMonitor.setThresholds(java.lang.Number,java.lang.Number)"
    ],
    "org.omg.corba.any.extract_fixed": [
        "org.omg.CORBA.Any.extract_fixed()"
    ],
    "java.nio.file.attribute.userdefinedfileattributeview.delete": [
        "java.nio.file.attribute.UserDefinedFileAttributeView.delete(java.lang.String)"
    ],
    "java.time.format.datetimeformatterbuilder.getlocalizeddatetimepattern": [
        "java.time.format.DateTimeFormatterBuilder.getLocalizedDateTimePattern(java.time.format.FormatStyle,java.time.format.FormatStyle,java.time.chrono.Chronology,java.util.Locale)"
    ],
    "java.lang.annotation.retentionpolicy.valueof": [
        "java.lang.annotation.RetentionPolicy.valueOf(java.lang.String)"
    ],
    "java.net.urlconnection.getconnecttimeout": [
        "java.net.URLConnection.getConnectTimeout()"
    ],
    "javax.swing.text.document.putproperty": [
        "javax.swing.text.Document.putProperty(java.lang.Object,java.lang.Object)"
    ],
    "java.net.datagramsocketimpl.leave": [
        "java.net.DatagramSocketImpl.leave(java.net.InetAddress)"
    ],
    "javax.sound.sampled.line.getcontrol": [
        "javax.sound.sampled.Line.getControl(javax.sound.sampled.Control.Type)"
    ],
    "java.awt.geom.ellipse2d.float.setframe": [
        "java.awt.geom.Ellipse2D.Float.setFrame(double,double,double,double)",
        "java.awt.geom.Ellipse2D.Float.setFrame(float,float,float,float)"
    ],
    "javax.swing.tree.defaultmutabletreenode.getlastchild": [
        "javax.swing.tree.DefaultMutableTreeNode.getLastChild()"
    ],
    "javax.swing.text.attributeset.getattribute": [
        "javax.swing.text.AttributeSet.getAttribute(java.lang.Object)"
    ],
    "java.io.bytearrayinputstream.mark": [
        "java.io.ByteArrayInputStream.mark(int)"
    ],
    "java.util.stream.longstream.nonematch": [
        "java.util.stream.LongStream.noneMatch(java.util.function.LongPredicate)"
    ],
    "javax.swing.plaf.basic.basiccombopopup.computepopupbounds": [
        "javax.swing.plaf.basic.BasicComboPopup.computePopupBounds(int,int,int,int)"
    ],
    "java.nio.file.path.getnamecount": [
        "java.nio.file.Path.getNameCount()"
    ],
    "java.lang.float.shortvalue": [
        "java.lang.Float.shortValue()"
    ],
    "java.lang.integer.tostring": [
        "java.lang.Integer.toString(int)",
        "java.lang.Integer.toString()",
        "java.lang.Integer.toString(int,int)"
    ],
    "javax.swing.text.defaultstyleddocument.getparagraphelement": [
        "javax.swing.text.DefaultStyledDocument.getParagraphElement(int)"
    ],
    "java.time.zone.zoneoffsettransitionrule.getlocaltime": [
        "java.time.zone.ZoneOffsetTransitionRule.getLocalTime()"
    ],
    "javax.swing.undo.undoableeditsupport.removeundoableeditlistener": [
        "javax.swing.undo.UndoableEditSupport.removeUndoableEditListener(javax.swing.event.UndoableEditListener)"
    ],
    "java.time.chrono.chronozoneddatetime.withzonesamelocal": [
        "java.time.chrono.ChronoZonedDateTime.withZoneSameLocal(java.time.ZoneId)"
    ],
    "javax.swing.plaf.basic.basictreeui.createdefaultcelleditor": [
        "javax.swing.plaf.basic.BasicTreeUI.createDefaultCellEditor()"
    ],
    "java.sql.resultset.gettimestamp": [
        "java.sql.ResultSet.getTimestamp(int,java.util.Calendar)",
        "java.sql.ResultSet.getTimestamp(int)",
        "java.sql.ResultSet.getTimestamp(java.lang.String,java.util.Calendar)",
        "java.sql.ResultSet.getTimestamp(java.lang.String)"
    ],
    "org.omg.dynamicany._dynvaluestub.set_to_null": [
        "org.omg.DynamicAny._DynValueStub.set_to_null()"
    ],
    "javax.swing.transferhandler.droplocation.tostring": [
        "javax.swing.TransferHandler.DropLocation.toString()"
    ],
    "java.util.logging.logger.setfilter": [
        "java.util.logging.Logger.setFilter(java.util.logging.Filter)"
    ],
    "javax.swing.plaf.multi.multiviewportui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiViewportUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.setselectionpaths": [
        "javax.swing.tree.DefaultTreeSelectionModel.setSelectionPaths(javax.swing.tree.TreePath[])"
    ],
    "java.time.clock.offset": [
        "java.time.Clock.offset(java.time.Clock,java.time.Duration)"
    ],
    "java.util.logging.logger.getglobal": [
        "java.util.logging.Logger.getGlobal()"
    ],
    "org.omg.dynamicany._dynunionstub.insert_longlong": [
        "org.omg.DynamicAny._DynUnionStub.insert_longlong(long)"
    ],
    "javax.xml.ws.wsaddressing.w3cendpointreferencebuilder.metadata": [
        "javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.metadata(org.w3c.dom.Element)"
    ],
    "java.awt.textfield.removeactionlistener": [
        "java.awt.TextField.removeActionListener(java.awt.event.ActionListener)"
    ],
    "javax.swing.plaf.layerui.dolayout": [
        "javax.swing.plaf.LayerUI.doLayout(javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)"
    ],
    "java.lang.processbuilder.directory": [
        "java.lang.ProcessBuilder.directory()",
        "java.lang.ProcessBuilder.directory(java.io.File)"
    ],
    "java.util.concurrent.countedcompleter.nextcomplete": [
        "java.util.concurrent.CountedCompleter.nextComplete()"
    ],
    "javax.swing.jspinner.geteditor": [
        "javax.swing.JSpinner.getEditor()"
    ],
    "javax.naming.ldap.ldapname.remove": [
        "javax.naming.ldap.LdapName.remove(int)"
    ],
    "java.time.duration.tohours": [
        "java.time.Duration.toHours()"
    ],
    "java.security.spec.rsakeygenparameterspec.getkeysize": [
        "java.security.spec.RSAKeyGenParameterSpec.getKeysize()"
    ],
    "org.omg.dynamicany._dynsequencestub.insert_dyn_any": [
        "org.omg.DynamicAny._DynSequenceStub.insert_dyn_any(org.omg.DynamicAny.DynAny)"
    ],
    "java.time.chrono.hijrahdate.of": [
        "java.time.chrono.HijrahDate.of(int,int,int)"
    ],
    "javax.management.timer.timermbean.setsendpastnotifications": [
        "javax.management.timer.TimerMBean.setSendPastNotifications(boolean)"
    ],
    "java.awt.dnd.dragsourceevent.getdragsourcecontext": [
        "java.awt.dnd.DragSourceEvent.getDragSourceContext()"
    ],
    "javax.swing.abstractspinnermodel.getlisteners": [
        "javax.swing.AbstractSpinnerModel.getListeners(java.lang.Class<T>)"
    ],
    "java.lang.math.hypot": [
        "java.lang.Math.hypot(double,double)"
    ],
    "java.awt.window.setvisible": [
        "java.awt.Window.setVisible(boolean)"
    ],
    "java.util.prefs.abstractpreferences.getboolean": [
        "java.util.prefs.AbstractPreferences.getBoolean(java.lang.String,boolean)"
    ],
    "javax.xml.crypto.dsig.dom.domsigncontext.getnextsibling": [
        "javax.xml.crypto.dsig.dom.DOMSignContext.getNextSibling()"
    ],
    "javax.print.attribute.standard.jobprioritysupported.getcategory": [
        "javax.print.attribute.standard.JobPrioritySupported.getCategory()"
    ],
    "java.security.cert.certificate.equals": [
        "java.security.cert.Certificate.equals(java.lang.Object)"
    ],
    "javax.swing.japplet.paramstring": [
        "javax.swing.JApplet.paramString()"
    ],
    "java.lang.invoke.lambdametafactory.altmetafactory": [
        "java.lang.invoke.LambdaMetafactory.altMetafactory(java.lang.invoke.MethodHandles.Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.Object...)"
    ],
    "javax.management.remote.jmxconnectorserver.getnotificationinfo": [
        "javax.management.remote.JMXConnectorServer.getNotificationInfo()"
    ],
    "javax.sound.midi.midisystem.getmidideviceinfo": [
        "javax.sound.midi.MidiSystem.getMidiDeviceInfo()"
    ],
    "java.net.cookiemanager.setcookiepolicy": [
        "java.net.CookieManager.setCookiePolicy(java.net.CookiePolicy)"
    ],
    "javax.print.attribute.docattributeset.addall": [
        "javax.print.attribute.DocAttributeSet.addAll(javax.print.attribute.AttributeSet)"
    ],
    "javax.jws.soap.soapbinding.use.values": [
        "javax.jws.soap.SOAPBinding.Use.values()"
    ],
    "javax.swing.jprogressbar.getaccessiblecontext": [
        "javax.swing.JProgressBar.getAccessibleContext()"
    ],
    "java.util.prefs.preferences.putdouble": [
        "java.util.prefs.Preferences.putDouble(java.lang.String,double)"
    ],
    "java.awt.image.memoryimagesource.setanimated": [
        "java.awt.image.MemoryImageSource.setAnimated(boolean)"
    ],
    "javax.swing.jtable.seteditingrow": [
        "javax.swing.JTable.setEditingRow(int)"
    ],
    "java.util.concurrent.concurrentnavigablemap.headmap": [
        "java.util.concurrent.ConcurrentNavigableMap.headMap(K)"
    ],
    "java.awt.component.removemousewheellistener": [
        "java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"
    ],
    "java.awt.multiplegradientpaint.getfractions": [
        "java.awt.MultipleGradientPaint.getFractions()"
    ],
    "javax.swing.plaf.basic.basiccombopopup.createscroller": [
        "javax.swing.plaf.basic.BasicComboPopup.createScroller()"
    ],
    "javax.swing.plaf.multi.multiinternalframeui.installui": [
        "javax.swing.plaf.multi.MultiInternalFrameUI.installUI(javax.swing.JComponent)"
    ],
    "java.awt.keyboardfocusmanager.setglobalpermanentfocusowner": [
        "java.awt.KeyboardFocusManager.setGlobalPermanentFocusOwner(java.awt.Component)"
    ],
    "java.lang.enum.tostring": [
        "java.lang.Enum.toString()"
    ],
    "java.time.localdate.minusyears": [
        "java.time.LocalDate.minusYears(long)"
    ],
    "java.util.illegalformatconversionexception.getconversion": [
        "java.util.IllegalFormatConversionException.getConversion()"
    ],
    "java.util.concurrent.concurrentlinkeddeque.add": [
        "java.util.concurrent.ConcurrentLinkedDeque.add(E)",
        "java.util.concurrent.ConcurrentLinkedDeque.add(java.util.concurrent.ConcurrentLinkedDeque)"
    ],
    "java.time.chrono.chronolocaldatetime.compareto": [
        "java.time.chrono.ChronoLocalDateTime.compareTo(java.time.chrono.ChronoLocalDateTime<?>)"
    ],
    "javax.swing.plaf.multi.multicolorchooserui.update": [
        "javax.swing.plaf.multi.MultiColorChooserUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.awt.font.textmeasurer.insertchar": [
        "java.awt.font.TextMeasurer.insertChar(java.text.AttributedCharacterIterator,int)"
    ],
    "javax.naming.cannotproceedexception.setaltname": [
        "javax.naming.CannotProceedException.setAltName(javax.naming.Name)"
    ],
    "javax.swing.uimanager.getui": [
        "javax.swing.UIManager.getUI(javax.swing.JComponent)"
    ],
    "org.omg.corba.serviceinformationholder._read": [
        "org.omg.CORBA.ServiceInformationHolder._read(org.omg.CORBA.portable.InputStream)"
    ],
    "javax.swing.jlist.setdragenabled": [
        "javax.swing.JList.setDragEnabled(boolean)"
    ],
    "java.util.concurrent.recursiveaction.compute": [
        "java.util.concurrent.RecursiveAction.compute()"
    ],
    "javax.swing.jpopupmenu.paintborder": [
        "javax.swing.JPopupMenu.paintBorder(java.awt.Graphics)"
    ],
    "java.awt.fontmetrics.getfontrendercontext": [
        "java.awt.FontMetrics.getFontRenderContext()"
    ],
    "java.io.objectoutputstream.writeint": [
        "java.io.ObjectOutputStream.writeInt(int)"
    ],
    "javax.swing.jtree.getleadselectionrow": [
        "javax.swing.JTree.getLeadSelectionRow()"
    ],
    "javax.swing.text.html.formview.createcomponent": [
        "javax.swing.text.html.FormView.createComponent()"
    ],
    "javax.swing.plaf.basic.basictoolbarui.setdockingcolor": [
        "javax.swing.plaf.basic.BasicToolBarUI.setDockingColor(java.awt.Color)"
    ],
    "java.util.concurrent.atomic.atomiclongarray.set": [
        "java.util.concurrent.atomic.AtomicLongArray.set(int,long)"
    ],
    "javax.swing.plaf.metal.metalprogressbarui.paintdeterminate": [
        "javax.swing.plaf.metal.MetalProgressBarUI.paintDeterminate(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.jmenuitem.getmenukeylisteners": [
        "javax.swing.JMenuItem.getMenuKeyListeners()"
    ],
    "java.util.arraylist.remove": [
        "java.util.ArrayList.remove(java.lang.Object)",
        "java.util.ArrayList.remove(int)"
    ],
    "javax.swing.jlist.paramstring": [
        "javax.swing.JList.paramString()"
    ],
    "org.omg.dynamicany._dynunionstub.current_component": [
        "org.omg.DynamicAny._DynUnionStub.current_component()"
    ],
    "javax.management.loading.mlet.loadclass": [
        "javax.management.loading.MLet.loadClass(java.lang.String,javax.management.loading.ClassLoaderRepository)"
    ],
    "java.awt.geom.ellipse2d.double.setframe": [
        "java.awt.geom.Ellipse2D.Double.setFrame(double,double,double,double)"
    ],
    "java.util.regex.matcher.quotereplacement": [
        "java.util.regex.Matcher.quoteReplacement(java.lang.String)"
    ],
    "java.util.currency.getavailablecurrencies": [
        "java.util.Currency.getAvailableCurrencies()"
    ],
    "javax.sql.rowset.serial.serialblob.position": [
        "javax.sql.rowset.serial.SerialBlob.position(byte[],long)",
        "javax.sql.rowset.serial.SerialBlob.position(java.sql.Blob,long)"
    ],
    "org.omg.portableserver.poaoperations.deactivate_object": [
        "org.omg.PortableServer.POAOperations.deactivate_object(byte[])"
    ],
    "java.security.keystore.aliases": [
        "java.security.KeyStore.aliases()"
    ],
    "javax.activation.datahandler.getoutputstream": [
        "javax.activation.DataHandler.getOutputStream()"
    ],
    "java.nio.file.spi.filesystemprovider.issamefile": [
        "java.nio.file.spi.FileSystemProvider.isSameFile(java.nio.file.Path,java.nio.file.Path)"
    ],
    "javax.swing.jcomponent.paintimmediately": [
        "javax.swing.JComponent.paintImmediately(int,int,int,int)",
        "javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"
    ],
    "java.util.scanner.nextbiginteger": [
        "java.util.Scanner.nextBigInteger()",
        "java.util.Scanner.nextBigInteger(int)"
    ],
    "javax.print.attribute.resolutionsyntax.getresolution": [
        "javax.print.attribute.ResolutionSyntax.getResolution(int)"
    ],
    "javax.imageio.imagewriter.preparewritesequence": [
        "javax.imageio.ImageWriter.prepareWriteSequence(javax.imageio.metadata.IIOMetadata)"
    ],
    "javax.swing.text.segment.getendindex": [
        "javax.swing.text.Segment.getEndIndex()"
    ],
    "java.awt.toolkit.getsystemselection": [
        "java.awt.Toolkit.getSystemSelection()"
    ],
    "java.text.decimalformatsymbols.getnan": [
        "java.text.DecimalFormatSymbols.getNaN()"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.tostring": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.toString()"
    ],
    "javax.xml.crypto.dsig.xmlsignature.getkeyinfo": [
        "javax.xml.crypto.dsig.XMLSignature.getKeyInfo()"
    ],
    "org.omg.dynamicany._dynvaluestub.get_long": [
        "org.omg.DynamicAny._DynValueStub.get_long()"
    ],
    "javax.xml.stream.xmleventreader.nexttag": [
        "javax.xml.stream.XMLEventReader.nextTag()"
    ],
    "javax.swing.text.mutableattributeset.removeattributes": [
        "javax.swing.text.MutableAttributeSet.removeAttributes(java.util.Enumeration<?>)",
        "javax.swing.text.MutableAttributeSet.removeAttributes(javax.swing.text.AttributeSet)"
    ],
    "java.security.signature.sign": [
        "java.security.Signature.sign(byte[],int,int)",
        "java.security.Signature.sign()"
    ],
    "java.awt.datatransfer.clipboard.getname": [
        "java.awt.datatransfer.Clipboard.getName()"
    ],
    "java.util.comparator.compare": [
        "java.util.Comparator.compare(T,T)",
        "java.util.Comparator.compare(java.util.Comparator,java.util.Comparator)"
    ],
    "java.text.decimalformat.getmaximumintegerdigits": [
        "java.text.DecimalFormat.getMaximumIntegerDigits()"
    ],
    "java.awt.image.writablerenderedimage.hastilewriters": [
        "java.awt.image.WritableRenderedImage.hasTileWriters()"
    ],
    "org.omg.corba.portable.outputstream.write_wchar_array": [
        "org.omg.CORBA.portable.OutputStream.write_wchar_array(char[],int,int)"
    ],
    "javax.swing.plaf.multi.multicolorchooserui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiColorChooserUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "java.security.cert.crl.tostring": [
        "java.security.cert.CRL.toString()"
    ],
    "java.lang.invoke.methodhandles.lookup.findstaticsetter": [
        "java.lang.invoke.MethodHandles.Lookup.findStaticSetter(java.lang.Class<?>,java.lang.String,java.lang.Class<?>)"
    ],
    "javax.swing.jfilechooser.getdialogtitle": [
        "javax.swing.JFileChooser.getDialogTitle()"
    ],
    "java.text.spi.decimalformatsymbolsprovider.getinstance": [
        "java.text.spi.DecimalFormatSymbolsProvider.getInstance(java.util.Locale)"
    ],
    "java.awt.flowlayout.gethgap": [
        "java.awt.FlowLayout.getHgap()"
    ],
    "javax.naming.namingexception.getcause": [
        "javax.naming.NamingException.getCause()"
    ],
    "javax.sql.rowset.jdbcrowset.getrowsetwarnings": [
        "javax.sql.rowset.JdbcRowSet.getRowSetWarnings()"
    ],
    "javax.swing.text.tabset.gettabafter": [
        "javax.swing.text.TabSet.getTabAfter(float)"
    ],
    "org.omg.dynamicany._dynvaluestub.insert_ulonglong": [
        "org.omg.DynamicAny._DynValueStub.insert_ulonglong(long)"
    ],
    "java.util.regex.matcher.group": [
        "java.util.regex.Matcher.group(java.lang.String)",
        "java.util.regex.Matcher.group()",
        "java.util.regex.Matcher.group(int)"
    ],
    "java.util.jar.attributes.name.hashcode": [
        "java.util.jar.Attributes.Name.hashCode()"
    ],
    "java.util.concurrent.atomic.atomiclongfieldupdater.set": [
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.set(T,long)",
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.set(java.util.concurrent.atomic.AtomicLongFieldUpdater,long)"
    ],
    "java.awt.font.getattributes": [
        "java.awt.Font.getAttributes()"
    ],
    "javax.swing.table.tablecolumnmodel.setcolumnselectionallowed": [
        "javax.swing.table.TableColumnModel.setColumnSelectionAllowed(boolean)"
    ],
    "java.sql.resultset.getlong": [
        "java.sql.ResultSet.getLong(int)",
        "java.sql.ResultSet.getLong(java.lang.String)"
    ],
    "java.util.concurrent.linkedtransferqueue.iterator": [
        "java.util.concurrent.LinkedTransferQueue.iterator()"
    ],
    "java.util.stream.intstream.toarray": [
        "java.util.stream.IntStream.toArray()"
    ],
    "java.nio.doublebuffer.allocate": [
        "java.nio.DoubleBuffer.allocate(int)"
    ],
    "java.lang.class.getdeclaredclasses": [
        "java.lang.Class.getDeclaredClasses()"
    ],
    "javax.xml.ws.service.createdispatch": [
        "javax.xml.ws.Service.createDispatch(javax.xml.namespace.QName,javax.xml.bind.JAXBContext,javax.xml.ws.Service.Mode,javax.xml.ws.WebServiceFeature...)",
        "javax.xml.ws.Service.createDispatch(javax.xml.namespace.QName,java.lang.Class<T>,javax.xml.ws.Service.Mode)",
        "javax.xml.ws.Service.createDispatch(javax.xml.namespace.QName,javax.xml.bind.JAXBContext,javax.xml.ws.Service.Mode)",
        "javax.xml.ws.Service.createDispatch(javax.xml.ws.EndpointReference,java.lang.Class<T>,javax.xml.ws.Service.Mode,javax.xml.ws.WebServiceFeature...)",
        "javax.xml.ws.Service.createDispatch(javax.xml.ws.EndpointReference,javax.xml.bind.JAXBContext,javax.xml.ws.Service.Mode,javax.xml.ws.WebServiceFeature...)",
        "javax.xml.ws.Service.createDispatch(javax.xml.namespace.QName,java.lang.Class<T>,javax.xml.ws.Service.Mode,javax.xml.ws.WebServiceFeature...)"
    ],
    "javax.management.relation.role.getrolename": [
        "javax.management.relation.Role.getRoleName()"
    ],
    "java.awt.toolkit.getcolormodel": [
        "java.awt.Toolkit.getColorModel()"
    ],
    "javax.imageio.metadata.iiometadatanode.getbaseuri": [
        "javax.imageio.metadata.IIOMetadataNode.getBaseURI()"
    ],
    "javax.imageio.metadata.iiometadatanode.getnextsibling": [
        "javax.imageio.metadata.IIOMetadataNode.getNextSibling()"
    ],
    "javax.swing.jfilechooser.createdialog": [
        "javax.swing.JFileChooser.createDialog(java.awt.Component)"
    ],
    "javax.swing.jframe.getjmenubar": [
        "javax.swing.JFrame.getJMenuBar()"
    ],
    "java.awt.font.imagegraphicattribute.getbounds": [
        "java.awt.font.ImageGraphicAttribute.getBounds()"
    ],
    "java.sql.resultset.last": [
        "java.sql.ResultSet.last()"
    ],
    "java.awt.graphics.drawstring": [
        "java.awt.Graphics.drawString(java.text.AttributedCharacterIterator,int,int)",
        "java.awt.Graphics.drawString(java.lang.String,int,int)"
    ],
    "org.omg.dynamicany._dynunionstub.get_long": [
        "org.omg.DynamicAny._DynUnionStub.get_long()"
    ],
    "java.util.zip.zipentry.clone": [
        "java.util.zip.ZipEntry.clone()"
    ],
    "javax.management.monitor.gaugemonitor.start": [
        "javax.management.monitor.GaugeMonitor.start()"
    ],
    "javax.swing.jslider.setinverted": [
        "javax.swing.JSlider.setInverted(boolean)"
    ],
    "javax.imageio.metadata.iiometadata.getstandarddatanode": [
        "javax.imageio.metadata.IIOMetadata.getStandardDataNode()"
    ],
    "javax.script.scriptexception.getmessage": [
        "javax.script.ScriptException.getMessage()"
    ],
    "java.awt.dnd.droptarget.getdroptargetcontext": [
        "java.awt.dnd.DropTarget.getDropTargetContext()"
    ],
    "javax.print.printservicelookup.getprintservices": [
        "javax.print.PrintServiceLookup.getPrintServices(javax.print.DocFlavor,javax.print.attribute.AttributeSet)"
    ],
    "javax.swing.plaf.synth.synthtextpaneui.getpropertyprefix": [
        "javax.swing.plaf.synth.SynthTextPaneUI.getPropertyPrefix()"
    ],
    "javax.imageio.stream.imageinputstream.getstreamposition": [
        "javax.imageio.stream.ImageInputStream.getStreamPosition()"
    ],
    "java.security.accesscontrolcontext.getdomaincombiner": [
        "java.security.AccessControlContext.getDomainCombiner()"
    ],
    "java.util.observable.addobserver": [
        "java.util.Observable.addObserver(java.util.Observer)"
    ],
    "javax.swing.abstractlistmodel.getlisteners": [
        "javax.swing.AbstractListModel.getListeners(java.lang.Class<T>)"
    ],
    "java.text.spi.numberformatprovider.getnumberinstance": [
        "java.text.spi.NumberFormatProvider.getNumberInstance(java.util.Locale)"
    ],
    "java.lang.byte.compareto": [
        "java.lang.Byte.compareTo(java.lang.Byte)"
    ],
    "java.rmi.server.objid.read": [
        "java.rmi.server.ObjID.read(java.io.ObjectInput)"
    ],
    "javax.swing.plaf.synth.synthcomboboxui.paintborder": [
        "javax.swing.plaf.synth.SynthComboBoxUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.xml.crypto.dsig.xmlobject.getcontent": [
        "javax.xml.crypto.dsig.XMLObject.getContent()"
    ],
    "java.awt.image.databufferfloat.getdata": [
        "java.awt.image.DataBufferFloat.getData(int)"
    ],
    "java.util.linkedlist.getlast": [
        "java.util.LinkedList.getLast()"
    ],
    "java.time.dayofweek.adjustinto": [
        "java.time.DayOfWeek.adjustInto(java.time.temporal.Temporal)"
    ],
    "javax.print.attribute.urisyntax.equals": [
        "javax.print.attribute.URISyntax.equals(java.lang.Object)"
    ],
    "java.lang.short.parseshort": [
        "java.lang.Short.parseShort(java.lang.String)",
        "java.lang.Short.parseShort(java.lang.String,int)"
    ],
    "javax.lang.model.type.typevisitor.visitprimitive": [
        "javax.lang.model.type.TypeVisitor.visitPrimitive(javax.lang.model.type.PrimitiveType,javax.lang.model.type.TypeVisitor)"
    ],
    "java.sql.statement.getmaxrows": [
        "java.sql.Statement.getMaxRows()"
    ],
    "javax.swing.text.asyncboxview.viewtomodel": [
        "javax.swing.text.AsyncBoxView.viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias[])"
    ],
    "java.awt.image.writableraster.setsamples": [
        "java.awt.image.WritableRaster.setSamples(int,int,int,int,int,int[])",
        "java.awt.image.WritableRaster.setSamples(int,int,int,int,int,double[])",
        "java.awt.image.WritableRaster.setSamples(int,int,int,int,int,float[])"
    ],
    "java.text.simpledateformat.get2digityearstart": [
        "java.text.SimpleDateFormat.get2DigitYearStart()"
    ],
    "java.nio.channels.datagramchannel.socket": [
        "java.nio.channels.DatagramChannel.socket()"
    ],
    "javax.swing.text.labelview.isunderline": [
        "javax.swing.text.LabelView.isUnderline()"
    ],
    "java.lang.reflect.array.get": [
        "java.lang.reflect.Array.get(java.lang.Object,int)"
    ],
    "javax.swing.plaf.multi.multifilechooserui.rescancurrentdirectory": [
        "javax.swing.plaf.multi.MultiFileChooserUI.rescanCurrentDirectory(javax.swing.JFileChooser)"
    ],
    "org.xml.sax.inputsource.setcharacterstream": [
        "org.xml.sax.InputSource.setCharacterStream(java.io.Reader)"
    ],
    "java.awt.image.bufferedimage.getcolormodel": [
        "java.awt.image.BufferedImage.getColorModel()"
    ],
    "java.time.temporal.temporaladjusters.firstdayofmonth": [
        "java.time.temporal.TemporalAdjusters.firstDayOfMonth()"
    ],
    "javax.swing.jtabbedpane.addtab": [
        "javax.swing.JTabbedPane.addTab(java.lang.String,javax.swing.Icon,java.awt.Component)",
        "javax.swing.JTabbedPane.addTab(java.lang.String,javax.swing.Icon,java.awt.Component,java.lang.String)",
        "javax.swing.JTabbedPane.addTab(java.lang.String,java.awt.Component)"
    ],
    "java.awt.geom.line2d.float.getx1": [
        "java.awt.geom.Line2D.Float.getX1()"
    ],
    "java.util.linkedlist.peekfirst": [
        "java.util.LinkedList.peekFirst()"
    ],
    "org.ietf.jgss.gssmanager.getinstance": [
        "org.ietf.jgss.GSSManager.getInstance()"
    ],
    "java.io.dataoutput.writechars": [
        "java.io.DataOutput.writeChars(java.lang.String)"
    ],
    "javax.swing.defaultlistcellrenderer.invalidate": [
        "javax.swing.DefaultListCellRenderer.invalidate()"
    ],
    "java.sql.sqloutput.writearray": [
        "java.sql.SQLOutput.writeArray(java.sql.Array)"
    ],
    "java.sql.resultset.updatenull": [
        "java.sql.ResultSet.updateNull(java.lang.String)",
        "java.sql.ResultSet.updateNull(int)"
    ],
    "javax.management.openmbean.compositedata.hashcode": [
        "javax.management.openmbean.CompositeData.hashCode()"
    ],
    "java.awt.image.multipixelpackedsamplemodel.getnumdataelements": [
        "java.awt.image.MultiPixelPackedSampleModel.getNumDataElements()"
    ],
    "javax.net.ssl.sslparameters.getwantclientauth": [
        "javax.net.ssl.SSLParameters.getWantClientAuth()"
    ],
    "javax.sound.sampled.audiofileformat.getframelength": [
        "javax.sound.sampled.AudioFileFormat.getFrameLength()"
    ],
    "javax.sql.rowset.filteredrowset.setfilter": [
        "javax.sql.rowset.FilteredRowSet.setFilter(javax.sql.rowset.Predicate)"
    ],
    "java.io.filterinputstream.read": [
        "java.io.FilterInputStream.read(byte[],int,int)",
        "java.io.FilterInputStream.read()"
    ],
    "java.sql.datatruncation.getdatasize": [
        "java.sql.DataTruncation.getDataSize()"
    ],
    "javax.net.ssl.sslserversocket.getsslparameters": [
        "javax.net.ssl.SSLServerSocket.getSSLParameters()"
    ],
    "javax.management.mbeanserverdelegate.getspecificationvendor": [
        "javax.management.MBeanServerDelegate.getSpecificationVendor()"
    ],
    "java.io.datainput.readint": [
        "java.io.DataInput.readInt()"
    ],
    "java.util.concurrent.atomic.atomiclong.getanddecrement": [
        "java.util.concurrent.atomic.AtomicLong.getAndDecrement()"
    ],
    "java.awt.flowlayout.sethgap": [
        "java.awt.FlowLayout.setHgap(int)"
    ],
    "javax.management.relation.relationservicembean.findassociatedmbeans": [
        "javax.management.relation.RelationServiceMBean.findAssociatedMBeans(javax.management.ObjectName,java.lang.String,java.lang.String)"
    ],
    "java.net.cookiepolicy.shouldaccept": [
        "java.net.CookiePolicy.shouldAccept(java.net.URI,java.net.HttpCookie)"
    ],
    "java.awt.awteventmulticaster.windowlostfocus": [
        "java.awt.AWTEventMulticaster.windowLostFocus(java.awt.event.WindowEvent)"
    ],
    "javax.management.mbeanserverpermission.implies": [
        "javax.management.MBeanServerPermission.implies(java.security.Permission)"
    ],
    "javax.swing.painter.paint": [
        "javax.swing.Painter.paint(java.awt.Graphics2D,javax.swing.Painter,int,int)"
    ],
    "org.omg.dynamicany._dynstructstub.get_string": [
        "org.omg.DynamicAny._DynStructStub.get_string()"
    ],
    "java.nio.file.spi.filesystemprovider.newasynchronousfilechannel": [
        "java.nio.file.spi.FileSystemProvider.newAsynchronousFileChannel(java.nio.file.Path,java.util.Set<? extends java.nio.file.OpenOption>,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute<?>)",
        "java.nio.file.spi.FileSystemProvider.newAsynchronousFileChannel(java.nio.file.Path,java.util.Set<? extends java.nio.file.OpenOption>,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute<?>...)"
    ],
    "javax.accessibility.accessibletablemodelchange.getlastcolumn": [
        "javax.accessibility.AccessibleTableModelChange.getLastColumn()"
    ],
    "java.util.treemap.values": [
        "java.util.TreeMap.values()"
    ],
    "java.text.breakiterator.preceding": [
        "java.text.BreakIterator.preceding(int)"
    ],
    "javax.xml.soap.messagefactory.createmessage": [
        "javax.xml.soap.MessageFactory.createMessage(javax.xml.soap.MimeHeaders,java.io.InputStream)",
        "javax.xml.soap.MessageFactory.createMessage()"
    ],
    "javax.swing.jtree.removetreeexpansionlistener": [
        "javax.swing.JTree.removeTreeExpansionListener(javax.swing.event.TreeExpansionListener)"
    ],
    "java.io.filteroutputstream.write": [
        "java.io.FilterOutputStream.write(int)",
        "java.io.FilterOutputStream.write(byte[],int,int)"
    ],
    "javax.swing.jlist.indextolocation": [
        "javax.swing.JList.indexToLocation(int)"
    ],
    "javax.swing.jtooltip.updateui": [
        "javax.swing.JToolTip.updateUI()"
    ],
    "java.util.stream.doublestream.maptoint": [
        "java.util.stream.DoubleStream.mapToInt(java.util.function.DoubleToIntFunction)"
    ],
    "javax.script.simplescriptcontext.setbindings": [
        "javax.script.SimpleScriptContext.setBindings(javax.script.Bindings,int)"
    ],
    "javax.swing.jtree.firevaluechanged": [
        "javax.swing.JTree.fireValueChanged(javax.swing.event.TreeSelectionEvent)"
    ],
    "javax.net.ssl.x509trustmanager.getacceptedissuers": [
        "javax.net.ssl.X509TrustManager.getAcceptedIssuers()"
    ],
    "java.lang.management.memoryusage.tostring": [
        "java.lang.management.MemoryUsage.toString()"
    ],
    "java.lang.invoke.methodhandles.lookup.findvirtual": [
        "java.lang.invoke.MethodHandles.Lookup.findVirtual(java.lang.Class<?>,java.lang.String,java.lang.invoke.MethodType)"
    ],
    "java.awt.container.print": [
        "java.awt.Container.print(java.awt.Graphics)"
    ],
    "javax.lang.model.util.simpleannotationvaluevisitor6.visitenumconstant": [
        "javax.lang.model.util.SimpleAnnotationValueVisitor6.visitEnumConstant(javax.lang.model.element.VariableElement,javax.lang.model.util.SimpleAnnotationValueVisitor6)"
    ],
    "java.security.provider.keyset": [
        "java.security.Provider.keySet()"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.geterrorhandler": [
        "org.xml.sax.helpers.XMLFilterImpl.getErrorHandler()"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readnstring": [
        "javax.sql.rowset.serial.SQLInputImpl.readNString()"
    ],
    "javax.swing.jinternalframe.remove": [
        "javax.swing.JInternalFrame.remove(java.awt.Component)"
    ],
    "java.awt.geom.arc2d.setangleextent": [
        "java.awt.geom.Arc2D.setAngleExtent(double)"
    ],
    "org.omg.dynamicany._dynanystub.insert_float": [
        "org.omg.DynamicAny._DynAnyStub.insert_float(float)"
    ],
    "java.net.urldecoder.decode": [
        "java.net.URLDecoder.decode(java.lang.String,java.lang.String)"
    ],
    "java.io.pipedinputstream.connect": [
        "java.io.PipedInputStream.connect(java.io.PipedOutputStream)"
    ],
    "java.awt.systemtray.getsystemtray": [
        "java.awt.SystemTray.getSystemTray()"
    ],
    "java.lang.reflect.field.togenericstring": [
        "java.lang.reflect.Field.toGenericString()"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.resetrowselection": [
        "javax.swing.tree.DefaultTreeSelectionModel.resetRowSelection()"
    ],
    "java.io.bufferedoutputstream.write": [
        "java.io.BufferedOutputStream.write(byte[],int,int)",
        "java.io.BufferedOutputStream.write(int)"
    ],
    "java.awt.image.raster.gettransfertype": [
        "java.awt.image.Raster.getTransferType()"
    ],
    "javax.swing.plaf.multi.multitableheaderui.contains": [
        "javax.swing.plaf.multi.MultiTableHeaderUI.contains(javax.swing.JComponent,int,int)"
    ],
    "java.text.messageformat.format": [
        "java.text.MessageFormat.format(java.lang.String,java.lang.Object)",
        "java.text.MessageFormat.format(java.lang.String,java.lang.Object...)"
    ],
    "javax.swing.text.highlighter.highlight.getstartoffset": [
        "javax.swing.text.Highlighter.Highlight.getStartOffset()"
    ],
    "java.sql.callablestatement.setfloat": [
        "java.sql.CallableStatement.setFloat(java.lang.String,float)"
    ],
    "javax.imageio.imagereader.gettilewidth": [
        "javax.imageio.ImageReader.getTileWidth(int)"
    ],
    "javax.swing.plaf.multi.multiseparatorui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiSeparatorUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "java.beans.introspector.getbeaninfo": [
        "java.beans.Introspector.getBeanInfo(java.lang.Class<?>,int)",
        "java.beans.Introspector.getBeanInfo(java.lang.Class<?>)",
        "java.beans.Introspector.getBeanInfo(java.lang.Class<?>,java.lang.Class<?>,int)"
    ],
    "java.text.decimalformatsymbols.setnan": [
        "java.text.DecimalFormatSymbols.setNaN(java.lang.String)"
    ],
    "javax.xml.bind.unmarshaller.seteventhandler": [
        "javax.xml.bind.Unmarshaller.setEventHandler(javax.xml.bind.ValidationEventHandler)"
    ],
    "javax.swing.defaultlistcellrenderer.isopaque": [
        "javax.swing.DefaultListCellRenderer.isOpaque()"
    ],
    "java.awt.frame.getextendedstate": [
        "java.awt.Frame.getExtendedState()"
    ],
    "java.awt.menubar.shortcuts": [
        "java.awt.MenuBar.shortcuts()"
    ],
    "java.util.logging.logmanager.getproperty": [
        "java.util.logging.LogManager.getProperty(java.lang.String)"
    ],
    "java.lang.instrument.instrumentation.appendtosystemclassloadersearch": [
        "java.lang.instrument.Instrumentation.appendToSystemClassLoaderSearch(java.util.jar.JarFile)"
    ],
    "javax.swing.plaf.multi.multimenuitemui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiMenuItemUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "java.io.objectinput.read": [
        "java.io.ObjectInput.read()",
        "java.io.ObjectInput.read(byte[],int,int)",
        "java.io.ObjectInput.read(byte[])"
    ],
    "java.awt.graphics2d.getdeviceconfiguration": [
        "java.awt.Graphics2D.getDeviceConfiguration()"
    ],
    "javax.swing.jdesktoppane.getui": [
        "javax.swing.JDesktopPane.getUI()"
    ],
    "javax.swing.event.menukeyevent.getmenuselectionmanager": [
        "javax.swing.event.MenuKeyEvent.getMenuSelectionManager()"
    ],
    "org.w3c.dom.domerror.getmessage": [
        "org.w3c.dom.DOMError.getMessage()"
    ],
    "javax.sound.midi.sequencer.setmicrosecondposition": [
        "javax.sound.midi.Sequencer.setMicrosecondPosition(long)"
    ],
    "java.time.zone.zoneoffsettransition.tostring": [
        "java.time.zone.ZoneOffsetTransition.toString()"
    ],
    "javax.swing.plaf.basic.basiclistui.convertrowtoy": [
        "javax.swing.plaf.basic.BasicListUI.convertRowToY(int)"
    ],
    "javax.management.queryexp.setmbeanserver": [
        "javax.management.QueryExp.setMBeanServer(javax.management.MBeanServer)"
    ],
    "javax.xml.ws.endpoint.setmetadata": [
        "javax.xml.ws.Endpoint.setMetadata(java.util.List<javax.xml.transform.Source>)"
    ],
    "javax.management.remote.jmxconnectorservermbean.tojmxconnector": [
        "javax.management.remote.JMXConnectorServerMBean.toJMXConnector(,?>)"
    ],
    "java.applet.applet.getdocumentbase": [
        "java.applet.Applet.getDocumentBase()"
    ],
    "javax.sql.rowset.setusername": [
        "javax.sql.RowSet.setUsername(java.lang.String)"
    ],
    "javax.swing.listselectionmodel.getleadselectionindex": [
        "javax.swing.ListSelectionModel.getLeadSelectionIndex()"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.settime": [
        "javax.xml.datatype.XMLGregorianCalendar.setTime(int,int,int)",
        "javax.xml.datatype.XMLGregorianCalendar.setTime(int,int,int,java.math.BigDecimal)",
        "javax.xml.datatype.XMLGregorianCalendar.setTime(int,int,int,int)"
    ],
    "java.util.stream.basestream.unordered": [
        "java.util.stream.BaseStream.unordered()"
    ],
    "javax.sql.rowset.setdate": [
        "javax.sql.RowSet.setDate(java.lang.String,java.sql.Date)",
        "javax.sql.RowSet.setDate(java.lang.String,java.sql.Date,java.util.Calendar)",
        "javax.sql.RowSet.setDate(int,java.sql.Date,java.util.Calendar)",
        "javax.sql.RowSet.setDate(int,java.sql.Date)"
    ],
    "java.util.listiterator.previous": [
        "java.util.ListIterator.previous()"
    ],
    "java.util.treeset.floor": [
        "java.util.TreeSet.floor(E)"
    ],
    "java.nio.doublebuffer.hashcode": [
        "java.nio.DoubleBuffer.hashCode()"
    ],
    "java.util.hashtable.getordefault": [
        "java.util.Hashtable.getOrDefault(java.lang.Object,V)"
    ],
    "java.lang.string.replace": [
        "java.lang.String.replace(char,char)",
        "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)"
    ],
    "javax.swing.spring.minus": [
        "javax.swing.Spring.minus(javax.swing.Spring)"
    ],
    "javax.sound.midi.midichannel.getmute": [
        "javax.sound.midi.MidiChannel.getMute()"
    ],
    "java.util.concurrent.atomic.doubleadder.add": [
        "java.util.concurrent.atomic.DoubleAdder.add(double)"
    ],
    "javax.print.attribute.standard.finishings.getenumvaluetable": [
        "javax.print.attribute.standard.Finishings.getEnumValueTable()"
    ],
    "javax.sql.rowset.baserowset.notifyrowsetchanged": [
        "javax.sql.rowset.BaseRowSet.notifyRowSetChanged()"
    ],
    "java.lang.reflect.annotatedelement.getannotation": [
        "java.lang.reflect.AnnotatedElement.getAnnotation(java.lang.Class<T>)"
    ],
    "java.lang.instrument.instrumentation.retransformclasses": [
        "java.lang.instrument.Instrumentation.retransformClasses(java.lang.Class<?>...)"
    ],
    "java.lang.runtime.getruntime": [
        "java.lang.Runtime.getRuntime()"
    ],
    "java.time.zone.zoneoffsettransition.getdatetimebefore": [
        "java.time.zone.ZoneOffsetTransition.getDateTimeBefore()"
    ],
    "java.awt.image.imageproducer.removeconsumer": [
        "java.awt.image.ImageProducer.removeConsumer(java.awt.image.ImageConsumer)"
    ],
    "javax.sound.sampled.mixer.info.getvendor": [
        "javax.sound.sampled.Mixer.Info.getVendor()"
    ],
    "java.awt.container.removeall": [
        "java.awt.Container.removeAll()"
    ],
    "javax.swing.jprogressbar.getui": [
        "javax.swing.JProgressBar.getUI()"
    ],
    "java.text.rulebasedcollator.equals": [
        "java.text.RuleBasedCollator.equals(java.lang.Object)"
    ],
    "java.awt.layoutmanager.layoutcontainer": [
        "java.awt.LayoutManager.layoutContainer(java.awt.Container)"
    ],
    "java.awt.datatransfer.dataflavor.gettextplainunicodeflavor": [
        "java.awt.datatransfer.DataFlavor.getTextPlainUnicodeFlavor()"
    ],
    "javax.xml.ws.spi.provider.readendpointreference": [
        "javax.xml.ws.spi.Provider.readEndpointReference(javax.xml.transform.Source)"
    ],
    "java.nio.channels.spi.abstractselectionkey.cancel": [
        "java.nio.channels.spi.AbstractSelectionKey.cancel()"
    ],
    "java.sql.blob.length": [
        "java.sql.Blob.length()"
    ],
    "java.math.biginteger.nextprobableprime": [
        "java.math.BigInteger.nextProbablePrime()"
    ],
    "javax.print.attribute.standard.referenceurischemessupported.getname": [
        "javax.print.attribute.standard.ReferenceUriSchemesSupported.getName()"
    ],
    "java.awt.adjustable.getunitincrement": [
        "java.awt.Adjustable.getUnitIncrement()"
    ],
    "java.util.stream.intstream.limit": [
        "java.util.stream.IntStream.limit(long)"
    ],
    "javax.sql.rowset.baserowset.geturl": [
        "javax.sql.rowset.BaseRowSet.getUrl()"
    ],
    "java.security.cert.x509certselector.getpathtonames": [
        "java.security.cert.X509CertSelector.getPathToNames()"
    ],
    "java.awt.frame.setmenubar": [
        "java.awt.Frame.setMenuBar(java.awt.MenuBar)"
    ],
    "java.time.format.datetimeformatterbuilder.appendlocalized": [
        "java.time.format.DateTimeFormatterBuilder.appendLocalized(java.time.format.FormatStyle,java.time.format.FormatStyle)"
    ],
    "java.awt.dnd.droptarget.createdroptargetautoscroller": [
        "java.awt.dnd.DropTarget.createDropTargetAutoScroller(java.awt.Component,java.awt.Point)"
    ],
    "javax.swing.plaf.synth.synthtoolbarui.propertychange": [
        "javax.swing.plaf.synth.SynthToolBarUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "java.awt.event.adjustmentevent.getadjustable": [
        "java.awt.event.AdjustmentEvent.getAdjustable()"
    ],
    "org.w3c.dom.document.importnode": [
        "org.w3c.dom.Document.importNode(org.w3c.dom.Node,boolean)"
    ],
    "java.awt.geom.path2d.getwindingrule": [
        "java.awt.geom.Path2D.getWindingRule()"
    ],
    "java.nio.file.files.getowner": [
        "java.nio.file.Files.getOwner(java.nio.file.Path,java.nio.file.LinkOption)",
        "java.nio.file.Files.getOwner(java.nio.file.Path,java.nio.file.LinkOption...)"
    ],
    "javax.management.mbeanserver.addnotificationlistener": [
        "javax.management.MBeanServer.addNotificationListener(javax.management.ObjectName,javax.management.ObjectName,javax.management.NotificationFilter,java.lang.Object)",
        "javax.management.MBeanServer.addNotificationListener(javax.management.ObjectName,javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)"
    ],
    "javax.xml.crypto.dsig.keyinfo.keyinfo.getid": [
        "javax.xml.crypto.dsig.keyinfo.KeyInfo.getId()"
    ],
    "java.awt.window.removewindowlistener": [
        "java.awt.Window.removeWindowListener(java.awt.event.WindowListener)"
    ],
    "java.text.simpledateformat.tolocalizedpattern": [
        "java.text.SimpleDateFormat.toLocalizedPattern()"
    ],
    "java.nio.channels.selectionkey.attach": [
        "java.nio.channels.SelectionKey.attach(java.lang.Object)"
    ],
    "java.net.datagramsocket.close": [
        "java.net.DatagramSocket.close()"
    ],
    "org.omg.corba.portable.inputstream.read_double": [
        "org.omg.CORBA.portable.InputStream.read_double()"
    ],
    "java.lang.processbuilder.redirecterrorstream": [
        "java.lang.ProcessBuilder.redirectErrorStream()",
        "java.lang.ProcessBuilder.redirectErrorStream(boolean)"
    ],
    "java.util.concurrent.concurrentlinkedqueue.remove": [
        "java.util.concurrent.ConcurrentLinkedQueue.remove(java.lang.Object)"
    ],
    "javax.swing.plaf.synth.synthtoolbarui.paintdragwindow": [
        "javax.swing.plaf.synth.SynthToolBarUI.paintDragWindow(java.awt.Graphics)"
    ],
    "java.util.hashset.add": [
        "java.util.HashSet.add(java.util.HashSet)",
        "java.util.HashSet.add(E)"
    ],
    "java.io.pipedwriter.connect": [
        "java.io.PipedWriter.connect(java.io.PipedReader)"
    ],
    "javax.net.ssl.sslserversocket.setwantclientauth": [
        "javax.net.ssl.SSLServerSocket.setWantClientAuth(boolean)"
    ],
    "javax.sound.sampled.dataline.start": [
        "javax.sound.sampled.DataLine.start()"
    ],
    "java.awt.color.hashcode": [
        "java.awt.Color.hashCode()"
    ],
    "java.lang.strictmath.ieeeremainder": [
        "java.lang.StrictMath.IEEEremainder(double,double)"
    ],
    "javax.swing.plaf.multi.multimenubarui.uninstallui": [
        "javax.swing.plaf.multi.MultiMenuBarUI.uninstallUI(javax.swing.JComponent)"
    ],
    "java.awt.image.getgraphics": [
        "java.awt.Image.getGraphics()"
    ],
    "javax.swing.text.html.htmleditorkit.getinputattributes": [
        "javax.swing.text.html.HTMLEditorKit.getInputAttributes()"
    ],
    "javax.rmi.corba.stubdelegate.hashcode": [
        "javax.rmi.CORBA.StubDelegate.hashCode(javax.rmi.CORBA.Stub)"
    ],
    "javax.swing.jtree.addselectionrow": [
        "javax.swing.JTree.addSelectionRow(int)"
    ],
    "java.text.decimalformat.applylocalizedpattern": [
        "java.text.DecimalFormat.applyLocalizedPattern(java.lang.String)"
    ],
    "javax.swing.jsplitpane.getdividerlocation": [
        "javax.swing.JSplitPane.getDividerLocation()"
    ],
    "javax.lang.model.util.elementkindvisitor6.visitexecutableasmethod": [
        "javax.lang.model.util.ElementKindVisitor6.visitExecutableAsMethod(javax.lang.model.element.ExecutableElement,javax.lang.model.util.ElementKindVisitor6)"
    ],
    "javax.naming.cannotproceedexception.setaltnamectx": [
        "javax.naming.CannotProceedException.setAltNameCtx(javax.naming.Context)"
    ],
    "java.util.jar.pack200.newunpacker": [
        "java.util.jar.Pack200.newUnpacker()"
    ],
    "javax.swing.text.componentview.getpreferredspan": [
        "javax.swing.text.ComponentView.getPreferredSpan(int)"
    ],
    "org.w3c.dom.document.adoptnode": [
        "org.w3c.dom.Document.adoptNode(org.w3c.dom.Node)"
    ],
    "java.awt.geom.cubiccurve2d.double.getctrlx1": [
        "java.awt.geom.CubicCurve2D.Double.getCtrlX1()"
    ],
    "javax.swing.text.abstractdocument.attributecontext.getemptyset": [
        "javax.swing.text.AbstractDocument.AttributeContext.getEmptySet()"
    ],
    "java.lang.integer.reversebytes": [
        "java.lang.Integer.reverseBytes(int)"
    ],
    "javax.sql.rowset.baserowset.setcommand": [
        "javax.sql.rowset.BaseRowSet.setCommand(java.lang.String)"
    ],
    "java.awt.im.inputmethodrequests.getlocationoffset": [
        "java.awt.im.InputMethodRequests.getLocationOffset(int,int)"
    ],
    "java.awt.dnd.dragsource.getflavormap": [
        "java.awt.dnd.DragSource.getFlavorMap()"
    ],
    "javax.xml.stream.xmlstreamwriter.writedtd": [
        "javax.xml.stream.XMLStreamWriter.writeDTD(java.lang.String)"
    ],
    "javax.security.sasl.saslserverfactory.createsaslserver": [
        "javax.security.sasl.SaslServerFactory.createSaslServer(java.lang.String,java.lang.String,java.lang.String,,?>,javax.security.auth.callback.CallbackHandler)"
    ],
    "java.util.logging.memoryhandler.getpushlevel": [
        "java.util.logging.MemoryHandler.getPushLevel()"
    ],
    "javax.swing.plaf.multi.multiprogressbarui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiProgressBarUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "java.util.scanner.skip": [
        "java.util.Scanner.skip(java.util.regex.Pattern)",
        "java.util.Scanner.skip(java.lang.String)"
    ],
    "javax.swing.text.abstractdocument.addundoableeditlistener": [
        "javax.swing.text.AbstractDocument.addUndoableEditListener(javax.swing.event.UndoableEditListener)"
    ],
    "java.sql.resultset.getbyte": [
        "java.sql.ResultSet.getByte(int)",
        "java.sql.ResultSet.getByte(java.lang.String)"
    ],
    "java.awt.awteventmulticaster.componentmoved": [
        "java.awt.AWTEventMulticaster.componentMoved(java.awt.event.ComponentEvent)"
    ],
    "javax.swing.undo.undomanager.getredopresentationname": [
        "javax.swing.undo.UndoManager.getRedoPresentationName()"
    ],
    "javax.swing.plaf.synth.synthcontext.getcomponent": [
        "javax.swing.plaf.synth.SynthContext.getComponent()"
    ],
    "javax.xml.transform.transformerexception.getmessageandlocation": [
        "javax.xml.transform.TransformerException.getMessageAndLocation()"
    ],
    "org.w3c.dom.characterdata.replacedata": [
        "org.w3c.dom.CharacterData.replaceData(int,int,java.lang.String)"
    ],
    "java.util.scanner.nextline": [
        "java.util.Scanner.nextLine()"
    ],
    "javax.management.relation.relationservice.getrole": [
        "javax.management.relation.RelationService.getRole(java.lang.String,java.lang.String)"
    ],
    "javax.swing.text.stylecontext.getdefaultstylecontext": [
        "javax.swing.text.StyleContext.getDefaultStyleContext()"
    ],
    "java.applet.applet.getparameter": [
        "java.applet.Applet.getParameter(java.lang.String)"
    ],
    "java.util.concurrent.concurrenthashmap.reduceentriestodouble": [
        "java.util.concurrent.ConcurrentHashMap.reduceEntriesToDouble(long,,java.util.concurrent.ConcurrentHashMap>>,double,java.util.function.DoubleBinaryOperator)"
    ],
    "javax.sound.sampled.line.close": [
        "javax.sound.sampled.Line.close()"
    ],
    "javax.annotation.processing.filer.createresource": [
        "javax.annotation.processing.Filer.createResource(javax.tools.JavaFileManager.Location,java.lang.CharSequence,java.lang.CharSequence,javax.lang.model.element.Element...)"
    ],
    "javax.swing.spinnerdatemodel.setcalendarfield": [
        "javax.swing.SpinnerDateModel.setCalendarField(int)"
    ],
    "javax.xml.soap.attachmentpart.getcontentid": [
        "javax.xml.soap.AttachmentPart.getContentId()"
    ],
    "javax.swing.plaf.synth.syntheditorpaneui.propertychange": [
        "javax.swing.plaf.synth.SynthEditorPaneUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "javax.swing.text.styleddocument.getfont": [
        "javax.swing.text.StyledDocument.getFont(javax.swing.text.AttributeSet)"
    ],
    "javax.swing.plaf.basic.basicscrollbarui.getminimumthumbsize": [
        "javax.swing.plaf.basic.BasicScrollBarUI.getMinimumThumbSize()"
    ],
    "java.sql.resultsetmetadata.getprecision": [
        "java.sql.ResultSetMetaData.getPrecision(int)"
    ],
    "javax.swing.plaf.synth.synthmenubarui.update": [
        "javax.swing.plaf.synth.SynthMenuBarUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.beans.beancontext.beancontextservices.revokeservice": [
        "java.beans.beancontext.BeanContextServices.revokeService(java.lang.Class,java.beans.beancontext.BeanContextServiceProvider,boolean)"
    ],
    "javax.xml.bind.unmarshaller.getunmarshallerhandler": [
        "javax.xml.bind.Unmarshaller.getUnmarshallerHandler()"
    ],
    "javax.swing.buttongroup.add": [
        "javax.swing.ButtonGroup.add(javax.swing.AbstractButton)"
    ],
    "org.omg.corba.orb.create_struct_tc": [
        "org.omg.CORBA.ORB.create_struct_tc(java.lang.String,java.lang.String,org.omg.CORBA.StructMember[])"
    ],
    "java.time.temporal.temporaladjusters.lastdayofmonth": [
        "java.time.temporal.TemporalAdjusters.lastDayOfMonth()"
    ],
    "javax.xml.bind.marshaller.marshal": [
        "javax.xml.bind.Marshaller.marshal(java.lang.Object,java.io.OutputStream)",
        "javax.xml.bind.Marshaller.marshal(java.lang.Object,org.xml.sax.ContentHandler)",
        "javax.xml.bind.Marshaller.marshal(java.lang.Object,java.io.Writer)",
        "javax.xml.bind.Marshaller.marshal(java.lang.Object,org.w3c.dom.Node)",
        "javax.xml.bind.Marshaller.marshal(java.lang.Object,javax.xml.transform.Result)",
        "javax.xml.bind.Marshaller.marshal(java.lang.Object,javax.xml.stream.XMLEventWriter)",
        "javax.xml.bind.Marshaller.marshal(java.lang.Object,java.io.File)",
        "javax.xml.bind.Marshaller.marshal(java.lang.Object,javax.xml.stream.XMLStreamWriter)"
    ],
    "java.awt.window.getownerlesswindows": [
        "java.awt.Window.getOwnerlessWindows()"
    ],
    "java.nio.channels.socketchannel.getremoteaddress": [
        "java.nio.channels.SocketChannel.getRemoteAddress()"
    ],
    "java.io.dataoutputstream.write": [
        "java.io.DataOutputStream.write(byte[],int,int)"
    ],
    "javax.sound.midi.shortmessage.getdatalength": [
        "javax.sound.midi.ShortMessage.getDataLength(int)"
    ],
    "java.lang.reflect.executable.getgenericexceptiontypes": [
        "java.lang.reflect.Executable.getGenericExceptionTypes()"
    ],
    "java.lang.short.floatvalue": [
        "java.lang.Short.floatValue()"
    ],
    "java.beans.beancontext.beancontextservicerevokedevent.iscurrentserviceinvalidnow": [
        "java.beans.beancontext.BeanContextServiceRevokedEvent.isCurrentServiceInvalidNow()"
    ],
    "javax.swing.jtable.setselectionbackground": [
        "javax.swing.JTable.setSelectionBackground(java.awt.Color)"
    ],
    "javax.swing.text.passwordview.drawechocharacter": [
        "javax.swing.text.PasswordView.drawEchoCharacter(java.awt.Graphics,int,int,char)"
    ],
    "javax.xml.validation.schemafactory.newinstance": [
        "javax.xml.validation.SchemaFactory.newInstance(java.lang.String)",
        "javax.xml.validation.SchemaFactory.newInstance(java.lang.String,java.lang.String,java.lang.ClassLoader)"
    ],
    "javax.naming.referralexception.retryreferral": [
        "javax.naming.ReferralException.retryReferral()"
    ],
    "javax.swing.text.asyncboxview.getviewindex": [
        "javax.swing.text.AsyncBoxView.getViewIndex(int,javax.swing.text.Position.Bias)"
    ],
    "javax.swing.text.segment.previous": [
        "javax.swing.text.Segment.previous()"
    ],
    "java.awt.geom.point2d.setlocation": [
        "java.awt.geom.Point2D.setLocation(double,double)",
        "java.awt.geom.Point2D.setLocation(java.awt.geom.Point2D)"
    ],
    "java.awt.mouseinfo.getpointerinfo": [
        "java.awt.MouseInfo.getPointerInfo()"
    ],
    "java.security.cert.x509crlselector.setmincrlnumber": [
        "java.security.cert.X509CRLSelector.setMinCRLNumber(java.math.BigInteger)"
    ],
    "javax.swing.text.html.parser.dtd.getdtd": [
        "javax.swing.text.html.parser.DTD.getDTD(java.lang.String)"
    ],
    "java.sql.preparedstatement.setncharacterstream": [
        "java.sql.PreparedStatement.setNCharacterStream(int,java.io.Reader,long)",
        "java.sql.PreparedStatement.setNCharacterStream(int,java.io.Reader)"
    ],
    "java.time.format.textstyle.valueof": [
        "java.time.format.TextStyle.valueOf(java.lang.String)"
    ],
    "javax.swing.text.stylecontext.getemptyset": [
        "javax.swing.text.StyleContext.getEmptySet()"
    ],
    "javax.lang.model.element.modifier.valueof": [
        "javax.lang.model.element.Modifier.valueOf(java.lang.String)"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.rectangleforcurrentvalue": [
        "javax.swing.plaf.basic.BasicComboBoxUI.rectangleForCurrentValue()"
    ],
    "javax.xml.soap.soapelement.addtextnode": [
        "javax.xml.soap.SOAPElement.addTextNode(java.lang.String)"
    ],
    "javax.swing.jinternalframe.createrootpane": [
        "javax.swing.JInternalFrame.createRootPane()"
    ],
    "java.util.identityhashmap.get": [
        "java.util.IdentityHashMap.get(java.lang.Object)"
    ],
    "java.awt.frame.getmenubar": [
        "java.awt.Frame.getMenuBar()"
    ],
    "javax.swing.jscrollbar.getminimumsize": [
        "javax.swing.JScrollBar.getMinimumSize()"
    ],
    "javax.management.openmbean.compositetype.hashcode": [
        "javax.management.openmbean.CompositeType.hashCode()"
    ],
    "java.time.chrono.chronology.getdisplayname": [
        "java.time.chrono.Chronology.getDisplayName(java.time.format.TextStyle,java.util.Locale)"
    ],
    "javax.swing.colorchooser.abstractcolorchooserpanel.buildchooser": [
        "javax.swing.colorchooser.AbstractColorChooserPanel.buildChooser()"
    ],
    "javax.naming.context.rename": [
        "javax.naming.Context.rename(javax.naming.Name,javax.naming.Name)",
        "javax.naming.Context.rename(java.lang.String,java.lang.String)"
    ],
    "javax.management.relation.roleresult.setroles": [
        "javax.management.relation.RoleResult.setRoles(javax.management.relation.RoleList)"
    ],
    "java.awt.window.getbufferstrategy": [
        "java.awt.Window.getBufferStrategy()"
    ],
    "javax.swing.text.html.parser.dtd.defelement": [
        "javax.swing.text.html.parser.DTD.defElement(java.lang.String,int,boolean,boolean,javax.swing.text.html.parser.ContentModel,java.lang.String[],java.lang.String[],javax.swing.text.html.parser.AttributeList)"
    ],
    "java.beans.xmlencoder.getowner": [
        "java.beans.XMLEncoder.getOwner()"
    ],
    "java.beans.beancontext.beancontextchildsupport.addpropertychangelistener": [
        "java.beans.beancontext.BeanContextChildSupport.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"
    ],
    "javax.sql.connectionpooldatasource.getpooledconnection": [
        "javax.sql.ConnectionPoolDataSource.getPooledConnection()",
        "javax.sql.ConnectionPoolDataSource.getPooledConnection(java.lang.String,java.lang.String)"
    ],
    "java.net.socketoption.type": [
        "java.net.SocketOption.type()"
    ],
    "java.awt.geom.path2d.reset": [
        "java.awt.geom.Path2D.reset()"
    ],
    "java.util.concurrent.completablefuture.allof": [
        "java.util.concurrent.CompletableFuture.allOf(java.util.concurrent.CompletableFuture<?>...)",
        "java.util.concurrent.CompletableFuture.allOf(java.util.concurrent.CompletableFuture<?>)"
    ],
    "javax.print.attribute.standard.compression.getenumvaluetable": [
        "javax.print.attribute.standard.Compression.getEnumValueTable()"
    ],
    "java.awt.menubar.getmenu": [
        "java.awt.MenuBar.getMenu(int)"
    ],
    "java.awt.toolkit.createmenubar": [
        "java.awt.Toolkit.createMenuBar(java.awt.MenuBar)"
    ],
    "java.security.signaturespi.engineupdate": [
        "java.security.SignatureSpi.engineUpdate(java.nio.ByteBuffer)",
        "java.security.SignatureSpi.engineUpdate(byte[],int,int)",
        "java.security.SignatureSpi.engineUpdate(byte)"
    ],
    "java.beans.beancontext.beancontextsupport.toarray": [
        "java.beans.beancontext.BeanContextSupport.toArray()",
        "java.beans.beancontext.BeanContextSupport.toArray(java.lang.Object[])"
    ],
    "javax.swing.japplet.settransferhandler": [
        "javax.swing.JApplet.setTransferHandler(javax.swing.TransferHandler)"
    ],
    "javax.print.attribute.standard.printermoreinfo.getname": [
        "javax.print.attribute.standard.PrinterMoreInfo.getName()"
    ],
    "javax.print.attribute.standard.printerstatereasons.printerstatereasonset": [
        "javax.print.attribute.standard.PrinterStateReasons.printerStateReasonSet(javax.print.attribute.standard.Severity)"
    ],
    "javax.swing.text.styleconstants.seticon": [
        "javax.swing.text.StyleConstants.setIcon(javax.swing.text.MutableAttributeSet,javax.swing.Icon)"
    ],
    "java.awt.basicstroke.getlinejoin": [
        "java.awt.BasicStroke.getLineJoin()"
    ],
    "java.util.regex.pattern.aspredicate": [
        "java.util.regex.Pattern.asPredicate()"
    ],
    "javax.rmi.corba.stubdelegate.readobject": [
        "javax.rmi.CORBA.StubDelegate.readObject(javax.rmi.CORBA.Stub,java.io.ObjectInputStream)"
    ],
    "java.awt.geom.path2d.transform": [
        "java.awt.geom.Path2D.transform(java.awt.geom.AffineTransform)"
    ],
    "java.awt.event.componentevent.paramstring": [
        "java.awt.event.ComponentEvent.paramString()"
    ],
    "java.util.missingresourceexception.getclassname": [
        "java.util.MissingResourceException.getClassName()"
    ],
    "javax.swing.jspinner.defaulteditor.gettextfield": [
        "javax.swing.JSpinner.DefaultEditor.getTextField()"
    ],
    "org.omg.dynamicany._dynsequencestub.type": [
        "org.omg.DynamicAny._DynSequenceStub.type()"
    ],
    "java.awt.keyboardfocusmanager.firepropertychange": [
        "java.awt.KeyboardFocusManager.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)"
    ],
    "java.awt.dnd.dragsource.getdefaultdragsource": [
        "java.awt.dnd.DragSource.getDefaultDragSource()"
    ],
    "javax.xml.soap.soapconnection.call": [
        "javax.xml.soap.SOAPConnection.call(javax.xml.soap.SOAPMessage,java.lang.Object)"
    ],
    "java.io.objectstreamfield.gettypestring": [
        "java.io.ObjectStreamField.getTypeString()"
    ],
    "java.sql.sqlexception.setnextexception": [
        "java.sql.SQLException.setNextException(java.sql.SQLException)"
    ],
    "java.io.datainput.readshort": [
        "java.io.DataInput.readShort()"
    ],
    "javax.swing.abstractbutton.getrolloverselectedicon": [
        "javax.swing.AbstractButton.getRolloverSelectedIcon()"
    ],
    "javax.swing.plaf.nimbus.nimbuslookandfeel.getstyle": [
        "javax.swing.plaf.nimbus.NimbusLookAndFeel.getStyle(javax.swing.JComponent,javax.swing.plaf.synth.Region)"
    ],
    "javax.sound.midi.transmitter.setreceiver": [
        "javax.sound.midi.Transmitter.setReceiver(javax.sound.midi.Receiver)"
    ],
    "javax.swing.plaf.layerui.addpropertychangelistener": [
        "javax.swing.plaf.LayerUI.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",
        "javax.swing.plaf.LayerUI.addPropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "java.time.duration.getseconds": [
        "java.time.Duration.getSeconds()"
    ],
    "javax.swing.jlist.droplocation.getindex": [
        "javax.swing.JList.DropLocation.getIndex()"
    ],
    "java.util.stream.stream.sorted": [
        "java.util.stream.Stream.sorted()",
        "java.util.stream.Stream.sorted(java.util.Comparator<? super java.util.stream.Stream>)",
        "java.util.stream.Stream.sorted(java.util.Comparator<? super T>)"
    ],
    "javax.swing.plaf.basic.basicgraphicsutils.getgrooveinsets": [
        "javax.swing.plaf.basic.BasicGraphicsUtils.getGrooveInsets()"
    ],
    "javax.print.attribute.standard.pdloverridesupported.getstringtable": [
        "javax.print.attribute.standard.PDLOverrideSupported.getStringTable()"
    ],
    "javax.swing.jtable.getmodel": [
        "javax.swing.JTable.getModel()"
    ],
    "javax.swing.plaf.synth.synthinternalframeui.paint": [
        "javax.swing.plaf.synth.SynthInternalFrameUI.paint(java.awt.Graphics,javax.swing.JComponent)",
        "javax.swing.plaf.synth.SynthInternalFrameUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)"
    ],
    "javax.rmi.corba.stubdelegate.equals": [
        "javax.rmi.CORBA.StubDelegate.equals(javax.rmi.CORBA.Stub,java.lang.Object)"
    ],
    "javax.xml.transform.transformerfactory.getattribute": [
        "javax.xml.transform.TransformerFactory.getAttribute(java.lang.String)"
    ],
    "java.sql.sqlxml.getcharacterstream": [
        "java.sql.SQLXML.getCharacterStream()"
    ],
    "javax.swing.plaf.multi.multimenuitemui.installui": [
        "javax.swing.plaf.multi.MultiMenuItemUI.installUI(javax.swing.JComponent)"
    ],
    "javax.print.attribute.setofintegersyntax.tostring": [
        "javax.print.attribute.SetOfIntegerSyntax.toString()"
    ],
    "javax.swing.jdialog.update": [
        "javax.swing.JDialog.update(java.awt.Graphics)"
    ],
    "org.xml.sax.helpers.attributesimpl.getindex": [
        "org.xml.sax.helpers.AttributesImpl.getIndex(java.lang.String,java.lang.String)"
    ],
    "java.awt.renderinghints.size": [
        "java.awt.RenderingHints.size()"
    ],
    "java.time.zoneddatetime.tolocaldate": [
        "java.time.ZonedDateTime.toLocalDate()"
    ],
    "javax.swing.plaf.synth.synthmenubarui.createui": [
        "javax.swing.plaf.synth.SynthMenuBarUI.createUI(javax.swing.JComponent)"
    ],
    "org.omg.portableserver.poaoperations.create_id_uniqueness_policy": [
        "org.omg.PortableServer.POAOperations.create_id_uniqueness_policy(org.omg.PortableServer.IdUniquenessPolicyValue)"
    ],
    "javax.sql.rowset.joinrowset.supportsfulljoin": [
        "javax.sql.rowset.JoinRowSet.supportsFullJoin()"
    ],
    "java.awt.geom.cubiccurve2d.float.getctrlx2": [
        "java.awt.geom.CubicCurve2D.Float.getCtrlX2()"
    ],
    "java.beans.beancontext.beancontextchildsupport.setbeancontext": [
        "java.beans.beancontext.BeanContextChildSupport.setBeanContext(java.beans.beancontext.BeanContext)"
    ],
    "javax.swing.plaf.basic.basicdesktopiconui.getmaximumsize": [
        "javax.swing.plaf.basic.BasicDesktopIconUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "javax.swing.text.tabset.gettab": [
        "javax.swing.text.TabSet.getTab(int)"
    ],
    "javax.swing.plaf.basic.basiceditorpaneui.propertychange": [
        "javax.swing.plaf.basic.BasicEditorPaneUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "java.lang.integer.doublevalue": [
        "java.lang.Integer.doubleValue()"
    ],
    "java.util.weakhashmap.put": [
        "java.util.WeakHashMap.put(K,V)",
        "java.util.WeakHashMap.put(java.util.WeakHashMap,java.util.WeakHashMap)"
    ],
    "javax.print.attribute.standard.mediaprintablearea.gety": [
        "javax.print.attribute.standard.MediaPrintableArea.getY(int)"
    ],
    "javax.xml.bind.jaxbcontext.newinstance": [
        "javax.xml.bind.JAXBContext.newInstance(java.lang.Class[],,?>)",
        "javax.xml.bind.JAXBContext.newInstance(java.lang.String)",
        "javax.xml.bind.JAXBContext.newInstance(java.lang.Class...)",
        "javax.xml.bind.JAXBContext.newInstance(java.lang.String,java.lang.ClassLoader)",
        "javax.xml.bind.JAXBContext.newInstance(java.lang.String,java.lang.ClassLoader,,?>)"
    ],
    "org.omg.cosnaming._namingcontextextstub.resolve": [
        "org.omg.CosNaming._NamingContextExtStub.resolve(org.omg.CosNaming.NameComponent[])"
    ],
    "java.util.linkedlist.peeklast": [
        "java.util.LinkedList.peekLast()"
    ],
    "javax.security.auth.callback.choicecallback.getselectedindexes": [
        "javax.security.auth.callback.ChoiceCallback.getSelectedIndexes()"
    ],
    "org.omg.dynamicany._dynenumstub.insert_any": [
        "org.omg.DynamicAny._DynEnumStub.insert_any(org.omg.CORBA.Any)"
    ],
    "java.util.jar.attributes.clear": [
        "java.util.jar.Attributes.clear()"
    ],
    "javax.swing.jcomponent.printchildren": [
        "javax.swing.JComponent.printChildren(java.awt.Graphics)"
    ],
    "javax.swing.plaf.multi.multitextui.getminimumsize": [
        "javax.swing.plaf.multi.MultiTextUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "javax.swing.abstractbutton.getui": [
        "javax.swing.AbstractButton.getUI()"
    ],
    "java.time.localdate.get": [
        "java.time.LocalDate.get(java.time.temporal.TemporalField)"
    ],
    "javax.sql.rowset.cachedrowset.acceptchanges": [
        "javax.sql.rowset.CachedRowSet.acceptChanges()",
        "javax.sql.rowset.CachedRowSet.acceptChanges(java.sql.Connection)"
    ],
    "javax.swing.joptionpane.getinitialselectionvalue": [
        "javax.swing.JOptionPane.getInitialSelectionValue()"
    ],
    "java.util.concurrent.semaphore.acquireuninterruptibly": [
        "java.util.concurrent.Semaphore.acquireUninterruptibly()",
        "java.util.concurrent.Semaphore.acquireUninterruptibly(int)"
    ],
    "javax.management.openmbean.openmbeanparameterinfo.getopentype": [
        "javax.management.openmbean.OpenMBeanParameterInfo.getOpenType()"
    ],
    "java.io.filterreader.read": [
        "java.io.FilterReader.read(char[],int,int)",
        "java.io.FilterReader.read()"
    ],
    "javax.swing.plaf.synth.synthtabbedpaneui.setrollovertab": [
        "javax.swing.plaf.synth.SynthTabbedPaneUI.setRolloverTab(int)"
    ],
    "javax.xml.bind.datatypeconverterinterface.parseunsignedint": [
        "javax.xml.bind.DatatypeConverterInterface.parseUnsignedInt(java.lang.String)"
    ],
    "org.ietf.jgss.gsscontext.requestsequencedet": [
        "org.ietf.jgss.GSSContext.requestSequenceDet(boolean)"
    ],
    "java.util.concurrent.atomic.atomiclong.accumulateandget": [
        "java.util.concurrent.atomic.AtomicLong.accumulateAndGet(long,java.util.function.LongBinaryOperator)"
    ],
    "javax.swing.menuselectionmanager.processmouseevent": [
        "javax.swing.MenuSelectionManager.processMouseEvent(java.awt.event.MouseEvent)"
    ],
    "javax.swing.tree.treenode.getchildat": [
        "javax.swing.tree.TreeNode.getChildAt(int)"
    ],
    "javax.security.auth.subject.hashcode": [
        "javax.security.auth.Subject.hashCode()"
    ],
    "javax.crypto.keyagreement.dophase": [
        "javax.crypto.KeyAgreement.doPhase(java.security.Key,boolean)"
    ],
    "java.text.dateformatsymbols.setzonestrings": [
        "java.text.DateFormatSymbols.setZoneStrings(java.lang.String)",
        "java.text.DateFormatSymbols.setZoneStrings(java.lang.String[][])"
    ],
    "java.sql.databasemetadata.getdriverversion": [
        "java.sql.DatabaseMetaData.getDriverVersion()"
    ],
    "java.security.codesource.getlocation": [
        "java.security.CodeSource.getLocation()"
    ],
    "java.nio.file.path.getfilename": [
        "java.nio.file.Path.getFileName()"
    ],
    "javax.swing.jmenu.addseparator": [
        "javax.swing.JMenu.addSeparator()"
    ],
    "javax.net.ssl.sslserversocketfactory.getsupportedciphersuites": [
        "javax.net.ssl.SSLServerSocketFactory.getSupportedCipherSuites()"
    ],
    "java.nio.buffer.remaining": [
        "java.nio.Buffer.remaining()"
    ],
    "javax.swing.text.wrappedplainview.drawline": [
        "javax.swing.text.WrappedPlainView.drawLine(int,int,java.awt.Graphics,int,int)"
    ],
    "javax.swing.box.filler.getaccessiblecontext": [
        "javax.swing.Box.Filler.getAccessibleContext()"
    ],
    "javax.swing.joptionpane.paramstring": [
        "javax.swing.JOptionPane.paramString()"
    ],
    "java.beans.beancontext.beancontextsupport.iterator": [
        "java.beans.beancontext.BeanContextSupport.iterator()"
    ],
    "javax.swing.plaf.synth.synthpanelui.propertychange": [
        "javax.swing.plaf.synth.SynthPanelUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "java.awt.textcomponent.setselectionstart": [
        "java.awt.TextComponent.setSelectionStart(int)"
    ],
    "java.sql.databasemetadata.getprocedureterm": [
        "java.sql.DatabaseMetaData.getProcedureTerm()"
    ],
    "java.sql.databasemetadata.supportssubqueriesinquantifieds": [
        "java.sql.DatabaseMetaData.supportsSubqueriesInQuantifieds()"
    ],
    "org.omg.cosnaming.namingcontextoperations.rebind_context": [
        "org.omg.CosNaming.NamingContextOperations.rebind_context(org.omg.CosNaming.NameComponent[],org.omg.CosNaming.NamingContext)"
    ],
    "javax.management.attributevalueexp.tostring": [
        "javax.management.AttributeValueExp.toString()"
    ],
    "javax.management.monitor.countermonitormbean.getthreshold": [
        "javax.management.monitor.CounterMonitorMBean.getThreshold(javax.management.ObjectName)"
    ],
    "java.awt.image.bufferedimageop.getrenderinghints": [
        "java.awt.image.BufferedImageOp.getRenderingHints()"
    ],
    "java.awt.font.getsize": [
        "java.awt.Font.getSize()"
    ],
    "java.time.chrono.chronolocaldatetime.toepochsecond": [
        "java.time.chrono.ChronoLocalDateTime.toEpochSecond(java.time.ZoneOffset)"
    ],
    "org.omg.dynamicany.dynanyoperations.insert_long": [
        "org.omg.DynamicAny.DynAnyOperations.insert_long(int)"
    ],
    "java.util.zip.zipentry.getcomment": [
        "java.util.zip.ZipEntry.getComment()"
    ],
    "javax.accessibility.accessibleextendedcomponent.getaccessiblekeybinding": [
        "javax.accessibility.AccessibleExtendedComponent.getAccessibleKeyBinding()"
    ],
    "java.util.enumset.noneof": [
        "java.util.EnumSet.noneOf(java.lang.Class<E>)"
    ],
    "javax.swing.japplet.getrootpane": [
        "javax.swing.JApplet.getRootPane()"
    ],
    "javax.swing.text.plainview.insertupdate": [
        "javax.swing.text.PlainView.insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "javax.imageio.imagetypespecifier.createbufferedimage": [
        "javax.imageio.ImageTypeSpecifier.createBufferedImage(int,int)"
    ],
    "javax.xml.bind.helpers.validationeventimpl.setlocator": [
        "javax.xml.bind.helpers.ValidationEventImpl.setLocator(javax.xml.bind.ValidationEventLocator)"
    ],
    "java.beans.beancontext.beancontextsupport.writechildren": [
        "java.beans.beancontext.BeanContextSupport.writeChildren(java.io.ObjectOutputStream)"
    ],
    "javax.xml.soap.soapenvelope.createname": [
        "javax.xml.soap.SOAPEnvelope.createName(java.lang.String,java.lang.String,java.lang.String)",
        "javax.xml.soap.SOAPEnvelope.createName(java.lang.String)"
    ],
    "javax.sound.midi.sequencer.gettempoinbpm": [
        "javax.sound.midi.Sequencer.getTempoInBPM()"
    ],
    "java.lang.iterable.foreach": [
        "java.lang.Iterable.forEach(java.util.function.Consumer<? super java.lang.Iterable>)",
        "java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)"
    ],
    "java.awt.font.numericshaper.tostring": [
        "java.awt.font.NumericShaper.toString()"
    ],
    "javax.swing.tree.defaultmutabletreenode.getnextnode": [
        "javax.swing.tree.DefaultMutableTreeNode.getNextNode()"
    ],
    "javax.net.ssl.sslsocket.setsslparameters": [
        "javax.net.ssl.SSLSocket.setSSLParameters(javax.net.ssl.SSLParameters)"
    ],
    "java.util.illegalformatprecisionexception.getprecision": [
        "java.util.IllegalFormatPrecisionException.getPrecision()"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getcontrol": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getControl()"
    ],
    "javax.swing.text.flowview.insertupdate": [
        "javax.swing.text.FlowView.insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "javax.jws.soap.soapbinding.style.valueof": [
        "javax.jws.soap.SOAPBinding.Style.valueOf(java.lang.String)"
    ],
    "javax.swing.text.abstractdocument.createbranchelement": [
        "javax.swing.text.AbstractDocument.createBranchElement(javax.swing.text.Element,javax.swing.text.AttributeSet)"
    ],
    "java.sql.resultset.updatestring": [
        "java.sql.ResultSet.updateString(int,java.lang.String)",
        "java.sql.ResultSet.updateString(java.lang.String,java.lang.String)"
    ],
    "java.time.localtime.adjustinto": [
        "java.time.LocalTime.adjustInto(java.time.temporal.Temporal)"
    ],
    "java.lang.processbuilder.redirect.hashcode": [
        "java.lang.ProcessBuilder.Redirect.hashCode()"
    ],
    "org.omg.dynamicany._dynunionstub.set_discriminator": [
        "org.omg.DynamicAny._DynUnionStub.set_discriminator(org.omg.DynamicAny.DynAny)"
    ],
    "javax.xml.ws.service.getservicename": [
        "javax.xml.ws.Service.getServiceName()"
    ],
    "java.lang.instrument.instrumentation.redefineclasses": [
        "java.lang.instrument.Instrumentation.redefineClasses(java.lang.instrument.ClassDefinition...)"
    ],
    "javax.swing.event.listdataevent.getindex1": [
        "javax.swing.event.ListDataEvent.getIndex1()"
    ],
    "java.lang.long.doublevalue": [
        "java.lang.Long.doubleValue()"
    ],
    "javax.swing.table.defaulttablecolumnmodel.gettotalcolumnwidth": [
        "javax.swing.table.DefaultTableColumnModel.getTotalColumnWidth()"
    ],
    "java.security.spec.ecgenparameterspec.getname": [
        "java.security.spec.ECGenParameterSpec.getName()"
    ],
    "java.net.socketimpl.create": [
        "java.net.SocketImpl.create(boolean)"
    ],
    "java.lang.character.codepointcount": [
        "java.lang.Character.codePointCount(java.lang.CharSequence,int,int)",
        "java.lang.Character.codePointCount(char[],int,int)"
    ],
    "javax.lang.model.element.typeelement.getnestingkind": [
        "javax.lang.model.element.TypeElement.getNestingKind()"
    ],
    "javax.lang.model.util.elementkindvisitor6.visitexecutableasconstructor": [
        "javax.lang.model.util.ElementKindVisitor6.visitExecutableAsConstructor(javax.lang.model.element.ExecutableElement,javax.lang.model.util.ElementKindVisitor6)"
    ],
    "java.util.concurrent.forkjointask.getpool": [
        "java.util.concurrent.ForkJoinTask.getPool()"
    ],
    "java.lang.short.hashcode": [
        "java.lang.Short.hashCode(short)",
        "java.lang.Short.hashCode()"
    ],
    "java.awt.robot.setautodelay": [
        "java.awt.Robot.setAutoDelay(int)"
    ],
    "java.awt.desktop.action.values": [
        "java.awt.Desktop.Action.values()"
    ],
    "java.sql.databasemetadata.storeslowercasequotedidentifiers": [
        "java.sql.DatabaseMetaData.storesLowerCaseQuotedIdentifiers()"
    ],
    "java.awt.image.samplemodel.getsamplesize": [
        "java.awt.image.SampleModel.getSampleSize()",
        "java.awt.image.SampleModel.getSampleSize(int)"
    ],
    "java.util.deque.getfirst": [
        "java.util.Deque.getFirst()"
    ],
    "javax.xml.crypto.dsig.transformexception.getcause": [
        "javax.xml.crypto.dsig.TransformException.getCause()"
    ],
    "java.util.vector.retainall": [
        "java.util.Vector.retainAll(java.util.Collection<?>)"
    ],
    "java.security.spec.rsakeygenparameterspec.getpublicexponent": [
        "java.security.spec.RSAKeyGenParameterSpec.getPublicExponent()"
    ],
    "java.awt.containerorderfocustraversalpolicy.getfirstcomponent": [
        "java.awt.ContainerOrderFocusTraversalPolicy.getFirstComponent(java.awt.Container)"
    ],
    "javax.management.standardmbean.getmbeaninfo": [
        "javax.management.StandardMBean.getMBeanInfo()"
    ],
    "javax.management.relation.relationservicembean.getroles": [
        "javax.management.relation.RelationServiceMBean.getRoles(java.lang.String,java.lang.String[])"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writeint": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeInt(int)"
    ],
    "java.nio.channels.asynchronousfilechannel.write": [
        "java.nio.channels.AsynchronousFileChannel.write(java.nio.ByteBuffer,long)",
        "java.nio.channels.AsynchronousFileChannel.write(java.nio.ByteBuffer,long,A,,? super A>)"
    ],
    "javax.print.cancelableprintjob.cancel": [
        "javax.print.CancelablePrintJob.cancel()"
    ],
    "org.ietf.jgss.messageprop.getminorstatus": [
        "org.ietf.jgss.MessageProp.getMinorStatus()"
    ],
    "javax.swing.plaf.metal.metallookandfeel.gethighlightedtextcolor": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getHighlightedTextColor()"
    ],
    "javax.management.mbeanfeatureinfo.equals": [
        "javax.management.MBeanFeatureInfo.equals(java.lang.Object)"
    ],
    "java.io.pushbackreader.reset": [
        "java.io.PushbackReader.reset()"
    ],
    "java.awt.button.getlisteners": [
        "java.awt.Button.getListeners(java.lang.Class<T>)"
    ],
    "java.util.stream.longstream.collect": [
        "java.util.stream.LongStream.collect(java.util.function.Supplier<R>,java.util.function.ObjLongConsumer<R>,,R>)"
    ],
    "java.rmi.activation.activationinstantiator.newinstance": [
        "java.rmi.activation.ActivationInstantiator.newInstance(java.rmi.activation.ActivationID,java.rmi.activation.ActivationDesc)"
    ],
    "javax.security.auth.kerberos.kerberoskey.getencoded": [
        "javax.security.auth.kerberos.KerberosKey.getEncoded()"
    ],
    "java.io.dataoutputstream.writeint": [
        "java.io.DataOutputStream.writeInt(int)"
    ],
    "javax.rmi.corba.utildelegate.registertarget": [
        "javax.rmi.CORBA.UtilDelegate.registerTarget(javax.rmi.CORBA.Tie,java.rmi.Remote)"
    ],
    "java.nio.file.attribute.aclentry.flags": [
        "java.nio.file.attribute.AclEntry.flags()"
    ],
    "javax.swing.text.html.blockview.layoutminoraxis": [
        "javax.swing.text.html.BlockView.layoutMinorAxis(int,int,int[],int[])"
    ],
    "javax.security.auth.privatecredentialpermission.hashcode": [
        "javax.security.auth.PrivateCredentialPermission.hashCode()"
    ],
    "javax.crypto.interfaces.pbekey.getiterationcount": [
        "javax.crypto.interfaces.PBEKey.getIterationCount()"
    ],
    "javax.swing.jlayeredpane.highestlayer": [
        "javax.swing.JLayeredPane.highestLayer()"
    ],
    "java.lang.class.getsimplename": [
        "java.lang.Class.getSimpleName()"
    ],
    "java.lang.iterable.iterator": [
        "java.lang.Iterable.iterator()"
    ],
    "java.security.keystore.getprovider": [
        "java.security.KeyStore.getProvider()"
    ],
    "java.security.cert.pkixrevocationchecker.option.valueof": [
        "java.security.cert.PKIXRevocationChecker.Option.valueOf(java.lang.String)"
    ],
    "java.math.bigdecimal.signum": [
        "java.math.BigDecimal.signum()"
    ],
    "java.util.stream.basestream.close": [
        "java.util.stream.BaseStream.close()"
    ],
    "javax.swing.table.tablecolumn.setheaderrenderer": [
        "javax.swing.table.TableColumn.setHeaderRenderer(javax.swing.table.TableCellRenderer)"
    ],
    "org.omg.dynamicany._dynunionstub.get_discriminator": [
        "org.omg.DynamicAny._DynUnionStub.get_discriminator()"
    ],
    "java.awt.geom.ellipse2d.double.getx": [
        "java.awt.geom.Ellipse2D.Double.getX()"
    ],
    "javax.management.relation.relationsupport.getroles": [
        "javax.management.relation.RelationSupport.getRoles(java.lang.String[])"
    ],
    "javax.script.scriptengine.get": [
        "javax.script.ScriptEngine.get(java.lang.String)"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.writelock.newcondition": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.newCondition()"
    ],
    "javax.swing.plaf.basic.basicbuttonui.painttext": [
        "javax.swing.plaf.basic.BasicButtonUI.paintText(java.awt.Graphics,javax.swing.AbstractButton,java.awt.Rectangle,java.lang.String)"
    ],
    "javax.rmi.corba.portableremoteobjectdelegate.connect": [
        "javax.rmi.CORBA.PortableRemoteObjectDelegate.connect(java.rmi.Remote,java.rmi.Remote)"
    ],
    "java.util.concurrent.atomic.atomicstampedreference.set": [
        "java.util.concurrent.atomic.AtomicStampedReference.set(java.util.concurrent.atomic.AtomicStampedReference,int)",
        "java.util.concurrent.atomic.AtomicStampedReference.set(V,int)"
    ],
    "java.sql.databasemetadata.getconnection": [
        "java.sql.DatabaseMetaData.getConnection()"
    ],
    "java.util.zip.zipfile.getcomment": [
        "java.util.zip.ZipFile.getComment()"
    ],
    "javax.swing.event.tablemodelevent.getfirstrow": [
        "javax.swing.event.TableModelEvent.getFirstRow()"
    ],
    "java.util.stream.basestream.spliterator": [
        "java.util.stream.BaseStream.spliterator()"
    ],
    "javax.swing.plaf.basic.basictextui.paintsafely": [
        "javax.swing.plaf.basic.BasicTextUI.paintSafely(java.awt.Graphics)"
    ],
    "java.time.offsetdatetime.withdayofyear": [
        "java.time.OffsetDateTime.withDayOfYear(int)"
    ],
    "java.net.url.touri": [
        "java.net.URL.toURI()"
    ],
    "javax.swing.text.utilities.drawtabbedtext": [
        "javax.swing.text.Utilities.drawTabbedText(javax.swing.text.Segment,int,int,java.awt.Graphics,javax.swing.text.TabExpander,int)"
    ],
    "javax.swing.plaf.layerui.installui": [
        "javax.swing.plaf.LayerUI.installUI(javax.swing.JComponent)"
    ],
    "org.omg.dynamicany._dynfixedstub.insert_reference": [
        "org.omg.DynamicAny._DynFixedStub.insert_reference(org.omg.CORBA.Object)"
    ],
    "javax.swing.undo.compoundedit.getpresentationname": [
        "javax.swing.undo.CompoundEdit.getPresentationName()"
    ],
    "java.sql.databasemetadata.supportsansi92intermediatesql": [
        "java.sql.DatabaseMetaData.supportsANSI92IntermediateSQL()"
    ],
    "javax.swing.plaf.synth.syntheditorpaneui.paintbackground": [
        "javax.swing.plaf.synth.SynthEditorPaneUI.paintBackground(java.awt.Graphics)"
    ],
    "java.time.month.minlength": [
        "java.time.Month.minLength()"
    ],
    "javax.xml.transform.dom.domresult.setsystemid": [
        "javax.xml.transform.dom.DOMResult.setSystemId(java.lang.String)"
    ],
    "org.omg.dynamicany.dynunionoperations.set_to_default_member": [
        "org.omg.DynamicAny.DynUnionOperations.set_to_default_member()"
    ],
    "java.util.concurrent.atomic.atomiclongfieldupdater.lazyset": [
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.lazySet(T,long)",
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.lazySet(java.util.concurrent.atomic.AtomicLongFieldUpdater,long)"
    ],
    "java.applet.appletstub.getparameter": [
        "java.applet.AppletStub.getParameter(java.lang.String)"
    ],
    "javax.transaction.xa.xaresource.forget": [
        "javax.transaction.xa.XAResource.forget(javax.transaction.xa.Xid)"
    ],
    "java.util.concurrent.concurrentnavigablemap.tailmap": [
        "java.util.concurrent.ConcurrentNavigableMap.tailMap(K)"
    ],
    "javax.sql.rowset.baserowset.getquerytimeout": [
        "javax.sql.rowset.BaseRowSet.getQueryTimeout()"
    ],
    "java.security.cert.pkixparameters.setdate": [
        "java.security.cert.PKIXParameters.setDate(java.util.Date)"
    ],
    "javax.swing.plaf.nimbus.abstractregionpainter.decoderadialgradient": [
        "javax.swing.plaf.nimbus.AbstractRegionPainter.decodeRadialGradient(float,float,float,float[],java.awt.Color[])"
    ],
    "java.util.logging.level.getresourcebundlename": [
        "java.util.logging.Level.getResourceBundleName()"
    ],
    "javax.swing.plaf.multi.multidesktoppaneui.getuis": [
        "javax.swing.plaf.multi.MultiDesktopPaneUI.getUIs()"
    ],
    "javax.xml.xpath.xpathfactory.setfeature": [
        "javax.xml.xpath.XPathFactory.setFeature(java.lang.String,boolean)"
    ],
    "java.nio.file.filesystem.getrootdirectories": [
        "java.nio.file.FileSystem.getRootDirectories()"
    ],
    "java.lang.math.nextafter": [
        "java.lang.Math.nextAfter(double,double)",
        "java.lang.Math.nextAfter(float,double)"
    ],
    "java.text.decimalformat.getpositiveprefix": [
        "java.text.DecimalFormat.getPositivePrefix()"
    ],
    "java.util.spliterators.abstractlongspliterator.characteristics": [
        "java.util.Spliterators.AbstractLongSpliterator.characteristics()"
    ],
    "javax.swing.plaf.multi.multitabbedpaneui.paint": [
        "javax.swing.plaf.multi.MultiTabbedPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.lang.long.parseunsignedlong": [
        "java.lang.Long.parseUnsignedLong(java.lang.String)",
        "java.lang.Long.parseUnsignedLong(java.lang.String,int)"
    ],
    "java.awt.adjustable.setvisibleamount": [
        "java.awt.Adjustable.setVisibleAmount(int)"
    ],
    "javax.swing.text.asyncboxview.setrightinset": [
        "javax.swing.text.AsyncBoxView.setRightInset(float)"
    ],
    "javax.swing.text.maskformatter.setplaceholder": [
        "javax.swing.text.MaskFormatter.setPlaceholder(java.lang.String)"
    ],
    "javax.sql.rowset.baserowset.settimestamp": [
        "javax.sql.rowset.BaseRowSet.setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)",
        "javax.sql.rowset.BaseRowSet.setTimestamp(java.lang.String,java.sql.Timestamp)",
        "javax.sql.rowset.BaseRowSet.setTimestamp(int,java.sql.Timestamp,java.util.Calendar)",
        "javax.sql.rowset.BaseRowSet.setTimestamp(int,java.sql.Timestamp)"
    ],
    "javax.xml.ws.spi.provider.createw3cendpointreference": [
        "javax.xml.ws.spi.Provider.createW3CEndpointReference(java.lang.String,javax.xml.namespace.QName,javax.xml.namespace.QName,javax.xml.namespace.QName,java.util.List<org.w3c.dom.Element>,java.lang.String,java.util.List<org.w3c.dom.Element>,java.util.List<org.w3c.dom.Element>,,java.lang.String>)",
        "javax.xml.ws.spi.Provider.createW3CEndpointReference(java.lang.String,javax.xml.namespace.QName,javax.xml.namespace.QName,java.util.List<org.w3c.dom.Element>,java.lang.String,java.util.List<org.w3c.dom.Element>)"
    ],
    "java.nio.channels.selector.selectnow": [
        "java.nio.channels.Selector.selectNow()"
    ],
    "java.time.chrono.chronolocaldate.until": [
        "java.time.chrono.ChronoLocalDate.until(java.time.chrono.ChronoLocalDate)",
        "java.time.chrono.ChronoLocalDate.until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)"
    ],
    "javax.sql.rowset.serial.serialjavaobject.hashcode": [
        "javax.sql.rowset.serial.SerialJavaObject.hashCode()"
    ],
    "javax.security.sasl.saslclientfactory.getmechanismnames": [
        "javax.security.sasl.SaslClientFactory.getMechanismNames(,?>)"
    ],
    "java.util.stream.longstream.builder": [
        "java.util.stream.LongStream.builder()"
    ],
    "javax.net.ssl.sslserversocket.setenabledprotocols": [
        "javax.net.ssl.SSLServerSocket.setEnabledProtocols(java.lang.String)",
        "javax.net.ssl.SSLServerSocket.setEnabledProtocols(java.lang.String[])"
    ],
    "javax.swing.plaf.basic.basicspinnerui.installkeyboardactions": [
        "javax.swing.plaf.basic.BasicSpinnerUI.installKeyboardActions()"
    ],
    "java.lang.classvalue.remove": [
        "java.lang.ClassValue.remove(java.lang.Class<?>)"
    ],
    "java.util.stream.intstream.sum": [
        "java.util.stream.IntStream.sum()"
    ],
    "java.sql.jdbctype.getvendor": [
        "java.sql.JDBCType.getVendor()"
    ],
    "org.omg.dynamicany._dynanystub.current_component": [
        "org.omg.DynamicAny._DynAnyStub.current_component()"
    ],
    "org.xml.sax.helpers.xmlreaderadapter.setdocumenthandler": [
        "org.xml.sax.helpers.XMLReaderAdapter.setDocumentHandler(org.xml.sax.DocumentHandler)"
    ],
    "org.omg.corba.portable.objectimpl._get_domain_managers": [
        "org.omg.CORBA.portable.ObjectImpl._get_domain_managers()"
    ],
    "java.io.bytearrayinputstream.read": [
        "java.io.ByteArrayInputStream.read()"
    ],
    "javax.print.attribute.standard.sides.getname": [
        "javax.print.attribute.standard.Sides.getName()"
    ],
    "java.sql.preparedstatement.setarray": [
        "java.sql.PreparedStatement.setArray(int,java.sql.Array)"
    ],
    "javax.swing.plaf.basic.basictreeui.createnodedimensions": [
        "javax.swing.plaf.basic.BasicTreeUI.createNodeDimensions()"
    ],
    "java.awt.textcomponent.setbackground": [
        "java.awt.TextComponent.setBackground(java.awt.Color)"
    ],
    "java.security.algorithmparameters.tostring": [
        "java.security.AlgorithmParameters.toString()"
    ],
    "javax.management.openmbean.openmbeanattributeinfosupport.getlegalvalues": [
        "javax.management.openmbean.OpenMBeanAttributeInfoSupport.getLegalValues()"
    ],
    "javax.sql.rowset.joinrowset.setjointype": [
        "javax.sql.rowset.JoinRowSet.setJoinType(int)"
    ],
    "javax.sound.sampled.spi.formatconversionprovider.getsourceencodings": [
        "javax.sound.sampled.spi.FormatConversionProvider.getSourceEncodings()"
    ],
    "java.util.zip.zipinputstream.close": [
        "java.util.zip.ZipInputStream.close()"
    ],
    "java.math.biginteger.gcd": [
        "java.math.BigInteger.gcd(java.math.BigInteger)"
    ],
    "javax.imageio.metadata.iiometadatanode.removechild": [
        "javax.imageio.metadata.IIOMetadataNode.removeChild(org.w3c.dom.Node)"
    ],
    "javax.swing.text.defaultstyleddocument.elementspec.getlength": [
        "javax.swing.text.DefaultStyledDocument.ElementSpec.getLength()"
    ],
    "java.util.locale.getdisplayvariant": [
        "java.util.Locale.getDisplayVariant(java.util.Locale)",
        "java.util.Locale.getDisplayVariant()"
    ],
    "org.omg.dynamicany._dynvaluestub.copy": [
        "org.omg.DynamicAny._DynValueStub.copy()"
    ],
    "javax.management.mbeanoperationinfo.getsignature": [
        "javax.management.MBeanOperationInfo.getSignature()"
    ],
    "javax.xml.stream.xmlstreamreader.getnamespacecount": [
        "javax.xml.stream.XMLStreamReader.getNamespaceCount()"
    ],
    "java.time.temporal.temporaladjusters.lastdayofyear": [
        "java.time.temporal.TemporalAdjusters.lastDayOfYear()"
    ],
    "java.nio.channels.selectablechannel.provider": [
        "java.nio.channels.SelectableChannel.provider()"
    ],
    "javax.accessibility.accessibleeditabletext.setattributes": [
        "javax.accessibility.AccessibleEditableText.setAttributes(int,int,javax.swing.text.AttributeSet)"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writeboolean": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeBoolean(boolean)"
    ],
    "javax.swing.jcheckbox.getuiclassid": [
        "javax.swing.JCheckBox.getUIClassID()"
    ],
    "java.nio.file.attribute.userdefinedfileattributeview.write": [
        "java.nio.file.attribute.UserDefinedFileAttributeView.write(java.lang.String,java.nio.ByteBuffer)"
    ],
    "javax.swing.undo.undomanager.undoto": [
        "javax.swing.undo.UndoManager.undoTo(javax.swing.undo.UndoableEdit)"
    ],
    "javax.swing.text.html.imageview.getattributes": [
        "javax.swing.text.html.ImageView.getAttributes()"
    ],
    "javax.naming.directory.basicattributes.equals": [
        "javax.naming.directory.BasicAttributes.equals(java.lang.Object)"
    ],
    "java.awt.color.getrgbcolorcomponents": [
        "java.awt.Color.getRGBColorComponents(float[])"
    ],
    "javax.swing.plaf.metal.oceantheme.getname": [
        "javax.swing.plaf.metal.OceanTheme.getName()"
    ],
    "javax.swing.plaf.multi.multitableui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiTableUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "java.security.signedobject.getobject": [
        "java.security.SignedObject.getObject()"
    ],
    "javax.management.notificationfiltersupport.getenabledtypes": [
        "javax.management.NotificationFilterSupport.getEnabledTypes()"
    ],
    "javax.management.relation.relationservicembean.getallrelationids": [
        "javax.management.relation.RelationServiceMBean.getAllRelationIds()"
    ],
    "java.util.concurrent.forkjoinpool.pollsubmission": [
        "java.util.concurrent.ForkJoinPool.pollSubmission()"
    ],
    "javax.swing.jdialog.setjmenubar": [
        "javax.swing.JDialog.setJMenuBar(javax.swing.JMenuBar)"
    ],
    "java.awt.button.processactionevent": [
        "java.awt.Button.processActionEvent(java.awt.event.ActionEvent)"
    ],
    "java.text.dateformatsymbols.geteras": [
        "java.text.DateFormatSymbols.getEras()"
    ],
    "javax.sql.rowset.baserowset.setdatasourcename": [
        "javax.sql.rowset.BaseRowSet.setDataSourceName(java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthoptionpaneui.paint": [
        "javax.swing.plaf.synth.SynthOptionPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)",
        "javax.swing.plaf.synth.SynthOptionPaneUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)"
    ],
    "java.text.dateformat.field.ofcalendarfield": [
        "java.text.DateFormat.Field.ofCalendarField(int)"
    ],
    "java.util.calendar.builder.setinstant": [
        "java.util.Calendar.Builder.setInstant(long)",
        "java.util.Calendar.Builder.setInstant(java.util.Date)"
    ],
    "java.nio.file.watchevent.kind": [
        "java.nio.file.WatchEvent.kind()"
    ],
    "java.security.keystorespi.enginesetcertificateentry": [
        "java.security.KeyStoreSpi.engineSetCertificateEntry(java.lang.String,java.security.cert.Certificate)"
    ],
    "java.awt.font.numericshaper.getrangeset": [
        "java.awt.font.NumericShaper.getRangeSet()"
    ],
    "java.net.socketpermission.getactions": [
        "java.net.SocketPermission.getActions()"
    ],
    "java.net.urlconnection.getheaderfields": [
        "java.net.URLConnection.getHeaderFields()"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.uninstallkeyboardactions": [
        "javax.swing.plaf.basic.BasicComboBoxUI.uninstallKeyboardActions()"
    ],
    "java.lang.double.compareto": [
        "java.lang.Double.compareTo(java.lang.Double)"
    ],
    "javax.management.modelmbean.modelmbeaninfo.getdescriptor": [
        "javax.management.modelmbean.ModelMBeanInfo.getDescriptor(java.lang.String,java.lang.String)"
    ],
    "javax.swing.tree.variableheightlayoutcache.getpreferredwidth": [
        "javax.swing.tree.VariableHeightLayoutCache.getPreferredWidth(java.awt.Rectangle)"
    ],
    "java.awt.mediatracker.removeimage": [
        "java.awt.MediaTracker.removeImage(java.awt.Image,int,int,int)",
        "java.awt.MediaTracker.removeImage(java.awt.Image)",
        "java.awt.MediaTracker.removeImage(java.awt.Image,int)"
    ],
    "javax.rmi.ssl.sslrmiclientsocketfactory.createsocket": [
        "javax.rmi.ssl.SslRMIClientSocketFactory.createSocket(java.lang.String,int)"
    ],
    "java.util.concurrent.concurrentskiplistmap.lastentry": [
        "java.util.concurrent.ConcurrentSkipListMap.lastEntry()"
    ],
    "javax.swing.jtabbedpane.gettabcount": [
        "javax.swing.JTabbedPane.getTabCount()"
    ],
    "javax.swing.buttongroup.getelements": [
        "javax.swing.ButtonGroup.getElements()"
    ],
    "java.lang.stringbuilder.substring": [
        "java.lang.StringBuilder.substring(int)",
        "java.lang.StringBuilder.substring(int,int)"
    ],
    "java.security.spec.dsaprivatekeyspec.getx": [
        "java.security.spec.DSAPrivateKeySpec.getX()"
    ],
    "java.lang.management.memorypoolmxbean.getcollectionusagethreshold": [
        "java.lang.management.MemoryPoolMXBean.getCollectionUsageThreshold()"
    ],
    "java.util.jar.manifest.clear": [
        "java.util.jar.Manifest.clear()"
    ],
    "java.awt.menucomponent.getparent": [
        "java.awt.MenuComponent.getParent()"
    ],
    "java.awt.toolkit.getawteventlisteners": [
        "java.awt.Toolkit.getAWTEventListeners(long)",
        "java.awt.Toolkit.getAWTEventListeners()"
    ],
    "java.security.permissioncollection.add": [
        "java.security.PermissionCollection.add(java.security.Permission)"
    ],
    "java.awt.image.directcolormodel.getbluemask": [
        "java.awt.image.DirectColorModel.getBlueMask()"
    ],
    "javax.print.attribute.standard.numberupsupported.getcategory": [
        "javax.print.attribute.standard.NumberUpSupported.getCategory()"
    ],
    "java.lang.securitymanager.checkpackageaccess": [
        "java.lang.SecurityManager.checkPackageAccess(java.lang.String)"
    ],
    "javax.management.monitor.stringmonitormbean.getnotifymatch": [
        "javax.management.monitor.StringMonitorMBean.getNotifyMatch()"
    ],
    "java.util.stream.stream.count": [
        "java.util.stream.Stream.count()"
    ],
    "java.awt.defaultkeyboardfocusmanager.focuspreviouscomponent": [
        "java.awt.DefaultKeyboardFocusManager.focusPreviousComponent(java.awt.Component)"
    ],
    "java.awt.font.getsize2d": [
        "java.awt.Font.getSize2D()"
    ],
    "java.awt.window.paint": [
        "java.awt.Window.paint(java.awt.Graphics)"
    ],
    "java.lang.byte.floatvalue": [
        "java.lang.Byte.floatValue()"
    ],
    "java.nio.file.watchservice.poll": [
        "java.nio.file.WatchService.poll(long,java.util.concurrent.TimeUnit)",
        "java.nio.file.WatchService.poll()"
    ],
    "javax.imageio.spi.imagereaderwriterspi.getpluginclassname": [
        "javax.imageio.spi.ImageReaderWriterSpi.getPluginClassName()"
    ],
    "java.net.socket.setsendbuffersize": [
        "java.net.Socket.setSendBufferSize(int)"
    ],
    "javax.swing.plaf.synth.synthtoolbarui.paint": [
        "javax.swing.plaf.synth.SynthToolBarUI.paint(java.awt.Graphics,javax.swing.JComponent)",
        "javax.swing.plaf.synth.SynthToolBarUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)"
    ],
    "javax.swing.jseparator.paramstring": [
        "javax.swing.JSeparator.paramString()"
    ],
    "java.awt.keyboardfocusmanager.focusnextcomponent": [
        "java.awt.KeyboardFocusManager.focusNextComponent()",
        "java.awt.KeyboardFocusManager.focusNextComponent(java.awt.Component)"
    ],
    "java.awt.image.bufferedimageop.filter": [
        "java.awt.image.BufferedImageOp.filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)"
    ],
    "javax.print.attribute.standard.printerinfo.getname": [
        "javax.print.attribute.standard.PrinterInfo.getName()"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.startdragging": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.startDragging()"
    ],
    "org.omg.corba.portable.delegate.set_policy_override": [
        "org.omg.CORBA.portable.Delegate.set_policy_override(org.omg.CORBA.Object,org.omg.CORBA.Policy[],org.omg.CORBA.SetOverrideType)"
    ],
    "java.util.queue.element": [
        "java.util.Queue.element()"
    ],
    "javax.xml.soap.name.geturi": [
        "javax.xml.soap.Name.getURI()"
    ],
    "java.security.messagedigest.digest": [
        "java.security.MessageDigest.digest()",
        "java.security.MessageDigest.digest(byte[])",
        "java.security.MessageDigest.digest(byte[],int,int)"
    ],
    "org.omg.corba.request.add_in_arg": [
        "org.omg.CORBA.Request.add_in_arg()"
    ],
    "javax.naming.context.composename": [
        "javax.naming.Context.composeName(javax.naming.Name,javax.naming.Name)",
        "javax.naming.Context.composeName(java.lang.String,java.lang.String)"
    ],
    "java.sql.drivermanager.deregisterdriver": [
        "java.sql.DriverManager.deregisterDriver(java.sql.Driver)"
    ],
    "java.awt.geom.quadcurve2d.float.setcurve": [
        "java.awt.geom.QuadCurve2D.Float.setCurve(float,float,float,float,float,float)",
        "java.awt.geom.QuadCurve2D.Float.setCurve(double,double,double,double,double,double)"
    ],
    "javax.net.ssl.handshakecompletedevent.getpeercertificatechain": [
        "javax.net.ssl.HandshakeCompletedEvent.getPeerCertificateChain()"
    ],
    "javax.lang.model.util.simpleannotationvaluevisitor6.visitboolean": [
        "javax.lang.model.util.SimpleAnnotationValueVisitor6.visitBoolean(boolean,javax.lang.model.util.SimpleAnnotationValueVisitor6)"
    ],
    "java.nio.file.files.delete": [
        "java.nio.file.Files.delete(java.nio.file.Path)"
    ],
    "java.awt.dnd.droptargetcontext.acceptdrag": [
        "java.awt.dnd.DropTargetContext.acceptDrag(int)"
    ],
    "java.awt.choice.select": [
        "java.awt.Choice.select(int)",
        "java.awt.Choice.select(java.lang.String)"
    ],
    "javax.swing.plaf.basic.basictableheaderui.uninstallkeyboardactions": [
        "javax.swing.plaf.basic.BasicTableHeaderUI.uninstallKeyboardActions()"
    ],
    "java.beans.featuredescriptor.getdisplayname": [
        "java.beans.FeatureDescriptor.getDisplayName()"
    ],
    "javax.lang.model.type.typemirror.equals": [
        "javax.lang.model.type.TypeMirror.equals(java.lang.Object)"
    ],
    "org.omg.corba.object._get_policy": [
        "org.omg.CORBA.Object._get_policy(int)"
    ],
    "java.rmi.server.remoteref.remotehashcode": [
        "java.rmi.server.RemoteRef.remoteHashCode()"
    ],
    "java.io.pipedreader.close": [
        "java.io.PipedReader.close()"
    ],
    "java.awt.borderlayout.sethgap": [
        "java.awt.BorderLayout.setHgap(int)"
    ],
    "javax.accessibility.accessibletable.setaccessiblecolumnheader": [
        "javax.accessibility.AccessibleTable.setAccessibleColumnHeader(javax.accessibility.AccessibleTable)"
    ],
    "org.omg.dynamicany._dynunionstub.get_wchar": [
        "org.omg.DynamicAny._DynUnionStub.get_wchar()"
    ],
    "javax.print.streamprintservice.getoutputformat": [
        "javax.print.StreamPrintService.getOutputFormat()"
    ],
    "javax.sql.rowset.baserowset.gettypemap": [
        "javax.sql.rowset.BaseRowSet.getTypeMap()"
    ],
    "javax.print.attribute.standard.datetimeatcreation.getname": [
        "javax.print.attribute.standard.DateTimeAtCreation.getName()"
    ],
    "javax.swing.plaf.multi.multitextui.getnextvisualpositionfrom": [
        "javax.swing.plaf.multi.MultiTextUI.getNextVisualPositionFrom(javax.swing.text.JTextComponent,int,javax.swing.text.Position.Bias,int,javax.swing.text.Position.Bias[])"
    ],
    "javax.xml.stream.events.xmlevent.getschematype": [
        "javax.xml.stream.events.XMLEvent.getSchemaType()"
    ],
    "java.util.stream.collectors.counting": [
        "java.util.stream.Collectors.counting()"
    ],
    "java.util.zip.zipinputstream.getnextentry": [
        "java.util.zip.ZipInputStream.getNextEntry()"
    ],
    "javax.xml.soap.attachmentpart.setcontentid": [
        "javax.xml.soap.AttachmentPart.setContentId(java.lang.String)"
    ],
    "java.util.prefs.preferences.putbytearray": [
        "java.util.prefs.Preferences.putByteArray(java.lang.String,byte[])"
    ],
    "java.io.pushbackreader.marksupported": [
        "java.io.PushbackReader.markSupported()"
    ],
    "java.text.collator.equals": [
        "java.text.Collator.equals(java.lang.Object)",
        "java.text.Collator.equals(java.lang.String,java.lang.String)"
    ],
    "java.util.base64.encoder.wrap": [
        "java.util.Base64.Encoder.wrap(java.io.OutputStream)"
    ],
    "javax.naming.ldap.ldapcontext.extendedoperation": [
        "javax.naming.ldap.LdapContext.extendedOperation(javax.naming.ldap.ExtendedRequest)"
    ],
    "java.util.spliterators.iterator": [
        "java.util.Spliterators.iterator(java.util.Spliterator.OfLong)",
        "java.util.Spliterators.iterator(java.util.Spliterator<? extends T>)",
        "java.util.Spliterators.iterator(java.util.Spliterator.OfDouble)",
        "java.util.Spliterators.iterator(java.util.Spliterator.OfInt)"
    ],
    "java.util.concurrent.atomic.atomicreferencearray.weakcompareandset": [
        "java.util.concurrent.atomic.AtomicReferenceArray.weakCompareAndSet(int,java.util.concurrent.atomic.AtomicReferenceArray,java.util.concurrent.atomic.AtomicReferenceArray)",
        "java.util.concurrent.atomic.AtomicReferenceArray.weakCompareAndSet(int,E,E)"
    ],
    "java.lang.reflect.field.getfloat": [
        "java.lang.reflect.Field.getFloat(java.lang.Object)"
    ],
    "javax.imageio.iioimage.getraster": [
        "javax.imageio.IIOImage.getRaster()"
    ],
    "java.awt.image.databufferint.setelem": [
        "java.awt.image.DataBufferInt.setElem(int,int,int)"
    ],
    "java.awt.image.renderable.renderableimage.getpropertynames": [
        "java.awt.image.renderable.RenderableImage.getPropertyNames()"
    ],
    "java.awt.component.getbounds": [
        "java.awt.Component.getBounds()"
    ],
    "javax.crypto.secretkeyfactory.getalgorithm": [
        "javax.crypto.SecretKeyFactory.getAlgorithm()"
    ],
    "javax.swing.text.asyncboxview.modeltoview": [
        "javax.swing.text.AsyncBoxView.modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)"
    ],
    "javax.naming.binaryrefaddr.getcontent": [
        "javax.naming.BinaryRefAddr.getContent()"
    ],
    "javax.swing.plaf.basic.basictreeui.getpreferredsize": [
        "javax.swing.plaf.basic.BasicTreeUI.getPreferredSize(javax.swing.JComponent,boolean)",
        "javax.swing.plaf.basic.BasicTreeUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.multi.multitableheaderui.paint": [
        "javax.swing.plaf.multi.MultiTableHeaderUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.plaf.multi.multisliderui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiSliderUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "javax.swing.text.gapcontent.getstring": [
        "javax.swing.text.GapContent.getString(int,int)"
    ],
    "javax.lang.model.annotatedconstruct.getannotationmirrors": [
        "javax.lang.model.AnnotatedConstruct.getAnnotationMirrors()"
    ],
    "java.awt.toolkit.setdynamiclayout": [
        "java.awt.Toolkit.setDynamicLayout(boolean)"
    ],
    "org.omg.corba.orb.init": [
        "org.omg.CORBA.ORB.init()",
        "org.omg.CORBA.ORB.init(java.applet.Applet,java.util.Properties)",
        "org.omg.CORBA.ORB.init(java.lang.String[],java.util.Properties)"
    ],
    "org.xml.sax.inputsource.setsystemid": [
        "org.xml.sax.InputSource.setSystemId(java.lang.String)"
    ],
    "java.nio.channels.spi.abstractselectablechannel.implconfigureblocking": [
        "java.nio.channels.spi.AbstractSelectableChannel.implConfigureBlocking(boolean)"
    ],
    "javax.swing.plaf.synth.synthstyle.getstring": [
        "javax.swing.plaf.synth.SynthStyle.getString(javax.swing.plaf.synth.SynthContext,java.lang.Object,java.lang.String)"
    ],
    "javax.swing.text.glyphview.viewtomodel": [
        "javax.swing.text.GlyphView.viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias[])"
    ],
    "javax.imageio.spi.serviceregistry.lookupproviders": [
        "javax.imageio.spi.ServiceRegistry.lookupProviders(java.lang.Class<T>)"
    ],
    "javax.swing.event.caretevent.getdot": [
        "javax.swing.event.CaretEvent.getDot()"
    ],
    "java.util.concurrent.concurrentskiplistset.size": [
        "java.util.concurrent.ConcurrentSkipListSet.size()"
    ],
    "java.awt.image.renderable.parameterblock.getshortparameter": [
        "java.awt.image.renderable.ParameterBlock.getShortParameter(int)"
    ],
    "java.awt.graphics.drawpolyline": [
        "java.awt.Graphics.drawPolyline(int[],int[],int)"
    ],
    "java.awt.geom.path2d.intersects": [
        "java.awt.geom.Path2D.intersects(java.awt.geom.PathIterator,java.awt.geom.Rectangle2D)",
        "java.awt.geom.Path2D.intersects(double,double,double,double)",
        "java.awt.geom.Path2D.intersects(java.awt.geom.Rectangle2D)",
        "java.awt.geom.Path2D.intersects(java.awt.geom.PathIterator,double,double,double,double)"
    ],
    "java.awt.window.processwindowstateevent": [
        "java.awt.Window.processWindowStateEvent(java.awt.event.WindowEvent)"
    ],
    "javax.swing.text.view.createfragment": [
        "javax.swing.text.View.createFragment(int,int)"
    ],
    "javax.swing.sortingfocustraversalpolicy.setcomparator": [
        "javax.swing.SortingFocusTraversalPolicy.setComparator(java.util.Comparator<? super java.awt.Component>)"
    ],
    "java.lang.management.memorypoolmxbean.getpeakusage": [
        "java.lang.management.MemoryPoolMXBean.getPeakUsage()"
    ],
    "javax.net.ssl.snihostname.equals": [
        "javax.net.ssl.SNIHostName.equals(java.lang.Object)"
    ],
    "javax.management.objectinstance.getobjectname": [
        "javax.management.ObjectInstance.getObjectName()"
    ],
    "java.util.concurrent.arrayblockingqueue.remove": [
        "java.util.concurrent.ArrayBlockingQueue.remove(java.lang.Object)"
    ],
    "java.util.concurrent.blockingdeque.pollfirst": [
        "java.util.concurrent.BlockingDeque.pollFirst(long,java.util.concurrent.TimeUnit)"
    ],
    "java.util.jar.jarinputstream.getnextentry": [
        "java.util.jar.JarInputStream.getNextEntry()"
    ],
    "java.lang.reflect.wildcardtype.getupperbounds": [
        "java.lang.reflect.WildcardType.getUpperBounds()"
    ],
    "javax.sound.sampled.sourcedataline.write": [
        "javax.sound.sampled.SourceDataLine.write(byte[],int,int)"
    ],
    "javax.swing.plaf.basic.basicinternalframeui.maximizeframe": [
        "javax.swing.plaf.basic.BasicInternalFrameUI.maximizeFrame(javax.swing.JInternalFrame)"
    ],
    "java.lang.management.memorynotificationinfo.getusage": [
        "java.lang.management.MemoryNotificationInfo.getUsage()"
    ],
    "java.time.chrono.minguodate.getera": [
        "java.time.chrono.MinguoDate.getEra()"
    ],
    "java.awt.image.imagefilter.setcolormodel": [
        "java.awt.image.ImageFilter.setColorModel(java.awt.image.ColorModel)"
    ],
    "org.xml.sax.helpers.attributesimpl.addattribute": [
        "org.xml.sax.helpers.AttributesImpl.addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
    ],
    "java.util.zip.zipentry.setcomment": [
        "java.util.zip.ZipEntry.setComment(java.lang.String)"
    ],
    "java.util.stream.longstream.boxed": [
        "java.util.stream.LongStream.boxed()"
    ],
    "javax.swing.plaf.multi.multitextui.installui": [
        "javax.swing.plaf.multi.MultiTextUI.installUI(javax.swing.JComponent)"
    ],
    "javax.swing.jmenu.createactioncomponent": [
        "javax.swing.JMenu.createActionComponent(javax.swing.Action)"
    ],
    "javax.imageio.imagewriteparam.gettilingmode": [
        "javax.imageio.ImageWriteParam.getTilingMode()"
    ],
    "javax.swing.text.defaultformatterfactory.setdisplayformatter": [
        "javax.swing.text.DefaultFormatterFactory.setDisplayFormatter(javax.swing.JFormattedTextField.AbstractFormatter)"
    ],
    "java.time.format.decimalstyle.withdecimalseparator": [
        "java.time.format.DecimalStyle.withDecimalSeparator(char)"
    ],
    "org.omg.dynamicany._dynanystub.insert_ushort": [
        "org.omg.DynamicAny._DynAnyStub.insert_ushort(short)"
    ],
    "java.sql.connection.getwarnings": [
        "java.sql.Connection.getWarnings()"
    ],
    "java.util.calendar.add": [
        "java.util.Calendar.add(int,int)"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.toxmlformat": [
        "javax.xml.datatype.XMLGregorianCalendar.toXMLFormat()"
    ],
    "javax.swing.tree.defaultmutabletreenode.getuserobjectpath": [
        "javax.swing.tree.DefaultMutableTreeNode.getUserObjectPath()"
    ],
    "javax.swing.text.styleconstants.getbackground": [
        "javax.swing.text.StyleConstants.getBackground(javax.swing.text.AttributeSet)"
    ],
    "java.awt.geom.line2d.double.gety1": [
        "java.awt.geom.Line2D.Double.getY1()"
    ],
    "java.awt.awteventmulticaster.add": [
        "java.awt.AWTEventMulticaster.add(java.awt.event.WindowListener,java.awt.event.WindowListener)",
        "java.awt.AWTEventMulticaster.add(java.awt.event.HierarchyBoundsListener,java.awt.event.HierarchyBoundsListener)",
        "java.awt.AWTEventMulticaster.add(java.awt.event.ItemListener,java.awt.event.ItemListener)",
        "java.awt.AWTEventMulticaster.add(java.awt.event.AdjustmentListener,java.awt.event.AdjustmentListener)",
        "java.awt.AWTEventMulticaster.add(java.awt.event.ActionListener,java.awt.event.ActionListener)",
        "java.awt.AWTEventMulticaster.add(java.awt.event.InputMethodListener,java.awt.event.InputMethodListener)",
        "java.awt.AWTEventMulticaster.add(java.awt.event.WindowFocusListener,java.awt.event.WindowFocusListener)",
        "java.awt.AWTEventMulticaster.add(java.awt.event.ComponentListener,java.awt.event.ComponentListener)",
        "java.awt.AWTEventMulticaster.add(java.awt.event.MouseWheelListener,java.awt.event.MouseWheelListener)",
        "java.awt.AWTEventMulticaster.add(java.awt.event.ContainerListener,java.awt.event.ContainerListener)",
        "java.awt.AWTEventMulticaster.add(java.awt.event.HierarchyListener,java.awt.event.HierarchyListener)",
        "java.awt.AWTEventMulticaster.add(java.awt.event.FocusListener,java.awt.event.FocusListener)"
    ],
    "javax.swing.plaf.basic.basicscrollbarui.gettrackbounds": [
        "javax.swing.plaf.basic.BasicScrollBarUI.getTrackBounds()"
    ],
    "java.io.bufferedreader.skip": [
        "java.io.BufferedReader.skip(long)"
    ],
    "javax.swing.tree.defaultmutabletreenode.postorderenumeration": [
        "javax.swing.tree.DefaultMutableTreeNode.postorderEnumeration()"
    ],
    "java.awt.image.bandedsamplemodel.getpixels": [
        "java.awt.image.BandedSampleModel.getPixels(int,int,int,int,int[],java.awt.image.DataBuffer)"
    ],
    "java.beans.beancontext.beancontextsupport.bcschildren": [
        "java.beans.beancontext.BeanContextSupport.bcsChildren()"
    ],
    "java.math.bigdecimal.abs": [
        "java.math.BigDecimal.abs(java.math.MathContext)",
        "java.math.BigDecimal.abs()"
    ],
    "org.omg.corba.portable.objectimpl._ids": [
        "org.omg.CORBA.portable.ObjectImpl._ids()"
    ],
    "java.awt.layoutmanager.minimumlayoutsize": [
        "java.awt.LayoutManager.minimumLayoutSize(java.awt.Container)"
    ],
    "javax.xml.soap.soapelement.addchildelement": [
        "javax.xml.soap.SOAPElement.addChildElement(javax.xml.soap.SOAPElement)",
        "javax.xml.soap.SOAPElement.addChildElement(java.lang.String,java.lang.String)",
        "javax.xml.soap.SOAPElement.addChildElement(java.lang.String,java.lang.String,java.lang.String)",
        "javax.xml.soap.SOAPElement.addChildElement(javax.xml.namespace.QName)",
        "javax.xml.soap.SOAPElement.addChildElement(java.lang.String)",
        "javax.xml.soap.SOAPElement.addChildElement(javax.xml.soap.Name)"
    ],
    "javax.tools.diagnostic.getsource": [
        "javax.tools.Diagnostic.getSource()"
    ],
    "java.util.prefs.abstractpreferences.getlong": [
        "java.util.prefs.AbstractPreferences.getLong(java.lang.String,long)"
    ],
    "javax.swing.text.abstractdocument.replace": [
        "javax.swing.text.AbstractDocument.replace(int,int,java.lang.String,javax.swing.text.AttributeSet)"
    ],
    "java.util.treemap.higherentry": [
        "java.util.TreeMap.higherEntry(K)"
    ],
    "java.awt.pageattributes.getprintquality": [
        "java.awt.PageAttributes.getPrintQuality()"
    ],
    "org.xml.sax.contenthandler.startelement": [
        "org.xml.sax.ContentHandler.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
    ],
    "org.omg.cosnaming.namingcontextoperations.new_context": [
        "org.omg.CosNaming.NamingContextOperations.new_context()"
    ],
    "java.time.chrono.isoera.values": [
        "java.time.chrono.IsoEra.values()"
    ],
    "javax.print.attribute.standard.joboriginatingusername.getname": [
        "javax.print.attribute.standard.JobOriginatingUserName.getName()"
    ],
    "javax.imageio.iioimage.getrenderedimage": [
        "javax.imageio.IIOImage.getRenderedImage()"
    ],
    "org.omg.dynamicany._dynstructstub.insert_octet": [
        "org.omg.DynamicAny._DynStructStub.insert_octet(byte)"
    ],
    "javax.swing.plaf.multi.multioptionpaneui.uninstallui": [
        "javax.swing.plaf.multi.MultiOptionPaneUI.uninstallUI(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.basic.basictreeui.setpreferredminsize": [
        "javax.swing.plaf.basic.BasicTreeUI.setPreferredMinSize(java.awt.Dimension)"
    ],
    "org.w3c.dom.ls.lsparser.parse": [
        "org.w3c.dom.ls.LSParser.parse(org.w3c.dom.ls.LSInput)"
    ],
    "java.security.provider.getversion": [
        "java.security.Provider.getVersion()"
    ],
    "javax.swing.filechooser.filesystemview.getfiles": [
        "javax.swing.filechooser.FileSystemView.getFiles(java.io.File,boolean)"
    ],
    "java.awt.pageattributes.setmediatodefault": [
        "java.awt.PageAttributes.setMediaToDefault()"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.createdefaultdivider": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.createDefaultDivider()"
    ],
    "javax.security.auth.x500.x500principal.tostring": [
        "javax.security.auth.x500.X500Principal.toString()"
    ],
    "javax.swing.table.tablemodel.setvalueat": [
        "javax.swing.table.TableModel.setValueAt(java.lang.Object,int,int)"
    ],
    "org.xml.sax.contenthandler.characters": [
        "org.xml.sax.ContentHandler.characters(char[],int,int)"
    ],
    "java.security.spec.ellipticcurve.hashcode": [
        "java.security.spec.EllipticCurve.hashCode()"
    ],
    "java.time.zone.zonerules.gettransitions": [
        "java.time.zone.ZoneRules.getTransitions()"
    ],
    "javax.net.ssl.sslcontext.getclientsessioncontext": [
        "javax.net.ssl.SSLContext.getClientSessionContext()"
    ],
    "javax.swing.table.jtableheader.setreorderingallowed": [
        "javax.swing.table.JTableHeader.setReorderingAllowed(boolean)"
    ],
    "java.time.chrono.thaibuddhistera.valueof": [
        "java.time.chrono.ThaiBuddhistEra.valueOf(java.lang.String)"
    ],
    "javax.sound.sampled.audioformat.getsamplesizeinbits": [
        "javax.sound.sampled.AudioFormat.getSampleSizeInBits()"
    ],
    "java.nio.channels.selectionkey.cancel": [
        "java.nio.channels.SelectionKey.cancel()"
    ],
    "javax.swing.plaf.synth.synthtableheaderui.update": [
        "javax.swing.plaf.synth.SynthTableHeaderUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.plaf.metal.metaltheme.getwhite": [
        "javax.swing.plaf.metal.MetalTheme.getWhite()"
    ],
    "java.beans.propertychangeevent.getpropagationid": [
        "java.beans.PropertyChangeEvent.getPropagationId()"
    ],
    "java.lang.reflect.executable.getannotation": [
        "java.lang.reflect.Executable.getAnnotation(java.lang.Class<T>)"
    ],
    "java.nio.file.securedirectorystream.newdirectorystream": [
        "java.nio.file.SecureDirectoryStream.newDirectoryStream(java.nio.file.SecureDirectoryStream,java.nio.file.LinkOption...)",
        "java.nio.file.SecureDirectoryStream.newDirectoryStream(T,java.nio.file.LinkOption)"
    ],
    "java.util.concurrent.atomic.atomicreference.updateandget": [
        "java.util.concurrent.atomic.AtomicReference.updateAndGet(java.util.function.UnaryOperator<V>)",
        "java.util.concurrent.atomic.AtomicReference.updateAndGet(java.util.function.UnaryOperator<java.util.concurrent.atomic.AtomicReference>)"
    ],
    "java.nio.file.attribute.userdefinedfileattributeview.name": [
        "java.nio.file.attribute.UserDefinedFileAttributeView.name()"
    ],
    "java.util.logging.logrecord.setmessage": [
        "java.util.logging.LogRecord.setMessage(java.lang.String)"
    ],
    "javax.sound.sampled.compoundcontrol.tostring": [
        "javax.sound.sampled.CompoundControl.toString()"
    ],
    "java.sql.databasemetadata.iscatalogatstart": [
        "java.sql.DatabaseMetaData.isCatalogAtStart()"
    ],
    "javax.swing.borderfactory.createstrokeborder": [
        "javax.swing.BorderFactory.createStrokeBorder(java.awt.BasicStroke,java.awt.Paint)",
        "javax.swing.BorderFactory.createStrokeBorder(java.awt.BasicStroke)"
    ],
    "javax.script.abstractscriptengine.eval": [
        "javax.script.AbstractScriptEngine.eval(java.io.Reader,javax.script.Bindings)",
        "javax.script.AbstractScriptEngine.eval(java.io.Reader)"
    ],
    "java.util.calendar.builder.setfields": [
        "java.util.Calendar.Builder.setFields(int...)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintpasswordfieldborder": [
        "javax.swing.plaf.synth.SynthPainter.paintPasswordFieldBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "org.omg.corba.any.extract_value": [
        "org.omg.CORBA.Any.extract_Value()"
    ],
    "javax.management.relation.relationsupport.getallroles": [
        "javax.management.relation.RelationSupport.getAllRoles()"
    ],
    "javax.print.attribute.standard.compression.getname": [
        "javax.print.attribute.standard.Compression.getName()"
    ],
    "javax.swing.text.wrappedplainview.setsize": [
        "javax.swing.text.WrappedPlainView.setSize(float,float)"
    ],
    "javax.xml.ws.endpoint.getimplementor": [
        "javax.xml.ws.Endpoint.getImplementor()"
    ],
    "java.sql.blob.setbytes": [
        "java.sql.Blob.setBytes(long,byte[])",
        "java.sql.Blob.setBytes(long,byte[],int,int)"
    ],
    "java.net.inet6address.hashcode": [
        "java.net.Inet6Address.hashCode()"
    ],
    "java.awt.image.imageconsumer.setdimensions": [
        "java.awt.image.ImageConsumer.setDimensions(int,int)"
    ],
    "java.beans.featuredescriptor.getvalue": [
        "java.beans.FeatureDescriptor.getValue(java.lang.String)"
    ],
    "java.awt.geom.quadcurve2d.getp2": [
        "java.awt.geom.QuadCurve2D.getP2()"
    ],
    "javax.swing.text.jtextcomponent.replaceselection": [
        "javax.swing.text.JTextComponent.replaceSelection(java.lang.String)"
    ],
    "javax.net.ssl.keymanagerfactoryspi.engineinit": [
        "javax.net.ssl.KeyManagerFactorySpi.engineInit(java.security.KeyStore,char[])",
        "javax.net.ssl.KeyManagerFactorySpi.engineInit(javax.net.ssl.ManagerFactoryParameters)"
    ],
    "java.net.contenthandlerfactory.createcontenthandler": [
        "java.net.ContentHandlerFactory.createContentHandler(java.lang.String)"
    ],
    "javax.print.attribute.standard.printerlocation.equals": [
        "javax.print.attribute.standard.PrinterLocation.equals(java.lang.Object)"
    ],
    "javax.swing.springlayout.removelayoutcomponent": [
        "javax.swing.SpringLayout.removeLayoutComponent(java.awt.Component)"
    ],
    "java.util.linkedlist.addall": [
        "java.util.LinkedList.addAll(java.util.Collection<? extends java.util.LinkedList>)",
        "java.util.LinkedList.addAll(java.util.Collection<? extends E>)",
        "java.util.LinkedList.addAll(int,java.util.Collection<? extends java.util.LinkedList>)",
        "java.util.LinkedList.addAll(int,java.util.Collection<? extends E>)"
    ],
    "javax.swing.plaf.layerui.eventdispatched": [
        "javax.swing.plaf.LayerUI.eventDispatched(java.awt.AWTEvent,javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)"
    ],
    "java.util.concurrent.threadpoolexecutor.getthreadfactory": [
        "java.util.concurrent.ThreadPoolExecutor.getThreadFactory()"
    ],
    "javax.swing.jfilechooser.getapprovebuttontext": [
        "javax.swing.JFileChooser.getApproveButtonText()"
    ],
    "javax.management.attribute.getname": [
        "javax.management.Attribute.getName()"
    ],
    "javax.management.objectname.ispropertyvaluepattern": [
        "javax.management.ObjectName.isPropertyValuePattern(java.lang.String)"
    ],
    "javax.swing.plaf.metal.oceantheme.getmenudisabledforeground": [
        "javax.swing.plaf.metal.OceanTheme.getMenuDisabledForeground()"
    ],
    "java.awt.event.adjustmentevent.getadjustmenttype": [
        "java.awt.event.AdjustmentEvent.getAdjustmentType()"
    ],
    "java.awt.image.imagefilter.imagecomplete": [
        "java.awt.image.ImageFilter.imageComplete(int)"
    ],
    "javax.swing.plaf.multi.multiseparatorui.installui": [
        "javax.swing.plaf.multi.MultiSeparatorUI.installUI(javax.swing.JComponent)"
    ],
    "javax.accessibility.accessibleextendedcomponent.gettooltiptext": [
        "javax.accessibility.AccessibleExtendedComponent.getToolTipText()"
    ],
    "javax.swing.plaf.metal.metalborders.getdesktopiconborder": [
        "javax.swing.plaf.metal.MetalBorders.getDesktopIconBorder()"
    ],
    "java.util.concurrent.priorityblockingqueue.remove": [
        "java.util.concurrent.PriorityBlockingQueue.remove(java.lang.Object)"
    ],
    "java.lang.long.decode": [
        "java.lang.Long.decode(java.lang.String)"
    ],
    "java.nio.file.attribute.filetime.compareto": [
        "java.nio.file.attribute.FileTime.compareTo(java.nio.file.attribute.FileTime)"
    ],
    "java.text.decimalformatsymbols.getdecimalseparator": [
        "java.text.DecimalFormatSymbols.getDecimalSeparator()"
    ],
    "javax.management.standardmbean.postregister": [
        "javax.management.StandardMBean.postRegister(java.lang.Boolean)"
    ],
    "javax.swing.defaultlistselectionmodel.removeselectioninterval": [
        "javax.swing.DefaultListSelectionModel.removeSelectionInterval(int,int)"
    ],
    "java.awt.geom.cubiccurve2d.double.getctrlp2": [
        "java.awt.geom.CubicCurve2D.Double.getCtrlP2()"
    ],
    "javax.swing.plaf.multi.multispinnerui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiSpinnerUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "java.security.pkcs12attribute.getname": [
        "java.security.PKCS12Attribute.getName()"
    ],
    "java.awt.checkboxmenuitem.additemlistener": [
        "java.awt.CheckboxMenuItem.addItemListener(java.awt.event.ItemListener)"
    ],
    "javax.swing.text.html.blockview.getattributes": [
        "javax.swing.text.html.BlockView.getAttributes()"
    ],
    "java.nio.file.filesystemexception.getotherfile": [
        "java.nio.file.FileSystemException.getOtherFile()"
    ],
    "javax.security.auth.kerberos.kerberoskey.isdestroyed": [
        "javax.security.auth.kerberos.KerberosKey.isDestroyed()"
    ],
    "javax.naming.spi.dirobjectfactory.getobjectinstance": [
        "javax.naming.spi.DirObjectFactory.getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,,?>,javax.naming.directory.Attributes)"
    ],
    "javax.xml.transform.transformer.getoutputproperty": [
        "javax.xml.transform.Transformer.getOutputProperty(java.lang.String)"
    ],
    "java.io.streamtokenizer.commentchar": [
        "java.io.StreamTokenizer.commentChar(int)"
    ],
    "javax.xml.datatype.duration.addto": [
        "javax.xml.datatype.Duration.addTo(java.util.Date)",
        "javax.xml.datatype.Duration.addTo(java.util.Calendar)"
    ],
    "org.omg.corba.typecode.discriminator_type": [
        "org.omg.CORBA.TypeCode.discriminator_type()"
    ],
    "java.lang.management.managementfactory.getplatformmbeanserver": [
        "java.lang.management.ManagementFactory.getPlatformMBeanServer()"
    ],
    "javax.xml.bind.helpers.validationeventlocatorimpl.setobject": [
        "javax.xml.bind.helpers.ValidationEventLocatorImpl.setObject(java.lang.Object)"
    ],
    "javax.management.stringvalueexp.apply": [
        "javax.management.StringValueExp.apply(javax.management.ObjectName)"
    ],
    "java.awt.image.raster.getsamples": [
        "java.awt.image.Raster.getSamples(int,int,int,int,int,double[])",
        "java.awt.image.Raster.getSamples(int,int,int,int,int,int[])",
        "java.awt.image.Raster.getSamples(int,int,int,int,int,float[])"
    ],
    "java.util.concurrent.synchronousqueue.spliterator": [
        "java.util.concurrent.SynchronousQueue.spliterator()"
    ],
    "javax.swing.undo.undomanager.getundopresentationname": [
        "javax.swing.undo.UndoManager.getUndoPresentationName()"
    ],
    "java.awt.geom.ellipse2d.double.getheight": [
        "java.awt.geom.Ellipse2D.Double.getHeight()"
    ],
    "java.util.concurrent.phaser.arriveandderegister": [
        "java.util.concurrent.Phaser.arriveAndDeregister()"
    ],
    "java.sql.sqlinput.readref": [
        "java.sql.SQLInput.readRef()"
    ],
    "javax.swing.plaf.multi.multilistui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiListUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "java.time.zoneddatetime.now": [
        "java.time.ZonedDateTime.now()",
        "java.time.ZonedDateTime.now(java.time.Clock)",
        "java.time.ZonedDateTime.now(java.time.ZoneId)"
    ],
    "javax.swing.text.html.css.getallattributekeys": [
        "javax.swing.text.html.CSS.getAllAttributeKeys()"
    ],
    "javax.swing.text.asyncboxview.getchildstate": [
        "javax.swing.text.AsyncBoxView.getChildState(int)"
    ],
    "javax.swing.plaf.basic.basiclistui.installkeyboardactions": [
        "javax.swing.plaf.basic.BasicListUI.installKeyboardActions()"
    ],
    "java.lang.processbuilder.inheritio": [
        "java.lang.ProcessBuilder.inheritIO()"
    ],
    "javax.swing.jcheckbox.paramstring": [
        "javax.swing.JCheckBox.paramString()"
    ],
    "javax.tools.javafilemanager.inferbinaryname": [
        "javax.tools.JavaFileManager.inferBinaryName(javax.tools.JavaFileManager.Location,javax.tools.JavaFileObject)"
    ],
    "javax.swing.text.html.htmlwriter.writeattributes": [
        "javax.swing.text.html.HTMLWriter.writeAttributes(javax.swing.text.AttributeSet)"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.setsearchable": [
        "javax.sql.rowset.RowSetMetaDataImpl.setSearchable(int,boolean)"
    ],
    "java.awt.window.type.values": [
        "java.awt.Window.Type.values()"
    ],
    "javax.sound.sampled.audioinputstream.close": [
        "javax.sound.sampled.AudioInputStream.close()"
    ],
    "javax.swing.plaf.synth.synthpopupmenuui.propertychange": [
        "javax.swing.plaf.synth.SynthPopupMenuUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "java.nio.channels.asynchronousfilechannel.open": [
        "java.nio.channels.AsynchronousFileChannel.open(java.nio.file.Path,java.util.Set<? extends java.nio.file.OpenOption>,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute<?>)",
        "java.nio.channels.AsynchronousFileChannel.open(java.nio.file.Path,java.nio.file.OpenOption...)",
        "java.nio.channels.AsynchronousFileChannel.open(java.nio.file.Path,java.util.Set<? extends java.nio.file.OpenOption>,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute<?>...)",
        "java.nio.channels.AsynchronousFileChannel.open(java.nio.file.Path,java.nio.file.OpenOption)"
    ],
    "java.sql.databasemetadata.supportsopencursorsacrosscommit": [
        "java.sql.DatabaseMetaData.supportsOpenCursorsAcrossCommit()"
    ],
    "javax.swing.text.abstractwriter.setcurrentlinelength": [
        "javax.swing.text.AbstractWriter.setCurrentLineLength(int)"
    ],
    "javax.imageio.imagewriter.addiiowriteprogresslistener": [
        "javax.imageio.ImageWriter.addIIOWriteProgressListener(javax.imageio.event.IIOWriteProgressListener)"
    ],
    "javax.sql.rowset.setref": [
        "javax.sql.RowSet.setRef(int,java.sql.Ref)"
    ],
    "java.lang.instrument.classdefinition.getdefinitionclass": [
        "java.lang.instrument.ClassDefinition.getDefinitionClass()"
    ],
    "java.awt.image.indexcolormodel.getred": [
        "java.awt.image.IndexColorModel.getRed(int)"
    ],
    "java.lang.reflect.type.gettypename": [
        "java.lang.reflect.Type.getTypeName()"
    ],
    "org.omg.dynamicany._dynenumstub.type": [
        "org.omg.DynamicAny._DynEnumStub.type()"
    ],
    "javax.swing.mutablecomboboxmodel.insertelementat": [
        "javax.swing.MutableComboBoxModel.insertElementAt(javax.swing.MutableComboBoxModel,int)"
    ],
    "java.net.datagramsocket.setsendbuffersize": [
        "java.net.DatagramSocket.setSendBufferSize(int)"
    ],
    "javax.swing.jtabbedpane.getchangelisteners": [
        "javax.swing.JTabbedPane.getChangeListeners()"
    ],
    "java.io.objectinputstream.readobjectoverride": [
        "java.io.ObjectInputStream.readObjectOverride()"
    ],
    "javax.print.printservicelookup.registerserviceprovider": [
        "javax.print.PrintServiceLookup.registerServiceProvider(javax.print.PrintServiceLookup)"
    ],
    "javax.swing.plaf.basic.basictextareaui.createui": [
        "javax.swing.plaf.basic.BasicTextAreaUI.createUI(javax.swing.JComponent)"
    ],
    "javax.sql.rowset.cachedrowset.getrowsetwarnings": [
        "javax.sql.rowset.CachedRowSet.getRowSetWarnings()"
    ],
    "javax.swing.plaf.multi.multisplitpaneui.getdividerlocation": [
        "javax.swing.plaf.multi.MultiSplitPaneUI.getDividerLocation(javax.swing.JSplitPane)"
    ],
    "javax.swing.tree.defaultmutabletreenode.getdepth": [
        "javax.swing.tree.DefaultMutableTreeNode.getDepth()"
    ],
    "javax.management.mbeanserverconnection.getmbeancount": [
        "javax.management.MBeanServerConnection.getMBeanCount()"
    ],
    "javax.swing.table.abstracttablemodel.addtablemodellistener": [
        "javax.swing.table.AbstractTableModel.addTableModelListener(javax.swing.event.TableModelListener)"
    ],
    "java.awt.dnd.dragsource.removedragsourcemotionlistener": [
        "java.awt.dnd.DragSource.removeDragSourceMotionListener(java.awt.dnd.DragSourceMotionListener)"
    ],
    "org.omg.corba.typecode.fixed_digits": [
        "org.omg.CORBA.TypeCode.fixed_digits()"
    ],
    "javax.sql.rowset.serial.serialclob.hashcode": [
        "javax.sql.rowset.serial.SerialClob.hashCode()"
    ],
    "java.util.resourcebundle.handlegetobject": [
        "java.util.ResourceBundle.handleGetObject(java.lang.String)"
    ],
    "java.security.algorithmparametergenerator.getinstance": [
        "java.security.AlgorithmParameterGenerator.getInstance(java.lang.String,java.security.Provider)",
        "java.security.AlgorithmParameterGenerator.getInstance(java.lang.String)",
        "java.security.AlgorithmParameterGenerator.getInstance(java.lang.String,java.lang.String)"
    ],
    "java.util.identityhashmap.clone": [
        "java.util.IdentityHashMap.clone()"
    ],
    "java.util.concurrent.completionstage.thencomposeasync": [
        "java.util.concurrent.CompletionStage.thenComposeAsync(java.util.function.Function<? super,? extends java.util.concurrent.CompletionStage<U>>,java.util.concurrent.Executor)",
        "java.util.concurrent.CompletionStage.thenComposeAsync(java.util.function.Function<? super,? extends java.util.concurrent.CompletionStage<U>>)"
    ],
    "javax.management.mbeanserver.instantiate": [
        "javax.management.MBeanServer.instantiate(java.lang.String,java.lang.Object[],java.lang.String[])",
        "javax.management.MBeanServer.instantiate(java.lang.String,javax.management.ObjectName)",
        "javax.management.MBeanServer.instantiate(java.lang.String)",
        "javax.management.MBeanServer.instantiate(java.lang.String,javax.management.ObjectName,java.lang.Object[],java.lang.String[])"
    ],
    "java.awt.basicstroke.createstrokedshape": [
        "java.awt.BasicStroke.createStrokedShape(java.awt.Shape)"
    ],
    "javax.tools.optionchecker.issupportedoption": [
        "javax.tools.OptionChecker.isSupportedOption(java.lang.String)"
    ],
    "javax.swing.jinternalframe.ismaximum": [
        "javax.swing.JInternalFrame.isMaximum()"
    ],
    "javax.swing.plaf.basic.basicborders.getsplitpanedividerborder": [
        "javax.swing.plaf.basic.BasicBorders.getSplitPaneDividerBorder()"
    ],
    "java.util.treemap.floorkey": [
        "java.util.TreeMap.floorKey(K)"
    ],
    "javax.swing.imageicon.setdescription": [
        "javax.swing.ImageIcon.setDescription(java.lang.String)"
    ],
    "javax.swing.spinnerdatemodel.getcalendarfield": [
        "javax.swing.SpinnerDateModel.getCalendarField()"
    ],
    "java.util.concurrent.completionstage.thenapplyasync": [
        "java.util.concurrent.CompletionStage.thenApplyAsync(java.util.function.Function<? super,? extends U>,java.util.concurrent.Executor)",
        "java.util.concurrent.CompletionStage.thenApplyAsync(java.util.function.Function<? super,? extends U>)"
    ],
    "java.time.localdate.plusmonths": [
        "java.time.LocalDate.plusMonths(long)"
    ],
    "org.omg.dynamicany._dynanystub.insert_string": [
        "org.omg.DynamicAny._DynAnyStub.insert_string(java.lang.String)"
    ],
    "java.time.zoneid.getid": [
        "java.time.ZoneId.getId()"
    ],
    "javax.swing.jlayer.addimpl": [
        "javax.swing.JLayer.addImpl(java.awt.Component,java.lang.Object,int)"
    ],
    "java.util.eventlistenerproxy.getlistener": [
        "java.util.EventListenerProxy.getListener()"
    ],
    "javax.management.remote.rmi.rmiconnection.unregistermbean": [
        "javax.management.remote.rmi.RMIConnection.unregisterMBean(javax.management.ObjectName,javax.security.auth.Subject)"
    ],
    "java.security.keystore.passwordprotection.destroy": [
        "java.security.KeyStore.PasswordProtection.destroy()"
    ],
    "javax.xml.bind.helpers.validationeventlocatorimpl.setlinenumber": [
        "javax.xml.bind.helpers.ValidationEventLocatorImpl.setLineNumber(int)"
    ],
    "javax.management.monitor.countermonitor.getoffset": [
        "javax.management.monitor.CounterMonitor.getOffset()"
    ],
    "javax.management.reflectionexception.getcause": [
        "javax.management.ReflectionException.getCause()"
    ],
    "java.awt.image.directcolormodel.getrgb": [
        "java.awt.image.DirectColorModel.getRGB(int)",
        "java.awt.image.DirectColorModel.getRGB(java.lang.Object)"
    ],
    "javax.xml.crypto.marshalexception.printstacktrace": [
        "javax.xml.crypto.MarshalException.printStackTrace()"
    ],
    "java.util.logging.logrecord.getmessage": [
        "java.util.logging.LogRecord.getMessage()"
    ],
    "javax.xml.soap.soapenvelope.addbody": [
        "javax.xml.soap.SOAPEnvelope.addBody()"
    ],
    "javax.swing.jcolorchooser.getselectionmodel": [
        "javax.swing.JColorChooser.getSelectionModel()"
    ],
    "javax.swing.plaf.synth.synthcomboboxui.propertychange": [
        "javax.swing.plaf.synth.SynthComboBoxUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "javax.swing.plaf.basic.basictreeui.geteditingpath": [
        "javax.swing.plaf.basic.BasicTreeUI.getEditingPath(javax.swing.JTree)"
    ],
    "javax.swing.text.view.getnextvisualpositionfrom": [
        "javax.swing.text.View.getNextVisualPositionFrom(int,javax.swing.text.Position.Bias,java.awt.Shape,int,javax.swing.text.Position.Bias[])"
    ],
    "java.util.listresourcebundle.getkeys": [
        "java.util.ListResourceBundle.getKeys()"
    ],
    "java.awt.geom.flatteningpathiterator.getflatness": [
        "java.awt.geom.FlatteningPathIterator.getFlatness()"
    ],
    "javax.sql.rowset.cachedrowset.populate": [
        "javax.sql.rowset.CachedRowSet.populate(java.sql.ResultSet)",
        "javax.sql.rowset.CachedRowSet.populate(java.sql.ResultSet,int)"
    ],
    "java.net.inetsocketaddress.gethostname": [
        "java.net.InetSocketAddress.getHostName()"
    ],
    "java.awt.geom.roundrectangle2d.double.setroundrect": [
        "java.awt.geom.RoundRectangle2D.Double.setRoundRect(double,double,double,double,double,double)"
    ],
    "java.lang.management.threadmxbean.getthreadinfo": [
        "java.lang.management.ThreadMXBean.getThreadInfo(long)",
        "java.lang.management.ThreadMXBean.getThreadInfo(long[],boolean,boolean)",
        "java.lang.management.ThreadMXBean.getThreadInfo(long,int)",
        "java.lang.management.ThreadMXBean.getThreadInfo(long[])",
        "java.lang.management.ThreadMXBean.getThreadInfo(long[],int)"
    ],
    "javax.swing.jmenu.getmenucomponentcount": [
        "javax.swing.JMenu.getMenuComponentCount()"
    ],
    "javax.swing.plaf.synth.synthoptionpaneui.createui": [
        "javax.swing.plaf.synth.SynthOptionPaneUI.createUI(javax.swing.JComponent)"
    ],
    "java.util.base64.decoder.decode": [
        "java.util.Base64.Decoder.decode(byte[])",
        "java.util.Base64.Decoder.decode(java.nio.ByteBuffer)",
        "java.util.Base64.Decoder.decode(byte[],byte[])",
        "java.util.Base64.Decoder.decode(java.lang.String)"
    ],
    "javax.swing.text.html.formsubmitevent.methodtype.valueof": [
        "javax.swing.text.html.FormSubmitEvent.MethodType.valueOf(java.lang.String)"
    ],
    "java.text.parseposition.setindex": [
        "java.text.ParsePosition.setIndex(int)"
    ],
    "javax.xml.ws.spi.http.httpexchange.addresponseheader": [
        "javax.xml.ws.spi.http.HttpExchange.addResponseHeader(java.lang.String,java.lang.String)"
    ],
    "java.time.zoneddatetime.plusweeks": [
        "java.time.ZonedDateTime.plusWeeks(long)"
    ],
    "java.util.weakhashmap.keyset": [
        "java.util.WeakHashMap.keySet()"
    ],
    "java.util.concurrent.completionstage.accepteither": [
        "java.util.concurrent.CompletionStage.acceptEither(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Consumer<? super T>)",
        "java.util.concurrent.CompletionStage.acceptEither(java.util.concurrent.CompletionStage<? extends java.util.concurrent.CompletionStage>,java.util.function.Consumer<? super java.util.concurrent.CompletionStage>)"
    ],
    "javax.tools.simplejavafileobject.openinputstream": [
        "javax.tools.SimpleJavaFileObject.openInputStream()"
    ],
    "javax.print.attribute.hashattributeset.equals": [
        "javax.print.attribute.HashAttributeSet.equals(java.lang.Object)"
    ],
    "javax.xml.ws.spi.http.httpcontext.getattributenames": [
        "javax.xml.ws.spi.http.HttpContext.getAttributeNames()"
    ],
    "java.util.arraylist.indexof": [
        "java.util.ArrayList.indexOf(java.lang.Object)"
    ],
    "java.awt.secondaryloop.exit": [
        "java.awt.SecondaryLoop.exit()"
    ],
    "java.awt.component.addmouselistener": [
        "java.awt.Component.addMouseListener(java.awt.event.MouseListener)"
    ],
    "java.lang.character.unicodescript.valueof": [
        "java.lang.Character.UnicodeScript.valueOf(java.lang.String)"
    ],
    "java.util.concurrent.concurrentlinkeddeque.addfirst": [
        "java.util.concurrent.ConcurrentLinkedDeque.addFirst(E)",
        "java.util.concurrent.ConcurrentLinkedDeque.addFirst(java.util.concurrent.ConcurrentLinkedDeque)"
    ],
    "java.nio.file.files.write": [
        "java.nio.file.Files.write(java.nio.file.Path,java.lang.Iterable<? extends java.lang.CharSequence>,java.nio.charset.Charset,java.nio.file.OpenOption)",
        "java.nio.file.Files.write(java.nio.file.Path,java.lang.Iterable<? extends java.lang.CharSequence>,java.nio.file.OpenOption...)",
        "java.nio.file.Files.write(java.nio.file.Path,java.lang.Iterable<? extends java.lang.CharSequence>,java.nio.file.OpenOption)",
        "java.nio.file.Files.write(java.nio.file.Path,java.lang.Iterable<? extends java.lang.CharSequence>,java.nio.charset.Charset,java.nio.file.OpenOption...)",
        "java.nio.file.Files.write(java.nio.file.Path,byte[],java.nio.file.OpenOption)",
        "java.nio.file.Files.write(java.nio.file.Path,byte[],java.nio.file.OpenOption...)"
    ],
    "java.io.objectoutputstream.defaultwriteobject": [
        "java.io.ObjectOutputStream.defaultWriteObject()"
    ],
    "java.util.sortedset.tailset": [
        "java.util.SortedSet.tailSet(java.util.SortedSet)",
        "java.util.SortedSet.tailSet(E)"
    ],
    "javax.swing.text.view.insertupdate": [
        "javax.swing.text.View.insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "java.net.uri.gethost": [
        "java.net.URI.getHost()"
    ],
    "javax.script.scriptenginemanager.put": [
        "javax.script.ScriptEngineManager.put(java.lang.String,java.lang.Object)"
    ],
    "java.sql.databasemetadata.getmaxcolumnsintable": [
        "java.sql.DatabaseMetaData.getMaxColumnsInTable()"
    ],
    "javax.swing.abstractspinnermodel.getchangelisteners": [
        "javax.swing.AbstractSpinnerModel.getChangeListeners()"
    ],
    "java.awt.checkboxmenuitem.setstate": [
        "java.awt.CheckboxMenuItem.setState(boolean)"
    ],
    "javax.xml.stream.events.notationdeclaration.getsystemid": [
        "javax.xml.stream.events.NotationDeclaration.getSystemId()"
    ],
    "org.omg.dynamicany._dynfixedstub.copy": [
        "org.omg.DynamicAny._DynFixedStub.copy()"
    ],
    "javax.activation.filedatasource.getinputstream": [
        "javax.activation.FileDataSource.getInputStream()"
    ],
    "javax.management.openmbean.tabulardata.put": [
        "javax.management.openmbean.TabularData.put(javax.management.openmbean.CompositeData)"
    ],
    "javax.management.relation.relationsupport.retrieveallroles": [
        "javax.management.relation.RelationSupport.retrieveAllRoles()"
    ],
    "javax.xml.bind.jaxbexception.setlinkedexception": [
        "javax.xml.bind.JAXBException.setLinkedException(java.lang.Throwable)"
    ],
    "javax.swing.plaf.synth.synthcomboboxui.createpopup": [
        "javax.swing.plaf.synth.SynthComboBoxUI.createPopup()"
    ],
    "java.time.instant.minusseconds": [
        "java.time.Instant.minusSeconds(long)"
    ],
    "javax.management.query.and": [
        "javax.management.Query.and(javax.management.QueryExp,javax.management.QueryExp)"
    ],
    "javax.swing.jfilechooser.getfileview": [
        "javax.swing.JFileChooser.getFileView()"
    ],
    "javax.swing.plaf.synth.synthdesktopiconui.paint": [
        "javax.swing.plaf.synth.SynthDesktopIconUI.paint(java.awt.Graphics,javax.swing.JComponent)",
        "javax.swing.plaf.synth.SynthDesktopIconUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)"
    ],
    "org.xml.sax.locator.getlinenumber": [
        "org.xml.sax.Locator.getLineNumber()"
    ],
    "java.util.concurrent.atomic.atomicreferencefieldupdater.getandaccumulate": [
        "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndAccumulate(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.function.BinaryOperator<java.util.concurrent.atomic.AtomicReferenceFieldUpdater>)",
        "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndAccumulate(T,V,java.util.function.BinaryOperator<V>)"
    ],
    "javax.management.descriptorread.getdescriptor": [
        "javax.management.DescriptorRead.getDescriptor()"
    ],
    "javax.activation.commandmap.getmimetypes": [
        "javax.activation.CommandMap.getMimeTypes()"
    ],
    "javax.swing.tree.defaultmutabletreenode.preorderenumeration": [
        "javax.swing.tree.DefaultMutableTreeNode.preorderEnumeration()"
    ],
    "java.util.scanner.next": [
        "java.util.Scanner.next()",
        "java.util.Scanner.next(java.util.regex.Pattern)",
        "java.util.Scanner.next(java.lang.String)"
    ],
    "javax.swing.event.treemodelevent.getchildindices": [
        "javax.swing.event.TreeModelEvent.getChildIndices()"
    ],
    "java.awt.graphics2d.getfontrendercontext": [
        "java.awt.Graphics2D.getFontRenderContext()"
    ],
    "javax.xml.crypto.dsig.xmlsignatureexception.getcause": [
        "javax.xml.crypto.dsig.XMLSignatureException.getCause()"
    ],
    "javax.swing.jsplitpane.paramstring": [
        "javax.swing.JSplitPane.paramString()"
    ],
    "java.awt.frame.setmaximizedbounds": [
        "java.awt.Frame.setMaximizedBounds(java.awt.Rectangle)"
    ],
    "java.lang.management.threadmxbean.findmonitordeadlockedthreads": [
        "java.lang.management.ThreadMXBean.findMonitorDeadlockedThreads()"
    ],
    "java.lang.management.threadinfo.getlockname": [
        "java.lang.management.ThreadInfo.getLockName()"
    ],
    "java.nio.shortbuffer.allocate": [
        "java.nio.ShortBuffer.allocate(int)"
    ],
    "javax.sql.rowset.spi.syncresolver.getconflictvalue": [
        "javax.sql.rowset.spi.SyncResolver.getConflictValue(int)",
        "javax.sql.rowset.spi.SyncResolver.getConflictValue(java.lang.String)"
    ],
    "javax.swing.tree.variableheightlayoutcache.getbounds": [
        "javax.swing.tree.VariableHeightLayoutCache.getBounds(javax.swing.tree.TreePath,java.awt.Rectangle)"
    ],
    "javax.swing.transferhandler.setdragimageoffset": [
        "javax.swing.TransferHandler.setDragImageOffset(java.awt.Point)"
    ],
    "javax.swing.action.setenabled": [
        "javax.swing.Action.setEnabled(boolean)"
    ],
    "java.awt.rectangle.createunion": [
        "java.awt.Rectangle.createUnion(java.awt.geom.Rectangle2D)"
    ],
    "java.lang.class.gettypeparameters": [
        "java.lang.Class.getTypeParameters()"
    ],
    "javax.naming.nameclasspair.setnameinnamespace": [
        "javax.naming.NameClassPair.setNameInNamespace(java.lang.String)"
    ],
    "java.util.concurrent.linkedtransferqueue.tostring": [
        "java.util.concurrent.LinkedTransferQueue.toString()"
    ],
    "javax.sound.midi.sequence.deletetrack": [
        "javax.sound.midi.Sequence.deleteTrack(javax.sound.midi.Track)"
    ],
    "javax.swing.jmenu.add": [
        "javax.swing.JMenu.add(javax.swing.Action)",
        "javax.swing.JMenu.add(java.awt.Component)",
        "javax.swing.JMenu.add(java.awt.Component,int)",
        "javax.swing.JMenu.add(javax.swing.JMenuItem)",
        "javax.swing.JMenu.add(java.lang.String)"
    ],
    "java.awt.print.paper.getimageablex": [
        "java.awt.print.Paper.getImageableX()"
    ],
    "java.awt.dnd.droptargetdragevent.getlocation": [
        "java.awt.dnd.DropTargetDragEvent.getLocation()"
    ],
    "java.awt.dnd.droptarget.dragexit": [
        "java.awt.dnd.DropTarget.dragExit(java.awt.dnd.DropTargetEvent)"
    ],
    "java.awt.toolkit.createmenu": [
        "java.awt.Toolkit.createMenu(java.awt.Menu)"
    ],
    "javax.accessibility.accessibletable.isaccessibleselected": [
        "javax.accessibility.AccessibleTable.isAccessibleSelected(int,int)"
    ],
    "java.sql.databasemetadata.getrowidlifetime": [
        "java.sql.DatabaseMetaData.getRowIdLifetime()"
    ],
    "javax.print.attribute.standard.medianame.getstringtable": [
        "javax.print.attribute.standard.MediaName.getStringTable()"
    ],
    "java.util.logging.memoryhandler.flush": [
        "java.util.logging.MemoryHandler.flush()"
    ],
    "org.omg.dynamicany.dynvalueboxoperations.get_boxed_value_as_dyn_any": [
        "org.omg.DynamicAny.DynValueBoxOperations.get_boxed_value_as_dyn_any()"
    ],
    "java.awt.window.isalwaysontopsupported": [
        "java.awt.Window.isAlwaysOnTopSupported()"
    ],
    "java.awt.list.getactionlisteners": [
        "java.awt.List.getActionListeners()"
    ],
    "java.time.zone.zonerules.getdaylightsavings": [
        "java.time.zone.ZoneRules.getDaylightSavings(java.time.Instant)"
    ],
    "javax.swing.japplet.setcontentpane": [
        "javax.swing.JApplet.setContentPane(java.awt.Container)"
    ],
    "org.omg.corba.orb.disconnect": [
        "org.omg.CORBA.ORB.disconnect(org.omg.CORBA.Object)"
    ],
    "java.sql.sqloutput.writeblob": [
        "java.sql.SQLOutput.writeBlob(java.sql.Blob)"
    ],
    "javax.management.relation.role.getrolevalue": [
        "javax.management.relation.Role.getRoleValue()"
    ],
    "java.lang.reflect.parameter.getannotation": [
        "java.lang.reflect.Parameter.getAnnotation(java.lang.Class<T>)"
    ],
    "java.awt.geom.path2d.getbounds": [
        "java.awt.geom.Path2D.getBounds()"
    ],
    "javax.swing.text.html.htmldocument.create": [
        "javax.swing.text.html.HTMLDocument.create(javax.swing.text.DefaultStyledDocument.ElementSpec[])"
    ],
    "javax.swing.undo.undomanager.edittoberedone": [
        "javax.swing.undo.UndoManager.editToBeRedone()"
    ],
    "javax.imageio.spi.imagereaderwriterspi.getnativestreammetadataformatname": [
        "javax.imageio.spi.ImageReaderWriterSpi.getNativeStreamMetadataFormatName()"
    ],
    "javax.sql.rowset.baserowset.setconcurrency": [
        "javax.sql.rowset.BaseRowSet.setConcurrency(int)"
    ],
    "javax.management.loading.mlet.writeexternal": [
        "javax.management.loading.MLet.writeExternal(java.io.ObjectOutput)"
    ],
    "java.rmi.server.rmiclassloaderspi.getclassloader": [
        "java.rmi.server.RMIClassLoaderSpi.getClassLoader(java.lang.String)"
    ],
    "java.net.httpcookie.hashcode": [
        "java.net.HttpCookie.hashCode()"
    ],
    "java.sql.clob.position": [
        "java.sql.Clob.position(java.sql.Clob,long)",
        "java.sql.Clob.position(java.lang.String,long)"
    ],
    "java.awt.toolkit.removepropertychangelistener": [
        "java.awt.Toolkit.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"
    ],
    "java.net.cookiehandler.put": [
        "java.net.CookieHandler.put(java.net.URI,,java.util.List<java.lang.String>>)"
    ],
    "javax.swing.box.setlayout": [
        "javax.swing.Box.setLayout(java.awt.LayoutManager)"
    ],
    "javax.xml.stream.xmleventfactory.createenddocument": [
        "javax.xml.stream.XMLEventFactory.createEndDocument()"
    ],
    "java.security.cert.certificatefactoryspi.enginegeneratecertpath": [
        "java.security.cert.CertificateFactorySpi.engineGenerateCertPath(java.util.List<? extends java.security.cert.Certificate>)",
        "java.security.cert.CertificateFactorySpi.engineGenerateCertPath(java.io.InputStream)",
        "java.security.cert.CertificateFactorySpi.engineGenerateCertPath(java.io.InputStream,java.lang.String)"
    ],
    "java.awt.geom.point2d.double.gety": [
        "java.awt.geom.Point2D.Double.getY()"
    ],
    "javax.imageio.stream.imageinputstream.read": [
        "javax.imageio.stream.ImageInputStream.read(byte[],int,int)",
        "javax.imageio.stream.ImageInputStream.read()"
    ],
    "java.time.chrono.thaibuddhistchronology.date": [
        "java.time.chrono.ThaiBuddhistChronology.date(java.time.chrono.Era,int,int,int)",
        "java.time.chrono.ThaiBuddhistChronology.date(int,int,int)"
    ],
    "javax.sql.rowset.serial.serialref.equals": [
        "javax.sql.rowset.serial.SerialRef.equals(java.lang.Object)"
    ],
    "java.awt.button.paramstring": [
        "java.awt.Button.paramString()"
    ],
    "javax.imageio.imagereader.processpassstarted": [
        "javax.imageio.ImageReader.processPassStarted(java.awt.image.BufferedImage,int,int,int,int,int,int,int,int[])"
    ],
    "java.awt.popupmenu.getparent": [
        "java.awt.PopupMenu.getParent()"
    ],
    "javax.swing.scrollpanelayout.syncwithscrollpane": [
        "javax.swing.ScrollPaneLayout.syncWithScrollPane(javax.swing.JScrollPane)"
    ],
    "java.lang.management.platformloggingmxbean.getloggernames": [
        "java.lang.management.PlatformLoggingMXBean.getLoggerNames()"
    ],
    "org.w3c.dom.events.uievent.getdetail": [
        "org.w3c.dom.events.UIEvent.getDetail()"
    ],
    "javax.swing.plaf.synth.synthviewportui.uninstallui": [
        "javax.swing.plaf.synth.SynthViewportUI.uninstallUI(javax.swing.JComponent)"
    ],
    "org.omg.dynamicany.dynanyoperations.insert_string": [
        "org.omg.DynamicAny.DynAnyOperations.insert_string(java.lang.String)"
    ],
    "org.omg.dynamicany._dynanystub.insert_any": [
        "org.omg.DynamicAny._DynAnyStub.insert_any(org.omg.CORBA.Any)"
    ],
    "javax.lang.model.util.typekindvisitor8.visitintersection": [
        "javax.lang.model.util.TypeKindVisitor8.visitIntersection(javax.lang.model.type.IntersectionType,javax.lang.model.util.TypeKindVisitor8)"
    ],
    "javax.management.openmbean.tabulardata.equals": [
        "javax.management.openmbean.TabularData.equals(java.lang.Object)"
    ],
    "java.lang.management.memorynotificationinfo.getcount": [
        "java.lang.management.MemoryNotificationInfo.getCount()"
    ],
    "java.security.messagedigest.clone": [
        "java.security.MessageDigest.clone()"
    ],
    "javax.swing.jdialog.addimpl": [
        "javax.swing.JDialog.addImpl(java.awt.Component,java.lang.Object,int)"
    ],
    "javax.swing.text.html.paragraphview.getminimumspan": [
        "javax.swing.text.html.ParagraphView.getMinimumSpan(int)"
    ],
    "javax.swing.plaf.metal.metaltoolbarui.createcontainerlistener": [
        "javax.swing.plaf.metal.MetalToolBarUI.createContainerListener()"
    ],
    "java.nio.channels.spi.selectorprovider.opensocketchannel": [
        "java.nio.channels.spi.SelectorProvider.openSocketChannel()"
    ],
    "javax.print.attribute.standard.media.equals": [
        "javax.print.attribute.standard.Media.equals(java.lang.Object)"
    ],
    "javax.lang.model.util.elementkindvisitor6.visittypeasenum": [
        "javax.lang.model.util.ElementKindVisitor6.visitTypeAsEnum(javax.lang.model.element.TypeElement,javax.lang.model.util.ElementKindVisitor6)"
    ],
    "javax.naming.initialcontext.init": [
        "javax.naming.InitialContext.init(,?>)"
    ],
    "java.awt.jobattributes.hashcode": [
        "java.awt.JobAttributes.hashCode()"
    ],
    "java.util.concurrent.concurrentlinkeddeque.spliterator": [
        "java.util.concurrent.ConcurrentLinkedDeque.spliterator()"
    ],
    "javax.naming.directory.searchcontrols.setreturningobjflag": [
        "javax.naming.directory.SearchControls.setReturningObjFlag(boolean)"
    ],
    "java.nio.charset.charsetencoder.encodeloop": [
        "java.nio.charset.CharsetEncoder.encodeLoop(java.nio.CharBuffer,java.nio.ByteBuffer)"
    ],
    "java.net.authenticator.requestpasswordauthentication": [
        "java.net.Authenticator.requestPasswordAuthentication(java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String)",
        "java.net.Authenticator.requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator.RequestorType)",
        "java.net.Authenticator.requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String)"
    ],
    "javax.print.attribute.standard.numberofinterveningjobs.equals": [
        "javax.print.attribute.standard.NumberOfInterveningJobs.equals(java.lang.Object)"
    ],
    "java.awt.dimension.getwidth": [
        "java.awt.Dimension.getWidth()"
    ],
    "java.rmi.naming.list": [
        "java.rmi.Naming.list(java.lang.String)"
    ],
    "javax.rmi.corba.utildelegate.copyobject": [
        "javax.rmi.CORBA.UtilDelegate.copyObject(java.lang.Object,org.omg.CORBA.ORB)"
    ],
    "java.nio.channels.socketchannel.socket": [
        "java.nio.channels.SocketChannel.socket()"
    ],
    "java.util.concurrent.executors.newsinglethreadexecutor": [
        "java.util.concurrent.Executors.newSingleThreadExecutor()",
        "java.util.concurrent.Executors.newSingleThreadExecutor(java.util.concurrent.ThreadFactory)"
    ],
    "javax.swing.jslider.setminimum": [
        "javax.swing.JSlider.setMinimum(int)"
    ],
    "javax.swing.text.jtextcomponent.paramstring": [
        "javax.swing.text.JTextComponent.paramString()"
    ],
    "org.w3c.dom.document.getdocumenturi": [
        "org.w3c.dom.Document.getDocumentURI()"
    ],
    "javax.xml.crypto.dsig.keyinfo.x509data.getcontent": [
        "javax.xml.crypto.dsig.keyinfo.X509Data.getContent()"
    ],
    "org.omg.corba.doubleholder._type": [
        "org.omg.CORBA.DoubleHolder._type()"
    ],
    "java.awt.menuitem.disableevents": [
        "java.awt.MenuItem.disableEvents(long)"
    ],
    "java.util.abstractlist.iterator": [
        "java.util.AbstractList.iterator()"
    ],
    "java.awt.scrollpane.addimpl": [
        "java.awt.ScrollPane.addImpl(java.awt.Component,java.lang.Object,int)"
    ],
    "javax.management.mbeanserverconnection.creatembean": [
        "javax.management.MBeanServerConnection.createMBean(java.lang.String,javax.management.ObjectName,java.lang.Object[],java.lang.String[])",
        "javax.management.MBeanServerConnection.createMBean(java.lang.String,javax.management.ObjectName,javax.management.ObjectName,java.lang.Object[],java.lang.String[])",
        "javax.management.MBeanServerConnection.createMBean(java.lang.String,javax.management.ObjectName,javax.management.ObjectName)",
        "javax.management.MBeanServerConnection.createMBean(java.lang.String,javax.management.ObjectName)"
    ],
    "javax.swing.text.html.stylesheet.addstylesheet": [
        "javax.swing.text.html.StyleSheet.addStyleSheet(javax.swing.text.html.StyleSheet)"
    ],
    "javax.swing.jdialog.getrootpane": [
        "javax.swing.JDialog.getRootPane()"
    ],
    "javax.xml.datatype.duration.getminutes": [
        "javax.xml.datatype.Duration.getMinutes()"
    ],
    "java.awt.event.hierarchyevent.getchangedparent": [
        "java.awt.event.HierarchyEvent.getChangedParent()"
    ],
    "javax.swing.spinnerdatemodel.getnextvalue": [
        "javax.swing.SpinnerDateModel.getNextValue()"
    ],
    "java.time.format.datetimeformatterbuilder.appendzoneoroffsetid": [
        "java.time.format.DateTimeFormatterBuilder.appendZoneOrOffsetId()"
    ],
    "javax.xml.validation.validator.getresourceresolver": [
        "javax.xml.validation.Validator.getResourceResolver()"
    ],
    "java.net.httpcookie.getcomment": [
        "java.net.HttpCookie.getComment()"
    ],
    "javax.swing.plaf.multi.multifilechooserui.installui": [
        "javax.swing.plaf.multi.MultiFileChooserUI.installUI(javax.swing.JComponent)"
    ],
    "java.util.jar.pack200.packer.pack": [
        "java.util.jar.Pack200.Packer.pack(java.util.jar.JarInputStream,java.io.OutputStream)",
        "java.util.jar.Pack200.Packer.pack(java.util.jar.JarFile,java.io.OutputStream)"
    ],
    "javax.swing.undo.undoableeditsupport.getupdatelevel": [
        "javax.swing.undo.UndoableEditSupport.getUpdateLevel()"
    ],
    "java.time.format.datetimeformatter.toformat": [
        "java.time.format.DateTimeFormatter.toFormat()",
        "java.time.format.DateTimeFormatter.toFormat(java.time.temporal.TemporalQuery<?>)"
    ],
    "javax.swing.plaf.metal.metalrootpaneui.createui": [
        "javax.swing.plaf.metal.MetalRootPaneUI.createUI(javax.swing.JComponent)"
    ],
    "java.util.concurrent.locks.reentrantlock.hasqueuedthread": [
        "java.util.concurrent.locks.ReentrantLock.hasQueuedThread(java.lang.Thread)"
    ],
    "javax.swing.tree.abstractlayoutcache.setmodel": [
        "javax.swing.tree.AbstractLayoutCache.setModel(javax.swing.tree.TreeModel)"
    ],
    "javax.swing.text.flowview.flowstrategy.getlogicalview": [
        "javax.swing.text.FlowView.FlowStrategy.getLogicalView(javax.swing.text.FlowView)"
    ],
    "java.util.prefs.abstractpreferences.get": [
        "java.util.prefs.AbstractPreferences.get(java.lang.String,java.lang.String)"
    ],
    "javax.management.timer.timer.getnboccurences": [
        "javax.management.timer.Timer.getNbOccurences(java.lang.Integer)"
    ],
    "java.util.treeset.iterator": [
        "java.util.TreeSet.iterator()"
    ],
    "javax.sql.rowsetmetadata.setcolumnlabel": [
        "javax.sql.RowSetMetaData.setColumnLabel(int,java.lang.String)"
    ],
    "javax.swing.jtabbedpane.gettabcomponentat": [
        "javax.swing.JTabbedPane.getTabComponentAt(int)"
    ],
    "java.time.offsettime.getsecond": [
        "java.time.OffsetTime.getSecond()"
    ],
    "org.omg.dynamicany._dynarraystub.get_typecode": [
        "org.omg.DynamicAny._DynArrayStub.get_typecode()"
    ],
    "java.lang.reflect.method.getdeclaringclass": [
        "java.lang.reflect.Method.getDeclaringClass()"
    ],
    "org.w3c.dom.ls.lsinput.getcertifiedtext": [
        "org.w3c.dom.ls.LSInput.getCertifiedText()"
    ],
    "javax.naming.context.lookuplink": [
        "javax.naming.Context.lookupLink(javax.naming.Name)",
        "javax.naming.Context.lookupLink(java.lang.String)"
    ],
    "java.net.multicastsocket.joingroup": [
        "java.net.MulticastSocket.joinGroup(java.net.SocketAddress,java.net.NetworkInterface)",
        "java.net.MulticastSocket.joinGroup(java.net.InetAddress)"
    ],
    "org.xml.sax.helpers.parseradapter.setentityresolver": [
        "org.xml.sax.helpers.ParserAdapter.setEntityResolver(org.xml.sax.EntityResolver)"
    ],
    "java.awt.image.colormodel.getdataelement": [
        "java.awt.image.ColorModel.getDataElement(int[],int)",
        "java.awt.image.ColorModel.getDataElement(float[],int)"
    ],
    "java.security.signature.clone": [
        "java.security.Signature.clone()"
    ],
    "java.sql.callablestatement.setnclob": [
        "java.sql.CallableStatement.setNClob(java.lang.String,java.io.Reader,long)",
        "java.sql.CallableStatement.setNClob(java.lang.String,java.io.Reader)",
        "java.sql.CallableStatement.setNClob(java.lang.String,java.sql.NClob)"
    ],
    "javax.crypto.cipher.getparameters": [
        "javax.crypto.Cipher.getParameters()"
    ],
    "javax.lang.model.util.abstracttypevisitor6.visit": [
        "javax.lang.model.util.AbstractTypeVisitor6.visit(javax.lang.model.type.TypeMirror)",
        "javax.lang.model.util.AbstractTypeVisitor6.visit(javax.lang.model.type.TypeMirror,javax.lang.model.util.AbstractTypeVisitor6)"
    ],
    "javax.swing.imageicon.geticonwidth": [
        "javax.swing.ImageIcon.getIconWidth()"
    ],
    "javax.swing.plaf.multi.multitableheaderui.createui": [
        "javax.swing.plaf.multi.MultiTableHeaderUI.createUI(javax.swing.JComponent)"
    ],
    "javax.swing.abstractbutton.getactioncommand": [
        "javax.swing.AbstractButton.getActionCommand()"
    ],
    "java.util.identityhashmap.put": [
        "java.util.IdentityHashMap.put(java.util.IdentityHashMap,java.util.IdentityHashMap)",
        "java.util.IdentityHashMap.put(K,V)"
    ],
    "java.sql.databasemetadata.supportsresultsetholdability": [
        "java.sql.DatabaseMetaData.supportsResultSetHoldability(int)"
    ],
    "java.awt.image.databufferdouble.getbankdata": [
        "java.awt.image.DataBufferDouble.getBankData()"
    ],
    "javax.xml.ws.spi.servicedelegate.getwsdldocumentlocation": [
        "javax.xml.ws.spi.ServiceDelegate.getWSDLDocumentLocation()"
    ],
    "java.nio.file.attribute.aclentryflag.valueof": [
        "java.nio.file.attribute.AclEntryFlag.valueOf(java.lang.String)"
    ],
    "javax.security.auth.privatecredentialpermission.newpermissioncollection": [
        "javax.security.auth.PrivateCredentialPermission.newPermissionCollection()"
    ],
    "javax.xml.parsers.saxparserfactory.getfeature": [
        "javax.xml.parsers.SAXParserFactory.getFeature(java.lang.String)"
    ],
    "javax.swing.jscrollbar.setenabled": [
        "javax.swing.JScrollBar.setEnabled(boolean)"
    ],
    "java.nio.charbuffer.duplicate": [
        "java.nio.CharBuffer.duplicate()"
    ],
    "java.util.stream.doublestream.builder": [
        "java.util.stream.DoubleStream.builder()"
    ],
    "javax.swing.plaf.multi.multilistui.getcellbounds": [
        "javax.swing.plaf.multi.MultiListUI.getCellBounds(javax.swing.JList,int,int)"
    ],
    "javax.xml.bind.helpers.abstractmarshallerimpl.setnonsschemalocation": [
        "javax.xml.bind.helpers.AbstractMarshallerImpl.setNoNSSchemaLocation(java.lang.String)"
    ],
    "java.security.cert.certificate.hashcode": [
        "java.security.cert.Certificate.hashCode()"
    ],
    "java.security.cert.pkixcertpathvalidatorresult.tostring": [
        "java.security.cert.PKIXCertPathValidatorResult.toString()"
    ],
    "org.omg.portableserver.servant._set_delegate": [
        "org.omg.PortableServer.Servant._set_delegate(org.omg.PortableServer.portable.Delegate)"
    ],
    "javax.swing.jtabbedpane.removeall": [
        "javax.swing.JTabbedPane.removeAll()"
    ],
    "javax.swing.jtoolbar.getorientation": [
        "javax.swing.JToolBar.getOrientation()"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.ignorablewhitespace": [
        "org.xml.sax.helpers.XMLFilterImpl.ignorableWhitespace(char[],int,int)"
    ],
    "javax.swing.abstractbutton.isselected": [
        "javax.swing.AbstractButton.isSelected()"
    ],
    "org.omg.corba.byteholder._write": [
        "org.omg.CORBA.ByteHolder._write(org.omg.CORBA.portable.OutputStream)"
    ],
    "javax.management.openmbean.arraytype.tostring": [
        "javax.management.openmbean.ArrayType.toString()"
    ],
    "javax.swing.springlayout.constraints.setx": [
        "javax.swing.SpringLayout.Constraints.setX(javax.swing.Spring)"
    ],
    "org.omg.corba.request.target": [
        "org.omg.CORBA.Request.target()"
    ],
    "java.time.format.textstyle.asnormal": [
        "java.time.format.TextStyle.asNormal()"
    ],
    "javax.naming.binding.getclassname": [
        "javax.naming.Binding.getClassName()"
    ],
    "javax.sound.sampled.reverbtype.getdecaytime": [
        "javax.sound.sampled.ReverbType.getDecayTime()"
    ],
    "javax.lang.model.sourceversion.values": [
        "javax.lang.model.SourceVersion.values()"
    ],
    "java.lang.class.getenclosingclass": [
        "java.lang.Class.getEnclosingClass()"
    ],
    "javax.swing.jpopupmenu.getmenukeylisteners": [
        "javax.swing.JPopupMenu.getMenuKeyListeners()"
    ],
    "java.util.zip.zipentry.setextra": [
        "java.util.zip.ZipEntry.setExtra(byte[])"
    ],
    "javax.print.attribute.setofintegersyntax.hashcode": [
        "javax.print.attribute.SetOfIntegerSyntax.hashCode()"
    ],
    "java.awt.print.printerjob.cancel": [
        "java.awt.print.PrinterJob.cancel()"
    ],
    "javax.swing.jlayer.getaccessiblecontext": [
        "javax.swing.JLayer.getAccessibleContext()"
    ],
    "javax.swing.jmenuitem.processmouseevent": [
        "javax.swing.JMenuItem.processMouseEvent(java.awt.event.MouseEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)"
    ],
    "javax.swing.text.styleconstants.getrightindent": [
        "javax.swing.text.StyleConstants.getRightIndent(javax.swing.text.AttributeSet)"
    ],
    "javax.net.ssl.sslsession.getpeerport": [
        "javax.net.ssl.SSLSession.getPeerPort()"
    ],
    "javax.swing.text.flowview.calculateminoraxisrequirements": [
        "javax.swing.text.FlowView.calculateMinorAxisRequirements(int,javax.swing.SizeRequirements)"
    ],
    "java.sql.databasemetadata.getcatalogs": [
        "java.sql.DatabaseMetaData.getCatalogs()"
    ],
    "javax.lang.model.type.typevariable.getlowerbound": [
        "javax.lang.model.type.TypeVariable.getLowerBound()"
    ],
    "java.text.breakiterator.following": [
        "java.text.BreakIterator.following(int)"
    ],
    "javax.naming.directory.attribute.clear": [
        "javax.naming.directory.Attribute.clear()"
    ],
    "javax.swing.jsplitpane.setui": [
        "javax.swing.JSplitPane.setUI(javax.swing.plaf.SplitPaneUI)"
    ],
    "java.lang.invoke.methodhandle.tostring": [
        "java.lang.invoke.MethodHandle.toString()"
    ],
    "java.nio.bytebuffer.aslongbuffer": [
        "java.nio.ByteBuffer.asLongBuffer()"
    ],
    "org.omg.dynamicany._dynanystub.get_double": [
        "org.omg.DynamicAny._DynAnyStub.get_double()"
    ],
    "java.awt.geom.affinetransform.preconcatenate": [
        "java.awt.geom.AffineTransform.preConcatenate(java.awt.geom.AffineTransform)"
    ],
    "javax.swing.jtree.getdropmode": [
        "javax.swing.JTree.getDropMode()"
    ],
    "javax.swing.plaf.basic.basicoptionpaneui.createmessagearea": [
        "javax.swing.plaf.basic.BasicOptionPaneUI.createMessageArea()"
    ],
    "java.lang.long.remainderunsigned": [
        "java.lang.Long.remainderUnsigned(long,long)"
    ],
    "javax.swing.popupfactory.getsharedinstance": [
        "javax.swing.PopupFactory.getSharedInstance()"
    ],
    "java.util.concurrent.countdownlatch.await": [
        "java.util.concurrent.CountDownLatch.await()",
        "java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)"
    ],
    "java.awt.displaymode.getrefreshrate": [
        "java.awt.DisplayMode.getRefreshRate()"
    ],
    "javax.security.auth.kerberos.kerberosticket.getclient": [
        "javax.security.auth.kerberos.KerberosTicket.getClient()"
    ],
    "javax.swing.text.abstractwriter.getendoffset": [
        "javax.swing.text.AbstractWriter.getEndOffset()"
    ],
    "java.util.stream.doublestream.map": [
        "java.util.stream.DoubleStream.map(java.util.function.DoubleUnaryOperator)"
    ],
    "java.nio.file.spi.filesystemprovider.getfilesystem": [
        "java.nio.file.spi.FileSystemProvider.getFileSystem(java.net.URI)"
    ],
    "javax.swing.text.html.html.getattributekey": [
        "javax.swing.text.html.HTML.getAttributeKey(java.lang.String)"
    ],
    "java.awt.list.getrows": [
        "java.awt.List.getRows()"
    ],
    "java.awt.image.renderable.parameterblock.getdoubleparameter": [
        "java.awt.image.renderable.ParameterBlock.getDoubleParameter(int)"
    ],
    "org.xml.sax.xmlreader.geterrorhandler": [
        "org.xml.sax.XMLReader.getErrorHandler()"
    ],
    "java.text.attributedcharacteriterator.getattribute": [
        "java.text.AttributedCharacterIterator.getAttribute(java.text.AttributedCharacterIterator.Attribute)"
    ],
    "javax.xml.bind.typeconstraintexception.tostring": [
        "javax.xml.bind.TypeConstraintException.toString()"
    ],
    "javax.swing.tree.variableheightlayoutcache.getrowforpath": [
        "javax.swing.tree.VariableHeightLayoutCache.getRowForPath(javax.swing.tree.TreePath)"
    ],
    "org.omg.dynamicany._dynstructstub.get_wchar": [
        "org.omg.DynamicAny._DynStructStub.get_wchar()"
    ],
    "javax.swing.grouplayout.createbaselinegroup": [
        "javax.swing.GroupLayout.createBaselineGroup(boolean,boolean)"
    ],
    "javax.management.query.lt": [
        "javax.management.Query.lt(javax.management.ValueExp,javax.management.ValueExp)"
    ],
    "java.awt.component.setcomponentorientation": [
        "java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"
    ],
    "javax.naming.nameclasspair.setname": [
        "javax.naming.NameClassPair.setName(java.lang.String)"
    ],
    "javax.xml.transform.sax.saxresult.getsystemid": [
        "javax.xml.transform.sax.SAXResult.getSystemId()"
    ],
    "javax.xml.crypto.keyselector.select": [
        "javax.xml.crypto.KeySelector.select(javax.xml.crypto.dsig.keyinfo.KeyInfo,javax.xml.crypto.KeySelector.Purpose,javax.xml.crypto.AlgorithmMethod,javax.xml.crypto.XMLCryptoContext)"
    ],
    "javax.accessibility.accessibletable.isaccessiblecolumnselected": [
        "javax.accessibility.AccessibleTable.isAccessibleColumnSelected(int)"
    ],
    "org.omg.dynamicany._dynstructstub.type": [
        "org.omg.DynamicAny._DynStructStub.type()"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.unparsedentitydecl": [
        "org.xml.sax.helpers.XMLFilterImpl.unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
    ],
    "java.math.bigdecimal.tostring": [
        "java.math.BigDecimal.toString()"
    ],
    "javax.imageio.imagereader.processimagestarted": [
        "javax.imageio.ImageReader.processImageStarted(int)"
    ],
    "java.sql.timestamp.tolocaldatetime": [
        "java.sql.Timestamp.toLocalDateTime()"
    ],
    "javax.swing.text.stylecontext.getstaticattributekey": [
        "javax.swing.text.StyleContext.getStaticAttributeKey(java.lang.Object)"
    ],
    "java.time.offsetdatetime.ofinstant": [
        "java.time.OffsetDateTime.ofInstant(java.time.Instant,java.time.ZoneId)"
    ],
    "javax.swing.jtoolbar.getmargin": [
        "javax.swing.JToolBar.getMargin()"
    ],
    "javax.management.modelmbean.descriptorsupport.tostring": [
        "javax.management.modelmbean.DescriptorSupport.toString()"
    ],
    "java.util.arrays.fill": [
        "java.util.Arrays.fill(byte[],int,int,byte)",
        "java.util.Arrays.fill(char[],char)",
        "java.util.Arrays.fill(long[],int,int,long)",
        "java.util.Arrays.fill(long[],long)",
        "java.util.Arrays.fill(char[],int,int,char)",
        "java.util.Arrays.fill(java.lang.Object,java.lang.Object)",
        "java.util.Arrays.fill(double[],double)",
        "java.util.Arrays.fill(boolean[],boolean)",
        "java.util.Arrays.fill(float[],float)",
        "java.util.Arrays.fill(short[],short)",
        "java.util.Arrays.fill(java.lang.Object[],java.lang.Object)",
        "java.util.Arrays.fill(java.lang.Object,int,int,java.lang.Object)",
        "java.util.Arrays.fill(int[],int)",
        "java.util.Arrays.fill(boolean[],int,int,boolean)",
        "java.util.Arrays.fill(short[],int,int,short)",
        "java.util.Arrays.fill(float[],int,int,float)",
        "java.util.Arrays.fill(byte[],byte)",
        "java.util.Arrays.fill(int[],int,int,int)",
        "java.util.Arrays.fill(double[],int,int,double)",
        "java.util.Arrays.fill(java.lang.Object[],int,int,java.lang.Object)"
    ],
    "java.sql.statement.getresultsetholdability": [
        "java.sql.Statement.getResultSetHoldability()"
    ],
    "javax.swing.text.defaultstyleddocument.elementspec.setdirection": [
        "javax.swing.text.DefaultStyledDocument.ElementSpec.setDirection(short)"
    ],
    "javax.swing.tree.defaultmutabletreenode.breadthfirstenumeration": [
        "javax.swing.tree.DefaultMutableTreeNode.breadthFirstEnumeration()"
    ],
    "java.io.objectinput.readobject": [
        "java.io.ObjectInput.readObject()"
    ],
    "javax.swing.abstractbutton.iscontentareafilled": [
        "javax.swing.AbstractButton.isContentAreaFilled()"
    ],
    "org.omg.dynamicany._dynstructstub.insert_ushort": [
        "org.omg.DynamicAny._DynStructStub.insert_ushort(short)"
    ],
    "org.omg.dynamicany._dynenumstub.seek": [
        "org.omg.DynamicAny._DynEnumStub.seek(int)"
    ],
    "javax.management.runtimeerrorexception.getcause": [
        "javax.management.RuntimeErrorException.getCause()"
    ],
    "java.util.concurrent.forkjoinpool.tostring": [
        "java.util.concurrent.ForkJoinPool.toString()"
    ],
    "java.nio.buffer.limit": [
        "java.nio.Buffer.limit()",
        "java.nio.Buffer.limit(int)"
    ],
    "java.awt.image.componentcolormodel.getred": [
        "java.awt.image.ComponentColorModel.getRed(java.lang.Object)",
        "java.awt.image.ComponentColorModel.getRed(int)"
    ],
    "java.security.signature.update": [
        "java.security.Signature.update(byte[])",
        "java.security.Signature.update(byte)",
        "java.security.Signature.update(byte[],int,int)",
        "java.security.Signature.update(java.nio.ByteBuffer)"
    ],
    "javax.swing.transferhandler.importdata": [
        "javax.swing.TransferHandler.importData(javax.swing.TransferHandler.TransferSupport)",
        "javax.swing.TransferHandler.importData(javax.swing.JComponent,java.awt.datatransfer.Transferable)"
    ],
    "javax.swing.jtextarea.gettabsize": [
        "javax.swing.JTextArea.getTabSize()"
    ],
    "java.nio.file.spi.filesystemprovider.checkaccess": [
        "java.nio.file.spi.FileSystemProvider.checkAccess(java.nio.file.Path,java.nio.file.AccessMode...)",
        "java.nio.file.spi.FileSystemProvider.checkAccess(java.nio.file.Path,java.nio.file.AccessMode)"
    ],
    "javax.swing.jinternalframe.getaccessiblecontext": [
        "javax.swing.JInternalFrame.getAccessibleContext()"
    ],
    "java.time.period.negated": [
        "java.time.Period.negated()"
    ],
    "javax.swing.text.abstractdocument.content.createposition": [
        "javax.swing.text.AbstractDocument.Content.createPosition(int)"
    ],
    "java.security.spec.dsagenparameterspec.getsubprimeqlength": [
        "java.security.spec.DSAGenParameterSpec.getSubprimeQLength()"
    ],
    "javax.net.ssl.sslengine.getsslparameters": [
        "javax.net.ssl.SSLEngine.getSSLParameters()"
    ],
    "javax.swing.text.stylecontext.addattribute": [
        "javax.swing.text.StyleContext.addAttribute(javax.swing.text.AttributeSet,java.lang.Object,java.lang.Object)"
    ],
    "java.awt.geom.point2d.float.setlocation": [
        "java.awt.geom.Point2D.Float.setLocation(double,double)",
        "java.awt.geom.Point2D.Float.setLocation(float,float)"
    ],
    "java.time.format.datetimeformatterbuilder.appendvaluereduced": [
        "java.time.format.DateTimeFormatterBuilder.appendValueReduced(java.time.temporal.TemporalField,int,int,java.time.chrono.ChronoLocalDate)",
        "java.time.format.DateTimeFormatterBuilder.appendValueReduced(java.time.temporal.TemporalField,int,int,int)"
    ],
    "java.nio.bytebuffer.getlong": [
        "java.nio.ByteBuffer.getLong()",
        "java.nio.ByteBuffer.getLong(int)"
    ],
    "java.io.file.setwritable": [
        "java.io.File.setWritable(boolean,boolean)",
        "java.io.File.setWritable(boolean)"
    ],
    "javax.swing.plaf.multi.multipanelui.getuis": [
        "javax.swing.plaf.multi.MultiPanelUI.getUIs()"
    ],
    "java.sql.databasemetadata.supportscoresqlgrammar": [
        "java.sql.DatabaseMetaData.supportsCoreSQLGrammar()"
    ],
    "javax.tools.simplejavafileobject.isnamecompatible": [
        "javax.tools.SimpleJavaFileObject.isNameCompatible(java.lang.String,javax.tools.JavaFileObject.Kind)"
    ],
    "javax.management.mbeanregistration.prederegister": [
        "javax.management.MBeanRegistration.preDeregister()"
    ],
    "javax.lang.model.util.elementscanner6.visittype": [
        "javax.lang.model.util.ElementScanner6.visitType(javax.lang.model.element.TypeElement,javax.lang.model.util.ElementScanner6)"
    ],
    "javax.net.ssl.sslserversocket.setenabledciphersuites": [
        "javax.net.ssl.SSLServerSocket.setEnabledCipherSuites(java.lang.String[])",
        "javax.net.ssl.SSLServerSocket.setEnabledCipherSuites(java.lang.String)"
    ],
    "javax.lang.model.util.elementscanner7.visitvariable": [
        "javax.lang.model.util.ElementScanner7.visitVariable(javax.lang.model.element.VariableElement,javax.lang.model.util.ElementScanner7)"
    ],
    "java.util.concurrent.linkedblockingdeque.add": [
        "java.util.concurrent.LinkedBlockingDeque.add(E)",
        "java.util.concurrent.LinkedBlockingDeque.add(java.util.concurrent.LinkedBlockingDeque)"
    ],
    "javax.sound.sampled.line.getcontrols": [
        "javax.sound.sampled.Line.getControls()"
    ],
    "java.security.provider.replaceall": [
        "java.security.Provider.replaceAll(java.util.function.BiFunction<? super,? super,? extends java.lang.Object>)"
    ],
    "javax.swing.joptionpane.showmessagedialog": [
        "javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int,javax.swing.Icon)",
        "javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object)",
        "javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)"
    ],
    "java.lang.management.managementfactory.getplatformmxbean": [
        "java.lang.management.ManagementFactory.getPlatformMXBean(javax.management.MBeanServerConnection,java.lang.Class<T>)",
        "java.lang.management.ManagementFactory.getPlatformMXBean(java.lang.Class<T>)"
    ],
    "javax.lang.model.type.executabletype.getreturntype": [
        "javax.lang.model.type.ExecutableType.getReturnType()"
    ],
    "javax.swing.menuselectionmanager.setselectedpath": [
        "javax.swing.MenuSelectionManager.setSelectedPath(javax.swing.MenuElement[])"
    ],
    "javax.swing.plaf.basic.basicoptionpaneui.addicon": [
        "javax.swing.plaf.basic.BasicOptionPaneUI.addIcon(java.awt.Container)"
    ],
    "javax.imageio.imagewriter.getpreferredthumbnailsizes": [
        "javax.imageio.ImageWriter.getPreferredThumbnailSizes(javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam,javax.imageio.metadata.IIOMetadata,javax.imageio.metadata.IIOMetadata)"
    ],
    "org.ietf.jgss.messageprop.getminorstring": [
        "org.ietf.jgss.MessageProp.getMinorString()"
    ],
    "java.lang.invoke.methodhandles.lookup.lookupclass": [
        "java.lang.invoke.MethodHandles.Lookup.lookupClass()"
    ],
    "org.omg.corba.any.extract_typecode": [
        "org.omg.CORBA.Any.extract_TypeCode()"
    ],
    "javax.swing.text.html.htmleditorkit.setdefaultcursor": [
        "javax.swing.text.html.HTMLEditorKit.setDefaultCursor(java.awt.Cursor)"
    ],
    "javax.swing.jtable.setshowgrid": [
        "javax.swing.JTable.setShowGrid(boolean)"
    ],
    "org.omg.dynamicany._dynsequencestub.copy": [
        "org.omg.DynamicAny._DynSequenceStub.copy()"
    ],
    "javax.management.mbeanserverconnection.getattributes": [
        "javax.management.MBeanServerConnection.getAttributes(javax.management.ObjectName,java.lang.String[])"
    ],
    "javax.swing.plaf.synth.synthviewportui.installdefaults": [
        "javax.swing.plaf.synth.SynthViewportUI.installDefaults(javax.swing.JComponent)"
    ],
    "org.omg.dynamicany._dynunionstub.insert_any": [
        "org.omg.DynamicAny._DynUnionStub.insert_any(org.omg.CORBA.Any)"
    ],
    "java.text.rulebasedcollator.compare": [
        "java.text.RuleBasedCollator.compare(java.lang.String,java.lang.String)"
    ],
    "java.lang.management.memorymanagermxbean.getmemorypoolnames": [
        "java.lang.management.MemoryManagerMXBean.getMemoryPoolNames()"
    ],
    "javax.swing.text.document.gettext": [
        "javax.swing.text.Document.getText(int,int)",
        "javax.swing.text.Document.getText(int,int,javax.swing.text.Segment)"
    ],
    "javax.swing.jslider.getmaximum": [
        "javax.swing.JSlider.getMaximum()"
    ],
    "java.sql.array.getarray": [
        "java.sql.Array.getArray()",
        "java.sql.Array.getArray(long,int,,java.lang.Class<?>>)",
        "java.sql.Array.getArray(long,int)",
        "java.sql.Array.getArray(,java.lang.Class<?>>)"
    ],
    "java.io.filedescriptor.sync": [
        "java.io.FileDescriptor.sync()"
    ],
    "java.net.socketimpl.getinetaddress": [
        "java.net.SocketImpl.getInetAddress()"
    ],
    "java.security.keypairgeneratorspi.generatekeypair": [
        "java.security.KeyPairGeneratorSpi.generateKeyPair()"
    ],
    "javax.management.openmbean.simpletype.tostring": [
        "javax.management.openmbean.SimpleType.toString()"
    ],
    "javax.swing.plaf.synth.synthpainter.painttoolbardragwindowborder": [
        "javax.swing.plaf.synth.SynthPainter.paintToolBarDragWindowBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",
        "javax.swing.plaf.synth.SynthPainter.paintToolBarDragWindowBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)"
    ],
    "java.util.concurrent.atomic.longaccumulator.tostring": [
        "java.util.concurrent.atomic.LongAccumulator.toString()"
    ],
    "java.lang.math.asin": [
        "java.lang.Math.asin(double)"
    ],
    "javax.swing.border.titledborder.gettitlejustification": [
        "javax.swing.border.TitledBorder.getTitleJustification()"
    ],
    "org.omg.corba.portable.inputstream.read_boolean_array": [
        "org.omg.CORBA.portable.InputStream.read_boolean_array(boolean[],int,int)"
    ],
    "java.awt.component.printall": [
        "java.awt.Component.printAll(java.awt.Graphics)"
    ],
    "java.net.inetaddress.getloopbackaddress": [
        "java.net.InetAddress.getLoopbackAddress()"
    ],
    "java.nio.channels.channels.newinputstream": [
        "java.nio.channels.Channels.newInputStream(java.nio.channels.ReadableByteChannel)",
        "java.nio.channels.Channels.newInputStream(java.nio.channels.AsynchronousByteChannel)"
    ],
    "java.awt.image.databufferfloat.getelem": [
        "java.awt.image.DataBufferFloat.getElem(int,int)"
    ],
    "java.io.inputstream.reset": [
        "java.io.InputStream.reset()"
    ],
    "java.lang.string.hashcode": [
        "java.lang.String.hashCode()"
    ],
    "java.beans.encoder.get": [
        "java.beans.Encoder.get(java.lang.Object)"
    ],
    "javax.swing.jtabbedpane.removetabat": [
        "javax.swing.JTabbedPane.removeTabAt(int)"
    ],
    "javax.xml.stream.events.startdocument.getcharacterencodingscheme": [
        "javax.xml.stream.events.StartDocument.getCharacterEncodingScheme()"
    ],
    "java.rmi.naming.rebind": [
        "java.rmi.Naming.rebind(java.lang.String,java.rmi.Remote)"
    ],
    "javax.sound.midi.synthesizer.getchannels": [
        "javax.sound.midi.Synthesizer.getChannels()"
    ],
    "java.awt.font.getpsname": [
        "java.awt.Font.getPSName()"
    ],
    "javax.naming.spi.namingmanager.setobjectfactorybuilder": [
        "javax.naming.spi.NamingManager.setObjectFactoryBuilder(javax.naming.spi.ObjectFactoryBuilder)"
    ],
    "javax.swing.jradiobutton.paramstring": [
        "javax.swing.JRadioButton.paramString()"
    ],
    "javax.sql.rowset.baserowset.addrowsetlistener": [
        "javax.sql.rowset.BaseRowSet.addRowSetListener(javax.sql.RowSetListener)"
    ],
    "org.omg.dynamicany.dynanyoperations.get_wstring": [
        "org.omg.DynamicAny.DynAnyOperations.get_wstring()"
    ],
    "javax.swing.plaf.synth.synthtabbedpaneui.paintborder": [
        "javax.swing.plaf.synth.SynthTabbedPaneUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.util.stream.collector.accumulator": [
        "java.util.stream.Collector.accumulator()"
    ],
    "javax.swing.plaf.basic.basictoolbarui.getnonrolloverborder": [
        "javax.swing.plaf.basic.BasicToolBarUI.getNonRolloverBorder(javax.swing.AbstractButton)"
    ],
    "java.lang.stacktraceelement.tostring": [
        "java.lang.StackTraceElement.toString()"
    ],
    "javax.swing.jtree.paramstring": [
        "javax.swing.JTree.paramString()"
    ],
    "java.time.temporal.temporaladjusters.nextorsame": [
        "java.time.temporal.TemporalAdjusters.nextOrSame(java.time.DayOfWeek)"
    ],
    "java.util.resourcebundle.control.newbundle": [
        "java.util.ResourceBundle.Control.newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)"
    ],
    "java.awt.keyboardfocusmanager.getdefaultfocustraversalpolicy": [
        "java.awt.KeyboardFocusManager.getDefaultFocusTraversalPolicy()"
    ],
    "java.util.serviceloader.tostring": [
        "java.util.ServiceLoader.toString()"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getinactivecontroltextcolor": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getInactiveControlTextColor()"
    ],
    "javax.swing.plaf.metal.oceantheme.getblack": [
        "javax.swing.plaf.metal.OceanTheme.getBlack()"
    ],
    "javax.net.ssl.sslsessioncontext.setsessiontimeout": [
        "javax.net.ssl.SSLSessionContext.setSessionTimeout(int)"
    ],
    "java.beans.beancontext.beancontextservicessupport.fireserviceadded": [
        "java.beans.beancontext.BeanContextServicesSupport.fireServiceAdded(java.beans.beancontext.BeanContextServiceAvailableEvent)",
        "java.beans.beancontext.BeanContextServicesSupport.fireServiceAdded(java.lang.Class)"
    ],
    "java.sql.databasemetadata.getpseudocolumns": [
        "java.sql.DatabaseMetaData.getPseudoColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
    ],
    "javax.swing.text.flowview.getflowaxis": [
        "javax.swing.text.FlowView.getFlowAxis()"
    ],
    "org.omg.dynamicany._dynunionstub.next": [
        "org.omg.DynamicAny._DynUnionStub.next()"
    ],
    "javax.swing.plaf.multi.multisplitpaneui.getminimumdividerlocation": [
        "javax.swing.plaf.multi.MultiSplitPaneUI.getMinimumDividerLocation(javax.swing.JSplitPane)"
    ],
    "javax.swing.plaf.multi.multilistui.getuis": [
        "javax.swing.plaf.multi.MultiListUI.getUIs()"
    ],
    "java.awt.container.processevent": [
        "java.awt.Container.processEvent(java.awt.AWTEvent)"
    ],
    "javax.rmi.corba.stub.connect": [
        "javax.rmi.CORBA.Stub.connect(org.omg.CORBA.ORB)"
    ],
    "java.util.stream.doublestream.boxed": [
        "java.util.stream.DoubleStream.boxed()"
    ],
    "java.lang.reflect.array.setchar": [
        "java.lang.reflect.Array.setChar(java.lang.Object,int,char)"
    ],
    "javax.swing.jtextarea.getpreferredsize": [
        "javax.swing.JTextArea.getPreferredSize()"
    ],
    "javax.swing.jtextfield.createdefaultmodel": [
        "javax.swing.JTextField.createDefaultModel()"
    ],
    "java.lang.threadgroup.activegroupcount": [
        "java.lang.ThreadGroup.activeGroupCount()"
    ],
    "javax.management.loading.mletcontent.getattributes": [
        "javax.management.loading.MLetContent.getAttributes()"
    ],
    "javax.swing.jdialog.getcontentpane": [
        "javax.swing.JDialog.getContentPane()"
    ],
    "java.util.logging.logger.getresourcebundle": [
        "java.util.logging.Logger.getResourceBundle()"
    ],
    "javax.print.attribute.standard.printeruri.equals": [
        "javax.print.attribute.standard.PrinterURI.equals(java.lang.Object)"
    ],
    "javax.swing.jcombobox.firepopupmenucanceled": [
        "javax.swing.JComboBox.firePopupMenuCanceled()"
    ],
    "javax.security.auth.subject.isreadonly": [
        "javax.security.auth.Subject.isReadOnly()"
    ],
    "javax.swing.text.abstractwriter.writeattributes": [
        "javax.swing.text.AbstractWriter.writeAttributes(javax.swing.text.AttributeSet)"
    ],
    "javax.swing.jdialog.setrootpane": [
        "javax.swing.JDialog.setRootPane(javax.swing.JRootPane)"
    ],
    "java.nio.charset.coderresult.isunderflow": [
        "java.nio.charset.CoderResult.isUnderflow()"
    ],
    "javax.swing.plaf.synth.synthpopupmenuui.paintborder": [
        "javax.swing.plaf.synth.SynthPopupMenuUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.text.labelview.changedupdate": [
        "javax.swing.text.LabelView.changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "java.applet.applet.getcodebase": [
        "java.applet.Applet.getCodeBase()"
    ],
    "java.awt.printgraphics.getprintjob": [
        "java.awt.PrintGraphics.getPrintJob()"
    ],
    "java.beans.featuredescriptor.getshortdescription": [
        "java.beans.FeatureDescriptor.getShortDescription()"
    ],
    "java.awt.font.graphicattribute.getbounds": [
        "java.awt.font.GraphicAttribute.getBounds()"
    ],
    "javax.xml.bind.datatypeconverterinterface.parselong": [
        "javax.xml.bind.DatatypeConverterInterface.parseLong(java.lang.String)"
    ],
    "javax.swing.tree.fixedheightlayoutcache.setrowheight": [
        "javax.swing.tree.FixedHeightLayoutCache.setRowHeight(int)"
    ],
    "java.text.decimalformatsymbols.getzerodigit": [
        "java.text.DecimalFormatSymbols.getZeroDigit()"
    ],
    "java.text.spi.breakiteratorprovider.getwordinstance": [
        "java.text.spi.BreakIteratorProvider.getWordInstance(java.util.Locale)"
    ],
    "org.omg.corba.policyoperations.policy_type": [
        "org.omg.CORBA.PolicyOperations.policy_type()"
    ],
    "java.time.duration.ofminutes": [
        "java.time.Duration.ofMinutes(long)"
    ],
    "javax.naming.ldap.sortkey.getmatchingruleid": [
        "javax.naming.ldap.SortKey.getMatchingRuleID()"
    ],
    "java.awt.awteventmulticaster.componenthidden": [
        "java.awt.AWTEventMulticaster.componentHidden(java.awt.event.ComponentEvent)"
    ],
    "javax.swing.jtabbedpane.gettabplacement": [
        "javax.swing.JTabbedPane.getTabPlacement()"
    ],
    "javax.xml.bind.jaxbintrospector.getvalue": [
        "javax.xml.bind.JAXBIntrospector.getValue(java.lang.Object)"
    ],
    "javax.script.simplebindings.keyset": [
        "javax.script.SimpleBindings.keySet()"
    ],
    "javax.swing.jtable.initializelocalvars": [
        "javax.swing.JTable.initializeLocalVars()"
    ],
    "java.nio.file.attribute.posixfileattributes.permissions": [
        "java.nio.file.attribute.PosixFileAttributes.permissions()"
    ],
    "java.lang.management.monitorinfo.getlockedstackframe": [
        "java.lang.management.MonitorInfo.getLockedStackFrame()"
    ],
    "javax.swing.text.abstractdocument.writelock": [
        "javax.swing.text.AbstractDocument.writeLock()"
    ],
    "javax.print.attribute.size2dsyntax.equals": [
        "javax.print.attribute.Size2DSyntax.equals(java.lang.Object)"
    ],
    "javax.swing.debuggraphics.getfont": [
        "javax.swing.DebugGraphics.getFont()"
    ],
    "javax.swing.swingworker.get": [
        "javax.swing.SwingWorker.get()"
    ],
    "javax.crypto.interfaces.dhpublickey.gety": [
        "javax.crypto.interfaces.DHPublicKey.getY()"
    ],
    "javax.lang.model.util.simpletypevisitor6.visitarray": [
        "javax.lang.model.util.SimpleTypeVisitor6.visitArray(javax.lang.model.type.ArrayType,javax.lang.model.util.SimpleTypeVisitor6)"
    ],
    "javax.imageio.imagewriteparam.gettilewidth": [
        "javax.imageio.ImageWriteParam.getTileWidth()"
    ],
    "org.w3c.dom.document.renamenode": [
        "org.w3c.dom.Document.renameNode(org.w3c.dom.Node,java.lang.String,java.lang.String)"
    ],
    "java.security.signature.setparameter": [
        "java.security.Signature.setParameter(java.security.spec.AlgorithmParameterSpec)"
    ],
    "javax.crypto.mac.update": [
        "javax.crypto.Mac.update(byte[])",
        "javax.crypto.Mac.update(byte[],int,int)",
        "javax.crypto.Mac.update(byte)"
    ],
    "java.lang.math.cbrt": [
        "java.lang.Math.cbrt(double)"
    ],
    "javax.sound.sampled.control.type.equals": [
        "javax.sound.sampled.Control.Type.equals(java.lang.Object)"
    ],
    "javax.swing.defaultrowsorter.getmaxsortkeys": [
        "javax.swing.DefaultRowSorter.getMaxSortKeys()"
    ],
    "javax.swing.plaf.basic.basicspinnerui.installdefaults": [
        "javax.swing.plaf.basic.BasicSpinnerUI.installDefaults()"
    ],
    "javax.swing.jlabel.seticontextgap": [
        "javax.swing.JLabel.setIconTextGap(int)"
    ],
    "org.omg.corba.request.result": [
        "org.omg.CORBA.Request.result()"
    ],
    "java.awt.image.databufferdouble.setelem": [
        "java.awt.image.DataBufferDouble.setElem(int,int,int)"
    ],
    "java.text.breakiterator.clone": [
        "java.text.BreakIterator.clone()"
    ],
    "org.omg.dynamicany._dynvaluestub.get_any": [
        "org.omg.DynamicAny._DynValueStub.get_any()"
    ],
    "javax.swing.plaf.multi.multilabelui.getuis": [
        "javax.swing.plaf.multi.MultiLabelUI.getUIs()"
    ],
    "javax.swing.plaf.basic.basictableui.getpreferredsize": [
        "javax.swing.plaf.basic.BasicTableUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "java.time.temporal.temporalfield.rangerefinedby": [
        "java.time.temporal.TemporalField.rangeRefinedBy(java.time.temporal.TemporalAccessor)"
    ],
    "java.time.format.signstyle.valueof": [
        "java.time.format.SignStyle.valueOf(java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthcomboboxui.paint": [
        "javax.swing.plaf.synth.SynthComboBoxUI.paint(java.awt.Graphics,javax.swing.JComponent)",
        "javax.swing.plaf.synth.SynthComboBoxUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)"
    ],
    "java.rmi.activation.activatable.exportobject": [
        "java.rmi.activation.Activatable.exportObject(java.rmi.Remote,java.rmi.activation.ActivationID,int)",
        "java.rmi.activation.Activatable.exportObject(java.rmi.Remote,java.rmi.activation.ActivationID,int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)"
    ],
    "java.io.console.format": [
        "java.io.Console.format(java.lang.String,java.lang.Object)",
        "java.io.Console.format(java.lang.String,java.lang.Object...)"
    ],
    "java.util.concurrent.copyonwritearraylist.removeif": [
        "java.util.concurrent.CopyOnWriteArrayList.removeIf(java.util.function.Predicate<? super E>)"
    ],
    "java.sql.connection.settypemap": [
        "java.sql.Connection.setTypeMap(,java.lang.Class<?>>)"
    ],
    "java.security.cert.x509crlselector.tostring": [
        "java.security.cert.X509CRLSelector.toString()"
    ],
    "javax.swing.text.html.stylesheet.translatehtmltocss": [
        "javax.swing.text.html.StyleSheet.translateHTMLToCSS(javax.swing.text.AttributeSet)"
    ],
    "java.sql.sqloutput.writestring": [
        "java.sql.SQLOutput.writeString(java.lang.String)"
    ],
    "java.awt.window.addwindowfocuslistener": [
        "java.awt.Window.addWindowFocusListener(java.awt.event.WindowFocusListener)"
    ],
    "java.util.properties.setproperty": [
        "java.util.Properties.setProperty(java.lang.String,java.lang.String)"
    ],
    "javax.annotation.processing.processor.init": [
        "javax.annotation.processing.Processor.init(javax.annotation.processing.ProcessingEnvironment)"
    ],
    "java.sql.statement.closeoncompletion": [
        "java.sql.Statement.closeOnCompletion()"
    ],
    "java.nio.channels.filelock.size": [
        "java.nio.channels.FileLock.size()"
    ],
    "java.security.cert.x509certselector.getcertificate": [
        "java.security.cert.X509CertSelector.getCertificate()"
    ],
    "javax.swing.jtree.firetreewillcollapse": [
        "javax.swing.JTree.fireTreeWillCollapse(javax.swing.tree.TreePath)"
    ],
    "javax.swing.text.stylecontext.removeattributes": [
        "javax.swing.text.StyleContext.removeAttributes(javax.swing.text.AttributeSet,javax.swing.text.AttributeSet)",
        "javax.swing.text.StyleContext.removeAttributes(javax.swing.text.AttributeSet,java.util.Enumeration<?>)"
    ],
    "javax.swing.plaf.multi.multisplitpaneui.finishedpaintingchildren": [
        "javax.swing.plaf.multi.MultiSplitPaneUI.finishedPaintingChildren(javax.swing.JSplitPane,java.awt.Graphics)"
    ],
    "java.lang.invoke.mutablecallsite.gettarget": [
        "java.lang.invoke.MutableCallSite.getTarget()"
    ],
    "javax.swing.table.abstracttablemodel.getcolumnname": [
        "javax.swing.table.AbstractTableModel.getColumnName(int)"
    ],
    "org.w3c.dom.domconfiguration.cansetparameter": [
        "org.w3c.dom.DOMConfiguration.canSetParameter(java.lang.String,java.lang.Object)"
    ],
    "javax.swing.text.html.html.getallattributekeys": [
        "javax.swing.text.html.HTML.getAllAttributeKeys()"
    ],
    "java.util.calendar.complete": [
        "java.util.Calendar.complete()"
    ],
    "javax.swing.text.passwordview.getpreferredspan": [
        "javax.swing.text.PasswordView.getPreferredSpan(int)"
    ],
    "org.xml.sax.helpers.attributesimpl.gettype": [
        "org.xml.sax.helpers.AttributesImpl.getType(int)",
        "org.xml.sax.helpers.AttributesImpl.getType(java.lang.String,java.lang.String)"
    ],
    "javax.swing.defaultrowsorter.getrowfilter": [
        "javax.swing.DefaultRowSorter.getRowFilter()"
    ],
    "javax.management.mbeaninfo.getconstructors": [
        "javax.management.MBeanInfo.getConstructors()"
    ],
    "java.io.streamtokenizer.nexttoken": [
        "java.io.StreamTokenizer.nextToken()"
    ],
    "java.lang.instrument.instrumentation.appendtobootstrapclassloadersearch": [
        "java.lang.instrument.Instrumentation.appendToBootstrapClassLoaderSearch(java.util.jar.JarFile)"
    ],
    "javax.print.docflavor.getparameter": [
        "javax.print.DocFlavor.getParameter(java.lang.String)"
    ],
    "javax.net.ssl.httpsurlconnection.getciphersuite": [
        "javax.net.ssl.HttpsURLConnection.getCipherSuite()"
    ],
    "java.lang.management.memorytype.tostring": [
        "java.lang.management.MemoryType.toString()"
    ],
    "javax.swing.plaf.multi.multipopupmenuui.getminimumsize": [
        "javax.swing.plaf.multi.MultiPopupMenuUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "javax.swing.jlayeredpane.remove": [
        "javax.swing.JLayeredPane.remove(int)"
    ],
    "org.xml.sax.contenthandler.skippedentity": [
        "org.xml.sax.ContentHandler.skippedEntity(java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthsliderui.getcontext": [
        "javax.swing.plaf.synth.SynthSliderUI.getContext(javax.swing.JComponent)"
    ],
    "javax.swing.undo.compoundedit.lastedit": [
        "javax.swing.undo.CompoundEdit.lastEdit()"
    ],
    "javax.swing.jtree.getscrollableunitincrement": [
        "javax.swing.JTree.getScrollableUnitIncrement(java.awt.Rectangle,int,int)"
    ],
    "javax.swing.text.html.option.isselected": [
        "javax.swing.text.html.Option.isSelected()"
    ],
    "javax.swing.defaultlistmodel.tostring": [
        "javax.swing.DefaultListModel.toString()"
    ],
    "java.awt.awteventmulticaster.componentresized": [
        "java.awt.AWTEventMulticaster.componentResized(java.awt.event.ComponentEvent)"
    ],
    "javax.xml.bind.datatypeconverterinterface.printlong": [
        "javax.xml.bind.DatatypeConverterInterface.printLong(long)"
    ],
    "java.security.unresolvedpermission.newpermissioncollection": [
        "java.security.UnresolvedPermission.newPermissionCollection()"
    ],
    "javax.swing.text.plainview.drawunselectedtext": [
        "javax.swing.text.PlainView.drawUnselectedText(java.awt.Graphics,int,int,int,int)"
    ],
    "java.lang.double.floatvalue": [
        "java.lang.Double.floatValue()"
    ],
    "java.sql.connection.close": [
        "java.sql.Connection.close()"
    ],
    "javax.swing.jtable.droplocation.isinsertcolumn": [
        "javax.swing.JTable.DropLocation.isInsertColumn()"
    ],
    "java.awt.image.rgbimagefilter.filterrgbpixels": [
        "java.awt.image.RGBImageFilter.filterRGBPixels(int,int,int,int,int[],int,int)"
    ],
    "javax.management.openmbean.tabulardatasupport.tostring": [
        "javax.management.openmbean.TabularDataSupport.toString()"
    ],
    "java.awt.event.hierarchyevent.getchanged": [
        "java.awt.event.HierarchyEvent.getChanged()"
    ],
    "javax.swing.borderfactory.createtitledborder": [
        "javax.swing.BorderFactory.createTitledBorder(javax.swing.border.Border,java.lang.String,int,int,java.awt.Font,java.awt.Color)"
    ],
    "javax.swing.defaultbuttonmodel.fireactionperformed": [
        "javax.swing.DefaultButtonModel.fireActionPerformed(java.awt.event.ActionEvent)"
    ],
    "org.omg.dynamicany.dynanyoperations.equal": [
        "org.omg.DynamicAny.DynAnyOperations.equal(org.omg.DynamicAny.DynAny)"
    ],
    "javax.swing.text.jtextcomponent.setselectionend": [
        "javax.swing.text.JTextComponent.setSelectionEnd(int)"
    ],
    "org.omg.corba.stringholder._write": [
        "org.omg.CORBA.StringHolder._write(org.omg.CORBA.portable.OutputStream)"
    ],
    "java.awt.geom.arc2d.double.getanglestart": [
        "java.awt.geom.Arc2D.Double.getAngleStart()"
    ],
    "java.awt.print.pageable.getpageformat": [
        "java.awt.print.Pageable.getPageFormat(int)"
    ],
    "java.lang.classloader.getresourceasstream": [
        "java.lang.ClassLoader.getResourceAsStream(java.lang.String)"
    ],
    "java.security.policyspi.enginegetpermissions": [
        "java.security.PolicySpi.engineGetPermissions(java.security.ProtectionDomain)",
        "java.security.PolicySpi.engineGetPermissions(java.security.CodeSource)"
    ],
    "javax.swing.defaultlistselectionmodel.getleadselectionindex": [
        "javax.swing.DefaultListSelectionModel.getLeadSelectionIndex()"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.readlock.tostring": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.toString()"
    ],
    "javax.xml.soap.detail.getdetailentries": [
        "javax.xml.soap.Detail.getDetailEntries()"
    ],
    "javax.activation.datasource.getinputstream": [
        "javax.activation.DataSource.getInputStream()"
    ],
    "java.awt.cursor.gettype": [
        "java.awt.Cursor.getType()"
    ],
    "java.time.format.datetimeformatterbuilder.appendoptional": [
        "java.time.format.DateTimeFormatterBuilder.appendOptional(java.time.format.DateTimeFormatter)"
    ],
    "javax.swing.plaf.synth.synthtooltipui.paintborder": [
        "javax.swing.plaf.synth.SynthToolTipUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.print.attribute.standard.requestingusername.getname": [
        "javax.print.attribute.standard.RequestingUserName.getName()"
    ],
    "java.awt.trayicon.removemouselistener": [
        "java.awt.TrayIcon.removeMouseListener(java.awt.event.MouseListener)"
    ],
    "javax.xml.stream.xmlstreamreader.close": [
        "javax.xml.stream.XMLStreamReader.close()"
    ],
    "java.awt.rectangle.setsize": [
        "java.awt.Rectangle.setSize(java.awt.Dimension)",
        "java.awt.Rectangle.setSize(int,int)"
    ],
    "java.util.function.longunaryoperator.compose": [
        "java.util.function.LongUnaryOperator.compose(java.util.function.LongUnaryOperator)"
    ],
    "org.omg.portableinterceptor.clientrequestinfooperations.target": [
        "org.omg.PortableInterceptor.ClientRequestInfoOperations.target()"
    ],
    "java.util.jar.jarfile.getmanifest": [
        "java.util.jar.JarFile.getManifest()"
    ],
    "java.security.spec.ecpoint.hashcode": [
        "java.security.spec.ECPoint.hashCode()"
    ],
    "javax.swing.text.boxview.isbefore": [
        "javax.swing.text.BoxView.isBefore(int,int,java.awt.Rectangle)"
    ],
    "javax.imageio.imagetypespecifier.getcolormodel": [
        "javax.imageio.ImageTypeSpecifier.getColorModel()"
    ],
    "javax.swing.table.defaulttablecellrenderer.gettablecellrenderercomponent": [
        "javax.swing.table.DefaultTableCellRenderer.getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)"
    ],
    "javax.swing.plaf.multi.multipanelui.update": [
        "javax.swing.plaf.multi.MultiPanelUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.sql.resultsetmetadata.getcatalogname": [
        "java.sql.ResultSetMetaData.getCatalogName(int)"
    ],
    "java.awt.geom.arc2d.getanglestart": [
        "java.awt.geom.Arc2D.getAngleStart()"
    ],
    "java.time.zone.zoneoffsettransition.getdatetimeafter": [
        "java.time.zone.ZoneOffsetTransition.getDateTimeAfter()"
    ],
    "javax.swing.text.element.getelement": [
        "javax.swing.text.Element.getElement(int)"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.getdisplaysize": [
        "javax.swing.plaf.basic.BasicComboBoxUI.getDisplaySize()"
    ],
    "java.io.fileinputstream.finalize": [
        "java.io.FileInputStream.finalize()"
    ],
    "java.security.cert.x509crlselector.setmaxcrlnumber": [
        "java.security.cert.X509CRLSelector.setMaxCRLNumber(java.math.BigInteger)"
    ],
    "java.security.cert.policyqualifierinfo.getpolicyqualifier": [
        "java.security.cert.PolicyQualifierInfo.getPolicyQualifier()"
    ],
    "javax.sound.sampled.reverbtype.tostring": [
        "javax.sound.sampled.ReverbType.toString()"
    ],
    "java.time.chrono.hijrahdate.lengthofyear": [
        "java.time.chrono.HijrahDate.lengthOfYear()"
    ],
    "org.omg.corba.namedvalue.value": [
        "org.omg.CORBA.NamedValue.value()"
    ],
    "java.security.cert.x509certificate.getextendedkeyusage": [
        "java.security.cert.X509Certificate.getExtendedKeyUsage()"
    ],
    "javax.sound.sampled.spi.formatconversionprovider.gettargetformats": [
        "javax.sound.sampled.spi.FormatConversionProvider.getTargetFormats(javax.sound.sampled.AudioFormat.Encoding,javax.sound.sampled.AudioFormat)"
    ],
    "java.time.zone.zonerules.gettransition": [
        "java.time.zone.ZoneRules.getTransition(java.time.LocalDateTime)"
    ],
    "javax.xml.bind.jaxb.marshal": [
        "javax.xml.bind.JAXB.marshal(java.lang.Object,java.net.URL)",
        "javax.xml.bind.JAXB.marshal(java.lang.Object,java.io.OutputStream)",
        "javax.xml.bind.JAXB.marshal(java.lang.Object,java.io.File)",
        "javax.xml.bind.JAXB.marshal(java.lang.Object,java.lang.String)",
        "javax.xml.bind.JAXB.marshal(java.lang.Object,java.net.URI)",
        "javax.xml.bind.JAXB.marshal(java.lang.Object,javax.xml.transform.Result)",
        "javax.xml.bind.JAXB.marshal(java.lang.Object,java.io.Writer)"
    ],
    "java.util.concurrent.threadpoolexecutor.getqueue": [
        "java.util.concurrent.ThreadPoolExecutor.getQueue()"
    ],
    "javax.swing.layoutfocustraversalpolicy.getcomponentafter": [
        "javax.swing.LayoutFocusTraversalPolicy.getComponentAfter(java.awt.Container,java.awt.Component)"
    ],
    "javax.naming.namingexception.tostring": [
        "javax.naming.NamingException.toString(boolean)",
        "javax.naming.NamingException.toString()"
    ],
    "javax.swing.swingutilities.getaccessibleindexinparent": [
        "javax.swing.SwingUtilities.getAccessibleIndexInParent(java.awt.Component)"
    ],
    "java.util.spliterators.spliterator": [
        "java.util.Spliterators.spliterator(java.util.PrimitiveIterator.OfInt,long,int)",
        "java.util.Spliterators.spliterator(int[],int,int,int)",
        "java.util.Spliterators.spliterator(java.util.Iterator<? extends T>,long,int)",
        "java.util.Spliterators.spliterator(double[],int)",
        "java.util.Spliterators.spliterator(double[],int,int,int)",
        "java.util.Spliterators.spliterator(java.util.PrimitiveIterator.OfLong,long,int)",
        "java.util.Spliterators.spliterator(java.lang.Object[],int)",
        "java.util.Spliterators.spliterator(int[],int)",
        "java.util.Spliterators.spliterator(java.lang.Object[],int,int,int)",
        "java.util.Spliterators.spliterator(long[],int)",
        "java.util.Spliterators.spliterator(long[],int,int,int)",
        "java.util.Spliterators.spliterator(java.util.Collection<? extends T>,int)",
        "java.util.Spliterators.spliterator(java.util.PrimitiveIterator.OfDouble,long,int)"
    ],
    "java.security.spec.ellipticcurve.getfield": [
        "java.security.spec.EllipticCurve.getField()"
    ],
    "javax.naming.directory.basicattribute.remove": [
        "javax.naming.directory.BasicAttribute.remove(java.lang.Object)"
    ],
    "javax.xml.crypto.dsig.xmlsignaturefactory.geturidereferencer": [
        "javax.xml.crypto.dsig.XMLSignatureFactory.getURIDereferencer()"
    ],
    "javax.swing.text.document.render": [
        "javax.swing.text.Document.render(java.lang.Runnable)"
    ],
    "org.omg.corba.portable.objectimpl._orb": [
        "org.omg.CORBA.portable.ObjectImpl._orb()"
    ],
    "javax.naming.cannotproceedexception.setenvironment": [
        "javax.naming.CannotProceedException.setEnvironment(,?>)"
    ],
    "java.awt.window.getinputcontext": [
        "java.awt.Window.getInputContext()"
    ],
    "java.security.security.removeprovider": [
        "java.security.Security.removeProvider(java.lang.String)"
    ],
    "java.text.decimalformat.setdecimalseparatoralwaysshown": [
        "java.text.DecimalFormat.setDecimalSeparatorAlwaysShown(boolean)"
    ],
    "javax.management.monitor.countermonitormbean.getdifferencemode": [
        "javax.management.monitor.CounterMonitorMBean.getDifferenceMode()"
    ],
    "java.util.concurrent.concurrenthashmap.keys": [
        "java.util.concurrent.ConcurrentHashMap.keys()"
    ],
    "java.io.chararraywriter.close": [
        "java.io.CharArrayWriter.close()"
    ],
    "javax.lang.model.element.annotationvaluevisitor.visitfloat": [
        "javax.lang.model.element.AnnotationValueVisitor.visitFloat(float,javax.lang.model.element.AnnotationValueVisitor)"
    ],
    "javax.swing.tooltipmanager.setreshowdelay": [
        "javax.swing.ToolTipManager.setReshowDelay(int)"
    ],
    "java.util.scanner.nextbigdecimal": [
        "java.util.Scanner.nextBigDecimal()"
    ],
    "java.time.monthday.getmonth": [
        "java.time.MonthDay.getMonth()"
    ],
    "javax.swing.jprogressbar.setstringpainted": [
        "javax.swing.JProgressBar.setStringPainted(boolean)"
    ],
    "javax.swing.grouplayout.setverticalgroup": [
        "javax.swing.GroupLayout.setVerticalGroup(javax.swing.GroupLayout.Group)"
    ],
    "javax.swing.jlist.setselectionbackground": [
        "javax.swing.JList.setSelectionBackground(java.awt.Color)"
    ],
    "org.omg.portableserver.poaoperations.create_reference": [
        "org.omg.PortableServer.POAOperations.create_reference(java.lang.String)"
    ],
    "org.omg.corba.portable.objectimpl._duplicate": [
        "org.omg.CORBA.portable.ObjectImpl._duplicate()"
    ],
    "javax.swing.plaf.multi.multidesktoppaneui.createui": [
        "javax.swing.plaf.multi.MultiDesktopPaneUI.createUI(javax.swing.JComponent)"
    ],
    "java.nio.shortbuffer.hasarray": [
        "java.nio.ShortBuffer.hasArray()"
    ],
    "java.util.concurrent.forkjointask.adapt": [
        "java.util.concurrent.ForkJoinTask.adapt(java.lang.Runnable,T)",
        "java.util.concurrent.ForkJoinTask.adapt(java.lang.Runnable)",
        "java.util.concurrent.ForkJoinTask.adapt(java.util.concurrent.Callable<? extends T>)"
    ],
    "org.omg.corba.exceptionlist.remove": [
        "org.omg.CORBA.ExceptionList.remove(int)"
    ],
    "java.io.file.touri": [
        "java.io.File.toURI()"
    ],
    "java.util.longsummarystatistics.getsum": [
        "java.util.LongSummaryStatistics.getSum()"
    ],
    "java.lang.reflect.parameter.getmodifiers": [
        "java.lang.reflect.Parameter.getModifiers()"
    ],
    "java.awt.color.icc_profile.getprofileclass": [
        "java.awt.color.ICC_Profile.getProfileClass()"
    ],
    "java.util.zip.zipentry.tostring": [
        "java.util.zip.ZipEntry.toString()"
    ],
    "java.awt.point.getx": [
        "java.awt.Point.getX()"
    ],
    "javax.swing.text.html.htmleditorkit.write": [
        "javax.swing.text.html.HTMLEditorKit.write(java.io.Writer,javax.swing.text.Document,int,int)"
    ],
    "java.util.optionaldouble.orelsethrow": [
        "java.util.OptionalDouble.orElseThrow(java.util.function.Supplier<X>)"
    ],
    "javax.imageio.imagereader.addiioreadwarninglistener": [
        "javax.imageio.ImageReader.addIIOReadWarningListener(javax.imageio.event.IIOReadWarningListener)"
    ],
    "java.lang.reflect.field.getint": [
        "java.lang.reflect.Field.getInt(java.lang.Object)"
    ],
    "java.awt.trayicon.addmouselistener": [
        "java.awt.TrayIcon.addMouseListener(java.awt.event.MouseListener)"
    ],
    "javax.swing.plaf.basic.basicsliderui.getlowestvalue": [
        "javax.swing.plaf.basic.BasicSliderUI.getLowestValue()"
    ],
    "java.lang.stringbuffer.setcharat": [
        "java.lang.StringBuffer.setCharAt(int,char)"
    ],
    "javax.swing.plaf.synth.synthpainter.painttreecellbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintTreeCellBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.util.logging.logger.severe": [
        "java.util.logging.Logger.severe(java.lang.String)",
        "java.util.logging.Logger.severe(java.util.function.Supplier<java.lang.String>)"
    ],
    "javax.swing.jslider.getmajortickspacing": [
        "javax.swing.JSlider.getMajorTickSpacing()"
    ],
    "java.security.cert.policynode.iscritical": [
        "java.security.cert.PolicyNode.isCritical()"
    ],
    "javax.sound.sampled.port.info.equals": [
        "javax.sound.sampled.Port.Info.equals(java.lang.Object)"
    ],
    "javax.swing.tree.treeselectionmodel.removepropertychangelistener": [
        "javax.swing.tree.TreeSelectionModel.removePropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "java.lang.management.threadinfo.getlockownername": [
        "java.lang.management.ThreadInfo.getLockOwnerName()"
    ],
    "javax.sql.rowset.baserowset.setquerytimeout": [
        "javax.sql.rowset.BaseRowSet.setQueryTimeout(int)"
    ],
    "javax.swing.text.html.formsubmitevent.getdata": [
        "javax.swing.text.html.FormSubmitEvent.getData()"
    ],
    "java.lang.double.parsedouble": [
        "java.lang.Double.parseDouble(java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthradiobuttonmenuitemui.createui": [
        "javax.swing.plaf.synth.SynthRadioButtonMenuItemUI.createUI(javax.swing.JComponent)"
    ],
    "javax.xml.bind.datatypeconverterinterface.parseunsignedshort": [
        "javax.xml.bind.DatatypeConverterInterface.parseUnsignedShort(java.lang.String)"
    ],
    "java.io.datainput.readbyte": [
        "java.io.DataInput.readByte()"
    ],
    "javax.management.openmbean.compositedatasupport.get": [
        "javax.management.openmbean.CompositeDataSupport.get(java.lang.String)"
    ],
    "java.util.stream.stream.maptolong": [
        "java.util.stream.Stream.mapToLong(java.util.function.ToLongFunction<? super java.util.stream.Stream>)",
        "java.util.stream.Stream.mapToLong(java.util.function.ToLongFunction<? super T>)"
    ],
    "java.sql.connection.nativesql": [
        "java.sql.Connection.nativeSQL(java.lang.String)"
    ],
    "java.util.concurrent.atomic.atomiclongfieldupdater.getandadd": [
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndAdd(T,long)",
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndAdd(java.util.concurrent.atomic.AtomicLongFieldUpdater,long)"
    ],
    "javax.xml.soap.attachmentpart.getallmimeheaders": [
        "javax.xml.soap.AttachmentPart.getAllMimeHeaders()"
    ],
    "java.nio.channels.selectablechannel.blockinglock": [
        "java.nio.channels.SelectableChannel.blockingLock()"
    ],
    "java.security.provider.service.gettype": [
        "java.security.Provider.Service.getType()"
    ],
    "javax.print.printservice.getsupportedattributevalues": [
        "javax.print.PrintService.getSupportedAttributeValues(java.lang.Class<? extends javax.print.attribute.Attribute>,javax.print.DocFlavor,javax.print.attribute.AttributeSet)"
    ],
    "javax.xml.soap.attachmentpart.setrawcontent": [
        "javax.xml.soap.AttachmentPart.setRawContent(java.io.InputStream,java.lang.String)"
    ],
    "java.util.function.doubleunaryoperator.compose": [
        "java.util.function.DoubleUnaryOperator.compose(java.util.function.DoubleUnaryOperator)"
    ],
    "javax.xml.bind.marshaller.geteventhandler": [
        "javax.xml.bind.Marshaller.getEventHandler()"
    ],
    "org.omg.portableserver.poaoperations.create_poa": [
        "org.omg.PortableServer.POAOperations.create_POA(java.lang.String,org.omg.PortableServer.POAManager,org.omg.CORBA.Policy[])"
    ],
    "javax.net.ssl.sslsocket.setenabledprotocols": [
        "javax.net.ssl.SSLSocket.setEnabledProtocols(java.lang.String)",
        "javax.net.ssl.SSLSocket.setEnabledProtocols(java.lang.String[])"
    ],
    "javax.swing.text.editorkit.getviewfactory": [
        "javax.swing.text.EditorKit.getViewFactory()"
    ],
    "javax.xml.bind.helpers.abstractunmarshallerimpl.unmarshal": [
        "javax.xml.bind.helpers.AbstractUnmarshallerImpl.unmarshal(org.xml.sax.XMLReader,org.xml.sax.InputSource)"
    ],
    "java.util.spi.localenameprovider.getdisplayscript": [
        "java.util.spi.LocaleNameProvider.getDisplayScript(java.lang.String,java.util.Locale)"
    ],
    "java.net.datagramsocket.setreuseaddress": [
        "java.net.DatagramSocket.setReuseAddress(boolean)"
    ],
    "java.lang.character.digit": [
        "java.lang.Character.digit(char,int)"
    ],
    "javax.security.auth.kerberos.kerberosticket.getendtime": [
        "javax.security.auth.kerberos.KerberosTicket.getEndTime()"
    ],
    "javax.swing.jinternalframe.setselected": [
        "javax.swing.JInternalFrame.setSelected(boolean)"
    ],
    "javax.swing.defaultlistmodel.trimtosize": [
        "javax.swing.DefaultListModel.trimToSize()"
    ],
    "javax.lang.model.element.typeelement.getinterfaces": [
        "javax.lang.model.element.TypeElement.getInterfaces()"
    ],
    "java.security.spec.rsaotherprimeinfo.getexponent": [
        "java.security.spec.RSAOtherPrimeInfo.getExponent()"
    ],
    "javax.xml.soap.name.getqualifiedname": [
        "javax.xml.soap.Name.getQualifiedName()"
    ],
    "javax.imageio.metadata.iiometadatanode.getparentnode": [
        "javax.imageio.metadata.IIOMetadataNode.getParentNode()"
    ],
    "javax.activation.filetypemap.getcontenttype": [
        "javax.activation.FileTypeMap.getContentType(java.lang.String)",
        "javax.activation.FileTypeMap.getContentType(java.io.File)"
    ],
    "javax.swing.componentinputmap.put": [
        "javax.swing.ComponentInputMap.put(javax.swing.KeyStroke,java.lang.Object)"
    ],
    "javax.xml.crypto.dsig.xmlsignaturefactory.getprovider": [
        "javax.xml.crypto.dsig.XMLSignatureFactory.getProvider()"
    ],
    "java.lang.integer.rotateleft": [
        "java.lang.Integer.rotateLeft(int,int)"
    ],
    "javax.imageio.spi.serviceregistry.unsetordering": [
        "javax.imageio.spi.ServiceRegistry.unsetOrdering(java.lang.Class<T>,T,T)"
    ],
    "javax.swing.plaf.multi.multimenubarui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiMenuBarUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "java.awt.image.renderable.renderableimageop.createscaledrendering": [
        "java.awt.image.renderable.RenderableImageOp.createScaledRendering(int,int,java.awt.RenderingHints)"
    ],
    "java.time.localdate.getmonthvalue": [
        "java.time.LocalDate.getMonthValue()"
    ],
    "java.util.concurrent.atomic.atomicmarkablereference.weakcompareandset": [
        "java.util.concurrent.atomic.AtomicMarkableReference.weakCompareAndSet(java.util.concurrent.atomic.AtomicMarkableReference,java.util.concurrent.atomic.AtomicMarkableReference,boolean,boolean)",
        "java.util.concurrent.atomic.AtomicMarkableReference.weakCompareAndSet(V,V,boolean,boolean)"
    ],
    "java.util.concurrent.phaser.getunarrivedparties": [
        "java.util.concurrent.Phaser.getUnarrivedParties()"
    ],
    "java.awt.rectangle.add": [
        "java.awt.Rectangle.add(java.awt.Rectangle)",
        "java.awt.Rectangle.add(int,int)",
        "java.awt.Rectangle.add(java.awt.Point)"
    ],
    "javax.sound.midi.mididevice.info.getvendor": [
        "javax.sound.midi.MidiDevice.Info.getVendor()"
    ],
    "javax.sql.rowsetmetadata.settablename": [
        "javax.sql.RowSetMetaData.setTableName(int,java.lang.String)"
    ],
    "java.net.uri.getauthority": [
        "java.net.URI.getAuthority()"
    ],
    "javax.swing.plaf.multi.multitooltipui.getminimumsize": [
        "javax.swing.plaf.multi.MultiToolTipUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "java.util.stream.longstream.summarystatistics": [
        "java.util.stream.LongStream.summaryStatistics()"
    ],
    "javax.swing.plaf.metal.defaultmetaltheme.getsecondary2": [
        "javax.swing.plaf.metal.DefaultMetalTheme.getSecondary2()"
    ],
    "java.awt.containerorderfocustraversalpolicy.getimplicitdowncycletraversal": [
        "java.awt.ContainerOrderFocusTraversalPolicy.getImplicitDownCycleTraversal()"
    ],
    "javax.swing.jlayer.getview": [
        "javax.swing.JLayer.getView()"
    ],
    "java.util.concurrent.linkedblockingdeque.putlast": [
        "java.util.concurrent.LinkedBlockingDeque.putLast(E)"
    ],
    "javax.swing.jtable.setselectionforeground": [
        "javax.swing.JTable.setSelectionForeground(java.awt.Color)"
    ],
    "org.xml.sax.contenthandler.processinginstruction": [
        "org.xml.sax.ContentHandler.processingInstruction(java.lang.String,java.lang.String)"
    ],
    "java.awt.event.windowevent.getnewstate": [
        "java.awt.event.WindowEvent.getNewState()"
    ],
    "java.lang.management.runtimemxbean.getclasspath": [
        "java.lang.management.RuntimeMXBean.getClassPath()"
    ],
    "javax.xml.xpath.xpathfactory.newxpath": [
        "javax.xml.xpath.XPathFactory.newXPath()"
    ],
    "java.time.chrono.chronolocaldate.attime": [
        "java.time.chrono.ChronoLocalDate.atTime(java.time.LocalTime)"
    ],
    "javax.management.openmbean.compositedatasupport.values": [
        "javax.management.openmbean.CompositeDataSupport.values()"
    ],
    "javax.swing.border.matteborder.paintborder": [
        "javax.swing.border.MatteBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.print.attribute.standard.orientationrequested.getname": [
        "javax.print.attribute.standard.OrientationRequested.getName()"
    ],
    "java.nio.channels.selectionkey.interestops": [
        "java.nio.channels.SelectionKey.interestOps(int)",
        "java.nio.channels.SelectionKey.interestOps()"
    ],
    "java.security.keyfactory.getalgorithm": [
        "java.security.KeyFactory.getAlgorithm()"
    ],
    "java.sql.databasemetadata.getmaxschemanamelength": [
        "java.sql.DatabaseMetaData.getMaxSchemaNameLength()"
    ],
    "javax.imageio.stream.iiobytebuffer.getlength": [
        "javax.imageio.stream.IIOByteBuffer.getLength()"
    ],
    "javax.sound.sampled.audioformat.getsamplerate": [
        "javax.sound.sampled.AudioFormat.getSampleRate()"
    ],
    "javax.swing.jviewport.getuiclassid": [
        "javax.swing.JViewport.getUIClassID()"
    ],
    "javax.swing.text.gapcontent.shiftgapendup": [
        "javax.swing.text.GapContent.shiftGapEndUp(int)"
    ],
    "javax.security.cert.x509certificate.getnotafter": [
        "javax.security.cert.X509Certificate.getNotAfter()"
    ],
    "java.net.multicastsocket.setnetworkinterface": [
        "java.net.MulticastSocket.setNetworkInterface(java.net.NetworkInterface)"
    ],
    "java.awt.trayicon.addactionlistener": [
        "java.awt.TrayIcon.addActionListener(java.awt.event.ActionListener)"
    ],
    "java.util.concurrent.completionstage.whencomplete": [
        "java.util.concurrent.CompletionStage.whenComplete(java.util.function.BiConsumer<? super,? super java.lang.Throwable>)"
    ],
    "javax.swing.text.zoneview.insertupdate": [
        "javax.swing.text.ZoneView.insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "org.xml.sax.locator.getpublicid": [
        "org.xml.sax.Locator.getPublicId()"
    ],
    "javax.swing.plaf.multi.multiscrollbarui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiScrollBarUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "java.lang.charsequence.chars": [
        "java.lang.CharSequence.chars()"
    ],
    "javax.management.timer.timermbean.getnotificationuserdata": [
        "javax.management.timer.TimerMBean.getNotificationUserData(java.lang.Integer)"
    ],
    "org.omg.cosnaming.namingcontextextoperations.to_name": [
        "org.omg.CosNaming.NamingContextExtOperations.to_name(java.lang.String)"
    ],
    "java.util.stream.intstream.skip": [
        "java.util.stream.IntStream.skip(long)"
    ],
    "javax.swing.plaf.synth.synthtableheaderui.createui": [
        "javax.swing.plaf.synth.SynthTableHeaderUI.createUI(javax.swing.JComponent)"
    ],
    "java.lang.reflect.parameter.gettype": [
        "java.lang.reflect.Parameter.getType()"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getwindowbackground": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getWindowBackground()"
    ],
    "java.util.observable.countobservers": [
        "java.util.Observable.countObservers()"
    ],
    "javax.xml.crypto.dsig.signedinfo.getcanonicalizeddata": [
        "javax.xml.crypto.dsig.SignedInfo.getCanonicalizedData()"
    ],
    "java.security.cert.x509certificate.getsubjectalternativenames": [
        "java.security.cert.X509Certificate.getSubjectAlternativeNames()"
    ],
    "javax.swing.jtable.getautocreatecolumnsfrommodel": [
        "javax.swing.JTable.getAutoCreateColumnsFromModel()"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.reset": [
        "javax.xml.datatype.XMLGregorianCalendar.reset()"
    ],
    "javax.sql.rowset.serial.serialstruct.clone": [
        "javax.sql.rowset.serial.SerialStruct.clone()"
    ],
    "java.nio.file.files.issamefile": [
        "java.nio.file.Files.isSameFile(java.nio.file.Path,java.nio.file.Path)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintlabelborder": [
        "javax.swing.plaf.synth.SynthPainter.paintLabelBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.security.provider.tostring": [
        "java.security.Provider.toString()"
    ],
    "javax.xml.stream.xmleventfactory.createstartelement": [
        "javax.xml.stream.XMLEventFactory.createStartElement(java.lang.String,java.lang.String,java.lang.String,java.util.Iterator,java.util.Iterator,javax.xml.namespace.NamespaceContext)",
        "javax.xml.stream.XMLEventFactory.createStartElement(java.lang.String,java.lang.String,java.lang.String,java.util.Iterator,java.util.Iterator)",
        "javax.xml.stream.XMLEventFactory.createStartElement(java.lang.String,java.lang.String,java.lang.String)",
        "javax.xml.stream.XMLEventFactory.createStartElement(javax.xml.namespace.QName,java.util.Iterator,java.util.Iterator)"
    ],
    "org.w3c.dom.document.createcomment": [
        "org.w3c.dom.Document.createComment(java.lang.String)"
    ],
    "javax.swing.jtogglebutton.getaccessiblecontext": [
        "javax.swing.JToggleButton.getAccessibleContext()"
    ],
    "javax.swing.listselectionmodel.setleadselectionindex": [
        "javax.swing.ListSelectionModel.setLeadSelectionIndex(int)"
    ],
    "javax.swing.plaf.synth.synthspinnerui.getcontext": [
        "javax.swing.plaf.synth.SynthSpinnerUI.getContext(javax.swing.JComponent)"
    ],
    "java.nio.file.filesystem.getseparator": [
        "java.nio.file.FileSystem.getSeparator()"
    ],
    "javax.swing.timer.getactioncommand": [
        "javax.swing.Timer.getActionCommand()"
    ],
    "javax.imageio.stream.memorycacheimageinputstream.finalize": [
        "javax.imageio.stream.MemoryCacheImageInputStream.finalize()"
    ],
    "java.awt.image.bandedsamplemodel.createdatabuffer": [
        "java.awt.image.BandedSampleModel.createDataBuffer()"
    ],
    "java.time.localdatetime.plusyears": [
        "java.time.LocalDateTime.plusYears(long)"
    ],
    "java.util.locale.getdisplayname": [
        "java.util.Locale.getDisplayName()",
        "java.util.Locale.getDisplayName(java.util.Locale)"
    ],
    "javax.swing.plaf.synth.synthpanelui.getcontext": [
        "javax.swing.plaf.synth.SynthPanelUI.getContext(javax.swing.JComponent)"
    ],
    "java.awt.image.bytelookuptable.gettable": [
        "java.awt.image.ByteLookupTable.getTable()"
    ],
    "java.awt.geom.arc2d.hashcode": [
        "java.awt.geom.Arc2D.hashCode()"
    ],
    "java.util.enumset.clone": [
        "java.util.EnumSet.clone()"
    ],
    "javax.swing.tree.defaulttreemodel.getchildcount": [
        "javax.swing.tree.DefaultTreeModel.getChildCount(java.lang.Object)"
    ],
    "javax.management.openmbean.openmbeanparameterinfosupport.getdefaultvalue": [
        "javax.management.openmbean.OpenMBeanParameterInfoSupport.getDefaultValue()"
    ],
    "java.io.dataoutputstream.writechar": [
        "java.io.DataOutputStream.writeChar(int)"
    ],
    "javax.swing.jprogressbar.getstring": [
        "javax.swing.JProgressBar.getString()"
    ],
    "java.awt.im.spi.inputmethod.setinputmethodcontext": [
        "java.awt.im.spi.InputMethod.setInputMethodContext(java.awt.im.spi.InputMethodContext)"
    ],
    "javax.swing.text.flowview.flowstrategy.createview": [
        "javax.swing.text.FlowView.FlowStrategy.createView(javax.swing.text.FlowView,int,int,int)"
    ],
    "java.lang.invoke.serializedlambda.getfunctionalinterfaceclass": [
        "java.lang.invoke.SerializedLambda.getFunctionalInterfaceClass()"
    ],
    "java.sql.statement.getwarnings": [
        "java.sql.Statement.getWarnings()"
    ],
    "java.awt.gridbaglayout.lookupconstraints": [
        "java.awt.GridBagLayout.lookupConstraints(java.awt.Component)"
    ],
    "javax.crypto.mac.getmaclength": [
        "javax.crypto.Mac.getMacLength()"
    ],
    "java.text.dateformatsymbols.setampmstrings": [
        "java.text.DateFormatSymbols.setAmPmStrings(java.lang.String[])",
        "java.text.DateFormatSymbols.setAmPmStrings(java.lang.String)"
    ],
    "javax.swing.plaf.metal.metalsplitpaneui.createui": [
        "javax.swing.plaf.metal.MetalSplitPaneUI.createUI(javax.swing.JComponent)"
    ],
    "java.util.concurrent.locks.abstractqueuedsynchronizer.conditionobject.signalall": [
        "java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.signalAll()"
    ],
    "java.net.datagrampacket.getoffset": [
        "java.net.DatagramPacket.getOffset()"
    ],
    "java.awt.toolkit.createwindow": [
        "java.awt.Toolkit.createWindow(java.awt.Window)"
    ],
    "java.util.queue.poll": [
        "java.util.Queue.poll()"
    ],
    "javax.swing.jlist.getuiclassid": [
        "javax.swing.JList.getUIClassID()"
    ],
    "javax.naming.ldap.ldapname.addall": [
        "javax.naming.ldap.LdapName.addAll(int,javax.naming.Name)",
        "javax.naming.ldap.LdapName.addAll(javax.naming.Name)",
        "javax.naming.ldap.LdapName.addAll(java.util.List<javax.naming.ldap.Rdn>)"
    ],
    "org.xml.sax.helpers.attributesimpl.seturi": [
        "org.xml.sax.helpers.AttributesImpl.setURI(int,java.lang.String)"
    ],
    "javax.security.auth.kerberos.kerberoskey.getkeytype": [
        "javax.security.auth.kerberos.KerberosKey.getKeyType()"
    ],
    "java.awt.image.bufferedimage.getgraphics": [
        "java.awt.image.BufferedImage.getGraphics()"
    ],
    "javax.security.auth.callback.choicecallback.setselectedindexes": [
        "javax.security.auth.callback.ChoiceCallback.setSelectedIndexes(int[])"
    ],
    "javax.swing.plaf.basic.basiclabelui.paintdisabledtext": [
        "javax.swing.plaf.basic.BasicLabelUI.paintDisabledText(javax.swing.JLabel,java.awt.Graphics,java.lang.String,int,int)"
    ],
    "javax.crypto.interfaces.pbekey.getpassword": [
        "javax.crypto.interfaces.PBEKey.getPassword()"
    ],
    "java.awt.list.addnotify": [
        "java.awt.List.addNotify()"
    ],
    "javax.swing.desktopmanager.maximizeframe": [
        "javax.swing.DesktopManager.maximizeFrame(javax.swing.JInternalFrame)"
    ],
    "javax.swing.plaf.synth.synthmenuitemui.propertychange": [
        "javax.swing.plaf.synth.SynthMenuItemUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "java.time.zoneddatetime.minusmonths": [
        "java.time.ZonedDateTime.minusMonths(long)"
    ],
    "javax.swing.jwindow.gettransferhandler": [
        "javax.swing.JWindow.getTransferHandler()"
    ],
    "javax.swing.plaf.synth.synthtreeui.painthorizontalpartofleg": [
        "javax.swing.plaf.synth.SynthTreeUI.paintHorizontalPartOfLeg(java.awt.Graphics,java.awt.Rectangle,java.awt.Insets,java.awt.Rectangle,javax.swing.tree.TreePath,int,boolean,boolean,boolean)"
    ],
    "java.util.stream.longstream.filter": [
        "java.util.stream.LongStream.filter(java.util.function.LongPredicate)"
    ],
    "java.time.instant.from": [
        "java.time.Instant.from(java.time.temporal.TemporalAccessor)"
    ],
    "java.awt.rectangle.intersection": [
        "java.awt.Rectangle.intersection(java.awt.Rectangle)"
    ],
    "javax.naming.directory.dircontext.rebind": [
        "javax.naming.directory.DirContext.rebind(java.lang.String,java.lang.Object,javax.naming.directory.Attributes)",
        "javax.naming.directory.DirContext.rebind(javax.naming.Name,java.lang.Object,javax.naming.directory.Attributes)"
    ],
    "java.util.random.nextdouble": [
        "java.util.Random.nextDouble()"
    ],
    "java.lang.management.lockinfo.getidentityhashcode": [
        "java.lang.management.LockInfo.getIdentityHashCode()"
    ],
    "java.awt.image.singlepixelpackedsamplemodel.getdataelements": [
        "java.awt.image.SinglePixelPackedSampleModel.getDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)"
    ],
    "javax.swing.jfilechooser.getdragenabled": [
        "javax.swing.JFileChooser.getDragEnabled()"
    ],
    "javax.swing.plaf.nimbus.abstractregionpainter.getextendedcachekeys": [
        "javax.swing.plaf.nimbus.AbstractRegionPainter.getExtendedCacheKeys(javax.swing.JComponent)"
    ],
    "java.security.cert.certpathvalidator.validate": [
        "java.security.cert.CertPathValidator.validate(java.security.cert.CertPath,java.security.cert.CertPathParameters)"
    ],
    "java.util.prefs.abstractpreferences.exportnode": [
        "java.util.prefs.AbstractPreferences.exportNode(java.io.OutputStream)"
    ],
    "javax.swing.jcolorchooser.setchooserpanels": [
        "javax.swing.JColorChooser.setChooserPanels(javax.swing.colorchooser.AbstractColorChooserPanel[])"
    ],
    "javax.print.doc.getstreamforbytes": [
        "javax.print.Doc.getStreamForBytes()"
    ],
    "java.awt.event.containerevent.getcontainer": [
        "java.awt.event.ContainerEvent.getContainer()"
    ],
    "java.time.format.decimalstyle.of": [
        "java.time.format.DecimalStyle.of(java.util.Locale)"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.getorientation": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.getOrientation()"
    ],
    "javax.swing.swingutilities.replaceuiactionmap": [
        "javax.swing.SwingUtilities.replaceUIActionMap(javax.swing.JComponent,javax.swing.ActionMap)"
    ],
    "java.time.chrono.hijrahdate.with": [
        "java.time.chrono.HijrahDate.with(java.time.temporal.TemporalAdjuster)"
    ],
    "java.time.month.firstdayofyear": [
        "java.time.Month.firstDayOfYear(boolean)"
    ],
    "java.lang.management.memorymxbean.setverbose": [
        "java.lang.management.MemoryMXBean.setVerbose(boolean)"
    ],
    "javax.xml.crypto.urireference.geturi": [
        "javax.xml.crypto.URIReference.getURI()"
    ],
    "javax.management.loading.mletmbean.getresources": [
        "javax.management.loading.MLetMBean.getResources(java.lang.String)"
    ],
    "java.io.printstream.checkerror": [
        "java.io.PrintStream.checkError()"
    ],
    "javax.swing.jtabbedpane.getselectedcomponent": [
        "javax.swing.JTabbedPane.getSelectedComponent()"
    ],
    "java.io.objectoutputstream.writebytes": [
        "java.io.ObjectOutputStream.writeBytes(java.lang.String)"
    ],
    "java.util.jar.jarfile.getentry": [
        "java.util.jar.JarFile.getEntry(java.lang.String)"
    ],
    "javax.swing.jtree.setselectionmodel": [
        "javax.swing.JTree.setSelectionModel(javax.swing.tree.TreeSelectionModel)"
    ],
    "javax.swing.plaf.multi.multicolorchooserui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiColorChooserUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "java.awt.geom.arc2d.float.setarc": [
        "java.awt.geom.Arc2D.Float.setArc(double,double,double,double,double,double,int)"
    ],
    "javax.swing.text.boxview.getmaximumspan": [
        "javax.swing.text.BoxView.getMaximumSpan(int)"
    ],
    "javax.swing.jslider.createchangelistener": [
        "javax.swing.JSlider.createChangeListener()"
    ],
    "javax.swing.sortingfocustraversalpolicy.getcomponentafter": [
        "javax.swing.SortingFocusTraversalPolicy.getComponentAfter(java.awt.Container,java.awt.Component)"
    ],
    "javax.swing.plaf.multi.multicolorchooserui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiColorChooserUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "javax.swing.text.html.stylesheet.getpointsize": [
        "javax.swing.text.html.StyleSheet.getPointSize(int)"
    ],
    "java.sql.preparedstatement.setstring": [
        "java.sql.PreparedStatement.setString(int,java.lang.String)"
    ],
    "javax.swing.jtabbedpane.getforegroundat": [
        "javax.swing.JTabbedPane.getForegroundAt(int)"
    ],
    "javax.sql.rowset.setmaxrows": [
        "javax.sql.RowSet.setMaxRows(int)"
    ],
    "javax.swing.text.style.addchangelistener": [
        "javax.swing.text.Style.addChangeListener(javax.swing.event.ChangeListener)"
    ],
    "java.security.provider.service.getclassname": [
        "java.security.Provider.Service.getClassName()"
    ],
    "java.awt.image.writableraster.setrect": [
        "java.awt.image.WritableRaster.setRect(java.awt.image.Raster)",
        "java.awt.image.WritableRaster.setRect(int,int,java.awt.image.Raster)"
    ],
    "javax.swing.debuggraphics.getcolor": [
        "javax.swing.DebugGraphics.getColor()"
    ],
    "java.lang.character.tolowercase": [
        "java.lang.Character.toLowerCase(char)"
    ],
    "javax.swing.table.defaulttablecolumnmodel.getcolumnindex": [
        "javax.swing.table.DefaultTableColumnModel.getColumnIndex(java.lang.Object)"
    ],
    "javax.xml.soap.attachmentpart.setcontent": [
        "javax.xml.soap.AttachmentPart.setContent(java.lang.Object,java.lang.String)"
    ],
    "javax.sound.sampled.dataline.getframeposition": [
        "javax.sound.sampled.DataLine.getFramePosition()"
    ],
    "javax.swing.plaf.multi.multitooltipui.paint": [
        "javax.swing.plaf.multi.MultiToolTipUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.plaf.multi.multilabelui.uninstallui": [
        "javax.swing.plaf.multi.MultiLabelUI.uninstallUI(javax.swing.JComponent)"
    ],
    "javax.swing.text.abstractwriter.getindentspace": [
        "javax.swing.text.AbstractWriter.getIndentSpace()"
    ],
    "javax.swing.text.jtextcomponent.setdropmode": [
        "javax.swing.text.JTextComponent.setDropMode(javax.swing.DropMode)"
    ],
    "javax.management.modelmbean.requiredmodelmbean.removenotificationlistener": [
        "javax.management.modelmbean.RequiredModelMBean.removeNotificationListener(javax.management.NotificationListener)"
    ],
    "java.sql.databasemetadata.supportstransactionisolationlevel": [
        "java.sql.DatabaseMetaData.supportsTransactionIsolationLevel(int)"
    ],
    "java.sql.sqlinput.readtimestamp": [
        "java.sql.SQLInput.readTimestamp()"
    ],
    "java.lang.reflect.member.getdeclaringclass": [
        "java.lang.reflect.Member.getDeclaringClass()"
    ],
    "java.sql.struct.getattributes": [
        "java.sql.Struct.getAttributes()",
        "java.sql.Struct.getAttributes(,java.lang.Class<?>>)"
    ],
    "java.time.zoneid.of": [
        "java.time.ZoneId.of(java.lang.String)",
        "java.time.ZoneId.of(java.lang.String,,java.lang.String>)"
    ],
    "java.io.objectinputstream.readobject": [
        "java.io.ObjectInputStream.readObject()"
    ],
    "java.util.concurrent.atomic.atomicintegerarray.updateandget": [
        "java.util.concurrent.atomic.AtomicIntegerArray.updateAndGet(int,java.util.function.IntUnaryOperator)"
    ],
    "java.util.stream.doublestream.builder.accept": [
        "java.util.stream.DoubleStream.Builder.accept(double)"
    ],
    "javax.swing.jcombobox.firepopupmenuwillbecomevisible": [
        "javax.swing.JComboBox.firePopupMenuWillBecomeVisible()"
    ],
    "javax.xml.namespace.qname.valueof": [
        "javax.xml.namespace.QName.valueOf(java.lang.String)"
    ],
    "java.awt.component.validate": [
        "java.awt.Component.validate()"
    ],
    "java.time.chrono.chronozoneddatetime.getchronology": [
        "java.time.chrono.ChronoZonedDateTime.getChronology()"
    ],
    "javax.sound.midi.synthesizer.unloadinstrument": [
        "javax.sound.midi.Synthesizer.unloadInstrument(javax.sound.midi.Instrument)"
    ],
    "javax.print.streamprintservice.dispose": [
        "javax.print.StreamPrintService.dispose()"
    ],
    "java.nio.channels.selectionkey.isconnectable": [
        "java.nio.channels.SelectionKey.isConnectable()"
    ],
    "java.time.format.datetimeformatter.getresolverfields": [
        "java.time.format.DateTimeFormatter.getResolverFields()"
    ],
    "java.util.stream.longstream.sum": [
        "java.util.stream.LongStream.sum()"
    ],
    "java.time.offsettime.adjustinto": [
        "java.time.OffsetTime.adjustInto(java.time.temporal.Temporal)"
    ],
    "org.omg.dynamicany.dynsequenceoperations.get_elements": [
        "org.omg.DynamicAny.DynSequenceOperations.get_elements()"
    ],
    "javax.imageio.metadata.iiometadatanode.getfeature": [
        "javax.imageio.metadata.IIOMetadataNode.getFeature(java.lang.String,java.lang.String)"
    ],
    "java.sql.resultsetmetadata.getcolumnlabel": [
        "java.sql.ResultSetMetaData.getColumnLabel(int)"
    ],
    "org.omg.dynamicany._dynstructstub.set_members": [
        "org.omg.DynamicAny._DynStructStub.set_members(org.omg.DynamicAny.NameValuePair[])"
    ],
    "java.util.logging.handler.seterrormanager": [
        "java.util.logging.Handler.setErrorManager(java.util.logging.ErrorManager)"
    ],
    "javax.swing.abstractbutton.additemlistener": [
        "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)"
    ],
    "javax.swing.jcombobox.getitemat": [
        "javax.swing.JComboBox.getItemAt(int)"
    ],
    "java.awt.geom.roundrectangle2d.double.gety": [
        "java.awt.geom.RoundRectangle2D.Double.getY()"
    ],
    "java.time.chrono.era.getlong": [
        "java.time.chrono.Era.getLong(java.time.temporal.TemporalField)"
    ],
    "javax.xml.soap.soapmessage.setcontentdescription": [
        "javax.xml.soap.SOAPMessage.setContentDescription(java.lang.String)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getcontroldisabled": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getControlDisabled()"
    ],
    "java.util.stack.peek": [
        "java.util.Stack.peek()"
    ],
    "javax.swing.jviewport.scrollrecttovisible": [
        "javax.swing.JViewport.scrollRectToVisible(java.awt.Rectangle)"
    ],
    "java.util.stream.collectors.tolist": [
        "java.util.stream.Collectors.toList()"
    ],
    "javax.xml.bind.jaxbcontext.createbinder": [
        "javax.xml.bind.JAXBContext.createBinder()",
        "javax.xml.bind.JAXBContext.createBinder(java.lang.Class<T>)"
    ],
    "java.awt.textarea.append": [
        "java.awt.TextArea.append(java.lang.String)"
    ],
    "javax.sound.sampled.floatcontrol.getminimum": [
        "javax.sound.sampled.FloatControl.getMinimum()"
    ],
    "java.lang.securitymanager.checkcreateclassloader": [
        "java.lang.SecurityManager.checkCreateClassLoader()"
    ],
    "javax.swing.plaf.synth.synthlookandfeel.shouldupdatestyleonancestorchanged": [
        "javax.swing.plaf.synth.SynthLookAndFeel.shouldUpdateStyleOnAncestorChanged()"
    ],
    "javax.swing.plaf.synth.synthtableheaderui.getcontext": [
        "javax.swing.plaf.synth.SynthTableHeaderUI.getContext(javax.swing.JComponent)"
    ],
    "java.security.policy.setpolicy": [
        "java.security.Policy.setPolicy(java.security.Policy)"
    ],
    "javax.management.modelmbean.modelmbeaninfo.getnotification": [
        "javax.management.modelmbean.ModelMBeanInfo.getNotification(java.lang.String)"
    ],
    "javax.sql.rowset.spi.syncprovider.getrowsetwriter": [
        "javax.sql.rowset.spi.SyncProvider.getRowSetWriter()"
    ],
    "java.awt.event.componentevent.getcomponent": [
        "java.awt.event.ComponentEvent.getComponent()"
    ],
    "org.xml.sax.helpers.xmlreaderadapter.setdtdhandler": [
        "org.xml.sax.helpers.XMLReaderAdapter.setDTDHandler(org.xml.sax.DTDHandler)"
    ],
    "org.omg.dynamicany._dynunionstub.get_wstring": [
        "org.omg.DynamicAny._DynUnionStub.get_wstring()"
    ],
    "javax.xml.soap.soapfault.setfaultactor": [
        "javax.xml.soap.SOAPFault.setFaultActor(java.lang.String)"
    ],
    "java.util.collections.reverseorder": [
        "java.util.Collections.reverseOrder(java.util.Comparator<T>)",
        "java.util.Collections.reverseOrder()"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.setparent": [
        "org.xml.sax.helpers.XMLFilterImpl.setParent(org.xml.sax.XMLReader)"
    ],
    "java.awt.geom.line2d.double.getp1": [
        "java.awt.geom.Line2D.Double.getP1()"
    ],
    "javax.naming.linkref.getlinkname": [
        "javax.naming.LinkRef.getLinkName()"
    ],
    "java.awt.component.getcursor": [
        "java.awt.Component.getCursor()"
    ],
    "java.awt.im.inputcontext.removenotify": [
        "java.awt.im.InputContext.removeNotify(java.awt.Component)"
    ],
    "javax.management.monitor.monitor.postregister": [
        "javax.management.monitor.Monitor.postRegister(java.lang.Boolean)"
    ],
    "javax.lang.model.annotatedconstruct.getannotation": [
        "javax.lang.model.AnnotatedConstruct.getAnnotation(java.lang.Class<A>)"
    ],
    "javax.swing.buttongroup.setselected": [
        "javax.swing.ButtonGroup.setSelected(javax.swing.ButtonModel,boolean)"
    ],
    "java.awt.dimension.tostring": [
        "java.awt.Dimension.toString()"
    ],
    "java.awt.image.databufferint.getbankdata": [
        "java.awt.image.DataBufferInt.getBankData()"
    ],
    "javax.swing.jtree.setcellrenderer": [
        "javax.swing.JTree.setCellRenderer(javax.swing.tree.TreeCellRenderer)"
    ],
    "java.awt.image.areaaveragingscalefilter.sethints": [
        "java.awt.image.AreaAveragingScaleFilter.setHints(int)"
    ],
    "java.util.calendar.computefields": [
        "java.util.Calendar.computeFields()"
    ],
    "javax.swing.listselectionmodel.setselectionmode": [
        "javax.swing.ListSelectionModel.setSelectionMode(int)"
    ],
    "java.io.randomaccessfile.readutf": [
        "java.io.RandomAccessFile.readUTF()"
    ],
    "javax.swing.plaf.multi.multidesktopiconui.update": [
        "javax.swing.plaf.multi.MultiDesktopIconUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.awt.font.texthitinfo.trailing": [
        "java.awt.font.TextHitInfo.trailing(int)"
    ],
    "java.lang.reflect.field.getannotatedtype": [
        "java.lang.reflect.Field.getAnnotatedType()"
    ],
    "java.util.zip.inflaterinputstream.reset": [
        "java.util.zip.InflaterInputStream.reset()"
    ],
    "java.math.bigdecimal.movepointleft": [
        "java.math.BigDecimal.movePointLeft(int)"
    ],
    "java.lang.charsequence.subsequence": [
        "java.lang.CharSequence.subSequence(int,int)"
    ],
    "javax.net.ssl.snihostname.hashcode": [
        "javax.net.ssl.SNIHostName.hashCode()"
    ],
    "java.awt.keyboardfocusmanager.upfocuscycle": [
        "java.awt.KeyboardFocusManager.upFocusCycle()",
        "java.awt.KeyboardFocusManager.upFocusCycle(java.awt.Component)"
    ],
    "java.awt.trayicon.setimage": [
        "java.awt.TrayIcon.setImage(java.awt.Image)"
    ],
    "javax.swing.text.paragraphview.gettabset": [
        "javax.swing.text.ParagraphView.getTabSet()"
    ],
    "javax.swing.text.html.imageview.setpropertiesfromattributes": [
        "javax.swing.text.html.ImageView.setPropertiesFromAttributes()"
    ],
    "java.util.function.longsupplier.getaslong": [
        "java.util.function.LongSupplier.getAsLong()"
    ],
    "java.lang.securitymanager.checkexec": [
        "java.lang.SecurityManager.checkExec(java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthpanelui.installui": [
        "javax.swing.plaf.synth.SynthPanelUI.installUI(javax.swing.JComponent)"
    ],
    "javax.management.openmbean.openmbeaninfo.getattributes": [
        "javax.management.openmbean.OpenMBeanInfo.getAttributes()"
    ],
    "java.lang.management.memorypoolmxbean.getmemorymanagernames": [
        "java.lang.management.MemoryPoolMXBean.getMemoryManagerNames()"
    ],
    "javax.rmi.corba.util.unexportobject": [
        "javax.rmi.CORBA.Util.unexportObject(java.rmi.Remote)"
    ],
    "java.beans.designmode.setdesigntime": [
        "java.beans.DesignMode.setDesignTime(boolean)"
    ],
    "java.net.urlconnection.setallowuserinteraction": [
        "java.net.URLConnection.setAllowUserInteraction(boolean)"
    ],
    "java.time.chrono.chronology.prolepticyear": [
        "java.time.chrono.Chronology.prolepticYear(java.time.chrono.Era,int)"
    ],
    "javax.swing.jrootpane.setglasspane": [
        "javax.swing.JRootPane.setGlassPane(java.awt.Component)"
    ],
    "java.awt.list.removenotify": [
        "java.awt.List.removeNotify()"
    ],
    "javax.swing.plaf.multi.multisliderui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiSliderUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "java.awt.image.filteredimagesource.removeconsumer": [
        "java.awt.image.FilteredImageSource.removeConsumer(java.awt.image.ImageConsumer)"
    ],
    "javax.swing.defaultlistcellrenderer.firepropertychange": [
        "javax.swing.DefaultListCellRenderer.firePropertyChange(java.lang.String,short,short)",
        "javax.swing.DefaultListCellRenderer.firePropertyChange(java.lang.String,int,int)",
        "javax.swing.DefaultListCellRenderer.firePropertyChange(java.lang.String,byte,byte)",
        "javax.swing.DefaultListCellRenderer.firePropertyChange(java.lang.String,long,long)",
        "javax.swing.DefaultListCellRenderer.firePropertyChange(java.lang.String,float,float)",
        "javax.swing.DefaultListCellRenderer.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
        "javax.swing.DefaultListCellRenderer.firePropertyChange(java.lang.String,double,double)",
        "javax.swing.DefaultListCellRenderer.firePropertyChange(java.lang.String,char,char)",
        "javax.swing.DefaultListCellRenderer.firePropertyChange(java.lang.String,boolean,boolean)"
    ],
    "java.io.file.deleteonexit": [
        "java.io.File.deleteOnExit()"
    ],
    "org.omg.portableinterceptor.iorinfooperations.state": [
        "org.omg.PortableInterceptor.IORInfoOperations.state()"
    ],
    "java.io.pushbackreader.unread": [
        "java.io.PushbackReader.unread(char[],int,int)",
        "java.io.PushbackReader.unread(int)",
        "java.io.PushbackReader.unread(char[])"
    ],
    "javax.swing.jframe.settransferhandler": [
        "javax.swing.JFrame.setTransferHandler(javax.swing.TransferHandler)"
    ],
    "java.lang.class.getmethod": [
        "java.lang.Class.getMethod(java.lang.String,java.lang.Class<?>)",
        "java.lang.Class.getMethod(java.lang.String,java.lang.Class<?>...)"
    ],
    "javax.swing.text.boxview.layoutminoraxis": [
        "javax.swing.text.BoxView.layoutMinorAxis(int,int,int[],int[])"
    ],
    "javax.swing.text.passwordview.viewtomodel": [
        "javax.swing.text.PasswordView.viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias[])"
    ],
    "org.w3c.dom.domconfiguration.getparameternames": [
        "org.w3c.dom.DOMConfiguration.getParameterNames()"
    ],
    "javax.xml.soap.soapmessage.removeallattachments": [
        "javax.xml.soap.SOAPMessage.removeAllAttachments()"
    ],
    "javax.swing.jtooltip.getcomponent": [
        "javax.swing.JToolTip.getComponent()"
    ],
    "javax.swing.text.glyphview.getpartialspan": [
        "javax.swing.text.GlyphView.getPartialSpan(int,int)"
    ],
    "javax.swing.jscrollbar.setvisibleamount": [
        "javax.swing.JScrollBar.setVisibleAmount(int)"
    ],
    "java.lang.exceptionininitializererror.getexception": [
        "java.lang.ExceptionInInitializerError.getException()"
    ],
    "java.util.stream.intstream.boxed": [
        "java.util.stream.IntStream.boxed()"
    ],
    "javax.crypto.keyagreement.init": [
        "javax.crypto.KeyAgreement.init(java.security.Key,java.security.SecureRandom)",
        "javax.crypto.KeyAgreement.init(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
        "javax.crypto.KeyAgreement.init(java.security.Key,java.security.spec.AlgorithmParameterSpec)",
        "javax.crypto.KeyAgreement.init(java.security.Key)"
    ],
    "javax.swing.text.html.parser.dtd.getentity": [
        "javax.swing.text.html.parser.DTD.getEntity(java.lang.String)",
        "javax.swing.text.html.parser.DTD.getEntity(int)"
    ],
    "java.awt.im.spi.inputmethod.activate": [
        "java.awt.im.spi.InputMethod.activate()"
    ],
    "java.net.authenticator.getrequestingprotocol": [
        "java.net.Authenticator.getRequestingProtocol()"
    ],
    "java.lang.system.nanotime": [
        "java.lang.System.nanoTime()"
    ],
    "java.util.collections.singletonlist": [
        "java.util.Collections.singletonList(T)"
    ],
    "javax.imageio.metadata.iiometadatanode.setnodevalue": [
        "javax.imageio.metadata.IIOMetadataNode.setNodeValue(java.lang.String)"
    ],
    "javax.swing.text.defaulthighlighter.gethighlights": [
        "javax.swing.text.DefaultHighlighter.getHighlights()"
    ],
    "javax.xml.bind.unmarshaller.getproperty": [
        "javax.xml.bind.Unmarshaller.getProperty(java.lang.String)"
    ],
    "org.w3c.dom.typeinfo.gettypename": [
        "org.w3c.dom.TypeInfo.getTypeName()"
    ],
    "javax.xml.stream.xmleventreader.getelementtext": [
        "javax.xml.stream.XMLEventReader.getElementText()"
    ],
    "javax.imageio.plugins.jpeg.jpegimagereadparam.getdchuffmantables": [
        "javax.imageio.plugins.jpeg.JPEGImageReadParam.getDCHuffmanTables()"
    ],
    "javax.lang.model.util.elements.getelementvalueswithdefaults": [
        "javax.lang.model.util.Elements.getElementValuesWithDefaults(javax.lang.model.element.AnnotationMirror)"
    ],
    "javax.swing.plaf.basic.basictreeui.createtreemodellistener": [
        "javax.swing.plaf.basic.BasicTreeUI.createTreeModelListener()"
    ],
    "java.util.prefs.preferencechangeevent.getnode": [
        "java.util.prefs.PreferenceChangeEvent.getNode()"
    ],
    "java.util.stream.longstream.foreach": [
        "java.util.stream.LongStream.forEach(java.util.function.LongConsumer)"
    ],
    "java.security.allpermission.equals": [
        "java.security.AllPermission.equals(java.lang.Object)"
    ],
    "javax.swing.spinnerdatemodel.setend": [
        "javax.swing.SpinnerDateModel.setEnd(java.lang.Comparable)"
    ],
    "javax.xml.bind.marshaller.setattachmentmarshaller": [
        "javax.xml.bind.Marshaller.setAttachmentMarshaller(javax.xml.bind.attachment.AttachmentMarshaller)"
    ],
    "javax.swing.jtextpane.setparagraphattributes": [
        "javax.swing.JTextPane.setParagraphAttributes(javax.swing.text.AttributeSet,boolean)"
    ],
    "javax.management.remote.rmi.rmiconnectorserver.tojmxconnector": [
        "javax.management.remote.rmi.RMIConnectorServer.toJMXConnector(,?>)"
    ],
    "java.sql.databasemetadata.getsearchstringescape": [
        "java.sql.DatabaseMetaData.getSearchStringEscape()"
    ],
    "javax.naming.cannotproceedexception.setremainingnewname": [
        "javax.naming.CannotProceedException.setRemainingNewName(javax.naming.Name)"
    ],
    "java.util.concurrent.locks.abstractqueuedlongsynchronizer.getwaitingthreads": [
        "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getWaitingThreads(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject)"
    ],
    "javax.sql.rowset.cachedrowset.columnupdated": [
        "javax.sql.rowset.CachedRowSet.columnUpdated(int)",
        "javax.sql.rowset.CachedRowSet.columnUpdated(java.lang.String)"
    ],
    "javax.accessibility.accessiblecomponent.getforeground": [
        "javax.accessibility.AccessibleComponent.getForeground()"
    ],
    "java.beans.eventhandler.invoke": [
        "java.beans.EventHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])"
    ],
    "javax.swing.plaf.layerui.processmouseevent": [
        "javax.swing.plaf.LayerUI.processMouseEvent(java.awt.event.MouseEvent,javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)"
    ],
    "java.io.pipedoutputstream.write": [
        "java.io.PipedOutputStream.write(int)",
        "java.io.PipedOutputStream.write(byte[],int,int)"
    ],
    "javax.activation.commandmap.getcommand": [
        "javax.activation.CommandMap.getCommand(java.lang.String,java.lang.String)",
        "javax.activation.CommandMap.getCommand(java.lang.String,java.lang.String,javax.activation.DataSource)"
    ],
    "javax.swing.plaf.multi.multioptionpaneui.getuis": [
        "javax.swing.plaf.multi.MultiOptionPaneUI.getUIs()"
    ],
    "java.util.stream.collectors.summingint": [
        "java.util.stream.Collectors.summingInt(java.util.function.ToIntFunction<? super T>)"
    ],
    "javax.swing.tree.treeselectionmodel.addselectionpath": [
        "javax.swing.tree.TreeSelectionModel.addSelectionPath(javax.swing.tree.TreePath)"
    ],
    "java.lang.reflect.parameter.getdeclaringexecutable": [
        "java.lang.reflect.Parameter.getDeclaringExecutable()"
    ],
    "javax.imageio.event.iioreadupdatelistener.passcomplete": [
        "javax.imageio.event.IIOReadUpdateListener.passComplete(javax.imageio.ImageReader,java.awt.image.BufferedImage)"
    ],
    "javax.swing.jlayer.createglasspane": [
        "javax.swing.JLayer.createGlassPane()"
    ],
    "java.lang.management.threadmxbean.setthreadcputimeenabled": [
        "java.lang.management.ThreadMXBean.setThreadCpuTimeEnabled(boolean)"
    ],
    "java.beans.customizer.setobject": [
        "java.beans.Customizer.setObject(java.lang.Object)"
    ],
    "java.awt.image.renderable.renderableimageop.setparameterblock": [
        "java.awt.image.renderable.RenderableImageOp.setParameterBlock(java.awt.image.renderable.ParameterBlock)"
    ],
    "java.util.concurrent.locks.reentrantlock.tostring": [
        "java.util.concurrent.locks.ReentrantLock.toString()"
    ],
    "java.beans.beancontext.beancontextsupport.copychildren": [
        "java.beans.beancontext.BeanContextSupport.copyChildren()"
    ],
    "javax.swing.jtree.gettreewillexpandlisteners": [
        "javax.swing.JTree.getTreeWillExpandListeners()"
    ],
    "java.time.offsettime.compareto": [
        "java.time.OffsetTime.compareTo(java.time.OffsetTime)"
    ],
    "javax.net.ssl.trustmanagerfactoryspi.engineinit": [
        "javax.net.ssl.TrustManagerFactorySpi.engineInit(java.security.KeyStore)",
        "javax.net.ssl.TrustManagerFactorySpi.engineInit(javax.net.ssl.ManagerFactoryParameters)"
    ],
    "javax.swing.text.defaultformatter.setoverwritemode": [
        "javax.swing.text.DefaultFormatter.setOverwriteMode(boolean)"
    ],
    "java.time.zone.zoneoffsettransitionrule.hashcode": [
        "java.time.zone.ZoneOffsetTransitionRule.hashCode()"
    ],
    "org.omg.dynamicany._dynvaluestub.insert_char": [
        "org.omg.DynamicAny._DynValueStub.insert_char(char)"
    ],
    "javax.lang.model.util.elements.getallmembers": [
        "javax.lang.model.util.Elements.getAllMembers(javax.lang.model.element.TypeElement)"
    ],
    "javax.swing.jtable.setshowverticallines": [
        "javax.swing.JTable.setShowVerticalLines(boolean)"
    ],
    "javax.tools.simplejavafileobject.openreader": [
        "javax.tools.SimpleJavaFileObject.openReader(boolean)"
    ],
    "java.awt.image.convolveop.createcompatibledestraster": [
        "java.awt.image.ConvolveOp.createCompatibleDestRaster(java.awt.image.Raster)"
    ],
    "java.nio.file.files.getattribute": [
        "java.nio.file.Files.getAttribute(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption)",
        "java.nio.file.Files.getAttribute(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption...)"
    ],
    "javax.net.ssl.sslsocket.getenabledciphersuites": [
        "javax.net.ssl.SSLSocket.getEnabledCipherSuites()"
    ],
    "java.util.prefs.preferences.putlong": [
        "java.util.prefs.Preferences.putLong(java.lang.String,long)"
    ],
    "javax.swing.abstractaction.getkeys": [
        "javax.swing.AbstractAction.getKeys()"
    ],
    "javax.swing.jlayeredpane.getcomponenttolayer": [
        "javax.swing.JLayeredPane.getComponentToLayer()"
    ],
    "javax.swing.table.tablerowsorter.setstringconverter": [
        "javax.swing.table.TableRowSorter.setStringConverter(javax.swing.table.TableStringConverter)"
    ],
    "java.awt.image.renderedimage.getnumxtiles": [
        "java.awt.image.RenderedImage.getNumXTiles()"
    ],
    "javax.print.attribute.standard.jobimpressions.getname": [
        "javax.print.attribute.standard.JobImpressions.getName()"
    ],
    "java.math.bigdecimal.toengineeringstring": [
        "java.math.BigDecimal.toEngineeringString()"
    ],
    "org.xml.sax.ext.entityresolver2.resolveentity": [
        "org.xml.sax.ext.EntityResolver2.resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
    ],
    "javax.print.attribute.standard.copiessupported.getcategory": [
        "javax.print.attribute.standard.CopiesSupported.getCategory()"
    ],
    "java.lang.management.managementfactory.getclassloadingmxbean": [
        "java.lang.management.ManagementFactory.getClassLoadingMXBean()"
    ],
    "java.lang.invoke.methodtype.parametercount": [
        "java.lang.invoke.MethodType.parameterCount()"
    ],
    "java.security.principal.hashcode": [
        "java.security.Principal.hashCode()"
    ],
    "javax.swing.tree.defaultmutabletreenode.getsiblingcount": [
        "javax.swing.tree.DefaultMutableTreeNode.getSiblingCount()"
    ],
    "java.awt.color.icc_colorspace.fromrgb": [
        "java.awt.color.ICC_ColorSpace.fromRGB(float[])"
    ],
    "javax.management.remote.notificationresult.gettargetednotifications": [
        "javax.management.remote.NotificationResult.getTargetedNotifications()"
    ],
    "javax.xml.validation.typeinfoprovider.getattributetypeinfo": [
        "javax.xml.validation.TypeInfoProvider.getAttributeTypeInfo(int)"
    ],
    "javax.xml.parsers.documentbuilder.isnamespaceaware": [
        "javax.xml.parsers.DocumentBuilder.isNamespaceAware()"
    ],
    "java.lang.compiler.command": [
        "java.lang.Compiler.command(java.lang.Object)"
    ],
    "org.omg.dynamicany.dynanyoperations.insert_ushort": [
        "org.omg.DynamicAny.DynAnyOperations.insert_ushort(short)"
    ],
    "java.sql.databasemetadata.getdatabaseproductname": [
        "java.sql.DatabaseMetaData.getDatabaseProductName()"
    ],
    "java.sql.databasemetadata.getmaxprocedurenamelength": [
        "java.sql.DatabaseMetaData.getMaxProcedureNameLength()"
    ],
    "java.awt.image.bufferedimageop.createcompatibledestimage": [
        "java.awt.image.BufferedImageOp.createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)"
    ],
    "java.awt.dnd.draggesturerecognizer.getdragsource": [
        "java.awt.dnd.DragGestureRecognizer.getDragSource()"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.uninstalldefaults": [
        "javax.swing.plaf.basic.BasicComboBoxUI.uninstallDefaults()"
    ],
    "javax.management.mbeanfeatureinfo.getdescription": [
        "javax.management.MBeanFeatureInfo.getDescription()"
    ],
    "javax.swing.plaf.synth.synthsliderui.createui": [
        "javax.swing.plaf.synth.SynthSliderUI.createUI(javax.swing.JComponent)"
    ],
    "java.util.timer.scheduleatfixedrate": [
        "java.util.Timer.scheduleAtFixedRate(java.util.TimerTask,long,long)",
        "java.util.Timer.scheduleAtFixedRate(java.util.TimerTask,java.util.Date,long)"
    ],
    "java.beans.beancontext.beancontextsupport.remove": [
        "java.beans.beancontext.BeanContextSupport.remove(java.lang.Object)"
    ],
    "java.time.chrono.isochronology.dateyearday": [
        "java.time.chrono.IsoChronology.dateYearDay(int,int)",
        "java.time.chrono.IsoChronology.dateYearDay(java.time.chrono.Era,int,int)"
    ],
    "java.nio.charset.charset.newencoder": [
        "java.nio.charset.Charset.newEncoder()"
    ],
    "javax.sql.rowset.setsqlxml": [
        "javax.sql.RowSet.setSQLXML(java.lang.String,java.sql.SQLXML)",
        "javax.sql.RowSet.setSQLXML(int,java.sql.SQLXML)"
    ],
    "java.lang.short.intvalue": [
        "java.lang.Short.intValue()"
    ],
    "javax.swing.text.html.htmleditorkit.htmltextaction.findelementmatchingtag": [
        "javax.swing.text.html.HTMLEditorKit.HTMLTextAction.findElementMatchingTag(javax.swing.text.html.HTMLDocument,int,javax.swing.text.html.HTML.Tag)"
    ],
    "javax.swing.jcombobox.fireitemstatechanged": [
        "javax.swing.JComboBox.fireItemStateChanged(java.awt.event.ItemEvent)"
    ],
    "javax.swing.plaf.synth.synthspinnerui.createpreviousbutton": [
        "javax.swing.plaf.synth.SynthSpinnerUI.createPreviousButton()"
    ],
    "java.awt.window.getownedwindows": [
        "java.awt.Window.getOwnedWindows()"
    ],
    "java.util.concurrent.atomic.longadder.intvalue": [
        "java.util.concurrent.atomic.LongAdder.intValue()"
    ],
    "java.rmi.dgc.dgc.clean": [
        "java.rmi.dgc.DGC.clean(java.rmi.server.ObjID[],long,java.rmi.dgc.VMID,boolean)"
    ],
    "javax.swing.jfilechooser.getactionlisteners": [
        "javax.swing.JFileChooser.getActionListeners()"
    ],
    "java.awt.multiplegradientpaint.colorspacetype.valueof": [
        "java.awt.MultipleGradientPaint.ColorSpaceType.valueOf(java.lang.String)"
    ],
    "javax.naming.compositename.clone": [
        "javax.naming.CompositeName.clone()"
    ],
    "javax.swing.plaf.basic.basictreeui.getmaximumsize": [
        "javax.swing.plaf.basic.BasicTreeUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "java.awt.geom.path2d.float.moveto": [
        "java.awt.geom.Path2D.Float.moveTo(float,float)",
        "java.awt.geom.Path2D.Float.moveTo(double,double)"
    ],
    "org.omg.dynamicany.dynanyoperations.get_ulonglong": [
        "org.omg.DynamicAny.DynAnyOperations.get_ulonglong()"
    ],
    "javax.xml.stream.xmlstreamwriter.close": [
        "javax.xml.stream.XMLStreamWriter.close()"
    ],
    "javax.swing.jviewport.paint": [
        "javax.swing.JViewport.paint(java.awt.Graphics)"
    ],
    "java.awt.borderlayout.invalidatelayout": [
        "java.awt.BorderLayout.invalidateLayout(java.awt.Container)"
    ],
    "java.awt.component.getkeylisteners": [
        "java.awt.Component.getKeyListeners()"
    ],
    "java.security.principal.equals": [
        "java.security.Principal.equals(java.lang.Object)"
    ],
    "javax.management.query.geq": [
        "javax.management.Query.geq(javax.management.ValueExp,javax.management.ValueExp)"
    ],
    "javax.swing.plaf.multi.multiscrollbarui.contains": [
        "javax.swing.plaf.multi.MultiScrollBarUI.contains(javax.swing.JComponent,int,int)"
    ],
    "javax.swing.jlist.getscrollableblockincrement": [
        "javax.swing.JList.getScrollableBlockIncrement(java.awt.Rectangle,int,int)"
    ],
    "javax.management.relation.relationservicembean.findreferencingrelations": [
        "javax.management.relation.RelationServiceMBean.findReferencingRelations(javax.management.ObjectName,java.lang.String,java.lang.String)"
    ],
    "java.util.linkedhashmap.foreach": [
        "java.util.LinkedHashMap.forEach(java.util.function.BiConsumer<? super,? super V>)"
    ],
    "javax.tools.diagnostic.getkind": [
        "javax.tools.Diagnostic.getKind()"
    ],
    "javax.crypto.mac.getinstance": [
        "javax.crypto.Mac.getInstance(java.lang.String)",
        "javax.crypto.Mac.getInstance(java.lang.String,java.lang.String)",
        "javax.crypto.Mac.getInstance(java.lang.String,java.security.Provider)"
    ],
    "java.util.simpletimezone.getoffset": [
        "java.util.SimpleTimeZone.getOffset(int,int,int,int,int,int)",
        "java.util.SimpleTimeZone.getOffset(long)"
    ],
    "java.security.algorithmparameters.getalgorithm": [
        "java.security.AlgorithmParameters.getAlgorithm()"
    ],
    "org.xml.sax.helpers.parseradapter.setproperty": [
        "org.xml.sax.helpers.ParserAdapter.setProperty(java.lang.String,java.lang.Object)"
    ],
    "java.io.objectoutputstream.writechars": [
        "java.io.ObjectOutputStream.writeChars(java.lang.String)"
    ],
    "java.rmi.activation.activationdesc.getrestartmode": [
        "java.rmi.activation.ActivationDesc.getRestartMode()"
    ],
    "javax.swing.jwindow.setlayeredpane": [
        "javax.swing.JWindow.setLayeredPane(javax.swing.JLayeredPane)"
    ],
    "org.w3c.dom.node.getnodename": [
        "org.w3c.dom.Node.getNodeName()"
    ],
    "java.lang.securitymanager.getthreadgroup": [
        "java.lang.SecurityManager.getThreadGroup()"
    ],
    "javax.security.auth.callback.confirmationcallback.getdefaultoption": [
        "javax.security.auth.callback.ConfirmationCallback.getDefaultOption()"
    ],
    "java.security.keystorespi.enginesetentry": [
        "java.security.KeyStoreSpi.engineSetEntry(java.lang.String,java.security.KeyStore.Entry,java.security.KeyStore.ProtectionParameter)"
    ],
    "javax.management.loading.mletmbean.setlibrarydirectory": [
        "javax.management.loading.MLetMBean.setLibraryDirectory(java.lang.String)"
    ],
    "javax.sql.rowset.cachedrowset.release": [
        "javax.sql.rowset.CachedRowSet.release()"
    ],
    "java.awt.image.colormodel.gettransparency": [
        "java.awt.image.ColorModel.getTransparency()"
    ],
    "java.io.file.tostring": [
        "java.io.File.toString()"
    ],
    "javax.swing.plaf.metal.metaltoolbarui.createrolloverlistener": [
        "javax.swing.plaf.metal.MetalToolBarUI.createRolloverListener()"
    ],
    "java.util.function.tointfunction.applyasint": [
        "java.util.function.ToIntFunction.applyAsInt(java.util.function.ToIntFunction)",
        "java.util.function.ToIntFunction.applyAsInt(T)"
    ],
    "java.util.concurrent.synchronousqueue.offer": [
        "java.util.concurrent.SynchronousQueue.offer(java.util.concurrent.SynchronousQueue)",
        "java.util.concurrent.SynchronousQueue.offer(E,long,java.util.concurrent.TimeUnit)",
        "java.util.concurrent.SynchronousQueue.offer(E)",
        "java.util.concurrent.SynchronousQueue.offer(java.util.concurrent.SynchronousQueue,long,java.util.concurrent.TimeUnit)"
    ],
    "java.time.zoneddatetime.withdayofmonth": [
        "java.time.ZonedDateTime.withDayOfMonth(int)"
    ],
    "javax.management.standardmbean.prederegister": [
        "javax.management.StandardMBean.preDeregister()"
    ],
    "javax.swing.jframe.setdefaultlookandfeeldecorated": [
        "javax.swing.JFrame.setDefaultLookAndFeelDecorated(boolean)"
    ],
    "java.security.spec.rsaprivatecrtkeyspec.getprimep": [
        "java.security.spec.RSAPrivateCrtKeySpec.getPrimeP()"
    ],
    "javax.naming.event.namingevent.getnewbinding": [
        "javax.naming.event.NamingEvent.getNewBinding()"
    ],
    "org.omg.cosnaming._namingcontextstub.bind_new_context": [
        "org.omg.CosNaming._NamingContextStub.bind_new_context(org.omg.CosNaming.NameComponent[])"
    ],
    "java.text.decimalformatsymbols.getcurrency": [
        "java.text.DecimalFormatSymbols.getCurrency()"
    ],
    "javax.sound.midi.track.add": [
        "javax.sound.midi.Track.add(javax.sound.midi.MidiEvent)"
    ],
    "java.awt.font.textattribute.readresolve": [
        "java.awt.font.TextAttribute.readResolve()"
    ],
    "javax.xml.crypto.octetstreamdata.getoctetstream": [
        "javax.xml.crypto.OctetStreamData.getOctetStream()"
    ],
    "javax.swing.text.abstractwriter.gettext": [
        "javax.swing.text.AbstractWriter.getText(javax.swing.text.Element)"
    ],
    "org.xml.sax.errorhandler.warning": [
        "org.xml.sax.ErrorHandler.warning(org.xml.sax.SAXParseException)"
    ],
    "java.awt.image.renderable.parameterblock.getsources": [
        "java.awt.image.renderable.ParameterBlock.getSources()"
    ],
    "java.math.bigdecimal.striptrailingzeros": [
        "java.math.BigDecimal.stripTrailingZeros()"
    ],
    "java.util.concurrent.concurrentskiplistmap.tailmap": [
        "java.util.concurrent.ConcurrentSkipListMap.tailMap(K)"
    ],
    "java.net.inetsocketaddress.isunresolved": [
        "java.net.InetSocketAddress.isUnresolved()"
    ],
    "java.security.cert.pkixparameters.isrevocationenabled": [
        "java.security.cert.PKIXParameters.isRevocationEnabled()"
    ],
    "java.lang.string.concat": [
        "java.lang.String.concat(java.lang.String)"
    ],
    "javax.swing.text.html.imageview.setloadssynchronously": [
        "javax.swing.text.html.ImageView.setLoadsSynchronously(boolean)"
    ],
    "java.nio.doublebuffer.duplicate": [
        "java.nio.DoubleBuffer.duplicate()"
    ],
    "org.ietf.jgss.gssexception.getminor": [
        "org.ietf.jgss.GSSException.getMinor()"
    ],
    "java.io.console.readpassword": [
        "java.io.Console.readPassword(java.lang.String,java.lang.Object)",
        "java.io.Console.readPassword(java.lang.String,java.lang.Object...)",
        "java.io.Console.readPassword()"
    ],
    "java.awt.geom.ellipse2d.float.getwidth": [
        "java.awt.geom.Ellipse2D.Float.getWidth()"
    ],
    "javax.imageio.iioimage.getthumbnails": [
        "javax.imageio.IIOImage.getThumbnails()"
    ],
    "javax.swing.plaf.synth.synthmenuui.getcontext": [
        "javax.swing.plaf.synth.SynthMenuUI.getContext(javax.swing.JComponent)"
    ],
    "java.lang.management.bufferpoolmxbean.getcount": [
        "java.lang.management.BufferPoolMXBean.getCount()"
    ],
    "javax.swing.text.html.minimalhtmlwriter.writehtmltags": [
        "javax.swing.text.html.MinimalHTMLWriter.writeHTMLTags(javax.swing.text.AttributeSet)"
    ],
    "javax.swing.listselectionmodel.addlistselectionlistener": [
        "javax.swing.ListSelectionModel.addListSelectionListener(javax.swing.event.ListSelectionListener)"
    ],
    "java.io.outputstream.flush": [
        "java.io.OutputStream.flush()"
    ],
    "java.time.monthday.getdayofmonth": [
        "java.time.MonthDay.getDayOfMonth()"
    ],
    "javax.swing.jtogglebutton.togglebuttonmodel.isselected": [
        "javax.swing.JToggleButton.ToggleButtonModel.isSelected()"
    ],
    "javax.swing.joptionpane.showoptiondialog": [
        "javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)"
    ],
    "javax.xml.crypto.dsig.xmlsignaturefactory.newsignatureproperties": [
        "javax.xml.crypto.dsig.XMLSignatureFactory.newSignatureProperties(java.util.List,java.lang.String)"
    ],
    "java.awt.cardlayout.preferredlayoutsize": [
        "java.awt.CardLayout.preferredLayoutSize(java.awt.Container)"
    ],
    "java.security.cert.certpath.getencodings": [
        "java.security.cert.CertPath.getEncodings()"
    ],
    "javax.xml.bind.util.validationeventcollector.reset": [
        "javax.xml.bind.util.ValidationEventCollector.reset()"
    ],
    "java.lang.process.geterrorstream": [
        "java.lang.Process.getErrorStream()"
    ],
    "javax.swing.grouplayout.layoutcontainer": [
        "javax.swing.GroupLayout.layoutContainer(java.awt.Container)"
    ],
    "java.util.longsummarystatistics.getmax": [
        "java.util.LongSummaryStatistics.getMax()"
    ],
    "javax.swing.jtable.setui": [
        "javax.swing.JTable.setUI(javax.swing.plaf.TableUI)"
    ],
    "java.awt.graphicsdevice.getfullscreenwindow": [
        "java.awt.GraphicsDevice.getFullScreenWindow()"
    ],
    "javax.management.relation.relationtypesupport.addroleinfo": [
        "javax.management.relation.RelationTypeSupport.addRoleInfo(javax.management.relation.RoleInfo)"
    ],
    "org.omg.dynamicany.dynsequenceoperations.set_elements_as_dyn_any": [
        "org.omg.DynamicAny.DynSequenceOperations.set_elements_as_dyn_any(org.omg.DynamicAny.DynAny[])"
    ],
    "javax.accessibility.accessiblecontext.getlocale": [
        "javax.accessibility.AccessibleContext.getLocale()"
    ],
    "javax.swing.jtable.columnatpoint": [
        "javax.swing.JTable.columnAtPoint(java.awt.Point)"
    ],
    "java.util.prefs.preferences.userroot": [
        "java.util.prefs.Preferences.userRoot()"
    ],
    "java.awt.component.setfont": [
        "java.awt.Component.setFont(java.awt.Font)"
    ],
    "java.security.cert.pkixbuilderparameters.setmaxpathlength": [
        "java.security.cert.PKIXBuilderParameters.setMaxPathLength(int)"
    ],
    "java.awt.font.getbaselinefor": [
        "java.awt.Font.getBaselineFor(char)"
    ],
    "java.lang.invoke.methodhandles.spreadinvoker": [
        "java.lang.invoke.MethodHandles.spreadInvoker(java.lang.invoke.MethodType,int)"
    ],
    "javax.management.monitor.countermonitor.getderivedgauge": [
        "javax.management.monitor.CounterMonitor.getDerivedGauge(javax.management.ObjectName)"
    ],
    "javax.xml.xpath.xpathfunction.evaluate": [
        "javax.xml.xpath.XPathFunction.evaluate(java.util.List)"
    ],
    "javax.swing.swingutilities.getuiinputmap": [
        "javax.swing.SwingUtilities.getUIInputMap(javax.swing.JComponent,int)"
    ],
    "javax.lang.model.util.types.directsupertypes": [
        "javax.lang.model.util.Types.directSupertypes(javax.lang.model.type.TypeMirror)"
    ],
    "javax.print.attribute.attributeset.equals": [
        "javax.print.attribute.AttributeSet.equals(java.lang.Object)"
    ],
    "java.security.interfaces.rsapublickey.getpublicexponent": [
        "java.security.interfaces.RSAPublicKey.getPublicExponent()"
    ],
    "javax.tools.documentationtool.documentationtask.call": [
        "javax.tools.DocumentationTool.DocumentationTask.call()"
    ],
    "javax.swing.jdesktoppane.setdragmode": [
        "javax.swing.JDesktopPane.setDragMode(int)"
    ],
    "javax.swing.scrollpanelayout.getcorner": [
        "javax.swing.ScrollPaneLayout.getCorner(java.lang.String)"
    ],
    "java.lang.management.runtimemxbean.getvmversion": [
        "java.lang.management.RuntimeMXBean.getVmVersion()"
    ],
    "java.util.stream.collectors.summarizingint": [
        "java.util.stream.Collectors.summarizingInt(java.util.function.ToIntFunction<? super T>)"
    ],
    "java.net.urlstreamhandler.equals": [
        "java.net.URLStreamHandler.equals(java.net.URL,java.net.URL)"
    ],
    "javax.print.attribute.standard.printerstate.getcategory": [
        "javax.print.attribute.standard.PrinterState.getCategory()"
    ],
    "java.sql.resultset.gettime": [
        "java.sql.ResultSet.getTime(java.lang.String,java.util.Calendar)",
        "java.sql.ResultSet.getTime(java.lang.String)",
        "java.sql.ResultSet.getTime(int,java.util.Calendar)",
        "java.sql.ResultSet.getTime(int)"
    ],
    "javax.sql.rowset.spi.transactionalwriter.commit": [
        "javax.sql.rowset.spi.TransactionalWriter.commit()"
    ],
    "java.time.zone.zoneoffsettransitionrule.timedefinition.values": [
        "java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.values()"
    ],
    "java.awt.checkbox.processevent": [
        "java.awt.Checkbox.processEvent(java.awt.AWTEvent)"
    ],
    "java.util.locale.category.valueof": [
        "java.util.Locale.Category.valueOf(java.lang.String)"
    ],
    "javax.swing.jcombobox.additemlistener": [
        "javax.swing.JComboBox.addItemListener(java.awt.event.ItemListener)"
    ],
    "java.net.inet6address.getaddress": [
        "java.net.Inet6Address.getAddress()"
    ],
    "javax.swing.text.stylecontext.addstyle": [
        "javax.swing.text.StyleContext.addStyle(java.lang.String,javax.swing.text.Style)"
    ],
    "javax.swing.jfilechooser.isdirectoryselectionenabled": [
        "javax.swing.JFileChooser.isDirectorySelectionEnabled()"
    ],
    "java.io.dataoutput.writeshort": [
        "java.io.DataOutput.writeShort(int)"
    ],
    "java.lang.thread.getuncaughtexceptionhandler": [
        "java.lang.Thread.getUncaughtExceptionHandler()"
    ],
    "java.time.localdatetime.withhour": [
        "java.time.LocalDateTime.withHour(int)"
    ],
    "java.lang.double.intvalue": [
        "java.lang.Double.intValue()"
    ],
    "java.time.localtime.compareto": [
        "java.time.LocalTime.compareTo(java.time.LocalTime)"
    ],
    "javax.crypto.spec.dhprivatekeyspec.getx": [
        "javax.crypto.spec.DHPrivateKeySpec.getX()"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.getminselectionrow": [
        "javax.swing.tree.DefaultTreeSelectionModel.getMinSelectionRow()"
    ],
    "javax.security.auth.privatecredentialpermission.getprincipals": [
        "javax.security.auth.PrivateCredentialPermission.getPrincipals()"
    ],
    "javax.swing.jlabel.getdisplayedmnemonic": [
        "javax.swing.JLabel.getDisplayedMnemonic()"
    ],
    "java.net.urlconnection.guesscontenttypefromname": [
        "java.net.URLConnection.guessContentTypeFromName(java.lang.String)"
    ],
    "java.lang.invoke.mutablecallsite.syncall": [
        "java.lang.invoke.MutableCallSite.syncAll(java.lang.invoke.MutableCallSite[])"
    ],
    "java.lang.enum.finalize": [
        "java.lang.Enum.finalize()"
    ],
    "java.util.concurrent.countdownlatch.tostring": [
        "java.util.concurrent.CountDownLatch.toString()"
    ],
    "java.awt.datatransfer.clipboard.isdataflavoravailable": [
        "java.awt.datatransfer.Clipboard.isDataFlavorAvailable(java.awt.datatransfer.DataFlavor)"
    ],
    "java.lang.thread.join": [
        "java.lang.Thread.join(long,int)",
        "java.lang.Thread.join()"
    ],
    "java.net.datagramsocketimpl.join": [
        "java.net.DatagramSocketImpl.join(java.net.InetAddress)"
    ],
    "javax.swing.plaf.multi.multitextui.uninstallui": [
        "javax.swing.plaf.multi.MultiTextUI.uninstallUI(javax.swing.JComponent)"
    ],
    "java.awt.eventqueue.pop": [
        "java.awt.EventQueue.pop()"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.installcomponents": [
        "javax.swing.plaf.basic.BasicComboBoxUI.installComponents()"
    ],
    "javax.script.scriptenginefactory.getscriptengine": [
        "javax.script.ScriptEngineFactory.getScriptEngine()"
    ],
    "javax.swing.tree.abstractlayoutcache.getrowsforpaths": [
        "javax.swing.tree.AbstractLayoutCache.getRowsForPaths(javax.swing.tree.TreePath[])"
    ],
    "javax.xml.validation.validatorhandler.getcontenthandler": [
        "javax.xml.validation.ValidatorHandler.getContentHandler()"
    ],
    "javax.swing.text.html.imageview.getalttext": [
        "javax.swing.text.html.ImageView.getAltText()"
    ],
    "java.sql.sqlinput.readarray": [
        "java.sql.SQLInput.readArray()"
    ],
    "org.ietf.jgss.gsscredential.getusage": [
        "org.ietf.jgss.GSSCredential.getUsage()",
        "org.ietf.jgss.GSSCredential.getUsage(org.ietf.jgss.Oid)"
    ],
    "javax.script.simplebindings.get": [
        "javax.script.SimpleBindings.get(java.lang.Object)"
    ],
    "javax.management.openmbean.openmbeanparameterinfo.getlegalvalues": [
        "javax.management.openmbean.OpenMBeanParameterInfo.getLegalValues()"
    ],
    "javax.xml.parsers.documentbuilderfactory.setattribute": [
        "javax.xml.parsers.DocumentBuilderFactory.setAttribute(java.lang.String,java.lang.Object)"
    ],
    "java.util.concurrent.phaser.tostring": [
        "java.util.concurrent.Phaser.toString()"
    ],
    "javax.xml.bind.helpers.abstractunmarshallerimpl.setproperty": [
        "javax.xml.bind.helpers.AbstractUnmarshallerImpl.setProperty(java.lang.String,java.lang.Object)"
    ],
    "java.awt.color.getcolor": [
        "java.awt.Color.getColor(java.lang.String)",
        "java.awt.Color.getColor(java.lang.String,int)",
        "java.awt.Color.getColor(java.lang.String,java.awt.Color)"
    ],
    "java.io.objectinputstream.readfully": [
        "java.io.ObjectInputStream.readFully(byte[])",
        "java.io.ObjectInputStream.readFully(byte[],int,int)"
    ],
    "javax.sound.sampled.targetdataline.read": [
        "javax.sound.sampled.TargetDataLine.read(byte[],int,int)"
    ],
    "java.util.optionalint.orelsethrow": [
        "java.util.OptionalInt.orElseThrow(java.util.function.Supplier<X>)"
    ],
    "java.nio.intbuffer.asreadonlybuffer": [
        "java.nio.IntBuffer.asReadOnlyBuffer()"
    ],
    "java.awt.font.fontrendercontext.getantialiasinghint": [
        "java.awt.font.FontRenderContext.getAntiAliasingHint()"
    ],
    "javax.swing.plaf.multi.multimenuitemui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiMenuItemUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "java.awt.menubar.getmenucount": [
        "java.awt.MenuBar.getMenuCount()"
    ],
    "javax.management.notificationbroadcastersupport.handlenotification": [
        "javax.management.NotificationBroadcasterSupport.handleNotification(javax.management.NotificationListener,javax.management.Notification,java.lang.Object)"
    ],
    "java.nio.file.path.subpath": [
        "java.nio.file.Path.subpath(int,int)"
    ],
    "javax.naming.namingexception.getexplanation": [
        "javax.naming.NamingException.getExplanation()"
    ],
    "java.io.randomaccessfile.close": [
        "java.io.RandomAccessFile.close()"
    ],
    "javax.xml.stream.xmlinputfactory.getxmlreporter": [
        "javax.xml.stream.XMLInputFactory.getXMLReporter()"
    ],
    "java.lang.invoke.serializedlambda.getinstantiatedmethodtype": [
        "java.lang.invoke.SerializedLambda.getInstantiatedMethodType()"
    ],
    "java.net.httpcookie.getname": [
        "java.net.HttpCookie.getName()"
    ],
    "javax.swing.plaf.multi.multirootpaneui.paint": [
        "javax.swing.plaf.multi.MultiRootPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.xml.ws.spi.http.httpcontext.sethandler": [
        "javax.xml.ws.spi.http.HttpContext.setHandler(javax.xml.ws.spi.http.HttpHandler)"
    ],
    "java.io.objectinputstream.readclassdescriptor": [
        "java.io.ObjectInputStream.readClassDescriptor()"
    ],
    "javax.swing.text.html.htmlwriter.selectcontent": [
        "javax.swing.text.html.HTMLWriter.selectContent(javax.swing.text.AttributeSet)"
    ],
    "javax.swing.jmenuitem.getsubelements": [
        "javax.swing.JMenuItem.getSubElements()"
    ],
    "java.awt.font.fontrendercontext.gettransform": [
        "java.awt.font.FontRenderContext.getTransform()"
    ],
    "java.sql.sqloutput.writetime": [
        "java.sql.SQLOutput.writeTime(java.sql.Time)"
    ],
    "javax.swing.menuselectionmanager.clearselectedpath": [
        "javax.swing.MenuSelectionManager.clearSelectedPath()"
    ],
    "javax.print.attribute.standard.orientationrequested.getcategory": [
        "javax.print.attribute.standard.OrientationRequested.getCategory()"
    ],
    "javax.swing.jinternalframe.setglasspane": [
        "javax.swing.JInternalFrame.setGlassPane(java.awt.Component)"
    ],
    "javax.swing.text.stylecontext.getforeground": [
        "javax.swing.text.StyleContext.getForeground(javax.swing.text.AttributeSet)"
    ],
    "java.security.cert.pkixcertpathchecker.clone": [
        "java.security.cert.PKIXCertPathChecker.clone()"
    ],
    "javax.management.mbeanattributeinfo.clone": [
        "javax.management.MBeanAttributeInfo.clone()"
    ],
    "java.net.datagramsocket.getport": [
        "java.net.DatagramSocket.getPort()"
    ],
    "java.awt.geom.line2d.ptsegdistsq": [
        "java.awt.geom.Line2D.ptSegDistSq(java.awt.geom.Point2D)",
        "java.awt.geom.Line2D.ptSegDistSq(double,double,double,double,double,double)",
        "java.awt.geom.Line2D.ptSegDistSq(double,double)"
    ],
    "javax.swing.table.tablemodel.addtablemodellistener": [
        "javax.swing.table.TableModel.addTableModelListener(javax.swing.event.TableModelListener)"
    ],
    "java.util.concurrent.atomic.atomiclong.set": [
        "java.util.concurrent.atomic.AtomicLong.set(long)"
    ],
    "javax.swing.plaf.filechooserui.getdefaultbutton": [
        "javax.swing.plaf.FileChooserUI.getDefaultButton(javax.swing.JFileChooser)"
    ],
    "java.nio.charbuffer.hashcode": [
        "java.nio.CharBuffer.hashCode()"
    ],
    "javax.security.auth.subject.tostring": [
        "javax.security.auth.Subject.toString()"
    ],
    "java.time.localdatetime.getmonth": [
        "java.time.LocalDateTime.getMonth()"
    ],
    "javax.swing.plaf.multi.multirootpaneui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiRootPaneUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "javax.swing.jcolorchooser.getpreviewpanel": [
        "javax.swing.JColorChooser.getPreviewPanel()"
    ],
    "java.io.datainput.readunsignedbyte": [
        "java.io.DataInput.readUnsignedByte()"
    ],
    "javax.swing.table.defaulttablemodel.getdatavector": [
        "javax.swing.table.DefaultTableModel.getDataVector()"
    ],
    "javax.swing.plaf.synth.synthviewportui.update": [
        "javax.swing.plaf.synth.SynthViewportUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.util.linkedlist.removelast": [
        "java.util.LinkedList.removeLast()"
    ],
    "javax.accessibility.accessibleextendedtext.gettextbounds": [
        "javax.accessibility.AccessibleExtendedText.getTextBounds(int,int)"
    ],
    "java.util.map.merge": [
        "java.util.Map.merge(K,V,java.util.function.BiFunction<? super,? super,? extends V>)",
        "java.util.Map.merge(java.util.Map,java.util.Map,java.util.function.BiFunction<? super,? super,? extends java.util.Map>)"
    ],
    "javax.lang.model.element.executableelement.getreturntype": [
        "javax.lang.model.element.ExecutableElement.getReturnType()"
    ],
    "java.awt.window.setbackground": [
        "java.awt.Window.setBackground(java.awt.Color)"
    ],
    "javax.swing.text.tabstop.getleader": [
        "javax.swing.text.TabStop.getLeader()"
    ],
    "java.awt.image.raster.createcompatiblewritableraster": [
        "java.awt.image.Raster.createCompatibleWritableRaster()",
        "java.awt.image.Raster.createCompatibleWritableRaster(int,int)"
    ],
    "org.omg.dynamicany._dynfixedstub.get_char": [
        "org.omg.DynamicAny._DynFixedStub.get_char()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintscrollbartrackbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintScrollBarTrackBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",
        "javax.swing.plaf.synth.SynthPainter.paintScrollBarTrackBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.nio.doublebuffer.compareto": [
        "java.nio.DoubleBuffer.compareTo(java.nio.DoubleBuffer)"
    ],
    "javax.swing.text.html.htmlwriter.textareacontent": [
        "javax.swing.text.html.HTMLWriter.textAreaContent(javax.swing.text.AttributeSet)"
    ],
    "javax.tools.standardjavafilemanager.getjavafileobjects": [
        "javax.tools.StandardJavaFileManager.getJavaFileObjects(java.io.File...)",
        "javax.tools.StandardJavaFileManager.getJavaFileObjects(java.lang.String...)"
    ],
    "javax.swing.jcomponent.setborder": [
        "javax.swing.JComponent.setBorder(javax.swing.border.Border)"
    ],
    "java.awt.rectangle.getx": [
        "java.awt.Rectangle.getX()"
    ],
    "javax.crypto.spec.pbeparameterspec.getsalt": [
        "javax.crypto.spec.PBEParameterSpec.getSalt()"
    ],
    "java.awt.geom.arc2d.getarctype": [
        "java.awt.geom.Arc2D.getArcType()"
    ],
    "javax.management.mbeanserver.querymbeans": [
        "javax.management.MBeanServer.queryMBeans(javax.management.ObjectName,javax.management.QueryExp)"
    ],
    "java.security.privilegedaction.run": [
        "java.security.PrivilegedAction.run()"
    ],
    "javax.activation.commandmap.getdefaultcommandmap": [
        "javax.activation.CommandMap.getDefaultCommandMap()"
    ],
    "javax.swing.jcombobox.removeactionlistener": [
        "javax.swing.JComboBox.removeActionListener(java.awt.event.ActionListener)"
    ],
    "java.nio.channels.selectablechannel.validops": [
        "java.nio.channels.SelectableChannel.validOps()"
    ],
    "java.time.zoneoffset.get": [
        "java.time.ZoneOffset.get(java.time.temporal.TemporalField)"
    ],
    "javax.swing.rowfilter.entry.getvalue": [
        "javax.swing.RowFilter.Entry.getValue(int)"
    ],
    "java.security.cert.policyqualifierinfo.tostring": [
        "java.security.cert.PolicyQualifierInfo.toString()"
    ],
    "javax.sound.sampled.audiosystem.getmixerinfo": [
        "javax.sound.sampled.AudioSystem.getMixerInfo()"
    ],
    "java.beans.eventhandler.getlistenermethodname": [
        "java.beans.EventHandler.getListenerMethodName()"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.notationdecl": [
        "org.xml.sax.helpers.XMLFilterImpl.notationDecl(java.lang.String,java.lang.String,java.lang.String)"
    ],
    "javax.swing.text.glyphview.createfragment": [
        "javax.swing.text.GlyphView.createFragment(int,int)"
    ],
    "java.awt.splashscreen.update": [
        "java.awt.SplashScreen.update()"
    ],
    "javax.swing.jtable.setrowheight": [
        "javax.swing.JTable.setRowHeight(int)",
        "javax.swing.JTable.setRowHeight(int,int)"
    ],
    "javax.xml.bind.datatypeconverter.parseboolean": [
        "javax.xml.bind.DatatypeConverter.parseBoolean(java.lang.String)"
    ],
    "javax.management.relation.relationnotification.getrelationtypename": [
        "javax.management.relation.RelationNotification.getRelationTypeName()"
    ],
    "javax.swing.joptionpane.createinternalframe": [
        "javax.swing.JOptionPane.createInternalFrame(java.awt.Component,java.lang.String)"
    ],
    "java.awt.window.getlisteners": [
        "java.awt.Window.getListeners(java.lang.Class<T>)"
    ],
    "org.omg.dynamicany._dynanyfactorystub.create_dyn_any": [
        "org.omg.DynamicAny._DynAnyFactoryStub.create_dyn_any(org.omg.CORBA.Any)"
    ],
    "java.security.protectiondomain.getcodesource": [
        "java.security.ProtectionDomain.getCodeSource()"
    ],
    "javax.swing.jinternalframe.setjmenubar": [
        "javax.swing.JInternalFrame.setJMenuBar(javax.swing.JMenuBar)"
    ],
    "java.rmi.remoteexception.getcause": [
        "java.rmi.RemoteException.getCause()"
    ],
    "java.util.jar.manifest.clone": [
        "java.util.jar.Manifest.clone()"
    ],
    "javax.swing.plaf.synth.colortype.tostring": [
        "javax.swing.plaf.synth.ColorType.toString()"
    ],
    "java.rmi.activation.activatable.unregister": [
        "java.rmi.activation.Activatable.unregister(java.rmi.activation.ActivationID)"
    ],
    "java.util.concurrent.atomic.atomicmarkablereference.ismarked": [
        "java.util.concurrent.atomic.AtomicMarkableReference.isMarked()"
    ],
    "javax.security.cert.certificate.getencoded": [
        "javax.security.cert.Certificate.getEncoded()"
    ],
    "java.util.concurrent.copyonwritearraylist.get": [
        "java.util.concurrent.CopyOnWriteArrayList.get(int)"
    ],
    "javax.swing.filechooser.filesystemview.isfloppydrive": [
        "javax.swing.filechooser.FileSystemView.isFloppyDrive(java.io.File)"
    ],
    "javax.swing.plaf.multi.multifilechooserui.getfileview": [
        "javax.swing.plaf.multi.MultiFileChooserUI.getFileView(javax.swing.JFileChooser)"
    ],
    "org.xml.sax.helpers.defaulthandler.endelement": [
        "org.xml.sax.helpers.DefaultHandler.endElement(java.lang.String,java.lang.String,java.lang.String)"
    ],
    "java.sql.resultset.gettype": [
        "java.sql.ResultSet.getType()"
    ],
    "javax.imageio.imagewriter.getdefaultimagemetadata": [
        "javax.imageio.ImageWriter.getDefaultImageMetadata(javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam)"
    ],
    "java.awt.scrollbar.getaccessiblecontext": [
        "java.awt.Scrollbar.getAccessibleContext()"
    ],
    "javax.swing.text.view.viewtomodel": [
        "javax.swing.text.View.viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias[])"
    ],
    "javax.net.ssl.sslcontext.getserversessioncontext": [
        "javax.net.ssl.SSLContext.getServerSessionContext()"
    ],
    "javax.swing.plaf.synth.synthpanelui.paintborder": [
        "javax.swing.plaf.synth.SynthPanelUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.awt.jobattributes.setmaxpage": [
        "java.awt.JobAttributes.setMaxPage(int)"
    ],
    "javax.swing.text.segment.setindex": [
        "javax.swing.text.Segment.setIndex(int)"
    ],
    "java.lang.class.getdeclaredfields": [
        "java.lang.Class.getDeclaredFields()"
    ],
    "java.awt.container.getpreferredsize": [
        "java.awt.Container.getPreferredSize()"
    ],
    "java.awt.cardlayout.tostring": [
        "java.awt.CardLayout.toString()"
    ],
    "javax.swing.plaf.nimbus.nimbuslookandfeel.shouldupdatestyleonancestorchanged": [
        "javax.swing.plaf.nimbus.NimbusLookAndFeel.shouldUpdateStyleOnAncestorChanged()"
    ],
    "org.omg.corba.orb.perform_work": [
        "org.omg.CORBA.ORB.perform_work()"
    ],
    "javax.sound.midi.mididevicereceiver.getmididevice": [
        "javax.sound.midi.MidiDeviceReceiver.getMidiDevice()"
    ],
    "java.time.chrono.isochronology.zoneddatetime": [
        "java.time.chrono.IsoChronology.zonedDateTime(java.time.Instant,java.time.ZoneId)",
        "java.time.chrono.IsoChronology.zonedDateTime(java.time.temporal.TemporalAccessor)"
    ],
    "java.awt.color.icc_colorspace.getprofile": [
        "java.awt.color.ICC_ColorSpace.getProfile()"
    ],
    "javax.swing.jslider.getminortickspacing": [
        "javax.swing.JSlider.getMinorTickSpacing()"
    ],
    "javax.swing.joptionpane.showinternaloptiondialog": [
        "javax.swing.JOptionPane.showInternalOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)"
    ],
    "javax.swing.plaf.basic.basictreeui.cancelediting": [
        "javax.swing.plaf.basic.BasicTreeUI.cancelEditing(javax.swing.JTree)"
    ],
    "java.beans.propertyvetoexception.getpropertychangeevent": [
        "java.beans.PropertyVetoException.getPropertyChangeEvent()"
    ],
    "javax.print.attribute.standard.printeruri.getname": [
        "javax.print.attribute.standard.PrinterURI.getName()"
    ],
    "java.awt.image.renderable.parameterblock.removeparameters": [
        "java.awt.image.renderable.ParameterBlock.removeParameters()"
    ],
    "java.awt.color.getalpha": [
        "java.awt.Color.getAlpha()"
    ],
    "java.security.signature.tostring": [
        "java.security.Signature.toString()"
    ],
    "javax.sound.midi.soundbankresource.getname": [
        "javax.sound.midi.SoundbankResource.getName()"
    ],
    "javax.management.mbeaninfo.getclassname": [
        "javax.management.MBeanInfo.getClassName()"
    ],
    "javax.swing.text.html.htmleditorkit.getaccessiblecontext": [
        "javax.swing.text.html.HTMLEditorKit.getAccessibleContext()"
    ],
    "javax.print.attributeexception.getunsupportedattributes": [
        "javax.print.AttributeException.getUnsupportedAttributes()"
    ],
    "java.awt.geom.rectangularshape.getminy": [
        "java.awt.geom.RectangularShape.getMinY()"
    ],
    "java.util.regex.matcher.regionstart": [
        "java.util.regex.Matcher.regionStart()"
    ],
    "java.lang.stacktraceelement.getfilename": [
        "java.lang.StackTraceElement.getFileName()"
    ],
    "javax.swing.tree.defaulttreemodel.setasksallowschildren": [
        "javax.swing.tree.DefaultTreeModel.setAsksAllowsChildren(boolean)"
    ],
    "javax.management.timer.timer.getnotificationmessage": [
        "javax.management.timer.Timer.getNotificationMessage(java.lang.Integer)"
    ],
    "javax.swing.filechooser.filenameextensionfilter.tostring": [
        "javax.swing.filechooser.FileNameExtensionFilter.toString()"
    ],
    "java.nio.file.attribute.dosfileattributeview.setreadonly": [
        "java.nio.file.attribute.DosFileAttributeView.setReadOnly(boolean)"
    ],
    "java.io.bufferedreader.marksupported": [
        "java.io.BufferedReader.markSupported()"
    ],
    "javax.net.ssl.sslcontextspi.enginecreatesslengine": [
        "javax.net.ssl.SSLContextSpi.engineCreateSSLEngine(java.lang.String,int)",
        "javax.net.ssl.SSLContextSpi.engineCreateSSLEngine()"
    ],
    "java.util.function.longpredicate.and": [
        "java.util.function.LongPredicate.and(java.util.function.LongPredicate)"
    ],
    "java.util.collection.iterator": [
        "java.util.Collection.iterator()"
    ],
    "java.awt.lineargradientpaint.getstartpoint": [
        "java.awt.LinearGradientPaint.getStartPoint()"
    ],
    "java.security.acl.acl.setname": [
        "java.security.acl.Acl.setName(java.security.Principal,java.lang.String)"
    ],
    "javax.crypto.spec.dhprivatekeyspec.getg": [
        "javax.crypto.spec.DHPrivateKeySpec.getG()"
    ],
    "java.util.enummap.clone": [
        "java.util.EnumMap.clone()"
    ],
    "javax.lang.model.util.elementkindvisitor6.visitexecutableasstaticinit": [
        "javax.lang.model.util.ElementKindVisitor6.visitExecutableAsStaticInit(javax.lang.model.element.ExecutableElement,javax.lang.model.util.ElementKindVisitor6)"
    ],
    "java.net.httpurlconnection.getrequestmethod": [
        "java.net.HttpURLConnection.getRequestMethod()"
    ],
    "javax.swing.plaf.multi.multiprogressbarui.getminimumsize": [
        "javax.swing.plaf.multi.MultiProgressBarUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "javax.sound.midi.sequencer.setloopendpoint": [
        "javax.sound.midi.Sequencer.setLoopEndPoint(long)"
    ],
    "org.omg.corba.object._create_request": [
        "org.omg.CORBA.Object._create_request(org.omg.CORBA.Context,java.lang.String,org.omg.CORBA.NVList,org.omg.CORBA.NamedValue)",
        "org.omg.CORBA.Object._create_request(org.omg.CORBA.Context,java.lang.String,org.omg.CORBA.NVList,org.omg.CORBA.NamedValue,org.omg.CORBA.ExceptionList,org.omg.CORBA.ContextList)"
    ],
    "java.util.arraydeque.add": [
        "java.util.ArrayDeque.add(java.util.ArrayDeque)",
        "java.util.ArrayDeque.add(E)"
    ],
    "javax.sound.midi.sequencer.setslavesyncmode": [
        "javax.sound.midi.Sequencer.setSlaveSyncMode(javax.sound.midi.Sequencer.SyncMode)"
    ],
    "javax.swing.text.styleconstants.setspaceabove": [
        "javax.swing.text.StyleConstants.setSpaceAbove(javax.swing.text.MutableAttributeSet,float)"
    ],
    "org.omg.corba.portable.objectimpl._get_interface_def": [
        "org.omg.CORBA.portable.ObjectImpl._get_interface_def()"
    ],
    "javax.swing.event.eventlistenerlist.tostring": [
        "javax.swing.event.EventListenerList.toString()"
    ],
    "java.time.format.datetimeformatterbuilder.appendvalue": [
        "java.time.format.DateTimeFormatterBuilder.appendValue(java.time.temporal.TemporalField)",
        "java.time.format.DateTimeFormatterBuilder.appendValue(java.time.temporal.TemporalField,int)",
        "java.time.format.DateTimeFormatterBuilder.appendValue(java.time.temporal.TemporalField,int,int,java.time.format.SignStyle)"
    ],
    "java.security.cert.collectioncertstoreparameters.tostring": [
        "java.security.cert.CollectionCertStoreParameters.toString()"
    ],
    "javax.management.relation.relationservice.getroleinfo": [
        "javax.management.relation.RelationService.getRoleInfo(java.lang.String,java.lang.String)"
    ],
    "javax.naming.ldap.rdn.hashcode": [
        "javax.naming.ldap.Rdn.hashCode()"
    ],
    "javax.accessibility.accessibletable.getaccessiblerowextentat": [
        "javax.accessibility.AccessibleTable.getAccessibleRowExtentAt(int,int)"
    ],
    "javax.swing.plaf.basic.basictableheaderui.installkeyboardactions": [
        "javax.swing.plaf.basic.BasicTableHeaderUI.installKeyboardActions()"
    ],
    "javax.xml.soap.soapfactory.createdetail": [
        "javax.xml.soap.SOAPFactory.createDetail()"
    ],
    "java.awt.frame.remove": [
        "java.awt.Frame.remove(java.awt.MenuComponent)"
    ],
    "javax.swing.jtextpane.getcharacterattributes": [
        "javax.swing.JTextPane.getCharacterAttributes()"
    ],
    "javax.swing.plaf.metal.metaltheme.getinactivesystemtextcolor": [
        "javax.swing.plaf.metal.MetalTheme.getInactiveSystemTextColor()"
    ],
    "java.util.stream.intstream.reduce": [
        "java.util.stream.IntStream.reduce(java.util.function.IntBinaryOperator)",
        "java.util.stream.IntStream.reduce(int,java.util.function.IntBinaryOperator)"
    ],
    "java.lang.invoke.callsite.settarget": [
        "java.lang.invoke.CallSite.setTarget(java.lang.invoke.MethodHandle)"
    ],
    "javax.swing.comboboxeditor.selectall": [
        "javax.swing.ComboBoxEditor.selectAll()"
    ],
    "java.util.concurrent.linkedblockingdeque.putfirst": [
        "java.util.concurrent.LinkedBlockingDeque.putFirst(E)"
    ],
    "javax.swing.desktopmanager.resizeframe": [
        "javax.swing.DesktopManager.resizeFrame(javax.swing.JComponent,int,int,int,int)"
    ],
    "org.w3c.dom.element.setattributenodens": [
        "org.w3c.dom.Element.setAttributeNodeNS(org.w3c.dom.Attr)"
    ],
    "javax.jws.webparam.mode.values": [
        "javax.jws.WebParam.Mode.values()"
    ],
    "javax.swing.jdialog.setcontentpane": [
        "javax.swing.JDialog.setContentPane(java.awt.Container)"
    ],
    "javax.swing.jinternalframe.restoresubcomponentfocus": [
        "javax.swing.JInternalFrame.restoreSubcomponentFocus()"
    ],
    "javax.swing.text.stylecontext.removechangelistener": [
        "javax.swing.text.StyleContext.removeChangeListener(javax.swing.event.ChangeListener)"
    ],
    "java.lang.securitymanager.checkexit": [
        "java.lang.SecurityManager.checkExit(int)"
    ],
    "java.time.clock.system": [
        "java.time.Clock.system(java.time.ZoneId)"
    ],
    "javax.xml.validation.schema.newvalidator": [
        "javax.xml.validation.Schema.newValidator()"
    ],
    "org.omg.dynamicany._dynenumstub.insert_ulonglong": [
        "org.omg.DynamicAny._DynEnumStub.insert_ulonglong(long)"
    ],
    "java.awt.dnd.dragsourceevent.getlocation": [
        "java.awt.dnd.DragSourceEvent.getLocation()"
    ],
    "java.beans.vetoablechangelistenerproxy.getpropertyname": [
        "java.beans.VetoableChangeListenerProxy.getPropertyName()"
    ],
    "javax.xml.ws.handler.soap.soapmessagecontext.setmessage": [
        "javax.xml.ws.handler.soap.SOAPMessageContext.setMessage(javax.xml.soap.SOAPMessage)"
    ],
    "javax.lang.model.util.typekindvisitor6.visitprimitiveasint": [
        "javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsInt(javax.lang.model.type.PrimitiveType,javax.lang.model.util.TypeKindVisitor6)"
    ],
    "javax.xml.crypto.urireference.gettype": [
        "javax.xml.crypto.URIReference.getType()"
    ],
    "java.util.uuid.variant": [
        "java.util.UUID.variant()"
    ],
    "javax.swing.jlist.getdroplocation": [
        "javax.swing.JList.getDropLocation()"
    ],
    "javax.swing.jtabbedpane.gettooltiptext": [
        "javax.swing.JTabbedPane.getToolTipText(java.awt.event.MouseEvent)"
    ],
    "java.lang.reflect.modifier.methodmodifiers": [
        "java.lang.reflect.Modifier.methodModifiers()"
    ],
    "java.security.cert.x509certselector.getnameconstraints": [
        "java.security.cert.X509CertSelector.getNameConstraints()"
    ],
    "java.awt.font.fontrendercontext.gettransformtype": [
        "java.awt.font.FontRenderContext.getTransformType()"
    ],
    "javax.activation.mimetype.writeexternal": [
        "javax.activation.MimeType.writeExternal(java.io.ObjectOutput)"
    ],
    "java.sql.resultset.rowupdated": [
        "java.sql.ResultSet.rowUpdated()"
    ],
    "javax.crypto.macspi.engineupdate": [
        "javax.crypto.MacSpi.engineUpdate(byte)",
        "javax.crypto.MacSpi.engineUpdate(byte[],int,int)"
    ],
    "javax.print.attribute.standard.jobmediasheetssupported.getcategory": [
        "javax.print.attribute.standard.JobMediaSheetsSupported.getCategory()"
    ],
    "javax.management.attribute.getvalue": [
        "javax.management.Attribute.getValue()"
    ],
    "java.io.writer.append": [
        "java.io.Writer.append(char)",
        "java.io.Writer.append(java.lang.CharSequence,int,int)",
        "java.io.Writer.append(java.lang.CharSequence)"
    ],
    "java.text.numberformat.getmaximumintegerdigits": [
        "java.text.NumberFormat.getMaximumIntegerDigits()"
    ],
    "org.omg.corba.dataoutputstream.write_boolean": [
        "org.omg.CORBA.DataOutputStream.write_boolean(boolean)"
    ],
    "java.util.concurrent.atomic.longaccumulator.intvalue": [
        "java.util.concurrent.atomic.LongAccumulator.intValue()"
    ],
    "javax.script.abstractscriptengine.getbindings": [
        "javax.script.AbstractScriptEngine.getBindings(int)"
    ],
    "javax.imageio.spi.imagewriterspi.getimagereaderspinames": [
        "javax.imageio.spi.ImageWriterSpi.getImageReaderSpiNames()"
    ],
    "javax.swing.plaf.multi.multiscrollbarui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiScrollBarUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "java.nio.charset.charsetencoder.onunmappablecharacter": [
        "java.nio.charset.CharsetEncoder.onUnmappableCharacter(java.nio.charset.CodingErrorAction)"
    ],
    "java.lang.classloader.setdefaultassertionstatus": [
        "java.lang.ClassLoader.setDefaultAssertionStatus(boolean)"
    ],
    "javax.swing.jtabbedpane.setcomponentat": [
        "javax.swing.JTabbedPane.setComponentAt(int,java.awt.Component)"
    ],
    "javax.swing.jtree.getaccessiblecontext": [
        "javax.swing.JTree.getAccessibleContext()"
    ],
    "javax.swing.text.wrappedplainview.drawunselectedtext": [
        "javax.swing.text.WrappedPlainView.drawUnselectedText(java.awt.Graphics,int,int,int,int)"
    ],
    "java.security.cert.certificate.writereplace": [
        "java.security.cert.Certificate.writeReplace()"
    ],
    "java.awt.geom.area.getpathiterator": [
        "java.awt.geom.Area.getPathIterator(java.awt.geom.AffineTransform)",
        "java.awt.geom.Area.getPathIterator(java.awt.geom.AffineTransform,double)"
    ],
    "java.nio.file.attribute.aclentry.builder.settype": [
        "java.nio.file.attribute.AclEntry.Builder.setType(java.nio.file.attribute.AclEntryType)"
    ],
    "javax.swing.dropmode.values": [
        "javax.swing.DropMode.values()"
    ],
    "java.util.spliterator.oflong.foreachremaining": [
        "java.util.Spliterator.OfLong.forEachRemaining(java.util.function.Consumer<? super java.lang.Long>)"
    ],
    "java.util.treemap.headmap": [
        "java.util.TreeMap.headMap(K)"
    ],
    "java.security.cert.pkixparameters.setsigprovider": [
        "java.security.cert.PKIXParameters.setSigProvider(java.lang.String)"
    ],
    "java.awt.component.isfocusable": [
        "java.awt.Component.isFocusable()"
    ],
    "java.util.simpletimezone.indaylighttime": [
        "java.util.SimpleTimeZone.inDaylightTime(java.util.Date)"
    ],
    "javax.swing.jcolorchooser.getchooserpanels": [
        "javax.swing.JColorChooser.getChooserPanels()"
    ],
    "javax.swing.text.defaultformatter.stringtovalue": [
        "javax.swing.text.DefaultFormatter.stringToValue(java.lang.String)"
    ],
    "java.io.dataoutputstream.writedouble": [
        "java.io.DataOutputStream.writeDouble(double)"
    ],
    "javax.swing.plaf.basic.combopopup.getlist": [
        "javax.swing.plaf.basic.ComboPopup.getList()"
    ],
    "java.util.zip.inflater.finalize": [
        "java.util.zip.Inflater.finalize()"
    ],
    "javax.management.relation.rolelist.addall": [
        "javax.management.relation.RoleList.addAll(int,javax.management.relation.RoleList)",
        "javax.management.relation.RoleList.addAll(javax.management.relation.RoleList)"
    ],
    "java.beans.beancontext.beancontextchild.removevetoablechangelistener": [
        "java.beans.beancontext.BeanContextChild.removeVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)"
    ],
    "javax.swing.plaf.basic.basiccombopopup.installcomboboxlisteners": [
        "javax.swing.plaf.basic.BasicComboPopup.installComboBoxListeners()"
    ],
    "javax.swing.plaf.multi.multilistui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiListUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "java.awt.font.textlayout.getvisualotherhit": [
        "java.awt.font.TextLayout.getVisualOtherHit(java.awt.font.TextHitInfo)"
    ],
    "javax.swing.plaf.basic.basiccombopopup.createlistmouselistener": [
        "javax.swing.plaf.basic.BasicComboPopup.createListMouseListener()"
    ],
    "java.awt.geom.cubiccurve2d.float.getp1": [
        "java.awt.geom.CubicCurve2D.Float.getP1()"
    ],
    "javax.swing.jscrollbar.getvisibleamount": [
        "javax.swing.JScrollBar.getVisibleAmount()"
    ],
    "java.awt.containerorderfocustraversalpolicy.setimplicitdowncycletraversal": [
        "java.awt.ContainerOrderFocusTraversalPolicy.setImplicitDownCycleTraversal(boolean)"
    ],
    "javax.swing.text.compositeview.getbottominset": [
        "javax.swing.text.CompositeView.getBottomInset()"
    ],
    "java.text.stringcharacteriterator.first": [
        "java.text.StringCharacterIterator.first()"
    ],
    "java.nio.file.filevisitresult.values": [
        "java.nio.file.FileVisitResult.values()"
    ],
    "java.awt.event.hierarchyevent.getcomponent": [
        "java.awt.event.HierarchyEvent.getComponent()"
    ],
    "javax.swing.plaf.synth.synthtextfieldui.paintbackground": [
        "javax.swing.plaf.synth.SynthTextFieldUI.paintBackground(java.awt.Graphics)"
    ],
    "java.security.cert.ldapcertstoreparameters.getport": [
        "java.security.cert.LDAPCertStoreParameters.getPort()"
    ],
    "javax.swing.desktopmanager.enddraggingframe": [
        "javax.swing.DesktopManager.endDraggingFrame(javax.swing.JComponent)"
    ],
    "java.io.streamtokenizer.quotechar": [
        "java.io.StreamTokenizer.quoteChar(int)"
    ],
    "java.awt.font.imagegraphicattribute.getascent": [
        "java.awt.font.ImageGraphicAttribute.getAscent()"
    ],
    "javax.imageio.plugins.jpeg.jpegimagewriteparam.getdchuffmantables": [
        "javax.imageio.plugins.jpeg.JPEGImageWriteParam.getDCHuffmanTables()"
    ],
    "java.sql.resultset.updateboolean": [
        "java.sql.ResultSet.updateBoolean(java.lang.String,boolean)",
        "java.sql.ResultSet.updateBoolean(int,boolean)"
    ],
    "javax.swing.jwindow.addimpl": [
        "javax.swing.JWindow.addImpl(java.awt.Component,java.lang.Object,int)"
    ],
    "java.util.stream.doublestream.distinct": [
        "java.util.stream.DoubleStream.distinct()"
    ],
    "org.w3c.dom.ls.lsparser.parsewithcontext": [
        "org.w3c.dom.ls.LSParser.parseWithContext(org.w3c.dom.ls.LSInput,org.w3c.dom.Node,short)"
    ],
    "java.time.year.compareto": [
        "java.time.Year.compareTo(java.time.Year)"
    ],
    "java.sql.resultset.updatenstring": [
        "java.sql.ResultSet.updateNString(java.lang.String,java.lang.String)",
        "java.sql.ResultSet.updateNString(int,java.lang.String)"
    ],
    "java.lang.character.unicodescript.values": [
        "java.lang.Character.UnicodeScript.values()"
    ],
    "java.util.regex.matcher.tomatchresult": [
        "java.util.regex.Matcher.toMatchResult()"
    ],
    "javax.sound.midi.soundbank.getinstrument": [
        "javax.sound.midi.Soundbank.getInstrument(javax.sound.midi.Patch)"
    ],
    "java.lang.number.intvalue": [
        "java.lang.Number.intValue()"
    ],
    "javax.xml.crypto.dsig.keyinfo.keyinfofactory.newx509issuerserial": [
        "javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newX509IssuerSerial(java.lang.String,java.math.BigInteger)"
    ],
    "javax.lang.model.util.elementkindvisitor6.visitvariableasexceptionparameter": [
        "javax.lang.model.util.ElementKindVisitor6.visitVariableAsExceptionParameter(javax.lang.model.element.VariableElement,javax.lang.model.util.ElementKindVisitor6)"
    ],
    "java.applet.appletcontext.showdocument": [
        "java.applet.AppletContext.showDocument(java.net.URL)",
        "java.applet.AppletContext.showDocument(java.net.URL,java.lang.String)"
    ],
    "java.awt.image.raster.getwidth": [
        "java.awt.image.Raster.getWidth()"
    ],
    "javax.security.auth.kerberos.keytab.hashcode": [
        "javax.security.auth.kerberos.KeyTab.hashCode()"
    ],
    "java.security.cert.trustanchor.tostring": [
        "java.security.cert.TrustAnchor.toString()"
    ],
    "java.sql.connection.isclosed": [
        "java.sql.Connection.isClosed()"
    ],
    "javax.imageio.spi.iioserviceprovider.getversion": [
        "javax.imageio.spi.IIOServiceProvider.getVersion()"
    ],
    "javax.swing.plaf.synth.synthpainter.painttooltipbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintToolTipBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.awt.textfield.processactionevent": [
        "java.awt.TextField.processActionEvent(java.awt.event.ActionEvent)"
    ],
    "java.nio.bytebuffer.asreadonlybuffer": [
        "java.nio.ByteBuffer.asReadOnlyBuffer()"
    ],
    "javax.xml.bind.datatypeconverter.parseunsignedshort": [
        "javax.xml.bind.DatatypeConverter.parseUnsignedShort(java.lang.String)"
    ],
    "java.util.concurrent.atomic.atomicreferencearray.getandupdate": [
        "java.util.concurrent.atomic.AtomicReferenceArray.getAndUpdate(int,java.util.function.UnaryOperator<E>)",
        "java.util.concurrent.atomic.AtomicReferenceArray.getAndUpdate(int,java.util.function.UnaryOperator<java.util.concurrent.atomic.AtomicReferenceArray>)"
    ],
    "javax.accessibility.accessiblerelationset.remove": [
        "javax.accessibility.AccessibleRelationSet.remove(javax.accessibility.AccessibleRelation)"
    ],
    "javax.swing.plaf.synth.synthpanelui.installlisteners": [
        "javax.swing.plaf.synth.SynthPanelUI.installListeners(javax.swing.JPanel)"
    ],
    "java.nio.channels.filelock.close": [
        "java.nio.channels.FileLock.close()"
    ],
    "java.lang.package.getpackage": [
        "java.lang.Package.getPackage(java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthscrollpaneui.createui": [
        "javax.swing.plaf.synth.SynthScrollPaneUI.createUI(javax.swing.JComponent)"
    ],
    "java.util.concurrent.forkjoinpool.getactivethreadcount": [
        "java.util.concurrent.ForkJoinPool.getActiveThreadCount()"
    ],
    "javax.xml.transform.transformerfactory.geterrorlistener": [
        "javax.xml.transform.TransformerFactory.getErrorListener()"
    ],
    "javax.accessibility.accessibletable.setaccessiblerowdescription": [
        "javax.accessibility.AccessibleTable.setAccessibleRowDescription(int,javax.accessibility.Accessible)"
    ],
    "javax.swing.plaf.multi.multibuttonui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiButtonUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "javax.print.attribute.standard.jobmediasheetssupported.equals": [
        "javax.print.attribute.standard.JobMediaSheetsSupported.equals(java.lang.Object)"
    ],
    "java.text.messageformat.getlocale": [
        "java.text.MessageFormat.getLocale()"
    ],
    "java.time.zone.zoneoffsettransition.isgap": [
        "java.time.zone.ZoneOffsetTransition.isGap()"
    ],
    "javax.swing.abstractcelleditor.fireeditingstopped": [
        "javax.swing.AbstractCellEditor.fireEditingStopped()"
    ],
    "java.lang.reflect.array.setfloat": [
        "java.lang.reflect.Array.setFloat(java.lang.Object,int,float)"
    ],
    "java.sql.callablestatement.getbytes": [
        "java.sql.CallableStatement.getBytes(int)",
        "java.sql.CallableStatement.getBytes(java.lang.String)"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.iscontinuouslayout": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.isContinuousLayout()"
    ],
    "java.net.socket.sendurgentdata": [
        "java.net.Socket.sendUrgentData(int)"
    ],
    "org.omg.cosnaming.namingcontextextoperations.to_string": [
        "org.omg.CosNaming.NamingContextExtOperations.to_string(org.omg.CosNaming.NameComponent[])"
    ],
    "javax.imageio.iioparam.setsourcebands": [
        "javax.imageio.IIOParam.setSourceBands(int[])"
    ],
    "javax.swing.tree.treeselectionmodel.resetrowselection": [
        "javax.swing.tree.TreeSelectionModel.resetRowSelection()"
    ],
    "java.rmi.activation.activationdesc.equals": [
        "java.rmi.activation.ActivationDesc.equals(java.lang.Object)"
    ],
    "javax.swing.text.styleddocument.getcharacterelement": [
        "javax.swing.text.StyledDocument.getCharacterElement(int)"
    ],
    "java.time.temporal.weekfields.weekofmonth": [
        "java.time.temporal.WeekFields.weekOfMonth()"
    ],
    "org.omg.dynamicany._dynarraystub.insert_double": [
        "org.omg.DynamicAny._DynArrayStub.insert_double(double)"
    ],
    "java.time.duration.minushours": [
        "java.time.Duration.minusHours(long)"
    ],
    "java.time.chrono.isochronology.datenow": [
        "java.time.chrono.IsoChronology.dateNow(java.time.ZoneId)",
        "java.time.chrono.IsoChronology.dateNow(java.time.Clock)",
        "java.time.chrono.IsoChronology.dateNow()"
    ],
    "javax.swing.jframe.frameinit": [
        "javax.swing.JFrame.frameInit()"
    ],
    "java.lang.invoke.volatilecallsite.gettarget": [
        "java.lang.invoke.VolatileCallSite.getTarget()"
    ],
    "java.security.cert.x509crlselector.match": [
        "java.security.cert.X509CRLSelector.match(java.security.cert.CRL)"
    ],
    "java.nio.channels.filechannel.write": [
        "java.nio.channels.FileChannel.write(java.nio.ByteBuffer,int,int)",
        "java.nio.channels.FileChannel.write(java.nio.ByteBuffer,long)",
        "java.nio.channels.FileChannel.write(java.nio.ByteBuffer[])",
        "java.nio.channels.FileChannel.write(java.nio.ByteBuffer[],int,int)",
        "java.nio.channels.FileChannel.write(java.nio.ByteBuffer)"
    ],
    "org.xml.sax.helpers.xmlreaderadapter.endelement": [
        "org.xml.sax.helpers.XMLReaderAdapter.endElement(java.lang.String,java.lang.String,java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthtreeui.createdefaultcelleditor": [
        "javax.swing.plaf.synth.SynthTreeUI.createDefaultCellEditor()"
    ],
    "java.util.concurrent.locks.abstractqueuedsynchronizer.getwaitqueuelength": [
        "java.util.concurrent.locks.AbstractQueuedSynchronizer.getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)"
    ],
    "javax.xml.datatype.duration.multiply": [
        "javax.xml.datatype.Duration.multiply(java.math.BigDecimal)",
        "javax.xml.datatype.Duration.multiply(int)"
    ],
    "java.time.clock.systemdefaultzone": [
        "java.time.Clock.systemDefaultZone()"
    ],
    "javax.swing.jmenubar.getmenu": [
        "javax.swing.JMenuBar.getMenu(int)"
    ],
    "java.sql.rowidlifetime.values": [
        "java.sql.RowIdLifetime.values()"
    ],
    "java.lang.management.managementfactory.getmemorymxbean": [
        "java.lang.management.ManagementFactory.getMemoryMXBean()"
    ],
    "javax.swing.plaf.synth.synthtextfieldui.update": [
        "javax.swing.plaf.synth.SynthTextFieldUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.awt.im.inputcontext.reconvert": [
        "java.awt.im.InputContext.reconvert()"
    ],
    "javax.activation.mailcapcommandmap.getnativecommands": [
        "javax.activation.MailcapCommandMap.getNativeCommands(java.lang.String)"
    ],
    "javax.xml.soap.attachmentpart.getnonmatchingmimeheaders": [
        "javax.xml.soap.AttachmentPart.getNonMatchingMimeHeaders(java.lang.String[])"
    ],
    "javax.xml.bind.helpers.validationeventlocatorimpl.setnode": [
        "javax.xml.bind.helpers.ValidationEventLocatorImpl.setNode(org.w3c.dom.Node)"
    ],
    "java.awt.awteventmulticaster.windowclosing": [
        "java.awt.AWTEventMulticaster.windowClosing(java.awt.event.WindowEvent)"
    ],
    "javax.swing.text.glyphview.paint": [
        "javax.swing.text.GlyphView.paint(java.awt.Graphics,java.awt.Shape)"
    ],
    "java.util.concurrent.completionstage.accepteitherasync": [
        "java.util.concurrent.CompletionStage.acceptEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Consumer<? super T>,java.util.concurrent.Executor)",
        "java.util.concurrent.CompletionStage.acceptEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Consumer<? super T>)",
        "java.util.concurrent.CompletionStage.acceptEitherAsync(java.util.concurrent.CompletionStage<? extends java.util.concurrent.CompletionStage>,java.util.function.Consumer<? super java.util.concurrent.CompletionStage>)",
        "java.util.concurrent.CompletionStage.acceptEitherAsync(java.util.concurrent.CompletionStage<? extends java.util.concurrent.CompletionStage>,java.util.function.Consumer<? super java.util.concurrent.CompletionStage>,java.util.concurrent.Executor)"
    ],
    "java.security.timestamp.tostring": [
        "java.security.Timestamp.toString()"
    ],
    "java.nio.charset.charset.newdecoder": [
        "java.nio.charset.Charset.newDecoder()"
    ],
    "java.nio.file.spi.filesystemprovider.createdirectory": [
        "java.nio.file.spi.FileSystemProvider.createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>)",
        "java.nio.file.spi.FileSystemProvider.createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>...)"
    ],
    "java.awt.event.keyevent.getextendedkeycode": [
        "java.awt.event.KeyEvent.getExtendedKeyCode()"
    ],
    "java.awt.geom.arc2d.double.setarc": [
        "java.awt.geom.Arc2D.Double.setArc(double,double,double,double,double,double,int)"
    ],
    "java.time.offsetdatetime.parse": [
        "java.time.OffsetDateTime.parse(java.lang.CharSequence)",
        "java.time.OffsetDateTime.parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)"
    ],
    "javax.swing.text.fieldview.adjustallocation": [
        "javax.swing.text.FieldView.adjustAllocation(java.awt.Shape)"
    ],
    "javax.swing.jlist.clearselection": [
        "javax.swing.JList.clearSelection()"
    ],
    "javax.management.remote.jmxconnectorfactory.newjmxconnector": [
        "javax.management.remote.JMXConnectorFactory.newJMXConnector(javax.management.remote.JMXServiceURL,,?>)"
    ],
    "java.awt.component.paint": [
        "java.awt.Component.paint(java.awt.Graphics)"
    ],
    "javax.security.auth.kerberos.kerberosprincipal.getnametype": [
        "javax.security.auth.kerberos.KerberosPrincipal.getNameType()"
    ],
    "javax.swing.jcombobox.hidepopup": [
        "javax.swing.JComboBox.hidePopup()"
    ],
    "javax.print.attribute.standard.numberofinterveningjobs.getname": [
        "javax.print.attribute.standard.NumberOfInterveningJobs.getName()"
    ],
    "java.text.collator.setstrength": [
        "java.text.Collator.setStrength(int)"
    ],
    "javax.swing.rowsorter.getmodelrowcount": [
        "javax.swing.RowSorter.getModelRowCount()"
    ],
    "javax.imageio.stream.imageinputstream.readboolean": [
        "javax.imageio.stream.ImageInputStream.readBoolean()"
    ],
    "java.awt.toolkit.createscrollbar": [
        "java.awt.Toolkit.createScrollbar(java.awt.Scrollbar)"
    ],
    "javax.swing.plaf.basic.basictableui.getminimumsize": [
        "javax.swing.plaf.basic.BasicTableUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "javax.xml.stream.events.dtd.getdocumenttypedeclaration": [
        "javax.xml.stream.events.DTD.getDocumentTypeDeclaration()"
    ],
    "java.awt.geom.cubiccurve2d.getctrlx1": [
        "java.awt.geom.CubicCurve2D.getCtrlX1()"
    ],
    "javax.swing.jfilechooser.getaccessiblecontext": [
        "javax.swing.JFileChooser.getAccessibleContext()"
    ],
    "javax.management.relation.relation.getreferencedmbeans": [
        "javax.management.relation.Relation.getReferencedMBeans()"
    ],
    "java.util.stream.doublestream.max": [
        "java.util.stream.DoubleStream.max()"
    ],
    "javax.swing.plaf.multi.multitooltipui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiToolTipUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "java.util.concurrent.threadpoolexecutor.getkeepalivetime": [
        "java.util.concurrent.ThreadPoolExecutor.getKeepAliveTime(java.util.concurrent.TimeUnit)"
    ],
    "java.awt.image.shortlookuptable.lookuppixel": [
        "java.awt.image.ShortLookupTable.lookupPixel(int[],int[])",
        "java.awt.image.ShortLookupTable.lookupPixel(short[],short[])"
    ],
    "java.time.format.datetimeformatter.parse": [
        "java.time.format.DateTimeFormatter.parse(java.lang.CharSequence)",
        "java.time.format.DateTimeFormatter.parse(java.lang.CharSequence,java.text.ParsePosition)",
        "java.time.format.DateTimeFormatter.parse(java.lang.CharSequence,java.time.temporal.TemporalQuery<T>)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintscrollbarthumbbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintScrollBarThumbBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)"
    ],
    "javax.lang.model.element.typeparameterelement.getgenericelement": [
        "javax.lang.model.element.TypeParameterElement.getGenericElement()"
    ],
    "java.util.concurrent.atomic.atomicintegerarray.getandupdate": [
        "java.util.concurrent.atomic.AtomicIntegerArray.getAndUpdate(int,java.util.function.IntUnaryOperator)"
    ],
    "javax.xml.stream.util.eventreaderdelegate.getparent": [
        "javax.xml.stream.util.EventReaderDelegate.getParent()"
    ],
    "java.time.clock.fixed": [
        "java.time.Clock.fixed(java.time.Instant,java.time.ZoneId)"
    ],
    "org.omg.portableserver.idassignmentpolicyoperations.value": [
        "org.omg.PortableServer.IdAssignmentPolicyOperations.value()"
    ],
    "javax.swing.plaf.synth.synthspinnerui.propertychange": [
        "javax.swing.plaf.synth.SynthSpinnerUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "org.omg.corba.intholder._type": [
        "org.omg.CORBA.IntHolder._type()"
    ],
    "java.nio.file.path.toabsolutepath": [
        "java.nio.file.Path.toAbsolutePath()"
    ],
    "java.awt.geom.area.getbounds": [
        "java.awt.geom.Area.getBounds()"
    ],
    "java.awt.scrollbar.getvalue": [
        "java.awt.Scrollbar.getValue()"
    ],
    "java.sql.pseudocolumnusage.valueof": [
        "java.sql.PseudoColumnUsage.valueOf(java.lang.String)"
    ],
    "javax.swing.plaf.basic.basictextui.getpreferredsize": [
        "javax.swing.plaf.basic.BasicTextUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getmenuforeground": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getMenuForeground()"
    ],
    "javax.management.openmbean.openmbeanoperationinfo.getdescription": [
        "javax.management.openmbean.OpenMBeanOperationInfo.getDescription()"
    ],
    "javax.swing.abstractbutton.isborderpainted": [
        "javax.swing.AbstractButton.isBorderPainted()"
    ],
    "java.lang.invoke.methodtype.generic": [
        "java.lang.invoke.MethodType.generic()"
    ],
    "javax.print.attribute.attribute.getcategory": [
        "javax.print.attribute.Attribute.getCategory()"
    ],
    "org.omg.dynamicany._dynanystub.get_boolean": [
        "org.omg.DynamicAny._DynAnyStub.get_boolean()"
    ],
    "java.awt.graphicsenvironment.isheadless": [
        "java.awt.GraphicsEnvironment.isHeadless()"
    ],
    "javax.swing.tree.abstractlayoutcache.getpathclosestto": [
        "javax.swing.tree.AbstractLayoutCache.getPathClosestTo(int,int)"
    ],
    "java.nio.shortbuffer.wrap": [
        "java.nio.ShortBuffer.wrap(short[])",
        "java.nio.ShortBuffer.wrap(short[],int,int)"
    ],
    "javax.swing.plaf.synth.synthseparatorui.uninstallui": [
        "javax.swing.plaf.synth.SynthSeparatorUI.uninstallUI(javax.swing.JComponent)"
    ],
    "javax.management.remote.rmi.rmiconnection.getdomains": [
        "javax.management.remote.rmi.RMIConnection.getDomains(javax.security.auth.Subject)"
    ],
    "java.beans.featuredescriptor.setpreferred": [
        "java.beans.FeatureDescriptor.setPreferred(boolean)"
    ],
    "javax.swing.jmenubar.getui": [
        "javax.swing.JMenuBar.getUI()"
    ],
    "java.lang.classvalue.computevalue": [
        "java.lang.ClassValue.computeValue(java.lang.Class<?>)"
    ],
    "javax.swing.text.position.getoffset": [
        "javax.swing.text.Position.getOffset()"
    ],
    "java.beans.vetoablechangesupport.haslisteners": [
        "java.beans.VetoableChangeSupport.hasListeners(java.lang.String)"
    ],
    "javax.naming.directory.dircontext.getattributes": [
        "javax.naming.directory.DirContext.getAttributes(javax.naming.Name,java.lang.String[])",
        "javax.naming.directory.DirContext.getAttributes(java.lang.String)",
        "javax.naming.directory.DirContext.getAttributes(java.lang.String,java.lang.String[])",
        "javax.naming.directory.DirContext.getAttributes(javax.naming.Name)"
    ],
    "javax.swing.jpopupmenu.addseparator": [
        "javax.swing.JPopupMenu.addSeparator()"
    ],
    "javax.swing.plaf.synth.synthcontext.getregion": [
        "javax.swing.plaf.synth.SynthContext.getRegion()"
    ],
    "java.time.localdatetime.getmonthvalue": [
        "java.time.LocalDateTime.getMonthValue()"
    ],
    "java.nio.charset.coderresult.isoverflow": [
        "java.nio.charset.CoderResult.isOverflow()"
    ],
    "java.awt.window.setsize": [
        "java.awt.Window.setSize(java.awt.Dimension)",
        "java.awt.Window.setSize(int,int)"
    ],
    "javax.swing.jtextfield.addactionlistener": [
        "javax.swing.JTextField.addActionListener(java.awt.event.ActionListener)"
    ],
    "java.awt.image.bufferedimage.getheight": [
        "java.awt.image.BufferedImage.getHeight()",
        "java.awt.image.BufferedImage.getHeight(java.awt.image.ImageObserver)"
    ],
    "java.security.spec.ecprivatekeyspec.gets": [
        "java.security.spec.ECPrivateKeySpec.getS()"
    ],
    "java.awt.font.getmaxcharbounds": [
        "java.awt.Font.getMaxCharBounds(java.awt.font.FontRenderContext)"
    ],
    "java.lang.management.threadinfo.getstacktrace": [
        "java.lang.management.ThreadInfo.getStackTrace()"
    ],
    "javax.swing.plaf.splitpaneui.resettopreferredsizes": [
        "javax.swing.plaf.SplitPaneUI.resetToPreferredSizes(javax.swing.JSplitPane)"
    ],
    "java.time.zoneddatetime.withearlieroffsetatoverlap": [
        "java.time.ZonedDateTime.withEarlierOffsetAtOverlap()"
    ],
    "javax.swing.text.html.inlineview.changedupdate": [
        "javax.swing.text.html.InlineView.changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)"
    ],
    "java.time.zoneddatetime.tostring": [
        "java.time.ZonedDateTime.toString()"
    ],
    "java.lang.integer.divideunsigned": [
        "java.lang.Integer.divideUnsigned(int,int)"
    ],
    "java.awt.transparency.gettransparency": [
        "java.awt.Transparency.getTransparency()"
    ],
    "javax.naming.linkexception.getlinkresolvedname": [
        "javax.naming.LinkException.getLinkResolvedName()"
    ],
    "javax.swing.text.html.htmlwriter.writelineseparator": [
        "javax.swing.text.html.HTMLWriter.writeLineSeparator()"
    ],
    "javax.swing.transferhandler.transfersupport.gettransferable": [
        "javax.swing.TransferHandler.TransferSupport.getTransferable()"
    ],
    "javax.swing.jtabbedpane.paramstring": [
        "javax.swing.JTabbedPane.paramString()"
    ],
    "javax.swing.jinternalframe.isiconifiable": [
        "javax.swing.JInternalFrame.isIconifiable()"
    ],
    "javax.swing.actionmap.getparent": [
        "javax.swing.ActionMap.getParent()"
    ],
    "java.awt.gradientpaint.getcolor2": [
        "java.awt.GradientPaint.getColor2()"
    ],
    "javax.swing.transferhandler.getdragimage": [
        "javax.swing.TransferHandler.getDragImage()"
    ],
    "javax.swing.jscrollpane.getviewportborder": [
        "javax.swing.JScrollPane.getViewportBorder()"
    ],
    "java.time.offsetdatetime.getmonthvalue": [
        "java.time.OffsetDateTime.getMonthValue()"
    ],
    "javax.swing.jtextfield.createactionpropertychangelistener": [
        "javax.swing.JTextField.createActionPropertyChangeListener(javax.swing.Action)"
    ],
    "javax.swing.plaf.basic.basictoolbarui.setfloatingcolor": [
        "javax.swing.plaf.basic.BasicToolBarUI.setFloatingColor(java.awt.Color)"
    ],
    "javax.management.monitor.gaugemonitormbean.gethighthreshold": [
        "javax.management.monitor.GaugeMonitorMBean.getHighThreshold()"
    ],
    "java.awt.scrollpane.getscrollposition": [
        "java.awt.ScrollPane.getScrollPosition()"
    ],
    "java.io.file.setreadable": [
        "java.io.File.setReadable(boolean)",
        "java.io.File.setReadable(boolean,boolean)"
    ],
    "javax.xml.validation.validator.geterrorhandler": [
        "javax.xml.validation.Validator.getErrorHandler()"
    ],
    "java.awt.font.textmeasurer.getlayout": [
        "java.awt.font.TextMeasurer.getLayout(int,int)"
    ],
    "javax.management.relation.roleresult.getrolesunresolved": [
        "javax.management.relation.RoleResult.getRolesUnresolved()"
    ],
    "java.nio.bytebuffer.allocate": [
        "java.nio.ByteBuffer.allocate(int)"
    ],
    "java.nio.file.attribute.aclentry.builder.setprincipal": [
        "java.nio.file.attribute.AclEntry.Builder.setPrincipal(java.nio.file.attribute.UserPrincipal)"
    ],
    "java.awt.stroke.createstrokedshape": [
        "java.awt.Stroke.createStrokedShape(java.awt.Shape)"
    ],
    "javax.crypto.spec.rc5parameterspec.getrounds": [
        "javax.crypto.spec.RC5ParameterSpec.getRounds()"
    ],
    "javax.swing.jmenuitem.getmenudragmouselisteners": [
        "javax.swing.JMenuItem.getMenuDragMouseListeners()"
    ],
    "javax.swing.buttongroup.clearselection": [
        "javax.swing.ButtonGroup.clearSelection()"
    ],
    "org.omg.corba.orb.create_array_tc": [
        "org.omg.CORBA.ORB.create_array_tc(int,org.omg.CORBA.TypeCode)"
    ],
    "java.io.bytearrayoutputstream.size": [
        "java.io.ByteArrayOutputStream.size()"
    ],
    "javax.imageio.metadata.iiometadataformat.getelementmaxchildren": [
        "javax.imageio.metadata.IIOMetadataFormat.getElementMaxChildren(java.lang.String)"
    ],
    "java.beans.encoder.writeobject": [
        "java.beans.Encoder.writeObject(java.lang.Object)"
    ],
    "org.omg.corba.orb.get_default_context": [
        "org.omg.CORBA.ORB.get_default_context()"
    ],
    "java.sql.callablestatement.getnstring": [
        "java.sql.CallableStatement.getNString(java.lang.String)",
        "java.sql.CallableStatement.getNString(int)"
    ],
    "javax.print.attribute.datetimesyntax.getvalue": [
        "javax.print.attribute.DateTimeSyntax.getValue()"
    ],
    "java.awt.gridlayout.preferredlayoutsize": [
        "java.awt.GridLayout.preferredLayoutSize(java.awt.Container)"
    ],
    "java.awt.component.addkeylistener": [
        "java.awt.Component.addKeyListener(java.awt.event.KeyListener)"
    ],
    "javax.swing.jlayeredpane.getposition": [
        "javax.swing.JLayeredPane.getPosition(java.awt.Component)"
    ],
    "javax.accessibility.accessiblecomponent.setforeground": [
        "javax.accessibility.AccessibleComponent.setForeground(java.awt.Color)"
    ],
    "java.awt.font.shapegraphicattribute.getascent": [
        "java.awt.font.ShapeGraphicAttribute.getAscent()"
    ],
    "javax.net.socketfactory.createsocket": [
        "javax.net.SocketFactory.createSocket(java.lang.String,int,java.net.InetAddress,int)",
        "javax.net.SocketFactory.createSocket(java.net.InetAddress,int)",
        "javax.net.SocketFactory.createSocket()",
        "javax.net.SocketFactory.createSocket(java.lang.String,int)",
        "javax.net.SocketFactory.createSocket(java.net.InetAddress,int,java.net.InetAddress,int)"
    ],
    "javax.swing.plaf.multi.multitreeui.starteditingatpath": [
        "javax.swing.plaf.multi.MultiTreeUI.startEditingAtPath(javax.swing.JTree,javax.swing.tree.TreePath)"
    ],
    "javax.lang.model.element.variableelement.getenclosingelement": [
        "javax.lang.model.element.VariableElement.getEnclosingElement()"
    ],
    "java.util.concurrent.atomic.atomicreference.weakcompareandset": [
        "java.util.concurrent.atomic.AtomicReference.weakCompareAndSet(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicReference)",
        "java.util.concurrent.atomic.AtomicReference.weakCompareAndSet(V,V)"
    ],
    "java.beans.indexedpropertydescriptor.setindexedreadmethod": [
        "java.beans.IndexedPropertyDescriptor.setIndexedReadMethod(java.lang.reflect.Method)"
    ],
    "javax.swing.text.simpleattributeset.equals": [
        "javax.swing.text.SimpleAttributeSet.equals(java.lang.Object)"
    ],
    "java.lang.invoke.methodtype.hashcode": [
        "java.lang.invoke.MethodType.hashCode()"
    ],
    "org.omg.corba.datainputstream.read_octet": [
        "org.omg.CORBA.DataInputStream.read_octet()"
    ],
    "javax.swing.jprogressbar.removechangelistener": [
        "javax.swing.JProgressBar.removeChangeListener(javax.swing.event.ChangeListener)"
    ],
    "javax.imageio.metadata.iiometadatanode.setuserdata": [
        "javax.imageio.metadata.IIOMetadataNode.setUserData(java.lang.String,java.lang.Object,org.w3c.dom.UserDataHandler)"
    ],
    "java.nio.channels.datagramchannel.isconnected": [
        "java.nio.channels.DatagramChannel.isConnected()"
    ],
    "java.lang.thread.getstacktrace": [
        "java.lang.Thread.getStackTrace()"
    ],
    "javax.sql.rowset.baserowset.setfetchdirection": [
        "javax.sql.rowset.BaseRowSet.setFetchDirection(int)"
    ],
    "java.nio.file.path.endswith": [
        "java.nio.file.Path.endsWith(java.lang.String)",
        "java.nio.file.Path.endsWith(java.nio.file.Path)"
    ],
    "org.w3c.dom.domconfiguration.setparameter": [
        "org.w3c.dom.DOMConfiguration.setParameter(java.lang.String,java.lang.Object)"
    ],
    "javax.management.modelmbean.modelmbeanconstructorinfo.tostring": [
        "javax.management.modelmbean.ModelMBeanConstructorInfo.toString()"
    ],
    "javax.print.attribute.standard.sheetcollate.getenumvaluetable": [
        "javax.print.attribute.standard.SheetCollate.getEnumValueTable()"
    ],
    "javax.swing.debuggraphics.flashcolor": [
        "javax.swing.DebugGraphics.flashColor()"
    ],
    "java.awt.dnd.droptargetdropevent.acceptdrop": [
        "java.awt.dnd.DropTargetDropEvent.acceptDrop(int)"
    ],
    "javax.swing.plaf.synth.synthtabbedpaneui.getbaseline": [
        "javax.swing.plaf.synth.SynthTabbedPaneUI.getBaseline(int)"
    ],
    "javax.swing.text.jtextcomponent.setselectionstart": [
        "javax.swing.text.JTextComponent.setSelectionStart(int)"
    ],
    "java.util.logging.logger.finer": [
        "java.util.logging.Logger.finer(java.lang.String)",
        "java.util.logging.Logger.finer(java.util.function.Supplier<java.lang.String>)"
    ],
    "java.security.spec.ellipticcurve.geta": [
        "java.security.spec.EllipticCurve.getA()"
    ],
    "javax.swing.jdialog.getdefaultcloseoperation": [
        "javax.swing.JDialog.getDefaultCloseOperation()"
    ],
    "javax.xml.bind.unmarshaller.getadapter": [
        "javax.xml.bind.Unmarshaller.getAdapter(java.lang.Class<A>)"
    ],
    "java.time.offsetdatetime.minusdays": [
        "java.time.OffsetDateTime.minusDays(long)"
    ],
    "javax.swing.text.wrappedplainview.getlinebuffer": [
        "javax.swing.text.WrappedPlainView.getLineBuffer()"
    ],
    "java.time.format.datetimeformatterbuilder.parsecaseinsensitive": [
        "java.time.format.DateTimeFormatterBuilder.parseCaseInsensitive()"
    ],
    "javax.imageio.imagewriteparam.getcompressionquality": [
        "javax.imageio.ImageWriteParam.getCompressionQuality()"
    ],
    "java.awt.list.addactionlistener": [
        "java.awt.List.addActionListener(java.awt.event.ActionListener)"
    ],
    "java.awt.geom.path2d.moveto": [
        "java.awt.geom.Path2D.moveTo(double,double)"
    ],
    "javax.xml.parsers.saxparserfactory.isxincludeaware": [
        "javax.xml.parsers.SAXParserFactory.isXIncludeAware()"
    ],
    "org.omg.corba.orb.get_service_information": [
        "org.omg.CORBA.ORB.get_service_information(short,org.omg.CORBA.ServiceInformationHolder)"
    ],
    "java.awt.font.glyphvector.setglyphposition": [
        "java.awt.font.GlyphVector.setGlyphPosition(int,java.awt.geom.Point2D)"
    ],
    "java.time.format.datetimeformatter.ofpattern": [
        "java.time.format.DateTimeFormatter.ofPattern(java.lang.String,java.util.Locale)",
        "java.time.format.DateTimeFormatter.ofPattern(java.lang.String)"
    ],
    "org.omg.corba.datainputstream.read_char": [
        "org.omg.CORBA.DataInputStream.read_char()"
    ],
    "javax.naming.refaddr.gettype": [
        "javax.naming.RefAddr.getType()"
    ],
    "javax.lang.model.type.uniontype.getalternatives": [
        "javax.lang.model.type.UnionType.getAlternatives()"
    ],
    "java.time.localdatetime.getdayofyear": [
        "java.time.LocalDateTime.getDayOfYear()"
    ],
    "javax.swing.plaf.basic.basicspinnerui.createui": [
        "javax.swing.plaf.basic.BasicSpinnerUI.createUI(javax.swing.JComponent)"
    ],
    "java.util.map.replaceall": [
        "java.util.Map.replaceAll(java.util.function.BiFunction<? super,? super,? extends java.util.Map>)",
        "java.util.Map.replaceAll(java.util.function.BiFunction<? super,? super,? extends V>)"
    ],
    "org.omg.dynamicany._dynstructstub.insert_double": [
        "org.omg.DynamicAny._DynStructStub.insert_double(double)"
    ],
    "java.time.format.datetimeformatterbuilder.appendoffsetid": [
        "java.time.format.DateTimeFormatterBuilder.appendOffsetId()"
    ],
    "java.awt.font.textlayout.handlejustify": [
        "java.awt.font.TextLayout.handleJustify(float)"
    ],
    "javax.management.loading.mlet.readexternal": [
        "javax.management.loading.MLet.readExternal(java.io.ObjectInput)"
    ],
    "javax.management.monitor.gaugemonitormbean.getlowthreshold": [
        "javax.management.monitor.GaugeMonitorMBean.getLowThreshold()"
    ],
    "javax.sound.sampled.audiofileformat.type.equals": [
        "javax.sound.sampled.AudioFileFormat.Type.equals(java.lang.Object)"
    ],
    "org.omg.portableserver.poamanageroperations.activate": [
        "org.omg.PortableServer.POAManagerOperations.activate()"
    ],
    "javax.swing.plaf.multi.multitoolbarui.update": [
        "javax.swing.plaf.multi.MultiToolBarUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.text.html.stylesheet.addcssattribute": [
        "javax.swing.text.html.StyleSheet.addCSSAttribute(javax.swing.text.MutableAttributeSet,javax.swing.text.html.CSS.Attribute,java.lang.String)"
    ],
    "java.util.vector.removeelementat": [
        "java.util.Vector.removeElementAt(int)"
    ],
    "javax.management.loading.mletcontent.getparametervalues": [
        "javax.management.loading.MLetContent.getParameterValues()"
    ],
    "org.omg.dynamicany._dynvaluestub.insert_wchar": [
        "org.omg.DynamicAny._DynValueStub.insert_wchar(char)"
    ],
    "org.omg.portableserver.servant._get_interface_def": [
        "org.omg.PortableServer.Servant._get_interface_def()"
    ],
    "java.nio.file.filestore.gettotalspace": [
        "java.nio.file.FileStore.getTotalSpace()"
    ],
    "java.util.concurrent.copyonwritearrayset.spliterator": [
        "java.util.concurrent.CopyOnWriteArraySet.spliterator()"
    ],
    "javax.swing.plaf.synth.synthformattedtextfieldui.paintborder": [
        "javax.swing.plaf.synth.SynthFormattedTextFieldUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.springlayout.getconstraints": [
        "javax.swing.SpringLayout.getConstraints(java.awt.Component)"
    ],
    "javax.management.remote.rmi.rmiserverimpl.newclient": [
        "javax.management.remote.rmi.RMIServerImpl.newClient(java.lang.Object)"
    ],
    "java.lang.reflect.executable.getannotatedexceptiontypes": [
        "java.lang.reflect.Executable.getAnnotatedExceptionTypes()"
    ],
    "java.awt.event.inputmethodevent.getcaret": [
        "java.awt.event.InputMethodEvent.getCaret()"
    ],
    "org.ietf.jgss.channelbinding.getinitiatoraddress": [
        "org.ietf.jgss.ChannelBinding.getInitiatorAddress()"
    ],
    "org.omg.corba.datainputstream.read_ulong": [
        "org.omg.CORBA.DataInputStream.read_ulong()"
    ],
    "javax.management.modelmbean.modelmbeanoperationinfo.clone": [
        "javax.management.modelmbean.ModelMBeanOperationInfo.clone()"
    ],
    "javax.swing.jtree.getleadselectionpath": [
        "javax.swing.JTree.getLeadSelectionPath()"
    ],
    "javax.xml.bind.datatypeconverter.printdouble": [
        "javax.xml.bind.DatatypeConverter.printDouble(double)"
    ],
    "javax.swing.plaf.basic.basicscrollbarui.getthumbbounds": [
        "javax.swing.plaf.basic.BasicScrollBarUI.getThumbBounds()"
    ],
    "javax.swing.plaf.synth.synthpasswordfieldui.createui": [
        "javax.swing.plaf.synth.SynthPasswordFieldUI.createUI(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.multi.multitabbedpaneui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiTabbedPaneUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "java.text.breakiterator.getavailablelocales": [
        "java.text.BreakIterator.getAvailableLocales()"
    ],
    "java.util.prefs.preferencechangeevent.getkey": [
        "java.util.prefs.PreferenceChangeEvent.getKey()"
    ],
    "java.security.cert.x509certselector.setnameconstraints": [
        "java.security.cert.X509CertSelector.setNameConstraints(byte[])"
    ],
    "java.math.biginteger.compareto": [
        "java.math.BigInteger.compareTo(java.math.BigInteger)"
    ],
    "java.text.fieldposition.getendindex": [
        "java.text.FieldPosition.getEndIndex()"
    ],
    "java.awt.geom.path2d.float.clone": [
        "java.awt.geom.Path2D.Float.clone()"
    ],
    "java.awt.component.getcolormodel": [
        "java.awt.Component.getColorModel()"
    ],
    "javax.swing.text.html.htmleditorkit.getparser": [
        "javax.swing.text.html.HTMLEditorKit.getParser()"
    ],
    "java.util.regex.patternsyntaxexception.getdescription": [
        "java.util.regex.PatternSyntaxException.getDescription()"
    ],
    "javax.net.ssl.httpsurlconnection.setsslsocketfactory": [
        "javax.net.ssl.HttpsURLConnection.setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)"
    ],
    "javax.swing.joptionpane.getui": [
        "javax.swing.JOptionPane.getUI()"
    ],
    "java.util.concurrent.forkjointask.getexception": [
        "java.util.concurrent.ForkJoinTask.getException()"
    ],
    "java.util.currency.getdisplayname": [
        "java.util.Currency.getDisplayName()",
        "java.util.Currency.getDisplayName(java.util.Locale)"
    ],
    "java.text.stringcharacteriterator.settext": [
        "java.text.StringCharacterIterator.setText(java.lang.String)"
    ],
    "javax.lang.model.type.typevisitor.visitunion": [
        "javax.lang.model.type.TypeVisitor.visitUnion(javax.lang.model.type.UnionType,javax.lang.model.type.TypeVisitor)"
    ],
    "org.ietf.jgss.gssmanager.getmechs": [
        "org.ietf.jgss.GSSManager.getMechs()"
    ],
    "javax.swing.text.maskformatter.getplaceholder": [
        "javax.swing.text.MaskFormatter.getPlaceholder()"
    ],
    "javax.xml.crypto.dom.domcryptocontext.putnamespaceprefix": [
        "javax.xml.crypto.dom.DOMCryptoContext.putNamespacePrefix(java.lang.String,java.lang.String)"
    ],
    "org.omg.corba.any.insert_object": [
        "org.omg.CORBA.Any.insert_Object(org.omg.CORBA.Object,org.omg.CORBA.TypeCode)",
        "org.omg.CORBA.Any.insert_Object(org.omg.CORBA.Object)"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.writelock.lock": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.lock()"
    ],
    "javax.naming.spi.dirstatefactory.result.getattributes": [
        "javax.naming.spi.DirStateFactory.Result.getAttributes()"
    ],
    "java.nio.file.securedirectorystream.newbytechannel": [
        "java.nio.file.SecureDirectoryStream.newByteChannel(T,java.util.Set<? extends java.nio.file.OpenOption>,java.nio.file.attribute.FileAttribute<?>)",
        "java.nio.file.SecureDirectoryStream.newByteChannel(java.nio.file.SecureDirectoryStream,java.util.Set<? extends java.nio.file.OpenOption>,java.nio.file.attribute.FileAttribute<?>...)"
    ],
    "java.text.bidi.createlinebidi": [
        "java.text.Bidi.createLineBidi(int,int)"
    ],
    "javax.swing.text.html.parser.dtd.defattributelist": [
        "javax.swing.text.html.parser.DTD.defAttributeList(java.lang.String,int,int,java.lang.String,java.lang.String,javax.swing.text.html.parser.AttributeList)"
    ],
    "java.awt.image.componentcolormodel.getrgb": [
        "java.awt.image.ComponentColorModel.getRGB(java.lang.Object)",
        "java.awt.image.ComponentColorModel.getRGB(int)"
    ],
    "javax.sound.sampled.audiofileformat.type.hashcode": [
        "javax.sound.sampled.AudioFileFormat.Type.hashCode()"
    ],
    "javax.swing.text.jtextcomponent.getdragenabled": [
        "javax.swing.text.JTextComponent.getDragEnabled()"
    ],
    "javax.swing.jsplitpane.resettopreferredsizes": [
        "javax.swing.JSplitPane.resetToPreferredSizes()"
    ],
    "javax.swing.plaf.basic.basiccombopopup.uninstallcomboboxmodellisteners": [
        "javax.swing.plaf.basic.BasicComboPopup.uninstallComboBoxModelListeners(javax.swing.ComboBoxModel)"
    ],
    "java.util.optionalint.tostring": [
        "java.util.OptionalInt.toString()"
    ],
    "java.util.concurrent.synchronousqueue.drainto": [
        "java.util.concurrent.SynchronousQueue.drainTo(java.util.Collection<? super E>)",
        "java.util.concurrent.SynchronousQueue.drainTo(java.util.Collection<? super E>,int)"
    ],
    "java.util.collections.indexofsublist": [
        "java.util.Collections.indexOfSubList(java.util.List<?>,java.util.List<?>)"
    ],
    "javax.print.attribute.standard.printerstatereasons.getcategory": [
        "javax.print.attribute.standard.PrinterStateReasons.getCategory()"
    ],
    "java.awt.polygon.reset": [
        "java.awt.Polygon.reset()"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.setcolumnlabel": [
        "javax.sql.rowset.RowSetMetaDataImpl.setColumnLabel(int,java.lang.String)"
    ],
    "javax.swing.desktopmanager.deactivateframe": [
        "javax.swing.DesktopManager.deactivateFrame(javax.swing.JInternalFrame)"
    ],
    "javax.swing.jtable.getdropmode": [
        "javax.swing.JTable.getDropMode()"
    ],
    "javax.swing.jtextpane.insertcomponent": [
        "javax.swing.JTextPane.insertComponent(java.awt.Component)"
    ],
    "javax.swing.plaf.multi.multicomboboxui.getminimumsize": [
        "javax.swing.plaf.multi.MultiComboBoxUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "java.awt.menuitem.enableevents": [
        "java.awt.MenuItem.enableEvents(long)"
    ],
    "javax.swing.text.compositeview.gettopinset": [
        "javax.swing.text.CompositeView.getTopInset()"
    ],
    "javax.xml.bind.datatypeconverter.parsehexbinary": [
        "javax.xml.bind.DatatypeConverter.parseHexBinary(java.lang.String)"
    ],
    "javax.xml.stream.events.namespace.getprefix": [
        "javax.xml.stream.events.Namespace.getPrefix()"
    ],
    "javax.naming.ldap.basiccontrol.getid": [
        "javax.naming.ldap.BasicControl.getID()"
    ],
    "java.time.localtime.withsecond": [
        "java.time.LocalTime.withSecond(int)"
    ],
    "java.awt.component.getgraphicsconfiguration": [
        "java.awt.Component.getGraphicsConfiguration()"
    ],
    "java.util.concurrent.phaser.getregisteredparties": [
        "java.util.concurrent.Phaser.getRegisteredParties()"
    ],
    "java.lang.string.replacefirst": [
        "java.lang.String.replaceFirst(java.lang.String,java.lang.String)"
    ],
    "java.time.instant.minusnanos": [
        "java.time.Instant.minusNanos(long)"
    ],
    "javax.swing.plaf.synth.synthpanelui.createui": [
        "javax.swing.plaf.synth.SynthPanelUI.createUI(javax.swing.JComponent)"
    ],
    "javax.net.ssl.sslsession.getprotocol": [
        "javax.net.ssl.SSLSession.getProtocol()"
    ],
    "javax.imageio.imageio.scanforplugins": [
        "javax.imageio.ImageIO.scanForPlugins()"
    ],
    "org.omg.dynamicany._dynfixedstub.get_double": [
        "org.omg.DynamicAny._DynFixedStub.get_double()"
    ],
    "java.awt.graphicsenvironment.getallfonts": [
        "java.awt.GraphicsEnvironment.getAllFonts()"
    ],
    "java.awt.toolkit.isdynamiclayoutset": [
        "java.awt.Toolkit.isDynamicLayoutSet()"
    ],
    "javax.xml.stream.events.dtd.getnotations": [
        "javax.xml.stream.events.DTD.getNotations()"
    ],
    "org.omg.dynamicany._dynvaluestub.insert_long": [
        "org.omg.DynamicAny._DynValueStub.insert_long(int)"
    ],
    "java.awt.menu.removenotify": [
        "java.awt.Menu.removeNotify()"
    ],
    "java.lang.reflect.array.getlong": [
        "java.lang.reflect.Array.getLong(java.lang.Object,int)"
    ],
    "javax.xml.ws.service.setexecutor": [
        "javax.xml.ws.Service.setExecutor(java.util.concurrent.Executor)"
    ],
    "javax.swing.plaf.synth.syntheditorpaneui.paint": [
        "javax.swing.plaf.synth.SynthEditorPaneUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)"
    ],
    "javax.swing.jprogressbar.getchangelisteners": [
        "javax.swing.JProgressBar.getChangeListeners()"
    ],
    "javax.swing.text.elementiterator.next": [
        "javax.swing.text.ElementIterator.next()"
    ],
    "javax.swing.jviewport.createviewlistener": [
        "javax.swing.JViewport.createViewListener()"
    ],
    "javax.xml.bind.datatypeconverterinterface.parseboolean": [
        "javax.xml.bind.DatatypeConverterInterface.parseBoolean(java.lang.String)"
    ],
    "javax.security.auth.kerberos.kerberosprincipal.equals": [
        "javax.security.auth.kerberos.KerberosPrincipal.equals(java.lang.Object)"
    ],
    "org.xml.sax.dtdhandler.notationdecl": [
        "org.xml.sax.DTDHandler.notationDecl(java.lang.String,java.lang.String,java.lang.String)"
    ],
    "javax.swing.table.defaulttablecolumnmodel.getselectedcolumns": [
        "javax.swing.table.DefaultTableColumnModel.getSelectedColumns()"
    ],
    "javax.management.relation.relationservicembean.getreferencedmbeans": [
        "javax.management.relation.RelationServiceMBean.getReferencedMBeans(java.lang.String)"
    ],
    "javax.swing.tree.variableheightlayoutcache.invalidatepathbounds": [
        "javax.swing.tree.VariableHeightLayoutCache.invalidatePathBounds(javax.swing.tree.TreePath)"
    ],
    "java.awt.image.imagefilter.getfilterinstance": [
        "java.awt.image.ImageFilter.getFilterInstance(java.awt.image.ImageConsumer)"
    ],
    "javax.swing.text.defaultstyleddocument.adddocumentlistener": [
        "javax.swing.text.DefaultStyledDocument.addDocumentListener(javax.swing.event.DocumentListener)"
    ],
    "javax.swing.jinternalframe.setmaximizable": [
        "javax.swing.JInternalFrame.setMaximizable(boolean)"
    ],
    "javax.swing.plaf.basic.basicinternalframeui.iconifyframe": [
        "javax.swing.plaf.basic.BasicInternalFrameUI.iconifyFrame(javax.swing.JInternalFrame)"
    ],
    "javax.swing.text.view.preferencechanged": [
        "javax.swing.text.View.preferenceChanged(javax.swing.text.View,boolean,boolean)"
    ],
    "javax.swing.plaf.multi.multiviewportui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiViewportUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "java.awt.borderlayout.removelayoutcomponent": [
        "java.awt.BorderLayout.removeLayoutComponent(java.awt.Component)"
    ],
    "javax.swing.joptionpane.setui": [
        "javax.swing.JOptionPane.setUI(javax.swing.plaf.OptionPaneUI)"
    ],
    "javax.management.loading.mletcontent.getname": [
        "javax.management.loading.MLetContent.getName()"
    ],
    "java.util.gregoriancalendar.hashcode": [
        "java.util.GregorianCalendar.hashCode()"
    ],
    "java.util.concurrent.linkedblockingqueue.size": [
        "java.util.concurrent.LinkedBlockingQueue.size()"
    ],
    "javax.swing.defaultdesktopmanager.setboundsforframe": [
        "javax.swing.DefaultDesktopManager.setBoundsForFrame(javax.swing.JComponent,int,int,int,int)"
    ],
    "javax.xml.bind.util.validationeventcollector.getevents": [
        "javax.xml.bind.util.ValidationEventCollector.getEvents()"
    ],
    "java.util.stream.doublestream.summarystatistics": [
        "java.util.stream.DoubleStream.summaryStatistics()"
    ],
    "java.io.bytearrayoutputstream.reset": [
        "java.io.ByteArrayOutputStream.reset()"
    ],
    "java.util.concurrent.linkedblockingqueue.offer": [
        "java.util.concurrent.LinkedBlockingQueue.offer(java.util.concurrent.LinkedBlockingQueue,long,java.util.concurrent.TimeUnit)",
        "java.util.concurrent.LinkedBlockingQueue.offer(E)",
        "java.util.concurrent.LinkedBlockingQueue.offer(E,long,java.util.concurrent.TimeUnit)",
        "java.util.concurrent.LinkedBlockingQueue.offer(java.util.concurrent.LinkedBlockingQueue)"
    ],
    "java.util.logging.errormanager.error": [
        "java.util.logging.ErrorManager.error(java.lang.String,java.lang.Exception,int)"
    ],
    "java.time.localtime.with": [
        "java.time.LocalTime.with(java.time.temporal.TemporalAdjuster)",
        "java.time.LocalTime.with(java.time.temporal.TemporalField,long)"
    ],
    "javax.swing.jlist.setselectionmodel": [
        "javax.swing.JList.setSelectionModel(javax.swing.ListSelectionModel)"
    ],
    "java.net.securecacheresponse.getlocalcertificatechain": [
        "java.net.SecureCacheResponse.getLocalCertificateChain()"
    ],
    "java.nio.charset.charsetdecoder.implreplacewith": [
        "java.nio.charset.CharsetDecoder.implReplaceWith(java.lang.String)"
    ],
    "javax.swing.defaultrowsorter.getmodel": [
        "javax.swing.DefaultRowSorter.getModel()"
    ],
    "java.lang.math.addexact": [
        "java.lang.Math.addExact(long,long)",
        "java.lang.Math.addExact(int,int)"
    ],
    "javax.swing.jtextarea.getcolumns": [
        "javax.swing.JTextArea.getColumns()"
    ],
    "org.omg.dynamicany._dynenumstub.equal": [
        "org.omg.DynamicAny._DynEnumStub.equal(org.omg.DynamicAny.DynAny)"
    ],
    "org.omg.corba.any.extract_short": [
        "org.omg.CORBA.Any.extract_short()"
    ],
    "javax.swing.jtable.removecolumn": [
        "javax.swing.JTable.removeColumn(javax.swing.table.TableColumn)"
    ],
    "javax.swing.jtabbedpane.seticonat": [
        "javax.swing.JTabbedPane.setIconAt(int,javax.swing.Icon)"
    ],
    "java.security.accesscontrolexception.getpermission": [
        "java.security.AccessControlException.getPermission()"
    ],
    "javax.xml.crypto.dsig.spec.xpathfilter2parameterspec.getxpathlist": [
        "javax.xml.crypto.dsig.spec.XPathFilter2ParameterSpec.getXPathList()"
    ],
    "javax.management.mbeanserverbuilder.newmbeanserver": [
        "javax.management.MBeanServerBuilder.newMBeanServer(java.lang.String,javax.management.MBeanServer,javax.management.MBeanServerDelegate)"
    ],
    "java.nio.file.attribute.filetime.frommillis": [
        "java.nio.file.attribute.FileTime.fromMillis(long)"
    ],
    "javax.xml.soap.soapelement.getnamespaceprefixes": [
        "javax.xml.soap.SOAPElement.getNamespacePrefixes()"
    ],
    "javax.annotation.processing.processor.getsupportedannotationtypes": [
        "javax.annotation.processing.Processor.getSupportedAnnotationTypes()"
    ],
    "java.nio.channels.filelock.overlaps": [
        "java.nio.channels.FileLock.overlaps(long,long)"
    ],
    "javax.swing.jtable.createdefaultcolumnsfrommodel": [
        "javax.swing.JTable.createDefaultColumnsFromModel()"
    ],
    "java.time.format.datetimeformatter.oflocalizeddatetime": [
        "java.time.format.DateTimeFormatter.ofLocalizedDateTime(java.time.format.FormatStyle)",
        "java.time.format.DateTimeFormatter.ofLocalizedDateTime(java.time.format.FormatStyle,java.time.format.FormatStyle)"
    ],
    "java.util.jar.attributes.putvalue": [
        "java.util.jar.Attributes.putValue(java.lang.String,java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthprogressbarui.uninstalllisteners": [
        "javax.swing.plaf.synth.SynthProgressBarUI.uninstallListeners()"
    ],
    "java.awt.image.renderable.contextualrenderedimagefactory.getproperty": [
        "java.awt.image.renderable.ContextualRenderedImageFactory.getProperty(java.awt.image.renderable.ParameterBlock,java.lang.String)"
    ],
    "javax.management.relation.relationservicembean.addrelationtype": [
        "javax.management.relation.RelationServiceMBean.addRelationType(javax.management.relation.RelationType)"
    ],
    "java.time.duration.minusminutes": [
        "java.time.Duration.minusMinutes(long)"
    ],
    "javax.swing.text.jtextcomponent.settext": [
        "javax.swing.text.JTextComponent.setText(java.lang.String)"
    ],
    "javax.xml.datatype.duration.negate": [
        "javax.xml.datatype.Duration.negate()"
    ],
    "org.omg.cosnaming._namingcontextextstub.new_context": [
        "org.omg.CosNaming._NamingContextExtStub.new_context()"
    ],
    "java.io.file.setreadonly": [
        "java.io.File.setReadOnly()"
    ],
    "java.awt.geom.area.intersect": [
        "java.awt.geom.Area.intersect(java.awt.geom.Area)"
    ],
    "java.time.format.datetimeformatterbuilder.optionalstart": [
        "java.time.format.DateTimeFormatterBuilder.optionalStart()"
    ],
    "javax.net.ssl.sslsession.putvalue": [
        "javax.net.ssl.SSLSession.putValue(java.lang.String,java.lang.Object)"
    ],
    "java.awt.container.setlayout": [
        "java.awt.Container.setLayout(java.awt.LayoutManager)"
    ],
    "java.awt.renderinghints.values": [
        "java.awt.RenderingHints.values()"
    ],
    "javax.swing.plaf.synth.syntheditorpaneui.update": [
        "javax.swing.plaf.synth.SynthEditorPaneUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.rowsorter.convertrowindextoview": [
        "javax.swing.RowSorter.convertRowIndexToView(int)"
    ],
    "java.io.chararraywriter.reset": [
        "java.io.CharArrayWriter.reset()"
    ],
    "java.util.collections.max": [
        "java.util.Collections.max(java.util.Collection<? extends T>,java.util.Comparator<? super T>)",
        "java.util.Collections.max(java.util.Collection<? extends T>)"
    ],
    "java.time.period.addto": [
        "java.time.Period.addTo(java.time.temporal.Temporal)"
    ],
    "javax.management.modelmbean.modelmbeaninfo.getmbeandescriptor": [
        "javax.management.modelmbean.ModelMBeanInfo.getMBeanDescriptor()"
    ],
    "javax.swing.jtabbedpane.getboundsat": [
        "javax.swing.JTabbedPane.getBoundsAt(int)"
    ],
    "java.util.concurrent.atomic.longadder.reset": [
        "java.util.concurrent.atomic.LongAdder.reset()"
    ],
    "javax.swing.text.keymap.getdefaultaction": [
        "javax.swing.text.Keymap.getDefaultAction()"
    ],
    "org.ietf.jgss.gssexception.getmessage": [
        "org.ietf.jgss.GSSException.getMessage()"
    ],
    "java.util.arrays.hashcode": [
        "java.util.Arrays.hashCode(java.lang.Object)",
        "java.util.Arrays.hashCode(int[])",
        "java.util.Arrays.hashCode(boolean[])",
        "java.util.Arrays.hashCode(float[])",
        "java.util.Arrays.hashCode(java.lang.Object[])",
        "java.util.Arrays.hashCode(short[])",
        "java.util.Arrays.hashCode(byte[])",
        "java.util.Arrays.hashCode(char[])",
        "java.util.Arrays.hashCode(long[])",
        "java.util.Arrays.hashCode(double[])"
    ],
    "java.lang.reflect.constructor.getgenericparametertypes": [
        "java.lang.reflect.Constructor.getGenericParameterTypes()"
    ],
    "java.beans.xmldecoder.readobject": [
        "java.beans.XMLDecoder.readObject()"
    ],
    "java.awt.image.samplemodel.getnumdataelements": [
        "java.awt.image.SampleModel.getNumDataElements()"
    ],
    "java.lang.byte.longvalue": [
        "java.lang.Byte.longValue()"
    ],
    "org.omg.dynamicany._dynunionstub.assign": [
        "org.omg.DynamicAny._DynUnionStub.assign(org.omg.DynamicAny.DynAny)"
    ],
    "java.awt.image.renderable.renderableimage.createrendering": [
        "java.awt.image.renderable.RenderableImage.createRendering(java.awt.image.renderable.RenderContext)"
    ],
    "java.io.randomaccessfile.readchar": [
        "java.io.RandomAccessFile.readChar()"
    ],
    "java.sql.databasemetadata.generatedkeyalwaysreturned": [
        "java.sql.DatabaseMetaData.generatedKeyAlwaysReturned()"
    ],
    "javax.imageio.metadata.iiometadataformat.getattributemaxvalue": [
        "javax.imageio.metadata.IIOMetadataFormat.getAttributeMaxValue(java.lang.String,java.lang.String)"
    ],
    "javax.print.attribute.standard.jobkoctetssupported.getcategory": [
        "javax.print.attribute.standard.JobKOctetsSupported.getCategory()"
    ],
    "java.lang.class.getresource": [
        "java.lang.Class.getResource(java.lang.String)"
    ],
    "java.awt.image.databuffershort.setelem": [
        "java.awt.image.DataBufferShort.setElem(int,int,int)"
    ],
    "javax.swing.jtable.setdragenabled": [
        "javax.swing.JTable.setDragEnabled(boolean)"
    ],
    "java.nio.channels.asynchronoussocketchannel.provider": [
        "java.nio.channels.AsynchronousSocketChannel.provider()"
    ],
    "javax.activation.datacontenthandler.getcontent": [
        "javax.activation.DataContentHandler.getContent(javax.activation.DataSource)"
    ],
    "javax.swing.jspinner.defaulteditor.dismiss": [
        "javax.swing.JSpinner.DefaultEditor.dismiss(javax.swing.JSpinner)"
    ],
    "javax.accessibility.accessiblecomponent.getcursor": [
        "javax.accessibility.AccessibleComponent.getCursor()"
    ],
    "java.nio.charset.charset.forname": [
        "java.nio.charset.Charset.forName(java.lang.String)"
    ],
    "java.util.concurrent.atomic.atomiclong.getandadd": [
        "java.util.concurrent.atomic.AtomicLong.getAndAdd(long)"
    ],
    "java.time.offsetdatetime.withhour": [
        "java.time.OffsetDateTime.withHour(int)"
    ],
    "java.lang.long.shortvalue": [
        "java.lang.Long.shortValue()"
    ],
    "org.omg.corba.orb.shutdown": [
        "org.omg.CORBA.ORB.shutdown(boolean)"
    ],
    "javax.swing.defaultrowsorter.getmodelrowcount": [
        "javax.swing.DefaultRowSorter.getModelRowCount()"
    ],
    "javax.security.auth.destroyable.isdestroyed": [
        "javax.security.auth.Destroyable.isDestroyed()"
    ],
    "javax.xml.bind.datatypeconverter.printanysimpletype": [
        "javax.xml.bind.DatatypeConverter.printAnySimpleType(java.lang.String)"
    ],
    "org.omg.dynamicany._dynfixedstub.get_any": [
        "org.omg.DynamicAny._DynFixedStub.get_any()"
    ],
    "javax.swing.text.html.parser.dtd.defineattributes": [
        "javax.swing.text.html.parser.DTD.defineAttributes(java.lang.String,javax.swing.text.html.parser.AttributeList)"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.setprecision": [
        "javax.sql.rowset.RowSetMetaDataImpl.setPrecision(int,int)"
    ],
    "java.sql.callablestatement.getarray": [
        "java.sql.CallableStatement.getArray(java.lang.String)",
        "java.sql.CallableStatement.getArray(int)"
    ],
    "java.beans.beancontext.beancontextmembershipevent.iterator": [
        "java.beans.beancontext.BeanContextMembershipEvent.iterator()"
    ],
    "org.omg.dynamicany._dynsequencestub.insert_any": [
        "org.omg.DynamicAny._DynSequenceStub.insert_any(org.omg.CORBA.Any)"
    ],
    "javax.xml.bind.annotation.adapters.normalizedstringadapter.unmarshal": [
        "javax.xml.bind.annotation.adapters.NormalizedStringAdapter.unmarshal(java.lang.String)"
    ],
    "java.awt.font.textlayout.getbaseline": [
        "java.awt.font.TextLayout.getBaseline()"
    ],
    "javax.imageio.metadata.iiometadatanode.setidattributenode": [
        "javax.imageio.metadata.IIOMetadataNode.setIdAttributeNode(org.w3c.dom.Attr,boolean)"
    ],
    "java.awt.color.hsbtorgb": [
        "java.awt.Color.HSBtoRGB(float,float,float)"
    ],
    "javax.crypto.spec.pbekeyspec.getiterationcount": [
        "javax.crypto.spec.PBEKeySpec.getIterationCount()"
    ],
    "java.nio.file.filesystem.getpathmatcher": [
        "java.nio.file.FileSystem.getPathMatcher(java.lang.String)"
    ],
    "javax.swing.listselectionmodel.setanchorselectionindex": [
        "javax.swing.ListSelectionModel.setAnchorSelectionIndex(int)"
    ],
    "javax.swing.plaf.multi.multilookandfeel.getdescription": [
        "javax.swing.plaf.multi.MultiLookAndFeel.getDescription()"
    ],
    "javax.swing.table.defaulttablecellrenderer.firepropertychange": [
        "javax.swing.table.DefaultTableCellRenderer.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
        "javax.swing.table.DefaultTableCellRenderer.firePropertyChange(java.lang.String,boolean,boolean)"
    ],
    "java.awt.component.getinputmethodlisteners": [
        "java.awt.Component.getInputMethodListeners()"
    ],
    "org.omg.corba.portable.inputstream.orb": [
        "org.omg.CORBA.portable.InputStream.orb()"
    ],
    "java.time.monthday.range": [
        "java.time.MonthDay.range(java.time.temporal.TemporalField)"
    ],
    "javax.swing.jslider.setmodel": [
        "javax.swing.JSlider.setModel(javax.swing.BoundedRangeModel)"
    ],
    "javax.swing.plaf.multi.multispinnerui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiSpinnerUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "java.time.year.parse": [
        "java.time.Year.parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)",
        "java.time.Year.parse(java.lang.CharSequence)"
    ],
    "java.net.urlconnection.getifmodifiedsince": [
        "java.net.URLConnection.getIfModifiedSince()"
    ],
    "java.awt.image.directcolormodel.tostring": [
        "java.awt.image.DirectColorModel.toString()"
    ],
    "javax.sql.rowset.serial.serialarray.hashcode": [
        "javax.sql.rowset.serial.SerialArray.hashCode()"
    ],
    "javax.swing.sortingfocustraversalpolicy.getimplicitdowncycletraversal": [
        "javax.swing.SortingFocusTraversalPolicy.getImplicitDownCycleTraversal()"
    ],
    "javax.swing.plaf.multi.multiscrollpaneui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiScrollPaneUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "java.util.propertypermission.hashcode": [
        "java.util.PropertyPermission.hashCode()"
    ],
    "javax.imageio.stream.memorycacheimageinputstream.close": [
        "javax.imageio.stream.MemoryCacheImageInputStream.close()"
    ],
    "java.awt.component.setvisible": [
        "java.awt.Component.setVisible(boolean)"
    ],
    "javax.swing.jframe.getgraphics": [
        "javax.swing.JFrame.getGraphics()"
    ],
    "javax.sql.rowset.spi.syncproviderexception.setsyncresolver": [
        "javax.sql.rowset.spi.SyncProviderException.setSyncResolver(javax.sql.rowset.spi.SyncResolver)"
    ],
    "java.util.logging.streamhandler.publish": [
        "java.util.logging.StreamHandler.publish(java.util.logging.LogRecord)"
    ],
    "javax.swing.plaf.multi.multitableheaderui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiTableHeaderUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "java.awt.dnd.draggesturerecognizer.resetrecognizer": [
        "java.awt.dnd.DragGestureRecognizer.resetRecognizer()"
    ],
    "java.lang.class.tostring": [
        "java.lang.Class.toString()"
    ],
    "org.w3c.dom.document.getdocumentelement": [
        "org.w3c.dom.Document.getDocumentElement()"
    ],
    "javax.sound.sampled.floatcontrol.tostring": [
        "javax.sound.sampled.FloatControl.toString()"
    ],
    "javax.swing.defaultlistmodel.ensurecapacity": [
        "javax.swing.DefaultListModel.ensureCapacity(int)"
    ],
    "javax.swing.plaf.basic.basictextfieldui.getbaselineresizebehavior": [
        "javax.swing.plaf.basic.BasicTextFieldUI.getBaselineResizeBehavior(javax.swing.JComponent)"
    ],
    "java.sql.databasemetadata.datadefinitionignoredintransactions": [
        "java.sql.DatabaseMetaData.dataDefinitionIgnoredInTransactions()"
    ],
    "javax.management.query.isinstanceof": [
        "javax.management.Query.isInstanceOf(javax.management.StringValueExp)"
    ],
    "java.nio.charset.malformedinputexception.getmessage": [
        "java.nio.charset.MalformedInputException.getMessage()"
    ],
    "javax.sql.rowsetmetadata.setcolumncount": [
        "javax.sql.RowSetMetaData.setColumnCount(int)"
    ],
    "javax.swing.imageicon.getimageloadstatus": [
        "javax.swing.ImageIcon.getImageLoadStatus()"
    ],
    "java.util.logging.logger.config": [
        "java.util.logging.Logger.config(java.util.function.Supplier<java.lang.String>)",
        "java.util.logging.Logger.config(java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintscrollpaneborder": [
        "javax.swing.plaf.synth.SynthPainter.paintScrollPaneBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.jinternalframe.setcontentpane": [
        "javax.swing.JInternalFrame.setContentPane(java.awt.Container)"
    ],
    "javax.swing.plaf.basic.basiccombopopup.createpropertychangelistener": [
        "javax.swing.plaf.basic.BasicComboPopup.createPropertyChangeListener()"
    ],
    "javax.swing.text.styleconstants.setitalic": [
        "javax.swing.text.StyleConstants.setItalic(javax.swing.text.MutableAttributeSet,boolean)"
    ],
    "javax.swing.plaf.basic.basicoptionpaneui.geticon": [
        "javax.swing.plaf.basic.BasicOptionPaneUI.getIcon()"
    ],
    "org.xml.sax.helpers.namespacesupport.popcontext": [
        "org.xml.sax.helpers.NamespaceSupport.popContext()"
    ],
    "java.lang.character.unicodescript.forname": [
        "java.lang.Character.UnicodeScript.forName(java.lang.String)"
    ],
    "java.time.offsettime.ofinstant": [
        "java.time.OffsetTime.ofInstant(java.time.Instant,java.time.ZoneId)"
    ],
    "javax.accessibility.accessiblevalue.getcurrentaccessiblevalue": [
        "javax.accessibility.AccessibleValue.getCurrentAccessibleValue()"
    ],
    "javax.swing.jpasswordfield.getaccessiblecontext": [
        "javax.swing.JPasswordField.getAccessibleContext()"
    ],
    "javax.swing.transferhandler.transfersupport.setdropaction": [
        "javax.swing.TransferHandler.TransferSupport.setDropAction(int)"
    ],
    "java.lang.strictmath.sin": [
        "java.lang.StrictMath.sin(double)"
    ],
    "javax.swing.plaf.multi.multipanelui.installui": [
        "javax.swing.plaf.multi.MultiPanelUI.installUI(javax.swing.JComponent)"
    ],
    "org.ietf.jgss.gssexception.getmajor": [
        "org.ietf.jgss.GSSException.getMajor()"
    ],
    "java.awt.image.indexcolormodel.getgreens": [
        "java.awt.image.IndexColorModel.getGreens(byte[])"
    ],
    "java.time.chrono.chronolocaldatetime.from": [
        "java.time.chrono.ChronoLocalDateTime.from(java.time.temporal.TemporalAccessor)"
    ],
    "javax.swing.renderer.setvalue": [
        "javax.swing.Renderer.setValue(java.lang.Object,boolean)"
    ],
    "java.time.localdatetime.getlong": [
        "java.time.LocalDateTime.getLong(java.time.temporal.TemporalField)"
    ],
    "java.util.zip.zipentry.getmethod": [
        "java.util.zip.ZipEntry.getMethod()"
    ],
    "java.awt.dialog.settitle": [
        "java.awt.Dialog.setTitle(java.lang.String)"
    ],
    "java.time.period.tototalmonths": [
        "java.time.Period.toTotalMonths()"
    ],
    "javax.management.relation.relationservice.isrelation": [
        "javax.management.relation.RelationService.isRelation(javax.management.ObjectName)"
    ],
    "javax.swing.jtable.getselectedrowcount": [
        "javax.swing.JTable.getSelectedRowCount()"
    ],
    "javax.management.openmbean.openmbeanoperationinfo.getreturnopentype": [
        "javax.management.openmbean.OpenMBeanOperationInfo.getReturnOpenType()"
    ],
    "java.text.decimalformatsymbols.getinstance": [
        "java.text.DecimalFormatSymbols.getInstance(java.util.Locale)",
        "java.text.DecimalFormatSymbols.getInstance()"
    ],
    "java.awt.image.colormodel.gettransfertype": [
        "java.awt.image.ColorModel.getTransferType()"
    ],
    "javax.swing.plaf.multi.multitabbedpaneui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiTabbedPaneUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "java.time.offsetdatetime.getminute": [
        "java.time.OffsetDateTime.getMinute()"
    ],
    "javax.management.loading.mlet.check": [
        "javax.management.loading.MLet.check(java.lang.String,java.net.URL,java.lang.String,javax.management.loading.MLetContent)"
    ],
    "java.util.hashtable.rehash": [
        "java.util.Hashtable.rehash()"
    ],
    "org.omg.dynamicany._dynenumstub.insert_typecode": [
        "org.omg.DynamicAny._DynEnumStub.insert_typecode(org.omg.CORBA.TypeCode)"
    ],
    "javax.accessibility.accessiblecomponent.removefocuslistener": [
        "javax.accessibility.AccessibleComponent.removeFocusListener(java.awt.event.FocusListener)"
    ],
    "javax.lang.model.util.elementkindvisitor7.visitvariableasresourcevariable": [
        "javax.lang.model.util.ElementKindVisitor7.visitVariableAsResourceVariable(javax.lang.model.element.VariableElement,javax.lang.model.util.ElementKindVisitor7)"
    ],
    "org.omg.corba.portable.inputstream.read_boolean": [
        "org.omg.CORBA.portable.InputStream.read_boolean()"
    ],
    "javax.crypto.keygenerator.init": [
        "javax.crypto.KeyGenerator.init(int,java.security.SecureRandom)",
        "javax.crypto.KeyGenerator.init(java.security.SecureRandom)",
        "javax.crypto.KeyGenerator.init(java.security.spec.AlgorithmParameterSpec)",
        "javax.crypto.KeyGenerator.init(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
        "javax.crypto.KeyGenerator.init(int)"
    ],
    "javax.swing.table.tablecolumnmodel.setcolumnmargin": [
        "javax.swing.table.TableColumnModel.setColumnMargin(int)"
    ],
    "org.omg.portableserver.poamanageroperations.deactivate": [
        "org.omg.PortableServer.POAManagerOperations.deactivate(boolean,boolean)"
    ],
    "javax.swing.spinnerdatemodel.setstart": [
        "javax.swing.SpinnerDateModel.setStart(java.lang.Comparable)"
    ],
    "java.awt.geom.rectangle2d.intersects": [
        "java.awt.geom.Rectangle2D.intersects(double,double,double,double)"
    ],
    "java.sql.sqltype.getvendortypenumber": [
        "java.sql.SQLType.getVendorTypeNumber()"
    ],
    "javax.swing.text.paragraphview.setlinespacing": [
        "javax.swing.text.ParagraphView.setLineSpacing(float)"
    ],
    "javax.net.ssl.sslsocketfactory.getdefaultciphersuites": [
        "javax.net.ssl.SSLSocketFactory.getDefaultCipherSuites()"
    ],
    "javax.print.attribute.textsyntax.equals": [
        "javax.print.attribute.TextSyntax.equals(java.lang.Object)"
    ],
    "javax.xml.validation.validator.validate": [
        "javax.xml.validation.Validator.validate(javax.xml.transform.Source)",
        "javax.xml.validation.Validator.validate(javax.xml.transform.Source,javax.xml.transform.Result)"
    ],
    "java.nio.channels.asynchronoussocketchannel.read": [
        "java.nio.channels.AsynchronousSocketChannel.read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,A,,? super A>)",
        "java.nio.channels.AsynchronousSocketChannel.read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,A,,? super A>)"
    ],
    "javax.swing.jformattedtextfield.abstractformatter.install": [
        "javax.swing.JFormattedTextField.AbstractFormatter.install(javax.swing.JFormattedTextField)"
    ],
    "javax.swing.border.titledborder.settitlefont": [
        "javax.swing.border.TitledBorder.setTitleFont(java.awt.Font)"
    ],
    "java.lang.string.length": [
        "java.lang.String.length()"
    ],
    "javax.swing.jtextpane.getstylededitorkit": [
        "javax.swing.JTextPane.getStyledEditorKit()"
    ],
    "java.util.concurrent.copyonwritearrayset.remove": [
        "java.util.concurrent.CopyOnWriteArraySet.remove(java.lang.Object)"
    ],
    "javax.swing.plaf.synth.synthtextareaui.uninstalldefaults": [
        "javax.swing.plaf.synth.SynthTextAreaUI.uninstallDefaults()"
    ],
    "javax.imageio.metadata.iiometadataformat.getattributelistmaxlength": [
        "javax.imageio.metadata.IIOMetadataFormat.getAttributeListMaxLength(java.lang.String,java.lang.String)"
    ],
    "java.awt.multiplegradientpaint.getcyclemethod": [
        "java.awt.MultipleGradientPaint.getCycleMethod()"
    ],
    "javax.swing.abstractbutton.setaction": [
        "javax.swing.AbstractButton.setAction(javax.swing.Action)"
    ],
    "javax.xml.stream.xmlstreamreader.getattributetype": [
        "javax.xml.stream.XMLStreamReader.getAttributeType(int)"
    ],
    "java.awt.filedialog.getmode": [
        "java.awt.FileDialog.getMode()"
    ],
    "java.text.dateformatsymbols.getampmstrings": [
        "java.text.DateFormatSymbols.getAmPmStrings()"
    ],
    "java.io.randomaccessfile.readunsignedbyte": [
        "java.io.RandomAccessFile.readUnsignedByte()"
    ],
    "java.lang.enum.hashcode": [
        "java.lang.Enum.hashCode()"
    ],
    "javax.swing.defaultrowsorter.modelwrapper.getrowcount": [
        "javax.swing.DefaultRowSorter.ModelWrapper.getRowCount()"
    ],
    "org.omg.dynamicany._dynsequencestub.get_reference": [
        "org.omg.DynamicAny._DynSequenceStub.get_reference()"
    ],
    "javax.management.openmbean.openmbeanparameterinfo.hashcode": [
        "javax.management.openmbean.OpenMBeanParameterInfo.hashCode()"
    ],
    "javax.xml.ws.spi.http.httphandler.handle": [
        "javax.xml.ws.spi.http.HttpHandler.handle(javax.xml.ws.spi.http.HttpExchange)"
    ],
    "java.nio.file.spi.filesystemprovider.createsymboliclink": [
        "java.nio.file.spi.FileSystemProvider.createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>)",
        "java.nio.file.spi.FileSystemProvider.createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>...)"
    ],
    "javax.swing.jtable.setcolumnselectioninterval": [
        "javax.swing.JTable.setColumnSelectionInterval(int,int)"
    ],
    "javax.swing.tree.variableheightlayoutcache.setrowheight": [
        "javax.swing.tree.VariableHeightLayoutCache.setRowHeight(int)"
    ],
    "java.applet.applet.getaudioclip": [
        "java.applet.Applet.getAudioClip(java.net.URL,java.lang.String)",
        "java.applet.Applet.getAudioClip(java.net.URL)"
    ],
    "javax.swing.jinternalframe.isclosed": [
        "javax.swing.JInternalFrame.isClosed()"
    ],
    "javax.swing.jtree.getscrollsonexpand": [
        "javax.swing.JTree.getScrollsOnExpand()"
    ],
    "javax.xml.parsers.documentbuilderfactory.setexpandentityreferences": [
        "javax.xml.parsers.DocumentBuilderFactory.setExpandEntityReferences(boolean)"
    ],
    "java.lang.package.iscompatiblewith": [
        "java.lang.Package.isCompatibleWith(java.lang.String)"
    ],
    "org.omg.dynamicany._dynvaluestub.destroy": [
        "org.omg.DynamicAny._DynValueStub.destroy()"
    ],
    "javax.swing.table.tablecolumnmodel.addcolumn": [
        "javax.swing.table.TableColumnModel.addColumn(javax.swing.table.TableColumn)"
    ],
    "javax.net.ssl.keymanagerfactory.getinstance": [
        "javax.net.ssl.KeyManagerFactory.getInstance(java.lang.String,java.lang.String)",
        "javax.net.ssl.KeyManagerFactory.getInstance(java.lang.String,java.security.Provider)",
        "javax.net.ssl.KeyManagerFactory.getInstance(java.lang.String)"
    ],
    "java.nio.intbuffer.compareto": [
        "java.nio.IntBuffer.compareTo(java.nio.IntBuffer)"
    ],
    "java.security.spec.rsaprivatecrtkeyspec.getprimeq": [
        "java.security.spec.RSAPrivateCrtKeySpec.getPrimeQ()"
    ],
    "javax.imageio.imageio.write": [
        "javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)",
        "javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.OutputStream)",
        "javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,javax.imageio.stream.ImageOutputStream)"
    ],
    "org.omg.dynamicany._dynarraystub.insert_short": [
        "org.omg.DynamicAny._DynArrayStub.insert_short(short)"
    ],
    "javax.swing.text.abstractdocument.fireremoveupdate": [
        "javax.swing.text.AbstractDocument.fireRemoveUpdate(javax.swing.event.DocumentEvent)"
    ],
    "javax.swing.plaf.basic.basictreeui.starteditingatpath": [
        "javax.swing.plaf.basic.BasicTreeUI.startEditingAtPath(javax.swing.JTree,javax.swing.tree.TreePath)"
    ],
    "javax.print.attribute.standard.fidelity.getcategory": [
        "javax.print.attribute.standard.Fidelity.getCategory()"
    ],
    "java.util.treemap.foreach": [
        "java.util.TreeMap.forEach(java.util.function.BiConsumer<? super,? super V>)"
    ],
    "java.nio.mappedbytebuffer.load": [
        "java.nio.MappedByteBuffer.load()"
    ],
    "java.awt.dialog.setshape": [
        "java.awt.Dialog.setShape(java.awt.Shape)"
    ],
    "javax.xml.soap.soapfault.getfaultcode": [
        "javax.xml.soap.SOAPFault.getFaultCode()"
    ],
    "javax.xml.stream.xmlinputfactory.createxmleventreader": [
        "javax.xml.stream.XMLInputFactory.createXMLEventReader(javax.xml.stream.XMLStreamReader)",
        "javax.xml.stream.XMLInputFactory.createXMLEventReader(java.lang.String,java.io.InputStream)",
        "javax.xml.stream.XMLInputFactory.createXMLEventReader(java.io.InputStream,java.lang.String)",
        "javax.xml.stream.XMLInputFactory.createXMLEventReader(java.lang.String,java.io.Reader)",
        "javax.xml.stream.XMLInputFactory.createXMLEventReader(java.io.Reader)",
        "javax.xml.stream.XMLInputFactory.createXMLEventReader(javax.xml.transform.Source)",
        "javax.xml.stream.XMLInputFactory.createXMLEventReader(java.io.InputStream)"
    ],
    "java.text.bidi.getlevelat": [
        "java.text.Bidi.getLevelAt(int)"
    ],
    "java.math.bigdecimal.intvalueexact": [
        "java.math.BigDecimal.intValueExact()"
    ],
    "org.omg.dynamicany._dynunionstub.get_double": [
        "org.omg.DynamicAny._DynUnionStub.get_double()"
    ],
    "java.time.temporal.valuerange.getlargestminimum": [
        "java.time.temporal.ValueRange.getLargestMinimum()"
    ],
    "java.lang.management.runtimemxbean.getuptime": [
        "java.lang.management.RuntimeMXBean.getUptime()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintinternalframetitlepanebackground": [
        "javax.swing.plaf.synth.SynthPainter.paintInternalFrameTitlePaneBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.imageio.metadata.iiometadata.getstandarddocumentnode": [
        "javax.imageio.metadata.IIOMetadata.getStandardDocumentNode()"
    ],
    "org.omg.dynamicany.dynanyoperations.get_longlong": [
        "org.omg.DynamicAny.DynAnyOperations.get_longlong()"
    ],
    "java.awt.image.lookupop.getrenderinghints": [
        "java.awt.image.LookupOp.getRenderingHints()"
    ],
    "java.net.httpcookie.setsecure": [
        "java.net.HttpCookie.setSecure(boolean)"
    ],
    "java.util.stream.streamsupport.doublestream": [
        "java.util.stream.StreamSupport.doubleStream(java.util.Spliterator.OfDouble,boolean)",
        "java.util.stream.StreamSupport.doubleStream(java.util.function.Supplier<? extends java.util.Spliterator.OfDouble>,int,boolean)"
    ],
    "javax.swing.plaf.synth.synthbuttonui.createui": [
        "javax.swing.plaf.synth.SynthButtonUI.createUI(javax.swing.JComponent)"
    ],
    "java.text.dateformatsymbols.getinstance": [
        "java.text.DateFormatSymbols.getInstance()",
        "java.text.DateFormatSymbols.getInstance(java.util.Locale)"
    ],
    "java.awt.color.darker": [
        "java.awt.Color.darker()"
    ],
    "java.awt.geom.quadcurve2d.double.gety1": [
        "java.awt.geom.QuadCurve2D.Double.getY1()"
    ],
    "java.text.attributedcharacteriterator.attribute.readresolve": [
        "java.text.AttributedCharacterIterator.Attribute.readResolve()"
    ],
    "javax.swing.border.border.getborderinsets": [
        "javax.swing.border.Border.getBorderInsets(java.awt.Component)"
    ],
    "java.awt.datatransfer.stringselection.isdataflavorsupported": [
        "java.awt.datatransfer.StringSelection.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)"
    ],
    "java.util.arrays.stream": [
        "java.util.Arrays.stream(int[],int,int)",
        "java.util.Arrays.stream(long[])",
        "java.util.Arrays.stream(T[],int,int)",
        "java.util.Arrays.stream(double[],int,int)",
        "java.util.Arrays.stream(int[])",
        "java.util.Arrays.stream(long[],int,int)",
        "java.util.Arrays.stream(T[])",
        "java.util.Arrays.stream(double[])"
    ],
    "java.awt.choice.remove": [
        "java.awt.Choice.remove(int)",
        "java.awt.Choice.remove(java.lang.String)"
    ],
    "java.util.locale.getiso3country": [
        "java.util.Locale.getISO3Country()"
    ],
    "java.lang.reflect.method.gettypeparameters": [
        "java.lang.reflect.Method.getTypeParameters()"
    ],
    "javax.swing.plaf.synth.synthtableui.installdefaults": [
        "javax.swing.plaf.synth.SynthTableUI.installDefaults()"
    ],
    "java.util.logging.logmanager.readconfiguration": [
        "java.util.logging.LogManager.readConfiguration()",
        "java.util.logging.LogManager.readConfiguration(java.io.InputStream)"
    ],
    "javax.swing.text.keymap.addactionforkeystroke": [
        "javax.swing.text.Keymap.addActionForKeyStroke(javax.swing.KeyStroke,javax.swing.Action)"
    ],
    "java.awt.image.renderedimage.getdata": [
        "java.awt.image.RenderedImage.getData(java.awt.Rectangle)"
    ],
    "java.util.formatter.flush": [
        "java.util.Formatter.flush()"
    ],
    "javax.accessibility.accessibleicon.getaccessibleicondescription": [
        "javax.accessibility.AccessibleIcon.getAccessibleIconDescription()"
    ],
    "java.awt.toolkit.createcheckbox": [
        "java.awt.Toolkit.createCheckbox(java.awt.Checkbox)"
    ],
    "javax.print.attribute.standard.numberofinterveningjobs.getcategory": [
        "javax.print.attribute.standard.NumberOfInterveningJobs.getCategory()"
    ],
    "java.security.cert.x509certificate.getsubjectuniqueid": [
        "java.security.cert.X509Certificate.getSubjectUniqueID()"
    ],
    "java.sql.databasemetadata.doesmaxrowsizeincludeblobs": [
        "java.sql.DatabaseMetaData.doesMaxRowSizeIncludeBlobs()"
    ],
    "java.lang.long.hashcode": [
        "java.lang.Long.hashCode(long)",
        "java.lang.Long.hashCode()"
    ],
    "javax.naming.ldap.controlfactory.getcontrolinstance": [
        "javax.naming.ldap.ControlFactory.getControlInstance(javax.naming.ldap.Control)",
        "javax.naming.ldap.ControlFactory.getControlInstance(javax.naming.ldap.Control,javax.naming.Context,,?>)"
    ],
    "javax.naming.namingexception.appendremainingcomponent": [
        "javax.naming.NamingException.appendRemainingComponent(java.lang.String)"
    ],
    "java.security.cert.x509certificate.getkeyusage": [
        "java.security.cert.X509Certificate.getKeyUsage()"
    ],
    "javax.swing.plaf.componentui.paint": [
        "javax.swing.plaf.ComponentUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "org.omg.dynamicany._dynanystub.insert_char": [
        "org.omg.DynamicAny._DynAnyStub.insert_char(char)"
    ],
    "javax.xml.ws.spi.http.httpexchange.getrequestheader": [
        "javax.xml.ws.spi.http.HttpExchange.getRequestHeader(java.lang.String)"
    ],
    "java.sql.databasemetadata.geturl": [
        "java.sql.DatabaseMetaData.getURL()"
    ],
    "javax.naming.ldap.starttlsresponse.getid": [
        "javax.naming.ldap.StartTlsResponse.getID()"
    ],
    "javax.xml.validation.schemafactory.setfeature": [
        "javax.xml.validation.SchemaFactory.setFeature(java.lang.String,boolean)"
    ],
    "org.omg.corba.portable.streamable._type": [
        "org.omg.CORBA.portable.Streamable._type()"
    ],
    "java.time.localdatetime.getnano": [
        "java.time.LocalDateTime.getNano()"
    ],
    "java.awt.image.volatileimage.getsource": [
        "java.awt.image.VolatileImage.getSource()"
    ],
    "java.awt.print.printerjob.getusername": [
        "java.awt.print.PrinterJob.getUserName()"
    ],
    "javax.xml.stream.xmlstreamreader.next": [
        "javax.xml.stream.XMLStreamReader.next()"
    ],
    "java.util.concurrent.atomic.atomicinteger.compareandset": [
        "java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int)"
    ],
    "javax.tools.documentationtool.getstandardfilemanager": [
        "javax.tools.DocumentationTool.getStandardFileManager(javax.tools.DiagnosticListener<? super javax.tools.JavaFileObject>,java.util.Locale,java.nio.charset.Charset)"
    ],
    "java.util.concurrent.timeunit.timedjoin": [
        "java.util.concurrent.TimeUnit.timedJoin(java.lang.Thread,long)"
    ],
    "java.nio.charset.charsetdecoder.implflush": [
        "java.nio.charset.CharsetDecoder.implFlush(java.nio.CharBuffer)"
    ],
    "org.w3c.dom.text.replacewholetext": [
        "org.w3c.dom.Text.replaceWholeText(java.lang.String)"
    ],
    "java.io.randomaccessfile.readfloat": [
        "java.io.RandomAccessFile.readFloat()"
    ],
    "java.util.logging.logrecord.setresourcebundle": [
        "java.util.logging.LogRecord.setResourceBundle(java.util.ResourceBundle)"
    ],
    "org.xml.sax.ext.locator2impl.setencoding": [
        "org.xml.sax.ext.Locator2Impl.setEncoding(java.lang.String)"
    ],
    "java.time.chrono.chronology.dateepochday": [
        "java.time.chrono.Chronology.dateEpochDay(long)"
    ],
    "java.lang.management.threadmxbean.setthreadcontentionmonitoringenabled": [
        "java.lang.management.ThreadMXBean.setThreadContentionMonitoringEnabled(boolean)"
    ],
    "java.lang.compiler.compileclasses": [
        "java.lang.Compiler.compileClasses(java.lang.String)"
    ],
    "java.awt.image.colormodel.getalpharaster": [
        "java.awt.image.ColorModel.getAlphaRaster(java.awt.image.WritableRaster)"
    ],
    "java.nio.channels.membershipkey.sourceaddress": [
        "java.nio.channels.MembershipKey.sourceAddress()"
    ],
    "java.awt.eventqueue.dispatchevent": [
        "java.awt.EventQueue.dispatchEvent(java.awt.AWTEvent)"
    ],
    "java.util.zip.deflater.setlevel": [
        "java.util.zip.Deflater.setLevel(int)"
    ],
    "org.omg.dynamicany._dynvaluestub.insert_reference": [
        "org.omg.DynamicAny._DynValueStub.insert_reference(org.omg.CORBA.Object)"
    ],
    "javax.xml.bind.annotation.xmlnsform.valueof": [
        "javax.xml.bind.annotation.XmlNsForm.valueOf(java.lang.String)"
    ],
    "javax.swing.table.tablemodel.getvalueat": [
        "javax.swing.table.TableModel.getValueAt(int,int)"
    ],
    "javax.naming.directory.basicattributes.tostring": [
        "javax.naming.directory.BasicAttributes.toString()"
    ],
    "javax.naming.directory.attribute.add": [
        "javax.naming.directory.Attribute.add(java.lang.Object)",
        "javax.naming.directory.Attribute.add(int,java.lang.Object)"
    ],
    "javax.swing.table.defaulttablecolumnmodel.getcolumncount": [
        "javax.swing.table.DefaultTableColumnModel.getColumnCount()"
    ],
    "javax.management.mbeanserverconnection.querynames": [
        "javax.management.MBeanServerConnection.queryNames(javax.management.ObjectName,javax.management.QueryExp)"
    ],
    "java.time.localdate.plusyears": [
        "java.time.LocalDate.plusYears(long)"
    ],
    "javax.management.openmbean.openmbeanoperationinfo.equals": [
        "javax.management.openmbean.OpenMBeanOperationInfo.equals(java.lang.Object)"
    ],
    "java.util.concurrent.completionstage.thenapply": [
        "java.util.concurrent.CompletionStage.thenApply(java.util.function.Function<? super,? extends U>)"
    ],
    "java.text.decimalformat.setdecimalformatsymbols": [
        "java.text.DecimalFormat.setDecimalFormatSymbols(java.text.DecimalFormatSymbols)"
    ],
    "java.text.decimalformat.getcurrency": [
        "java.text.DecimalFormat.getCurrency()"
    ],
    "org.xml.sax.helpers.attributesimpl.setvalue": [
        "org.xml.sax.helpers.AttributesImpl.setValue(int,java.lang.String)"
    ],
    "org.omg.dynamicany._dynunionstub.get_longlong": [
        "org.omg.DynamicAny._DynUnionStub.get_longlong()"
    ],
    "java.sql.date.settime": [
        "java.sql.Date.setTime(long)"
    ],
    "java.awt.container.paint": [
        "java.awt.Container.paint(java.awt.Graphics)"
    ],
    "javax.swing.progressmonitor.getmillistopopup": [
        "javax.swing.ProgressMonitor.getMillisToPopup()"
    ],
    "java.text.normalizer.normalize": [
        "java.text.Normalizer.normalize(java.lang.CharSequence,java.text.Normalizer.Form)"
    ],
    "javax.swing.plaf.synth.synthtextareaui.propertychange": [
        "javax.swing.plaf.synth.SynthTextAreaUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "javax.swing.swingworker.publish": [
        "javax.swing.SwingWorker.publish(javax.swing.SwingWorker...)"
    ],
    "javax.swing.plaf.synth.synthsliderui.ypositionforvalue": [
        "javax.swing.plaf.synth.SynthSliderUI.yPositionForValue(int,int,int)"
    ],
    "java.awt.container.getfocustraversalpolicy": [
        "java.awt.Container.getFocusTraversalPolicy()"
    ],
    "java.time.zoneddatetime.withdayofyear": [
        "java.time.ZonedDateTime.withDayOfYear(int)"
    ],
    "javax.swing.jinternalframe.getjmenubar": [
        "javax.swing.JInternalFrame.getJMenuBar()"
    ],
    "org.omg.corba.portable.inputstream.read_short": [
        "org.omg.CORBA.portable.InputStream.read_short()"
    ],
    "javax.management.openmbean.tabulardatasupport.putall": [
        "javax.management.openmbean.TabularDataSupport.putAll(javax.management.openmbean.CompositeData[])",
        "javax.management.openmbean.TabularDataSupport.putAll(,?>)"
    ],
    "javax.xml.datatype.duration.getsign": [
        "javax.xml.datatype.Duration.getSign()"
    ],
    "javax.crypto.interfaces.dhkey.getparams": [
        "javax.crypto.interfaces.DHKey.getParams()"
    ],
    "org.omg.stub.java.rmi._remote_stub._ids": [
        "org.omg.stub.java.rmi._Remote_Stub._ids()"
    ],
    "java.awt.graphicsdevice.windowtranslucency.valueof": [
        "java.awt.GraphicsDevice.WindowTranslucency.valueOf(java.lang.String)"
    ],
    "java.util.concurrent.threadpoolexecutor.shutdown": [
        "java.util.concurrent.ThreadPoolExecutor.shutdown()"
    ],
    "java.awt.menubar.getshortcutmenuitem": [
        "java.awt.MenuBar.getShortcutMenuItem(java.awt.MenuShortcut)"
    ],
    "java.time.localdate.now": [
        "java.time.LocalDate.now()",
        "java.time.LocalDate.now(java.time.Clock)",
        "java.time.LocalDate.now(java.time.ZoneId)"
    ],
    "java.util.concurrent.atomic.atomicintegerfieldupdater.getanddecrement": [
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndDecrement(java.util.concurrent.atomic.AtomicIntegerFieldUpdater)",
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndDecrement(T)"
    ],
    "javax.xml.datatype.duration.normalizewith": [
        "javax.xml.datatype.Duration.normalizeWith(java.util.Calendar)"
    ],
    "javax.swing.popup.hide": [
        "javax.swing.Popup.hide()"
    ],
    "javax.xml.datatype.duration.getdays": [
        "javax.xml.datatype.Duration.getDays()"
    ],
    "java.util.enummap.equals": [
        "java.util.EnumMap.equals(java.lang.Object)"
    ],
    "java.awt.print.printerioexception.getioexception": [
        "java.awt.print.PrinterIOException.getIOException()"
    ],
    "java.util.random.nextfloat": [
        "java.util.Random.nextFloat()"
    ],
    "org.xml.sax.helpers.parseradapter.geterrorhandler": [
        "org.xml.sax.helpers.ParserAdapter.getErrorHandler()"
    ],
    "javax.imageio.imagewriter.preparereplacepixels": [
        "javax.imageio.ImageWriter.prepareReplacePixels(int,java.awt.Rectangle)"
    ],
    "javax.swing.plaf.multi.multimenuitemui.update": [
        "javax.swing.plaf.multi.MultiMenuItemUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.util.stream.intstream.maptodouble": [
        "java.util.stream.IntStream.mapToDouble(java.util.function.IntToDoubleFunction)"
    ],
    "javax.swing.jmenuitem.firemenudragmouseentered": [
        "javax.swing.JMenuItem.fireMenuDragMouseEntered(javax.swing.event.MenuDragMouseEvent)"
    ],
    "javax.activation.filedatasource.getfile": [
        "javax.activation.FileDataSource.getFile()"
    ],
    "javax.swing.jfilechooser.getapprovebuttontooltiptext": [
        "javax.swing.JFileChooser.getApproveButtonToolTipText()"
    ],
    "javax.swing.jsplitpane.remove": [
        "javax.swing.JSplitPane.remove(java.awt.Component)",
        "javax.swing.JSplitPane.remove(int)"
    ],
    "org.omg.cosnaming._namingcontextextstub.rebind_context": [
        "org.omg.CosNaming._NamingContextExtStub.rebind_context(org.omg.CosNaming.NameComponent[],org.omg.CosNaming.NamingContext)"
    ],
    "java.util.concurrent.locks.abstractqueuedlongsynchronizer.compareandsetstate": [
        "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.compareAndSetState(long,long)"
    ],
    "javax.xml.stream.xmlstreamreader.getcharacterencodingscheme": [
        "javax.xml.stream.XMLStreamReader.getCharacterEncodingScheme()"
    ],
    "org.omg.cosnaming._namingcontextextstub.bind": [
        "org.omg.CosNaming._NamingContextExtStub.bind(org.omg.CosNaming.NameComponent[],org.omg.CORBA.Object)"
    ],
    "java.time.offsettime.getlong": [
        "java.time.OffsetTime.getLong(java.time.temporal.TemporalField)"
    ],
    "javax.rmi.corba.portableremoteobjectdelegate.narrow": [
        "javax.rmi.CORBA.PortableRemoteObjectDelegate.narrow(java.lang.Object,java.lang.Class)"
    ],
    "javax.swing.plaf.multi.multipanelui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiPanelUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "java.sql.databasemetadata.getdefaulttransactionisolation": [
        "java.sql.DatabaseMetaData.getDefaultTransactionIsolation()"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.setschemaname": [
        "javax.sql.rowset.RowSetMetaDataImpl.setSchemaName(int,java.lang.String)"
    ],
    "javax.xml.crypto.xmlcryptocontext.get": [
        "javax.xml.crypto.XMLCryptoContext.get(java.lang.Object)"
    ],
    "javax.swing.text.attributeset.getattributenames": [
        "javax.swing.text.AttributeSet.getAttributeNames()"
    ],
    "java.awt.datatransfer.dataflavor.getrepresentationclass": [
        "java.awt.datatransfer.DataFlavor.getRepresentationClass()"
    ],
    "javax.security.sasl.saslclient.wrap": [
        "javax.security.sasl.SaslClient.wrap(byte[],int,int)"
    ],
    "java.security.algorithmparameters.getencoded": [
        "java.security.AlgorithmParameters.getEncoded(java.lang.String)",
        "java.security.AlgorithmParameters.getEncoded()"
    ],
    "java.awt.image.multipixelpackedsamplemodel.getpixel": [
        "java.awt.image.MultiPixelPackedSampleModel.getPixel(int,int,int[],java.awt.image.DataBuffer)"
    ],
    "javax.net.ssl.x509keymanager.getcertificatechain": [
        "javax.net.ssl.X509KeyManager.getCertificateChain(java.lang.String)"
    ],
    "java.awt.dnd.droptargetdropevent.getdropaction": [
        "java.awt.dnd.DropTargetDropEvent.getDropAction()"
    ],
    "javax.swing.plaf.multi.multirootpaneui.installui": [
        "javax.swing.plaf.multi.MultiRootPaneUI.installUI(javax.swing.JComponent)"
    ],
    "java.time.format.signstyle.values": [
        "java.time.format.SignStyle.values()"
    ],
    "org.omg.corba.request.set_return_type": [
        "org.omg.CORBA.Request.set_return_type(org.omg.CORBA.TypeCode)"
    ],
    "javax.swing.plaf.componentui.update": [
        "javax.swing.plaf.ComponentUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.nio.file.spi.filesystemprovider.getpath": [
        "java.nio.file.spi.FileSystemProvider.getPath(java.net.URI)"
    ],
    "java.awt.font.numericshaper.getshaper": [
        "java.awt.font.NumericShaper.getShaper(java.awt.font.NumericShaper.Range)",
        "java.awt.font.NumericShaper.getShaper(int)"
    ],
    "java.util.locale.filtertags": [
        "java.util.Locale.filterTags(java.util.List<java.util.Locale.LanguageRange>,java.util.Collection<java.lang.String>)",
        "java.util.Locale.filterTags(java.util.List<java.util.Locale.LanguageRange>,java.util.Collection<java.lang.String>,java.util.Locale.FilteringMode)"
    ],
    "java.util.zip.checkedinputstream.read": [
        "java.util.zip.CheckedInputStream.read(byte[],int,int)",
        "java.util.zip.CheckedInputStream.read()"
    ],
    "java.sql.resultset.isclosed": [
        "java.sql.ResultSet.isClosed()"
    ],
    "java.time.localdatetime.tolocaltime": [
        "java.time.LocalDateTime.toLocalTime()"
    ],
    "org.omg.dynamicany._dynstructstub.insert_boolean": [
        "org.omg.DynamicAny._DynStructStub.insert_boolean(boolean)"
    ],
    "java.sql.timestamp.compareto": [
        "java.sql.Timestamp.compareTo(java.sql.Timestamp)",
        "java.sql.Timestamp.compareTo(java.util.Date)"
    ],
    "java.text.decimalformat.getminimumfractiondigits": [
        "java.text.DecimalFormat.getMinimumFractionDigits()"
    ],
    "javax.xml.crypto.xmlcryptocontext.setkeyselector": [
        "javax.xml.crypto.XMLCryptoContext.setKeySelector(javax.xml.crypto.KeySelector)"
    ],
    "java.awt.textcomponent.enableinputmethods": [
        "java.awt.TextComponent.enableInputMethods(boolean)"
    ],
    "javax.naming.compositename.addall": [
        "javax.naming.CompositeName.addAll(javax.naming.Name)",
        "javax.naming.CompositeName.addAll(int,javax.naming.Name)"
    ],
    "java.net.inet4address.getaddress": [
        "java.net.Inet4Address.getAddress()"
    ],
    "java.time.yearmonth.minus": [
        "java.time.YearMonth.minus(long,java.time.temporal.TemporalUnit)",
        "java.time.YearMonth.minus(java.time.temporal.TemporalAmount)"
    ],
    "javax.swing.table.jtableheader.getdraggeddistance": [
        "javax.swing.table.JTableHeader.getDraggedDistance()"
    ],
    "javax.crypto.mac.getalgorithm": [
        "javax.crypto.Mac.getAlgorithm()"
    ],
    "java.beans.encoder.setpersistencedelegate": [
        "java.beans.Encoder.setPersistenceDelegate(java.lang.Class<?>,java.beans.PersistenceDelegate)"
    ],
    "java.beans.simplebeaninfo.getpropertydescriptors": [
        "java.beans.SimpleBeanInfo.getPropertyDescriptors()"
    ],
    "javax.swing.jmenuitem.getaccessiblecontext": [
        "javax.swing.JMenuItem.getAccessibleContext()"
    ],
    "javax.naming.binding.getobject": [
        "javax.naming.Binding.getObject()"
    ],
    "javax.xml.stream.events.dtd.getprocesseddtd": [
        "javax.xml.stream.events.DTD.getProcessedDTD()"
    ],
    "org.omg.corba.datainputstream.read_octet_array": [
        "org.omg.CORBA.DataInputStream.read_octet_array(org.omg.CORBA.OctetSeqHolder,int,int)"
    ],
    "javax.management.objectname.apply": [
        "javax.management.ObjectName.apply(javax.management.ObjectName)"
    ],
    "javax.swing.jtree.getuiclassid": [
        "javax.swing.JTree.getUIClassID()"
    ],
    "javax.swing.text.defaulteditorkit.write": [
        "javax.swing.text.DefaultEditorKit.write(java.io.OutputStream,javax.swing.text.Document,int,int)"
    ],
    "java.rmi.server.remoteobjectinvocationhandler.invoke": [
        "java.rmi.server.RemoteObjectInvocationHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])"
    ],
    "java.util.concurrent.atomic.atomicstampedreference.getreference": [
        "java.util.concurrent.atomic.AtomicStampedReference.getReference()"
    ],
    "org.omg.corba.request.operation": [
        "org.omg.CORBA.Request.operation()"
    ],
    "javax.swing.text.jtextcomponent.firecaretupdate": [
        "javax.swing.text.JTextComponent.fireCaretUpdate(javax.swing.event.CaretEvent)"
    ],
    "javax.xml.transform.transformer.setoutputproperty": [
        "javax.xml.transform.Transformer.setOutputProperty(java.lang.String,java.lang.String)"
    ],
    "org.omg.portableinterceptor.serverrequestinfooperations.adapter_id": [
        "org.omg.PortableInterceptor.ServerRequestInfoOperations.adapter_id()"
    ],
    "javax.swing.progressmonitor.setminimum": [
        "javax.swing.ProgressMonitor.setMinimum(int)"
    ],
    "java.security.cert.pkixparameters.getsigprovider": [
        "java.security.cert.PKIXParameters.getSigProvider()"
    ],
    "javax.script.scriptcontext.seterrorwriter": [
        "javax.script.ScriptContext.setErrorWriter(java.io.Writer)"
    ],
    "javax.swing.plaf.multi.multitextui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiTextUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "java.util.concurrent.locks.abstractqueuedlongsynchronizer.getqueuedthreads": [
        "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getQueuedThreads()"
    ],
    "javax.imageio.imagereader.processthumbnailprogress": [
        "javax.imageio.ImageReader.processThumbnailProgress(float)"
    ],
    "javax.swing.plaf.basic.basicarrowbutton.getmaximumsize": [
        "javax.swing.plaf.basic.BasicArrowButton.getMaximumSize()"
    ],
    "java.beans.beancontext.beancontextservicessupport.getservice": [
        "java.beans.beancontext.BeanContextServicesSupport.getService(java.beans.beancontext.BeanContextChild,java.lang.Object,java.lang.Class,java.lang.Object,java.beans.beancontext.BeanContextServiceRevokedListener)"
    ],
    "javax.xml.stream.xmlstreamreader.isattributespecified": [
        "javax.xml.stream.XMLStreamReader.isAttributeSpecified(int)"
    ],
    "javax.swing.plaf.synth.synthtreeui.getcontext": [
        "javax.swing.plaf.synth.SynthTreeUI.getContext(javax.swing.JComponent)"
    ],
    "javax.xml.ws.webservicefeature.getid": [
        "javax.xml.ws.WebServiceFeature.getID()"
    ],
    "java.util.concurrent.concurrentmap.foreach": [
        "java.util.concurrent.ConcurrentMap.forEach(java.util.function.BiConsumer<? super,? super V>)",
        "java.util.concurrent.ConcurrentMap.forEach(java.util.function.BiConsumer<? super,? super java.util.concurrent.ConcurrentMap>)"
    ],
    "java.nio.charset.charsetencoder.malformedinputaction": [
        "java.nio.charset.CharsetEncoder.malformedInputAction()"
    ],
    "javax.swing.jtable.removenotify": [
        "javax.swing.JTable.removeNotify()"
    ],
    "javax.sound.sampled.audiosystem.isconversionsupported": [
        "javax.sound.sampled.AudioSystem.isConversionSupported(javax.sound.sampled.AudioFormat,javax.sound.sampled.AudioFormat)",
        "javax.sound.sampled.AudioSystem.isConversionSupported(javax.sound.sampled.AudioFormat.Encoding,javax.sound.sampled.AudioFormat)"
    ],
    "javax.swing.tooltipmanager.setenabled": [
        "javax.swing.ToolTipManager.setEnabled(boolean)"
    ],
    "javax.imageio.plugins.jpeg.jpeghuffmantable.tostring": [
        "javax.imageio.plugins.jpeg.JPEGHuffmanTable.toString()"
    ],
    "javax.swing.jtoolbar.getcomponentindex": [
        "javax.swing.JToolBar.getComponentIndex(java.awt.Component)"
    ],
    "java.util.concurrent.concurrentskiplistmap.polllastentry": [
        "java.util.concurrent.ConcurrentSkipListMap.pollLastEntry()"
    ],
    "javax.swing.jlabel.imageupdate": [
        "javax.swing.JLabel.imageUpdate(java.awt.Image,int,int,int,int,int)"
    ],
    "java.nio.channels.datagramchannel.read": [
        "java.nio.channels.DatagramChannel.read(java.nio.ByteBuffer[])",
        "java.nio.channels.DatagramChannel.read(java.nio.ByteBuffer,int,int)",
        "java.nio.channels.DatagramChannel.read(java.nio.ByteBuffer[],int,int)",
        "java.nio.channels.DatagramChannel.read(java.nio.ByteBuffer)"
    ],
    "java.nio.channels.filelock.isshared": [
        "java.nio.channels.FileLock.isShared()"
    ],
    "javax.swing.text.boxview.getwidth": [
        "javax.swing.text.BoxView.getWidth()"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.setfeature": [
        "org.xml.sax.helpers.XMLFilterImpl.setFeature(java.lang.String,boolean)"
    ],
    "javax.swing.plaf.multi.multitoolbarui.createui": [
        "javax.swing.plaf.multi.MultiToolBarUI.createUI(javax.swing.JComponent)"
    ],
    "java.util.concurrent.atomic.atomicinteger.getandaccumulate": [
        "java.util.concurrent.atomic.AtomicInteger.getAndAccumulate(int,java.util.function.IntBinaryOperator)"
    ],
    "java.awt.graphicsconfiguration.createcompatiblevolatileimage": [
        "java.awt.GraphicsConfiguration.createCompatibleVolatileImage(int,int,int)",
        "java.awt.GraphicsConfiguration.createCompatibleVolatileImage(int,int,java.awt.ImageCapabilities)",
        "java.awt.GraphicsConfiguration.createCompatibleVolatileImage(int,int,java.awt.ImageCapabilities,int)",
        "java.awt.GraphicsConfiguration.createCompatibleVolatileImage(int,int)"
    ],
    "javax.swing.jmenuitem.updateui": [
        "javax.swing.JMenuItem.updateUI()"
    ],
    "javax.swing.text.defaultformatterfactory.setdefaultformatter": [
        "javax.swing.text.DefaultFormatterFactory.setDefaultFormatter(javax.swing.JFormattedTextField.AbstractFormatter)"
    ],
    "javax.management.mbeanpermission.implies": [
        "javax.management.MBeanPermission.implies(java.security.Permission)"
    ],
    "javax.xml.ws.handler.soap.soapmessagecontext.getheaders": [
        "javax.xml.ws.handler.soap.SOAPMessageContext.getHeaders(javax.xml.namespace.QName,javax.xml.bind.JAXBContext,boolean)"
    ],
    "org.xml.sax.contenthandler.startprefixmapping": [
        "org.xml.sax.ContentHandler.startPrefixMapping(java.lang.String,java.lang.String)"
    ],
    "java.util.doublesummarystatistics.getmax": [
        "java.util.DoubleSummaryStatistics.getMax()"
    ],
    "java.util.stream.stream.foreach": [
        "java.util.stream.Stream.forEach(java.util.function.Consumer<? super java.util.stream.Stream>)",
        "java.util.stream.Stream.forEach(java.util.function.Consumer<? super T>)"
    ],
    "javax.sql.rowsetmetadata.setprecision": [
        "javax.sql.RowSetMetaData.setPrecision(int,int)"
    ],
    "javax.xml.datatype.datatypefactory.newxmlgregoriancalendardate": [
        "javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendarDate(int,int,int,int)"
    ],
    "org.omg.portableserver._servantlocatorstub.preinvoke": [
        "org.omg.PortableServer._ServantLocatorStub.preinvoke(byte[],org.omg.PortableServer.POA,java.lang.String,org.omg.PortableServer.ServantLocatorPackage.CookieHolder)"
    ],
    "java.io.file.createnewfile": [
        "java.io.File.createNewFile()"
    ],
    "javax.swing.text.jtextcomponent.savecomposedtext": [
        "javax.swing.text.JTextComponent.saveComposedText(int)"
    ],
    "java.net.urlconnection.setfilenamemap": [
        "java.net.URLConnection.setFileNameMap(java.net.FileNameMap)"
    ],
    "org.omg.dynamicany._dynfixedstub.get_long": [
        "org.omg.DynamicAny._DynFixedStub.get_long()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintmenuitemborder": [
        "javax.swing.plaf.synth.SynthPainter.paintMenuItemBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.awt.font.glyphmetrics.getadvancey": [
        "java.awt.font.GlyphMetrics.getAdvanceY()"
    ],
    "java.util.concurrent.semaphore.getqueuedthreads": [
        "java.util.concurrent.Semaphore.getQueuedThreads()"
    ],
    "org.xml.sax.xmlreader.setentityresolver": [
        "org.xml.sax.XMLReader.setEntityResolver(org.xml.sax.EntityResolver)"
    ],
    "java.lang.strictmath.tanh": [
        "java.lang.StrictMath.tanh(double)"
    ],
    "java.util.timer.schedule": [
        "java.util.Timer.schedule(java.util.TimerTask,java.util.Date,long)",
        "java.util.Timer.schedule(java.util.TimerTask,java.util.Date)",
        "java.util.Timer.schedule(java.util.TimerTask,long,long)",
        "java.util.Timer.schedule(java.util.TimerTask,long)"
    ],
    "java.security.keystorespi.enginesetkeyentry": [
        "java.security.KeyStoreSpi.engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate)",
        "java.security.KeyStoreSpi.engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])"
    ],
    "javax.swing.jtable.convertrowindextoview": [
        "javax.swing.JTable.convertRowIndexToView(int)"
    ],
    "javax.xml.bind.marshaller.getadapter": [
        "javax.xml.bind.Marshaller.getAdapter(java.lang.Class<A>)"
    ],
    "javax.swing.plaf.basic.basicdesktoppaneui.installlisteners": [
        "javax.swing.plaf.basic.BasicDesktopPaneUI.installListeners()"
    ],
    "javax.swing.plaf.synth.synthtextareaui.installdefaults": [
        "javax.swing.plaf.synth.SynthTextAreaUI.installDefaults()"
    ],
    "java.security.acl.acl.tostring": [
        "java.security.acl.Acl.toString()"
    ],
    "java.awt.menubar.remove": [
        "java.awt.MenuBar.remove(int)",
        "java.awt.MenuBar.remove(java.awt.MenuComponent)"
    ],
    "java.awt.geom.path2d.float.getbounds2d": [
        "java.awt.geom.Path2D.Float.getBounds2D()"
    ],
    "org.omg.corba.datainputstream.read_ulong_array": [
        "org.omg.CORBA.DataInputStream.read_ulong_array(org.omg.CORBA.ULongSeqHolder,int,int)"
    ],
    "javax.swing.plaf.multi.multifilechooserui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiFileChooserUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "java.nio.file.attribute.posixfileattributes.group": [
        "java.nio.file.attribute.PosixFileAttributes.group()"
    ],
    "javax.lang.model.util.simpleelementvisitor7.visitvariable": [
        "javax.lang.model.util.SimpleElementVisitor7.visitVariable(javax.lang.model.element.VariableElement,javax.lang.model.util.SimpleElementVisitor7)"
    ],
    "javax.print.attribute.standard.chromaticity.getcategory": [
        "javax.print.attribute.standard.Chromaticity.getCategory()"
    ],
    "java.lang.strictmath.cosh": [
        "java.lang.StrictMath.cosh(double)"
    ],
    "javax.swing.defaultrowsorter.convertrowindextoview": [
        "javax.swing.DefaultRowSorter.convertRowIndexToView(int)"
    ],
    "javax.naming.namingexception.setresolvedname": [
        "javax.naming.NamingException.setResolvedName(javax.naming.Name)"
    ],
    "javax.print.event.printjobevent.getprinteventtype": [
        "javax.print.event.PrintJobEvent.getPrintEventType()"
    ],
    "javax.accessibility.accessiblerelationset.add": [
        "javax.accessibility.AccessibleRelationSet.add(javax.accessibility.AccessibleRelation)"
    ],
    "javax.swing.listselectionmodel.removeselectioninterval": [
        "javax.swing.ListSelectionModel.removeSelectionInterval(int,int)"
    ],
    "java.lang.invoke.methodhandles.lookup.findstaticgetter": [
        "java.lang.invoke.MethodHandles.Lookup.findStaticGetter(java.lang.Class<?>,java.lang.String,java.lang.Class<?>)"
    ],
    "java.io.randomaccessfile.readline": [
        "java.io.RandomAccessFile.readLine()"
    ],
    "javax.swing.jtable.setvalueat": [
        "javax.swing.JTable.setValueAt(java.lang.Object,int,int)"
    ],
    "javax.swing.plaf.multi.multilabelui.getminimumsize": [
        "javax.swing.plaf.multi.MultiLabelUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "javax.xml.bind.datatypeconverter.parsestring": [
        "javax.xml.bind.DatatypeConverter.parseString(java.lang.String)"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.setcontenthandler": [
        "org.xml.sax.helpers.XMLFilterImpl.setContentHandler(org.xml.sax.ContentHandler)"
    ],
    "java.security.cert.x509certselector.setcertificate": [
        "java.security.cert.X509CertSelector.setCertificate(java.security.cert.X509Certificate)"
    ],
    "java.sql.resultsetmetadata.gettablename": [
        "java.sql.ResultSetMetaData.getTableName(int)"
    ],
    "java.util.prefs.abstractpreferences.parent": [
        "java.util.prefs.AbstractPreferences.parent()"
    ],
    "javax.management.attributelist.add": [
        "javax.management.AttributeList.add(int,java.lang.Object)",
        "javax.management.AttributeList.add(javax.management.Attribute)",
        "javax.management.AttributeList.add(int,javax.management.Attribute)",
        "javax.management.AttributeList.add(java.lang.Object)"
    ],
    "javax.xml.bind.helpers.validationeventlocatorimpl.setcolumnnumber": [
        "javax.xml.bind.helpers.ValidationEventLocatorImpl.setColumnNumber(int)"
    ],
    "java.lang.reflect.array.setshort": [
        "java.lang.reflect.Array.setShort(java.lang.Object,int,short)"
    ],
    "javax.tools.fileobject.delete": [
        "javax.tools.FileObject.delete()"
    ],
    "java.util.arrays.aslist": [
        "java.util.Arrays.asList(T...)"
    ],
    "java.awt.dnd.mousedraggesturerecognizer.unregisterlisteners": [
        "java.awt.dnd.MouseDragGestureRecognizer.unregisterListeners()"
    ],
    "javax.swing.defaultcelleditor.getcomponent": [
        "javax.swing.DefaultCellEditor.getComponent()"
    ],
    "org.xml.sax.helpers.parseradapter.seterrorhandler": [
        "org.xml.sax.helpers.ParserAdapter.setErrorHandler(org.xml.sax.ErrorHandler)"
    ],
    "java.lang.byte.parsebyte": [
        "java.lang.Byte.parseByte(java.lang.String,int)",
        "java.lang.Byte.parseByte(java.lang.String)"
    ],
    "javax.xml.stream.xmleventfactory.setlocation": [
        "javax.xml.stream.XMLEventFactory.setLocation(javax.xml.stream.Location)"
    ],
    "javax.swing.plaf.basic.basichtml.ishtmlstring": [
        "javax.swing.plaf.basic.BasicHTML.isHTMLString(java.lang.String)"
    ],
    "java.util.concurrent.forkjointask.complete": [
        "java.util.concurrent.ForkJoinTask.complete(V)",
        "java.util.concurrent.ForkJoinTask.complete(java.util.concurrent.ForkJoinTask)"
    ],
    "java.lang.reflect.field.setshort": [
        "java.lang.reflect.Field.setShort(java.lang.Object,short)"
    ],
    "javax.xml.datatype.datatypefactory.newxmlgregoriancalendar": [
        "javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar(java.lang.String)",
        "javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar(java.math.BigInteger,int,int,int,int,int,java.math.BigDecimal,int)",
        "javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar(java.util.GregorianCalendar)",
        "javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar()"
    ],
    "java.util.list.equals": [
        "java.util.List.equals(java.lang.Object)"
    ],
    "javax.swing.jlayer.setglasspane": [
        "javax.swing.JLayer.setGlassPane(javax.swing.JPanel)"
    ],
    "java.lang.management.memorypoolmxbean.isusagethresholdexceeded": [
        "java.lang.management.MemoryPoolMXBean.isUsageThresholdExceeded()"
    ],
    "java.sql.sqlexception.geterrorcode": [
        "java.sql.SQLException.getErrorCode()"
    ],
    "javax.swing.text.abstractwriter.setindentspace": [
        "javax.swing.text.AbstractWriter.setIndentSpace(int)"
    ],
    "javax.swing.text.html.parser.documentparser.handlestarttag": [
        "javax.swing.text.html.parser.DocumentParser.handleStartTag(javax.swing.text.html.parser.TagElement)"
    ],
    "java.io.pipedinputstream.close": [
        "java.io.PipedInputStream.close()"
    ],
    "java.awt.geom.area.issingular": [
        "java.awt.geom.Area.isSingular()"
    ],
    "java.math.biginteger.flipbit": [
        "java.math.BigInteger.flipBit(int)"
    ],
    "javax.sql.rowset.baserowset.setobject": [
        "javax.sql.rowset.BaseRowSet.setObject(java.lang.String,java.lang.Object,int,int)",
        "javax.sql.rowset.BaseRowSet.setObject(int,java.lang.Object)",
        "javax.sql.rowset.BaseRowSet.setObject(int,java.lang.Object,int,int)",
        "javax.sql.rowset.BaseRowSet.setObject(java.lang.String,java.lang.Object,int)",
        "javax.sql.rowset.BaseRowSet.setObject(java.lang.String,java.lang.Object)",
        "javax.sql.rowset.BaseRowSet.setObject(int,java.lang.Object,int)"
    ],
    "javax.swing.keystroke.getkeystrokeforevent": [
        "javax.swing.KeyStroke.getKeyStrokeForEvent(java.awt.event.KeyEvent)"
    ],
    "org.xml.sax.ext.attributes2impl.isspecified": [
        "org.xml.sax.ext.Attributes2Impl.isSpecified(int)",
        "org.xml.sax.ext.Attributes2Impl.isSpecified(java.lang.String,java.lang.String)",
        "org.xml.sax.ext.Attributes2Impl.isSpecified(java.lang.String)"
    ],
    "java.net.inet6address.getscopeid": [
        "java.net.Inet6Address.getScopeId()"
    ],
    "java.util.concurrent.atomic.longaccumulator.reset": [
        "java.util.concurrent.atomic.LongAccumulator.reset()"
    ],
    "javax.swing.text.boxview.getviewatpoint": [
        "javax.swing.text.BoxView.getViewAtPoint(int,int,java.awt.Rectangle)"
    ],
    "java.sql.sqltype.getvendor": [
        "java.sql.SQLType.getVendor()"
    ],
    "java.util.prefs.abstractpreferences.sync": [
        "java.util.prefs.AbstractPreferences.sync()"
    ],
    "java.awt.flowlayout.getvgap": [
        "java.awt.FlowLayout.getVgap()"
    ],
    "javax.swing.jlabel.sethorizontalalignment": [
        "javax.swing.JLabel.setHorizontalAlignment(int)"
    ],
    "java.awt.graphics.setpaintmode": [
        "java.awt.Graphics.setPaintMode()"
    ],
    "javax.xml.transform.transformerfactory.seterrorlistener": [
        "javax.xml.transform.TransformerFactory.setErrorListener(javax.xml.transform.ErrorListener)"
    ],
    "javax.print.attribute.size2dsyntax.getsize": [
        "javax.print.attribute.Size2DSyntax.getSize(int)"
    ],
    "java.util.stream.doublestream.count": [
        "java.util.stream.DoubleStream.count()"
    ],
    "org.omg.dynamicany._dynunionstub.copy": [
        "org.omg.DynamicAny._DynUnionStub.copy()"
    ],
    "javax.script.abstractscriptengine.setbindings": [
        "javax.script.AbstractScriptEngine.setBindings(javax.script.Bindings,int)"
    ],
    "org.omg.dynamicany.dynanyoperations.get_char": [
        "org.omg.DynamicAny.DynAnyOperations.get_char()"
    ],
    "javax.imageio.imagereader.processwarningoccurred": [
        "javax.imageio.ImageReader.processWarningOccurred(java.lang.String)",
        "javax.imageio.ImageReader.processWarningOccurred(java.lang.String,java.lang.String)"
    ],
    "java.nio.mappedbytebuffer.force": [
        "java.nio.MappedByteBuffer.force()"
    ],
    "java.sql.timestamp.valueof": [
        "java.sql.Timestamp.valueOf(java.time.LocalDateTime)",
        "java.sql.Timestamp.valueOf(java.lang.String)"
    ],
    "java.util.concurrent.concurrenthashmap.getordefault": [
        "java.util.concurrent.ConcurrentHashMap.getOrDefault(java.lang.Object,java.util.concurrent.ConcurrentHashMap)",
        "java.util.concurrent.ConcurrentHashMap.getOrDefault(java.lang.Object,V)"
    ],
    "javax.swing.abstractlistmodel.removelistdatalistener": [
        "javax.swing.AbstractListModel.removeListDataListener(javax.swing.event.ListDataListener)"
    ],
    "java.awt.geom.quadcurve2d.setcurve": [
        "java.awt.geom.QuadCurve2D.setCurve(java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D)",
        "java.awt.geom.QuadCurve2D.setCurve(double,double,double,double,double,double)",
        "java.awt.geom.QuadCurve2D.setCurve(java.awt.geom.QuadCurve2D)",
        "java.awt.geom.QuadCurve2D.setCurve(java.awt.geom.Point2D[],int)",
        "java.awt.geom.QuadCurve2D.setCurve(double[],int)"
    ],
    "javax.swing.jscrollpane.setrowheaderview": [
        "javax.swing.JScrollPane.setRowHeaderView(java.awt.Component)"
    ],
    "org.omg.corba.localobject._get_domain_managers": [
        "org.omg.CORBA.LocalObject._get_domain_managers()"
    ],
    "java.awt.gridbaglayout.minimumlayoutsize": [
        "java.awt.GridBagLayout.minimumLayoutSize(java.awt.Container)"
    ],
    "java.util.concurrent.atomic.atomicboolean.lazyset": [
        "java.util.concurrent.atomic.AtomicBoolean.lazySet(boolean)"
    ],
    "java.awt.print.paper.setsize": [
        "java.awt.print.Paper.setSize(double,double)"
    ],
    "javax.naming.compoundname.addall": [
        "javax.naming.CompoundName.addAll(javax.naming.Name)",
        "javax.naming.CompoundName.addAll(int,javax.naming.Name)"
    ],
    "java.awt.image.colormodel.getdataelements": [
        "java.awt.image.ColorModel.getDataElements(int[],int,java.lang.Object)",
        "java.awt.image.ColorModel.getDataElements(float[],int,java.lang.Object)",
        "java.awt.image.ColorModel.getDataElements(int,java.lang.Object)"
    ],
    "javax.swing.tree.abstractlayoutcache.getrowforpath": [
        "javax.swing.tree.AbstractLayoutCache.getRowForPath(javax.swing.tree.TreePath)"
    ],
    "javax.management.monitor.countermonitormbean.getderivedgauge": [
        "javax.management.monitor.CounterMonitorMBean.getDerivedGauge(javax.management.ObjectName)"
    ],
    "java.awt.geom.roundrectangle2d.float.gety": [
        "java.awt.geom.RoundRectangle2D.Float.getY()"
    ],
    "java.util.zip.deflaterinputstream.available": [
        "java.util.zip.DeflaterInputStream.available()"
    ],
    "java.nio.file.accessmode.values": [
        "java.nio.file.AccessMode.values()"
    ],
    "java.util.logging.memoryhandler.setpushlevel": [
        "java.util.logging.MemoryHandler.setPushLevel(java.util.logging.Level)"
    ],
    "javax.swing.colorchooser.defaultcolorselectionmodel.setselectedcolor": [
        "javax.swing.colorchooser.DefaultColorSelectionModel.setSelectedColor(java.awt.Color)"
    ],
    "java.util.concurrent.locks.condition.awaitnanos": [
        "java.util.concurrent.locks.Condition.awaitNanos(long)"
    ],
    "java.util.concurrent.completionstage.runaftereitherasync": [
        "java.util.concurrent.CompletionStage.runAfterEitherAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)",
        "java.util.concurrent.CompletionStage.runAfterEitherAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable,java.util.concurrent.Executor)"
    ],
    "javax.swing.text.html.imageview.getimage": [
        "javax.swing.text.html.ImageView.getImage()"
    ],
    "java.util.concurrent.concurrenthashmap.size": [
        "java.util.concurrent.ConcurrentHashMap.size()"
    ],
    "javax.xml.ws.spi.servicedelegate.getport": [
        "javax.xml.ws.spi.ServiceDelegate.getPort(javax.xml.namespace.QName,java.lang.Class<T>,javax.xml.ws.WebServiceFeature...)",
        "javax.xml.ws.spi.ServiceDelegate.getPort(javax.xml.namespace.QName,java.lang.Class<T>)",
        "javax.xml.ws.spi.ServiceDelegate.getPort(java.lang.Class<T>,javax.xml.ws.WebServiceFeature...)",
        "javax.xml.ws.spi.ServiceDelegate.getPort(java.lang.Class<T>)",
        "javax.xml.ws.spi.ServiceDelegate.getPort(javax.xml.ws.EndpointReference,java.lang.Class<T>,javax.xml.ws.WebServiceFeature...)"
    ],
    "org.omg.corba.request.ctx": [
        "org.omg.CORBA.Request.ctx(org.omg.CORBA.Context)",
        "org.omg.CORBA.Request.ctx()"
    ],
    "javax.swing.plaf.multi.multifilechooserui.getuis": [
        "javax.swing.plaf.multi.MultiFileChooserUI.getUIs()"
    ],
    "javax.activation.datahandler.isdataflavorsupported": [
        "javax.activation.DataHandler.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)"
    ],
    "javax.swing.abstractlistmodel.getlistdatalisteners": [
        "javax.swing.AbstractListModel.getListDataListeners()"
    ],
    "javax.print.attribute.standard.finishings.getname": [
        "javax.print.attribute.standard.Finishings.getName()"
    ],
    "org.omg.corba.portable.outputstream.write_long": [
        "org.omg.CORBA.portable.OutputStream.write_long(int)"
    ],
    "org.omg.dynamicany._dynstructstub.insert_ulong": [
        "org.omg.DynamicAny._DynStructStub.insert_ulong(int)"
    ],
    "java.awt.list.getselecteditem": [
        "java.awt.List.getSelectedItem()"
    ],
    "java.time.zoneddatetime.withminute": [
        "java.time.ZonedDateTime.withMinute(int)"
    ],
    "javax.security.cert.certificate.equals": [
        "javax.security.cert.Certificate.equals(java.lang.Object)"
    ],
    "javax.accessibility.accessiblerelationset.addall": [
        "javax.accessibility.AccessibleRelationSet.addAll(javax.accessibility.AccessibleRelation[])"
    ],
    "javax.swing.jlist.getfirstvisibleindex": [
        "javax.swing.JList.getFirstVisibleIndex()"
    ],
    "org.omg.cosnaming._namingcontextextstub.resolve_str": [
        "org.omg.CosNaming._NamingContextExtStub.resolve_str(java.lang.String)"
    ],
    "javax.naming.name.startswith": [
        "javax.naming.Name.startsWith(javax.naming.Name)"
    ],
    "javax.activation.mailcapcommandmap.getcommand": [
        "javax.activation.MailcapCommandMap.getCommand(java.lang.String,java.lang.String)"
    ],
    "javax.swing.plaf.basic.basicspinnerui.installlisteners": [
        "javax.swing.plaf.basic.BasicSpinnerUI.installListeners()"
    ],
    "org.xml.sax.helpers.namespacesupport.getprefixes": [
        "org.xml.sax.helpers.NamespaceSupport.getPrefixes(java.lang.String)",
        "org.xml.sax.helpers.NamespaceSupport.getPrefixes()"
    ],
    "org.omg.dynamicany._dynunionstub.insert_double": [
        "org.omg.DynamicAny._DynUnionStub.insert_double(double)"
    ],
    "java.net.datagramsocketimpl.joingroup": [
        "java.net.DatagramSocketImpl.joinGroup(java.net.SocketAddress,java.net.NetworkInterface)"
    ],
    "java.lang.system.maplibraryname": [
        "java.lang.System.mapLibraryName(java.lang.String)"
    ],
    "javax.imageio.imageio.getimagewritersbymimetype": [
        "javax.imageio.ImageIO.getImageWritersByMIMEType(java.lang.String)"
    ],
    "java.util.concurrent.timeunit.valueof": [
        "java.util.concurrent.TimeUnit.valueOf(java.lang.String)"
    ],
    "java.rmi.activation.activationid.equals": [
        "java.rmi.activation.ActivationID.equals(java.lang.Object)"
    ],
    "java.util.jar.pack200.newpacker": [
        "java.util.jar.Pack200.newPacker()"
    ],
    "javax.annotation.processing.completions.of": [
        "javax.annotation.processing.Completions.of(java.lang.String,java.lang.String)",
        "javax.annotation.processing.Completions.of(java.lang.String)"
    ],
    "javax.swing.table.tablecolumnmodel.getcolumncount": [
        "javax.swing.table.TableColumnModel.getColumnCount()"
    ],
    "java.util.regex.pattern.flags": [
        "java.util.regex.Pattern.flags()"
    ],
    "javax.swing.jtabbedpane.indexatlocation": [
        "javax.swing.JTabbedPane.indexAtLocation(int,int)"
    ],
    "javax.security.auth.kerberos.kerberosticket.isinitial": [
        "javax.security.auth.kerberos.KerberosTicket.isInitial()"
    ],
    "javax.sql.rowset.setshort": [
        "javax.sql.RowSet.setShort(int,short)",
        "javax.sql.RowSet.setShort(java.lang.String,short)"
    ],
    "java.security.interfaces.dsaparams.getg": [
        "java.security.interfaces.DSAParams.getG()"
    ],
    "javax.swing.uimanager.getsystemlookandfeelclassname": [
        "javax.swing.UIManager.getSystemLookAndFeelClassName()"
    ],
    "javax.accessibility.accessiblerelation.getkey": [
        "javax.accessibility.AccessibleRelation.getKey()"
    ],
    "java.awt.geom.cubiccurve2d.gety2": [
        "java.awt.geom.CubicCurve2D.getY2()"
    ],
    "java.awt.image.bandedsamplemodel.setpixels": [
        "java.awt.image.BandedSampleModel.setPixels(int,int,int,int,int[],java.awt.image.DataBuffer)"
    ],
    "javax.xml.validation.schemafactory.newschema": [
        "javax.xml.validation.SchemaFactory.newSchema(java.io.File)",
        "javax.xml.validation.SchemaFactory.newSchema(java.net.URL)",
        "javax.xml.validation.SchemaFactory.newSchema()",
        "javax.xml.validation.SchemaFactory.newSchema(javax.xml.transform.Source)",
        "javax.xml.validation.SchemaFactory.newSchema(javax.xml.transform.Source[])"
    ],
    "javax.xml.crypto.dsig.spec.xpathtype.filter.tostring": [
        "javax.xml.crypto.dsig.spec.XPathType.Filter.toString()"
    ],
    "java.net.serversocket.accept": [
        "java.net.ServerSocket.accept()"
    ],
    "javax.sound.sampled.lineevent.type.hashcode": [
        "javax.sound.sampled.LineEvent.Type.hashCode()"
    ],
    "javax.sql.rowset.serial.serialjavaobject.clone": [
        "javax.sql.rowset.serial.SerialJavaObject.clone()"
    ],
    "org.omg.dynamicany._dynunionstub.get_any": [
        "org.omg.DynamicAny._DynUnionStub.get_any()"
    ],
    "org.omg.dynamicany.dynfixedoperations.set_value": [
        "org.omg.DynamicAny.DynFixedOperations.set_value(java.lang.String)"
    ],
    "javax.imageio.imagewriteparam.unsettiling": [
        "javax.imageio.ImageWriteParam.unsetTiling()"
    ],
    "javax.lang.model.util.simpletypevisitor6.visitexecutable": [
        "javax.lang.model.util.SimpleTypeVisitor6.visitExecutable(javax.lang.model.type.ExecutableType,javax.lang.model.util.SimpleTypeVisitor6)"
    ],
    "java.io.objectinputstream.resolveobject": [
        "java.io.ObjectInputStream.resolveObject(java.lang.Object)"
    ],
    "javax.swing.text.defaultformatter.setcommitsonvalidedit": [
        "javax.swing.text.DefaultFormatter.setCommitsOnValidEdit(boolean)"
    ],
    "javax.swing.text.flowview.flowstrategy.changedupdate": [
        "javax.swing.text.FlowView.FlowStrategy.changedUpdate(javax.swing.text.FlowView,javax.swing.event.DocumentEvent,java.awt.Rectangle)"
    ],
    "java.awt.scrollbar.setmaximum": [
        "java.awt.Scrollbar.setMaximum(int)"
    ],
    "java.io.reader.skip": [
        "java.io.Reader.skip(long)"
    ],
    "java.time.chrono.hijrahera.range": [
        "java.time.chrono.HijrahEra.range(java.time.temporal.TemporalField)"
    ],
    "java.util.arraydeque.remove": [
        "java.util.ArrayDeque.remove()",
        "java.util.ArrayDeque.remove(java.lang.Object)"
    ],
    "javax.swing.text.asyncboxview.getinsetspan": [
        "javax.swing.text.AsyncBoxView.getInsetSpan(int)"
    ],
    "java.applet.appletstub.getdocumentbase": [
        "java.applet.AppletStub.getDocumentBase()"
    ],
    "javax.sound.sampled.linelistener.update": [
        "javax.sound.sampled.LineListener.update(javax.sound.sampled.LineEvent)"
    ],
    "javax.net.ssl.sslsession.getpeerprincipal": [
        "javax.net.ssl.SSLSession.getPeerPrincipal()"
    ],
    "javax.swing.jtree.removedescendantselectedpaths": [
        "javax.swing.JTree.removeDescendantSelectedPaths(javax.swing.tree.TreePath,boolean)"
    ],
    "java.lang.character.subset.tostring": [
        "java.lang.Character.Subset.toString()"
    ],
    "java.util.vector.sublist": [
        "java.util.Vector.subList(int,int)"
    ],
    "java.security.interfaces.rsaprivatecrtkey.getprimep": [
        "java.security.interfaces.RSAPrivateCrtKey.getPrimeP()"
    ],
    "java.security.keystore.deleteentry": [
        "java.security.KeyStore.deleteEntry(java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthdesktoppaneui.uninstalllisteners": [
        "javax.swing.plaf.synth.SynthDesktopPaneUI.uninstallListeners()"
    ],
    "javax.swing.plaf.synth.synthseparatorui.getcontext": [
        "javax.swing.plaf.synth.SynthSeparatorUI.getContext(javax.swing.JComponent)"
    ],
    "javax.swing.table.tablecolumn.sizewidthtofit": [
        "javax.swing.table.TableColumn.sizeWidthToFit()"
    ],
    "java.security.cert.pkixbuilderparameters.tostring": [
        "java.security.cert.PKIXBuilderParameters.toString()"
    ],
    "javax.management.mbeanserverinvocationhandler.newproxyinstance": [
        "javax.management.MBeanServerInvocationHandler.newProxyInstance(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class<T>,boolean)"
    ],
    "java.util.concurrent.concurrentskiplistset.descendingiterator": [
        "java.util.concurrent.ConcurrentSkipListSet.descendingIterator()"
    ],
    "java.awt.image.samplemodel.getdatatype": [
        "java.awt.image.SampleModel.getDataType()"
    ],
    "java.util.function.intconsumer.accept": [
        "java.util.function.IntConsumer.accept(int)"
    ],
    "java.awt.dnd.dragsourcedragevent.getdropaction": [
        "java.awt.dnd.DragSourceDragEvent.getDropAction()"
    ],
    "javax.swing.text.html.imageview.getstylesheet": [
        "javax.swing.text.html.ImageView.getStyleSheet()"
    ],
    "javax.swing.jviewport.setviewposition": [
        "javax.swing.JViewport.setViewPosition(java.awt.Point)"
    ],
    "javax.swing.plaf.synth.synthseparatorui.update": [
        "javax.swing.plaf.synth.SynthSeparatorUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.time.dayofweek.range": [
        "java.time.DayOfWeek.range(java.time.temporal.TemporalField)"
    ],
    "java.util.arraylist.sublist": [
        "java.util.ArrayList.subList(int,int)"
    ],
    "javax.swing.text.html.htmldocument.insertbeforeend": [
        "javax.swing.text.html.HTMLDocument.insertBeforeEnd(javax.swing.text.Element,java.lang.String)"
    ],
    "java.time.instant.parse": [
        "java.time.Instant.parse(java.lang.CharSequence)"
    ],
    "java.awt.event.inputmethodevent.getwhen": [
        "java.awt.event.InputMethodEvent.getWhen()"
    ],
    "java.sql.resultset.getncharacterstream": [
        "java.sql.ResultSet.getNCharacterStream(int)",
        "java.sql.ResultSet.getNCharacterStream(java.lang.String)"
    ],
    "org.xml.sax.inputsource.setencoding": [
        "org.xml.sax.InputSource.setEncoding(java.lang.String)"
    ],
    "javax.xml.soap.soapbody.addfault": [
        "javax.xml.soap.SOAPBody.addFault()",
        "javax.xml.soap.SOAPBody.addFault(javax.xml.namespace.QName,java.lang.String,java.util.Locale)",
        "javax.xml.soap.SOAPBody.addFault(javax.xml.soap.Name,java.lang.String,java.util.Locale)",
        "javax.xml.soap.SOAPBody.addFault(javax.xml.soap.Name,java.lang.String)",
        "javax.xml.soap.SOAPBody.addFault(javax.xml.namespace.QName,java.lang.String)"
    ],
    "javax.sound.sampled.mixer.getsourcelines": [
        "javax.sound.sampled.Mixer.getSourceLines()"
    ],
    "org.omg.dynamicany._dynunionstub.to_any": [
        "org.omg.DynamicAny._DynUnionStub.to_any()"
    ],
    "java.security.algorithmparametergenerator.generateparameters": [
        "java.security.AlgorithmParameterGenerator.generateParameters()"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.selectnextpossiblevalue": [
        "javax.swing.plaf.basic.BasicComboBoxUI.selectNextPossibleValue()"
    ],
    "java.awt.gradientpaint.getpoint1": [
        "java.awt.GradientPaint.getPoint1()"
    ],
    "javax.net.ssl.sslengineresult.gethandshakestatus": [
        "javax.net.ssl.SSLEngineResult.getHandshakeStatus()"
    ],
    "javax.swing.plaf.multi.multiscrollbarui.uninstallui": [
        "javax.swing.plaf.multi.MultiScrollBarUI.uninstallUI(javax.swing.JComponent)"
    ],
    "javax.naming.directory.basicattribute.getattributesyntaxdefinition": [
        "javax.naming.directory.BasicAttribute.getAttributeSyntaxDefinition()"
    ],
    "java.time.chrono.minguodate.equals": [
        "java.time.chrono.MinguoDate.equals(java.lang.Object)"
    ],
    "javax.imageio.event.iioreadupdatelistener.thumbnailpassstarted": [
        "javax.imageio.event.IIOReadUpdateListener.thumbnailPassStarted(javax.imageio.ImageReader,java.awt.image.BufferedImage,int,int,int,int,int,int,int,int[])"
    ],
    "javax.swing.plaf.synth.synthpainter.paintslidertrackbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintSliderTrackBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",
        "javax.swing.plaf.synth.SynthPainter.paintSliderTrackBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)"
    ],
    "java.sql.preparedstatement.executequery": [
        "java.sql.PreparedStatement.executeQuery()"
    ],
    "javax.swing.text.internationalformatter.setmaximum": [
        "javax.swing.text.InternationalFormatter.setMaximum(java.lang.Comparable)"
    ],
    "javax.swing.plaf.multi.multicomboboxui.update": [
        "javax.swing.plaf.multi.MultiComboBoxUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.net.uri.compareto": [
        "java.net.URI.compareTo(java.net.URI)"
    ],
    "javax.swing.spinnerlistmodel.getnextvalue": [
        "javax.swing.SpinnerListModel.getNextValue()"
    ],
    "java.util.hashmap.clone": [
        "java.util.HashMap.clone()"
    ],
    "javax.swing.event.documentevent.gettype": [
        "javax.swing.event.DocumentEvent.getType()"
    ],
    "javax.imageio.plugins.jpeg.jpeghuffmantable.getlengths": [
        "javax.imageio.plugins.jpeg.JPEGHuffmanTable.getLengths()"
    ],
    "java.util.vector.replaceall": [
        "java.util.Vector.replaceAll(java.util.function.UnaryOperator<E>)"
    ],
    "javax.swing.plaf.multi.multimenuitemui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiMenuItemUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "javax.swing.jfilechooser.setup": [
        "javax.swing.JFileChooser.setup(javax.swing.filechooser.FileSystemView)"
    ],
    "java.time.chrono.era.adjustinto": [
        "java.time.chrono.Era.adjustInto(java.time.temporal.Temporal)"
    ],
    "javax.print.attribute.standard.copies.equals": [
        "javax.print.attribute.standard.Copies.equals(java.lang.Object)"
    ],
    "java.lang.enumconstantnotpresentexception.constantname": [
        "java.lang.EnumConstantNotPresentException.constantName()"
    ],
    "javax.management.openmbean.openmbeanparameterinfosupport.equals": [
        "javax.management.openmbean.OpenMBeanParameterInfoSupport.equals(java.lang.Object)"
    ],
    "javax.swing.text.html.minimalhtmlwriter.writeheader": [
        "javax.swing.text.html.MinimalHTMLWriter.writeHeader()"
    ],
    "java.awt.dnd.droptargetcontext.getcomponent": [
        "java.awt.dnd.DropTargetContext.getComponent()"
    ],
    "javax.swing.text.styleconstants.setrightindent": [
        "javax.swing.text.StyleConstants.setRightIndent(javax.swing.text.MutableAttributeSet,float)"
    ],
    "javax.management.monitor.monitormbean.removeobservedobject": [
        "javax.management.monitor.MonitorMBean.removeObservedObject(javax.management.ObjectName)"
    ],
    "javax.xml.crypto.dsig.signaturemethod.getparameterspec": [
        "javax.xml.crypto.dsig.SignatureMethod.getParameterSpec()"
    ],
    "java.lang.reflect.executable.getgenericparametertypes": [
        "java.lang.reflect.Executable.getGenericParameterTypes()"
    ],
    "java.nio.file.filesystems.getfilesystem": [
        "java.nio.file.FileSystems.getFileSystem(java.net.URI)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getid": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getID()"
    ],
    "java.sql.sqlinput.readbigdecimal": [
        "java.sql.SQLInput.readBigDecimal()"
    ],
    "java.lang.object.clone": [
        "java.lang.Object.clone()"
    ],
    "java.awt.graphics.fillpolygon": [
        "java.awt.Graphics.fillPolygon(int[],int[],int)",
        "java.awt.Graphics.fillPolygon(java.awt.Polygon)"
    ],
    "javax.swing.text.labelview.getbackground": [
        "javax.swing.text.LabelView.getBackground()"
    ],
    "javax.management.mbeanserverinvocationhandler.getobjectname": [
        "javax.management.MBeanServerInvocationHandler.getObjectName()"
    ],
    "javax.swing.text.asyncboxview.setestimatedmajorspan": [
        "javax.swing.text.AsyncBoxView.setEstimatedMajorSpan(boolean)"
    ],
    "java.sql.savepoint.getsavepointname": [
        "java.sql.Savepoint.getSavepointName()"
    ],
    "javax.swing.plaf.multi.multipopupmenuui.getpopup": [
        "javax.swing.plaf.multi.MultiPopupMenuUI.getPopup(javax.swing.JPopupMenu,int,int)"
    ],
    "java.time.temporal.chronofield.istimebased": [
        "java.time.temporal.ChronoField.isTimeBased()"
    ],
    "java.io.objectstreamclass.getserialversionuid": [
        "java.io.ObjectStreamClass.getSerialVersionUID()"
    ],
    "java.beans.propertychangeevent.getpropertyname": [
        "java.beans.PropertyChangeEvent.getPropertyName()"
    ],
    "java.awt.geom.line2d.double.gety2": [
        "java.awt.geom.Line2D.Double.getY2()"
    ],
    "javax.xml.namespace.qname.getlocalpart": [
        "javax.xml.namespace.QName.getLocalPart()"
    ],
    "javax.security.auth.kerberos.kerberosticket.getsessionkey": [
        "javax.security.auth.kerberos.KerberosTicket.getSessionKey()"
    ],
    "org.omg.dynamicany._dynstructstub.set_members_as_dyn_any": [
        "org.omg.DynamicAny._DynStructStub.set_members_as_dyn_any(org.omg.DynamicAny.NameDynAnyPair[])"
    ],
    "javax.imageio.metadata.iiometadatanode.getuserdata": [
        "javax.imageio.metadata.IIOMetadataNode.getUserData(java.lang.String)"
    ],
    "java.text.dateformat.getinstance": [
        "java.text.DateFormat.getInstance()"
    ],
    "javax.swing.border.bevelborder.gethighlightinnercolor": [
        "javax.swing.border.BevelBorder.getHighlightInnerColor(java.awt.Component)",
        "javax.swing.border.BevelBorder.getHighlightInnerColor()"
    ],
    "javax.swing.jinternalframe.setrootpane": [
        "javax.swing.JInternalFrame.setRootPane(javax.swing.JRootPane)"
    ],
    "javax.swing.plaf.basic.basictreeui.createkeylistener": [
        "javax.swing.plaf.basic.BasicTreeUI.createKeyListener()"
    ],
    "javax.swing.jviewport.paramstring": [
        "javax.swing.JViewport.paramString()"
    ],
    "java.nio.file.files.ishidden": [
        "java.nio.file.Files.isHidden(java.nio.file.Path)"
    ],
    "javax.xml.bind.datatypeconverter.parsebyte": [
        "javax.xml.bind.DatatypeConverter.parseByte(java.lang.String)"
    ],
    "javax.swing.jscrollbar.removeadjustmentlistener": [
        "javax.swing.JScrollBar.removeAdjustmentListener(java.awt.event.AdjustmentListener)"
    ],
    "javax.swing.plaf.multi.multiinternalframeui.contains": [
        "javax.swing.plaf.multi.MultiInternalFrameUI.contains(javax.swing.JComponent,int,int)"
    ],
    "java.util.zip.zipoutputstream.setlevel": [
        "java.util.zip.ZipOutputStream.setLevel(int)"
    ],
    "javax.swing.plaf.basic.basictoolbarui.setbordertonormal": [
        "javax.swing.plaf.basic.BasicToolBarUI.setBorderToNormal(java.awt.Component)"
    ],
    "javax.management.openmbean.compositedatasupport.hashcode": [
        "javax.management.openmbean.CompositeDataSupport.hashCode()"
    ],
    "javax.swing.progressmonitor.setmillistopopup": [
        "javax.swing.ProgressMonitor.setMillisToPopup(int)"
    ],
    "javax.swing.text.defaultcaret.getcomponent": [
        "javax.swing.text.DefaultCaret.getComponent()"
    ],
    "javax.swing.defaultlistselectionmodel.setleadanchornotificationenabled": [
        "javax.swing.DefaultListSelectionModel.setLeadAnchorNotificationEnabled(boolean)"
    ],
    "java.net.uri.getrawfragment": [
        "java.net.URI.getRawFragment()"
    ],
    "java.nio.channels.datagramchannel.connect": [
        "java.nio.channels.DatagramChannel.connect(java.net.SocketAddress)"
    ],
    "javax.accessibility.accessiblestateset.clear": [
        "javax.accessibility.AccessibleStateSet.clear()"
    ],
    "javax.sound.sampled.audiofileformat.properties": [
        "javax.sound.sampled.AudioFileFormat.properties()"
    ],
    "javax.naming.directory.searchresult.getattributes": [
        "javax.naming.directory.SearchResult.getAttributes()"
    ],
    "javax.swing.tree.treemodel.getindexofchild": [
        "javax.swing.tree.TreeModel.getIndexOfChild(java.lang.Object,java.lang.Object)"
    ],
    "java.math.mathcontext.equals": [
        "java.math.MathContext.equals(java.lang.Object)"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.getwaitingthreads": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.getWaitingThreads(java.util.concurrent.locks.Condition)"
    ],
    "javax.swing.defaultbuttonmodel.isarmed": [
        "javax.swing.DefaultButtonModel.isArmed()"
    ],
    "javax.swing.plaf.synth.synthtooltipui.getpreferredsize": [
        "javax.swing.plaf.synth.SynthToolTipUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "org.w3c.dom.document.setdocumenturi": [
        "org.w3c.dom.Document.setDocumentURI(java.lang.String)"
    ],
    "javax.swing.text.stringcontent.insertstring": [
        "javax.swing.text.StringContent.insertString(int,java.lang.String)"
    ],
    "java.nio.channels.socketchannel.shutdownoutput": [
        "java.nio.channels.SocketChannel.shutdownOutput()"
    ],
    "javax.security.cert.certificate.verify": [
        "javax.security.cert.Certificate.verify(java.security.PublicKey)",
        "javax.security.cert.Certificate.verify(java.security.PublicKey,java.lang.String)"
    ],
    "java.nio.channels.asynchronousfilechannel.lock": [
        "java.nio.channels.AsynchronousFileChannel.lock(long,long,boolean,A,,? super A>)",
        "java.nio.channels.AsynchronousFileChannel.lock(A,,? super A>)",
        "java.nio.channels.AsynchronousFileChannel.lock(long,long,boolean)",
        "java.nio.channels.AsynchronousFileChannel.lock()"
    ],
    "java.awt.menu.getitemcount": [
        "java.awt.Menu.getItemCount()"
    ],
    "javax.activation.commandmap.getallcommands": [
        "javax.activation.CommandMap.getAllCommands(java.lang.String)",
        "javax.activation.CommandMap.getAllCommands(java.lang.String,javax.activation.DataSource)"
    ],
    "javax.print.event.printjobattributelistener.attributeupdate": [
        "javax.print.event.PrintJobAttributeListener.attributeUpdate(javax.print.event.PrintJobAttributeEvent)"
    ],
    "java.security.permissions.implies": [
        "java.security.Permissions.implies(java.security.Permission)"
    ],
    "java.util.concurrent.future.get": [
        "java.util.concurrent.Future.get()"
    ],
    "java.util.logging.logger.getlogger": [
        "java.util.logging.Logger.getLogger(java.lang.String)",
        "java.util.logging.Logger.getLogger(java.lang.String,java.lang.String)"
    ],
    "java.awt.geom.quadcurve2d.getflatness": [
        "java.awt.geom.QuadCurve2D.getFlatness(double[],int)",
        "java.awt.geom.QuadCurve2D.getFlatness(double,double,double,double,double,double)",
        "java.awt.geom.QuadCurve2D.getFlatness()"
    ],
    "java.util.stream.intstream.iterate": [
        "java.util.stream.IntStream.iterate(int,java.util.function.IntUnaryOperator)"
    ],
    "java.nio.file.watchkey.reset": [
        "java.nio.file.WatchKey.reset()"
    ],
    "javax.swing.plaf.basic.basicpasswordfieldui.installdefaults": [
        "javax.swing.plaf.basic.BasicPasswordFieldUI.installDefaults()"
    ],
    "java.rmi.server.rmiclassloaderspi.loadproxyclass": [
        "java.rmi.server.RMIClassLoaderSpi.loadProxyClass(java.lang.String,java.lang.String[],java.lang.ClassLoader)"
    ],
    "javax.swing.jtabbedpane.setselectedcomponent": [
        "javax.swing.JTabbedPane.setSelectedComponent(java.awt.Component)"
    ],
    "java.nio.file.directoryiteratorexception.getcause": [
        "java.nio.file.DirectoryIteratorException.getCause()"
    ],
    "java.time.localdatetime.compareto": [
        "java.time.LocalDateTime.compareTo(java.time.chrono.ChronoLocalDateTime<?>)"
    ],
    "java.util.concurrent.forkjointask.quietlyinvoke": [
        "java.util.concurrent.ForkJoinTask.quietlyInvoke()"
    ],
    "java.security.cert.crlreason.valueof": [
        "java.security.cert.CRLReason.valueOf(java.lang.String)"
    ],
    "javax.swing.plaf.multi.multitoolbarui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiToolBarUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "java.awt.dnd.draggestureevent.gettriggerevent": [
        "java.awt.dnd.DragGestureEvent.getTriggerEvent()"
    ],
    "javax.crypto.spec.rc2parameterspec.hashcode": [
        "javax.crypto.spec.RC2ParameterSpec.hashCode()"
    ],
    "javax.swing.desktopmanager.dragframe": [
        "javax.swing.DesktopManager.dragFrame(javax.swing.JComponent,int,int)"
    ],
    "java.util.comparator.comparingdouble": [
        "java.util.Comparator.comparingDouble(java.util.function.ToDoubleFunction<? super T>)"
    ],
    "java.text.collator.getcollationkey": [
        "java.text.Collator.getCollationKey(java.lang.String)"
    ],
    "java.awt.font.createglyphvector": [
        "java.awt.Font.createGlyphVector(java.awt.font.FontRenderContext,java.lang.String)",
        "java.awt.Font.createGlyphVector(java.awt.font.FontRenderContext,char[])",
        "java.awt.Font.createGlyphVector(java.awt.font.FontRenderContext,java.text.CharacterIterator)",
        "java.awt.Font.createGlyphVector(java.awt.font.FontRenderContext,int[])"
    ],
    "javax.swing.plaf.metal.metalborders.gettextborder": [
        "javax.swing.plaf.metal.MetalBorders.getTextBorder()"
    ],
    "org.omg.corba.valuebaseholder._write": [
        "org.omg.CORBA.ValueBaseHolder._write(org.omg.CORBA.portable.OutputStream)"
    ],
    "javax.print.attribute.standard.jobmediasheets.getcategory": [
        "javax.print.attribute.standard.JobMediaSheets.getCategory()"
    ],
    "javax.swing.text.asyncboxview.getleftinset": [
        "javax.swing.text.AsyncBoxView.getLeftInset()"
    ],
    "java.awt.image.colormodel.coercedata": [
        "java.awt.image.ColorModel.coerceData(java.awt.image.WritableRaster,boolean)"
    ],
    "java.util.concurrent.threadpoolexecutor.getactivecount": [
        "java.util.concurrent.ThreadPoolExecutor.getActiveCount()"
    ],
    "javax.swing.jtable.seteditingcolumn": [
        "javax.swing.JTable.setEditingColumn(int)"
    ],
    "javax.swing.plaf.multi.multisliderui.getaccessiblechild": [
        "javax.swing.plaf.multi.MultiSliderUI.getAccessibleChild(javax.swing.JComponent,int)"
    ],
    "java.awt.geom.cubiccurve2d.double.getctrlx2": [
        "java.awt.geom.CubicCurve2D.Double.getCtrlX2()"
    ],
    "java.awt.keyboardfocusmanager.getglobalpermanentfocusowner": [
        "java.awt.KeyboardFocusManager.getGlobalPermanentFocusOwner()"
    ],
    "java.awt.geom.roundrectangle2d.double.getarcwidth": [
        "java.awt.geom.RoundRectangle2D.Double.getArcWidth()"
    ],
    "java.util.weakhashmap.remove": [
        "java.util.WeakHashMap.remove(java.lang.Object)"
    ],
    "javax.xml.ws.endpoint.stop": [
        "javax.xml.ws.Endpoint.stop()"
    ],
    "java.io.objectinputstream.readdouble": [
        "java.io.ObjectInputStream.readDouble()"
    ],
    "java.awt.gradientpaint.getpoint2": [
        "java.awt.GradientPaint.getPoint2()"
    ],
    "java.awt.scrollpane.gethscrollbarheight": [
        "java.awt.ScrollPane.getHScrollbarHeight()"
    ],
    "javax.sql.rowset.joinrowset.supportsleftouterjoin": [
        "javax.sql.rowset.JoinRowSet.supportsLeftOuterJoin()"
    ],
    "javax.accessibility.accessiblecontext.firepropertychange": [
        "javax.accessibility.AccessibleContext.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)"
    ],
    "java.util.concurrent.priorityblockingqueue.drainto": [
        "java.util.concurrent.PriorityBlockingQueue.drainTo(java.util.Collection<? super E>)",
        "java.util.concurrent.PriorityBlockingQueue.drainTo(java.util.Collection<? super E>,int)"
    ],
    "java.awt.toolkit.createimage": [
        "java.awt.Toolkit.createImage(java.net.URL)",
        "java.awt.Toolkit.createImage(byte[],int,int)",
        "java.awt.Toolkit.createImage(java.awt.image.ImageProducer)",
        "java.awt.Toolkit.createImage(java.lang.String)",
        "java.awt.Toolkit.createImage(byte[])"
    ],
    "javax.swing.jwindow.windowinit": [
        "javax.swing.JWindow.windowInit()"
    ],
    "javax.swing.plaf.synth.synthsplitpaneui.uninstalldefaults": [
        "javax.swing.plaf.synth.SynthSplitPaneUI.uninstallDefaults()"
    ],
    "java.awt.dnd.dragsource.isdragimagesupported": [
        "java.awt.dnd.DragSource.isDragImageSupported()"
    ],
    "javax.swing.jtabbedpane.isenabledat": [
        "javax.swing.JTabbedPane.isEnabledAt(int)"
    ],
    "java.awt.font.imagegraphicattribute.getdescent": [
        "java.awt.font.ImageGraphicAttribute.getDescent()"
    ],
    "javax.xml.soap.soapfault.getfaultcodeasname": [
        "javax.xml.soap.SOAPFault.getFaultCodeAsName()"
    ],
    "java.lang.number.floatvalue": [
        "java.lang.Number.floatValue()"
    ],
    "java.awt.graphics2d.drawstring": [
        "java.awt.Graphics2D.drawString(java.lang.String,float,float)",
        "java.awt.Graphics2D.drawString(java.lang.String,int,int)",
        "java.awt.Graphics2D.drawString(java.text.AttributedCharacterIterator,int,int)",
        "java.awt.Graphics2D.drawString(java.text.AttributedCharacterIterator,float,float)"
    ],
    "javax.swing.text.abstractdocument.removeupdate": [
        "javax.swing.text.AbstractDocument.removeUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent)"
    ],
    "java.security.cert.extension.getvalue": [
        "java.security.cert.Extension.getValue()"
    ],
    "java.awt.dnd.dragsource.getlisteners": [
        "java.awt.dnd.DragSource.getListeners(java.lang.Class<T>)"
    ],
    "java.awt.dnd.dragsourcedragevent.getgesturemodifiersex": [
        "java.awt.dnd.DragSourceDragEvent.getGestureModifiersEx()"
    ],
    "javax.swing.buttongroup.remove": [
        "javax.swing.ButtonGroup.remove(javax.swing.AbstractButton)"
    ],
    "javax.xml.ws.soap.mtomfeature.getthreshold": [
        "javax.xml.ws.soap.MTOMFeature.getThreshold()"
    ],
    "org.omg.portableinterceptor.serverrequestinfooperations.orb_id": [
        "org.omg.PortableInterceptor.ServerRequestInfoOperations.orb_id()"
    ],
    "javax.print.attribute.standard.dialogtypeselection.getenumvaluetable": [
        "javax.print.attribute.standard.DialogTypeSelection.getEnumValueTable()"
    ],
    "javax.swing.plaf.basic.basicarrowbutton.getminimumsize": [
        "javax.swing.plaf.basic.BasicArrowButton.getMinimumSize()"
    ],
    "javax.swing.jsplitpane.setorientation": [
        "javax.swing.JSplitPane.setOrientation(int)"
    ],
    "javax.swing.table.tablemodel.getcolumncount": [
        "javax.swing.table.TableModel.getColumnCount()"
    ],
    "javax.swing.text.view.getendoffset": [
        "javax.swing.text.View.getEndOffset()"
    ],
    "javax.sound.midi.midichannel.noteoff": [
        "javax.sound.midi.MidiChannel.noteOff(int,int)",
        "javax.sound.midi.MidiChannel.noteOff(int)"
    ],
    "java.util.zip.inflateroutputstream.flush": [
        "java.util.zip.InflaterOutputStream.flush()"
    ],
    "java.util.collections.unmodifiablelist": [
        "java.util.Collections.unmodifiableList(java.util.List<? extends T>)"
    ],
    "javax.swing.plaf.multi.multirootpaneui.uninstallui": [
        "javax.swing.plaf.multi.MultiRootPaneUI.uninstallUI(javax.swing.JComponent)"
    ],
    "javax.swing.text.html.html.unknowntag.hashcode": [
        "javax.swing.text.html.HTML.UnknownTag.hashCode()"
    ],
    "java.security.permissions.add": [
        "java.security.Permissions.add(java.security.Permission)"
    ],
    "org.omg.dynamicany.dynvaluecommonoperations.set_to_value": [
        "org.omg.DynamicAny.DynValueCommonOperations.set_to_value()"
    ],
    "org.omg.cosnaming._namingcontextextstub.unbind": [
        "org.omg.CosNaming._NamingContextExtStub.unbind(org.omg.CosNaming.NameComponent[])"
    ],
    "javax.naming.spi.objectfactory.getobjectinstance": [
        "javax.naming.spi.ObjectFactory.getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,,?>)"
    ],
    "java.lang.class.getfields": [
        "java.lang.Class.getFields()"
    ],
    "org.omg.corba.portable.delegate.servant_postinvoke": [
        "org.omg.CORBA.portable.Delegate.servant_postinvoke(org.omg.CORBA.Object,org.omg.CORBA.portable.ServantObject)"
    ],
    "java.util.concurrent.concurrentskiplistset.floor": [
        "java.util.concurrent.ConcurrentSkipListSet.floor(E)"
    ],
    "java.util.prefs.abstractpreferences.getfloat": [
        "java.util.prefs.AbstractPreferences.getFloat(java.lang.String,float)"
    ],
    "java.lang.integer.tounsignedstring": [
        "java.lang.Integer.toUnsignedString(int,int)",
        "java.lang.Integer.toUnsignedString(int)"
    ],
    "java.security.algorithmparameters.init": [
        "java.security.AlgorithmParameters.init(byte[],java.lang.String)",
        "java.security.AlgorithmParameters.init(byte[])",
        "java.security.AlgorithmParameters.init(java.security.spec.AlgorithmParameterSpec)"
    ],
    "javax.print.attribute.standard.numberupsupported.equals": [
        "javax.print.attribute.standard.NumberUpSupported.equals(java.lang.Object)"
    ],
    "java.awt.choice.getitemlisteners": [
        "java.awt.Choice.getItemListeners()"
    ],
    "javax.swing.text.textaction.augmentlist": [
        "javax.swing.text.TextAction.augmentList(javax.swing.Action[],javax.swing.Action[])"
    ],
    "javax.swing.plaf.metal.metaltheme.addcustomentriestotable": [
        "javax.swing.plaf.metal.MetalTheme.addCustomEntriesToTable(javax.swing.UIDefaults)"
    ],
    "java.awt.graphicsenvironment.getdefaultscreendevice": [
        "java.awt.GraphicsEnvironment.getDefaultScreenDevice()"
    ],
    "javax.swing.jcomponent.setverifyinputwhenfocustarget": [
        "javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"
    ],
    "javax.swing.plaf.basic.basictreeui.toggleexpandstate": [
        "javax.swing.plaf.basic.BasicTreeUI.toggleExpandState(javax.swing.tree.TreePath)"
    ],
    "javax.swing.plaf.synth.synthsliderui.valueforxposition": [
        "javax.swing.plaf.synth.SynthSliderUI.valueForXPosition(int)"
    ],
    "javax.swing.jcheckbox.updateui": [
        "javax.swing.JCheckBox.updateUI()"
    ],
    "javax.rmi.corba.util.createvaluehandler": [
        "javax.rmi.CORBA.Util.createValueHandler()"
    ],
    "java.rmi.activation.activatable.register": [
        "java.rmi.activation.Activatable.register(java.rmi.activation.ActivationDesc)"
    ],
    "javax.management.query.or": [
        "javax.management.Query.or(javax.management.QueryExp,javax.management.QueryExp)"
    ],
    "javax.swing.sortorder.valueof": [
        "javax.swing.SortOrder.valueOf(java.lang.String)"
    ],
    "java.awt.composite.createcontext": [
        "java.awt.Composite.createContext(java.awt.image.ColorModel,java.awt.image.ColorModel,java.awt.RenderingHints)"
    ],
    "java.util.calendar.builder.build": [
        "java.util.Calendar.Builder.build()"
    ],
    "javax.swing.defaultlistmodel.getsize": [
        "javax.swing.DefaultListModel.getSize()"
    ],
    "org.omg.dynamicany._dynanystub.insert_boolean": [
        "org.omg.DynamicAny._DynAnyStub.insert_boolean(boolean)"
    ],
    "java.io.bufferedinputstream.read": [
        "java.io.BufferedInputStream.read(byte[],int,int)"
    ],
    "java.awt.print.printerjob.defaultpage": [
        "java.awt.print.PrinterJob.defaultPage()"
    ],
    "java.nio.file.path.hashcode": [
        "java.nio.file.Path.hashCode()"
    ],
    "java.sql.jdbctype.getname": [
        "java.sql.JDBCType.getName()"
    ],
    "java.rmi.server.rmifailurehandler.failure": [
        "java.rmi.server.RMIFailureHandler.failure(java.lang.Exception)"
    ],
    "java.util.concurrent.copyonwritearraylist.sort": [
        "java.util.concurrent.CopyOnWriteArrayList.sort(java.util.Comparator<? super E>)"
    ],
    "javax.swing.plaf.basic.basicoptionpaneui.geticonfortype": [
        "javax.swing.plaf.basic.BasicOptionPaneUI.getIconForType(int)"
    ],
    "java.rmi.activation.activationgroupid.equals": [
        "java.rmi.activation.ActivationGroupID.equals(java.lang.Object)"
    ],
    "org.omg.portableinterceptor.serverrequestinterceptoroperations.receive_request": [
        "org.omg.PortableInterceptor.ServerRequestInterceptorOperations.receive_request(org.omg.PortableInterceptor.ServerRequestInfo)"
    ],
    "java.util.weakhashmap.get": [
        "java.util.WeakHashMap.get(java.lang.Object)"
    ],
    "javax.swing.plaf.synth.synthoptionpaneui.paintborder": [
        "javax.swing.plaf.synth.SynthOptionPaneUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.singleselectionmodel.removechangelistener": [
        "javax.swing.SingleSelectionModel.removeChangeListener(javax.swing.event.ChangeListener)"
    ],
    "java.text.annotation.tostring": [
        "java.text.Annotation.toString()"
    ],
    "java.lang.number.doublevalue": [
        "java.lang.Number.doubleValue()"
    ],
    "org.omg.corba.datainputstream.read_abstract": [
        "org.omg.CORBA.DataInputStream.read_Abstract()"
    ],
    "javax.xml.datatype.datatypefactory.newinstance": [
        "javax.xml.datatype.DatatypeFactory.newInstance()",
        "javax.xml.datatype.DatatypeFactory.newInstance(java.lang.String,java.lang.ClassLoader)"
    ],
    "java.security.spec.x509encodedkeyspec.getformat": [
        "java.security.spec.X509EncodedKeySpec.getFormat()"
    ],
    "java.util.prefs.preferences.childrennames": [
        "java.util.prefs.Preferences.childrenNames()"
    ],
    "javax.swing.tree.variableheightlayoutcache.invalidatesizes": [
        "javax.swing.tree.VariableHeightLayoutCache.invalidateSizes()"
    ],
    "java.awt.event.mouseevent.getmodifiersex": [
        "java.awt.event.MouseEvent.getModifiersEx()"
    ],
    "java.awt.image.bufferedimage.creategraphics": [
        "java.awt.image.BufferedImage.createGraphics()"
    ],
    "java.security.cert.certstore.getprovider": [
        "java.security.cert.CertStore.getProvider()"
    ],
    "javax.sql.rowset.settransactionisolation": [
        "javax.sql.RowSet.setTransactionIsolation(int)"
    ],
    "javax.management.mbeanregistration.preregister": [
        "javax.management.MBeanRegistration.preRegister(javax.management.MBeanServer,javax.management.ObjectName)"
    ],
    "java.util.jar.pack200.unpacker.properties": [
        "java.util.jar.Pack200.Unpacker.properties()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintradiobuttonborder": [
        "javax.swing.plaf.synth.SynthPainter.paintRadioButtonBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.xml.bind.attachment.attachmentmarshaller.addmtomattachment": [
        "javax.xml.bind.attachment.AttachmentMarshaller.addMtomAttachment(byte[],int,int,java.lang.String,java.lang.String,java.lang.String)",
        "javax.xml.bind.attachment.AttachmentMarshaller.addMtomAttachment(javax.activation.DataHandler,java.lang.String,java.lang.String)"
    ],
    "javax.xml.crypto.dsig.signedinfo.getcanonicalizationmethod": [
        "javax.xml.crypto.dsig.SignedInfo.getCanonicalizationMethod()"
    ],
    "javax.swing.table.defaulttablecolumnmodel.getcolumnindexatx": [
        "javax.swing.table.DefaultTableColumnModel.getColumnIndexAtX(int)"
    ],
    "javax.print.attribute.datetimesyntax.hashcode": [
        "javax.print.attribute.DateTimeSyntax.hashCode()"
    ],
    "javax.swing.border.bevelborder.getborderinsets": [
        "javax.swing.border.BevelBorder.getBorderInsets(java.awt.Component,java.awt.Insets)"
    ],
    "java.awt.geom.cubiccurve2d.getbounds": [
        "java.awt.geom.CubicCurve2D.getBounds()"
    ],
    "java.awt.robot.createscreencapture": [
        "java.awt.Robot.createScreenCapture(java.awt.Rectangle)"
    ],
    "org.xml.sax.ext.lexicalhandler.comment": [
        "org.xml.sax.ext.LexicalHandler.comment(char[],int,int)"
    ],
    "javax.management.timer.timermbean.stop": [
        "javax.management.timer.TimerMBean.stop()"
    ],
    "java.net.urlconnection.getusecaches": [
        "java.net.URLConnection.getUseCaches()"
    ],
    "java.awt.textfield.setechochar": [
        "java.awt.TextField.setEchoChar(char)"
    ],
    "java.security.domainloadstoreparameter.getprotectionparameter": [
        "java.security.DomainLoadStoreParameter.getProtectionParameter()"
    ],
    "javax.swing.spinnerlistmodel.getlist": [
        "javax.swing.SpinnerListModel.getList()"
    ],
    "javax.management.openmbean.tabulardatasupport.gettabulartype": [
        "javax.management.openmbean.TabularDataSupport.getTabularType()"
    ],
    "javax.swing.plaf.synth.synthpainter.painteditorpaneborder": [
        "javax.swing.plaf.synth.SynthPainter.paintEditorPaneBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.naming.reference.clone": [
        "javax.naming.Reference.clone()"
    ],
    "java.util.logging.logger.getparent": [
        "java.util.logging.Logger.getParent()"
    ],
    "java.time.chrono.thaibuddhistchronology.getcalendartype": [
        "java.time.chrono.ThaiBuddhistChronology.getCalendarType()"
    ],
    "javax.swing.jformattedtextfield.getformatterfactory": [
        "javax.swing.JFormattedTextField.getFormatterFactory()"
    ],
    "javax.management.remote.rmi.rmiserverimpl.getprotocol": [
        "javax.management.remote.rmi.RMIServerImpl.getProtocol()"
    ],
    "javax.activation.datahandler.getallcommands": [
        "javax.activation.DataHandler.getAllCommands()"
    ],
    "java.util.spliterator.getcomparator": [
        "java.util.Spliterator.getComparator()"
    ],
    "javax.imageio.stream.imageoutputstream.writeutf": [
        "javax.imageio.stream.ImageOutputStream.writeUTF(java.lang.String)"
    ],
    "java.sql.statement.isclosed": [
        "java.sql.Statement.isClosed()"
    ],
    "javax.swing.border.strokeborder.paintborder": [
        "javax.swing.border.StrokeBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.naming.directory.basicattributes.hashcode": [
        "javax.naming.directory.BasicAttributes.hashCode()"
    ],
    "javax.xml.parsers.saxparserfactory.newsaxparser": [
        "javax.xml.parsers.SAXParserFactory.newSAXParser()"
    ],
    "org.omg.dynamicany._dynstructstub.insert_char": [
        "org.omg.DynamicAny._DynStructStub.insert_char(char)"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readdouble": [
        "javax.sql.rowset.serial.SQLInputImpl.readDouble()"
    ],
    "javax.swing.plaf.synth.synthviewportui.installlisteners": [
        "javax.swing.plaf.synth.SynthViewportUI.installListeners(javax.swing.JComponent)"
    ],
    "java.beans.propertyeditorsupport.getvalue": [
        "java.beans.PropertyEditorSupport.getValue()"
    ],
    "java.awt.list.getselecteditems": [
        "java.awt.List.getSelectedItems()"
    ],
    "java.io.stringreader.close": [
        "java.io.StringReader.close()"
    ],
    "java.awt.print.paper.getimageablewidth": [
        "java.awt.print.Paper.getImageableWidth()"
    ],
    "java.util.concurrent.atomic.atomiclongfieldupdater.incrementandget": [
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.incrementAndGet(java.util.concurrent.atomic.AtomicLongFieldUpdater)",
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.incrementAndGet(T)"
    ],
    "java.awt.list.getitemcount": [
        "java.awt.List.getItemCount()"
    ],
    "java.awt.pageattributes.set": [
        "java.awt.PageAttributes.set(java.awt.PageAttributes)"
    ],
    "javax.swing.plaf.multi.multisplitpaneui.getuis": [
        "javax.swing.plaf.multi.MultiSplitPaneUI.getUIs()"
    ],
    "javax.swing.jlayer.getscrollableblockincrement": [
        "javax.swing.JLayer.getScrollableBlockIncrement(java.awt.Rectangle,int,int)"
    ],
    "org.omg.portableserver.poaoperations.set_servant": [
        "org.omg.PortableServer.POAOperations.set_servant(org.omg.PortableServer.Servant)"
    ],
    "javax.swing.jframe.gettransferhandler": [
        "javax.swing.JFrame.getTransferHandler()"
    ],
    "java.text.dateformatsymbols.seteras": [
        "java.text.DateFormatSymbols.setEras(java.lang.String[])",
        "java.text.DateFormatSymbols.setEras(java.lang.String)"
    ],
    "javax.swing.defaultboundedrangemodel.firestatechanged": [
        "javax.swing.DefaultBoundedRangeModel.fireStateChanged()"
    ],
    "javax.swing.text.boxview.getalignment": [
        "javax.swing.text.BoxView.getAlignment(int)"
    ],
    "java.awt.color.icc_colorspace.getminvalue": [
        "java.awt.color.ICC_ColorSpace.getMinValue(int)"
    ],
    "javax.swing.jtable.getfillsviewportheight": [
        "javax.swing.JTable.getFillsViewportHeight()"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.installkeyboardactions": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.installKeyboardActions()"
    ],
    "java.io.stringreader.skip": [
        "java.io.StringReader.skip(long)"
    ],
    "java.awt.event.mouseevent.getbutton": [
        "java.awt.event.MouseEvent.getButton()"
    ],
    "javax.sound.sampled.mixer.getmaxlines": [
        "javax.sound.sampled.Mixer.getMaxLines(javax.sound.sampled.Line.Info)"
    ],
    "java.math.biginteger.shortvalueexact": [
        "java.math.BigInteger.shortValueExact()"
    ],
    "javax.swing.plaf.metal.oceantheme.getcontroltextcolor": [
        "javax.swing.plaf.metal.OceanTheme.getControlTextColor()"
    ],
    "javax.activation.activationdataflavor.sethumanpresentablename": [
        "javax.activation.ActivationDataFlavor.setHumanPresentableName(java.lang.String)"
    ],
    "java.awt.image.renderable.renderableimage.getproperty": [
        "java.awt.image.renderable.RenderableImage.getProperty(java.lang.String)"
    ],
    "java.util.concurrent.concurrenthashmap.tostring": [
        "java.util.concurrent.ConcurrentHashMap.toString()"
    ],
    "javax.management.loading.mletcontent.getjarfiles": [
        "javax.management.loading.MLetContent.getJarFiles()"
    ],
    "java.awt.systemtray.gettrayicons": [
        "java.awt.SystemTray.getTrayIcons()"
    ],
    "javax.swing.plaf.basic.basiclookandfeel.loadsystemcolors": [
        "javax.swing.plaf.basic.BasicLookAndFeel.loadSystemColors(javax.swing.UIDefaults,java.lang.String[],boolean)"
    ],
    "java.util.deque.offerfirst": [
        "java.util.Deque.offerFirst(E)",
        "java.util.Deque.offerFirst(java.util.Deque)"
    ],
    "javax.naming.name.compareto": [
        "javax.naming.Name.compareTo(java.lang.Object)"
    ],
    "org.omg.dynamicany._dynvaluestub.get_string": [
        "org.omg.DynamicAny._DynValueStub.get_string()"
    ],
    "javax.naming.namingexception.getremainingname": [
        "javax.naming.NamingException.getRemainingName()"
    ],
    "javax.sound.midi.midichannel.getomni": [
        "javax.sound.midi.MidiChannel.getOmni()"
    ],
    "javax.sound.sampled.mixer.info.getdescription": [
        "javax.sound.sampled.Mixer.Info.getDescription()"
    ],
    "org.omg.dynamicany.dynstructoperations.get_members_as_dyn_any": [
        "org.omg.DynamicAny.DynStructOperations.get_members_as_dyn_any()"
    ],
    "javax.swing.jcomponent.printborder": [
        "javax.swing.JComponent.printBorder(java.awt.Graphics)"
    ],
    "javax.swing.plaf.treeui.getrowcount": [
        "javax.swing.plaf.TreeUI.getRowCount(javax.swing.JTree)"
    ],
    "org.omg.dynamicany._dynsequencestub.get_typecode": [
        "org.omg.DynamicAny._DynSequenceStub.get_typecode()"
    ],
    "java.lang.management.threadinfo.getlockownerid": [
        "java.lang.management.ThreadInfo.getLockOwnerId()"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getdisabledselectedicon": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getDisabledSelectedIcon(javax.swing.JComponent,javax.swing.Icon)"
    ],
    "javax.swing.text.defaultstyleddocument.setcharacterattributes": [
        "javax.swing.text.DefaultStyledDocument.setCharacterAttributes(int,int,javax.swing.text.AttributeSet,boolean)"
    ],
    "java.time.month.maxlength": [
        "java.time.Month.maxLength()"
    ],
    "java.text.simpledateformat.setdateformatsymbols": [
        "java.text.SimpleDateFormat.setDateFormatSymbols(java.text.DateFormatSymbols)"
    ],
    "java.awt.image.writablerenderedimage.releasewritabletile": [
        "java.awt.image.WritableRenderedImage.releaseWritableTile(int,int)"
    ],
    "java.util.concurrent.cyclicbarrier.getnumberwaiting": [
        "java.util.concurrent.CyclicBarrier.getNumberWaiting()"
    ],
    "java.nio.charset.charsetencoder.averagebytesperchar": [
        "java.nio.charset.CharsetEncoder.averageBytesPerChar()"
    ],
    "java.util.stream.stream.flatmaptolong": [
        "java.util.stream.Stream.flatMapToLong(java.util.function.Function<? super,? extends java.util.stream.LongStream>)"
    ],
    "javax.swing.jscrollbar.setui": [
        "javax.swing.JScrollBar.setUI(javax.swing.plaf.ScrollBarUI)"
    ],
    "java.sql.resultset.getdouble": [
        "java.sql.ResultSet.getDouble(int)",
        "java.sql.ResultSet.getDouble(java.lang.String)"
    ],
    "java.security.keystore.builder.getprotectionparameter": [
        "java.security.KeyStore.Builder.getProtectionParameter(java.lang.String)"
    ],
    "java.awt.borderlayout.getlayoutalignmentx": [
        "java.awt.BorderLayout.getLayoutAlignmentX(java.awt.Container)"
    ],
    "javax.naming.reference.get": [
        "javax.naming.Reference.get(java.lang.String)",
        "javax.naming.Reference.get(int)"
    ],
    "java.util.concurrent.synchronousqueue.take": [
        "java.util.concurrent.SynchronousQueue.take()"
    ],
    "javax.rmi.ssl.sslrmiserversocketfactory.getenabledciphersuites": [
        "javax.rmi.ssl.SslRMIServerSocketFactory.getEnabledCipherSuites()"
    ],
    "javax.swing.plaf.synth.synthlabelui.paintborder": [
        "javax.swing.plaf.synth.SynthLabelUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "org.omg.corba.any.extract_long": [
        "org.omg.CORBA.Any.extract_long()"
    ],
    "java.util.unknownformatflagsexception.getflags": [
        "java.util.UnknownFormatFlagsException.getFlags()"
    ],
    "javax.swing.text.stringcontent.getstring": [
        "javax.swing.text.StringContent.getString(int,int)"
    ],
    "javax.swing.jeditorpane.gettext": [
        "javax.swing.JEditorPane.getText()"
    ],
    "java.awt.image.imageconsumer.sethints": [
        "java.awt.image.ImageConsumer.setHints(int)"
    ],
    "java.lang.string.touppercase": [
        "java.lang.String.toUpperCase()",
        "java.lang.String.toUpperCase(java.util.Locale)"
    ],
    "javax.management.openmbean.openmbeanconstructorinfosupport.tostring": [
        "javax.management.openmbean.OpenMBeanConstructorInfoSupport.toString()"
    ],
    "java.awt.image.colormodel.getalpha": [
        "java.awt.image.ColorModel.getAlpha(int)",
        "java.awt.image.ColorModel.getAlpha(java.lang.Object)"
    ],
    "java.awt.window.getfocusowner": [
        "java.awt.Window.getFocusOwner()"
    ],
    "javax.tools.javafilemanager.flush": [
        "javax.tools.JavaFileManager.flush()"
    ],
    "javax.swing.abstractbutton.sethorizontalalignment": [
        "javax.swing.AbstractButton.setHorizontalAlignment(int)"
    ],
    "javax.crypto.cipher.getinstance": [
        "javax.crypto.Cipher.getInstance(java.lang.String)",
        "javax.crypto.Cipher.getInstance(java.lang.String,java.lang.String)",
        "javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider)"
    ],
    "javax.net.ssl.sslcontextspi.engineinit": [
        "javax.net.ssl.SSLContextSpi.engineInit(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)",
        "javax.net.ssl.SSLContextSpi.engineInit(javax.net.ssl.KeyManager,javax.net.ssl.TrustManager,java.security.SecureRandom)"
    ],
    "java.net.authenticator.requestortype.valueof": [
        "java.net.Authenticator.RequestorType.valueOf(java.lang.String)"
    ],
    "java.awt.component.isenabled": [
        "java.awt.Component.isEnabled()"
    ],
    "org.omg.corba.datainputstream.read_double_array": [
        "org.omg.CORBA.DataInputStream.read_double_array(org.omg.CORBA.DoubleSeqHolder,int,int)"
    ],
    "java.security.cert.extension.getid": [
        "java.security.cert.Extension.getId()"
    ],
    "javax.management.remote.jmxprincipal.equals": [
        "javax.management.remote.JMXPrincipal.equals(java.lang.Object)"
    ],
    "java.lang.securitymanager.checkconnect": [
        "java.lang.SecurityManager.checkConnect(java.lang.String,int,java.lang.Object)",
        "java.lang.SecurityManager.checkConnect(java.lang.String,int)"
    ],
    "java.nio.channels.asynchronousbytechannel.read": [
        "java.nio.channels.AsynchronousByteChannel.read(java.nio.ByteBuffer)",
        "java.nio.channels.AsynchronousByteChannel.read(java.nio.ByteBuffer,A,,? super A>)"
    ],
    "java.awt.image.databufferushort.getelem": [
        "java.awt.image.DataBufferUShort.getElem(int,int)"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.readlock.lock": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.lock()"
    ],
    "java.io.file.list": [
        "java.io.File.list()",
        "java.io.File.list(java.io.FilenameFilter)"
    ],
    "javax.swing.joptionpane.getdesktoppaneforcomponent": [
        "javax.swing.JOptionPane.getDesktopPaneForComponent(java.awt.Component)"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.addtreeselectionlistener": [
        "javax.swing.tree.DefaultTreeSelectionModel.addTreeSelectionListener(javax.swing.event.TreeSelectionListener)"
    ],
    "javax.swing.table.tablerowsorter.usetostring": [
        "javax.swing.table.TableRowSorter.useToString(int)"
    ],
    "javax.tools.fileobject.getname": [
        "javax.tools.FileObject.getName()"
    ],
    "java.lang.short.compareto": [
        "java.lang.Short.compareTo(java.lang.Short)"
    ],
    "java.util.arraylist.trimtosize": [
        "java.util.ArrayList.trimToSize()"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.warning": [
        "org.xml.sax.helpers.XMLFilterImpl.warning(org.xml.sax.SAXParseException)"
    ],
    "java.awt.multiplegradientpaint.gettransparency": [
        "java.awt.MultipleGradientPaint.getTransparency()"
    ],
    "java.util.concurrent.forkjoinworkerthread.ontermination": [
        "java.util.concurrent.ForkJoinWorkerThread.onTermination(java.lang.Throwable)"
    ],
    "javax.swing.tree.defaultmutabletreenode.getpreviousleaf": [
        "javax.swing.tree.DefaultMutableTreeNode.getPreviousLeaf()"
    ],
    "java.nio.charset.coderresult.unmappableforlength": [
        "java.nio.charset.CoderResult.unmappableForLength(int)"
    ],
    "java.awt.font.glyphvector.getglyphpixelbounds": [
        "java.awt.font.GlyphVector.getGlyphPixelBounds(int,java.awt.font.FontRenderContext,float,float)"
    ],
    "java.nio.file.spi.filesystemprovider.newoutputstream": [
        "java.nio.file.spi.FileSystemProvider.newOutputStream(java.nio.file.Path,java.nio.file.OpenOption...)",
        "java.nio.file.spi.FileSystemProvider.newOutputStream(java.nio.file.Path,java.nio.file.OpenOption)"
    ],
    "javax.imageio.metadata.iiometadataformatimpl.getelementdescription": [
        "javax.imageio.metadata.IIOMetadataFormatImpl.getElementDescription(java.lang.String,java.util.Locale)"
    ],
    "javax.swing.text.labelview.issubscript": [
        "javax.swing.text.LabelView.isSubscript()"
    ],
    "org.omg.corba.datainputstream.read_short": [
        "org.omg.CORBA.DataInputStream.read_short()"
    ],
    "javax.naming.directory.attributes.put": [
        "javax.naming.directory.Attributes.put(java.lang.String,java.lang.Object)",
        "javax.naming.directory.Attributes.put(javax.naming.directory.Attribute)"
    ],
    "java.lang.string.offsetbycodepoints": [
        "java.lang.String.offsetByCodePoints(int,int)"
    ],
    "java.time.period.from": [
        "java.time.Period.from(java.time.temporal.TemporalAmount)"
    ],
    "javax.sound.sampled.spi.mixerprovider.ismixersupported": [
        "javax.sound.sampled.spi.MixerProvider.isMixerSupported(javax.sound.sampled.Mixer.Info)"
    ],
    "javax.swing.text.html.htmldocument.iterator.next": [
        "javax.swing.text.html.HTMLDocument.Iterator.next()"
    ],
    "javax.xml.transform.transformerfactory.geturiresolver": [
        "javax.xml.transform.TransformerFactory.getURIResolver()"
    ],
    "java.awt.renderinghints.get": [
        "java.awt.RenderingHints.get(java.lang.Object)"
    ],
    "java.awt.gridbagconstraints.clone": [
        "java.awt.GridBagConstraints.clone()"
    ],
    "javax.management.descriptor.setfield": [
        "javax.management.Descriptor.setField(java.lang.String,java.lang.Object)"
    ],
    "javax.xml.crypto.dom.domcryptocontext.get": [
        "javax.xml.crypto.dom.DOMCryptoContext.get(java.lang.Object)"
    ],
    "java.util.listiterator.next": [
        "java.util.ListIterator.next()"
    ],
    "org.omg.corba.typecode.fixed_scale": [
        "org.omg.CORBA.TypeCode.fixed_scale()"
    ],
    "javax.swing.jframe.getdefaultcloseoperation": [
        "javax.swing.JFrame.getDefaultCloseOperation()"
    ],
    "java.time.localdatetime.plusseconds": [
        "java.time.LocalDateTime.plusSeconds(long)"
    ],
    "javax.swing.jeditorpane.settext": [
        "javax.swing.JEditorPane.setText(java.lang.String)"
    ],
    "org.ietf.jgss.oid.getder": [
        "org.ietf.jgss.Oid.getDER()"
    ],
    "java.awt.list.getaccessiblecontext": [
        "java.awt.List.getAccessibleContext()"
    ],
    "javax.sound.midi.sequencer.syncmode.hashcode": [
        "javax.sound.midi.Sequencer.SyncMode.hashCode()"
    ],
    "javax.naming.name.clone": [
        "javax.naming.Name.clone()"
    ],
    "javax.lang.model.type.executabletype.gettypevariables": [
        "javax.lang.model.type.ExecutableType.getTypeVariables()"
    ],
    "javax.swing.table.tablecolumnmodel.getcolumnindex": [
        "javax.swing.table.TableColumnModel.getColumnIndex(java.lang.Object)"
    ],
    "javax.swing.text.html.css.getattribute": [
        "javax.swing.text.html.CSS.getAttribute(java.lang.String)"
    ],
    "java.awt.checkboxgroup.setselectedcheckbox": [
        "java.awt.CheckboxGroup.setSelectedCheckbox(java.awt.Checkbox)"
    ],
    "java.util.arraylist.sort": [
        "java.util.ArrayList.sort(java.util.Comparator<? super E>)"
    ],
    "javax.management.relation.relationservice.purgerelations": [
        "javax.management.relation.RelationService.purgeRelations()"
    ],
    "javax.swing.plaf.componentui.installui": [
        "javax.swing.plaf.ComponentUI.installUI(javax.swing.JComponent)"
    ],
    "java.beans.methoddescriptor.getmethod": [
        "java.beans.MethodDescriptor.getMethod()"
    ],
    "java.awt.font.linebreakmeasurer.nextoffset": [
        "java.awt.font.LineBreakMeasurer.nextOffset(float,int,boolean)",
        "java.awt.font.LineBreakMeasurer.nextOffset(float)"
    ],
    "java.util.stream.collectors.summarizinglong": [
        "java.util.stream.Collectors.summarizingLong(java.util.function.ToLongFunction<? super T>)"
    ],
    "java.lang.strictmath.copysign": [
        "java.lang.StrictMath.copySign(double,double)",
        "java.lang.StrictMath.copySign(float,float)"
    ],
    "java.time.localdatetime.plusminutes": [
        "java.time.LocalDateTime.plusMinutes(long)"
    ],
    "java.awt.textarea.setrows": [
        "java.awt.TextArea.setRows(int)"
    ],
    "java.lang.stringbuffer.offsetbycodepoints": [
        "java.lang.StringBuffer.offsetByCodePoints(int,int)"
    ],
    "java.awt.font.textlayout.getbaselineoffsets": [
        "java.awt.font.TextLayout.getBaselineOffsets()"
    ],
    "org.omg.dynamicany._dynarraystub.get_octet": [
        "org.omg.DynamicAny._DynArrayStub.get_octet()"
    ],
    "javax.management.mbeanconstructorinfo.clone": [
        "javax.management.MBeanConstructorInfo.clone()"
    ],
    "javax.swing.text.view.append": [
        "javax.swing.text.View.append(javax.swing.text.View)"
    ],
    "javax.swing.jformattedtextfield.abstractformatter.valuetostring": [
        "javax.swing.JFormattedTextField.AbstractFormatter.valueToString(java.lang.Object)"
    ],
    "java.time.chrono.chronolocaldate.toepochday": [
        "java.time.chrono.ChronoLocalDate.toEpochDay()"
    ],
    "java.awt.toolkit.getdesktopproperty": [
        "java.awt.Toolkit.getDesktopProperty(java.lang.String)"
    ],
    "javax.swing.plaf.multi.multisplitpaneui.setdividerlocation": [
        "javax.swing.plaf.multi.MultiSplitPaneUI.setDividerLocation(javax.swing.JSplitPane,int)"
    ],
    "java.util.spliterators.emptyintspliterator": [
        "java.util.Spliterators.emptyIntSpliterator()"
    ],
    "javax.swing.text.internationalformatter.setformat": [
        "javax.swing.text.InternationalFormatter.setFormat(java.text.Format)"
    ],
    "javax.crypto.exemptionmechanism.finalize": [
        "javax.crypto.ExemptionMechanism.finalize()"
    ],
    "java.util.jar.manifest.hashcode": [
        "java.util.jar.Manifest.hashCode()"
    ],
    "javax.naming.nameclasspair.getclassname": [
        "javax.naming.NameClassPair.getClassName()"
    ],
    "java.util.stream.stream.iterate": [
        "java.util.stream.Stream.iterate(T,java.util.function.UnaryOperator<T>)"
    ],
    "javax.swing.text.html.html.attribute.tostring": [
        "javax.swing.text.html.HTML.Attribute.toString()"
    ],
    "java.security.digestinputstream.setmessagedigest": [
        "java.security.DigestInputStream.setMessageDigest(java.security.MessageDigest)"
    ],
    "javax.imageio.imagewriteparam.unsetcompression": [
        "javax.imageio.ImageWriteParam.unsetCompression()"
    ],
    "java.util.deque.removefirstoccurrence": [
        "java.util.Deque.removeFirstOccurrence(java.lang.Object)"
    ],
    "org.omg.corba.orb.create_enum_tc": [
        "org.omg.CORBA.ORB.create_enum_tc(java.lang.String,java.lang.String,java.lang.String[])"
    ],
    "org.omg.corba._policystub.copy": [
        "org.omg.CORBA._PolicyStub.copy()"
    ],
    "javax.xml.bind.marshaller.getschema": [
        "javax.xml.bind.Marshaller.getSchema()"
    ],
    "java.sql.callablestatement.setrowid": [
        "java.sql.CallableStatement.setRowId(java.lang.String,java.sql.RowId)"
    ],
    "java.awt.image.databuffer.setelem": [
        "java.awt.image.DataBuffer.setElem(int,int,int)"
    ],
    "java.awt.printjob.end": [
        "java.awt.PrintJob.end()"
    ],
    "java.awt.containerorderfocustraversalpolicy.getdefaultcomponent": [
        "java.awt.ContainerOrderFocusTraversalPolicy.getDefaultComponent(java.awt.Container)"
    ],
    "org.omg.dynamicany._dynarraystub.insert_boolean": [
        "org.omg.DynamicAny._DynArrayStub.insert_boolean(boolean)"
    ],
    "javax.swing.jmenubar.getuiclassid": [
        "javax.swing.JMenuBar.getUIClassID()"
    ],
    "java.lang.ref.reference.get": [
        "java.lang.ref.Reference.get()"
    ],
    "javax.management.timer.timer.getnotificationids": [
        "javax.management.timer.Timer.getNotificationIDs(java.lang.String)"
    ],
    "javax.xml.validation.validator.reset": [
        "javax.xml.validation.Validator.reset()"
    ],
    "java.util.stream.stream.distinct": [
        "java.util.stream.Stream.distinct()"
    ],
    "java.util.collections.newsetfrommap": [
        "java.util.Collections.newSetFromMap(,java.lang.Boolean>)"
    ],
    "javax.management.remote.rmi.rmiiiopserverimpl.tostub": [
        "javax.management.remote.rmi.RMIIIOPServerImpl.toStub()"
    ],
    "javax.swing.jtree.getnextmatch": [
        "javax.swing.JTree.getNextMatch(java.lang.String,int,javax.swing.text.Position.Bias)"
    ],
    "java.text.spi.breakiteratorprovider.getcharacterinstance": [
        "java.text.spi.BreakIteratorProvider.getCharacterInstance(java.util.Locale)"
    ],
    "javax.xml.stream.xmlstreamwriter.writeenddocument": [
        "javax.xml.stream.XMLStreamWriter.writeEndDocument()"
    ],
    "javax.swing.text.internationalformatter.stringtovalue": [
        "javax.swing.text.InternationalFormatter.stringToValue(java.lang.String)"
    ],
    "org.omg.corba.tckind.value": [
        "org.omg.CORBA.TCKind.value()"
    ],
    "javax.naming.directory.attribute.size": [
        "javax.naming.directory.Attribute.size()"
    ],
    "org.w3c.dom.namednodemap.item": [
        "org.w3c.dom.NamedNodeMap.item(int)"
    ],
    "java.awt.datatransfer.systemflavormap.decodedataflavor": [
        "java.awt.datatransfer.SystemFlavorMap.decodeDataFlavor(java.lang.String)"
    ],
    "javax.swing.jfilechooser.getcontrolbuttonsareshown": [
        "javax.swing.JFileChooser.getControlButtonsAreShown()"
    ],
    "javax.naming.compoundname.hashcode": [
        "javax.naming.CompoundName.hashCode()"
    ],
    "java.beans.propertyeditor.supportscustomeditor": [
        "java.beans.PropertyEditor.supportsCustomEditor()"
    ],
    "java.lang.management.threadinfo.getlockinfo": [
        "java.lang.management.ThreadInfo.getLockInfo()"
    ],
    "java.lang.management.threadmxbean.resetpeakthreadcount": [
        "java.lang.management.ThreadMXBean.resetPeakThreadCount()"
    ],
    "org.omg.corba.dataoutputstream.write_wchar_array": [
        "org.omg.CORBA.DataOutputStream.write_wchar_array(char[],int,int)"
    ],
    "javax.swing.swingworker.removepropertychangelistener": [
        "javax.swing.SwingWorker.removePropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "java.awt.color.tostring": [
        "java.awt.Color.toString()"
    ],
    "javax.swing.text.utilities.gettabbedtextwidth": [
        "javax.swing.text.Utilities.getTabbedTextWidth(javax.swing.text.Segment,java.awt.FontMetrics,int,javax.swing.text.TabExpander,int)"
    ],
    "javax.security.auth.callback.passwordcallback.setpassword": [
        "javax.security.auth.callback.PasswordCallback.setPassword(char[])"
    ],
    "java.security.cert.x509crl.getnextupdate": [
        "java.security.cert.X509CRL.getNextUpdate()"
    ],
    "java.util.function.longconsumer.accept": [
        "java.util.function.LongConsumer.accept(long)"
    ],
    "javax.swing.plaf.basic.basictreeui.gethorizontallegbuffer": [
        "javax.swing.plaf.basic.BasicTreeUI.getHorizontalLegBuffer()"
    ],
    "javax.swing.plaf.basic.basictextareaui.create": [
        "javax.swing.plaf.basic.BasicTextAreaUI.create(javax.swing.text.Element)"
    ],
    "org.w3c.dom.characterdata.appenddata": [
        "org.w3c.dom.CharacterData.appendData(java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthtextareaui.paintbackground": [
        "javax.swing.plaf.synth.SynthTextAreaUI.paintBackground(java.awt.Graphics)"
    ],
    "javax.print.attribute.standard.jobimpressionssupported.getname": [
        "javax.print.attribute.standard.JobImpressionsSupported.getName()"
    ],
    "javax.swing.plaf.basic.basicsliderui.gethighestvalue": [
        "javax.swing.plaf.basic.BasicSliderUI.getHighestValue()"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.getbaselineresizebehavior": [
        "javax.swing.plaf.basic.BasicComboBoxUI.getBaselineResizeBehavior(javax.swing.JComponent)"
    ],
    "java.time.format.datetimeformatter.getresolverstyle": [
        "java.time.format.DateTimeFormatter.getResolverStyle()"
    ],
    "javax.naming.ldap.ldapname.size": [
        "javax.naming.ldap.LdapName.size()"
    ],
    "java.lang.string.substring": [
        "java.lang.String.substring(int)",
        "java.lang.String.substring(int,int)"
    ],
    "java.util.function.doubleunaryoperator.andthen": [
        "java.util.function.DoubleUnaryOperator.andThen(java.util.function.DoubleUnaryOperator)"
    ],
    "javax.script.scriptcontext.getbindings": [
        "javax.script.ScriptContext.getBindings(int)"
    ],
    "javax.swing.text.defaultformatterfactory.getdisplayformatter": [
        "javax.swing.text.DefaultFormatterFactory.getDisplayFormatter()"
    ],
    "java.awt.image.bufferedimage.gettype": [
        "java.awt.image.BufferedImage.getType()"
    ],
    "javax.swing.plaf.basic.basiccombopopup.createkeylistener": [
        "javax.swing.plaf.basic.BasicComboPopup.createKeyListener()"
    ],
    "org.omg.portableinterceptor.serverrequestinfooperations.add_reply_service_context": [
        "org.omg.PortableInterceptor.ServerRequestInfoOperations.add_reply_service_context(org.omg.IOP.ServiceContext,boolean)"
    ],
    "javax.swing.jtree.firetreeexpanded": [
        "javax.swing.JTree.fireTreeExpanded(javax.swing.tree.TreePath)"
    ],
    "org.omg.corba.localobject._releasereply": [
        "org.omg.CORBA.LocalObject._releaseReply(org.omg.CORBA.portable.InputStream)"
    ],
    "java.nio.file.attribute.userprincipallookupservice.lookupprincipalbyname": [
        "java.nio.file.attribute.UserPrincipalLookupService.lookupPrincipalByName(java.lang.String)"
    ],
    "javax.xml.soap.soappart.removemimeheader": [
        "javax.xml.soap.SOAPPart.removeMimeHeader(java.lang.String)"
    ],
    "java.awt.graphics.drawoval": [
        "java.awt.Graphics.drawOval(int,int,int,int)"
    ],
    "java.lang.invoke.methodhandleproxies.iswrapperinstance": [
        "java.lang.invoke.MethodHandleProxies.isWrapperInstance(java.lang.Object)"
    ],
    "java.util.arraydeque.push": [
        "java.util.ArrayDeque.push(java.util.ArrayDeque)",
        "java.util.ArrayDeque.push(E)"
    ],
    "org.omg.cosnaming.namingcontextoperations.bind_new_context": [
        "org.omg.CosNaming.NamingContextOperations.bind_new_context(org.omg.CosNaming.NameComponent[])"
    ],
    "java.io.reader.marksupported": [
        "java.io.Reader.markSupported()"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.getreadholdcount": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.getReadHoldCount()"
    ],
    "javax.xml.stream.xmlstreamreader.getprefix": [
        "javax.xml.stream.XMLStreamReader.getPrefix()"
    ],
    "java.sql.resultset.setfetchdirection": [
        "java.sql.ResultSet.setFetchDirection(int)"
    ],
    "java.awt.container.getminimumsize": [
        "java.awt.Container.getMinimumSize()"
    ],
    "javax.sql.rowset.serial.serialclob.length": [
        "javax.sql.rowset.serial.SerialClob.length()"
    ],
    "javax.swing.jdialog.settransferhandler": [
        "javax.swing.JDialog.setTransferHandler(javax.swing.TransferHandler)"
    ],
    "java.security.keystorespi.enginegetcreationdate": [
        "java.security.KeyStoreSpi.engineGetCreationDate(java.lang.String)"
    ],
    "java.util.concurrent.concurrentskiplistmap.floorentry": [
        "java.util.concurrent.ConcurrentSkipListMap.floorEntry(java.util.concurrent.ConcurrentSkipListMap)",
        "java.util.concurrent.ConcurrentSkipListMap.floorEntry(K)"
    ],
    "javax.swing.jmenubar.setborderpainted": [
        "javax.swing.JMenuBar.setBorderPainted(boolean)"
    ],
    "java.net.urlconnection.setifmodifiedsince": [
        "java.net.URLConnection.setIfModifiedSince(long)"
    ],
    "org.w3c.dom.namednodemap.setnameditem": [
        "org.w3c.dom.NamedNodeMap.setNamedItem(org.w3c.dom.Node)"
    ],
    "javax.swing.plaf.synth.synthmenuitemui.paintborder": [
        "javax.swing.plaf.synth.SynthMenuItemUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.jlayeredpane.paramstring": [
        "javax.swing.JLayeredPane.paramString()"
    ],
    "javax.swing.jlabel.getuiclassid": [
        "javax.swing.JLabel.getUIClassID()"
    ],
    "org.omg.corba.portable.inputstream.read_wstring": [
        "org.omg.CORBA.portable.InputStream.read_wstring()"
    ],
    "java.math.bigdecimal.compareto": [
        "java.math.BigDecimal.compareTo(java.math.BigDecimal)"
    ],
    "javax.swing.jtable.setmodel": [
        "javax.swing.JTable.setModel(javax.swing.table.TableModel)"
    ],
    "javax.management.relation.relationservice.getallrelationtypenames": [
        "javax.management.relation.RelationService.getAllRelationTypeNames()"
    ],
    "javax.swing.tree.defaulttreecelleditor.removecelleditorlistener": [
        "javax.swing.tree.DefaultTreeCellEditor.removeCellEditorListener(javax.swing.event.CellEditorListener)"
    ],
    "java.util.concurrent.threadlocalrandom.longs": [
        "java.util.concurrent.ThreadLocalRandom.longs(long)",
        "java.util.concurrent.ThreadLocalRandom.longs()"
    ],
    "java.awt.image.renderedimage.gettilegridyoffset": [
        "java.awt.image.RenderedImage.getTileGridYOffset()"
    ],
    "java.util.prefs.preferencechangelistener.preferencechange": [
        "java.util.prefs.PreferenceChangeListener.preferenceChange(java.util.prefs.PreferenceChangeEvent)"
    ],
    "org.omg.dynamicany._dynvaluestub.current_member_kind": [
        "org.omg.DynamicAny._DynValueStub.current_member_kind()"
    ],
    "javax.xml.bind.typeconstraintexception.geterrorcode": [
        "javax.xml.bind.TypeConstraintException.getErrorCode()"
    ],
    "java.util.concurrent.delayed.getdelay": [
        "java.util.concurrent.Delayed.getDelay(java.util.concurrent.TimeUnit)"
    ],
    "javax.naming.directory.attributes.iscaseignored": [
        "javax.naming.directory.Attributes.isCaseIgnored()"
    ],
    "org.xml.sax.locator.getcolumnnumber": [
        "org.xml.sax.Locator.getColumnNumber()"
    ],
    "java.awt.image.singlepixelpackedsamplemodel.setdataelements": [
        "java.awt.image.SinglePixelPackedSampleModel.setDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)"
    ],
    "java.beans.beancontext.beancontextchild.addvetoablechangelistener": [
        "java.beans.beancontext.BeanContextChild.addVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)"
    ],
    "javax.xml.crypto.dsig.keyinfo.keyvalue.getpublickey": [
        "javax.xml.crypto.dsig.keyinfo.KeyValue.getPublicKey()"
    ],
    "javax.security.auth.callback.textoutputcallback.getmessagetype": [
        "javax.security.auth.callback.TextOutputCallback.getMessageType()"
    ],
    "java.net.protocolfamily.name": [
        "java.net.ProtocolFamily.name()"
    ],
    "java.util.zip.zipentry.getname": [
        "java.util.zip.ZipEntry.getName()"
    ],
    "java.awt.systemtray.remove": [
        "java.awt.SystemTray.remove(java.awt.TrayIcon)"
    ],
    "javax.swing.plaf.basic.basictoolbarui.getdockingcolor": [
        "javax.swing.plaf.basic.BasicToolBarUI.getDockingColor()"
    ],
    "java.util.concurrent.atomic.atomiclongarray.getandset": [
        "java.util.concurrent.atomic.AtomicLongArray.getAndSet(int,long)"
    ],
    "javax.swing.jtree.removeselectionpath": [
        "javax.swing.JTree.removeSelectionPath(javax.swing.tree.TreePath)"
    ],
    "java.util.concurrent.forkjoinworkerthread.getpool": [
        "java.util.concurrent.ForkJoinWorkerThread.getPool()"
    ],
    "java.awt.cursor.getdefaultcursor": [
        "java.awt.Cursor.getDefaultCursor()"
    ],
    "java.awt.trayicon.getpopupmenu": [
        "java.awt.TrayIcon.getPopupMenu()"
    ],
    "javax.imageio.metadata.iiometadata.getstandardtilenode": [
        "javax.imageio.metadata.IIOMetadata.getStandardTileNode()"
    ],
    "javax.print.attribute.standard.mediasize.equals": [
        "javax.print.attribute.standard.MediaSize.equals(java.lang.Object)"
    ],
    "java.lang.string.lastindexof": [
        "java.lang.String.lastIndexOf(int)",
        "java.lang.String.lastIndexOf(int,int)",
        "java.lang.String.lastIndexOf(java.lang.String)",
        "java.lang.String.lastIndexOf(java.lang.String,int)"
    ],
    "java.awt.image.imagefilter.setpixels": [
        "java.awt.image.ImageFilter.setPixels(int,int,int,int,java.awt.image.ColorModel,byte[],int,int)",
        "java.awt.image.ImageFilter.setPixels(int,int,int,int,java.awt.image.ColorModel,int[],int,int)"
    ],
    "java.text.simpledateformat.topattern": [
        "java.text.SimpleDateFormat.toPattern()"
    ],
    "java.text.collator.getdecomposition": [
        "java.text.Collator.getDecomposition()"
    ],
    "java.nio.charbuffer.read": [
        "java.nio.CharBuffer.read(java.nio.CharBuffer)"
    ],
    "javax.swing.plaf.multi.multitreeui.uninstallui": [
        "javax.swing.plaf.multi.MultiTreeUI.uninstallUI(javax.swing.JComponent)"
    ],
    "javax.management.query.div": [
        "javax.management.Query.div(javax.management.ValueExp,javax.management.ValueExp)"
    ],
    "javax.swing.jtextfield.setdocument": [
        "javax.swing.JTextField.setDocument(javax.swing.text.Document)"
    ],
    "javax.xml.soap.soapfault.removeallfaultsubcodes": [
        "javax.xml.soap.SOAPFault.removeAllFaultSubcodes()"
    ],
    "java.security.signature.initsign": [
        "java.security.Signature.initSign(java.security.PrivateKey)",
        "java.security.Signature.initSign(java.security.PrivateKey,java.security.SecureRandom)"
    ],
    "javax.management.descriptor.getfieldvalue": [
        "javax.management.Descriptor.getFieldValue(java.lang.String)"
    ],
    "java.net.datagramsocket.gettrafficclass": [
        "java.net.DatagramSocket.getTrafficClass()"
    ],
    "java.lang.classloader.findloadedclass": [
        "java.lang.ClassLoader.findLoadedClass(java.lang.String)"
    ],
    "java.lang.byte.decode": [
        "java.lang.Byte.decode(java.lang.String)"
    ],
    "java.net.url.gethost": [
        "java.net.URL.getHost()"
    ],
    "java.sql.struct.getsqltypename": [
        "java.sql.Struct.getSQLTypeName()"
    ],
    "java.security.acl.aclentry.setprincipal": [
        "java.security.acl.AclEntry.setPrincipal(java.security.Principal)"
    ],
    "java.math.biginteger.hashcode": [
        "java.math.BigInteger.hashCode()"
    ],
    "java.rmi.server.remoteobject.getref": [
        "java.rmi.server.RemoteObject.getRef()"
    ],
    "java.time.localdatetime.getyear": [
        "java.time.LocalDateTime.getYear()"
    ],
    "javax.naming.compoundname.add": [
        "javax.naming.CompoundName.add(int,java.lang.String)",
        "javax.naming.CompoundName.add(java.lang.String)"
    ],
    "java.awt.component.processinputmethodevent": [
        "java.awt.Component.processInputMethodEvent(java.awt.event.InputMethodEvent)"
    ],
    "javax.swing.jeditorpane.removehyperlinklistener": [
        "javax.swing.JEditorPane.removeHyperlinkListener(javax.swing.event.HyperlinkListener)"
    ],
    "java.lang.package.getimplementationvendor": [
        "java.lang.Package.getImplementationVendor()"
    ],
    "java.awt.datatransfer.clipboard.getavailabledataflavors": [
        "java.awt.datatransfer.Clipboard.getAvailableDataFlavors()"
    ],
    "java.util.concurrent.concurrenthashmap.equals": [
        "java.util.concurrent.ConcurrentHashMap.equals(java.lang.Object)"
    ],
    "javax.naming.reference.clear": [
        "javax.naming.Reference.clear()"
    ],
    "javax.swing.uidefaults.proxylazyvalue.createvalue": [
        "javax.swing.UIDefaults.ProxyLazyValue.createValue(javax.swing.UIDefaults)"
    ],
    "java.lang.integer.tobinarystring": [
        "java.lang.Integer.toBinaryString(int)"
    ],
    "javax.rmi.corba.portableremoteobjectdelegate.tostub": [
        "javax.rmi.CORBA.PortableRemoteObjectDelegate.toStub(java.rmi.Remote)"
    ],
    "java.security.digestoutputstream.on": [
        "java.security.DigestOutputStream.on(boolean)"
    ],
    "java.net.httpcookie.getcommenturl": [
        "java.net.HttpCookie.getCommentURL()"
    ],
    "org.omg.corba.orb.set_parameters": [
        "org.omg.CORBA.ORB.set_parameters(java.lang.String[],java.util.Properties)",
        "org.omg.CORBA.ORB.set_parameters(java.applet.Applet,java.util.Properties)"
    ],
    "javax.swing.plaf.multi.multimenuitemui.getminimumsize": [
        "javax.swing.plaf.multi.MultiMenuItemUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "java.awt.geom.roundrectangle2d.double.getheight": [
        "java.awt.geom.RoundRectangle2D.Double.getHeight()"
    ],
    "java.sql.resultset.movetocurrentrow": [
        "java.sql.ResultSet.moveToCurrentRow()"
    ],
    "java.awt.displaymode.getbitdepth": [
        "java.awt.DisplayMode.getBitDepth()"
    ],
    "java.rmi.server.remoteobject.hashcode": [
        "java.rmi.server.RemoteObject.hashCode()"
    ],
    "java.time.offsettime.withoffsetsamelocal": [
        "java.time.OffsetTime.withOffsetSameLocal(java.time.ZoneOffset)"
    ],
    "java.nio.channels.multicastchannel.close": [
        "java.nio.channels.MulticastChannel.close()"
    ],
    "javax.swing.text.stylededitorkit.italicaction.actionperformed": [
        "javax.swing.text.StyledEditorKit.ItalicAction.actionPerformed(java.awt.event.ActionEvent)"
    ],
    "java.util.concurrent.atomic.atomicreference.compareandset": [
        "java.util.concurrent.atomic.AtomicReference.compareAndSet(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicReference)",
        "java.util.concurrent.atomic.AtomicReference.compareAndSet(V,V)"
    ],
    "javax.print.attribute.standard.pagesperminutecolor.getcategory": [
        "javax.print.attribute.standard.PagesPerMinuteColor.getCategory()"
    ],
    "javax.swing.table.tablemodel.getcolumnname": [
        "javax.swing.table.TableModel.getColumnName(int)"
    ],
    "javax.swing.plaf.basic.basictableheaderui.getpreferredsize": [
        "javax.swing.plaf.basic.BasicTableHeaderUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "javax.swing.jviewport.addchangelistener": [
        "javax.swing.JViewport.addChangeListener(javax.swing.event.ChangeListener)"
    ],
    "java.util.locale.lookuptag": [
        "java.util.Locale.lookupTag(java.util.List<java.util.Locale.LanguageRange>,java.util.Collection<java.lang.String>)"
    ],
    "java.time.localdate.withmonth": [
        "java.time.LocalDate.withMonth(int)"
    ],
    "java.awt.image.affinetransformop.getbounds2d": [
        "java.awt.image.AffineTransformOp.getBounds2D(java.awt.image.Raster)",
        "java.awt.image.AffineTransformOp.getBounds2D(java.awt.image.BufferedImage)"
    ],
    "javax.xml.xpath.xpath.setxpathfunctionresolver": [
        "javax.xml.xpath.XPath.setXPathFunctionResolver(javax.xml.xpath.XPathFunctionResolver)"
    ],
    "javax.xml.transform.templates.newtransformer": [
        "javax.xml.transform.Templates.newTransformer()"
    ],
    "java.io.streamtokenizer.slashslashcomments": [
        "java.io.StreamTokenizer.slashSlashComments(boolean)"
    ],
    "java.net.datagramsocketimpl.getlocalport": [
        "java.net.DatagramSocketImpl.getLocalPort()"
    ],
    "javax.swing.plaf.synth.synthprogressbarui.paint": [
        "javax.swing.plaf.synth.SynthProgressBarUI.paint(java.awt.Graphics,javax.swing.JComponent)",
        "javax.swing.plaf.synth.SynthProgressBarUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)"
    ],
    "javax.swing.plaf.multi.multiscrollbarui.getminimumsize": [
        "javax.swing.plaf.multi.MultiScrollBarUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "javax.swing.plaf.synth.synthstyle.getfont": [
        "javax.swing.plaf.synth.SynthStyle.getFont(javax.swing.plaf.synth.SynthContext)"
    ],
    "javax.xml.ws.binding.sethandlerchain": [
        "javax.xml.ws.Binding.setHandlerChain(java.util.List<javax.xml.ws.handler.Handler>)"
    ],
    "java.text.rulebasedcollator.getcollationelementiterator": [
        "java.text.RuleBasedCollator.getCollationElementIterator(java.text.CharacterIterator)",
        "java.text.RuleBasedCollator.getCollationElementIterator(java.lang.String)"
    ],
    "javax.xml.crypto.dsig.reference.getdigestinputstream": [
        "javax.xml.crypto.dsig.Reference.getDigestInputStream()"
    ],
    "java.time.localdate.compareto": [
        "java.time.LocalDate.compareTo(java.time.chrono.ChronoLocalDate)"
    ],
    "java.awt.container.getalignmentx": [
        "java.awt.Container.getAlignmentX()"
    ],
    "javax.xml.transform.transformer.geturiresolver": [
        "javax.xml.transform.Transformer.getURIResolver()"
    ],
    "javax.swing.text.compositeview.getnexteastwestvisualpositionfrom": [
        "javax.swing.text.CompositeView.getNextEastWestVisualPositionFrom(int,javax.swing.text.Position.Bias,java.awt.Shape,int,javax.swing.text.Position.Bias[])"
    ],
    "java.util.stream.collectors.groupingby": [
        "java.util.stream.Collectors.groupingBy(java.util.function.Function<? super,? extends K>)",
        "java.util.stream.Collectors.groupingBy(java.util.function.Function<? super,? extends K>,java.util.function.Supplier<M>,java.util.stream.Collector<? super,,D>)",
        "java.util.stream.Collectors.groupingBy(java.util.function.Function<? super,? extends K>,java.util.stream.Collector<? super,,D>)"
    ],
    "javax.naming.compoundname.getall": [
        "javax.naming.CompoundName.getAll()"
    ],
    "javax.swing.tree.treepath.hashcode": [
        "javax.swing.tree.TreePath.hashCode()"
    ],
    "javax.swing.jviewport.addimpl": [
        "javax.swing.JViewport.addImpl(java.awt.Component,java.lang.Object,int)"
    ],
    "javax.activation.filedatasource.getname": [
        "javax.activation.FileDataSource.getName()"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.getselectionmode": [
        "javax.swing.tree.DefaultTreeSelectionModel.getSelectionMode()"
    ],
    "javax.swing.text.html.parser.dtd.defineelement": [
        "javax.swing.text.html.parser.DTD.defineElement(java.lang.String,int,boolean,boolean,javax.swing.text.html.parser.ContentModel,java.util.BitSet,java.util.BitSet,javax.swing.text.html.parser.AttributeList)"
    ],
    "javax.swing.jtextfield.getpreferredsize": [
        "javax.swing.JTextField.getPreferredSize()"
    ],
    "java.lang.character.touppercase": [
        "java.lang.Character.toUpperCase(char)"
    ],
    "org.omg.dynamicany.dynanyfactoryoperations.create_dyn_any": [
        "org.omg.DynamicAny.DynAnyFactoryOperations.create_dyn_any(org.omg.CORBA.Any)"
    ],
    "javax.accessibility.accessibleextendedcomponent.gettitledbordertext": [
        "javax.accessibility.AccessibleExtendedComponent.getTitledBorderText()"
    ],
    "javax.sql.rowset.spi.syncprovider.getproviderid": [
        "javax.sql.rowset.spi.SyncProvider.getProviderID()"
    ],
    "javax.naming.referralexception.skipreferral": [
        "javax.naming.ReferralException.skipReferral()"
    ],
    "javax.swing.plaf.synth.synthdesktoppaneui.propertychange": [
        "javax.swing.plaf.synth.SynthDesktopPaneUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "javax.swing.jseparator.updateui": [
        "javax.swing.JSeparator.updateUI()"
    ],
    "java.awt.image.singlepixelpackedsamplemodel.getpixel": [
        "java.awt.image.SinglePixelPackedSampleModel.getPixel(int,int,int[],java.awt.image.DataBuffer)"
    ],
    "javax.swing.text.defaultstyleddocument.removeelement": [
        "javax.swing.text.DefaultStyledDocument.removeElement(javax.swing.text.Element)"
    ],
    "javax.swing.jlayer.propertychange": [
        "javax.swing.JLayer.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "java.awt.datatransfer.dataflavor.getparameter": [
        "java.awt.datatransfer.DataFlavor.getParameter(java.lang.String)"
    ],
    "java.util.prefs.nodechangelistener.childremoved": [
        "java.util.prefs.NodeChangeListener.childRemoved(java.util.prefs.NodeChangeEvent)"
    ],
    "javax.swing.text.html.htmldocument.getparser": [
        "javax.swing.text.html.HTMLDocument.getParser()"
    ],
    "javax.swing.defaultbuttonmodel.removechangelistener": [
        "javax.swing.DefaultButtonModel.removeChangeListener(javax.swing.event.ChangeListener)"
    ],
    "java.net.cookiehandler.getdefault": [
        "java.net.CookieHandler.getDefault()"
    ],
    "java.math.biginteger.tobytearray": [
        "java.math.BigInteger.toByteArray()"
    ],
    "java.util.timezone.setrawoffset": [
        "java.util.TimeZone.setRawOffset(int)"
    ],
    "java.util.zip.zipfile.size": [
        "java.util.zip.ZipFile.size()"
    ],
    "javax.sql.rowset.serial.serialblob.equals": [
        "javax.sql.rowset.serial.SerialBlob.equals(java.lang.Object)"
    ],
    "java.beans.beans.isinstanceof": [
        "java.beans.Beans.isInstanceOf(java.lang.Object,java.lang.Class<?>)"
    ],
    "java.util.stream.stream.flatmaptodouble": [
        "java.util.stream.Stream.flatMapToDouble(java.util.function.Function<? super,? extends java.util.stream.DoubleStream>)"
    ],
    "java.net.inet4address.gethostaddress": [
        "java.net.Inet4Address.getHostAddress()"
    ],
    "javax.swing.jtoolbar.isborderpainted": [
        "javax.swing.JToolBar.isBorderPainted()"
    ],
    "javax.swing.jtoolbar.separator.getmaximumsize": [
        "javax.swing.JToolBar.Separator.getMaximumSize()"
    ],
    "java.sql.databasemetadata.gettimedatefunctions": [
        "java.sql.DatabaseMetaData.getTimeDateFunctions()"
    ],
    "javax.accessibility.accessibletext.getafterindex": [
        "javax.accessibility.AccessibleText.getAfterIndex(int,int)"
    ],
    "java.util.concurrent.scheduledexecutorservice.schedulewithfixeddelay": [
        "java.util.concurrent.ScheduledExecutorService.scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)"
    ],
    "javax.swing.jcombobox.getselectedobjects": [
        "javax.swing.JComboBox.getSelectedObjects()"
    ],
    "java.awt.component.getlocationonscreen": [
        "java.awt.Component.getLocationOnScreen()"
    ],
    "org.omg.corba.environment.exception": [
        "org.omg.CORBA.Environment.exception()",
        "org.omg.CORBA.Environment.exception(java.lang.Exception)"
    ],
    "javax.swing.jcomponent.setmaximumsize": [
        "javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"
    ],
    "java.awt.image.pixelgrabber.abortgrabbing": [
        "java.awt.image.PixelGrabber.abortGrabbing()"
    ],
    "javax.swing.scrollpanelayout.sethorizontalscrollbarpolicy": [
        "javax.swing.ScrollPaneLayout.setHorizontalScrollBarPolicy(int)"
    ],
    "javax.xml.parsers.saxparserfactory.isnamespaceaware": [
        "javax.xml.parsers.SAXParserFactory.isNamespaceAware()"
    ],
    "javax.xml.bind.unmarshaller.unmarshal": [
        "javax.xml.bind.Unmarshaller.unmarshal(java.net.URL)",
        "javax.xml.bind.Unmarshaller.unmarshal(org.w3c.dom.Node)",
        "javax.xml.bind.Unmarshaller.unmarshal(javax.xml.transform.Source,java.lang.Class<T>)",
        "javax.xml.bind.Unmarshaller.unmarshal(javax.xml.stream.XMLStreamReader)",
        "javax.xml.bind.Unmarshaller.unmarshal(javax.xml.stream.XMLEventReader)",
        "javax.xml.bind.Unmarshaller.unmarshal(java.io.Reader)",
        "javax.xml.bind.Unmarshaller.unmarshal(javax.xml.transform.Source)",
        "javax.xml.bind.Unmarshaller.unmarshal(java.io.File)"
    ],
    "java.awt.font.textlayout.getcaretshape": [
        "java.awt.font.TextLayout.getCaretShape(java.awt.font.TextHitInfo)",
        "java.awt.font.TextLayout.getCaretShape(java.awt.font.TextHitInfo,java.awt.geom.Rectangle2D)"
    ],
    "java.util.priorityqueue.add": [
        "java.util.PriorityQueue.add(java.util.PriorityQueue)",
        "java.util.PriorityQueue.add(E)"
    ],
    "javax.imageio.imagewriter.processthumbnailcomplete": [
        "javax.imageio.ImageWriter.processThumbnailComplete()"
    ],
    "java.awt.print.pageformat.getimageabley": [
        "java.awt.print.PageFormat.getImageableY()"
    ],
    "javax.print.attribute.standard.jobmediasheetscompleted.getcategory": [
        "javax.print.attribute.standard.JobMediaSheetsCompleted.getCategory()"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getusertextcolor": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getUserTextColor()"
    ],
    "javax.swing.plaf.basic.basictreeui.getdroplinerect": [
        "javax.swing.plaf.basic.BasicTreeUI.getDropLineRect(javax.swing.JTree.DropLocation)"
    ],
    "java.util.concurrent.locks.stampedlock.readlock": [
        "java.util.concurrent.locks.StampedLock.readLock()"
    ],
    "javax.xml.stream.xmlinputfactory.seteventallocator": [
        "javax.xml.stream.XMLInputFactory.setEventAllocator(javax.xml.stream.util.XMLEventAllocator)"
    ],
    "javax.crypto.keygenerator.generatekey": [
        "javax.crypto.KeyGenerator.generateKey()"
    ],
    "java.beans.visibility.oktousegui": [
        "java.beans.Visibility.okToUseGui()"
    ],
    "org.w3c.dom.node.appendchild": [
        "org.w3c.dom.Node.appendChild(org.w3c.dom.Node)"
    ],
    "javax.swing.plaf.multi.multitextui.damagerange": [
        "javax.swing.plaf.multi.MultiTextUI.damageRange(javax.swing.text.JTextComponent,int,int)",
        "javax.swing.plaf.multi.MultiTextUI.damageRange(javax.swing.text.JTextComponent,int,int,javax.swing.text.Position.Bias,javax.swing.text.Position.Bias)"
    ],
    "java.awt.dnd.draggesturerecognizer.setsourceactions": [
        "java.awt.dnd.DragGestureRecognizer.setSourceActions(int)"
    ],
    "java.util.concurrent.completablefuture.accepteitherasync": [
        "java.util.concurrent.CompletableFuture.acceptEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Consumer<? super T>,java.util.concurrent.Executor)",
        "java.util.concurrent.CompletableFuture.acceptEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Consumer<? super T>)"
    ],
    "javax.swing.plaf.basic.basicinternalframeui.activateframe": [
        "javax.swing.plaf.basic.BasicInternalFrameUI.activateFrame(javax.swing.JInternalFrame)"
    ],
    "java.beans.propertychangelistenerproxy.getpropertyname": [
        "java.beans.PropertyChangeListenerProxy.getPropertyName()"
    ],
    "javax.security.auth.subjectdomaincombiner.getsubject": [
        "javax.security.auth.SubjectDomainCombiner.getSubject()"
    ],
    "java.awt.image.rescaleop.getpoint2d": [
        "java.awt.image.RescaleOp.getPoint2D(java.awt.geom.Point2D,java.awt.geom.Point2D)"
    ],
    "java.util.sortedmap.tailmap": [
        "java.util.SortedMap.tailMap(K)",
        "java.util.SortedMap.tailMap(java.util.SortedMap)"
    ],
    "java.nio.bytebuffer.getdouble": [
        "java.nio.ByteBuffer.getDouble()",
        "java.nio.ByteBuffer.getDouble(int)"
    ],
    "java.lang.management.memorymanagermxbean.getname": [
        "java.lang.management.MemoryManagerMXBean.getName()"
    ],
    "java.awt.component.removemousemotionlistener": [
        "java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"
    ],
    "javax.management.openmbean.openmbeanoperationinfo.getreturntype": [
        "javax.management.openmbean.OpenMBeanOperationInfo.getReturnType()"
    ],
    "javax.swing.text.layoutqueue.getdefaultqueue": [
        "javax.swing.text.LayoutQueue.getDefaultQueue()"
    ],
    "java.util.navigablemap.pollfirstentry": [
        "java.util.NavigableMap.pollFirstEntry()"
    ],
    "java.beans.beancontext.beancontextsupport.vetoablechange": [
        "java.beans.beancontext.BeanContextSupport.vetoableChange(java.beans.PropertyChangeEvent)"
    ],
    "java.awt.adjustable.setvalue": [
        "java.awt.Adjustable.setValue(int)"
    ],
    "javax.swing.plaf.synth.synthpainter.painttabbedpanetabborder": [
        "javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int,int)",
        "javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)"
    ],
    "java.util.concurrent.atomic.atomicreference.get": [
        "java.util.concurrent.atomic.AtomicReference.get()"
    ],
    "javax.swing.text.jtextcomponent.getaccessiblecontext": [
        "javax.swing.text.JTextComponent.getAccessibleContext()"
    ],
    "javax.lang.model.element.name.contentequals": [
        "javax.lang.model.element.Name.contentEquals(java.lang.CharSequence)"
    ],
    "javax.sound.midi.sequence.getdivisiontype": [
        "javax.sound.midi.Sequence.getDivisionType()"
    ],
    "java.awt.geom.cubiccurve2d.getx2": [
        "java.awt.geom.CubicCurve2D.getX2()"
    ],
    "java.sql.statement.setfetchsize": [
        "java.sql.Statement.setFetchSize(int)"
    ],
    "java.lang.reflect.executable.getmodifiers": [
        "java.lang.reflect.Executable.getModifiers()"
    ],
    "java.util.enummap.values": [
        "java.util.EnumMap.values()"
    ],
    "java.beans.beancontext.beancontextchildsupport.releasebeancontextresources": [
        "java.beans.beancontext.BeanContextChildSupport.releaseBeanContextResources()"
    ],
    "java.util.regex.matcher.end": [
        "java.util.regex.Matcher.end()",
        "java.util.regex.Matcher.end(java.lang.String)",
        "java.util.regex.Matcher.end(int)"
    ],
    "javax.swing.uimanager.getstring": [
        "javax.swing.UIManager.getString(java.lang.Object,java.util.Locale)",
        "javax.swing.UIManager.getString(java.lang.Object)"
    ],
    "javax.sound.sampled.audioformat.getchannels": [
        "javax.sound.sampled.AudioFormat.getChannels()"
    ],
    "java.net.httpcookie.getdomain": [
        "java.net.HttpCookie.getDomain()"
    ],
    "java.net.datagramsocket.connect": [
        "java.net.DatagramSocket.connect(java.net.InetAddress,int)"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readcharacterstream": [
        "javax.sql.rowset.serial.SQLInputImpl.readCharacterStream()"
    ],
    "java.awt.im.spi.inputmethod.dispose": [
        "java.awt.im.spi.InputMethod.dispose()"
    ],
    "java.awt.font.texthitinfo.getcharindex": [
        "java.awt.font.TextHitInfo.getCharIndex()"
    ],
    "javax.net.ssl.sslsocket.removehandshakecompletedlistener": [
        "javax.net.ssl.SSLSocket.removeHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)"
    ],
    "javax.swing.plaf.basic.basicprogressbarui.startanimationtimer": [
        "javax.swing.plaf.basic.BasicProgressBarUI.startAnimationTimer()"
    ],
    "java.util.comparator.nullslast": [
        "java.util.Comparator.nullsLast(java.util.Comparator<? super T>)"
    ],
    "org.omg.dynamicany._dynvaluestub.current_member_name": [
        "org.omg.DynamicAny._DynValueStub.current_member_name()"
    ],
    "java.time.offsetdatetime.compareto": [
        "java.time.OffsetDateTime.compareTo(java.time.OffsetDateTime)"
    ],
    "javax.swing.text.html.stylesheet.addcssattributefromhtml": [
        "javax.swing.text.html.StyleSheet.addCSSAttributeFromHTML(javax.swing.text.MutableAttributeSet,javax.swing.text.html.CSS.Attribute,java.lang.String)"
    ],
    "javax.script.simplescriptcontext.getreader": [
        "javax.script.SimpleScriptContext.getReader()"
    ],
    "java.lang.stacktraceelement.getlinenumber": [
        "java.lang.StackTraceElement.getLineNumber()"
    ],
    "java.text.decimalformatsymbols.getavailablelocales": [
        "java.text.DecimalFormatSymbols.getAvailableLocales()"
    ],
    "javax.swing.plaf.multi.multipanelui.createui": [
        "javax.swing.plaf.multi.MultiPanelUI.createUI(javax.swing.JComponent)"
    ],
    "javax.script.scriptenginefactory.getmethodcallsyntax": [
        "javax.script.ScriptEngineFactory.getMethodCallSyntax(java.lang.String,java.lang.String,java.lang.String...)"
    ],
    "javax.swing.jtoolbar.separator.getseparatorsize": [
        "javax.swing.JToolBar.Separator.getSeparatorSize()"
    ],
    "java.security.spec.ecpoint.getaffinex": [
        "java.security.spec.ECPoint.getAffineX()"
    ],
    "java.text.format.parseobject": [
        "java.text.Format.parseObject(java.lang.String)",
        "java.text.Format.parseObject(java.lang.String,java.text.ParsePosition)"
    ],
    "java.lang.reflect.field.setbyte": [
        "java.lang.reflect.Field.setByte(java.lang.Object,byte)"
    ],
    "java.nio.file.spi.filesystemprovider.copy": [
        "java.nio.file.spi.FileSystemProvider.copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption)",
        "java.nio.file.spi.FileSystemProvider.copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption...)"
    ],
    "java.lang.management.memorypoolmxbean.getusagethresholdcount": [
        "java.lang.management.MemoryPoolMXBean.getUsageThresholdCount()"
    ],
    "java.awt.geom.line2d.getp1": [
        "java.awt.geom.Line2D.getP1()"
    ],
    "java.sql.connection.gettransactionisolation": [
        "java.sql.Connection.getTransactionIsolation()"
    ],
    "javax.naming.directory.searchcontrols.setsearchscope": [
        "javax.naming.directory.SearchControls.setSearchScope(int)"
    ],
    "javax.tools.diagnostic.getmessage": [
        "javax.tools.Diagnostic.getMessage(java.util.Locale)"
    ],
    "java.awt.font.glyphmetrics.gettype": [
        "java.awt.font.GlyphMetrics.getType()"
    ],
    "java.util.zip.zipinputstream.read": [
        "java.util.zip.ZipInputStream.read(byte[],int,int)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintsplitpanedividerbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintSplitPaneDividerBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",
        "javax.swing.plaf.synth.SynthPainter.paintSplitPaneDividerBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)"
    ],
    "java.io.randomaccessfile.setlength": [
        "java.io.RandomAccessFile.setLength(long)"
    ],
    "java.awt.image.packedcolormodel.getalpharaster": [
        "java.awt.image.PackedColorModel.getAlphaRaster(java.awt.image.WritableRaster)"
    ],
    "java.lang.long.max": [
        "java.lang.Long.max(long,long)"
    ],
    "java.util.concurrent.locks.abstractqueuedlongsynchronizer.tryreleaseshared": [
        "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryReleaseShared(long)"
    ],
    "java.awt.geom.rectangularshape.getx": [
        "java.awt.geom.RectangularShape.getX()"
    ],
    "org.omg.corba.any.insert_float": [
        "org.omg.CORBA.Any.insert_float(float)"
    ],
    "javax.swing.celleditor.addcelleditorlistener": [
        "javax.swing.CellEditor.addCellEditorListener(javax.swing.event.CellEditorListener)"
    ],
    "java.nio.charset.charset.canencode": [
        "java.nio.charset.Charset.canEncode()"
    ],
    "javax.imageio.metadata.iiometadatanode.issamenode": [
        "javax.imageio.metadata.IIOMetadataNode.isSameNode(org.w3c.dom.Node)"
    ],
    "javax.xml.soap.soapfault.adddetail": [
        "javax.xml.soap.SOAPFault.addDetail()"
    ],
    "javax.xml.soap.saajmetafactory.newmessagefactory": [
        "javax.xml.soap.SAAJMetaFactory.newMessageFactory(java.lang.String)"
    ],
    "java.lang.reflect.array.getchar": [
        "java.lang.reflect.Array.getChar(java.lang.Object,int)"
    ],
    "java.util.abstractqueue.remove": [
        "java.util.AbstractQueue.remove()"
    ],
    "java.nio.file.attribute.dosfileattributeview.sethidden": [
        "java.nio.file.attribute.DosFileAttributeView.setHidden(boolean)"
    ],
    "java.awt.container.setfocustraversalpolicy": [
        "java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"
    ],
    "java.awt.pageattributes.setprintquality": [
        "java.awt.PageAttributes.setPrintQuality(java.awt.PageAttributes.PrintQualityType)",
        "java.awt.PageAttributes.setPrintQuality(int)"
    ],
    "java.security.cert.certpath.hashcode": [
        "java.security.cert.CertPath.hashCode()"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.getpropertychangelisteners": [
        "javax.swing.tree.DefaultTreeSelectionModel.getPropertyChangeListeners()"
    ],
    "javax.swing.abstractbutton.gettext": [
        "javax.swing.AbstractButton.getText()"
    ],
    "javax.sound.sampled.audiosystem.gettargetencodings": [
        "javax.sound.sampled.AudioSystem.getTargetEncodings(javax.sound.sampled.AudioFormat)",
        "javax.sound.sampled.AudioSystem.getTargetEncodings(javax.sound.sampled.AudioFormat.Encoding)"
    ],
    "javax.swing.spinnernumbermodel.getpreviousvalue": [
        "javax.swing.SpinnerNumberModel.getPreviousValue()"
    ],
    "javax.swing.jinternalframe.setdesktopicon": [
        "javax.swing.JInternalFrame.setDesktopIcon(javax.swing.JInternalFrame.JDesktopIcon)"
    ],
    "org.omg.corba.request.add_inout_arg": [
        "org.omg.CORBA.Request.add_inout_arg()"
    ],
    "java.awt.robot.mousemove": [
        "java.awt.Robot.mouseMove(int,int)"
    ],
    "java.sql.connection.rollback": [
        "java.sql.Connection.rollback(java.sql.Savepoint)",
        "java.sql.Connection.rollback()"
    ],
    "java.lang.invoke.methodtype.tostring": [
        "java.lang.invoke.MethodType.toString()"
    ],
    "javax.swing.text.styleddocument.getlogicalstyle": [
        "javax.swing.text.StyledDocument.getLogicalStyle(int)"
    ],
    "java.util.prefs.preferencesfactory.systemroot": [
        "java.util.prefs.PreferencesFactory.systemRoot()"
    ],
    "java.time.format.formatstyle.valueof": [
        "java.time.format.FormatStyle.valueOf(java.lang.String)"
    ],
    "java.awt.toolkit.addpropertychangelistener": [
        "java.awt.Toolkit.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"
    ],
    "java.util.jar.manifest.write": [
        "java.util.jar.Manifest.write(java.io.OutputStream)"
    ],
    "java.nio.file.attribute.posixfilepermissions.fromstring": [
        "java.nio.file.attribute.PosixFilePermissions.fromString(java.lang.String)"
    ],
    "java.security.spec.rsamultiprimeprivatecrtkeyspec.getprimeexponentp": [
        "java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPrimeExponentP()"
    ],
    "org.omg.dynamicany._dynvaluestub.insert_float": [
        "org.omg.DynamicAny._DynValueStub.insert_float(float)"
    ],
    "javax.swing.text.view.getelement": [
        "javax.swing.text.View.getElement()"
    ],
    "javax.xml.stream.events.startdocument.getsystemid": [
        "javax.xml.stream.events.StartDocument.getSystemId()"
    ],
    "java.awt.geom.roundrectangle2d.double.getwidth": [
        "java.awt.geom.RoundRectangle2D.Double.getWidth()"
    ],
    "java.lang.math.min": [
        "java.lang.Math.min(double,double)",
        "java.lang.Math.min(int,int)",
        "java.lang.Math.min(float,float)",
        "java.lang.Math.min(long,long)"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readfloat": [
        "javax.sql.rowset.serial.SQLInputImpl.readFloat()"
    ],
    "java.util.concurrent.concurrenthashmap.keysetview.add": [
        "java.util.concurrent.ConcurrentHashMap.KeySetView.add(K)",
        "java.util.concurrent.ConcurrentHashMap.KeySetView.add(java.util.concurrent.ConcurrentHashMap.KeySetView)"
    ],
    "org.omg.cosnaming._namingcontextstub.rebind": [
        "org.omg.CosNaming._NamingContextStub.rebind(org.omg.CosNaming.NameComponent[],org.omg.CORBA.Object)"
    ],
    "java.rmi.activation.activationdesc.getgroupid": [
        "java.rmi.activation.ActivationDesc.getGroupID()"
    ],
    "javax.sound.midi.synthesizer.issoundbanksupported": [
        "javax.sound.midi.Synthesizer.isSoundbankSupported(javax.sound.midi.Soundbank)"
    ],
    "javax.swing.jtree.dynamicutiltreenode.createchildren": [
        "javax.swing.JTree.DynamicUtilTreeNode.createChildren(javax.swing.tree.DefaultMutableTreeNode,java.lang.Object)"
    ],
    "java.security.cert.certificatefactory.generatecertificate": [
        "java.security.cert.CertificateFactory.generateCertificate(java.io.InputStream)"
    ],
    "javax.lang.model.type.arraytype.getcomponenttype": [
        "javax.lang.model.type.ArrayType.getComponentType()"
    ],
    "javax.swing.plaf.nimbus.abstractregionpainter.paint": [
        "javax.swing.plaf.nimbus.AbstractRegionPainter.paint(java.awt.Graphics2D,javax.swing.JComponent,int,int)"
    ],
    "org.omg.portableinterceptor.objectreferencefactory.make_object": [
        "org.omg.PortableInterceptor.ObjectReferenceFactory.make_object(java.lang.String,byte[])"
    ],
    "javax.swing.jeditorpane.registereditorkitforcontenttype": [
        "javax.swing.JEditorPane.registerEditorKitForContentType(java.lang.String,java.lang.String)",
        "javax.swing.JEditorPane.registerEditorKitForContentType(java.lang.String,java.lang.String,java.lang.ClassLoader)"
    ],
    "javax.swing.jcombobox.setrenderer": [
        "javax.swing.JComboBox.setRenderer(javax.swing.ListCellRenderer<? super javax.swing.JComboBox>)"
    ],
    "javax.xml.parsers.documentbuilder.reset": [
        "javax.xml.parsers.DocumentBuilder.reset()"
    ],
    "java.awt.menuitem.getactioncommand": [
        "java.awt.MenuItem.getActionCommand()"
    ],
    "java.awt.event.itemevent.getitemselectable": [
        "java.awt.event.ItemEvent.getItemSelectable()"
    ],
    "java.sql.connection.settransactionisolation": [
        "java.sql.Connection.setTransactionIsolation(int)"
    ],
    "java.awt.awteventmulticaster.getlisteners": [
        "java.awt.AWTEventMulticaster.getListeners(java.util.EventListener,java.lang.Class<T>)"
    ],
    "javax.xml.soap.attachmentpart.getdatahandler": [
        "javax.xml.soap.AttachmentPart.getDataHandler()"
    ],
    "javax.net.ssl.handshakecompletedlistener.handshakecompleted": [
        "javax.net.ssl.HandshakeCompletedListener.handshakeCompleted(javax.net.ssl.HandshakeCompletedEvent)"
    ],
    "javax.swing.table.jtableheader.getdraggedcolumn": [
        "javax.swing.table.JTableHeader.getDraggedColumn()"
    ],
    "javax.swing.plaf.synth.synthmenuui.paintborder": [
        "javax.swing.plaf.synth.SynthMenuUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.tree.treenode.getindex": [
        "javax.swing.tree.TreeNode.getIndex(javax.swing.tree.TreeNode)"
    ],
    "javax.swing.jtoolbar.getuiclassid": [
        "javax.swing.JToolBar.getUIClassID()"
    ],
    "javax.swing.tree.defaultmutabletreenode.getindex": [
        "javax.swing.tree.DefaultMutableTreeNode.getIndex(javax.swing.tree.TreeNode)"
    ],
    "java.util.concurrent.locks.condition.signalall": [
        "java.util.concurrent.locks.Condition.signalAll()"
    ],
    "org.ietf.jgss.gsscontext.verifymic": [
        "org.ietf.jgss.GSSContext.verifyMIC(java.io.InputStream,java.io.InputStream,org.ietf.jgss.MessageProp)"
    ],
    "javax.swing.plaf.synth.syntheditorpaneui.createui": [
        "javax.swing.plaf.synth.SynthEditorPaneUI.createUI(javax.swing.JComponent)"
    ],
    "java.awt.image.componentcolormodel.getgreen": [
        "java.awt.image.ComponentColorModel.getGreen(java.lang.Object)",
        "java.awt.image.ComponentColorModel.getGreen(int)"
    ],
    "java.util.prefs.abstractpreferences.putfloat": [
        "java.util.prefs.AbstractPreferences.putFloat(java.lang.String,float)"
    ],
    "javax.swing.text.html.parser.element.getattribute": [
        "javax.swing.text.html.parser.Element.getAttribute(java.lang.String)"
    ],
    "javax.swing.text.tabstop.hashcode": [
        "javax.swing.text.TabStop.hashCode()"
    ],
    "javax.imageio.imagewriter.preparewriteempty": [
        "javax.imageio.ImageWriter.prepareWriteEmpty(javax.imageio.metadata.IIOMetadata,javax.imageio.ImageTypeSpecifier,int,int,javax.imageio.metadata.IIOMetadata,java.util.List<? extends java.awt.image.BufferedImage>,javax.imageio.ImageWriteParam)"
    ],
    "java.time.format.datetimeformatter.getlocale": [
        "java.time.format.DateTimeFormatter.getLocale()"
    ],
    "javax.swing.plaf.synth.synthbuttonui.propertychange": [
        "javax.swing.plaf.synth.SynthButtonUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "java.util.collections.checkedqueue": [
        "java.util.Collections.checkedQueue(java.util.Queue<E>,java.lang.Class<E>)"
    ],
    "java.awt.event.hierarchyevent.paramstring": [
        "java.awt.event.HierarchyEvent.paramString()"
    ],
    "org.omg.corba.portable.objectimpl._non_existent": [
        "org.omg.CORBA.portable.ObjectImpl._non_existent()"
    ],
    "java.util.locale.getlanguage": [
        "java.util.Locale.getLanguage()"
    ],
    "java.awt.geom.path2d.clone": [
        "java.awt.geom.Path2D.clone()"
    ],
    "javax.management.descriptor.setfields": [
        "javax.management.Descriptor.setFields(java.lang.String[],java.lang.Object[])"
    ],
    "org.ietf.jgss.gssname.canonicalize": [
        "org.ietf.jgss.GSSName.canonicalize(org.ietf.jgss.Oid)"
    ],
    "javax.swing.plaf.splitpaneui.getdividerlocation": [
        "javax.swing.plaf.SplitPaneUI.getDividerLocation(javax.swing.JSplitPane)"
    ],
    "java.lang.threadlocal.get": [
        "java.lang.ThreadLocal.get()"
    ],
    "java.awt.keyboardfocusmanager.clearglobalfocusowner": [
        "java.awt.KeyboardFocusManager.clearGlobalFocusOwner()"
    ],
    "javax.swing.jcomponent.putclientproperty": [
        "javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"
    ],
    "java.text.decimalformat.setparseintegeronly": [
        "java.text.DecimalFormat.setParseIntegerOnly(boolean)"
    ],
    "javax.imageio.spi.iioregistry.getdefaultinstance": [
        "javax.imageio.spi.IIORegistry.getDefaultInstance()"
    ],
    "javax.security.sasl.saslclientfactory.createsaslclient": [
        "javax.security.sasl.SaslClientFactory.createSaslClient(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,,?>,javax.security.auth.callback.CallbackHandler)"
    ],
    "javax.management.relation.relationsupport.getreferencedmbeans": [
        "javax.management.relation.RelationSupport.getReferencedMBeans()"
    ],
    "java.security.keystore.getentry": [
        "java.security.KeyStore.getEntry(java.lang.String,java.security.KeyStore.ProtectionParameter)"
    ],
    "javax.swing.jmenu.getmenucomponent": [
        "javax.swing.JMenu.getMenuComponent(int)"
    ],
    "javax.xml.crypto.dsig.keyinfo.keyinfofactory.newkeyinfo": [
        "javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyInfo(java.util.List)",
        "javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyInfo(java.util.List,java.lang.String)"
    ],
    "javax.swing.tree.defaulttreemodel.getroot": [
        "javax.swing.tree.DefaultTreeModel.getRoot()"
    ],
    "java.awt.geom.arc2d.float.setanglestart": [
        "java.awt.geom.Arc2D.Float.setAngleStart(double)"
    ],
    "javax.swing.plaf.multi.multitableui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiTableUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "java.text.choiceformat.hashcode": [
        "java.text.ChoiceFormat.hashCode()"
    ],
    "java.net.authenticator.setdefault": [
        "java.net.Authenticator.setDefault(java.net.Authenticator)"
    ],
    "java.util.concurrent.threadpoolexecutor.finalize": [
        "java.util.concurrent.ThreadPoolExecutor.finalize()"
    ],
    "java.io.filterreader.mark": [
        "java.io.FilterReader.mark(int)"
    ],
    "javax.swing.jcomponent.getpreferredsize": [
        "javax.swing.JComponent.getPreferredSize()"
    ],
    "org.w3c.dom.element.removeattributens": [
        "org.w3c.dom.Element.removeAttributeNS(java.lang.String,java.lang.String)"
    ],
    "org.omg.dynamicany._dynstructstub.insert_longlong": [
        "org.omg.DynamicAny._DynStructStub.insert_longlong(long)"
    ],
    "java.util.weakhashmap.values": [
        "java.util.WeakHashMap.values()"
    ],
    "javax.net.ssl.sslcontextspi.enginegetdefaultsslparameters": [
        "javax.net.ssl.SSLContextSpi.engineGetDefaultSSLParameters()"
    ],
    "javax.sound.midi.sequencer.removemetaeventlistener": [
        "javax.sound.midi.Sequencer.removeMetaEventListener(javax.sound.midi.MetaEventListener)"
    ],
    "javax.management.descriptor.getfieldvalues": [
        "javax.management.Descriptor.getFieldValues(java.lang.String...)"
    ],
    "javax.swing.plaf.multi.multisplitpaneui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiSplitPaneUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "java.security.policy.getpolicy": [
        "java.security.Policy.getPolicy()"
    ],
    "java.awt.font.imagegraphicattribute.hashcode": [
        "java.awt.font.ImageGraphicAttribute.hashCode()"
    ],
    "javax.xml.ws.wsaddressing.w3cendpointreferencebuilder.endpointname": [
        "javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.endpointName(javax.xml.namespace.QName)"
    ],
    "java.lang.math.max": [
        "java.lang.Math.max(double,double)",
        "java.lang.Math.max(float,float)",
        "java.lang.Math.max(long,long)",
        "java.lang.Math.max(int,int)"
    ],
    "javax.script.bindings.putall": [
        "javax.script.Bindings.putAll(java.util.Map<? extends,? extends java.lang.Object>)"
    ],
    "javax.swing.text.jtextcomponent.getactions": [
        "javax.swing.text.JTextComponent.getActions()"
    ],
    "java.io.objectinputstream.readstreamheader": [
        "java.io.ObjectInputStream.readStreamHeader()"
    ],
    "javax.swing.tree.defaultmutabletreenode.remove": [
        "javax.swing.tree.DefaultMutableTreeNode.remove(int)",
        "javax.swing.tree.DefaultMutableTreeNode.remove(javax.swing.tree.MutableTreeNode)"
    ],
    "javax.management.objectname.getkeypropertylist": [
        "javax.management.ObjectName.getKeyPropertyList()"
    ],
    "java.nio.channels.asynchronouschannelgroup.shutdown": [
        "java.nio.channels.AsynchronousChannelGroup.shutdown()"
    ],
    "javax.swing.tree.fixedheightlayoutcache.setmodel": [
        "javax.swing.tree.FixedHeightLayoutCache.setModel(javax.swing.tree.TreeModel)"
    ],
    "java.util.prefs.abstractpreferences.node": [
        "java.util.prefs.AbstractPreferences.node(java.lang.String)"
    ],
    "java.awt.graphicsenvironment.getlocalgraphicsenvironment": [
        "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()"
    ],
    "java.lang.thread.clone": [
        "java.lang.Thread.clone()"
    ],
    "javax.accessibility.accessiblecontext.getaccessiblerelationset": [
        "javax.accessibility.AccessibleContext.getAccessibleRelationSet()"
    ],
    "org.omg.dynamicany._dynenumstub.component_count": [
        "org.omg.DynamicAny._DynEnumStub.component_count()"
    ],
    "javax.xml.crypto.dsig.dom.domsigncontext.setnextsibling": [
        "javax.xml.crypto.dsig.dom.DOMSignContext.setNextSibling(org.w3c.dom.Node)"
    ],
    "org.omg.corba.anyholder._read": [
        "org.omg.CORBA.AnyHolder._read(org.omg.CORBA.portable.InputStream)"
    ],
    "java.awt.radialgradientpaint.getfocuspoint": [
        "java.awt.RadialGradientPaint.getFocusPoint()"
    ],
    "javax.swing.tree.defaulttreemodel.firetreenodesinserted": [
        "javax.swing.tree.DefaultTreeModel.fireTreeNodesInserted(java.lang.Object,java.lang.Object[],int[],java.lang.Object[])"
    ],
    "javax.imageio.imagereader.getnumimages": [
        "javax.imageio.ImageReader.getNumImages(boolean)"
    ],
    "java.text.attributedstring.addattributes": [
        "java.text.AttributedString.addAttributes(java.util.Map<? extends,?>,int,int)"
    ],
    "java.awt.pageattributes.clone": [
        "java.awt.PageAttributes.clone()"
    ],
    "javax.swing.colorchooser.colorselectionmodel.removechangelistener": [
        "javax.swing.colorchooser.ColorSelectionModel.removeChangeListener(javax.swing.event.ChangeListener)"
    ],
    "java.nio.charset.charsetdecoder.decode": [
        "java.nio.charset.CharsetDecoder.decode(java.nio.ByteBuffer)"
    ],
    "javax.sound.sampled.audiofileformat.type.tostring": [
        "javax.sound.sampled.AudioFileFormat.Type.toString()"
    ],
    "java.awt.container.addcontainerlistener": [
        "java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"
    ],
    "java.awt.geom.cubiccurve2d.getp1": [
        "java.awt.geom.CubicCurve2D.getP1()"
    ],
    "javax.xml.crypto.dsig.xmlobject.getencoding": [
        "javax.xml.crypto.dsig.XMLObject.getEncoding()"
    ],
    "javax.swing.jtable.changeselection": [
        "javax.swing.JTable.changeSelection(int,int,boolean,boolean)"
    ],
    "java.lang.processbuilder.redirect.appendto": [
        "java.lang.ProcessBuilder.Redirect.appendTo(java.io.File)"
    ],
    "javax.security.auth.callback.namecallback.getname": [
        "javax.security.auth.callback.NameCallback.getName()"
    ],
    "javax.swing.text.stylededitorkit.styledtextaction.geteditor": [
        "javax.swing.text.StyledEditorKit.StyledTextAction.getEditor(java.awt.event.ActionEvent)"
    ],
    "javax.swing.abstractbutton.getdisabledicon": [
        "javax.swing.AbstractButton.getDisabledIcon()"
    ],
    "javax.swing.plaf.synth.synthprogressbarui.update": [
        "javax.swing.plaf.synth.SynthProgressBarUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.plaf.basic.basicinternalframeui.deiconifyframe": [
        "javax.swing.plaf.basic.BasicInternalFrameUI.deiconifyFrame(javax.swing.JInternalFrame)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintdesktopiconbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintDesktopIconBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "org.omg.corba.localobject._get_interface": [
        "org.omg.CORBA.LocalObject._get_interface()"
    ],
    "java.awt.choice.getitem": [
        "java.awt.Choice.getItem(int)"
    ],
    "java.awt.image.colormodel.createcompatiblesamplemodel": [
        "java.awt.image.ColorModel.createCompatibleSampleModel(int,int)"
    ],
    "java.awt.renderinghints.keyset": [
        "java.awt.RenderingHints.keySet()"
    ],
    "org.omg.portableinterceptor.serverrequestinterceptoroperations.receive_request_service_contexts": [
        "org.omg.PortableInterceptor.ServerRequestInterceptorOperations.receive_request_service_contexts(org.omg.PortableInterceptor.ServerRequestInfo)"
    ],
    "javax.lang.model.type.wildcardtype.getextendsbound": [
        "javax.lang.model.type.WildcardType.getExtendsBound()"
    ],
    "java.time.temporal.temporaladjusters.lastinmonth": [
        "java.time.temporal.TemporalAdjusters.lastInMonth(java.time.DayOfWeek)"
    ],
    "javax.swing.jinternalframe.paramstring": [
        "javax.swing.JInternalFrame.paramString()"
    ],
    "org.omg.portableinterceptor.clientrequestinfooperations.get_effective_component": [
        "org.omg.PortableInterceptor.ClientRequestInfoOperations.get_effective_component(int)"
    ],
    "javax.swing.text.html.htmldocument.getpreservesunknowntags": [
        "javax.swing.text.html.HTMLDocument.getPreservesUnknownTags()"
    ],
    "java.lang.strictmath.rint": [
        "java.lang.StrictMath.rint(double)"
    ],
    "javax.swing.buttonmodel.setgroup": [
        "javax.swing.ButtonModel.setGroup(javax.swing.ButtonGroup)"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.getminimumdividerlocation": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.getMinimumDividerLocation(javax.swing.JSplitPane)"
    ],
    "java.awt.dnd.dragsourcecontext.getsourceactions": [
        "java.awt.dnd.DragSourceContext.getSourceActions()"
    ],
    "java.lang.threadgroup.getparent": [
        "java.lang.ThreadGroup.getParent()"
    ],
    "javax.swing.plaf.multi.multiprogressbarui.getuis": [
        "javax.swing.plaf.multi.MultiProgressBarUI.getUIs()"
    ],
    "java.time.offsetdatetime.until": [
        "java.time.OffsetDateTime.until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)"
    ],
    "javax.swing.swingworker.run": [
        "javax.swing.SwingWorker.run()"
    ],
    "javax.swing.text.attributeset.copyattributes": [
        "javax.swing.text.AttributeSet.copyAttributes()"
    ],
    "javax.xml.crypto.dsig.xmlsignature.validate": [
        "javax.xml.crypto.dsig.XMLSignature.validate(javax.xml.crypto.dsig.XMLValidateContext)"
    ],
    "javax.naming.ldap.basiccontrol.getencodedvalue": [
        "javax.naming.ldap.BasicControl.getEncodedValue()"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.setpopupvisible": [
        "javax.swing.plaf.basic.BasicComboBoxUI.setPopupVisible(javax.swing.JComboBox,boolean)"
    ],
    "java.time.chrono.isochronology.date": [
        "java.time.chrono.IsoChronology.date(int,int,int)",
        "java.time.chrono.IsoChronology.date(java.time.chrono.Era,int,int,int)",
        "java.time.chrono.IsoChronology.date(java.time.temporal.TemporalAccessor)"
    ],
    "java.sql.callablestatement.registeroutparameter": [
        "java.sql.CallableStatement.registerOutParameter(int,int,int)",
        "java.sql.CallableStatement.registerOutParameter(int,java.sql.SQLType)",
        "java.sql.CallableStatement.registerOutParameter(int,int)",
        "java.sql.CallableStatement.registerOutParameter(java.lang.String,int,int)",
        "java.sql.CallableStatement.registerOutParameter(java.lang.String,int)",
        "java.sql.CallableStatement.registerOutParameter(java.lang.String,java.sql.SQLType)",
        "java.sql.CallableStatement.registerOutParameter(java.lang.String,java.sql.SQLType,int)",
        "java.sql.CallableStatement.registerOutParameter(int,java.sql.SQLType,int)"
    ],
    "java.awt.menuitem.processactionevent": [
        "java.awt.MenuItem.processActionEvent(java.awt.event.ActionEvent)"
    ],
    "javax.swing.table.abstracttablemodel.gettablemodellisteners": [
        "javax.swing.table.AbstractTableModel.getTableModelListeners()"
    ],
    "javax.swing.grouplayout.setautocreatecontainergaps": [
        "javax.swing.GroupLayout.setAutoCreateContainerGaps(boolean)"
    ],
    "javax.swing.plaf.basic.basicsliderui.getbaseline": [
        "javax.swing.plaf.basic.BasicSliderUI.getBaseline(javax.swing.JComponent,int,int)"
    ],
    "org.xml.sax.helpers.defaulthandler.fatalerror": [
        "org.xml.sax.helpers.DefaultHandler.fatalError(org.xml.sax.SAXParseException)"
    ],
    "javax.swing.abstractbutton.gethideactiontext": [
        "javax.swing.AbstractButton.getHideActionText()"
    ],
    "javax.swing.abstractbutton.removeitemlistener": [
        "javax.swing.AbstractButton.removeItemListener(java.awt.event.ItemListener)"
    ],
    "javax.security.auth.kerberos.kerberoskey.destroy": [
        "javax.security.auth.kerberos.KerberosKey.destroy()"
    ],
    "javax.script.abstractscriptengine.getscriptcontext": [
        "javax.script.AbstractScriptEngine.getScriptContext(javax.script.Bindings)"
    ],
    "javax.swing.jtable.createdefaultdatamodel": [
        "javax.swing.JTable.createDefaultDataModel()"
    ],
    "javax.swing.text.defaultcaret.paint": [
        "javax.swing.text.DefaultCaret.paint(java.awt.Graphics)"
    ],
    "java.awt.component.revalidate": [
        "java.awt.Component.revalidate()"
    ],
    "java.lang.management.memorymxbean.gc": [
        "java.lang.management.MemoryMXBean.gc()"
    ],
    "javax.swing.plaf.synth.synthpainter.painttreebackground": [
        "javax.swing.plaf.synth.SynthPainter.paintTreeBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.lang.character.offsetbycodepoints": [
        "java.lang.Character.offsetByCodePoints(char[],int,int,int,int)",
        "java.lang.Character.offsetByCodePoints(java.lang.CharSequence,int,int)"
    ],
    "javax.sound.midi.metamessage.getdata": [
        "javax.sound.midi.MetaMessage.getData()"
    ],
    "java.awt.menu.addnotify": [
        "java.awt.Menu.addNotify()"
    ],
    "javax.xml.bind.datatypeconverterinterface.parsedate": [
        "javax.xml.bind.DatatypeConverterInterface.parseDate(java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthscrollbarui.paint": [
        "javax.swing.plaf.synth.SynthScrollBarUI.paint(java.awt.Graphics,javax.swing.JComponent)",
        "javax.swing.plaf.synth.SynthScrollBarUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)"
    ],
    "javax.swing.text.jtextcomponent.setdragenabled": [
        "javax.swing.text.JTextComponent.setDragEnabled(boolean)"
    ],
    "javax.imageio.imagewriteparam.getlocale": [
        "javax.imageio.ImageWriteParam.getLocale()"
    ],
    "javax.swing.jcombobox.getmodel": [
        "javax.swing.JComboBox.getModel()"
    ],
    "javax.accessibility.accessiblecomponent.setlocation": [
        "javax.accessibility.AccessibleComponent.setLocation(java.awt.Point)"
    ],
    "javax.xml.stream.xmleventfactory.createendelement": [
        "javax.xml.stream.XMLEventFactory.createEndElement(java.lang.String,java.lang.String,java.lang.String)",
        "javax.xml.stream.XMLEventFactory.createEndElement(java.lang.String,java.lang.String,java.lang.String,java.util.Iterator)",
        "javax.xml.stream.XMLEventFactory.createEndElement(javax.xml.namespace.QName,java.util.Iterator)"
    ],
    "java.security.security.getalgorithms": [
        "java.security.Security.getAlgorithms(java.lang.String)"
    ],
    "javax.swing.spinnerdatemodel.getvalue": [
        "javax.swing.SpinnerDateModel.getValue()"
    ],
    "javax.swing.text.wrappedplainview.getpreferredspan": [
        "javax.swing.text.WrappedPlainView.getPreferredSpan(int)"
    ],
    "java.rmi.activation.activatable.inactive": [
        "java.rmi.activation.Activatable.inactive(java.rmi.activation.ActivationID)"
    ],
    "java.awt.image.getsource": [
        "java.awt.Image.getSource()"
    ],
    "javax.swing.plaf.basic.basicsliderui.ypositionforvalue": [
        "javax.swing.plaf.basic.BasicSliderUI.yPositionForValue(int,int,int)"
    ],
    "javax.swing.jpopupmenu.firepopupmenuwillbecomeinvisible": [
        "javax.swing.JPopupMenu.firePopupMenuWillBecomeInvisible()"
    ],
    "java.util.stream.stream.concat": [
        "java.util.stream.Stream.concat(java.util.stream.Stream<? extends T>,java.util.stream.Stream<? extends T>)"
    ],
    "javax.swing.plaf.metal.metaltheme.getusertextfont": [
        "javax.swing.plaf.metal.MetalTheme.getUserTextFont()"
    ],
    "java.util.jar.jarentry.getattributes": [
        "java.util.jar.JarEntry.getAttributes()"
    ],
    "javax.swing.defaultlistmodel.getelementat": [
        "javax.swing.DefaultListModel.getElementAt(int)"
    ],
    "java.util.calendar.builder.setweekdate": [
        "java.util.Calendar.Builder.setWeekDate(int,int,int)"
    ],
    "java.awt.graphicsdevice.getconfigurations": [
        "java.awt.GraphicsDevice.getConfigurations()"
    ],
    "java.awt.image.kernel.getxorigin": [
        "java.awt.image.Kernel.getXOrigin()"
    ],
    "java.awt.image.cropimagefilter.setpixels": [
        "java.awt.image.CropImageFilter.setPixels(int,int,int,int,java.awt.image.ColorModel,byte[],int,int)",
        "java.awt.image.CropImageFilter.setPixels(int,int,int,int,java.awt.image.ColorModel,int[],int,int)"
    ],
    "java.lang.integer.compare": [
        "java.lang.Integer.compare(int,int)"
    ],
    "java.nio.file.filesystem.supportedfileattributeviews": [
        "java.nio.file.FileSystem.supportedFileAttributeViews()"
    ],
    "java.time.offsetdatetime.plusnanos": [
        "java.time.OffsetDateTime.plusNanos(long)"
    ],
    "java.awt.event.mousewheelevent.getprecisewheelrotation": [
        "java.awt.event.MouseWheelEvent.getPreciseWheelRotation()"
    ],
    "java.lang.invoke.methodhandleinfo.tostring": [
        "java.lang.invoke.MethodHandleInfo.toString(int,java.lang.Class<?>,java.lang.String,java.lang.invoke.MethodType)"
    ],
    "java.nio.charbuffer.wrap": [
        "java.nio.CharBuffer.wrap(char[],int,int)",
        "java.nio.CharBuffer.wrap(char[])",
        "java.nio.CharBuffer.wrap(java.lang.CharSequence,int,int)",
        "java.nio.CharBuffer.wrap(java.lang.CharSequence)"
    ],
    "javax.sound.midi.soundbankresource.getdataclass": [
        "javax.sound.midi.SoundbankResource.getDataClass()"
    ],
    "javax.swing.plaf.synth.synthtabbedpaneui.propertychange": [
        "javax.swing.plaf.synth.SynthTabbedPaneUI.propertyChange(java.beans.PropertyChangeEvent)"
    ],
    "javax.swing.text.layoutqueue.addtask": [
        "javax.swing.text.LayoutQueue.addTask(java.lang.Runnable)"
    ],
    "java.sql.databasemetadata.supportsaltertablewithdropcolumn": [
        "java.sql.DatabaseMetaData.supportsAlterTableWithDropColumn()"
    ],
    "javax.management.remote.rmi.rmiconnection.getattributes": [
        "javax.management.remote.rmi.RMIConnection.getAttributes(javax.management.ObjectName,java.lang.String[],javax.security.auth.Subject)"
    ],
    "java.time.zoneddatetime.getdayofyear": [
        "java.time.ZonedDateTime.getDayOfYear()"
    ],
    "java.security.unresolvedpermission.hashcode": [
        "java.security.UnresolvedPermission.hashCode()"
    ],
    "javax.swing.defaultlistmodel.removeelementat": [
        "javax.swing.DefaultListModel.removeElementAt(int)"
    ],
    "javax.imageio.metadata.iiometadataformatimpl.setresourcebasename": [
        "javax.imageio.metadata.IIOMetadataFormatImpl.setResourceBaseName(java.lang.String)"
    ],
    "javax.sql.rowset.addrowsetlistener": [
        "javax.sql.RowSet.addRowSetListener(javax.sql.RowSetListener)"
    ],
    "java.io.bufferedinputstream.marksupported": [
        "java.io.BufferedInputStream.markSupported()"
    ],
    "java.security.cert.certpathchecker.check": [
        "java.security.cert.CertPathChecker.check(java.security.cert.Certificate)"
    ],
    "javax.swing.plaf.basic.basictreeui.createtreeselectionlistener": [
        "javax.swing.plaf.basic.BasicTreeUI.createTreeSelectionListener()"
    ],
    "javax.xml.parsers.documentbuilderfactory.setnamespaceaware": [
        "javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)"
    ],
    "java.util.function.doubleconsumer.accept": [
        "java.util.function.DoubleConsumer.accept(double)"
    ],
    "java.lang.annotation.annotationtypemismatchexception.foundtype": [
        "java.lang.annotation.AnnotationTypeMismatchException.foundType()"
    ],
    "javax.swing.plaf.basic.basiclistui.installdefaults": [
        "javax.swing.plaf.basic.BasicListUI.installDefaults()"
    ],
    "java.time.localdate.withdayofmonth": [
        "java.time.LocalDate.withDayOfMonth(int)"
    ],
    "javax.imageio.imageio.getwriterformatnames": [
        "javax.imageio.ImageIO.getWriterFormatNames()"
    ],
    "javax.swing.jcombobox.setselectedindex": [
        "javax.swing.JComboBox.setSelectedIndex(int)"
    ],
    "java.beans.xmlencoder.flush": [
        "java.beans.XMLEncoder.flush()"
    ],
    "java.sql.databasemetadata.supportsnonnullablecolumns": [
        "java.sql.DatabaseMetaData.supportsNonNullableColumns()"
    ],
    "java.awt.gridlayout.getrows": [
        "java.awt.GridLayout.getRows()"
    ],
    "java.awt.font.texthitinfo.afteroffset": [
        "java.awt.font.TextHitInfo.afterOffset(int)"
    ],
    "javax.lang.model.element.nestingkind.valueof": [
        "javax.lang.model.element.NestingKind.valueOf(java.lang.String)"
    ],
    "javax.management.mbeanconstructorinfo.equals": [
        "javax.management.MBeanConstructorInfo.equals(java.lang.Object)"
    ],
    "javax.swing.plaf.multi.multisliderui.uninstallui": [
        "javax.swing.plaf.multi.MultiSliderUI.uninstallUI(javax.swing.JComponent)"
    ],
    "java.awt.jobattributes.getprinter": [
        "java.awt.JobAttributes.getPrinter()"
    ],
    "javax.swing.text.componentview.viewtomodel": [
        "javax.swing.text.ComponentView.viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias[])"
    ],
    "java.awt.im.inputcontext.getinstance": [
        "java.awt.im.InputContext.getInstance()"
    ],
    "javax.imageio.metadata.iiometadatanode.settextcontent": [
        "javax.imageio.metadata.IIOMetadataNode.setTextContent(java.lang.String)"
    ],
    "java.util.iterator.next": [
        "java.util.Iterator.next()"
    ],
    "java.time.month.valueof": [
        "java.time.Month.valueOf(java.lang.String)"
    ],
    "java.time.localdatetime.withmonth": [
        "java.time.LocalDateTime.withMonth(int)"
    ],
    "java.awt.image.renderable.parameterblock.removesources": [
        "java.awt.image.renderable.ParameterBlock.removeSources()"
    ],
    "java.awt.geom.cubiccurve2d.solvecubic": [
        "java.awt.geom.CubicCurve2D.solveCubic(double[],double[])",
        "java.awt.geom.CubicCurve2D.solveCubic(double[])"
    ],
    "org.omg.dynamicany._dynanystub.insert_long": [
        "org.omg.DynamicAny._DynAnyStub.insert_long(int)"
    ],
    "org.omg.corba.orb.create_context_list": [
        "org.omg.CORBA.ORB.create_context_list()"
    ],
    "javax.imageio.spi.imagereaderwriterspi.getnativeimagemetadataformatname": [
        "javax.imageio.spi.ImageReaderWriterSpi.getNativeImageMetadataFormatName()"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.togregoriancalendar": [
        "javax.xml.datatype.XMLGregorianCalendar.toGregorianCalendar()",
        "javax.xml.datatype.XMLGregorianCalendar.toGregorianCalendar(java.util.TimeZone,java.util.Locale,javax.xml.datatype.XMLGregorianCalendar)"
    ],
    "java.awt.cardlayout.getvgap": [
        "java.awt.CardLayout.getVgap()"
    ],
    "javax.sound.midi.sequencer.addcontrollereventlistener": [
        "javax.sound.midi.Sequencer.addControllerEventListener(javax.sound.midi.ControllerEventListener,int[])"
    ],
    "javax.sound.midi.track.remove": [
        "javax.sound.midi.Track.remove(javax.sound.midi.MidiEvent)"
    ],
    "org.omg.dynamicany.dynanyoperations.insert_longlong": [
        "org.omg.DynamicAny.DynAnyOperations.insert_longlong(long)"
    ],
    "javax.swing.buttonmodel.addactionlistener": [
        "javax.swing.ButtonModel.addActionListener(java.awt.event.ActionListener)"
    ],
    "java.beans.beancontext.beancontextservicessupport.bcssserviceprovider.getserviceprovider": [
        "java.beans.beancontext.BeanContextServicesSupport.BCSSServiceProvider.getServiceProvider()"
    ],
    "java.util.concurrent.linkedblockingdeque.addfirst": [
        "java.util.concurrent.LinkedBlockingDeque.addFirst(E)"
    ],
    "javax.naming.compositename.add": [
        "javax.naming.CompositeName.add(java.lang.String)",
        "javax.naming.CompositeName.add(int,java.lang.String)"
    ],
    "java.util.date.tostring": [
        "java.util.Date.toString()"
    ],
    "java.awt.event.keyevent.getkeytext": [
        "java.awt.event.KeyEvent.getKeyText(int)"
    ],
    "javax.swing.jtextarea.getlinestartoffset": [
        "javax.swing.JTextArea.getLineStartOffset(int)"
    ],
    "javax.swing.plaf.multi.multitreeui.isediting": [
        "javax.swing.plaf.multi.MultiTreeUI.isEditing(javax.swing.JTree)"
    ],
    "javax.swing.grouplayout.setlayoutstyle": [
        "javax.swing.GroupLayout.setLayoutStyle(javax.swing.LayoutStyle)"
    ],
    "java.util.formatflagsconversionmismatchexception.getconversion": [
        "java.util.FormatFlagsConversionMismatchException.getConversion()"
    ],
    "javax.print.printservice.getsupportedattributecategories": [
        "javax.print.PrintService.getSupportedAttributeCategories()"
    ],
    "java.util.hashtable.get": [
        "java.util.Hashtable.get(java.lang.Object)"
    ],
    "javax.swing.plaf.metal.metalfilechooserui.getpreferredsize": [
        "javax.swing.plaf.metal.MetalFileChooserUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "javax.swing.event.treeselectionevent.clonewithsource": [
        "javax.swing.event.TreeSelectionEvent.cloneWithSource(java.lang.Object)"
    ],
    "java.awt.choice.getitemcount": [
        "java.awt.Choice.getItemCount()"
    ],
    "javax.swing.text.abstractdocument.remove": [
        "javax.swing.text.AbstractDocument.remove(int,int)"
    ],
    "javax.imageio.imagewriteparam.setcompressionquality": [
        "javax.imageio.ImageWriteParam.setCompressionQuality(float)"
    ],
    "java.util.resourcebundle.getstringarray": [
        "java.util.ResourceBundle.getStringArray(java.lang.String)"
    ],
    "java.security.cert.pkixbuilderparameters.getmaxpathlength": [
        "java.security.cert.PKIXBuilderParameters.getMaxPathLength()"
    ],
    "javax.swing.jwindow.settransferhandler": [
        "javax.swing.JWindow.setTransferHandler(javax.swing.TransferHandler)"
    ],
    "java.lang.reflect.method.getreturntype": [
        "java.lang.reflect.Method.getReturnType()"
    ],
    "javax.swing.keystroke.getkeystroke": [
        "javax.swing.KeyStroke.getKeyStroke(int,int,boolean)",
        "javax.swing.KeyStroke.getKeyStroke(java.lang.Character,int)",
        "javax.swing.KeyStroke.getKeyStroke(java.lang.String)",
        "javax.swing.KeyStroke.getKeyStroke(int,int)",
        "javax.swing.KeyStroke.getKeyStroke(char)"
    ],
    "java.awt.image.bufferedimage.setrgb": [
        "java.awt.image.BufferedImage.setRGB(int,int,int)"
    ],
    "javax.management.mbeaninfo.getdescriptor": [
        "javax.management.MBeanInfo.getDescriptor()"
    ],
    "java.security.codesigner.getsignercertpath": [
        "java.security.CodeSigner.getSignerCertPath()"
    ],
    "java.util.treemap.replaceall": [
        "java.util.TreeMap.replaceAll(java.util.function.BiFunction<? super,? super,? extends V>)"
    ],
    "javax.xml.xpath.xpathfactory.setxpathfunctionresolver": [
        "javax.xml.xpath.XPathFactory.setXPathFunctionResolver(javax.xml.xpath.XPathFunctionResolver)"
    ],
    "javax.swing.jtabbedpane.indexofcomponent": [
        "javax.swing.JTabbedPane.indexOfComponent(java.awt.Component)"
    ],
    "javax.xml.transform.transformerfactory.getfeature": [
        "javax.xml.transform.TransformerFactory.getFeature(java.lang.String)"
    ],
    "javax.xml.soap.soapelement.getnamespaceuri": [
        "javax.xml.soap.SOAPElement.getNamespaceURI(java.lang.String)"
    ],
    "org.omg.portableserver.servantlocatoroperations.preinvoke": [
        "org.omg.PortableServer.ServantLocatorOperations.preinvoke(byte[],org.omg.PortableServer.POA,java.lang.String,org.omg.PortableServer.ServantLocatorPackage.CookieHolder)"
    ],
    "javax.swing.defaultdesktopmanager.activateframe": [
        "javax.swing.DefaultDesktopManager.activateFrame(javax.swing.JInternalFrame)"
    ],
    "java.util.concurrent.concurrentmap.getordefault": [
        "java.util.concurrent.ConcurrentMap.getOrDefault(java.lang.Object,java.util.concurrent.ConcurrentMap)",
        "java.util.concurrent.ConcurrentMap.getOrDefault(java.lang.Object,V)"
    ],
    "java.util.simpletimezone.setendrule": [
        "java.util.SimpleTimeZone.setEndRule(int,int,int,int)",
        "java.util.SimpleTimeZone.setEndRule(int,int,int,int,boolean)",
        "java.util.SimpleTimeZone.setEndRule(int,int,int)"
    ],
    "javax.crypto.spec.pbekeyspec.getpassword": [
        "javax.crypto.spec.PBEKeySpec.getPassword()"
    ],
    "javax.xml.soap.soapelement.setelementqname": [
        "javax.xml.soap.SOAPElement.setElementQName(javax.xml.namespace.QName)"
    ],
    "java.util.logging.loggingmxbean.getloggerlevel": [
        "java.util.logging.LoggingMXBean.getLoggerLevel(java.lang.String)"
    ],
    "javax.security.cert.certificate.tostring": [
        "javax.security.cert.Certificate.toString()"
    ],
    "java.math.bigdecimal.tobigintegerexact": [
        "java.math.BigDecimal.toBigIntegerExact()"
    ],
    "javax.tools.fileobject.touri": [
        "javax.tools.FileObject.toUri()"
    ],
    "org.omg.corba.context.context_name": [
        "org.omg.CORBA.Context.context_name()"
    ],
    "java.util.stream.stream.collect": [
        "java.util.stream.Stream.collect(java.util.function.Supplier<R>,,? super java.util.stream.Stream>,,R>)",
        "java.util.stream.Stream.collect(java.util.stream.Collector<? super,,R>)"
    ],
    "javax.swing.jviewport.getui": [
        "javax.swing.JViewport.getUI()"
    ],
    "javax.activation.datahandler.getname": [
        "javax.activation.DataHandler.getName()"
    ],
    "java.util.collections.emptylistiterator": [
        "java.util.Collections.emptyListIterator()"
    ],
    "javax.swing.plaf.nimbus.abstractregionpainter.paintcontext.cachemode.values": [
        "javax.swing.plaf.nimbus.AbstractRegionPainter.PaintContext.CacheMode.values()"
    ],
    "org.xml.sax.ext.locator2.getxmlversion": [
        "org.xml.sax.ext.Locator2.getXMLVersion()"
    ],
    "java.awt.image.colormodel.getrgb": [
        "java.awt.image.ColorModel.getRGB(int)",
        "java.awt.image.ColorModel.getRGB(java.lang.Object)"
    ],
    "javax.swing.text.asyncboxview.flushrequirementchanges": [
        "javax.swing.text.AsyncBoxView.flushRequirementChanges()"
    ],
    "javax.sound.sampled.targetdataline.open": [
        "javax.sound.sampled.TargetDataLine.open(javax.sound.sampled.AudioFormat,int)",
        "javax.sound.sampled.TargetDataLine.open(javax.sound.sampled.AudioFormat)"
    ],
    "java.io.objectoutputstream.writeclassdescriptor": [
        "java.io.ObjectOutputStream.writeClassDescriptor(java.io.ObjectStreamClass)"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.clone": [
        "javax.xml.datatype.XMLGregorianCalendar.clone()"
    ],
    "javax.swing.jtree.getlastselectedpathcomponent": [
        "javax.swing.JTree.getLastSelectedPathComponent()"
    ],
    "javax.swing.jtree.setselectionrow": [
        "javax.swing.JTree.setSelectionRow(int)"
    ],
    "javax.swing.table.jtableheader.getaccessiblecontext": [
        "javax.swing.table.JTableHeader.getAccessibleContext()"
    ],
    "java.util.bitset.stream": [
        "java.util.BitSet.stream()"
    ],
    "javax.xml.bind.datatypeconverter.printqname": [
        "javax.xml.bind.DatatypeConverter.printQName(javax.xml.namespace.QName,javax.xml.namespace.NamespaceContext)"
    ],
    "java.util.stream.stream.skip": [
        "java.util.stream.Stream.skip(long)"
    ],
    "java.util.zip.gzipoutputstream.write": [
        "java.util.zip.GZIPOutputStream.write(byte[],int,int)"
    ],
    "java.io.invalidclassexception.getmessage": [
        "java.io.InvalidClassException.getMessage()"
    ],
    "java.sql.callablestatement.setshort": [
        "java.sql.CallableStatement.setShort(java.lang.String,short)"
    ],
    "java.lang.byte.bytevalue": [
        "java.lang.Byte.byteValue()"
    ],
    "java.util.sortedmap.comparator": [
        "java.util.SortedMap.comparator()"
    ],
    "java.io.printwriter.println": [
        "java.io.PrintWriter.println(java.lang.Object)",
        "java.io.PrintWriter.println(long)",
        "java.io.PrintWriter.println()",
        "java.io.PrintWriter.println(char[])",
        "java.io.PrintWriter.println(char)",
        "java.io.PrintWriter.println(boolean)",
        "java.io.PrintWriter.println(java.lang.String)",
        "java.io.PrintWriter.println(int)"
    ],
    "javax.swing.plaf.basic.basicsliderui.valueforyposition": [
        "javax.swing.plaf.basic.BasicSliderUI.valueForYPosition(int)"
    ],
    "javax.xml.bind.attachment.attachmentunmarshaller.isxoppackage": [
        "javax.xml.bind.attachment.AttachmentUnmarshaller.isXOPPackage()"
    ],
    "java.awt.image.bufferedimage.getraster": [
        "java.awt.image.BufferedImage.getRaster()"
    ],
    "java.util.linkedlist.pollfirst": [
        "java.util.LinkedList.pollFirst()"
    ],
    "java.net.httpcookie.getvalue": [
        "java.net.HttpCookie.getValue()"
    ],
    "java.util.hashset.clone": [
        "java.util.HashSet.clone()"
    ],
    "javax.swing.text.componentview.getalignment": [
        "javax.swing.text.ComponentView.getAlignment(int)"
    ],
    "javax.swing.table.tablecolumn.getcelleditor": [
        "javax.swing.table.TableColumn.getCellEditor()"
    ],
    "javax.imageio.imagereader.addiioreadupdatelistener": [
        "javax.imageio.ImageReader.addIIOReadUpdateListener(javax.imageio.event.IIOReadUpdateListener)"
    ],
    "java.util.concurrent.locks.abstractqueuedlongsynchronizer.tostring": [
        "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.toString()"
    ],
    "javax.management.openmbean.openmbeanoperationinfo.getname": [
        "javax.management.openmbean.OpenMBeanOperationInfo.getName()"
    ],
    "javax.swing.spinnerlistmodel.getvalue": [
        "javax.swing.SpinnerListModel.getValue()"
    ],
    "javax.swing.text.compositeview.getviewatpoint": [
        "javax.swing.text.CompositeView.getViewAtPoint(int,int,java.awt.Rectangle)"
    ],
    "java.text.parseposition.hashcode": [
        "java.text.ParsePosition.hashCode()"
    ],
    "java.lang.string.join": [
        "java.lang.String.join(java.lang.CharSequence,java.lang.Iterable<? extends java.lang.CharSequence>)",
        "java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence)",
        "java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence...)"
    ],
    "java.util.concurrent.locks.abstractqueuedsynchronizer.tryrelease": [
        "java.util.concurrent.locks.AbstractQueuedSynchronizer.tryRelease(int)"
    ],
    "org.omg.dynamicany._dynanystub.insert_longlong": [
        "org.omg.DynamicAny._DynAnyStub.insert_longlong(long)"
    ],
    "java.security.cert.x509certselector.getissuer": [
        "java.security.cert.X509CertSelector.getIssuer()"
    ],
    "java.lang.float.intvalue": [
        "java.lang.Float.intValue()"
    ],
    "java.lang.reflect.parameterizedtype.getrawtype": [
        "java.lang.reflect.ParameterizedType.getRawType()"
    ],
    "javax.swing.comboboxeditor.setitem": [
        "javax.swing.ComboBoxEditor.setItem(java.lang.Object)"
    ],
    "java.beans.customizer.addpropertychangelistener": [
        "java.beans.Customizer.addPropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "javax.imageio.metadata.iiometadatanode.isdefaultnamespace": [
        "javax.imageio.metadata.IIOMetadataNode.isDefaultNamespace(java.lang.String)"
    ],
    "javax.xml.stream.xmleventreader.close": [
        "javax.xml.stream.XMLEventReader.close()"
    ],
    "javax.swing.jtoolbar.setborderpainted": [
        "javax.swing.JToolBar.setBorderPainted(boolean)"
    ],
    "javax.swing.jmenu.removeall": [
        "javax.swing.JMenu.removeAll()"
    ],
    "java.util.concurrent.concurrentskiplistmap.equals": [
        "java.util.concurrent.ConcurrentSkipListMap.equals(java.lang.Object)"
    ],
    "javax.print.attribute.standard.pagesperminute.equals": [
        "javax.print.attribute.standard.PagesPerMinute.equals(java.lang.Object)"
    ],
    "javax.xml.crypto.dsig.xmlsignaturefactory.newtransform": [
        "javax.xml.crypto.dsig.XMLSignatureFactory.newTransform(java.lang.String,javax.xml.crypto.XMLStructure)",
        "javax.xml.crypto.dsig.XMLSignatureFactory.newTransform(java.lang.String,javax.xml.crypto.dsig.spec.TransformParameterSpec)"
    ],
    "org.omg.dynamicany._dynfixedstub.insert_val": [
        "org.omg.DynamicAny._DynFixedStub.insert_val(java.io.Serializable)"
    ],
    "org.ietf.jgss.gsscontext.requestcreddeleg": [
        "org.ietf.jgss.GSSContext.requestCredDeleg(boolean)"
    ],
    "javax.naming.ldap.ldapname.startswith": [
        "javax.naming.ldap.LdapName.startsWith(java.util.List<javax.naming.ldap.Rdn>)",
        "javax.naming.ldap.LdapName.startsWith(javax.naming.Name)"
    ],
    "java.awt.gridbaglayout.getlayoutalignmentx": [
        "java.awt.GridBagLayout.getLayoutAlignmentX(java.awt.Container)"
    ],
    "java.util.concurrent.locks.abstractqueuedsynchronizer.conditionobject.awaituntil": [
        "java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.awaitUntil(java.util.Date)"
    ],
    "java.net.urlconnection.getheaderfielddate": [
        "java.net.URLConnection.getHeaderFieldDate(java.lang.String,long)"
    ],
    "java.io.streamtokenizer.tostring": [
        "java.io.StreamTokenizer.toString()"
    ],
    "java.lang.class.getmodifiers": [
        "java.lang.Class.getModifiers()"
    ],
    "java.net.inet6address.getscopedinterface": [
        "java.net.Inet6Address.getScopedInterface()"
    ],
    "java.util.zip.deflater.finalize": [
        "java.util.zip.Deflater.finalize()"
    ],
    "org.omg.dynamicany._dynanystub.equal": [
        "org.omg.DynamicAny._DynAnyStub.equal(org.omg.DynamicAny.DynAny)"
    ],
    "java.util.concurrent.blockingdeque.iterator": [
        "java.util.concurrent.BlockingDeque.iterator()"
    ],
    "java.security.messagedigestspi.enginegetdigestlength": [
        "java.security.MessageDigestSpi.engineGetDigestLength()"
    ],
    "javax.accessibility.accessibletable.getaccessiblerowcount": [
        "javax.accessibility.AccessibleTable.getAccessibleRowCount()"
    ],
    "java.awt.component.dispatchevent": [
        "java.awt.Component.dispatchEvent(java.awt.AWTEvent)"
    ],
    "javax.swing.text.iconview.getalignment": [
        "javax.swing.text.IconView.getAlignment(int)"
    ],
    "java.rmi.dgc.lease.getvalue": [
        "java.rmi.dgc.Lease.getValue()"
    ],
    "java.awt.component.setsize": [
        "java.awt.Component.setSize(int,int)",
        "java.awt.Component.setSize(java.awt.Dimension)"
    ],
    "java.net.inetsocketaddress.equals": [
        "java.net.InetSocketAddress.equals(java.lang.Object)"
    ],
    "java.security.interfaces.rsamultiprimeprivatecrtkey.getprimeexponentq": [
        "java.security.interfaces.RSAMultiPrimePrivateCrtKey.getPrimeExponentQ()"
    ],
    "javax.crypto.keyagreement.getalgorithm": [
        "javax.crypto.KeyAgreement.getAlgorithm()"
    ],
    "java.awt.image.componentsamplemodel.setpixel": [
        "java.awt.image.ComponentSampleModel.setPixel(int,int,int[],java.awt.image.DataBuffer)"
    ],
    "java.util.concurrent.countedcompleter.getcompleter": [
        "java.util.concurrent.CountedCompleter.getCompleter()"
    ],
    "java.security.spec.rsapublickeyspec.getpublicexponent": [
        "java.security.spec.RSAPublicKeySpec.getPublicExponent()"
    ],
    "java.net.socket.gettrafficclass": [
        "java.net.Socket.getTrafficClass()"
    ],
    "javax.swing.plaf.basic.basictextui.create": [
        "javax.swing.plaf.basic.BasicTextUI.create(javax.swing.text.Element,int,int)",
        "javax.swing.plaf.basic.BasicTextUI.create(javax.swing.text.Element)"
    ],
    "java.time.zoneddatetime.plushours": [
        "java.time.ZonedDateTime.plusHours(long)"
    ],
    "javax.swing.plaf.basic.basicinternalframeui.replacepane": [
        "javax.swing.plaf.basic.BasicInternalFrameUI.replacePane(javax.swing.JComponent,javax.swing.JComponent)"
    ],
    "java.util.collections.checkedsortedset": [
        "java.util.Collections.checkedSortedSet(java.util.SortedSet<E>,java.lang.Class<E>)"
    ],
    "javax.management.monitor.monitormbean.getobservedobjects": [
        "javax.management.monitor.MonitorMBean.getObservedObjects()"
    ],
    "java.sql.statement.clearbatch": [
        "java.sql.Statement.clearBatch()"
    ],
    "java.nio.charset.charsetencoder.unmappablecharacteraction": [
        "java.nio.charset.CharsetEncoder.unmappableCharacterAction()"
    ],
    "javax.management.modelmbean.modelmbeaninfosupport.getdescriptor": [
        "javax.management.modelmbean.ModelMBeanInfoSupport.getDescriptor(java.lang.String)"
    ],
    "javax.swing.plaf.multi.multimenubarui.update": [
        "javax.swing.plaf.multi.MultiMenuBarUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.nio.longbuffer.compareto": [
        "java.nio.LongBuffer.compareTo(java.nio.LongBuffer)"
    ],
    "javax.lang.model.element.executableelement.getdefaultvalue": [
        "javax.lang.model.element.ExecutableElement.getDefaultValue()"
    ],
    "javax.swing.plaf.synth.synthscrollpaneui.getcontext": [
        "javax.swing.plaf.synth.SynthScrollPaneUI.getContext(javax.swing.JComponent)"
    ],
    "java.awt.graphics2d.getcomposite": [
        "java.awt.Graphics2D.getComposite()"
    ],
    "java.sql.sqlinput.readfloat": [
        "java.sql.SQLInput.readFloat()"
    ],
    "javax.swing.jdialog.getgraphics": [
        "javax.swing.JDialog.getGraphics()"
    ],
    "javax.swing.text.abstractwriter.getindentlevel": [
        "javax.swing.text.AbstractWriter.getIndentLevel()"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.setfractionalsecond": [
        "javax.xml.datatype.XMLGregorianCalendar.setFractionalSecond(java.math.BigDecimal)"
    ],
    "javax.swing.defaultrowsorter.setcomparator": [
        "javax.swing.DefaultRowSorter.setComparator(int,java.util.Comparator<?>)"
    ],
    "org.omg.dynamicany.dynanyoperations.insert_char": [
        "org.omg.DynamicAny.DynAnyOperations.insert_char(char)"
    ],
    "javax.swing.text.abstractdocument.writeunlock": [
        "javax.swing.text.AbstractDocument.writeUnlock()"
    ],
    "javax.swing.text.html.stylesheet.removeattribute": [
        "javax.swing.text.html.StyleSheet.removeAttribute(javax.swing.text.AttributeSet,java.lang.Object)"
    ],
    "java.util.observable.deleteobserver": [
        "java.util.Observable.deleteObserver(java.util.Observer)"
    ],
    "javax.sound.midi.synthesizer.loadinstruments": [
        "javax.sound.midi.Synthesizer.loadInstruments(javax.sound.midi.Soundbank,javax.sound.midi.Patch[])"
    ],
    "java.util.stream.basestream.isparallel": [
        "java.util.stream.BaseStream.isParallel()"
    ],
    "java.util.concurrent.completablefuture.runasync": [
        "java.util.concurrent.CompletableFuture.runAsync(java.lang.Runnable)",
        "java.util.concurrent.CompletableFuture.runAsync(java.lang.Runnable,java.util.concurrent.Executor)"
    ],
    "javax.swing.plaf.basic.basicscrollpaneui.createmousewheellistener": [
        "javax.swing.plaf.basic.BasicScrollPaneUI.createMouseWheelListener()"
    ],
    "javax.swing.plaf.metal.metaliconfactory.getcheckboxicon": [
        "javax.swing.plaf.metal.MetalIconFactory.getCheckBoxIcon()"
    ],
    "javax.imageio.imageio.createimageoutputstream": [
        "javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)"
    ],
    "org.xml.sax.contenthandler.endelement": [
        "org.xml.sax.ContentHandler.endElement(java.lang.String,java.lang.String,java.lang.String)"
    ],
    "java.io.bufferedwriter.write": [
        "java.io.BufferedWriter.write(char[],int,int)",
        "java.io.BufferedWriter.write(int)",
        "java.io.BufferedWriter.write(java.lang.String,int,int)"
    ],
    "javax.net.ssl.sslengine.wrap": [
        "javax.net.ssl.SSLEngine.wrap(java.nio.ByteBuffer,int,int,java.nio.ByteBuffer)",
        "javax.net.ssl.SSLEngine.wrap(java.nio.ByteBuffer,java.nio.ByteBuffer)",
        "javax.net.ssl.SSLEngine.wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)",
        "javax.net.ssl.SSLEngine.wrap(java.nio.ByteBuffer[],java.nio.ByteBuffer)"
    ],
    "java.awt.systemtray.getpropertychangelisteners": [
        "java.awt.SystemTray.getPropertyChangeListeners(java.lang.String)"
    ],
    "org.omg.dynamicany._dynsequencestub.seek": [
        "org.omg.DynamicAny._DynSequenceStub.seek(int)"
    ],
    "javax.xml.soap.mimeheaders.removeallheaders": [
        "javax.xml.soap.MimeHeaders.removeAllHeaders()"
    ],
    "java.awt.geom.quadcurve2d.double.getctrly": [
        "java.awt.geom.QuadCurve2D.Double.getCtrlY()"
    ],
    "javax.swing.jinternalframe.getrootpane": [
        "javax.swing.JInternalFrame.getRootPane()"
    ],
    "java.nio.file.attribute.aclentryflag.values": [
        "java.nio.file.attribute.AclEntryFlag.values()"
    ],
    "java.io.objectinputstream.resolveproxyclass": [
        "java.io.ObjectInputStream.resolveProxyClass(java.lang.String[])",
        "java.io.ObjectInputStream.resolveProxyClass(java.lang.String)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.gettexthighlightcolor": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getTextHighlightColor()"
    ],
    "javax.net.ssl.keymanagerfactory.getkeymanagers": [
        "javax.net.ssl.KeyManagerFactory.getKeyManagers()"
    ],
    "javax.sql.rowset.settimestamp": [
        "javax.sql.RowSet.setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)",
        "javax.sql.RowSet.setTimestamp(java.lang.String,java.sql.Timestamp)",
        "javax.sql.RowSet.setTimestamp(int,java.sql.Timestamp)",
        "javax.sql.RowSet.setTimestamp(int,java.sql.Timestamp,java.util.Calendar)"
    ],
    "javax.security.auth.kerberos.kerberoskey.hashcode": [
        "javax.security.auth.kerberos.KerberosKey.hashCode()"
    ],
    "javax.sql.rowset.setcharacterstream": [
        "javax.sql.RowSet.setCharacterStream(int,java.io.Reader)",
        "javax.sql.RowSet.setCharacterStream(java.lang.String,java.io.Reader,int)",
        "javax.sql.RowSet.setCharacterStream(java.lang.String,java.io.Reader)",
        "javax.sql.RowSet.setCharacterStream(int,java.io.Reader,int)"
    ],
    "java.lang.reflect.field.equals": [
        "java.lang.reflect.Field.equals(java.lang.Object)"
    ],
    "javax.swing.listselectionmodel.setselectioninterval": [
        "javax.swing.ListSelectionModel.setSelectionInterval(int,int)"
    ],
    "java.sql.resultsetmetadata.getscale": [
        "java.sql.ResultSetMetaData.getScale(int)"
    ],
    "javax.management.mbeanserverdelegatembean.getspecificationvendor": [
        "javax.management.MBeanServerDelegateMBean.getSpecificationVendor()"
    ],
    "javax.management.openmbean.arraytype.getprimitivearraytype": [
        "javax.management.openmbean.ArrayType.getPrimitiveArrayType(java.lang.Class<T>)"
    ],
    "java.awt.geom.quadcurve2d.double.getbounds2d": [
        "java.awt.geom.QuadCurve2D.Double.getBounds2D()"
    ],
    "javax.xml.crypto.dsig.xmlsignaturefactory.getkeyinfofactory": [
        "javax.xml.crypto.dsig.XMLSignatureFactory.getKeyInfoFactory()"
    ],
    "java.beans.propertydescriptor.getpropertytype": [
        "java.beans.PropertyDescriptor.getPropertyType()"
    ],
    "javax.swing.springlayout.constraints.getconstraint": [
        "javax.swing.SpringLayout.Constraints.getConstraint(java.lang.String)"
    ],
    "java.lang.management.memoryusage.getcommitted": [
        "java.lang.management.MemoryUsage.getCommitted()"
    ],
    "java.io.bytearrayoutputstream.tostring": [
        "java.io.ByteArrayOutputStream.toString()",
        "java.io.ByteArrayOutputStream.toString(java.lang.String)"
    ],
    "javax.swing.jinternalframe.getdefaultcloseoperation": [
        "javax.swing.JInternalFrame.getDefaultCloseOperation()"
    ],
    "java.sql.databasemetadata.gettables": [
        "java.sql.DatabaseMetaData.getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
        "java.sql.DatabaseMetaData.getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
    ],
    "org.omg.cosnaming._namingcontextstub.destroy": [
        "org.omg.CosNaming._NamingContextStub.destroy()"
    ],
    "java.util.concurrent.executors.privilegedcallable": [
        "java.util.concurrent.Executors.privilegedCallable(java.util.concurrent.Callable<T>)"
    ],
    "javax.swing.plaf.multi.multioptionpaneui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiOptionPaneUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "java.time.temporal.temporal.minus": [
        "java.time.temporal.Temporal.minus(java.time.temporal.TemporalAmount)",
        "java.time.temporal.Temporal.minus(long,java.time.temporal.TemporalUnit)"
    ],
    "javax.swing.jpopupmenu.setlabel": [
        "javax.swing.JPopupMenu.setLabel(java.lang.String)"
    ],
    "javax.swing.uidefaults.get": [
        "javax.swing.UIDefaults.get(java.lang.Object,java.util.Locale)",
        "javax.swing.UIDefaults.get(java.lang.Object)"
    ],
    "javax.swing.plaf.multi.multiviewportui.getuis": [
        "javax.swing.plaf.multi.MultiViewportUI.getUIs()"
    ],
    "javax.lang.model.element.elementvisitor.visitexecutable": [
        "javax.lang.model.element.ElementVisitor.visitExecutable(javax.lang.model.element.ExecutableElement,javax.lang.model.element.ElementVisitor)"
    ],
    "java.awt.mediatracker.checkid": [
        "java.awt.MediaTracker.checkID(int,boolean)",
        "java.awt.MediaTracker.checkID(int)"
    ],
    "javax.swing.jtable.getselectionbackground": [
        "javax.swing.JTable.getSelectionBackground()"
    ],
    "org.w3c.dom.node.lookupprefix": [
        "org.w3c.dom.Node.lookupPrefix(java.lang.String)"
    ],
    "java.awt.geom.cubiccurve2d.double.getctrlp1": [
        "java.awt.geom.CubicCurve2D.Double.getCtrlP1()"
    ],
    "java.awt.image.renderable.renderableimageproducer.removeconsumer": [
        "java.awt.image.renderable.RenderableImageProducer.removeConsumer(java.awt.image.ImageConsumer)"
    ],
    "java.lang.character.totitlecase": [
        "java.lang.Character.toTitleCase(char)"
    ],
    "javax.xml.bind.datatypeconverter.printbyte": [
        "javax.xml.bind.DatatypeConverter.printByte(byte)"
    ],
    "javax.swing.boxlayout.maximumlayoutsize": [
        "javax.swing.BoxLayout.maximumLayoutSize(java.awt.Container)"
    ],
    "org.omg.portableserver.servant._get_delegate": [
        "org.omg.PortableServer.Servant._get_delegate()"
    ],
    "java.time.zone.zoneoffsettransition.compareto": [
        "java.time.zone.ZoneOffsetTransition.compareTo(java.time.zone.ZoneOffsetTransition)"
    ],
    "java.lang.invoke.methodhandles.insertarguments": [
        "java.lang.invoke.MethodHandles.insertArguments(java.lang.invoke.MethodHandle,int,java.lang.Object)",
        "java.lang.invoke.MethodHandles.insertArguments(java.lang.invoke.MethodHandle,int,java.lang.Object...)"
    ],
    "java.sql.databasemetadata.supportsintegrityenhancementfacility": [
        "java.sql.DatabaseMetaData.supportsIntegrityEnhancementFacility()"
    ],
    "javax.swing.text.html.option.getvalue": [
        "javax.swing.text.html.Option.getValue()"
    ],
    "javax.lang.model.type.wildcardtype.getsuperbound": [
        "javax.lang.model.type.WildcardType.getSuperBound()"
    ],
    "javax.lang.model.util.elements.overrides": [
        "javax.lang.model.util.Elements.overrides(javax.lang.model.element.ExecutableElement,javax.lang.model.element.ExecutableElement,javax.lang.model.element.TypeElement)"
    ],
    "java.lang.stringbuilder.reverse": [
        "java.lang.StringBuilder.reverse()"
    ],
    "java.awt.menushortcut.paramstring": [
        "java.awt.MenuShortcut.paramString()"
    ],
    "javax.naming.reference.remove": [
        "javax.naming.Reference.remove(int)"
    ],
    "javax.xml.crypto.dsig.keyinfo.retrievalmethod.geturi": [
        "javax.xml.crypto.dsig.keyinfo.RetrievalMethod.getURI()"
    ],
    "java.util.concurrent.locks.lock.unlock": [
        "java.util.concurrent.locks.Lock.unlock()"
    ],
    "javax.imageio.plugins.bmp.bmpimagewriteparam.settopdown": [
        "javax.imageio.plugins.bmp.BMPImageWriteParam.setTopDown(boolean)"
    ],
    "javax.management.standardmbean.getconstructors": [
        "javax.management.StandardMBean.getConstructors(javax.management.MBeanConstructorInfo[],java.lang.Object)"
    ],
    "javax.swing.border.etchedborder.getshadowcolor": [
        "javax.swing.border.EtchedBorder.getShadowColor(java.awt.Component)",
        "javax.swing.border.EtchedBorder.getShadowColor()"
    ],
    "java.net.socketimpl.supportsurgentdata": [
        "java.net.SocketImpl.supportsUrgentData()"
    ],
    "javax.swing.table.tablecolumn.getmodelindex": [
        "javax.swing.table.TableColumn.getModelIndex()"
    ],
    "javax.swing.jprogressbar.isindeterminate": [
        "javax.swing.JProgressBar.isIndeterminate()"
    ],
    "javax.print.uriexception.getunsupporteduri": [
        "javax.print.URIException.getUnsupportedURI()"
    ],
    "javax.accessibility.accessiblecontext.getaccessiblerole": [
        "javax.accessibility.AccessibleContext.getAccessibleRole()"
    ],
    "javax.swing.plaf.multi.multioptionpaneui.update": [
        "javax.swing.plaf.multi.MultiOptionPaneUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.security.protectiondomain.getclassloader": [
        "java.security.ProtectionDomain.getClassLoader()"
    ],
    "javax.security.auth.kerberos.kerberosticket.hashcode": [
        "javax.security.auth.kerberos.KerberosTicket.hashCode()"
    ],
    "java.time.chrono.minguodate.getchronology": [
        "java.time.chrono.MinguoDate.getChronology()"
    ],
    "java.awt.gridlayout.minimumlayoutsize": [
        "java.awt.GridLayout.minimumLayoutSize(java.awt.Container)"
    ],
    "javax.management.timer.timer.stop": [
        "javax.management.timer.Timer.stop()"
    ],
    "javax.swing.text.tabexpander.nexttabstop": [
        "javax.swing.text.TabExpander.nextTabStop(float,int)"
    ],
    "java.lang.strictmath.min": [
        "java.lang.StrictMath.min(long,long)",
        "java.lang.StrictMath.min(float,float)",
        "java.lang.StrictMath.min(double,double)",
        "java.lang.StrictMath.min(int,int)"
    ],
    "org.xml.sax.helpers.namespacesupport.declareprefix": [
        "org.xml.sax.helpers.NamespaceSupport.declarePrefix(java.lang.String,java.lang.String)"
    ],
    "java.awt.dnd.draggesturerecognizer.registerlisteners": [
        "java.awt.dnd.DragGestureRecognizer.registerListeners()"
    ],
    "javax.management.openmbean.openmbeanattributeinfo.equals": [
        "javax.management.openmbean.OpenMBeanAttributeInfo.equals(java.lang.Object)"
    ],
    "javax.xml.bind.datatypeconverter.parsedouble": [
        "javax.xml.bind.DatatypeConverter.parseDouble(java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintfilechooserbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintFileChooserBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.management.query.anysubstring": [
        "javax.management.Query.anySubString(javax.management.AttributeValueExp,javax.management.StringValueExp)"
    ],
    "org.w3c.dom.element.getattributenode": [
        "org.w3c.dom.Element.getAttributeNode(java.lang.String)"
    ],
    "javax.swing.tree.variableheightlayoutcache.getvisiblechildcount": [
        "javax.swing.tree.VariableHeightLayoutCache.getVisibleChildCount(javax.swing.tree.TreePath)"
    ],
    "java.rmi.server.remoteobject.equals": [
        "java.rmi.server.RemoteObject.equals(java.lang.Object)"
    ],
    "org.omg.corba_2_3.portable.objectimpl._get_codebase": [
        "org.omg.CORBA_2_3.portable.ObjectImpl._get_codebase()"
    ],
    "javax.swing.transferhandler.transfersupport.isdataflavorsupported": [
        "javax.swing.TransferHandler.TransferSupport.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)"
    ],
    "javax.lang.model.element.nestingkind.values": [
        "javax.lang.model.element.NestingKind.values()"
    ],
    "org.omg.corba.portable.delegate.orb": [
        "org.omg.CORBA.portable.Delegate.orb(org.omg.CORBA.Object)"
    ],
    "org.xml.sax.helpers.defaulthandler.startdocument": [
        "org.xml.sax.helpers.DefaultHandler.startDocument()"
    ],
    "javax.imageio.imagewriteparam.getpreferredtilesizes": [
        "javax.imageio.ImageWriteParam.getPreferredTileSizes()"
    ],
    "javax.swing.joptionpane.getwantsinput": [
        "javax.swing.JOptionPane.getWantsInput()"
    ],
    "org.omg.corba.portable.inputstream.read_char_array": [
        "org.omg.CORBA.portable.InputStream.read_char_array(char[],int,int)"
    ],
    "java.awt.window.setfocusablewindowstate": [
        "java.awt.Window.setFocusableWindowState(boolean)"
    ],
    "javax.management.relation.relationservice.getrolecardinality": [
        "javax.management.relation.RelationService.getRoleCardinality(java.lang.String,java.lang.String)"
    ],
    "javax.lang.model.util.elements.getname": [
        "javax.lang.model.util.Elements.getName(java.lang.CharSequence)"
    ],
    "java.time.chrono.chronolocaldate.lengthofyear": [
        "java.time.chrono.ChronoLocalDate.lengthOfYear()"
    ],
    "java.lang.double.longvalue": [
        "java.lang.Double.longValue()"
    ],
    "java.nio.file.attribute.posixfileattributeview.setgroup": [
        "java.nio.file.attribute.PosixFileAttributeView.setGroup(java.nio.file.attribute.GroupPrincipal)"
    ],
    "org.ietf.jgss.gssmanager.getmechsforname": [
        "org.ietf.jgss.GSSManager.getMechsForName(org.ietf.jgss.Oid)"
    ],
    "javax.swing.jfilechooser.addactionlistener": [
        "javax.swing.JFileChooser.addActionListener(java.awt.event.ActionListener)"
    ],
    "java.awt.image.multipixelpackedsamplemodel.getsamplesize": [
        "java.awt.image.MultiPixelPackedSampleModel.getSampleSize(int)",
        "java.awt.image.MultiPixelPackedSampleModel.getSampleSize()"
    ],
    "java.util.vector.addall": [
        "java.util.Vector.addAll(int,java.util.Collection<? extends E>)",
        "java.util.Vector.addAll(int,java.util.Collection<? extends java.util.Vector>)",
        "java.util.Vector.addAll(java.util.Collection<? extends java.util.Vector>)",
        "java.util.Vector.addAll(java.util.Collection<? extends E>)"
    ],
    "java.util.deque.descendingiterator": [
        "java.util.Deque.descendingIterator()"
    ],
    "javax.swing.jcomponent.processcomponentkeyevent": [
        "javax.swing.JComponent.processComponentKeyEvent(java.awt.event.KeyEvent)"
    ],
    "org.w3c.dom.typeinfo.isderivedfrom": [
        "org.w3c.dom.TypeInfo.isDerivedFrom(java.lang.String,java.lang.String,int)"
    ],
    "java.util.locale.languagerange.hashcode": [
        "java.util.Locale.LanguageRange.hashCode()"
    ],
    "javax.sound.midi.shortmessage.getcommand": [
        "javax.sound.midi.ShortMessage.getCommand()"
    ],
    "javax.swing.plaf.multi.multitreeui.installui": [
        "javax.swing.plaf.multi.MultiTreeUI.installUI(javax.swing.JComponent)"
    ],
    "java.security.keystore.privatekeyentry.getcertificatechain": [
        "java.security.KeyStore.PrivateKeyEntry.getCertificateChain()"
    ],
    "javax.security.auth.kerberos.kerberosticket.getrenewtill": [
        "javax.security.auth.kerberos.KerberosTicket.getRenewTill()"
    ],
    "javax.management.mbeanattributeinfo.equals": [
        "javax.management.MBeanAttributeInfo.equals(java.lang.Object)"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.writelock.getholdcount": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.getHoldCount()"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.getmaxselectionrow": [
        "javax.swing.tree.DefaultTreeSelectionModel.getMaxSelectionRow()"
    ],
    "javax.swing.debuggraphics.isdrawingbuffer": [
        "javax.swing.DebugGraphics.isDrawingBuffer()"
    ],
    "javax.swing.plaf.basic.combopopup.hide": [
        "javax.swing.plaf.basic.ComboPopup.hide()"
    ],
    "java.util.concurrent.scheduledthreadpoolexecutor.setcontinueexistingperiodictasksaftershutdownpolicy": [
        "java.util.concurrent.ScheduledThreadPoolExecutor.setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean)"
    ],
    "javax.management.openmbean.openmbeanoperationinfo.getimpact": [
        "javax.management.openmbean.OpenMBeanOperationInfo.getImpact()"
    ],
    "java.awt.mouseinfo.getnumberofbuttons": [
        "java.awt.MouseInfo.getNumberOfButtons()"
    ],
    "javax.swing.plaf.basic.basicfilechooserui.getdirectory": [
        "javax.swing.plaf.basic.BasicFileChooserUI.getDirectory()"
    ],
    "java.awt.geom.line2d.intersects": [
        "java.awt.geom.Line2D.intersects(java.awt.geom.Rectangle2D)",
        "java.awt.geom.Line2D.intersects(double,double,double,double)"
    ],
    "java.awt.print.pageable.getprintable": [
        "java.awt.print.Pageable.getPrintable(int)"
    ],
    "org.omg.cosnaming._namingcontextextstub.list": [
        "org.omg.CosNaming._NamingContextExtStub.list(int,org.omg.CosNaming.BindingListHolder,org.omg.CosNaming.BindingIteratorHolder)"
    ],
    "java.nio.file.attribute.filetime.tostring": [
        "java.nio.file.attribute.FileTime.toString()"
    ],
    "java.util.concurrent.priorityblockingqueue.comparator": [
        "java.util.concurrent.PriorityBlockingQueue.comparator()"
    ],
    "java.time.chrono.isochronology.period": [
        "java.time.chrono.IsoChronology.period(int,int,int)"
    ],
    "java.rmi.server.remoteref.remoteequals": [
        "java.rmi.server.RemoteRef.remoteEquals(java.rmi.server.RemoteRef)"
    ],
    "javax.swing.plaf.multi.multitabbedpaneui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiTabbedPaneUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "java.lang.string.startswith": [
        "java.lang.String.startsWith(java.lang.String,int)",
        "java.lang.String.startsWith(java.lang.String)"
    ],
    "java.time.format.datetimeformatter.withzone": [
        "java.time.format.DateTimeFormatter.withZone(java.time.ZoneId)"
    ],
    "java.awt.trayicon.getactioncommand": [
        "java.awt.TrayIcon.getActionCommand()"
    ],
    "javax.swing.plaf.basic.basictreeui.updatesize": [
        "javax.swing.plaf.basic.BasicTreeUI.updateSize()"
    ],
    "java.lang.system.identityhashcode": [
        "java.lang.System.identityHashCode(java.lang.Object)"
    ],
    "javax.sound.midi.midichannel.setmono": [
        "javax.sound.midi.MidiChannel.setMono(boolean)"
    ],
    "java.io.pipedinputstream.read": [
        "java.io.PipedInputStream.read(byte[],int,int)",
        "java.io.PipedInputStream.read()"
    ],
    "javax.swing.plaf.multi.multitooltipui.uninstallui": [
        "javax.swing.plaf.multi.MultiToolTipUI.uninstallUI(javax.swing.JComponent)"
    ],
    "java.sql.databasemetadata.storesuppercaseidentifiers": [
        "java.sql.DatabaseMetaData.storesUpperCaseIdentifiers()"
    ],
    "javax.xml.stream.xmloutputfactory.createxmlstreamwriter": [
        "javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(java.io.OutputStream)",
        "javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(java.io.Writer)",
        "javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(javax.xml.transform.Result)",
        "javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(java.io.OutputStream,java.lang.String)"
    ],
    "java.sql.resultset.next": [
        "java.sql.ResultSet.next()"
    ],
    "javax.swing.abstractbutton.geticon": [
        "javax.swing.AbstractButton.getIcon()"
    ],
    "java.util.stream.streamsupport.intstream": [
        "java.util.stream.StreamSupport.intStream(java.util.function.Supplier<? extends java.util.Spliterator.OfInt>,int,boolean)",
        "java.util.stream.StreamSupport.intStream(java.util.Spliterator.OfInt,boolean)"
    ],
    "java.sql.drivermanager.getconnection": [
        "java.sql.DriverManager.getConnection(java.lang.String,java.lang.String,java.lang.String)",
        "java.sql.DriverManager.getConnection(java.lang.String)",
        "java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)"
    ],
    "java.beans.simplebeaninfo.geteventsetdescriptors": [
        "java.beans.SimpleBeanInfo.getEventSetDescriptors()"
    ],
    "java.util.stream.stream.peek": [
        "java.util.stream.Stream.peek(java.util.function.Consumer<? super T>)",
        "java.util.stream.Stream.peek(java.util.function.Consumer<? super java.util.stream.Stream>)"
    ],
    "javax.swing.tree.defaultmutabletreenode.getleafcount": [
        "javax.swing.tree.DefaultMutableTreeNode.getLeafCount()"
    ],
    "javax.swing.jpopupmenu.setborderpainted": [
        "javax.swing.JPopupMenu.setBorderPainted(boolean)"
    ],
    "java.lang.reflect.method.getannotatedreturntype": [
        "java.lang.reflect.Method.getAnnotatedReturnType()"
    ],
    "java.time.zoneoffset.query": [
        "java.time.ZoneOffset.query(java.time.temporal.TemporalQuery<R>)"
    ],
    "java.util.vector.clone": [
        "java.util.Vector.clone()"
    ],
    "org.xml.sax.saxparseexception.getpublicid": [
        "org.xml.sax.SAXParseException.getPublicId()"
    ],
    "javax.print.attribute.standard.jobstatereasons.getcategory": [
        "javax.print.attribute.standard.JobStateReasons.getCategory()"
    ],
    "java.io.objectinputstream.readchar": [
        "java.io.ObjectInputStream.readChar()"
    ],
    "org.omg.dynamicany._dynstructstub.destroy": [
        "org.omg.DynamicAny._DynStructStub.destroy()"
    ],
    "javax.transaction.xa.xaresource.gettransactiontimeout": [
        "javax.transaction.xa.XAResource.getTransactionTimeout()"
    ],
    "java.lang.management.classloadingmxbean.gettotalloadedclasscount": [
        "java.lang.management.ClassLoadingMXBean.getTotalLoadedClassCount()"
    ],
    "javax.xml.parsers.saxparserfactory.newinstance": [
        "javax.xml.parsers.SAXParserFactory.newInstance(java.lang.String,java.lang.ClassLoader)",
        "javax.xml.parsers.SAXParserFactory.newInstance()"
    ],
    "java.lang.short.doublevalue": [
        "java.lang.Short.doubleValue()"
    ],
    "javax.sql.rowset.setescapeprocessing": [
        "javax.sql.RowSet.setEscapeProcessing(boolean)"
    ],
    "javax.swing.tree.fixedheightlayoutcache.getvisiblechildcount": [
        "javax.swing.tree.FixedHeightLayoutCache.getVisibleChildCount(javax.swing.tree.TreePath)"
    ],
    "javax.swing.popupfactory.setsharedinstance": [
        "javax.swing.PopupFactory.setSharedInstance(javax.swing.PopupFactory)"
    ],
    "java.awt.font.numericshaper.shape": [
        "java.awt.font.NumericShaper.shape(char[],int,int,java.awt.font.NumericShaper.Range)",
        "java.awt.font.NumericShaper.shape(char[],int,int,int)",
        "java.awt.font.NumericShaper.shape(char[],int,int)"
    ],
    "javax.swing.plaf.synth.synthtextfieldui.createui": [
        "javax.swing.plaf.synth.SynthTextFieldUI.createUI(javax.swing.JComponent)"
    ],
    "org.omg.corba.localobject._is_local": [
        "org.omg.CORBA.LocalObject._is_local()"
    ],
    "org.omg.dynamicany.dynarrayoperations.get_elements": [
        "org.omg.DynamicAny.DynArrayOperations.get_elements()"
    ],
    "javax.swing.jtextfield.postactionevent": [
        "javax.swing.JTextField.postActionEvent()"
    ],
    "javax.swing.border.abstractborder.getbaselineresizebehavior": [
        "javax.swing.border.AbstractBorder.getBaselineResizeBehavior(java.awt.Component)"
    ],
    "java.sql.sqloutput.writeurl": [
        "java.sql.SQLOutput.writeURL(java.net.URL)"
    ],
    "java.util.zip.inflaterinputstream.close": [
        "java.util.zip.InflaterInputStream.close()"
    ],
    "javax.swing.jrootpane.isoptimizeddrawingenabled": [
        "javax.swing.JRootPane.isOptimizedDrawingEnabled()"
    ],
    "org.omg.dynamicany._dynanystub.get_ushort": [
        "org.omg.DynamicAny._DynAnyStub.get_ushort()"
    ],
    "javax.swing.plaf.textui.getrootview": [
        "javax.swing.plaf.TextUI.getRootView(javax.swing.text.JTextComponent)"
    ],
    "java.util.splittablerandom.nextint": [
        "java.util.SplittableRandom.nextInt()"
    ],
    "java.io.chararrayreader.close": [
        "java.io.CharArrayReader.close()"
    ],
    "javax.swing.plaf.multi.multifilechooserui.paint": [
        "javax.swing.plaf.multi.MultiFileChooserUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.xml.bind.datatypeconverterinterface.parsehexbinary": [
        "javax.xml.bind.DatatypeConverterInterface.parseHexBinary(java.lang.String)"
    ],
    "java.util.concurrent.concurrentskiplistmap.remove": [
        "java.util.concurrent.ConcurrentSkipListMap.remove(java.lang.Object,java.lang.Object)",
        "java.util.concurrent.ConcurrentSkipListMap.remove(java.lang.Object)"
    ],
    "javax.swing.text.stylededitorkit.styledtextaction.setparagraphattributes": [
        "javax.swing.text.StyledEditorKit.StyledTextAction.setParagraphAttributes(javax.swing.JEditorPane,javax.swing.text.AttributeSet,boolean)"
    ],
    "java.util.treemap.put": [
        "java.util.TreeMap.put(K,V)",
        "java.util.TreeMap.put(java.util.TreeMap,java.util.TreeMap)"
    ],
    "java.awt.print.pageformat.getimageableheight": [
        "java.awt.print.PageFormat.getImageableHeight()"
    ],
    "java.text.choiceformat.topattern": [
        "java.text.ChoiceFormat.toPattern()"
    ],
    "javax.sound.midi.midifileformat.getbytelength": [
        "javax.sound.midi.MidiFileFormat.getByteLength()"
    ],
    "java.util.logging.logger.setlevel": [
        "java.util.logging.Logger.setLevel(java.util.logging.Level)"
    ],
    "javax.swing.buttonmodel.isarmed": [
        "javax.swing.ButtonModel.isArmed()"
    ],
    "javax.swing.plaf.synth.synthlabelui.createui": [
        "javax.swing.plaf.synth.SynthLabelUI.createUI(javax.swing.JComponent)"
    ],
    "javax.swing.grouplayout.alignment.valueof": [
        "javax.swing.GroupLayout.Alignment.valueOf(java.lang.String)"
    ],
    "javax.swing.plaf.basic.basicscrollpaneui.getbaselineresizebehavior": [
        "javax.swing.plaf.basic.BasicScrollPaneUI.getBaselineResizeBehavior(javax.swing.JComponent)"
    ],
    "java.util.gregoriancalendar.setweekdate": [
        "java.util.GregorianCalendar.setWeekDate(int,int,int)"
    ],
    "java.util.stream.doublestream.average": [
        "java.util.stream.DoubleStream.average()"
    ],
    "java.awt.awteventmulticaster.hierarchychanged": [
        "java.awt.AWTEventMulticaster.hierarchyChanged(java.awt.event.HierarchyEvent)"
    ],
    "java.net.uri.parseserverauthority": [
        "java.net.URI.parseServerAuthority()"
    ],
    "javax.tools.javafilemanager.location.getname": [
        "javax.tools.JavaFileManager.Location.getName()"
    ],
    "java.lang.management.memorymxbean.getheapmemoryusage": [
        "java.lang.management.MemoryMXBean.getHeapMemoryUsage()"
    ],
    "java.security.spec.rsamultiprimeprivatecrtkeyspec.getprimeq": [
        "java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPrimeQ()"
    ],
    "org.ietf.jgss.gsscontext.getmic": [
        "org.ietf.jgss.GSSContext.getMIC(java.io.InputStream,java.io.OutputStream,org.ietf.jgss.MessageProp)"
    ],
    "java.net.datagramsocket.bind": [
        "java.net.DatagramSocket.bind(java.net.SocketAddress)"
    ],
    "java.lang.package.getimplementationversion": [
        "java.lang.Package.getImplementationVersion()"
    ],
    "java.sql.preparedstatement.getmetadata": [
        "java.sql.PreparedStatement.getMetaData()"
    ],
    "javax.xml.ws.soap.soapbinding.getmessagefactory": [
        "javax.xml.ws.soap.SOAPBinding.getMessageFactory()"
    ],
    "java.util.function.intpredicate.test": [
        "java.util.function.IntPredicate.test(int)"
    ],
    "javax.swing.swingutilities.getdeepestcomponentat": [
        "javax.swing.SwingUtilities.getDeepestComponentAt(java.awt.Component,int,int)"
    ],
    "javax.xml.namespace.qname.hashcode": [
        "javax.xml.namespace.QName.hashCode()"
    ],
    "javax.sql.commondatasource.getlogintimeout": [
        "javax.sql.CommonDataSource.getLoginTimeout()"
    ],
    "javax.swing.defaultbuttonmodel.setgroup": [
        "javax.swing.DefaultButtonModel.setGroup(javax.swing.ButtonGroup)"
    ],
    "javax.swing.jviewport.setscrollmode": [
        "javax.swing.JViewport.setScrollMode(int)"
    ],
    "javax.activation.mimetype.getparameters": [
        "javax.activation.MimeType.getParameters()"
    ],
    "org.omg.portableinterceptor.requestinfooperations.operation": [
        "org.omg.PortableInterceptor.RequestInfoOperations.operation()"
    ],
    "javax.naming.directory.searchcontrols.settimelimit": [
        "javax.naming.directory.SearchControls.setTimeLimit(int)"
    ],
    "javax.swing.buttonmodel.getmnemonic": [
        "javax.swing.ButtonModel.getMnemonic()"
    ],
    "javax.swing.plaf.nimbus.abstractregionpainter.decodeanchorx": [
        "javax.swing.plaf.nimbus.AbstractRegionPainter.decodeAnchorX(float,float)"
    ],
    "javax.sound.sampled.audiosystem.gettargetformats": [
        "javax.sound.sampled.AudioSystem.getTargetFormats(javax.sound.sampled.AudioFormat.Encoding,javax.sound.sampled.AudioFormat)"
    ],
    "javax.accessibility.accessiblecontext.getaccessibleindexinparent": [
        "javax.accessibility.AccessibleContext.getAccessibleIndexInParent()"
    ],
    "javax.swing.defaultlistselectionmodel.moveleadselectionindex": [
        "javax.swing.DefaultListSelectionModel.moveLeadSelectionIndex(int)"
    ],
    "java.util.stream.intstream.peek": [
        "java.util.stream.IntStream.peek(java.util.function.IntConsumer)"
    ],
    "java.nio.charset.coderresult.tostring": [
        "java.nio.charset.CoderResult.toString()"
    ],
    "javax.swing.text.numberformatter.setformat": [
        "javax.swing.text.NumberFormatter.setFormat(java.text.Format)"
    ],
    "java.awt.container.isfocustraversalpolicyset": [
        "java.awt.Container.isFocusTraversalPolicySet()"
    ],
    "javax.swing.jtoolbar.isrollover": [
        "javax.swing.JToolBar.isRollover()"
    ],
    "org.omg.dynamicany._dynfixedstub.get_float": [
        "org.omg.DynamicAny._DynFixedStub.get_float()"
    ],
    "org.omg.corba.serverrequest.operation": [
        "org.omg.CORBA.ServerRequest.operation()"
    ],
    "java.time.zoneddatetime.of": [
        "java.time.ZonedDateTime.of(java.time.LocalDateTime,java.time.ZoneId)",
        "java.time.ZonedDateTime.of(java.time.LocalDate,java.time.LocalTime,java.time.ZoneId)",
        "java.time.ZonedDateTime.of(int,int,int,int,int,int,int,java.time.ZoneId)"
    ],
    "java.lang.float.bytevalue": [
        "java.lang.Float.byteValue()"
    ],
    "javax.xml.bind.validationeventhandler.handleevent": [
        "javax.xml.bind.ValidationEventHandler.handleEvent(javax.xml.bind.ValidationEvent)"
    ],
    "javax.swing.jtree.getshowsroothandles": [
        "javax.swing.JTree.getShowsRootHandles()"
    ],
    "java.net.datagramsocket.getsendbuffersize": [
        "java.net.DatagramSocket.getSendBufferSize()"
    ],
    "java.util.concurrent.concurrentskiplistmap.put": [
        "java.util.concurrent.ConcurrentSkipListMap.put(K,V)",
        "java.util.concurrent.ConcurrentSkipListMap.put(java.util.concurrent.ConcurrentSkipListMap,java.util.concurrent.ConcurrentSkipListMap)"
    ],
    "java.awt.checkbox.getlabel": [
        "java.awt.Checkbox.getLabel()"
    ],
    "java.awt.event.mouseevent.getx": [
        "java.awt.event.MouseEvent.getX()"
    ],
    "java.awt.window.settype": [
        "java.awt.Window.setType(java.awt.Window.Type)"
    ],
    "javax.annotation.processing.roundenvironment.getelementsannotatedwith": [
        "javax.annotation.processing.RoundEnvironment.getElementsAnnotatedWith(java.lang.Class<? extends java.lang.annotation.Annotation>)",
        "javax.annotation.processing.RoundEnvironment.getElementsAnnotatedWith(javax.lang.model.element.TypeElement)"
    ],
    "java.net.socket.setperformancepreferences": [
        "java.net.Socket.setPerformancePreferences(int,int,int)"
    ],
    "org.w3c.dom.events.mutationevent.getattrname": [
        "org.w3c.dom.events.MutationEvent.getAttrName()"
    ],
    "java.util.concurrent.locks.stampedlock.unlockread": [
        "java.util.concurrent.locks.StampedLock.unlockRead(long)"
    ],
    "org.w3c.dom.element.getelementsbytagname": [
        "org.w3c.dom.Element.getElementsByTagName(java.lang.String)"
    ],
    "javax.swing.japplet.setlayeredpane": [
        "javax.swing.JApplet.setLayeredPane(javax.swing.JLayeredPane)"
    ],
    "java.util.concurrent.priorityblockingqueue.offer": [
        "java.util.concurrent.PriorityBlockingQueue.offer(E,long,java.util.concurrent.TimeUnit)",
        "java.util.concurrent.PriorityBlockingQueue.offer(java.util.concurrent.PriorityBlockingQueue,long,java.util.concurrent.TimeUnit)",
        "java.util.concurrent.PriorityBlockingQueue.offer(java.util.concurrent.PriorityBlockingQueue)",
        "java.util.concurrent.PriorityBlockingQueue.offer(E)"
    ],
    "java.awt.image.rescaleop.getscalefactors": [
        "java.awt.image.RescaleOp.getScaleFactors(float[])"
    ],
    "java.nio.file.securedirectorystream.deletefile": [
        "java.nio.file.SecureDirectoryStream.deleteFile(T)",
        "java.nio.file.SecureDirectoryStream.deleteFile(java.nio.file.SecureDirectoryStream)"
    ],
    "javax.lang.model.element.modifier.tostring": [
        "javax.lang.model.element.Modifier.toString()"
    ],
    "javax.swing.internalframefocustraversalpolicy.getinitialcomponent": [
        "javax.swing.InternalFrameFocusTraversalPolicy.getInitialComponent(javax.swing.JInternalFrame)"
    ],
    "javax.swing.text.simpleattributeset.isequal": [
        "javax.swing.text.SimpleAttributeSet.isEqual(javax.swing.text.AttributeSet)"
    ],
    "org.ietf.jgss.gsscontext.requestreplaydet": [
        "org.ietf.jgss.GSSContext.requestReplayDet(boolean)"
    ],
    "javax.swing.table.tablecolumn.setresizable": [
        "javax.swing.table.TableColumn.setResizable(boolean)"
    ],
    "java.lang.management.classloadingmxbean.isverbose": [
        "java.lang.management.ClassLoadingMXBean.isVerbose()"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.createui": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.createUI(javax.swing.JComponent)"
    ],
    "javax.xml.validation.schemafactoryloader.newfactory": [
        "javax.xml.validation.SchemaFactoryLoader.newFactory(java.lang.String)"
    ],
    "org.w3c.dom.ls.lsprogressevent.getinput": [
        "org.w3c.dom.ls.LSProgressEvent.getInput()"
    ],
    "javax.swing.event.listdataevent.getindex0": [
        "javax.swing.event.ListDataEvent.getIndex0()"
    ],
    "javax.swing.rowfilter.comparisontype.valueof": [
        "javax.swing.RowFilter.ComparisonType.valueOf(java.lang.String)"
    ],
    "java.util.concurrent.atomic.atomiclongarray.compareandset": [
        "java.util.concurrent.atomic.AtomicLongArray.compareAndSet(int,long,long)"
    ],
    "java.awt.graphics.getclip": [
        "java.awt.Graphics.getClip()"
    ],
    "java.time.period.getchronology": [
        "java.time.Period.getChronology()"
    ],
    "javax.xml.namespace.namespacecontext.getprefix": [
        "javax.xml.namespace.NamespaceContext.getPrefix(java.lang.String)"
    ],
    "java.sql.databasemetadata.datadefinitioncausestransactioncommit": [
        "java.sql.DatabaseMetaData.dataDefinitionCausesTransactionCommit()"
    ],
    "java.awt.window.addwindowstatelistener": [
        "java.awt.Window.addWindowStateListener(java.awt.event.WindowStateListener)"
    ],
    "java.time.zoneddatetime.minusyears": [
        "java.time.ZonedDateTime.minusYears(long)"
    ],
    "java.nio.channels.spi.abstractselectablechannel.configureblocking": [
        "java.nio.channels.spi.AbstractSelectableChannel.configureBlocking(boolean)"
    ],
    "java.util.locale.getunicodelocaletype": [
        "java.util.Locale.getUnicodeLocaleType(java.lang.String)"
    ],
    "javax.naming.spi.namingmanager.geturlcontext": [
        "javax.naming.spi.NamingManager.getURLContext(java.lang.String,,?>)"
    ],
    "javax.swing.plaf.synth.synthtogglebuttonui.createui": [
        "javax.swing.plaf.synth.SynthToggleButtonUI.createUI(javax.swing.JComponent)"
    ],
    "javax.swing.tree.treeselectionmodel.getselectioncount": [
        "javax.swing.tree.TreeSelectionModel.getSelectionCount()"
    ],
    "java.lang.reflect.field.getchar": [
        "java.lang.reflect.Field.getChar(java.lang.Object)"
    ],
    "java.text.stringcharacteriterator.last": [
        "java.text.StringCharacterIterator.last()"
    ],
    "javax.xml.bind.datatypeconverterinterface.printint": [
        "javax.xml.bind.DatatypeConverterInterface.printInt(int)"
    ],
    "java.util.intsummarystatistics.getsum": [
        "java.util.IntSummaryStatistics.getSum()"
    ],
    "javax.print.docprintjob.removeprintjoblistener": [
        "javax.print.DocPrintJob.removePrintJobListener(javax.print.event.PrintJobListener)"
    ],
    "javax.imageio.stream.imageoutputstream.writeints": [
        "javax.imageio.stream.ImageOutputStream.writeInts(int[],int,int)"
    ],
    "javax.script.scriptenginefactory.getengineversion": [
        "javax.script.ScriptEngineFactory.getEngineVersion()"
    ],
    "java.util.function.function.andthen": [
        "java.util.function.Function.andThen(java.util.function.Function<? super,? extends V>)"
    ],
    "java.util.zip.zipentry.getsize": [
        "java.util.zip.ZipEntry.getSize()"
    ],
    "javax.xml.transform.sax.saxresult.sethandler": [
        "javax.xml.transform.sax.SAXResult.setHandler(org.xml.sax.ContentHandler)"
    ],
    "javax.swing.colorchooser.abstractcolorchooserpanel.getcolorfrommodel": [
        "javax.swing.colorchooser.AbstractColorChooserPanel.getColorFromModel()"
    ],
    "java.nio.file.attribute.filetime.from": [
        "java.nio.file.attribute.FileTime.from(long,java.util.concurrent.TimeUnit)",
        "java.nio.file.attribute.FileTime.from(java.time.Instant)"
    ],
    "java.awt.container.getcomponentzorder": [
        "java.awt.Container.getComponentZOrder(java.awt.Component)"
    ],
    "javax.xml.bind.datatypeconverterinterface.printtime": [
        "javax.xml.bind.DatatypeConverterInterface.printTime(java.util.Calendar)"
    ],
    "java.awt.event.actionevent.paramstring": [
        "java.awt.event.ActionEvent.paramString()"
    ],
    "java.beans.beancontext.beancontextserviceprovider.getservice": [
        "java.beans.beancontext.BeanContextServiceProvider.getService(java.beans.beancontext.BeanContextServices,java.lang.Object,java.lang.Class,java.lang.Object)"
    ],
    "javax.swing.borderfactory.createloweredsoftbevelborder": [
        "javax.swing.BorderFactory.createLoweredSoftBevelBorder()"
    ],
    "javax.swing.plaf.basic.basicspinnerui.createpropertychangelistener": [
        "javax.swing.plaf.basic.BasicSpinnerUI.createPropertyChangeListener()"
    ],
    "javax.xml.soap.soapmessage.addattachmentpart": [
        "javax.xml.soap.SOAPMessage.addAttachmentPart(javax.xml.soap.AttachmentPart)"
    ],
    "java.util.concurrent.atomic.atomiclongfieldupdater.getandupdate": [
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndUpdate(T,java.util.function.LongUnaryOperator)",
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndUpdate(java.util.concurrent.atomic.AtomicLongFieldUpdater,java.util.function.LongUnaryOperator)"
    ],
    "javax.xml.stream.xmlstreamwriter.writedefaultnamespace": [
        "javax.xml.stream.XMLStreamWriter.writeDefaultNamespace(java.lang.String)"
    ],
    "org.xml.sax.helpers.parseradapter.setcontenthandler": [
        "org.xml.sax.helpers.ParserAdapter.setContentHandler(org.xml.sax.ContentHandler)"
    ],
    "org.w3c.dom.namednodemap.getnameditemns": [
        "org.w3c.dom.NamedNodeMap.getNamedItemNS(java.lang.String,java.lang.String)"
    ],
    "java.util.zip.checksum.getvalue": [
        "java.util.zip.Checksum.getValue()"
    ],
    "java.awt.font.graphicattribute.draw": [
        "java.awt.font.GraphicAttribute.draw(java.awt.Graphics2D,float,float)"
    ],
    "java.text.spi.dateformatprovider.getdateinstance": [
        "java.text.spi.DateFormatProvider.getDateInstance(int,java.util.Locale)"
    ],
    "java.lang.class.assubclass": [
        "java.lang.Class.asSubclass(java.lang.Class<U>)"
    ],
    "javax.swing.defaultcelleditor.setclickcounttostart": [
        "javax.swing.DefaultCellEditor.setClickCountToStart(int)"
    ],
    "java.awt.font.texthitinfo.tostring": [
        "java.awt.font.TextHitInfo.toString()"
    ],
    "javax.swing.plaf.synth.synthtableheaderui.paint": [
        "javax.swing.plaf.synth.SynthTableHeaderUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",
        "javax.swing.plaf.synth.SynthTableHeaderUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.jcombobox.showpopup": [
        "javax.swing.JComboBox.showPopup()"
    ],
    "javax.swing.plaf.basic.basiclookandfeel.uninitialize": [
        "javax.swing.plaf.basic.BasicLookAndFeel.uninitialize()"
    ],
    "javax.swing.plaf.metal.defaultmetaltheme.getsubtextfont": [
        "javax.swing.plaf.metal.DefaultMetalTheme.getSubTextFont()"
    ],
    "javax.imageio.iioparamcontroller.activate": [
        "javax.imageio.IIOParamController.activate(javax.imageio.IIOParam)"
    ],
    "javax.xml.soap.soapfault.getfaultsubcodes": [
        "javax.xml.soap.SOAPFault.getFaultSubcodes()"
    ],
    "javax.swing.jslider.setorientation": [
        "javax.swing.JSlider.setOrientation(int)"
    ],
    "javax.xml.bind.helpers.validationeventlocatorimpl.tostring": [
        "javax.xml.bind.helpers.ValidationEventLocatorImpl.toString()"
    ],
    "java.util.stream.longstream.generate": [
        "java.util.stream.LongStream.generate(java.util.function.LongSupplier)"
    ],
    "javax.swing.text.abstractdocument.render": [
        "javax.swing.text.AbstractDocument.render(java.lang.Runnable)"
    ],
    "javax.imageio.event.iiowriteprogresslistener.writeaborted": [
        "javax.imageio.event.IIOWriteProgressListener.writeAborted(javax.imageio.ImageWriter)"
    ],
    "org.xml.sax.helpers.locatorimpl.setpublicid": [
        "org.xml.sax.helpers.LocatorImpl.setPublicId(java.lang.String)"
    ],
    "java.io.randomaccessfile.writeboolean": [
        "java.io.RandomAccessFile.writeBoolean(boolean)"
    ],
    "java.util.concurrent.locks.abstractqueuedsynchronizer.conditionobject.signal": [
        "java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.signal()"
    ],
    "javax.swing.table.jtableheader.paramstring": [
        "javax.swing.table.JTableHeader.paramString()"
    ],
    "java.time.format.datetimeformatter.oflocalizeddate": [
        "java.time.format.DateTimeFormatter.ofLocalizedDate(java.time.format.FormatStyle)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintpopupmenuborder": [
        "javax.swing.plaf.synth.SynthPainter.paintPopupMenuBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.lang.system.getsecuritymanager": [
        "java.lang.System.getSecurityManager()"
    ],
    "java.util.function.binaryoperator.minby": [
        "java.util.function.BinaryOperator.minBy(java.util.Comparator<? super T>)"
    ],
    "java.awt.image.renderable.renderableimage.getminy": [
        "java.awt.image.renderable.RenderableImage.getMinY()"
    ],
    "java.lang.reflect.modifier.classmodifiers": [
        "java.lang.reflect.Modifier.classModifiers()"
    ],
    "javax.management.relation.relation.getallroles": [
        "javax.management.relation.Relation.getAllRoles()"
    ],
    "javax.swing.text.textaction.getfocusedcomponent": [
        "javax.swing.text.TextAction.getFocusedComponent()"
    ],
    "java.sql.databasemetadata.supportssavepoints": [
        "java.sql.DatabaseMetaData.supportsSavepoints()"
    ],
    "java.sql.sqlinput.readdate": [
        "java.sql.SQLInput.readDate()"
    ],
    "javax.swing.plaf.metal.metaltheme.getmenudisabledforeground": [
        "javax.swing.plaf.metal.MetalTheme.getMenuDisabledForeground()"
    ],
    "javax.swing.text.asyncboxview.createchildstate": [
        "javax.swing.text.AsyncBoxView.createChildState(javax.swing.text.View)"
    ],
    "javax.imageio.stream.iiobytebuffer.setdata": [
        "javax.imageio.stream.IIOByteBuffer.setData(byte[])"
    ],
    "java.security.provider.service.getattribute": [
        "java.security.Provider.Service.getAttribute(java.lang.String)"
    ],
    "javax.swing.jcomponent.gettooltiptext": [
        "javax.swing.JComponent.getToolTipText()"
    ],
    "java.awt.geom.area.createtransformedarea": [
        "java.awt.geom.Area.createTransformedArea(java.awt.geom.AffineTransform)"
    ],
    "java.awt.jobattributes.getdefaultselection": [
        "java.awt.JobAttributes.getDefaultSelection()"
    ],
    "java.lang.reflect.array.setboolean": [
        "java.lang.reflect.Array.setBoolean(java.lang.Object,int,boolean)"
    ],
    "java.time.chrono.japanesechronology.date": [
        "java.time.chrono.JapaneseChronology.date(java.time.chrono.Era,int,int,int)",
        "java.time.chrono.JapaneseChronology.date(int,int,int)"
    ],
    "javax.swing.plaf.metal.metaltheme.getdesktopcolor": [
        "javax.swing.plaf.metal.MetalTheme.getDesktopColor()"
    ],
    "javax.lang.model.element.annotationvaluevisitor.visitshort": [
        "javax.lang.model.element.AnnotationValueVisitor.visitShort(short,javax.lang.model.element.AnnotationValueVisitor)"
    ],
    "javax.swing.plaf.multi.multiviewportui.uninstallui": [
        "javax.swing.plaf.multi.MultiViewportUI.uninstallUI(javax.swing.JComponent)"
    ],
    "java.lang.strictmath.atan": [
        "java.lang.StrictMath.atan(double)"
    ],
    "javax.management.runtimeoperationsexception.gettargetexception": [
        "javax.management.RuntimeOperationsException.getTargetException()"
    ],
    "java.time.localdatetime.minusyears": [
        "java.time.LocalDateTime.minusYears(long)"
    ],
    "javax.swing.joptionpane.setoptions": [
        "javax.swing.JOptionPane.setOptions(java.lang.Object[])"
    ],
    "javax.print.attribute.attributesetutilities.unmodifiableview": [
        "javax.print.attribute.AttributeSetUtilities.unmodifiableView(javax.print.attribute.PrintRequestAttributeSet)",
        "javax.print.attribute.AttributeSetUtilities.unmodifiableView(javax.print.attribute.PrintJobAttributeSet)",
        "javax.print.attribute.AttributeSetUtilities.unmodifiableView(javax.print.attribute.DocAttributeSet)",
        "javax.print.attribute.AttributeSetUtilities.unmodifiableView(javax.print.attribute.PrintServiceAttributeSet)",
        "javax.print.attribute.AttributeSetUtilities.unmodifiableView(javax.print.attribute.AttributeSet)"
    ],
    "java.io.dataoutput.write": [
        "java.io.DataOutput.write(byte[],int,int)",
        "java.io.DataOutput.write(int)",
        "java.io.DataOutput.write(byte[])"
    ],
    "javax.xml.bind.helpers.abstractmarshallerimpl.getencoding": [
        "javax.xml.bind.helpers.AbstractMarshallerImpl.getEncoding()"
    ],
    "java.nio.file.files.setposixfilepermissions": [
        "java.nio.file.Files.setPosixFilePermissions(java.nio.file.Path,java.util.Set<java.nio.file.attribute.PosixFilePermission>)"
    ],
    "javax.xml.ws.handler.handler.handlemessage": [
        "javax.xml.ws.handler.Handler.handleMessage(javax.xml.ws.handler.Handler)"
    ],
    "java.rmi.server.remoteref.getrefclass": [
        "java.rmi.server.RemoteRef.getRefClass(java.io.ObjectOutput)"
    ],
    "org.ietf.jgss.gsscredential.getmechs": [
        "org.ietf.jgss.GSSCredential.getMechs()"
    ],
    "org.xml.sax.ext.locator2impl.setxmlversion": [
        "org.xml.sax.ext.Locator2Impl.setXMLVersion(java.lang.String)"
    ],
    "org.omg.portableinterceptor.clientrequestinterceptoroperations.send_request": [
        "org.omg.PortableInterceptor.ClientRequestInterceptorOperations.send_request(org.omg.PortableInterceptor.ClientRequestInfo)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getwindowtitleinactivebackground": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleInactiveBackground()"
    ],
    "javax.net.ssl.sslsocket.getenabledprotocols": [
        "javax.net.ssl.SSLSocket.getEnabledProtocols()"
    ],
    "javax.swing.jtextfield.fireactionperformed": [
        "javax.swing.JTextField.fireActionPerformed()"
    ],
    "javax.swing.plaf.multi.multispinnerui.getminimumsize": [
        "javax.swing.plaf.multi.MultiSpinnerUI.getMinimumSize(javax.swing.JComponent)"
    ],
    "java.awt.checkbox.getstate": [
        "java.awt.Checkbox.getState()"
    ],
    "java.awt.component.processcomponentevent": [
        "java.awt.Component.processComponentEvent(java.awt.event.ComponentEvent)"
    ],
    "javax.script.bindings.put": [
        "javax.script.Bindings.put(java.lang.String,java.lang.Object)"
    ],
    "javax.swing.jeditorpane.paramstring": [
        "javax.swing.JEditorPane.paramString()"
    ],
    "javax.xml.ws.soap.addressingfeature.isrequired": [
        "javax.xml.ws.soap.AddressingFeature.isRequired()"
    ],
    "java.awt.dialog.modalitytype.values": [
        "java.awt.Dialog.ModalityType.values()"
    ],
    "java.util.collections.checkedlist": [
        "java.util.Collections.checkedList(java.util.List<E>,java.lang.Class<E>)"
    ],
    "javax.imageio.imagetypespecifier.createindexed": [
        "javax.imageio.ImageTypeSpecifier.createIndexed(byte[],byte[],byte[],byte[],int,int)"
    ],
    "java.net.authenticator.getrequestingport": [
        "java.net.Authenticator.getRequestingPort()"
    ],
    "java.beans.propertyeditorsupport.addpropertychangelistener": [
        "java.beans.PropertyEditorSupport.addPropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "java.lang.invoke.serializedlambda.getfunctionalinterfacemethodname": [
        "java.lang.invoke.SerializedLambda.getFunctionalInterfaceMethodName()"
    ],
    "javax.imageio.metadata.iiometadataformatimpl.addbooleanattribute": [
        "javax.imageio.metadata.IIOMetadataFormatImpl.addBooleanAttribute(java.lang.String,java.lang.String,boolean,boolean)"
    ],
    "javax.xml.stream.xmleventfactory.newfactory": [
        "javax.xml.stream.XMLEventFactory.newFactory()",
        "javax.xml.stream.XMLEventFactory.newFactory(java.lang.String,java.lang.ClassLoader)"
    ],
    "java.sql.resultset.getdate": [
        "java.sql.ResultSet.getDate(java.lang.String)",
        "java.sql.ResultSet.getDate(int,java.util.Calendar)",
        "java.sql.ResultSet.getDate(java.lang.String,java.util.Calendar)",
        "java.sql.ResultSet.getDate(int)"
    ],
    "javax.swing.plaf.basic.basiclookandfeel.initsystemcolordefaults": [
        "javax.swing.plaf.basic.BasicLookAndFeel.initSystemColorDefaults(javax.swing.UIDefaults)"
    ],
    "javax.management.query.minus": [
        "javax.management.Query.minus(javax.management.ValueExp,javax.management.ValueExp)"
    ],
    "javax.sound.midi.synthesizer.getloadedinstruments": [
        "javax.sound.midi.Synthesizer.getLoadedInstruments()"
    ],
    "javax.swing.plaf.multi.multicomboboxui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiComboBoxUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "java.awt.geom.cubiccurve2d.double.getbounds2d": [
        "java.awt.geom.CubicCurve2D.Double.getBounds2D()"
    ],
    "java.nio.bytebuffer.hashcode": [
        "java.nio.ByteBuffer.hashCode()"
    ],
    "javax.crypto.encryptedprivatekeyinfo.getkeyspec": [
        "javax.crypto.EncryptedPrivateKeyInfo.getKeySpec(java.security.Key,java.security.Provider)",
        "javax.crypto.EncryptedPrivateKeyInfo.getKeySpec(java.security.Key)",
        "javax.crypto.EncryptedPrivateKeyInfo.getKeySpec(java.security.Key,java.lang.String)",
        "javax.crypto.EncryptedPrivateKeyInfo.getKeySpec(javax.crypto.Cipher)"
    ],
    "java.util.concurrent.locks.reentrantreadwritelock.getqueuelength": [
        "java.util.concurrent.locks.ReentrantReadWriteLock.getQueueLength()"
    ],
    "javax.net.ssl.sslserversocket.getsupportedciphersuites": [
        "javax.net.ssl.SSLServerSocket.getSupportedCipherSuites()"
    ],
    "javax.swing.table.tablecolumn.setpreferredwidth": [
        "javax.swing.table.TableColumn.setPreferredWidth(int)"
    ],
    "org.ietf.jgss.gsscredential.getremaininginitlifetime": [
        "org.ietf.jgss.GSSCredential.getRemainingInitLifetime(org.ietf.jgss.Oid)"
    ],
    "javax.swing.joptionpane.setinputvalue": [
        "javax.swing.JOptionPane.setInputValue(java.lang.Object)"
    ],
    "org.xml.sax.ext.attributes2impl.setspecified": [
        "org.xml.sax.ext.Attributes2Impl.setSpecified(int,boolean)"
    ],
    "javax.swing.colorchooser.defaultcolorselectionmodel.removechangelistener": [
        "javax.swing.colorchooser.DefaultColorSelectionModel.removeChangeListener(javax.swing.event.ChangeListener)"
    ],
    "java.util.regex.pattern.quote": [
        "java.util.regex.Pattern.quote(java.lang.String)"
    ],
    "javax.swing.text.defaultcaret.mousepressed": [
        "javax.swing.text.DefaultCaret.mousePressed(java.awt.event.MouseEvent)"
    ],
    "java.sql.resultset.deleterow": [
        "java.sql.ResultSet.deleteRow()"
    ],
    "javax.swing.plaf.synth.synthscrollpaneui.update": [
        "javax.swing.plaf.synth.SynthScrollPaneUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.security.spec.rsamultiprimeprivatecrtkeyspec.getpublicexponent": [
        "java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPublicExponent()"
    ],
    "javax.swing.jmenu.setselected": [
        "javax.swing.JMenu.setSelected(boolean)"
    ],
    "java.sql.preparedstatement.setnclob": [
        "java.sql.PreparedStatement.setNClob(int,java.sql.NClob)",
        "java.sql.PreparedStatement.setNClob(int,java.io.Reader,long)",
        "java.sql.PreparedStatement.setNClob(int,java.io.Reader)"
    ],
    "java.awt.color.colorspace.getinstance": [
        "java.awt.color.ColorSpace.getInstance(int)"
    ],
    "javax.swing.text.html.imageview.getloadingimageicon": [
        "javax.swing.text.html.ImageView.getLoadingImageIcon()"
    ],
    "javax.xml.soap.soapmessage.getattachments": [
        "javax.xml.soap.SOAPMessage.getAttachments(javax.xml.soap.MimeHeaders)",
        "javax.xml.soap.SOAPMessage.getAttachments()"
    ],
    "java.awt.font.linemetrics.getdescent": [
        "java.awt.font.LineMetrics.getDescent()"
    ],
    "java.net.serversocket.isclosed": [
        "java.net.ServerSocket.isClosed()"
    ],
    "java.text.choiceformat.applypattern": [
        "java.text.ChoiceFormat.applyPattern(java.lang.String)"
    ],
    "javax.swing.jmenuitem.setarmed": [
        "javax.swing.JMenuItem.setArmed(boolean)"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writebinarystream": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeBinaryStream(java.io.InputStream)"
    ],
    "javax.swing.jtree.addselectionrows": [
        "javax.swing.JTree.addSelectionRows(int[])"
    ],
    "java.awt.gridlayout.setcolumns": [
        "java.awt.GridLayout.setColumns(int)"
    ],
    "java.nio.file.attribute.aclfileattributeview.getacl": [
        "java.nio.file.attribute.AclFileAttributeView.getAcl()"
    ],
    "java.text.parseexception.geterroroffset": [
        "java.text.ParseException.getErrorOffset()"
    ],
    "java.awt.component.getpropertychangelisteners": [
        "java.awt.Component.getPropertyChangeListeners()",
        "java.awt.Component.getPropertyChangeListeners(java.lang.String)"
    ],
    "javax.swing.text.abstractdocument.elementedit.getindex": [
        "javax.swing.text.AbstractDocument.ElementEdit.getIndex()"
    ],
    "java.util.currency.getdefaultfractiondigits": [
        "java.util.Currency.getDefaultFractionDigits()"
    ],
    "javax.activation.mimetypesfiletypemap.addmimetypes": [
        "javax.activation.MimetypesFileTypeMap.addMimeTypes(java.lang.String)"
    ],
    "java.util.concurrent.blockingdeque.polllast": [
        "java.util.concurrent.BlockingDeque.pollLast(long,java.util.concurrent.TimeUnit)"
    ],
    "javax.crypto.cipherinputstream.marksupported": [
        "javax.crypto.CipherInputStream.markSupported()"
    ],
    "javax.naming.reference.add": [
        "javax.naming.Reference.add(int,javax.naming.RefAddr)",
        "javax.naming.Reference.add(javax.naming.RefAddr)"
    ],
    "java.awt.event.mouseevent.getclickcount": [
        "java.awt.event.MouseEvent.getClickCount()"
    ],
    "java.sql.sqloutput.writedouble": [
        "java.sql.SQLOutput.writeDouble(double)"
    ],
    "javax.tools.standardjavafilemanager.getjavafileobjectsfromfiles": [
        "javax.tools.StandardJavaFileManager.getJavaFileObjectsFromFiles(java.lang.Iterable<? extends java.io.File>)"
    ],
    "java.util.arraylist.removeif": [
        "java.util.ArrayList.removeIf(java.util.function.Predicate<? super E>)"
    ],
    "java.awt.graphicsdevice.getavailableacceleratedmemory": [
        "java.awt.GraphicsDevice.getAvailableAcceleratedMemory()"
    ],
    "javax.swing.jtable.droplocation.isinsertrow": [
        "javax.swing.JTable.DropLocation.isInsertRow()"
    ],
    "javax.swing.defaultlistselectionmodel.getselectionmode": [
        "javax.swing.DefaultListSelectionModel.getSelectionMode()"
    ],
    "java.sql.driver.acceptsurl": [
        "java.sql.Driver.acceptsURL(java.lang.String)"
    ],
    "org.omg.corba.shortholder._type": [
        "org.omg.CORBA.ShortHolder._type()"
    ],
    "javax.swing.swingutilities.getaccessiblechildrencount": [
        "javax.swing.SwingUtilities.getAccessibleChildrenCount(java.awt.Component)"
    ],
    "javax.accessibility.accessibleeditabletext.cut": [
        "javax.accessibility.AccessibleEditableText.cut(int,int)"
    ],
    "java.awt.dnd.dragsourceadapter.dragexit": [
        "java.awt.dnd.DragSourceAdapter.dragExit(java.awt.dnd.DragSourceEvent)"
    ],
    "java.sql.resultset.getasciistream": [
        "java.sql.ResultSet.getAsciiStream(int)",
        "java.sql.ResultSet.getAsciiStream(java.lang.String)"
    ],
    "java.util.vector.tostring": [
        "java.util.Vector.toString()"
    ],
    "java.awt.geom.affinetransform.getscaleinstance": [
        "java.awt.geom.AffineTransform.getScaleInstance(double,double)"
    ],
    "javax.swing.jtree.gettreeexpansionlisteners": [
        "javax.swing.JTree.getTreeExpansionListeners()"
    ],
    "javax.swing.plaf.multi.multiscrollbarui.getuis": [
        "javax.swing.plaf.multi.MultiScrollBarUI.getUIs()"
    ],
    "javax.swing.jtree.setselectionrows": [
        "javax.swing.JTree.setSelectionRows(int[])"
    ],
    "javax.swing.jcombobox.getactioncommand": [
        "javax.swing.JComboBox.getActionCommand()"
    ],
    "java.util.list.lastindexof": [
        "java.util.List.lastIndexOf(java.lang.Object)"
    ],
    "javax.swing.text.componentview.modeltoview": [
        "javax.swing.text.ComponentView.modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)"
    ],
    "java.lang.strictmath.exp": [
        "java.lang.StrictMath.exp(double)"
    ],
    "javax.swing.jscrollpane.gethorizontalscrollbarpolicy": [
        "javax.swing.JScrollPane.getHorizontalScrollBarPolicy()"
    ],
    "javax.swing.jformattedtextfield.setformatter": [
        "javax.swing.JFormattedTextField.setFormatter(javax.swing.JFormattedTextField.AbstractFormatter)"
    ],
    "java.nio.file.attribute.aclentry.tostring": [
        "java.nio.file.attribute.AclEntry.toString()"
    ],
    "java.sql.preparedstatement.setdate": [
        "java.sql.PreparedStatement.setDate(int,java.sql.Date)",
        "java.sql.PreparedStatement.setDate(int,java.sql.Date,java.util.Calendar)"
    ],
    "java.rmi.activation.activationgroupdesc.getpropertyoverrides": [
        "java.rmi.activation.ActivationGroupDesc.getPropertyOverrides()"
    ],
    "java.time.localtime.minusminutes": [
        "java.time.LocalTime.minusMinutes(long)"
    ],
    "java.awt.im.spi.inputmethoddescriptor.hasdynamiclocalelist": [
        "java.awt.im.spi.InputMethodDescriptor.hasDynamicLocaleList()"
    ],
    "java.security.spec.rsaotherprimeinfo.getcrtcoefficient": [
        "java.security.spec.RSAOtherPrimeInfo.getCrtCoefficient()"
    ],
    "java.awt.textfield.getpreferredsize": [
        "java.awt.TextField.getPreferredSize(int)",
        "java.awt.TextField.getPreferredSize()"
    ],
    "org.w3c.dom.document.getxmlencoding": [
        "org.w3c.dom.Document.getXmlEncoding()"
    ],
    "java.util.abstractqueue.addall": [
        "java.util.AbstractQueue.addAll(java.util.Collection<? extends E>)",
        "java.util.AbstractQueue.addAll(java.util.Collection<? extends java.util.AbstractQueue>)"
    ],
    "java.awt.print.book.getpageformat": [
        "java.awt.print.Book.getPageFormat(int)"
    ],
    "javax.xml.stream.xmlresolver.resolveentity": [
        "javax.xml.stream.XMLResolver.resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
    ],
    "javax.swing.plaf.synth.synthinternalframeui.update": [
        "javax.swing.plaf.synth.SynthInternalFrameUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.awt.popupmenu.show": [
        "java.awt.PopupMenu.show(java.awt.Component,int,int)"
    ],
    "javax.swing.jlist.getmaxselectionindex": [
        "javax.swing.JList.getMaxSelectionIndex()"
    ],
    "javax.print.attribute.standard.printermessagefromoperator.getcategory": [
        "javax.print.attribute.standard.PrinterMessageFromOperator.getCategory()"
    ],
    "java.awt.font.glyphvector.getvisualbounds": [
        "java.awt.font.GlyphVector.getVisualBounds()"
    ],
    "java.awt.font.numericshaper.iscontextual": [
        "java.awt.font.NumericShaper.isContextual()"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.getnoncontinuouslayoutdivider": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.getNonContinuousLayoutDivider()"
    ],
    "java.lang.stringbuilder.indexof": [
        "java.lang.StringBuilder.indexOf(java.lang.String,int)",
        "java.lang.StringBuilder.indexOf(java.lang.String)"
    ],
    "java.util.calendar.after": [
        "java.util.Calendar.after(java.lang.Object)"
    ],
    "java.net.socket.close": [
        "java.net.Socket.close()"
    ],
    "javax.swing.jlist.setselectionmode": [
        "javax.swing.JList.setSelectionMode(int)"
    ],
    "java.applet.audioclip.play": [
        "java.applet.AudioClip.play()"
    ],
    "javax.print.attribute.attributeset.clear": [
        "javax.print.attribute.AttributeSet.clear()"
    ],
    "javax.management.remote.jmxconnector.close": [
        "javax.management.remote.JMXConnector.close()"
    ],
    "javax.swing.text.jtextcomponent.getcaret": [
        "javax.swing.text.JTextComponent.getCaret()"
    ],
    "javax.naming.event.eventdircontext.addnaminglistener": [
        "javax.naming.event.EventDirContext.addNamingListener(javax.naming.Name,java.lang.String,java.lang.Object[],javax.naming.directory.SearchControls,javax.naming.event.NamingListener)",
        "javax.naming.event.EventDirContext.addNamingListener(java.lang.String,java.lang.String,java.lang.Object[],javax.naming.directory.SearchControls,javax.naming.event.NamingListener)",
        "javax.naming.event.EventDirContext.addNamingListener(javax.naming.Name,java.lang.String,javax.naming.directory.SearchControls,javax.naming.event.NamingListener)",
        "javax.naming.event.EventDirContext.addNamingListener(java.lang.String,java.lang.String,javax.naming.directory.SearchControls,javax.naming.event.NamingListener)"
    ],
    "org.omg.portableserver.servant._object_id": [
        "org.omg.PortableServer.Servant._object_id()"
    ],
    "java.util.primitiveiterator.ofint.nextint": [
        "java.util.PrimitiveIterator.OfInt.nextInt()"
    ],
    "javax.swing.jcombobox.getaccessiblecontext": [
        "javax.swing.JComboBox.getAccessibleContext()"
    ],
    "javax.swing.tree.defaultmutabletreenode.getchildbefore": [
        "javax.swing.tree.DefaultMutableTreeNode.getChildBefore(javax.swing.tree.TreeNode)"
    ],
    "java.lang.runtime.runfinalization": [
        "java.lang.Runtime.runFinalization()"
    ],
    "java.sql.resultset.updaterow": [
        "java.sql.ResultSet.updateRow()"
    ],
    "java.util.optional.ofnullable": [
        "java.util.Optional.ofNullable(T)"
    ],
    "java.util.locale.getdefault": [
        "java.util.Locale.getDefault(java.util.Locale.Category)",
        "java.util.Locale.getDefault()"
    ],
    "java.util.concurrent.locks.abstractqueuedsynchronizer.tostring": [
        "java.util.concurrent.locks.AbstractQueuedSynchronizer.toString()"
    ],
    "javax.sound.sampled.mixer.issynchronizationsupported": [
        "javax.sound.sampled.Mixer.isSynchronizationSupported(javax.sound.sampled.Line[],boolean)"
    ],
    "java.util.concurrent.blockingqueue.remove": [
        "java.util.concurrent.BlockingQueue.remove(java.lang.Object)"
    ],
    "org.omg.dynamicany.dynsequenceoperations.set_length": [
        "org.omg.DynamicAny.DynSequenceOperations.set_length(int)"
    ],
    "javax.security.cert.x509certificate.getsigalgparams": [
        "javax.security.cert.X509Certificate.getSigAlgParams()"
    ],
    "java.awt.geom.roundrectangle2d.setframe": [
        "java.awt.geom.RoundRectangle2D.setFrame(double,double,double,double)"
    ],
    "javax.swing.grouplayout.invalidatelayout": [
        "javax.swing.GroupLayout.invalidateLayout(java.awt.Container)"
    ],
    "java.lang.thread.interrupted": [
        "java.lang.Thread.interrupted()"
    ],
    "java.beans.eventsetdescriptor.getremovelistenermethod": [
        "java.beans.EventSetDescriptor.getRemoveListenerMethod()"
    ],
    "java.lang.management.memorypoolmxbean.getusagethreshold": [
        "java.lang.management.MemoryPoolMXBean.getUsageThreshold()"
    ],
    "javax.management.standardmbean.cachembeaninfo": [
        "javax.management.StandardMBean.cacheMBeanInfo(javax.management.MBeanInfo)"
    ],
    "java.util.concurrent.atomic.atomicintegerfieldupdater.getandadd": [
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndAdd(java.util.concurrent.atomic.AtomicIntegerFieldUpdater,int)",
        "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndAdd(T,int)"
    ],
    "java.lang.invoke.methodhandleinfo.getreferencekind": [
        "java.lang.invoke.MethodHandleInfo.getReferenceKind()"
    ],
    "javax.swing.plaf.synth.synthspinnerui.createlayout": [
        "javax.swing.plaf.synth.SynthSpinnerUI.createLayout()"
    ],
    "javax.swing.jscrollbar.setvalueisadjusting": [
        "javax.swing.JScrollBar.setValueIsAdjusting(boolean)"
    ],
    "javax.swing.boxlayout.getlayoutalignmentx": [
        "javax.swing.BoxLayout.getLayoutAlignmentX(java.awt.Container)"
    ],
    "java.time.instant.until": [
        "java.time.Instant.until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)"
    ],
    "javax.management.relation.relationservice.getroles": [
        "javax.management.relation.RelationService.getRoles(java.lang.String,java.lang.String[])"
    ],
    "javax.swing.plaf.multi.multimenubarui.installui": [
        "javax.swing.plaf.multi.MultiMenuBarUI.installUI(javax.swing.JComponent)"
    ],
    "java.security.cert.certpathbuilder.getprovider": [
        "java.security.cert.CertPathBuilder.getProvider()"
    ],
    "javax.swing.spinnermodel.removechangelistener": [
        "javax.swing.SpinnerModel.removeChangeListener(javax.swing.event.ChangeListener)"
    ],
    "javax.xml.bind.datatypeconverter.parseanysimpletype": [
        "javax.xml.bind.DatatypeConverter.parseAnySimpleType(java.lang.String)"
    ],
    "java.util.concurrent.atomic.doubleaccumulator.intvalue": [
        "java.util.concurrent.atomic.DoubleAccumulator.intValue()"
    ],
    "javax.swing.table.jtableheader.setresizingcolumn": [
        "javax.swing.table.JTableHeader.setResizingColumn(javax.swing.table.TableColumn)"
    ],
    "javax.swing.text.stylededitorkit.styledtextaction.getstyleddocument": [
        "javax.swing.text.StyledEditorKit.StyledTextAction.getStyledDocument(javax.swing.JEditorPane)"
    ],
    "java.lang.invoke.methodhandles.identity": [
        "java.lang.invoke.MethodHandles.identity(java.lang.Class<?>)"
    ],
    "java.util.comparator.thencomparingint": [
        "java.util.Comparator.thenComparingInt(java.util.function.ToIntFunction<? super java.util.Comparator>)",
        "java.util.Comparator.thenComparingInt(java.util.function.ToIntFunction<? super T>)"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readint": [
        "javax.sql.rowset.serial.SQLInputImpl.readInt()"
    ],
    "java.sql.resultset.updatetime": [
        "java.sql.ResultSet.updateTime(java.lang.String,java.sql.Time)",
        "java.sql.ResultSet.updateTime(int,java.sql.Time)"
    ],
    "javax.swing.jtable.getcelleditor": [
        "javax.swing.JTable.getCellEditor(int,int)",
        "javax.swing.JTable.getCellEditor()"
    ],
    "javax.swing.tree.treeselectionmodel.removeselectionpaths": [
        "javax.swing.tree.TreeSelectionModel.removeSelectionPaths(javax.swing.tree.TreePath[])"
    ],
    "java.net.datagrampacket.getport": [
        "java.net.DatagramPacket.getPort()"
    ],
    "java.util.function.function.compose": [
        "java.util.function.Function.compose(java.util.function.Function<? super,? extends T>)",
        "java.util.function.Function.compose(java.util.function.Function<? super,? extends java.util.function.Function>)"
    ],
    "javax.swing.text.jtextcomponent.setdocument": [
        "javax.swing.text.JTextComponent.setDocument(javax.swing.text.Document)"
    ],
    "java.math.bigdecimal.intvalue": [
        "java.math.BigDecimal.intValue()"
    ],
    "java.io.pipedoutputstream.flush": [
        "java.io.PipedOutputStream.flush()"
    ],
    "javax.security.auth.subject.doasprivileged": [
        "javax.security.auth.Subject.doAsPrivileged(javax.security.auth.Subject,java.security.PrivilegedAction<T>,java.security.AccessControlContext)",
        "javax.security.auth.Subject.doAsPrivileged(javax.security.auth.Subject,java.security.PrivilegedExceptionAction<T>,java.security.AccessControlContext)"
    ],
    "java.text.spi.numberformatprovider.getpercentinstance": [
        "java.text.spi.NumberFormatProvider.getPercentInstance(java.util.Locale)"
    ],
    "org.omg.dynamicany._dynanystub.get_float": [
        "org.omg.DynamicAny._DynAnyStub.get_float()"
    ],
    "java.time.offsetdatetime.minusseconds": [
        "java.time.OffsetDateTime.minusSeconds(long)"
    ],
    "java.util.concurrent.concurrentlinkedqueue.iterator": [
        "java.util.concurrent.ConcurrentLinkedQueue.iterator()"
    ],
    "javax.swing.text.abstractdocument.getundoableeditlisteners": [
        "javax.swing.text.AbstractDocument.getUndoableEditListeners()"
    ],
    "java.nio.file.securedirectorystream.move": [
        "java.nio.file.SecureDirectoryStream.move(java.nio.file.SecureDirectoryStream,java.nio.file.SecureDirectoryStream<java.nio.file.SecureDirectoryStream>,java.nio.file.SecureDirectoryStream)",
        "java.nio.file.SecureDirectoryStream.move(T,java.nio.file.SecureDirectoryStream<T>,T)"
    ],
    "org.omg.dynamicany._dynsequencestub.get_boolean": [
        "org.omg.DynamicAny._DynSequenceStub.get_boolean()"
    ],
    "java.time.temporal.temporaladjusters.previousorsame": [
        "java.time.temporal.TemporalAdjusters.previousOrSame(java.time.DayOfWeek)"
    ],
    "java.net.socket.getsendbuffersize": [
        "java.net.Socket.getSendBufferSize()"
    ],
    "java.util.comparator.reversed": [
        "java.util.Comparator.reversed()"
    ],
    "javax.swing.jcombobox.insertitemat": [
        "javax.swing.JComboBox.insertItemAt(javax.swing.JComboBox,int)"
    ],
    "java.lang.long.getlong": [
        "java.lang.Long.getLong(java.lang.String)",
        "java.lang.Long.getLong(java.lang.String,java.lang.Long)",
        "java.lang.Long.getLong(java.lang.String,long)"
    ],
    "java.util.concurrent.rejectedexecutionhandler.rejectedexecution": [
        "java.util.concurrent.RejectedExecutionHandler.rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)"
    ],
    "java.util.concurrent.atomic.atomiclongfieldupdater.addandget": [
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.addAndGet(java.util.concurrent.atomic.AtomicLongFieldUpdater,long)",
        "java.util.concurrent.atomic.AtomicLongFieldUpdater.addAndGet(T,long)"
    ],
    "java.util.prefs.preferences.absolutepath": [
        "java.util.prefs.Preferences.absolutePath()"
    ],
    "org.omg.dynamicany._dynenumstub.insert_val": [
        "org.omg.DynamicAny._DynEnumStub.insert_val(java.io.Serializable)"
    ],
    "java.io.randomaccessfile.getchannel": [
        "java.io.RandomAccessFile.getChannel()"
    ],
    "javax.swing.plaf.synth.synthspinnerui.paintborder": [
        "javax.swing.plaf.synth.SynthSpinnerUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.table.defaulttablemodel.addcolumn": [
        "javax.swing.table.DefaultTableModel.addColumn(java.lang.Object,java.lang.Object[])",
        "javax.swing.table.DefaultTableModel.addColumn(java.lang.Object)",
        "javax.swing.table.DefaultTableModel.addColumn(java.lang.Object,java.util.Vector)"
    ],
    "java.net.socketimpl.getfiledescriptor": [
        "java.net.SocketImpl.getFileDescriptor()"
    ],
    "javax.swing.plaf.synth.synthsplitpaneui.installdefaults": [
        "javax.swing.plaf.synth.SynthSplitPaneUI.installDefaults()"
    ],
    "javax.swing.plaf.basic.basictextui.installlisteners": [
        "javax.swing.plaf.basic.BasicTextUI.installListeners()"
    ],
    "org.omg.corba.portable.inputstream.read_char": [
        "org.omg.CORBA.portable.InputStream.read_char()"
    ],
    "java.awt.font.getmissingglyphcode": [
        "java.awt.Font.getMissingGlyphCode()"
    ],
    "java.time.duration.ofhours": [
        "java.time.Duration.ofHours(long)"
    ],
    "org.xml.sax.helpers.xmlreaderadapter.parse": [
        "org.xml.sax.helpers.XMLReaderAdapter.parse(org.xml.sax.InputSource)",
        "org.xml.sax.helpers.XMLReaderAdapter.parse(java.lang.String)"
    ],
    "org.omg.dynamicany._dynstructstub.get_wstring": [
        "org.omg.DynamicAny._DynStructStub.get_wstring()"
    ],
    "org.omg.dynamicany._dynvaluestub.assign": [
        "org.omg.DynamicAny._DynValueStub.assign(org.omg.DynamicAny.DynAny)"
    ],
    "javax.net.ssl.sslcontextspi.enginegetserversocketfactory": [
        "javax.net.ssl.SSLContextSpi.engineGetServerSocketFactory()"
    ],
    "java.net.httpcookie.setcomment": [
        "java.net.HttpCookie.setComment(java.lang.String)"
    ],
    "javax.sound.sampled.clip.setmicrosecondposition": [
        "javax.sound.sampled.Clip.setMicrosecondPosition(long)"
    ],
    "javax.swing.plaf.basic.basictextareaui.getpropertyprefix": [
        "javax.swing.plaf.basic.BasicTextAreaUI.getPropertyPrefix()"
    ],
    "javax.swing.jradiobutton.getaccessiblecontext": [
        "javax.swing.JRadioButton.getAccessibleContext()"
    ],
    "javax.swing.text.plainview.setsize": [
        "javax.swing.text.PlainView.setSize(float,float)"
    ],
    "org.xml.sax.helpers.xmlfilterimpl.startprefixmapping": [
        "org.xml.sax.helpers.XMLFilterImpl.startPrefixMapping(java.lang.String,java.lang.String)"
    ],
    "javax.swing.jtree.getrowcount": [
        "javax.swing.JTree.getRowCount()"
    ],
    "javax.tools.toolprovider.getsystemjavacompiler": [
        "javax.tools.ToolProvider.getSystemJavaCompiler()"
    ],
    "org.w3c.dom.domlocator.getlinenumber": [
        "org.w3c.dom.DOMLocator.getLineNumber()"
    ],
    "org.omg.dynamicany._dynvaluestub.equal": [
        "org.omg.DynamicAny._DynValueStub.equal(org.omg.DynamicAny.DynAny)"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.getsecond": [
        "javax.xml.datatype.XMLGregorianCalendar.getSecond()"
    ],
    "java.nio.channels.filechannel.size": [
        "java.nio.channels.FileChannel.size()"
    ],
    "javax.naming.cannotproceedexception.getaltnamectx": [
        "javax.naming.CannotProceedException.getAltNameCtx()"
    ],
    "java.awt.geom.roundrectangle2d.double.getarcheight": [
        "java.awt.geom.RoundRectangle2D.Double.getArcHeight()"
    ],
    "javax.swing.text.utilities.getwordend": [
        "javax.swing.text.Utilities.getWordEnd(javax.swing.text.JTextComponent,int)"
    ],
    "java.text.messageformat.clone": [
        "java.text.MessageFormat.clone()"
    ],
    "java.sql.databasemetadata.supportssubqueriesincomparisons": [
        "java.sql.DatabaseMetaData.supportsSubqueriesInComparisons()"
    ],
    "java.awt.datatransfer.clipboard.removeflavorlistener": [
        "java.awt.datatransfer.Clipboard.removeFlavorListener(java.awt.datatransfer.FlavorListener)"
    ],
    "java.security.digestinputstream.on": [
        "java.security.DigestInputStream.on(boolean)"
    ],
    "javax.sound.midi.shortmessage.getdata2": [
        "javax.sound.midi.ShortMessage.getData2()"
    ],
    "java.util.optional.tostring": [
        "java.util.Optional.toString()"
    ],
    "javax.imageio.imagereader.getoriginatingprovider": [
        "javax.imageio.ImageReader.getOriginatingProvider()"
    ],
    "javax.swing.text.keymap.getboundkeystrokes": [
        "javax.swing.text.Keymap.getBoundKeyStrokes()"
    ],
    "java.util.concurrent.phaser.onadvance": [
        "java.util.concurrent.Phaser.onAdvance(int,int)"
    ],
    "java.awt.image.renderable.renderableimageop.createdefaultrendering": [
        "java.awt.image.renderable.RenderableImageOp.createDefaultRendering()"
    ],
    "javax.swing.singleselectionmodel.getselectedindex": [
        "javax.swing.SingleSelectionModel.getSelectedIndex()"
    ],
    "java.lang.reflect.field.set": [
        "java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)"
    ],
    "java.nio.file.filevisitoption.valueof": [
        "java.nio.file.FileVisitOption.valueOf(java.lang.String)"
    ],
    "javax.swing.event.rowsorterevent.getpreviousrowcount": [
        "javax.swing.event.RowSorterEvent.getPreviousRowCount()"
    ],
    "javax.xml.crypto.dsig.reference.getdereferenceddata": [
        "javax.xml.crypto.dsig.Reference.getDereferencedData()"
    ],
    "java.nio.buffer.isreadonly": [
        "java.nio.Buffer.isReadOnly()"
    ],
    "javax.imageio.stream.imageoutputstream.writefloat": [
        "javax.imageio.stream.ImageOutputStream.writeFloat(float)"
    ],
    "javax.management.relation.relationservicembean.setroles": [
        "javax.management.relation.RelationServiceMBean.setRoles(java.lang.String,javax.management.relation.RoleList)"
    ],
    "java.util.logging.filehandler.close": [
        "java.util.logging.FileHandler.close()"
    ],
    "javax.management.modelmbean.modelmbeannotificationinfo.clone": [
        "javax.management.modelmbean.ModelMBeanNotificationInfo.clone()"
    ],
    "java.awt.graphics.drawbytes": [
        "java.awt.Graphics.drawBytes(byte[],int,int,int,int)"
    ],
    "javax.swing.jcomponent.contains": [
        "javax.swing.JComponent.contains(int,int)"
    ],
    "java.util.concurrent.locks.reentrantlock.getqueuelength": [
        "java.util.concurrent.locks.ReentrantLock.getQueueLength()"
    ],
    "java.lang.system.getproperty": [
        "java.lang.System.getProperty(java.lang.String,java.lang.String)",
        "java.lang.System.getProperty(java.lang.String)"
    ],
    "java.sql.resultset.getwarnings": [
        "java.sql.ResultSet.getWarnings()"
    ],
    "java.io.filterinputstream.close": [
        "java.io.FilterInputStream.close()"
    ],
    "javax.swing.plaf.basic.basicoptionpaneui.getmessage": [
        "javax.swing.plaf.basic.BasicOptionPaneUI.getMessage()"
    ],
    "javax.management.relation.roleresult.getroles": [
        "javax.management.relation.RoleResult.getRoles()"
    ],
    "java.net.securecacheresponse.getpeerprincipal": [
        "java.net.SecureCacheResponse.getPeerPrincipal()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintcomboboxborder": [
        "javax.swing.plaf.synth.SynthPainter.paintComboBoxBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.swing.jmenuitem.setui": [
        "javax.swing.JMenuItem.setUI(javax.swing.plaf.MenuItemUI)"
    ],
    "java.sql.connection.setschema": [
        "java.sql.Connection.setSchema(java.lang.String)"
    ],
    "java.security.cert.policynode.getexpectedpolicies": [
        "java.security.cert.PolicyNode.getExpectedPolicies()"
    ],
    "javax.swing.table.defaulttablemodel.getrowcount": [
        "javax.swing.table.DefaultTableModel.getRowCount()"
    ],
    "java.beans.expression.setvalue": [
        "java.beans.Expression.setValue(java.lang.Object)"
    ],
    "javax.management.objectname.getcanonicalkeypropertyliststring": [
        "javax.management.ObjectName.getCanonicalKeyPropertyListString()"
    ],
    "java.awt.systemtray.removepropertychangelistener": [
        "java.awt.SystemTray.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"
    ],
    "java.lang.runtime.tracemethodcalls": [
        "java.lang.Runtime.traceMethodCalls(boolean)"
    ],
    "java.lang.instrument.classfiletransformer.transform": [
        "java.lang.instrument.ClassFileTransformer.transform(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>,java.security.ProtectionDomain,byte[])"
    ],
    "java.security.cert.certpathvalidator.getinstance": [
        "java.security.cert.CertPathValidator.getInstance(java.lang.String,java.security.Provider)",
        "java.security.cert.CertPathValidator.getInstance(java.lang.String)",
        "java.security.cert.CertPathValidator.getInstance(java.lang.String,java.lang.String)"
    ],
    "javax.swing.jbutton.isdefaultbutton": [
        "javax.swing.JButton.isDefaultButton()"
    ],
    "java.awt.event.mouseevent.gety": [
        "java.awt.event.MouseEvent.getY()"
    ],
    "javax.crypto.interfaces.dhprivatekey.getx": [
        "javax.crypto.interfaces.DHPrivateKey.getX()"
    ],
    "java.security.keystore.passwordprotection.getpassword": [
        "java.security.KeyStore.PasswordProtection.getPassword()"
    ],
    "java.awt.geom.arc2d.float.getwidth": [
        "java.awt.geom.Arc2D.Float.getWidth()"
    ],
    "javax.swing.abstractlistmodel.fireintervaladded": [
        "javax.swing.AbstractListModel.fireIntervalAdded(java.lang.Object,int,int)"
    ],
    "javax.swing.plaf.metal.metallookandfeel.getusertextfont": [
        "javax.swing.plaf.metal.MetalLookAndFeel.getUserTextFont()"
    ],
    "java.util.set.equals": [
        "java.util.Set.equals(java.lang.Object)"
    ],
    "java.awt.image.directcolormodel.getgreenmask": [
        "java.awt.image.DirectColorModel.getGreenMask()"
    ],
    "javax.swing.text.jtextcomponent.getfocusaccelerator": [
        "javax.swing.text.JTextComponent.getFocusAccelerator()"
    ],
    "java.applet.applet.showstatus": [
        "java.applet.Applet.showStatus(java.lang.String)"
    ],
    "java.util.concurrent.atomic.doubleadder.tostring": [
        "java.util.concurrent.atomic.DoubleAdder.toString()"
    ],
    "java.awt.graphics.fillroundrect": [
        "java.awt.Graphics.fillRoundRect(int,int,int,int,int,int)"
    ],
    "java.net.urlconnection.addrequestproperty": [
        "java.net.URLConnection.addRequestProperty(java.lang.String,java.lang.String)"
    ],
    "javax.management.query.eq": [
        "javax.management.Query.eq(javax.management.ValueExp,javax.management.ValueExp)"
    ],
    "java.awt.scrollpaneadjustable.paramstring": [
        "java.awt.ScrollPaneAdjustable.paramString()"
    ],
    "javax.sql.rowset.joinable.getmatchcolumnindexes": [
        "javax.sql.rowset.Joinable.getMatchColumnIndexes()"
    ],
    "java.awt.itemselectable.getselectedobjects": [
        "java.awt.ItemSelectable.getSelectedObjects()"
    ],
    "javax.management.notificationfiltersupport.disablealltypes": [
        "javax.management.NotificationFilterSupport.disableAllTypes()"
    ],
    "javax.swing.jmenubar.getmenucount": [
        "javax.swing.JMenuBar.getMenuCount()"
    ],
    "java.beans.indexedpropertydescriptor.setindexedwritemethod": [
        "java.beans.IndexedPropertyDescriptor.setIndexedWriteMethod(java.lang.reflect.Method)"
    ],
    "javax.swing.text.view.updatelayout": [
        "javax.swing.text.View.updateLayout(javax.swing.event.DocumentEvent.ElementChange,javax.swing.event.DocumentEvent,java.awt.Shape)"
    ],
    "java.awt.image.multipixelpackedsamplemodel.createdatabuffer": [
        "java.awt.image.MultiPixelPackedSampleModel.createDataBuffer()"
    ],
    "javax.swing.jprogressbar.updateui": [
        "javax.swing.JProgressBar.updateUI()"
    ],
    "java.awt.geom.cubiccurve2d.float.getctrlx1": [
        "java.awt.geom.CubicCurve2D.Float.getCtrlX1()"
    ],
    "java.lang.enumconstantnotpresentexception.enumtype": [
        "java.lang.EnumConstantNotPresentException.enumType()"
    ],
    "javax.print.attribute.standard.mediaprintablearea.getcategory": [
        "javax.print.attribute.standard.MediaPrintableArea.getCategory()"
    ],
    "java.net.serversocket.implaccept": [
        "java.net.ServerSocket.implAccept(java.net.Socket)"
    ],
    "java.beans.propertyeditorsupport.setsource": [
        "java.beans.PropertyEditorSupport.setSource(java.lang.Object)"
    ],
    "javax.naming.nameparser.parse": [
        "javax.naming.NameParser.parse(java.lang.String)"
    ],
    "java.awt.dnd.droptargetdropevent.getlocation": [
        "java.awt.dnd.DropTargetDropEvent.getLocation()"
    ],
    "javax.swing.jtable.printmode.valueof": [
        "javax.swing.JTable.PrintMode.valueOf(java.lang.String)"
    ],
    "javax.xml.stream.util.xmleventallocator.newinstance": [
        "javax.xml.stream.util.XMLEventAllocator.newInstance()"
    ],
    "java.beans.beancontext.beancontextchildsupport.addvetoablechangelistener": [
        "java.beans.beancontext.BeanContextChildSupport.addVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)"
    ],
    "java.lang.management.classloadingmxbean.getloadedclasscount": [
        "java.lang.management.ClassLoadingMXBean.getLoadedClassCount()"
    ],
    "javax.swing.text.maskformatter.setmask": [
        "javax.swing.text.MaskFormatter.setMask(java.lang.String)"
    ],
    "java.rmi.activation.activationgroupdesc.commandenvironment.getcommandoptions": [
        "java.rmi.activation.ActivationGroupDesc.CommandEnvironment.getCommandOptions()"
    ],
    "javax.swing.text.highlighter.gethighlights": [
        "javax.swing.text.Highlighter.getHighlights()"
    ],
    "javax.swing.text.jtextcomponent.droplocation.tostring": [
        "javax.swing.text.JTextComponent.DropLocation.toString()"
    ],
    "java.awt.checkboxmenuitem.getitemlisteners": [
        "java.awt.CheckboxMenuItem.getItemListeners()"
    ],
    "java.awt.image.singlepixelpackedsamplemodel.getpixels": [
        "java.awt.image.SinglePixelPackedSampleModel.getPixels(int,int,int,int,int[],java.awt.image.DataBuffer)"
    ],
    "java.security.pkcs12attribute.equals": [
        "java.security.PKCS12Attribute.equals(java.lang.Object)"
    ],
    "javax.imageio.metadata.iiometadataformat.getobjectenumerations": [
        "javax.imageio.metadata.IIOMetadataFormat.getObjectEnumerations(java.lang.String)"
    ],
    "javax.swing.actionmap.clear": [
        "javax.swing.ActionMap.clear()"
    ],
    "java.awt.geom.area.getbounds2d": [
        "java.awt.geom.Area.getBounds2D()"
    ],
    "javax.swing.plaf.multi.multicolorchooserui.createui": [
        "javax.swing.plaf.multi.MultiColorChooserUI.createUI(javax.swing.JComponent)"
    ],
    "java.awt.geom.arc2d.getendpoint": [
        "java.awt.geom.Arc2D.getEndPoint()"
    ],
    "java.awt.geom.line2d.ptsegdist": [
        "java.awt.geom.Line2D.ptSegDist(double,double)",
        "java.awt.geom.Line2D.ptSegDist(java.awt.geom.Point2D)",
        "java.awt.geom.Line2D.ptSegDist(double,double,double,double,double,double)"
    ],
    "javax.swing.plaf.multi.multilistui.paint": [
        "javax.swing.plaf.multi.MultiListUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.util.concurrent.locks.condition.awaituninterruptibly": [
        "java.util.concurrent.locks.Condition.awaitUninterruptibly()"
    ],
    "java.beans.beancontext.beancontextchild.setbeancontext": [
        "java.beans.beancontext.BeanContextChild.setBeanContext(java.beans.beancontext.BeanContext)"
    ],
    "java.util.uuid.getmostsignificantbits": [
        "java.util.UUID.getMostSignificantBits()"
    ],
    "java.security.messagedigest.getdigestlength": [
        "java.security.MessageDigest.getDigestLength()"
    ],
    "javax.swing.abstractbutton.actionpropertychanged": [
        "javax.swing.AbstractButton.actionPropertyChanged(javax.swing.Action,java.lang.String)"
    ],
    "java.awt.image.indexcolormodel.getdataelements": [
        "java.awt.image.IndexColorModel.getDataElements(int,java.lang.Object)",
        "java.awt.image.IndexColorModel.getDataElements(int[],int,java.lang.Object)"
    ],
    "org.omg.corba.portable.objectimpl._servant_postinvoke": [
        "org.omg.CORBA.portable.ObjectImpl._servant_postinvoke(org.omg.CORBA.portable.ServantObject)"
    ],
    "javax.swing.plaf.synth.synthtableui.update": [
        "javax.swing.plaf.synth.SynthTableUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "java.awt.geom.cubiccurve2d.float.getx1": [
        "java.awt.geom.CubicCurve2D.Float.getX1()"
    ],
    "java.util.zip.deflateroutputstream.flush": [
        "java.util.zip.DeflaterOutputStream.flush()"
    ],
    "javax.xml.soap.soappart.setcontentid": [
        "javax.xml.soap.SOAPPart.setContentId(java.lang.String)"
    ],
    "java.awt.color.icc_colorspace.tociexyz": [
        "java.awt.color.ICC_ColorSpace.toCIEXYZ(float[])"
    ],
    "javax.swing.jtree.stopediting": [
        "javax.swing.JTree.stopEditing()"
    ],
    "javax.net.ssl.sslsession.getlastaccessedtime": [
        "javax.net.ssl.SSLSession.getLastAccessedTime()"
    ],
    "java.security.cert.x509extension.getcriticalextensionoids": [
        "java.security.cert.X509Extension.getCriticalExtensionOIDs()"
    ],
    "org.omg.corba.orb.run": [
        "org.omg.CORBA.ORB.run()"
    ],
    "javax.sound.sampled.spi.formatconversionprovider.gettargetencodings": [
        "javax.sound.sampled.spi.FormatConversionProvider.getTargetEncodings()",
        "javax.sound.sampled.spi.FormatConversionProvider.getTargetEncodings(javax.sound.sampled.AudioFormat)"
    ],
    "java.util.concurrent.locks.abstractqueuedlongsynchronizer.conditionobject.signal": [
        "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.signal()"
    ],
    "java.sql.sqlinput.readstring": [
        "java.sql.SQLInput.readString()"
    ],
    "java.lang.integer.bytevalue": [
        "java.lang.Integer.byteValue()"
    ],
    "javax.print.attribute.datetimesyntax.tostring": [
        "javax.print.attribute.DateTimeSyntax.toString()"
    ],
    "java.time.clock.tickseconds": [
        "java.time.Clock.tickSeconds(java.time.ZoneId)"
    ],
    "javax.swing.table.defaulttablecellrenderer.isopaque": [
        "javax.swing.table.DefaultTableCellRenderer.isOpaque()"
    ],
    "javax.sql.rowset.webrowset.readxml": [
        "javax.sql.rowset.WebRowSet.readXml(java.io.InputStream)",
        "javax.sql.rowset.WebRowSet.readXml(java.io.Reader)"
    ],
    "org.xml.sax.ext.attributes2impl.isdeclared": [
        "org.xml.sax.ext.Attributes2Impl.isDeclared(java.lang.String,java.lang.String)",
        "org.xml.sax.ext.Attributes2Impl.isDeclared(java.lang.String)",
        "org.xml.sax.ext.Attributes2Impl.isDeclared(int)"
    ],
    "java.time.zoneoffset.from": [
        "java.time.ZoneOffset.from(java.time.temporal.TemporalAccessor)"
    ],
    "java.util.zip.zipentry.getlastaccesstime": [
        "java.util.zip.ZipEntry.getLastAccessTime()"
    ],
    "java.util.function.tointbifunction.applyasint": [
        "java.util.function.ToIntBiFunction.applyAsInt(java.util.function.ToIntBiFunction,java.util.function.ToIntBiFunction)",
        "java.util.function.ToIntBiFunction.applyAsInt(T,U)"
    ],
    "javax.xml.crypto.octetstreamdata.geturi": [
        "javax.xml.crypto.OctetStreamData.getURI()"
    ],
    "java.awt.font.derivefont": [
        "java.awt.Font.deriveFont(int,java.awt.geom.AffineTransform)",
        "java.awt.Font.deriveFont(java.awt.geom.AffineTransform)",
        "java.awt.Font.deriveFont(int)",
        "java.awt.Font.deriveFont(float)",
        "java.awt.Font.deriveFont(java.util.Map<? extends,?>)",
        "java.awt.Font.deriveFont(int,float)"
    ],
    "java.util.jar.pack200.unpacker.unpack": [
        "java.util.jar.Pack200.Unpacker.unpack(java.io.File,java.util.jar.JarOutputStream)",
        "java.util.jar.Pack200.Unpacker.unpack(java.io.InputStream,java.util.jar.JarOutputStream)"
    ],
    "javax.lang.model.util.abstractelementvisitor6.visitunknown": [
        "javax.lang.model.util.AbstractElementVisitor6.visitUnknown(javax.lang.model.element.Element,javax.lang.model.util.AbstractElementVisitor6)"
    ],
    "javax.swing.jtextpane.seteditorkit": [
        "javax.swing.JTextPane.setEditorKit(javax.swing.text.EditorKit)"
    ],
    "org.omg.portableserver.portable.delegate.get_interface_def": [
        "org.omg.PortableServer.portable.Delegate.get_interface_def(org.omg.PortableServer.Servant)"
    ],
    "javax.swing.jframe.addimpl": [
        "javax.swing.JFrame.addImpl(java.awt.Component,java.lang.Object,int)"
    ],
    "java.util.concurrent.locks.abstractownablesynchronizer.setexclusiveownerthread": [
        "java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(java.lang.Thread)"
    ],
    "javax.swing.jinternalframe.getglasspane": [
        "javax.swing.JInternalFrame.getGlassPane()"
    ],
    "org.omg.dynamicany.dynanyoperations.get_val": [
        "org.omg.DynamicAny.DynAnyOperations.get_val()"
    ],
    "java.awt.graphicsdevice.setdisplaymode": [
        "java.awt.GraphicsDevice.setDisplayMode(java.awt.DisplayMode)"
    ],
    "java.awt.containerorderfocustraversalpolicy.getcomponentafter": [
        "java.awt.ContainerOrderFocusTraversalPolicy.getComponentAfter(java.awt.Container,java.awt.Component)"
    ],
    "javax.swing.plaf.multi.multibuttonui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiButtonUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "java.security.keystore.passwordprotection.getprotectionparameters": [
        "java.security.KeyStore.PasswordProtection.getProtectionParameters()"
    ],
    "java.util.concurrent.locks.stampedlock.writelock": [
        "java.util.concurrent.locks.StampedLock.writeLock()"
    ],
    "java.awt.eventqueue.getnextevent": [
        "java.awt.EventQueue.getNextEvent()"
    ],
    "org.omg.dynamicany._dynsequencestub.insert_ulong": [
        "org.omg.DynamicAny._DynSequenceStub.insert_ulong(int)"
    ],
    "java.security.cert.x509certselector.getpolicy": [
        "java.security.cert.X509CertSelector.getPolicy()"
    ],
    "javax.lang.model.util.elementkindvisitor6.visittypeasannotationtype": [
        "javax.lang.model.util.ElementKindVisitor6.visitTypeAsAnnotationType(javax.lang.model.element.TypeElement,javax.lang.model.util.ElementKindVisitor6)"
    ],
    "javax.swing.jtoolbar.setorientation": [
        "javax.swing.JToolBar.setOrientation(int)"
    ],
    "java.beans.encoder.getpersistencedelegate": [
        "java.beans.Encoder.getPersistenceDelegate(java.lang.Class<?>)"
    ],
    "org.omg.corba.datainputstream.read_object": [
        "org.omg.CORBA.DataInputStream.read_Object()"
    ],
    "javax.swing.plaf.multi.multitableheaderui.getaccessiblechildrencount": [
        "javax.swing.plaf.multi.MultiTableHeaderUI.getAccessibleChildrenCount(javax.swing.JComponent)"
    ],
    "java.time.chrono.minguodate.plus": [
        "java.time.chrono.MinguoDate.plus(java.time.temporal.TemporalAmount)"
    ],
    "java.security.provider.values": [
        "java.security.Provider.values()"
    ],
    "java.lang.annotation.elementtype.valueof": [
        "java.lang.annotation.ElementType.valueOf(java.lang.String)"
    ],
    "javax.swing.listselectionmodel.getmaxselectionindex": [
        "javax.swing.ListSelectionModel.getMaxSelectionIndex()"
    ],
    "java.time.chrono.minguochronology.getcalendartype": [
        "java.time.chrono.MinguoChronology.getCalendarType()"
    ],
    "java.lang.processbuilder.redirect.from": [
        "java.lang.ProcessBuilder.Redirect.from(java.io.File)"
    ],
    "java.security.cert.certpathbuilder.getalgorithm": [
        "java.security.cert.CertPathBuilder.getAlgorithm()"
    ],
    "java.awt.desktop.mail": [
        "java.awt.Desktop.mail(java.net.URI)",
        "java.awt.Desktop.mail()"
    ],
    "javax.swing.text.element.getendoffset": [
        "javax.swing.text.Element.getEndOffset()"
    ],
    "java.awt.window.getwindows": [
        "java.awt.Window.getWindows()"
    ],
    "java.time.localdatetime.ofinstant": [
        "java.time.LocalDateTime.ofInstant(java.time.Instant,java.time.ZoneId)"
    ],
    "java.lang.integer.compareunsigned": [
        "java.lang.Integer.compareUnsigned(int,int)"
    ],
    "org.ietf.jgss.gsscontext.getsequencedetstate": [
        "org.ietf.jgss.GSSContext.getSequenceDetState()"
    ],
    "javax.swing.jprogressbar.createchangelistener": [
        "javax.swing.JProgressBar.createChangeListener()"
    ],
    "java.time.chrono.chronozoneddatetime.plus": [
        "java.time.chrono.ChronoZonedDateTime.plus(long,java.time.temporal.TemporalUnit)",
        "java.time.chrono.ChronoZonedDateTime.plus(java.time.temporal.TemporalAmount)"
    ],
    "javax.swing.text.html.parser.dtd.tostring": [
        "javax.swing.text.html.parser.DTD.toString()"
    ],
    "java.security.algorithmparametersspi.engineinit": [
        "java.security.AlgorithmParametersSpi.engineInit(byte[],java.lang.String)",
        "java.security.AlgorithmParametersSpi.engineInit(byte[])",
        "java.security.AlgorithmParametersSpi.engineInit(java.security.spec.AlgorithmParameterSpec)"
    ],
    "java.lang.reflect.constructor.togenericstring": [
        "java.lang.reflect.Constructor.toGenericString()"
    ],
    "javax.swing.text.keymap.islocallydefined": [
        "javax.swing.text.Keymap.isLocallyDefined(javax.swing.KeyStroke)"
    ],
    "java.io.console.printf": [
        "java.io.Console.printf(java.lang.String,java.lang.Object...)",
        "java.io.Console.printf(java.lang.String,java.lang.Object)"
    ],
    "java.lang.class.getprotectiondomain": [
        "java.lang.Class.getProtectionDomain()"
    ],
    "java.lang.process.getinputstream": [
        "java.lang.Process.getInputStream()"
    ],
    "javax.xml.bind.datatypeconverter.parsedecimal": [
        "javax.xml.bind.DatatypeConverter.parseDecimal(java.lang.String)"
    ],
    "java.nio.bytebuffer.tostring": [
        "java.nio.ByteBuffer.toString()"
    ],
    "org.omg.dynamicany._dynfixedstub.set_value": [
        "org.omg.DynamicAny._DynFixedStub.set_value(java.lang.String)"
    ],
    "java.beans.featuredescriptor.getname": [
        "java.beans.FeatureDescriptor.getName()"
    ],
    "javax.net.ssl.extendedsslsession.getpeersupportedsignaturealgorithms": [
        "javax.net.ssl.ExtendedSSLSession.getPeerSupportedSignatureAlgorithms()"
    ],
    "javax.swing.jtable.gettableheader": [
        "javax.swing.JTable.getTableHeader()"
    ],
    "javax.naming.ldap.ldapname.getsuffix": [
        "javax.naming.ldap.LdapName.getSuffix(int)"
    ],
    "javax.print.attribute.standard.presentationdirection.getstringtable": [
        "javax.print.attribute.standard.PresentationDirection.getStringTable()"
    ],
    "java.util.concurrent.phaser.arriveandawaitadvance": [
        "java.util.concurrent.Phaser.arriveAndAwaitAdvance()"
    ],
    "org.omg.portableserver.poaoperations.the_name": [
        "org.omg.PortableServer.POAOperations.the_name()"
    ],
    "java.awt.font.texthitinfo.getotherhit": [
        "java.awt.font.TextHitInfo.getOtherHit()"
    ],
    "java.awt.color.icc_profilergb.gettrc": [
        "java.awt.color.ICC_ProfileRGB.getTRC(int)"
    ],
    "java.nio.charset.charset.encode": [
        "java.nio.charset.Charset.encode(java.lang.String)"
    ],
    "java.util.prefs.preferencechangeevent.getnewvalue": [
        "java.util.prefs.PreferenceChangeEvent.getNewValue()"
    ],
    "javax.swing.repaintmanager.tostring": [
        "javax.swing.RepaintManager.toString()"
    ],
    "java.security.algorithmparametersspi.enginetostring": [
        "java.security.AlgorithmParametersSpi.engineToString()"
    ],
    "java.util.treemap.lowerkey": [
        "java.util.TreeMap.lowerKey(K)"
    ],
    "java.io.chararraywriter.flush": [
        "java.io.CharArrayWriter.flush()"
    ],
    "java.security.cert.certificate.getencoded": [
        "java.security.cert.Certificate.getEncoded()"
    ],
    "java.lang.class.isinterface": [
        "java.lang.Class.isInterface()"
    ],
    "org.omg.portableinterceptor.serverrequestinterceptoroperations.send_exception": [
        "org.omg.PortableInterceptor.ServerRequestInterceptorOperations.send_exception(org.omg.PortableInterceptor.ServerRequestInfo)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintsliderborder": [
        "javax.swing.plaf.synth.SynthPainter.paintSliderBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",
        "javax.swing.plaf.synth.SynthPainter.paintSliderBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "java.net.urlconnection.setusecaches": [
        "java.net.URLConnection.setUseCaches(boolean)"
    ],
    "org.omg.corba.anyholder._write": [
        "org.omg.CORBA.AnyHolder._write(org.omg.CORBA.portable.OutputStream)"
    ],
    "java.util.collections.checkedcollection": [
        "java.util.Collections.checkedCollection(java.util.Collection<E>,java.lang.Class<E>)"
    ],
    "javax.swing.jtree.droplocation.getpath": [
        "javax.swing.JTree.DropLocation.getPath()"
    ],
    "java.security.spec.rsaprivatecrtkeyspec.getprimeexponentq": [
        "java.security.spec.RSAPrivateCrtKeySpec.getPrimeExponentQ()"
    ],
    "javax.script.scriptenginefactory.getmimetypes": [
        "javax.script.ScriptEngineFactory.getMimeTypes()"
    ],
    "javax.swing.table.tablecolumnmodel.getselectedcolumncount": [
        "javax.swing.table.TableColumnModel.getSelectedColumnCount()"
    ],
    "javax.swing.text.defaultcaret.setdot": [
        "javax.swing.text.DefaultCaret.setDot(int)",
        "javax.swing.text.DefaultCaret.setDot(int,javax.swing.text.Position.Bias)"
    ],
    "javax.swing.jcomponent.removeancestorlistener": [
        "javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintrootpaneborder": [
        "javax.swing.plaf.synth.SynthPainter.paintRootPaneBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "org.omg.corba.dataoutputstream.write_float_array": [
        "org.omg.CORBA.DataOutputStream.write_float_array(float[],int,int)"
    ],
    "java.awt.color.icc_profile.finalize": [
        "java.awt.color.ICC_Profile.finalize()"
    ],
    "java.text.choiceformat.parse": [
        "java.text.ChoiceFormat.parse(java.lang.String,java.text.ParsePosition)"
    ],
    "java.util.concurrent.atomic.atomicinteger.doublevalue": [
        "java.util.concurrent.atomic.AtomicInteger.doubleValue()"
    ],
    "java.util.concurrent.atomic.atomicreference.tostring": [
        "java.util.concurrent.atomic.AtomicReference.toString()"
    ],
    "java.lang.reflect.parameter.getname": [
        "java.lang.reflect.Parameter.getName()"
    ],
    "javax.sql.rowset.serial.sqloutputimpl.writeclob": [
        "javax.sql.rowset.serial.SQLOutputImpl.writeClob(java.sql.Clob)"
    ],
    "java.awt.geom.affinetransform.scale": [
        "java.awt.geom.AffineTransform.scale(double,double)"
    ],
    "java.util.random.nextboolean": [
        "java.util.Random.nextBoolean()"
    ],
    "javax.xml.stream.xmlstreamreader.gettextcharacters": [
        "javax.xml.stream.XMLStreamReader.getTextCharacters(int,char[],int,int)",
        "javax.xml.stream.XMLStreamReader.getTextCharacters()"
    ],
    "javax.sql.rowset.setbinarystream": [
        "javax.sql.RowSet.setBinaryStream(int,java.io.InputStream,int)",
        "javax.sql.RowSet.setBinaryStream(java.lang.String,java.io.InputStream)",
        "javax.sql.RowSet.setBinaryStream(java.lang.String,java.io.InputStream,int)",
        "javax.sql.RowSet.setBinaryStream(int,java.io.InputStream)"
    ],
    "javax.jws.webparam.mode.valueof": [
        "javax.jws.WebParam.Mode.valueOf(java.lang.String)"
    ],
    "javax.swing.text.boxview.childallocation": [
        "javax.swing.text.BoxView.childAllocation(int,java.awt.Rectangle)"
    ],
    "javax.swing.jtextfield.gethorizontalalignment": [
        "javax.swing.JTextField.getHorizontalAlignment()"
    ],
    "java.net.urlstreamhandler.gethostaddress": [
        "java.net.URLStreamHandler.getHostAddress(java.net.URL)"
    ],
    "java.awt.image.filteredimagesource.startproduction": [
        "java.awt.image.FilteredImageSource.startProduction(java.awt.image.ImageConsumer)"
    ],
    "javax.swing.text.paragraphview.setfirstlineindent": [
        "javax.swing.text.ParagraphView.setFirstLineIndent(float)"
    ],
    "java.lang.classloader.setclassassertionstatus": [
        "java.lang.ClassLoader.setClassAssertionStatus(java.lang.String,boolean)"
    ],
    "org.omg.corba.request.contexts": [
        "org.omg.CORBA.Request.contexts()"
    ],
    "javax.print.attribute.standard.printermoreinfo.equals": [
        "javax.print.attribute.standard.PrinterMoreInfo.equals(java.lang.Object)"
    ],
    "java.time.temporal.temporal.plus": [
        "java.time.temporal.Temporal.plus(java.time.temporal.TemporalAmount)",
        "java.time.temporal.Temporal.plus(long,java.time.temporal.TemporalUnit)"
    ],
    "java.util.spliterators.spliteratorunknownsize": [
        "java.util.Spliterators.spliteratorUnknownSize(java.util.PrimitiveIterator.OfLong,int)",
        "java.util.Spliterators.spliteratorUnknownSize(java.util.PrimitiveIterator.OfDouble,int)",
        "java.util.Spliterators.spliteratorUnknownSize(java.util.Iterator<? extends T>,int)",
        "java.util.Spliterators.spliteratorUnknownSize(java.util.PrimitiveIterator.OfInt,int)"
    ],
    "java.awt.cardlayout.setvgap": [
        "java.awt.CardLayout.setVgap(int)"
    ],
    "java.util.treemap.remove": [
        "java.util.TreeMap.remove(java.lang.Object)"
    ],
    "javax.swing.plaf.multi.multiseparatorui.contains": [
        "javax.swing.plaf.multi.MultiSeparatorUI.contains(javax.swing.JComponent,int,int)"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.setnoncontinuouslayoutdivider": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.setNonContinuousLayoutDivider(java.awt.Component)",
        "javax.swing.plaf.basic.BasicSplitPaneUI.setNonContinuousLayoutDivider(java.awt.Component,boolean)"
    ],
    "java.beans.propertyeditorsupport.firepropertychange": [
        "java.beans.PropertyEditorSupport.firePropertyChange()"
    ],
    "java.beans.beans.setdesigntime": [
        "java.beans.Beans.setDesignTime(boolean)"
    ],
    "javax.swing.jscrollbar.setvalue": [
        "javax.swing.JScrollBar.setValue(int)"
    ],
    "javax.imageio.metadata.iiometadatanode.replacechild": [
        "javax.imageio.metadata.IIOMetadataNode.replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)"
    ],
    "javax.swing.event.undoableeditlistener.undoableedithappened": [
        "javax.swing.event.UndoableEditListener.undoableEditHappened(javax.swing.event.UndoableEditEvent)"
    ],
    "javax.management.monitor.gaugemonitor.getderivedgauge": [
        "javax.management.monitor.GaugeMonitor.getDerivedGauge(javax.management.ObjectName)"
    ],
    "java.util.stream.intstream.count": [
        "java.util.stream.IntStream.count()"
    ],
    "java.util.stream.collector.supplier": [
        "java.util.stream.Collector.supplier()"
    ],
    "javax.swing.plaf.metal.metaltogglebuttonui.update": [
        "javax.swing.plaf.metal.MetalToggleButtonUI.update(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.sql.rowset.joinrowset.supportscrossjoin": [
        "javax.sql.rowset.JoinRowSet.supportsCrossJoin()"
    ],
    "java.util.concurrent.concurrenthashmap.foreachvalue": [
        "java.util.concurrent.ConcurrentHashMap.forEachValue(long,java.util.function.Function<? super,? extends U>,java.util.function.Consumer<? super U>)",
        "java.util.concurrent.ConcurrentHashMap.forEachValue(long,java.util.function.Consumer<? super java.util.concurrent.ConcurrentHashMap>)",
        "java.util.concurrent.ConcurrentHashMap.forEachValue(long,java.util.function.Consumer<? super V>)"
    ],
    "javax.swing.jtree.gettreeselectionlisteners": [
        "javax.swing.JTree.getTreeSelectionListeners()"
    ],
    "javax.swing.text.defaultcaret.setmagiccaretposition": [
        "javax.swing.text.DefaultCaret.setMagicCaretPosition(java.awt.Point)"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.getcatalogname": [
        "javax.sql.rowset.RowSetMetaDataImpl.getCatalogName(int)"
    ],
    "java.security.cert.certpath.tostring": [
        "java.security.cert.CertPath.toString()"
    ],
    "java.util.resourcebundle.getkeys": [
        "java.util.ResourceBundle.getKeys()"
    ],
    "javax.swing.plaf.basic.basicsplitpaneui.getdividerlocation": [
        "javax.swing.plaf.basic.BasicSplitPaneUI.getDividerLocation(javax.swing.JSplitPane)"
    ],
    "org.omg.portableserver.servantactivatoroperations.etherealize": [
        "org.omg.PortableServer.ServantActivatorOperations.etherealize(byte[],org.omg.PortableServer.POA,org.omg.PortableServer.Servant,boolean,boolean)"
    ],
    "java.util.zip.checkedinputstream.getchecksum": [
        "java.util.zip.CheckedInputStream.getChecksum()"
    ],
    "javax.net.ssl.httpsurlconnection.getlocalcertificates": [
        "javax.net.ssl.HttpsURLConnection.getLocalCertificates()"
    ],
    "java.security.permissioncollection.elements": [
        "java.security.PermissionCollection.elements()"
    ],
    "javax.print.attribute.standard.mediasize.getcategory": [
        "javax.print.attribute.standard.MediaSize.getCategory()"
    ],
    "javax.swing.jlabel.paramstring": [
        "javax.swing.JLabel.paramString()"
    ],
    "javax.swing.timer.getdelay": [
        "javax.swing.Timer.getDelay()"
    ],
    "java.net.networkinterface.ispointtopoint": [
        "java.net.NetworkInterface.isPointToPoint()"
    ],
    "javax.swing.plaf.basic.basiccomboboxui.getinsets": [
        "javax.swing.plaf.basic.BasicComboBoxUI.getInsets()"
    ],
    "javax.swing.jsplitpane.addimpl": [
        "javax.swing.JSplitPane.addImpl(java.awt.Component,java.lang.Object,int)"
    ],
    "javax.print.attribute.standard.jobimpressionscompleted.equals": [
        "javax.print.attribute.standard.JobImpressionsCompleted.equals(java.lang.Object)"
    ],
    "javax.swing.plaf.metal.defaultmetaltheme.getusertextfont": [
        "javax.swing.plaf.metal.DefaultMetalTheme.getUserTextFont()"
    ],
    "javax.xml.stream.xmlstreamwriter.writeprocessinginstruction": [
        "javax.xml.stream.XMLStreamWriter.writeProcessingInstruction(java.lang.String,java.lang.String)",
        "javax.xml.stream.XMLStreamWriter.writeProcessingInstruction(java.lang.String)"
    ],
    "org.xml.sax.helpers.attributesimpl.setattributes": [
        "org.xml.sax.helpers.AttributesImpl.setAttributes(org.xml.sax.Attributes)"
    ],
    "javax.xml.transform.transformer.setparameter": [
        "javax.xml.transform.Transformer.setParameter(java.lang.String,java.lang.Object)"
    ],
    "java.security.keystore.callbackhandlerprotection.getcallbackhandler": [
        "java.security.KeyStore.CallbackHandlerProtection.getCallbackHandler()"
    ],
    "javax.crypto.spec.dhpublickeyspec.getp": [
        "javax.crypto.spec.DHPublicKeySpec.getP()"
    ],
    "javax.sound.midi.mididevice.getreceiver": [
        "javax.sound.midi.MidiDevice.getReceiver()"
    ],
    "javax.swing.joptionpane.createdialog": [
        "javax.swing.JOptionPane.createDialog(java.lang.String)",
        "javax.swing.JOptionPane.createDialog(java.awt.Component,java.lang.String)"
    ],
    "javax.swing.plaf.multi.multisplitpaneui.getmaximumdividerlocation": [
        "javax.swing.plaf.multi.MultiSplitPaneUI.getMaximumDividerLocation(javax.swing.JSplitPane)"
    ],
    "java.util.longsummarystatistics.combine": [
        "java.util.LongSummaryStatistics.combine(java.util.LongSummaryStatistics)"
    ],
    "javax.swing.text.document.getproperty": [
        "javax.swing.text.Document.getProperty(java.lang.Object)"
    ],
    "java.sql.sqlinput.readbyte": [
        "java.sql.SQLInput.readByte()"
    ],
    "java.lang.long.tobinarystring": [
        "java.lang.Long.toBinaryString(long)"
    ],
    "java.time.localdatetime.ofepochsecond": [
        "java.time.LocalDateTime.ofEpochSecond(long,int,java.time.ZoneOffset)"
    ],
    "javax.lang.model.util.elementfilter.methodsin": [
        "javax.lang.model.util.ElementFilter.methodsIn(java.lang.Iterable<? extends javax.lang.model.element.Element>)",
        "javax.lang.model.util.ElementFilter.methodsIn(java.util.Set<? extends javax.lang.model.element.Element>)"
    ],
    "java.time.dayofweek.getdisplayname": [
        "java.time.DayOfWeek.getDisplayName(java.time.format.TextStyle,java.util.Locale)"
    ],
    "javax.swing.abstractbutton.doclick": [
        "javax.swing.AbstractButton.doClick()",
        "javax.swing.AbstractButton.doClick(int)"
    ],
    "javax.swing.defaultdesktopmanager.dragframe": [
        "javax.swing.DefaultDesktopManager.dragFrame(javax.swing.JComponent,int,int)"
    ],
    "java.security.cert.collectioncertstoreparameters.clone": [
        "java.security.cert.CollectionCertStoreParameters.clone()"
    ],
    "javax.xml.stream.xmlstreamwriter.getproperty": [
        "javax.xml.stream.XMLStreamWriter.getProperty(java.lang.String)"
    ],
    "java.sql.statement.getresultsetconcurrency": [
        "java.sql.Statement.getResultSetConcurrency()"
    ],
    "javax.swing.tree.defaulttreecelleditor.getcelleditorvalue": [
        "javax.swing.tree.DefaultTreeCellEditor.getCellEditorValue()"
    ],
    "java.awt.image.shortlookuptable.gettable": [
        "java.awt.image.ShortLookupTable.getTable()"
    ],
    "java.awt.geom.arc2d.setarcbytangent": [
        "java.awt.geom.Arc2D.setArcByTangent(java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D,double)"
    ],
    "javax.lang.model.util.abstractelementvisitor6.visit": [
        "javax.lang.model.util.AbstractElementVisitor6.visit(javax.lang.model.element.Element,javax.lang.model.util.AbstractElementVisitor6)",
        "javax.lang.model.util.AbstractElementVisitor6.visit(javax.lang.model.element.Element)"
    ],
    "java.nio.shortbuffer.compareto": [
        "java.nio.ShortBuffer.compareTo(java.nio.ShortBuffer)"
    ],
    "java.util.weakhashmap.replaceall": [
        "java.util.WeakHashMap.replaceAll(java.util.function.BiFunction<? super,? super,? extends V>)"
    ],
    "javax.print.attribute.standard.dialogtypeselection.getcategory": [
        "javax.print.attribute.standard.DialogTypeSelection.getCategory()"
    ],
    "javax.swing.text.plainview.getlinebuffer": [
        "javax.swing.text.PlainView.getLineBuffer()"
    ],
    "java.awt.compositecontext.dispose": [
        "java.awt.CompositeContext.dispose()"
    ],
    "java.io.objectstreamfield.gettype": [
        "java.io.ObjectStreamField.getType()"
    ],
    "javax.swing.tree.treemodel.getchildcount": [
        "javax.swing.tree.TreeModel.getChildCount(java.lang.Object)"
    ],
    "javax.swing.plaf.basic.basicprogressbarui.getbaseline": [
        "javax.swing.plaf.basic.BasicProgressBarUI.getBaseline(javax.swing.JComponent,int,int)"
    ],
    "java.time.zoneddatetime.parse": [
        "java.time.ZonedDateTime.parse(java.lang.CharSequence)",
        "java.time.ZonedDateTime.parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)"
    ],
    "java.awt.flowlayout.removelayoutcomponent": [
        "java.awt.FlowLayout.removeLayoutComponent(java.awt.Component)"
    ],
    "javax.swing.plaf.basic.basictableui.paint": [
        "javax.swing.plaf.basic.BasicTableUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.plaf.multi.multilabelui.createui": [
        "javax.swing.plaf.multi.MultiLabelUI.createUI(javax.swing.JComponent)"
    ],
    "javax.xml.bind.marshaller.setlistener": [
        "javax.xml.bind.Marshaller.setListener(javax.xml.bind.Marshaller.Listener)"
    ],
    "javax.xml.bind.marshaller.getproperty": [
        "javax.xml.bind.Marshaller.getProperty(java.lang.String)"
    ],
    "javax.sound.midi.midisystem.getmididevice": [
        "javax.sound.midi.MidiSystem.getMidiDevice(javax.sound.midi.MidiDevice.Info)"
    ],
    "javax.swing.jcomponent.processmouseevent": [
        "javax.swing.JComponent.processMouseEvent(java.awt.event.MouseEvent)"
    ],
    "java.awt.geom.quadcurve2d.float.getx2": [
        "java.awt.geom.QuadCurve2D.Float.getX2()"
    ],
    "java.util.linkedhashset.spliterator": [
        "java.util.LinkedHashSet.spliterator()"
    ],
    "java.sql.timestamp.gettime": [
        "java.sql.Timestamp.getTime()"
    ],
    "javax.xml.bind.helpers.validationeventimpl.setmessage": [
        "javax.xml.bind.helpers.ValidationEventImpl.setMessage(java.lang.String)"
    ],
    "javax.sound.midi.sequencer.recorddisable": [
        "javax.sound.midi.Sequencer.recordDisable(javax.sound.midi.Track)"
    ],
    "java.awt.filedialog.getfile": [
        "java.awt.FileDialog.getFile()"
    ],
    "org.xml.sax.ext.declhandler.internalentitydecl": [
        "org.xml.sax.ext.DeclHandler.internalEntityDecl(java.lang.String,java.lang.String)"
    ],
    "java.sql.statement.executelargeupdate": [
        "java.sql.Statement.executeLargeUpdate(java.lang.String,java.lang.String[])",
        "java.sql.Statement.executeLargeUpdate(java.lang.String,int[])",
        "java.sql.Statement.executeLargeUpdate(java.lang.String,int)",
        "java.sql.Statement.executeLargeUpdate(java.lang.String)"
    ],
    "javax.xml.datatype.xmlgregoriancalendar.geteonandyear": [
        "javax.xml.datatype.XMLGregorianCalendar.getEonAndYear()"
    ],
    "org.omg.dynamicany._dynsequencestub.insert_char": [
        "org.omg.DynamicAny._DynSequenceStub.insert_char(char)"
    ],
    "javax.swing.jfilechooser.setaccessory": [
        "javax.swing.JFileChooser.setAccessory(javax.swing.JComponent)"
    ],
    "java.util.calendar.builder.settimeofday": [
        "java.util.Calendar.Builder.setTimeOfDay(int,int,int,int)",
        "java.util.Calendar.Builder.setTimeOfDay(int,int,int)"
    ],
    "javax.swing.jframe.getglasspane": [
        "javax.swing.JFrame.getGlassPane()"
    ],
    "javax.swing.jrootpane.setwindowdecorationstyle": [
        "javax.swing.JRootPane.setWindowDecorationStyle(int)"
    ],
    "java.nio.channels.membershipkey.drop": [
        "java.nio.channels.MembershipKey.drop()"
    ],
    "javax.swing.jlayeredpane.getaccessiblecontext": [
        "javax.swing.JLayeredPane.getAccessibleContext()"
    ],
    "javax.imageio.metadata.iiometadata.activatecontroller": [
        "javax.imageio.metadata.IIOMetadata.activateController()"
    ],
    "javax.naming.context.listbindings": [
        "javax.naming.Context.listBindings(java.lang.String)",
        "javax.naming.Context.listBindings(javax.naming.Name)"
    ],
    "java.lang.management.platformloggingmxbean.getloggerlevel": [
        "java.lang.management.PlatformLoggingMXBean.getLoggerLevel(java.lang.String)"
    ],
    "javax.swing.plaf.multi.multitableui.getmaximumsize": [
        "javax.swing.plaf.multi.MultiTableUI.getMaximumSize(javax.swing.JComponent)"
    ],
    "java.lang.integer.valueof": [
        "java.lang.Integer.valueOf(java.lang.String,int)",
        "java.lang.Integer.valueOf(int)",
        "java.lang.Integer.valueOf(java.lang.String)"
    ],
    "org.omg.corba.any.extract_char": [
        "org.omg.CORBA.Any.extract_char()"
    ],
    "org.omg.dynamicany._dynsequencestub.equal": [
        "org.omg.DynamicAny._DynSequenceStub.equal(org.omg.DynamicAny.DynAny)"
    ],
    "javax.swing.plaf.basic.basictreeui.isdropline": [
        "javax.swing.plaf.basic.BasicTreeUI.isDropLine(javax.swing.JTree.DropLocation)"
    ],
    "javax.management.relation.relationservicembean.getallroles": [
        "javax.management.relation.RelationServiceMBean.getAllRoles(java.lang.String)"
    ],
    "javax.swing.comboboxmodel.setselecteditem": [
        "javax.swing.ComboBoxModel.setSelectedItem(java.lang.Object)"
    ],
    "javax.swing.plaf.multi.multidesktoppaneui.contains": [
        "javax.swing.plaf.multi.MultiDesktopPaneUI.contains(javax.swing.JComponent,int,int)"
    ],
    "java.util.zip.inflater.gettotalin": [
        "java.util.zip.Inflater.getTotalIn()"
    ],
    "javax.tools.javacompiler.gettask": [
        "javax.tools.JavaCompiler.getTask(java.io.Writer,javax.tools.JavaFileManager,javax.tools.DiagnosticListener<? super javax.tools.JavaFileObject>,java.lang.Iterable<java.lang.String>,java.lang.Iterable<java.lang.String>,java.lang.Iterable<? extends javax.tools.JavaFileObject>)"
    ],
    "java.time.temporal.weekfields.weekofweekbasedyear": [
        "java.time.temporal.WeekFields.weekOfWeekBasedYear()"
    ],
    "javax.swing.jscrollbar.getui": [
        "javax.swing.JScrollBar.getUI()"
    ],
    "java.awt.geom.area.subtract": [
        "java.awt.geom.Area.subtract(java.awt.geom.Area)"
    ],
    "java.awt.font.textlayout.getvisibleadvance": [
        "java.awt.font.TextLayout.getVisibleAdvance()"
    ],
    "javax.swing.text.styleconstants.setunderline": [
        "javax.swing.text.StyleConstants.setUnderline(javax.swing.text.MutableAttributeSet,boolean)"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.setscale": [
        "javax.sql.rowset.RowSetMetaDataImpl.setScale(int,int)"
    ],
    "org.omg.dynamicany._dynunionstub.get_ulonglong": [
        "org.omg.DynamicAny._DynUnionStub.get_ulonglong()"
    ],
    "java.util.prefs.preferencesfactory.userroot": [
        "java.util.prefs.PreferencesFactory.userRoot()"
    ],
    "java.util.spliterator.ofdouble.foreachremaining": [
        "java.util.Spliterator.OfDouble.forEachRemaining(java.util.function.Consumer<? super java.lang.Double>)"
    ],
    "javax.swing.imageicon.setimageobserver": [
        "javax.swing.ImageIcon.setImageObserver(java.awt.image.ImageObserver)"
    ],
    "javax.swing.text.defaultformatter.setvalueclass": [
        "javax.swing.text.DefaultFormatter.setValueClass(java.lang.Class<?>)"
    ],
    "java.net.httpurlconnection.setfixedlengthstreamingmode": [
        "java.net.HttpURLConnection.setFixedLengthStreamingMode(int)",
        "java.net.HttpURLConnection.setFixedLengthStreamingMode(long)"
    ],
    "java.awt.menuitem.getactionlisteners": [
        "java.awt.MenuItem.getActionListeners()"
    ],
    "javax.swing.jtable.setrowmargin": [
        "javax.swing.JTable.setRowMargin(int)"
    ],
    "java.text.decimalformat.setmultiplier": [
        "java.text.DecimalFormat.setMultiplier(int)"
    ],
    "javax.print.attribute.standard.jobimpressionscompleted.getcategory": [
        "javax.print.attribute.standard.JobImpressionsCompleted.getCategory()"
    ],
    "javax.swing.border.titledborder.getborder": [
        "javax.swing.border.TitledBorder.getBorder()"
    ],
    "java.time.chrono.isochronology.getcalendartype": [
        "java.time.chrono.IsoChronology.getCalendarType()"
    ],
    "java.awt.graphics2d.drawrenderableimage": [
        "java.awt.Graphics2D.drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)"
    ],
    "javax.swing.jseparator.getorientation": [
        "javax.swing.JSeparator.getOrientation()"
    ],
    "java.nio.file.spi.filesystemprovider.move": [
        "java.nio.file.spi.FileSystemProvider.move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption...)",
        "java.nio.file.spi.FileSystemProvider.move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption)"
    ],
    "javax.swing.tree.defaulttreemodel.getchild": [
        "javax.swing.tree.DefaultTreeModel.getChild(java.lang.Object,int)"
    ],
    "javax.management.monitor.gaugemonitor.gethighthreshold": [
        "javax.management.monitor.GaugeMonitor.getHighThreshold()"
    ],
    "org.omg.dynamicany._dynunionstub.get_char": [
        "org.omg.DynamicAny._DynUnionStub.get_char()"
    ],
    "javax.swing.jtree.clearselection": [
        "javax.swing.JTree.clearSelection()"
    ],
    "javax.naming.context.unbind": [
        "javax.naming.Context.unbind(javax.naming.Name)",
        "javax.naming.Context.unbind(java.lang.String)"
    ],
    "javax.swing.border.bevelborder.paintborder": [
        "javax.swing.border.BevelBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)"
    ],
    "java.util.logging.loggingmxbean.setloggerlevel": [
        "java.util.logging.LoggingMXBean.setLoggerLevel(java.lang.String,java.lang.String)"
    ],
    "javax.xml.parsers.documentbuilderfactory.isexpandentityreferences": [
        "javax.xml.parsers.DocumentBuilderFactory.isExpandEntityReferences()"
    ],
    "javax.xml.crypto.keyselectorexception.getcause": [
        "javax.xml.crypto.KeySelectorException.getCause()"
    ],
    "org.omg.portableserver.poaoperations.create_lifespan_policy": [
        "org.omg.PortableServer.POAOperations.create_lifespan_policy(org.omg.PortableServer.LifespanPolicyValue)"
    ],
    "javax.imageio.imagewriteparam.getcompressiontypes": [
        "javax.imageio.ImageWriteParam.getCompressionTypes()"
    ],
    "javax.management.openmbean.simpletype.equals": [
        "javax.management.openmbean.SimpleType.equals(java.lang.Object)"
    ],
    "org.w3c.dom.ls.lsserializer.writetostring": [
        "org.w3c.dom.ls.LSSerializer.writeToString(org.w3c.dom.Node)"
    ],
    "java.nio.bytebuffer.slice": [
        "java.nio.ByteBuffer.slice()"
    ],
    "javax.swing.jdesktoppane.remove": [
        "javax.swing.JDesktopPane.remove(java.awt.Component)",
        "javax.swing.JDesktopPane.remove(int)"
    ],
    "javax.swing.plaf.basic.basictextareaui.getbaseline": [
        "javax.swing.plaf.basic.BasicTextAreaUI.getBaseline(javax.swing.JComponent,int,int)"
    ],
    "java.text.format.formattocharacteriterator": [
        "java.text.Format.formatToCharacterIterator(java.lang.Object)"
    ],
    "java.util.uuid.compareto": [
        "java.util.UUID.compareTo(java.util.UUID)"
    ],
    "java.applet.applet.play": [
        "java.applet.Applet.play(java.net.URL)",
        "java.applet.Applet.play(java.net.URL,java.lang.String)"
    ],
    "javax.swing.plaf.nimbus.nimbuslookandfeel.getname": [
        "javax.swing.plaf.nimbus.NimbusLookAndFeel.getName()"
    ],
    "java.util.concurrent.blockingdeque.offerlast": [
        "java.util.concurrent.BlockingDeque.offerLast(java.util.concurrent.BlockingDeque)",
        "java.util.concurrent.BlockingDeque.offerLast(java.util.concurrent.BlockingDeque,long,java.util.concurrent.TimeUnit)",
        "java.util.concurrent.BlockingDeque.offerLast(E)",
        "java.util.concurrent.BlockingDeque.offerLast(E,long,java.util.concurrent.TimeUnit)"
    ],
    "javax.swing.plaf.basic.basictextui.paint": [
        "javax.swing.plaf.basic.BasicTextUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.naming.ldap.unsolicitednotification.getreferrals": [
        "javax.naming.ldap.UnsolicitedNotification.getReferrals()"
    ],
    "javax.swing.springlayout.constraints.getx": [
        "javax.swing.SpringLayout.Constraints.getX()"
    ],
    "java.text.decimalformat.setpositivesuffix": [
        "java.text.DecimalFormat.setPositiveSuffix(java.lang.String)"
    ],
    "java.awt.image.renderable.renderableimage.getsources": [
        "java.awt.image.renderable.RenderableImage.getSources()"
    ],
    "java.time.zoneddatetime.minusminutes": [
        "java.time.ZonedDateTime.minusMinutes(long)"
    ],
    "javax.xml.ws.soap.addressingfeature.responses.values": [
        "javax.xml.ws.soap.AddressingFeature.Responses.values()"
    ],
    "java.awt.toolkit.getmouseinfopeer": [
        "java.awt.Toolkit.getMouseInfoPeer()"
    ],
    "javax.swing.jsplitpane.iscontinuouslayout": [
        "javax.swing.JSplitPane.isContinuousLayout()"
    ],
    "javax.swing.text.gapcontent.replace": [
        "javax.swing.text.GapContent.replace(int,int,java.lang.Object,int)"
    ],
    "org.omg.dynamicany._dynstructstub.from_any": [
        "org.omg.DynamicAny._DynStructStub.from_any(org.omg.CORBA.Any)"
    ],
    "javax.net.ssl.sslsocket.getsupportedciphersuites": [
        "javax.net.ssl.SSLSocket.getSupportedCipherSuites()"
    ],
    "java.awt.graphics2d.setbackground": [
        "java.awt.Graphics2D.setBackground(java.awt.Color)"
    ],
    "java.sql.parametermetadata.getparameterclassname": [
        "java.sql.ParameterMetaData.getParameterClassName(int)"
    ],
    "java.awt.datatransfer.systemflavormap.getnativesforflavors": [
        "java.awt.datatransfer.SystemFlavorMap.getNativesForFlavors(java.awt.datatransfer.DataFlavor[])"
    ],
    "java.util.concurrent.concurrenthashmap.foreachentry": [
        "java.util.concurrent.ConcurrentHashMap.forEachEntry(long,,,? extends U>,java.util.function.Consumer<? super U>)",
        "java.util.concurrent.ConcurrentHashMap.forEachEntry(long,java.util.function.Consumer<? super,java.util.concurrent.ConcurrentHashMap>>)",
        "java.util.concurrent.ConcurrentHashMap.forEachEntry(long,java.util.function.Consumer<? super,V>>)"
    ],
    "java.io.file.getcanonicalpath": [
        "java.io.File.getCanonicalPath()"
    ],
    "javax.swing.plaf.synth.synthcolorchooserui.paint": [
        "javax.swing.plaf.synth.SynthColorChooserUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",
        "javax.swing.plaf.synth.SynthColorChooserUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "org.w3c.dom.element.setattribute": [
        "org.w3c.dom.Element.setAttribute(java.lang.String,java.lang.String)"
    ],
    "java.time.period.ofyears": [
        "java.time.Period.ofYears(int)"
    ],
    "java.beans.beancontext.beancontextsupport.needsgui": [
        "java.beans.beancontext.BeanContextSupport.needsGui()"
    ],
    "javax.swing.jframe.getlayeredpane": [
        "javax.swing.JFrame.getLayeredPane()"
    ],
    "java.time.year.until": [
        "java.time.Year.until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)"
    ],
    "javax.swing.plaf.synth.synthpainter.paintcolorchooserbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintColorChooserBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "org.omg.dynamicany._dynstructstub.get_ushort": [
        "org.omg.DynamicAny._DynStructStub.get_ushort()"
    ],
    "java.nio.channels.selector.close": [
        "java.nio.channels.Selector.close()"
    ],
    "java.awt.rectangle.getwidth": [
        "java.awt.Rectangle.getWidth()"
    ],
    "javax.management.openmbean.compositetype.keyset": [
        "javax.management.openmbean.CompositeType.keySet()"
    ],
    "java.util.concurrent.atomic.atomiclong.compareandset": [
        "java.util.concurrent.atomic.AtomicLong.compareAndSet(long,long)"
    ],
    "javax.swing.table.defaulttablemodel.getvalueat": [
        "javax.swing.table.DefaultTableModel.getValueAt(int,int)"
    ],
    "java.security.permission.checkguard": [
        "java.security.Permission.checkGuard(java.lang.Object)"
    ],
    "javax.management.remote.rmi.rmiconnection.close": [
        "javax.management.remote.rmi.RMIConnection.close()"
    ],
    "javax.swing.text.html.formview.imagesubmit": [
        "javax.swing.text.html.FormView.imageSubmit(java.lang.String)"
    ],
    "javax.swing.text.defaultformatter.getallowsinvalid": [
        "javax.swing.text.DefaultFormatter.getAllowsInvalid()"
    ],
    "javax.crypto.keygenerator.getinstance": [
        "javax.crypto.KeyGenerator.getInstance(java.lang.String,java.security.Provider)",
        "javax.crypto.KeyGenerator.getInstance(java.lang.String,java.lang.String)",
        "javax.crypto.KeyGenerator.getInstance(java.lang.String)"
    ],
    "javax.net.ssl.sslengine.unwrap": [
        "javax.net.ssl.SSLEngine.unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer)",
        "javax.net.ssl.SSLEngine.unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)",
        "javax.net.ssl.SSLEngine.unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[])",
        "javax.net.ssl.SSLEngine.unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer,int,int)"
    ],
    "java.util.concurrent.timeunit.sleep": [
        "java.util.concurrent.TimeUnit.sleep(long)"
    ],
    "java.lang.long.reverse": [
        "java.lang.Long.reverse(long)"
    ],
    "javax.swing.jformattedtextfield.getactions": [
        "javax.swing.JFormattedTextField.getActions()"
    ],
    "javax.xml.parsers.saxparser.parse": [
        "javax.xml.parsers.SAXParser.parse(org.xml.sax.InputSource,org.xml.sax.helpers.DefaultHandler)",
        "javax.xml.parsers.SAXParser.parse(org.xml.sax.InputSource,org.xml.sax.HandlerBase)",
        "javax.xml.parsers.SAXParser.parse(java.io.File,org.xml.sax.helpers.DefaultHandler)",
        "javax.xml.parsers.SAXParser.parse(java.io.InputStream,org.xml.sax.HandlerBase,java.lang.String)",
        "javax.xml.parsers.SAXParser.parse(java.io.InputStream,org.xml.sax.HandlerBase)",
        "javax.xml.parsers.SAXParser.parse(java.io.InputStream,org.xml.sax.helpers.DefaultHandler,java.lang.String)",
        "javax.xml.parsers.SAXParser.parse(java.io.File,org.xml.sax.HandlerBase)",
        "javax.xml.parsers.SAXParser.parse(java.io.InputStream,org.xml.sax.helpers.DefaultHandler)"
    ],
    "javax.xml.bind.datatypeconverter.printdatetime": [
        "javax.xml.bind.DatatypeConverter.printDateTime(java.util.Calendar)"
    ],
    "javax.swing.jtextfield.getuiclassid": [
        "javax.swing.JTextField.getUIClassID()"
    ],
    "javax.management.openmbean.compositedatasupport.getall": [
        "javax.management.openmbean.CompositeDataSupport.getAll(java.lang.String[])"
    ],
    "java.util.stream.collectors.toset": [
        "java.util.stream.Collectors.toSet()"
    ],
    "javax.swing.plaf.multi.multicolorchooserui.paint": [
        "javax.swing.plaf.multi.MultiColorChooserUI.paint(java.awt.Graphics,javax.swing.JComponent)"
    ],
    "javax.swing.plaf.metal.metalmenubarui.installui": [
        "javax.swing.plaf.metal.MetalMenuBarUI.installUI(javax.swing.JComponent)"
    ],
    "java.time.offsettime.plusnanos": [
        "java.time.OffsetTime.plusNanos(long)"
    ],
    "java.nio.channels.networkchannel.getoption": [
        "java.nio.channels.NetworkChannel.getOption(java.net.SocketOption<T>)"
    ],
    "java.awt.geom.quadcurve2d.double.getp2": [
        "java.awt.geom.QuadCurve2D.Double.getP2()"
    ],
    "javax.xml.bind.binder.getproperty": [
        "javax.xml.bind.Binder.getProperty(java.lang.String)"
    ],
    "java.awt.container.getinsets": [
        "java.awt.Container.getInsets()"
    ],
    "java.time.localdatetime.now": [
        "java.time.LocalDateTime.now()",
        "java.time.LocalDateTime.now(java.time.Clock)",
        "java.time.LocalDateTime.now(java.time.ZoneId)"
    ],
    "java.awt.eventqueue.createsecondaryloop": [
        "java.awt.EventQueue.createSecondaryLoop()"
    ],
    "javax.imageio.plugins.jpeg.jpegimagereadparam.getachuffmantables": [
        "javax.imageio.plugins.jpeg.JPEGImageReadParam.getACHuffmanTables()"
    ],
    "java.awt.textcomponent.removetextlistener": [
        "java.awt.TextComponent.removeTextListener(java.awt.event.TextListener)"
    ],
    "java.util.locale.getdisplaycountry": [
        "java.util.Locale.getDisplayCountry()",
        "java.util.Locale.getDisplayCountry(java.util.Locale)"
    ],
    "javax.sql.rowset.rowsetmetadataimpl.getcolumnname": [
        "javax.sql.rowset.RowSetMetaDataImpl.getColumnName(int)"
    ],
    "java.awt.image.renderable.parameterblock.getrenderedsource": [
        "java.awt.image.renderable.ParameterBlock.getRenderedSource(int)"
    ],
    "java.awt.image.lookupop.getpoint2d": [
        "java.awt.image.LookupOp.getPoint2D(java.awt.geom.Point2D,java.awt.geom.Point2D)"
    ],
    "java.util.concurrent.atomic.atomiclongarray.tostring": [
        "java.util.concurrent.atomic.AtomicLongArray.toString()"
    ],
    "javax.management.monitor.gaugemonitor.getderivedgaugetimestamp": [
        "javax.management.monitor.GaugeMonitor.getDerivedGaugeTimeStamp(javax.management.ObjectName)"
    ],
    "javax.management.openmbean.tabulardatasupport.hashcode": [
        "javax.management.openmbean.TabularDataSupport.hashCode()"
    ],
    "org.omg.dynamicany._dynfixedstub.from_any": [
        "org.omg.DynamicAny._DynFixedStub.from_any(org.omg.CORBA.Any)"
    ],
    "java.time.temporal.chronofield.valueof": [
        "java.time.temporal.ChronoField.valueOf(java.lang.String)"
    ],
    "java.lang.short.shortvalue": [
        "java.lang.Short.shortValue()"
    ],
    "javax.swing.text.defaultstyleddocument.getbackground": [
        "javax.swing.text.DefaultStyledDocument.getBackground(javax.swing.text.AttributeSet)"
    ],
    "javax.swing.jinternalframe.setclosable": [
        "javax.swing.JInternalFrame.setClosable(boolean)"
    ],
    "javax.swing.text.abstractdocument.attributecontext.removeattributes": [
        "javax.swing.text.AbstractDocument.AttributeContext.removeAttributes(javax.swing.text.AttributeSet,java.util.Enumeration<?>)",
        "javax.swing.text.AbstractDocument.AttributeContext.removeAttributes(javax.swing.text.AttributeSet,javax.swing.text.AttributeSet)"
    ],
    "javax.management.objectname.tostring": [
        "javax.management.ObjectName.toString()"
    ],
    "javax.swing.grouplayout.createparallelgroup": [
        "javax.swing.GroupLayout.createParallelGroup()",
        "javax.swing.GroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment,boolean)",
        "javax.swing.GroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment)"
    ],
    "java.lang.reflect.parameter.tostring": [
        "java.lang.reflect.Parameter.toString()"
    ],
    "java.awt.checkbox.additemlistener": [
        "java.awt.Checkbox.addItemListener(java.awt.event.ItemListener)"
    ],
    "javax.security.cert.certificate.getpublickey": [
        "javax.security.cert.Certificate.getPublicKey()"
    ],
    "javax.print.attribute.standard.jobstatereason.getenumvaluetable": [
        "javax.print.attribute.standard.JobStateReason.getEnumValueTable()"
    ],
    "javax.swing.undo.abstractundoableedit.undo": [
        "javax.swing.undo.AbstractUndoableEdit.undo()"
    ],
    "org.omg.dynamicany._dynenumstub.get_float": [
        "org.omg.DynamicAny._DynEnumStub.get_float()"
    ],
    "javax.print.attribute.standard.printermoreinfomanufacturer.equals": [
        "javax.print.attribute.standard.PrinterMoreInfoManufacturer.equals(java.lang.Object)"
    ],
    "javax.swing.text.compositeview.getnextvisualpositionfrom": [
        "javax.swing.text.CompositeView.getNextVisualPositionFrom(int,javax.swing.text.Position.Bias,java.awt.Shape,int,javax.swing.text.Position.Bias[])"
    ],
    "javax.management.remote.jmxconnectorservermbean.stop": [
        "javax.management.remote.JMXConnectorServerMBean.stop()"
    ],
    "javax.crypto.cipherspi.enginesetmode": [
        "javax.crypto.CipherSpi.engineSetMode(java.lang.String)"
    ],
    "org.ietf.jgss.gsscredential.getremainingacceptlifetime": [
        "org.ietf.jgss.GSSCredential.getRemainingAcceptLifetime(org.ietf.jgss.Oid)"
    ],
    "javax.swing.jtextpane.getstyle": [
        "javax.swing.JTextPane.getStyle(java.lang.String)"
    ],
    "javax.sql.rowset.serial.sqlinputimpl.readobject": [
        "javax.sql.rowset.serial.SQLInputImpl.readObject()"
    ],
    "java.lang.stringbuffer.tostring": [
        "java.lang.StringBuffer.toString()"
    ],
    "java.time.instant.hashcode": [
        "java.time.Instant.hashCode()"
    ],
    "org.w3c.dom.namelist.getnamespaceuri": [
        "org.w3c.dom.NameList.getNamespaceURI(int)"
    ],
    "java.awt.image.raster.getminx": [
        "java.awt.image.Raster.getMinX()"
    ],
    "java.awt.trayicon.addmousemotionlistener": [
        "java.awt.TrayIcon.addMouseMotionListener(java.awt.event.MouseMotionListener)"
    ],
    "javax.swing.jtable.print": [
        "javax.swing.JTable.print()",
        "javax.swing.JTable.print(javax.swing.JTable.PrintMode)",
        "javax.swing.JTable.print(javax.swing.JTable.PrintMode,java.text.MessageFormat,java.text.MessageFormat)"
    ],
    "javax.script.scriptexception.getfilename": [
        "javax.script.ScriptException.getFileName()"
    ],
    "java.sql.databasemetadata.supportsresultsettype": [
        "java.sql.DatabaseMetaData.supportsResultSetType(int)"
    ],
    "javax.swing.text.tableview.createtablerow": [
        "javax.swing.text.TableView.createTableRow(javax.swing.text.Element)"
    ],
    "org.omg.corba.byteholder._type": [
        "org.omg.CORBA.ByteHolder._type()"
    ],
    "javax.sound.midi.midichannel.allsoundoff": [
        "javax.sound.midi.MidiChannel.allSoundOff()"
    ],
    "javax.imageio.metadata.iiometadatanode.getattribute": [
        "javax.imageio.metadata.IIOMetadataNode.getAttribute(java.lang.String)"
    ],
    "java.io.file.getabsolutepath": [
        "java.io.File.getAbsolutePath()"
    ],
    "org.omg.corba.portable.objectimpl._request": [
        "org.omg.CORBA.portable.ObjectImpl._request(java.lang.String,boolean)",
        "org.omg.CORBA.portable.ObjectImpl._request(java.lang.String)"
    ],
    "javax.swing.tree.treeselectionmodel.getleadselectionpath": [
        "javax.swing.tree.TreeSelectionModel.getLeadSelectionPath()"
    ],
    "java.awt.image.directcolormodel.getredmask": [
        "java.awt.image.DirectColorModel.getRedMask()"
    ],
    "javax.imageio.plugins.jpeg.jpegimagewriteparam.getoptimizehuffmantables": [
        "javax.imageio.plugins.jpeg.JPEGImageWriteParam.getOptimizeHuffmanTables()"
    ],
    "javax.net.ssl.sslparameters.setuseciphersuitesorder": [
        "javax.net.ssl.SSLParameters.setUseCipherSuitesOrder(boolean)"
    ],
    "javax.swing.table.defaulttablecolumnmodel.createselectionmodel": [
        "javax.swing.table.DefaultTableColumnModel.createSelectionModel()"
    ],
    "javax.swing.plaf.multi.multibuttonui.contains": [
        "javax.swing.plaf.multi.MultiButtonUI.contains(javax.swing.JComponent,int,int)"
    ],
    "javax.swing.text.stylecontext.removestyle": [
        "javax.swing.text.StyleContext.removeStyle(java.lang.String)"
    ],
    "java.util.vector.elements": [
        "java.util.Vector.elements()"
    ],
    "java.time.localdate.getdayofweek": [
        "java.time.LocalDate.getDayOfWeek()"
    ],
    "java.util.collections.checkedset": [
        "java.util.Collections.checkedSet(java.util.Set<E>,java.lang.Class<E>)"
    ],
    "javax.sql.commondatasource.getlogwriter": [
        "javax.sql.CommonDataSource.getLogWriter()"
    ],
    "javax.swing.plaf.synth.synthpainter.paintlabelbackground": [
        "javax.swing.plaf.synth.SynthPainter.paintLabelBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
    ],
    "javax.imageio.stream.imageinputstream.readfully": [
        "javax.imageio.stream.ImageInputStream.readFully(byte[],int,int)"
    ],
    "org.w3c.dom.events.event.initevent": [
        "org.w3c.dom.events.Event.initEvent(java.lang.String,boolean,boolean)"
    ],
    "javax.swing.jlist.setvisiblerowcount": [
        "javax.swing.JList.setVisibleRowCount(int)"
    ],
    "java.math.bigdecimal.floatvalue": [
        "java.math.BigDecimal.floatValue()"
    ],
    "java.sql.callablestatement.setasciistream": [
        "java.sql.CallableStatement.setAsciiStream(java.lang.String,java.io.InputStream)",
        "java.sql.CallableStatement.setAsciiStream(java.lang.String,java.io.InputStream,long)",
        "java.sql.CallableStatement.setAsciiStream(java.lang.String,java.io.InputStream,int)"
    ],
    "java.util.list.hashcode": [
        "java.util.List.hashCode()"
    ],
    "java.util.stream.intstream.concat": [
        "java.util.stream.IntStream.concat(java.util.stream.IntStream,java.util.stream.IntStream)"
    ],
    "java.awt.geom.path2d.getpathiterator": [
        "java.awt.geom.Path2D.getPathIterator(java.awt.geom.AffineTransform,double)"
    ],
    "java.util.hashtable.clear": [
        "java.util.Hashtable.clear()"
    ],
    "javax.crypto.spec.rc5parameterspec.getwordsize": [
        "javax.crypto.spec.RC5ParameterSpec.getWordSize()"
    ],
    "javax.swing.jwindow.setrootpane": [
        "javax.swing.JWindow.setRootPane(javax.swing.JRootPane)"
    ],
    "javax.swing.text.view.getparent": [
        "javax.swing.text.View.getParent()"
    ],
    "java.net.datagramsocket.getlocaladdress": [
        "java.net.DatagramSocket.getLocalAddress()"
    ],
    "java.time.chrono.thaibuddhistera.getvalue": [
        "java.time.chrono.ThaiBuddhistEra.getValue()"
    ],
    "java.security.cert.x509crlselector.setissuers": [
        "java.security.cert.X509CRLSelector.setIssuers(java.util.Collection<javax.security.auth.x500.X500Principal>)"
    ],
    "java.security.cert.certpathparameters.clone": [
        "java.security.cert.CertPathParameters.clone()"
    ],
    "java.util.function.objintconsumer.accept": [
        "java.util.function.ObjIntConsumer.accept(T,int)",
        "java.util.function.ObjIntConsumer.accept(java.util.function.ObjIntConsumer,int)"
    ],
    "javax.swing.plaf.multi.multidesktopiconui.getpreferredsize": [
        "javax.swing.plaf.multi.MultiDesktopIconUI.getPreferredSize(javax.swing.JComponent)"
    ],
    "javax.swing.text.gapcontent.shiftgap": [
        "javax.swing.text.GapContent.shiftGap(int)"
    ],
    "javax.swing.tree.defaulttreeselectionmodel.addpropertychangelistener": [
        "javax.swing.tree.DefaultTreeSelectionModel.addPropertyChangeListener(java.beans.PropertyChangeListener)"
    ],
    "org.omg.dynamicany._dynstructstub.get_members": [
        "org.omg.DynamicAny._DynStructStub.get_members()"
    ],
    "java.awt.polygon.translate": [
        "java.awt.Polygon.translate(int,int)"
    ],
    "java.util.bitset.get": [
        "java.util.BitSet.get(int)"
    ],
    "java.awt.font.glyphvector.getglyphcodes": [
        "java.awt.font.GlyphVector.getGlyphCodes(int,int,int[])"
    ],
    "java.util.vector.sort": [
        "java.util.Vector.sort(java.util.Comparator<? super E>)"
    ],
    "javax.swing.jcombobox.getselectedindex": [
        "javax.swing.JComboBox.getSelectedIndex()"
    ],
    "javax.management.loading.mletmbean.addurl": [
        "javax.management.loading.MLetMBean.addURL(java.net.URL)",
        "javax.management.loading.MLetMBean.addURL(java.lang.String)"
    ],
    "org.omg.corba.typecode.member_visibility": [
        "org.omg.CORBA.TypeCode.member_visibility(int)"
    ],
    "java.util.hashmap.getordefault": [
        "java.util.HashMap.getOrDefault(java.lang.Object,V)"
    ],
    "javax.swing.tooltipmanager.setdismissdelay": [
        "javax.swing.ToolTipManager.setDismissDelay(int)"
    ],
    "javax.swing.plaf.basic.basictoolbarui.installrolloverborders": [
        "javax.swing.plaf.basic.BasicToolBarUI.installRolloverBorders(javax.swing.JComponent)"
    ],
    "java.util.primitiveiterator.ofdouble.foreachremaining": [
        "java.util.PrimitiveIterator.OfDouble.forEachRemaining(java.util.function.DoubleConsumer)",
        "java.util.PrimitiveIterator.OfDouble.forEachRemaining(java.util.function.Consumer<? super java.lang.Double>)"
    ],
    "javax.sound.midi.spi.midifilewriter.getmidifiletypes": [
        "javax.sound.midi.spi.MidiFileWriter.getMidiFileTypes(javax.sound.midi.Sequence)",
        "javax.sound.midi.spi.MidiFileWriter.getMidiFileTypes()"
    ],
    "javax.swing.border.abstractborder.getinteriorrectangle": [
        "javax.swing.border.AbstractBorder.getInteriorRectangle(java.awt.Component,javax.swing.border.Border,int,int,int,int)",
        "javax.swing.border.AbstractBorder.getInteriorRectangle(java.awt.Component,int,int,int,int)"
    ],
    "javax.swing.text.simpleattributeset.tostring": [
        "javax.swing.text.SimpleAttributeSet.toString()"
    ],
    "java.awt.awteventmulticaster.mouseexited": [
        "java.awt.AWTEventMulticaster.mouseExited(java.awt.event.MouseEvent)"
    ],
    "java.awt.geom.rectangularshape.setframefromcenter": [
        "java.awt.geom.RectangularShape.setFrameFromCenter(double,double,double,double)",
        "java.awt.geom.RectangularShape.setFrameFromCenter(java.awt.geom.Point2D,java.awt.geom.Point2D)"
    ],
    "javax.sql.rowsetinternal.getparams": [
        "javax.sql.RowSetInternal.getParams()"
    ],
    "java.awt.image.setaccelerationpriority": [
        "java.awt.Image.setAccelerationPriority(float)"
    ],
    "javax.management.modelmbean.modelmbeannotificationbroadcaster.sendnotification": [
        "javax.management.modelmbean.ModelMBeanNotificationBroadcaster.sendNotification(javax.management.Notification)",
        "javax.management.modelmbean.ModelMBeanNotificationBroadcaster.sendNotification(java.lang.String)"
    ],
    "java.time.localdatetime.withdayofyear": [
        "java.time.LocalDateTime.withDayOfYear(int)"
    ],
    "java.lang.string.contains": [
        "java.lang.String.contains(java.lang.CharSequence)"
    ],
    "java.lang.object.equals": [
        "java.lang.Object.equals(java.lang.Object)"
    ],
    "java.lang.string.isempty": [
        "java.lang.String.isEmpty()"
    ],
    "java.lang.String.isblank": [
        "java.lang.String.isBlank()"
    ],
    "org.apache.commons.lang3.stringutils.isblank": [
        "org.apache.commons.lang3.StringUtils.isBlank(CharSequence cs)"
    ],
    "org.apache.commons.lang3.stringutils.isnotblank": [
        "org.apache.commons.lang3.StringUtils.isNotBlank(CharSequence cs)"
    ],
    "org.apache.commons.lang3.stringutils.isnotempty": [
        "org.apache.commons.lang3.StringUtils.isNotEmpty(CharSequence cs)"
    ],
    "java.util.collections.reverse": [
        "java.util.Collections.reverse(java.util.List<?>)",
        "java.util.Collections.reverse()"
    ],
    "org.apache.commons.lang3.stringutils.remove": [
        "org.apache.commons.lang3.StringUtils.remove(String str, char remove)",
        "org.apache.commons.lang3.StringUtils.remove(String str, String remove)"
    ],
    "org.apache.commons.lang3.stringutils.chop": [
        "org.apache.commons.lang3.StringUtils.chop(String str)"
    ],
    "java.util.arrays.copyof": [
        "java.util.Arrays.copyOf(T[],int)",
        "java.util.Arrays.copyOf(U[],int,java.lang.Class<? extends T[]>)",
        "java.util.Arrays.copyOf(byte[],int)",
        "java.util.Arrays.copyOf(short[],int)",
        "java.util.Arrays.copyOf(int[],int)",
        "java.util.Arrays.copyOf(long[],int)",
        "java.util.Arrays.copyOf(char[],int)",
        "java.util.Arrays.copyOf(float[],int)",
        "java.util.Arrays.copyOf(double[],int)",
        "java.util.Arrays.copyOf(boolean[],int)"
    ],
    "java.math.bigdecimal.plus": [
        "java.math.BigDecimal.plus()",
        "java.math.BigDecimal.plus(java.math.MathContext)"
    ],
    "org.apache.commons.collections4.collectionutils.filter": [
        "org.apache.commons.collections4.CollectionUtils.filter(Iterable<T> collection, Predicate<? super T> predicate)"
    ],
    "org.apache.commons.lang3.stringutils.removeend": [
        "org.apache.commons.lang3.StringUtils.removeEnd(String str, String remove)"
    ],
    "org.apache.commons.lang3.exception.exceptionutils.getstacktrace": [
        "org.apache.commons.lang3.exception.ExceptionUtils.getStackTrace(Throwable throwable)"
    ],
    "javax.crypto.secretkeyfactory.generatesecret": [
        "javax.crypto.SecretKeyFactory.generateSecret(java.security.spec.KeySpec)"
    ],
    "java.text.dateformat.format": [
        "java.text.DateFormat.format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)",
        "java.text.DateFormat.format(java.util.Date)"
    ],
    "java.nio.file.files.exists": [
        "java.nio.file.Files.exists(java.nio.file.Path,java.nio.file.LinkOption...)",
        "java.nio.file.Files.exists(java.nio.file.Path,java.nio.file.LinkOption)"
    ],
    "java.lang.thread.sleep": [
        "java.lang.Thread.sleep(long)",
        "java.lang.Thread.sleep(long,int)"
    ],
    "java.util.base64.getmimeencoder": [
        "java.util.Base64.getMimeEncoder()",
        "java.util.Base64.getMimeEncoder(int,byte[])"
    ],
    "java.lang.processhandle.pid": [
        "java.lang.ProcessHandle.pid()"
    ],
    "java.util.collections.emptylist": [
        "java.util.Collections.emptyList()"
    ],
    "java.util.arraylist.toarray": [
        "java.util.ArrayList.toArray()",
        "java.util.ArrayList.toArray(T[])"
    ],
    "java.nio.file.files.isregularfile": [
        "java.nio.file.Files.isRegularFile(java.nio.file.Path,java.nio.file.LinkOption...)",
        "java.nio.file.Files.isRegularFile(java.nio.file.Path,java.nio.file.LinkOption)"
    ],
    "java.lang.math.floor": [
        "java.lang.Math.floor(double)"
    ],
    "java.util.date.after": [
        "java.util.Date.after(java.util.Date)"
    ],
    "java.util.list.copyof": [
        "java.util.List.copyOf(Collection<? extends E> coll)"
    ],
    "java.nio.file.path.of": [
        "java.nio.file.Path.of(String first, String more)",
        "java.nio.file.Path.of(URI uri)"
    ],
    "java.lang.management.runtimemxbean.getpid": [
        "java.lang.management.RuntimeMXBean.getPid()"
    ],
    "java.lang.string.repeat": [
        "java.lang.String.repeat(int count)"
    ],
    "java.nio.file.files.writestring": [
        "java.nio.file.Files.writeString(Path path, CharSequence csq, Charset cs, OpenOption... options)",
        "java.nio.file.Files.writeString(Path path, CharSequence csq, OpenOption... options)"
    ],
    "java.util.date.before": [
        "java.util.Date.before(java.util.Date)"
    ],
    "java.io.filewriter.write": [
        "java.io.FileWriter.write(char[])",
        "java.io.FileWriter.write(java.lang.String)"
    ],
    "java.util.base64.getencoder": [
        "java.util.Base64.getEncoder()"
    ],
    "java.util.list.toarray": [
        "java.util.List.toArray()",
        "java.util.List.toArray(T[])"
    ],
    "org.apache.commons.lang3.time.dateutils.adddays": [
        "org.apache.commons.lang3.time.DateUtils.addDays(Date date, int amount)"
    ],
    "java.util.iterator.remove": [
        "java.util.Iterator.remove()"
    ],
    "org.apache.commons.codec.digest.digestutils.md5hex": [
        "org.apache.commons.codec.digest.DigestUtils.md5Hex(byte[] data)",
        "org.apache.commons.codec.digest.DigestUtils.md5Hex(InputStream data)",
        "org.apache.commons.codec.digest.DigestUtils.md5Hex(String data)"
    ],
    "java.util.base64.getdecoder": [
        "java.util.Base64.getDecoder()"
    ],
    "java.lang.system.currenttimemillis": [
        "java.lang.System.currentTimeMillis()"
    ],
    "java.lang.processhandle.current": [
        "java.lang.ProcessHandle.current()"
    ],
    "org.apache.commons.lang3.time.dateformatutils.format": [
        "org.apache.commons.lang3.time.DateFormatUtils.format(Date date, String pattern)"
    ],
    "java.text.simpledateformat.format": [
        "java.text.SimpleDateFormat.format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)"
    ],
    "org.apache.commons.lang3.math.numberutils.toint": [
        "org.apache.commons.lang3.math.NumberUtils.toInt(String str)",
        "org.apache.commons.lang3.math.NumberUtils.toInt(String str, int defaultValue)"
    ],
    "org.apache.commons.lang3.stringutils.repeat": [
        "org.apache.commons.lang3.StringUtils.repeat(char ch, int repeat)",
        "org.apache.commons.lang3.StringUtils.repeat(String str, int repeat)",
        "org.apache.commons.lang3.StringUtils.repeat(String str, String separator, int repeat)"
    ],
    "org.apache.commons.lang3.threadutils.getallthreads": [
        "org.apache.commons.lang3.ThreadUtils.getAllThreads()"
    ],
    "org.joda.time.format.datetimeformatter.parselocaldate": [
        "org.joda.time.format.DateTimeFormatter.parseLocalDate(String text)"
    ],
    "org.apache.commons.io.ioutils.tostring": [
        "org.apache.commons.io.IOUtils.toString(InputStream input, Charset charset)",
        "org.apache.commons.io.IOUtils.toString(InputStream input, String charsetName)"
    ],
    "java.time.localdate.isbefore": [
        "java.time.LocalDate.isBefore(java.time.chrono.ChronoLocalDate)"
    ],
    "java.time.localdate.isafter": [
        "java.time.LocalDate.isAfter(java.time.chrono.ChronoLocalDate)"
    ],
    "java.lang.reflect.field.setaccessible": [
        "java.lang.reflect.Field.setAccessible(boolean flag)"
    ],
    "org.apache.commons.lang3.arrayutils.addall": [
        "org.apache.commons.lang3.ArrayUtils.addAll(boolean[] array1, boolean... array2)",
        "org.apache.commons.lang3.ArrayUtils.addAll(byte[] array1, byte... array2)",
        "org.apache.commons.lang3.ArrayUtils.addAll(char[] array1, char... array2)",
        "org.apache.commons.lang3.ArrayUtils.addAll(double[] array1, double... array2)",
        "org.apache.commons.lang3.ArrayUtils.addAll(float[] array1, float... array2)",
        "org.apache.commons.lang3.ArrayUtils.addAll(int[] array1, int... array2)",
        "org.apache.commons.lang3.ArrayUtils.addAll(long[] array1, long... array2)",
        "org.apache.commons.lang3.ArrayUtils.addAll(short[] array1, short... array2)",
        "org.apache.commons.lang3.ArrayUtils.addAll(T[] array1, T... array2)"
    ],
    "org.apache.common.io.fileutils.writestringtofile": [
        "Org.apache.common.io.FileUtils.writeStringToFile(File file, String data, Charset charset)",
        "Org.apache.common.io.FileUtils.writeStringToFile(File file, String data, Charset charset, boolean append)",
        "Org.apache.common.io.FileUtils.writeStringToFile(File file, String data, String charsetName)",
        "Org.apache.common.io.FileUtils.writeStringToFile(File file, String data, String charsetName, boolean append)"
    ],
    "java.nio.file.files.isdirectory": [
        "java.nio.file.Files.isDirectory(java.nio.file.Path,java.nio.file.LinkOption...)",
        "java.nio.file.Files.isDirectory(java.nio.file.Path,java.nio.file.LinkOption)"
    ],
    "java.time.localdate.isequal": [
        "java.time.LocalDate.isEqual(java.time.chrono.ChronoLocalDate)"
    ],
    "org.apache.commons.lang3.stringutils.split": [
        "org.apache.commons.lang3.StringUtils.split(String str)",
        "org.apache.commons.lang3.StringUtils.split(String str, char separatorChar)",
        "org.apache.commons.lang3.StringUtils.split(String str, String separatorChars)",
        "org.apache.commons.lang3.StringUtils.split(String str, String separatorChars, int max)"
    ],
    "java.util.list.add": [
        "java.util.List.add(java.util.List)",
        "java.util.List.add(int,java.util.List)",
        "java.util.List.add(E)",
        "java.util.List.add(int,E)"
    ],
    "java.sql.preparedstatement.executeupdate": [
        "java.sql.PreparedStatement.executeUpdate()"
    ],
    "java.util.stream.collectors.tounmodifiablelist": [
        "java.util.stream.Collectors.toUnmodifiableList()"
    ],
    "java.util.list.of": [
        "java.util.List.of()",
        "java.util.List.of(E e1)",
        "java.util.List.of(E e1, E e2)",
        "java.util.List.of(E e1, E e2, E e3)",
        "java.util.List.of(E e1, E e2, E e3, E e4)",
        "java.util.List.of(E e1, E e2, E e3, E e4, E e5)",
        "java.util.List.of(E e1, E e2, E e3, E e4, E e5, E e6)",
        "java.util.List.of(E e1, E e2, E e3, E e4, E e5, E e6, E e7)",
        "java.util.List.of(E e1, E e2, E e3, E e4, E e5, E e6, E e7,E e8)",
        "java.util.List.of(E e1, E e2, E e3, E e4, E e5, E e6, E e7,E e8, E e9)",
        "java.util.List.of(E e1, E e2, E e3, E e4, E e5, E e6, E e7,E e8, E e9, E e10)",
        "java.util.List.of(E... elements)"
    ],
    "java.util.calendar.gettime": [
        "java.util.Calendar.getTime()"
    ]
}