[
    {
        "query": "How to split a string in Java",
        "biker_result": [
            "java.lang.String.replaceAll",
            "java.lang.String.toCharArray",
            "java.util.regex.Pattern.quote",
            "java.lang.String.split",
            "java.lang.String.contains",
            "java.util.regex.Pattern.split",
            "java.lang.String.matches",
            "java.lang.String.trim",
            "java.util.Arrays.deepToString",
            "java.lang.Integer.toString",
            "java.lang.String.substring",
            "java.util.regex.Pattern.splitAsStream",
            "java.util.regex.Matcher.appendReplacement",
            "java.net.URLDecoder.decode",
            "java.util.Arrays.asList",
            "java.lang.Character.getNumericValue",
            "java.util.regex.Pattern.compile",
            "java.util.Scanner.nextLine",
            "java.util.Arrays.stream",
            "java.lang.Class.forName",
            "java.util.stream.Stream.of"
        ]
    },
    {
        "query": "How to remove the last character from a string?",
        "biker_result": [
            "java.lang.StringBuilder.deleteCharAt",
            "java.lang.String.charAt",
            "java.lang.String.indexOf",
            "java.lang.String.lastIndexOf",
            "java.lang.String.replace",
            "java.lang.String.replaceAll",
            "java.lang.StringBuffer.setLength",
            "java.util.regex.Pattern.quote",
            "java.util.List.remove",
            "java.lang.String.equals",
            "java.lang.String.substring",
            "java.lang.String.split",
            "java.lang.String.contains",
            "java.lang.System.arraycopy",
            "java.lang.String.matches",
            "java.lang.Character.isLetter",
            "java.lang.String.join",
            "java.nio.charset.Charset.forName",
            "java.util.Arrays.asList",
            "java.util.Collections.singleton"
        ]
    },
    {
        "query": "How do I compare string in java",
        "biker_result": [
            "java.lang.String.equals",
            "java.lang.String.intern",
            "java.lang.Integer.valueOf",
            "java.lang.Integer.compare",
            "java.util.Arrays.equals",
            "java.time.LocalDate.compareTo",
            "java.lang.String.toCharArray",
            "java.lang.String.equalsIgnoreCase",
            "java.math.BigDecimal.valueOf",
            "java.lang.Integer.parseInt",
            "java.lang.String.valueOf",
            "java.util.Collections.sort",
            "java.lang.Double.parseDouble",
            "java.util.Arrays.sort",
            "java.util.Objects.equals",
            "java.util.Arrays.deepEquals",
            "java.lang.String.format",
            "java.lang.Object.equals",
            "java.lang.String.charAt",
            "java.time.LocalDate.isEqual",
            "java.lang.Float.valueOf",
            "java.util.Arrays.fill",
            "java.util.Comparator.compare",
            "java.time.LocalDate.isBefore",
            "java.lang.Double.valueOf",
            "java.time.LocalDate.isAfter",
            "java.lang.String.startsWith",
            "java.util.regex.Matcher.appendReplacement",
            "java.util.Arrays.asList",
            "java.lang.reflect.Field.getType",
            "java.lang.Class.forName",
            "java.lang.Class.getConstructor",
            "java.util.List.contains",
            "java.util.Date.getTime"
        ]
    },
    {
        "query": "Check whether a string is not null and not empty",
        "biker_result": [
            "java.lang.String.equals",
            "java.util.Objects.isNull",
            "java.lang.String.isEmpty",
            "java.sql.ResultSet.wasNull",
            "java.lang.Integer.getInteger",
            "java.util.Optional.ofNullable",
            "java.lang.Integer.parseInt",
            "java.lang.Object.equals",
            "java.lang.String.valueOf",
            "java.lang.String.split",
            "java.sql.ResultSet.getObject",
            "java.lang.Character.isSpaceChar",
            "java.lang.String.length",
            "java.util.List.isEmpty",
            "java.lang.Double.valueOf",
            "java.util.Optional.empty",
            "java.lang.Double.parseDouble",
            "java.util.Collections.disjoint",
            "java.util.Optional.of",
            "java.lang.Class.isArray",
            "java.util.stream.Stream.of",
            "java.lang.reflect.Array.getLength",
            "java.util.Optional.orElse",
            "java.util.Arrays.asList",
            "java.lang.Character.isWhitespace",
            "java.sql.ResultSet.getDouble"
        ]
    },
    {
        "query": "Remove all occurrences of char from string",
        "biker_result": [
            "java.lang.String.valueOf",
            "java.lang.String.contains",
            "java.lang.String.indexOf",
            "java.lang.String.trim",
            "java.lang.StringBuilder.deleteCharAt",
            "java.lang.String.charAt",
            "java.lang.String.toCharArray",
            "java.util.Arrays.toString",
            "java.lang.String.replace",
            "java.lang.String.replaceAll",
            "java.lang.String.split",
            "java.lang.String.startsWith",
            "java.util.Arrays.deepToString",
            "java.lang.Character.isLetter",
            "java.lang.Character.isWhitespace",
            "java.util.Arrays.asList",
            "java.lang.System.arraycopy",
            "java.util.Arrays.sort",
            "java.util.Collections.singleton",
            "java.lang.System.getProperty"
        ]
    },
    {
        "query": "How to convert String to long in Java?",
        "biker_result": [
            "java.lang.Long.valueOf",
            "java.lang.String.toCharArray",
            "java.lang.Long.toString",
            "javax.xml.bind.DatatypeConverter.printHexBinary",
            "java.lang.Integer.valueOf",
            "java.util.Arrays.toString",
            "java.lang.String.valueOf",
            "java.lang.Short.valueOf",
            "java.lang.Long.toHexString",
            "java.lang.Integer.parseInt",
            "java.lang.Long.parseLong",
            "java.lang.Double.parseDouble",
            "java.lang.Long.decode",
            "java.lang.String.getBytes",
            "java.lang.Boolean.valueOf",
            "java.lang.Byte.parseByte",
            "java.lang.Object.toString",
            "java.lang.Character.toString",
            "java.lang.String.replaceAll",
            "java.lang.String.format",
            "java.lang.Integer.decode",
            "java.lang.String.split",
            "java.lang.String.charAt",
            "java.util.Arrays.asList",
            "java.lang.System.arraycopy",
            "java.lang.String.substring",
            "java.lang.Class.getMethod",
            "java.math.BigInteger.toByteArray",
            "java.lang.Class.forName",
            "java.util.Vector.toArray",
            "java.util.Collections.sort",
            "java.net.URLConnection.getContentType"
        ]
    },
    {
        "query": "How do I convert a String to an int in Java?",
        "biker_result": [
            "java.lang.Integer.valueOf",
            "java.lang.Integer.toString",
            "java.lang.Long.valueOf",
            "java.lang.Double.toString",
            "java.util.Arrays.toString",
            "java.lang.Short.valueOf",
            "java.lang.Integer.parseInt",
            "java.lang.String.valueOf",
            "java.lang.Double.parseDouble",
            "java.math.BigDecimal.valueOf",
            "java.lang.Long.intValue",
            "java.lang.Byte.parseByte",
            "java.lang.Short.parseShort",
            "java.lang.Character.toString",
            "java.lang.Object.toString",
            "java.lang.String.getBytes",
            "java.lang.Integer.decode",
            "java.lang.Boolean.valueOf",
            "java.lang.Long.parseLong",
            "java.lang.Character.getNumericValue",
            "java.lang.String.matches",
            "java.util.Arrays.asList",
            "java.lang.System.arraycopy",
            "java.lang.Math.pow",
            "java.lang.Math.ceil",
            "java.util.Map.merge",
            "java.lang.Class.getMethod",
            "java.lang.Class.forName",
            "java.util.Arrays.stream",
            "java.math.BigInteger.toByteArray",
            "java.util.stream.Stream.of",
            "java.lang.System.identityHashCode",
            "java.util.stream.Collectors.toSet"
        ]
    },
    {
        "query": "Remove last character of a StringBuilder?",
        "biker_result": [
            "java.lang.StringBuilder.replace",
            "java.lang.StringBuilder.deleteCharAt",
            "java.lang.String.charAt",
            "java.lang.String.lastIndexOf",
            "java.lang.String.trim",
            "java.lang.String.indexOf",
            "java.lang.String.valueOf",
            "java.lang.String.substring",
            "java.lang.StringBuffer.setLength",
            "java.util.regex.Matcher.replaceAll",
            "java.lang.String.contains",
            "java.lang.String.replaceAll",
            "java.lang.String.replaceFirst",
            "java.lang.String.replace",
            "java.util.regex.Pattern.quote",
            "java.lang.Character.isDigit",
            "java.lang.Object.toString",
            "java.lang.String.join",
            "java.lang.Math.max",
            "java.lang.Character.isLetter"
        ]
    },
    {
        "query": "Reverse a string in Java",
        "biker_result": [
            "java.util.Collections.reverse",
            "java.lang.Integer.reverseBytes",
            "java.util.Comparator.reversed",
            "java.util.Collections.reverseOrder",
            "java.lang.String.toCharArray",
            "java.lang.Integer.reverse",
            "java.lang.String.compareTo",
            "java.util.Comparator.reverseOrder",
            "java.lang.String.concat",
            "java.lang.String.lastIndexOf",
            "java.lang.String.format",
            "java.lang.Integer.parseInt",
            "java.lang.String.join",
            "java.lang.String.split",
            "java.lang.Object.toString",
            "java.util.Arrays.sort",
            "java.util.Arrays.fill",
            "java.lang.String.substring",
            "java.lang.String.charAt",
            "java.util.List.subList",
            "java.util.Arrays.asList",
            "java.lang.String.hashCode",
            "java.util.Collections.sort",
            "java.util.stream.Stream.of",
            "java.util.Scanner.nextLine",
            "java.lang.Double.doubleToLongBits",
            "java.util.Arrays.setAll",
            "java.lang.Float.floatToIntBits"
        ]
    },
    {
        "query": "Simple way to repeat a string",
        "biker_result": [
            "java.lang.String.join",
            "java.lang.String.replaceAll",
            "java.util.regex.Pattern.splitAsStream",
            "java.lang.String.valueOf",
            "java.util.Arrays.fill",
            "java.lang.String.format",
            "java.util.Collections.nCopies",
            "java.util.stream.Stream.generate",
            "java.lang.String.replace",
            "java.util.Arrays.toString",
            "java.util.Scanner.nextInt",
            "java.lang.String.split",
            "java.util.stream.Stream.of",
            "java.lang.String.matches",
            "java.lang.String.substring",
            "java.lang.StringBuilder.reverse",
            "java.lang.Integer.parseInt",
            "java.lang.Math.pow",
            "java.util.Arrays.asList",
            "java.util.Arrays.sort",
            "java.util.List.toArray",
            "java.util.stream.Collectors.counting",
            "java.lang.Class.forName",
            "java.util.Objects.toString",
            "java.lang.System.arraycopy",
            "java.util.stream.IntStream.range",
            "java.sql.DriverManager.getConnection"
        ]
    },
    {
        "query": "Convert String to double in Java",
        "biker_result": [
            "java.lang.Double.toString",
            "java.lang.Double.parseDouble",
            "java.lang.Float.toString",
            "java.lang.String.valueOf",
            "java.lang.Integer.toString",
            "java.math.BigDecimal.doubleValue",
            "java.util.Scanner.nextDouble",
            "java.lang.String.format",
            "java.util.Arrays.toString",
            "java.lang.Float.parseFloat",
            "java.lang.Double.valueOf",
            "java.lang.Character.toString",
            "java.lang.Float.valueOf",
            "java.lang.Integer.parseInt",
            "java.lang.Math.round",
            "java.util.Arrays.deepToString",
            "java.lang.Object.toString",
            "java.lang.Long.parseLong",
            "java.lang.Byte.decode",
            "java.io.PrintStream.printf",
            "java.lang.String.split",
            "java.lang.String.join",
            "java.lang.Number.intValue",
            "java.util.Arrays.asList",
            "org.w3c.dom.Node.getNodeName"
        ]
    },
    {
        "query": "How to round a number to n decimal places in Java",
        "biker_result": [
            "java.lang.Math.round",
            "java.lang.Double.toString",
            "java.math.BigDecimal.round",
            "java.lang.Float.toString",
            "java.lang.Integer.parseInt",
            "java.lang.Double.valueOf",
            "java.math.BigDecimal.divide",
            "java.text.DecimalFormat.format",
            "java.math.BigDecimal.doubleValue",
            "java.lang.Math.floor",
            "java.lang.Float.parseFloat",
            "java.lang.String.valueOf",
            "java.lang.Double.parseDouble",
            "java.lang.String.format",
            "javax.swing.JOptionPane.showMessageDialog"
        ]
    },
    {
        "query": "How do I generate random integers within a specific range in Java?",
        "biker_result": [
            "java.util.Random.nextInt",
            "java.lang.Math.random",
            "java.util.Collections.shuffle",
            "java.util.Random.ints",
            "java.util.Random.nextLong",
            "java.util.Random.nextDouble",
            "java.util.Random.next",
            "java.lang.Math.abs",
            "java.math.BigInteger.probablePrime",
            "java.lang.Integer.toBinaryString",
            "java.util.Arrays.toString",
            "java.lang.Object.toString",
            "java.util.List.subList",
            "java.util.Arrays.asList",
            "java.lang.String.format",
            "java.io.PrintStream.printf",
            "java.util.stream.Collectors.toList",
            "java.util.stream.IntStream.limit",
            "java.sql.Timestamp.toInstant",
            "java.util.Iterator.remove",
            "java.lang.Thread.sleep",
            "java.util.stream.IntStream.distinct",
            "java.util.concurrent.ThreadLocalRandom.current"
        ]
    },
    {
        "query": "What is the simplest way to print a Java array?",
        "biker_result": [
            "java.util.Arrays.deepToString",
            "java.util.Arrays.toString",
            "java.util.Arrays.asList",
            "java.util.Arrays.stream",
            "java.lang.Object.toString",
            "java.util.stream.Collectors.joining",
            "java.lang.Integer.valueOf",
            "java.util.Arrays.sort",
            "java.util.Arrays.binarySearch",
            "java.util.stream.Stream.collect",
            "java.lang.System.arraycopy",
            "java.lang.Class.isInstance",
            "java.lang.String.split",
            "java.util.Collections.shuffle",
            "java.lang.String.join",
            "java.lang.Integer.parseInt",
            "java.util.LinkedList.remove",
            "java.util.Collections.unmodifiableList",
            "java.util.stream.Collectors.toCollection",
            "java.nio.ByteBuffer.put",
            "java.lang.CharSequence.chars",
            "java.util.Iterator.remove",
            "java.util.Arrays.fill",
            "java.lang.Object.clone",
            "java.util.List.indexOf",
            "java.util.Collections.binarySearch",
            "java.util.Collections.reverse",
            "java.lang.CharSequence.codePoints",
            "java.util.stream.Collectors.toList",
            "java.lang.String.concat",
            "java.util.stream.Collectors.toSet",
            "java.util.Scanner.hasNextInt",
            "java.util.regex.Pattern.matches",
            "java.util.Collection.removeIf",
            "java.lang.Character.charCount",
            "java.lang.System.lineSeparator",
            "java.util.Set.contains",
            "java.lang.Integer.compareTo",
            "java.io.File.mkdirs",
            "java.util.regex.Pattern.compile",
            "java.io.File.mkdir"
        ]
    },
    {
        "query": "Converting array to list in Java",
        "biker_result": [
            "java.util.Arrays.toString",
            "java.util.Arrays.deepToString",
            "java.lang.String.valueOf",
            "java.util.Vector.toArray",
            "java.util.Arrays.asList",
            "java.lang.Integer.toString",
            "java.lang.System.arraycopy",
            "java.util.List.toArray",
            "java.util.Arrays.equals",
            "java.util.Collection.toArray",
            "java.util.Map.values",
            "java.lang.Character.toString",
            "java.util.Map.keySet",
            "java.lang.String.join",
            "java.lang.String.split",
            "java.lang.Integer.parseInt",
            "java.lang.Object.clone",
            "java.util.Collections.addAll",
            "java.io.InputStream.available",
            "org.w3c.dom.Node.getNodeName"
        ]
    },
    {
        "query": "How to sort an ArrayList?",
        "biker_result": [
            "java.util.Collections.reverseOrder",
            "java.util.Collections.sort",
            "java.util.Arrays.sort",
            "java.util.Collections.shuffle",
            "java.util.Comparator.comparing",
            "java.lang.Integer.compareTo",
            "java.util.List.subList",
            "java.lang.Integer.compare",
            "java.util.Arrays.asList",
            "java.lang.System.identityHashCode",
            "java.util.ArrayList.add",
            "java.lang.System.arraycopy",
            "java.util.Arrays.copyOf",
            "java.lang.Long.compare",
            "java.time.LocalDateTime.compareTo",
            "java.lang.Class.forName",
            "java.lang.Long.parseLong",
            "java.lang.String.toLowerCase"
        ]
    },
    {
        "query": "How to make a new List in Java",
        "biker_result": [
            "java.util.List.subList",
            "java.util.Collections.unmodifiableList",
            "java.util.Collections.sort",
            "java.util.Map.computeIfAbsent",
            "java.util.Map.values",
            "java.util.Arrays.asList",
            "java.util.Collections.reverse",
            "java.util.Map.entrySet",
            "java.util.Map.keySet",
            "java.lang.System.arraycopy",
            "java.util.Collections.swap",
            "java.util.Arrays.copyOf",
            "java.util.stream.Stream.of",
            "java.util.stream.Stream.reduce",
            "java.util.function.Predicate.and",
            "java.util.stream.Stream.concat",
            "java.text.Collator.getInstance",
            "java.util.Comparator.compare"
        ]
    },
    {
        "query": "How to get the last value of an ArrayList",
        "biker_result": [
            "java.lang.String.charAt",
            "java.util.List.listIterator",
            "java.util.Arrays.fill",
            "java.util.Arrays.toString",
            "java.lang.String.valueOf",
            "java.util.ArrayList.get",
            "java.util.ArrayList.indexOf",
            "java.util.Arrays.deepToString",
            "java.util.List.add",
            "java.lang.Enum.valueOf",
            "java.lang.Object.toString",
            "java.util.List.addAll",
            "java.util.Arrays.stream",
            "java.util.Collections.rotate",
            "java.util.Arrays.asList",
            "java.util.stream.Stream.of",
            "java.util.Collections.sort",
            "java.util.LinkedList.listIterator",
            "java.util.Collections.reverse",
            "java.util.Collections.frequency",
            "java.io.File.listFiles",
            "java.lang.String.toLowerCase",
            "java.util.TreeMap.descendingMap",
            "java.util.TreeMap.tailMap"
        ]
    },
    {
        "query": "Converting 'ArrayList<String> to 'String[]' in Java",
        "biker_result": [
            "java.util.AbstractCollection.toArray",
            "java.util.Arrays.asList",
            "java.lang.String.join",
            "java.lang.Integer.toString",
            "java.util.List.toArray",
            "java.util.Arrays.toString",
            "java.lang.String.valueOf",
            "java.lang.String.format",
            "java.lang.String.split",
            "java.util.Map.computeIfAbsent",
            "java.util.stream.Collectors.joining",
            "java.util.stream.Collectors.groupingBy",
            "java.lang.String.charAt",
            "java.util.List.get",
            "java.util.stream.Collectors.toMap",
            "java.util.Map.getOrDefault",
            "java.util.regex.Pattern.splitAsStream",
            "java.util.List.set",
            "java.util.Collections.sort",
            "java.util.stream.Collectors.toList",
            "java.util.stream.Collectors.toCollection",
            "java.util.List.add",
            "java.util.stream.Collectors.counting",
            "java.util.stream.Stream.distinct",
            "java.util.stream.Stream.of",
            "java.util.stream.Stream.mapToDouble",
            "java.util.HashSet.contains"
        ]
    },
    {
        "query": "How to Convert a Java 8 Stream to an Array?",
        "biker_result": [
            "java.util.Arrays.stream",
            "java.util.stream.IntStream.asLongStream",
            "java.util.stream.Stream.toArray",
            "java.util.stream.IntStream.boxed",
            "java.lang.Integer.valueOf",
            "java.util.stream.Stream.generate",
            "java.util.stream.Stream.of",
            "java.nio.file.Files.lines",
            "java.util.stream.LongStream.mapToObj",
            "java.util.Arrays.toString",
            "java.util.stream.Stream.map",
            "java.util.stream.IntStream.map",
            "java.util.stream.IntStream.mapToLong",
            "java.util.stream.LongStream.boxed",
            "java.lang.System.arraycopy",
            "java.lang.Integer.parseInt",
            "java.lang.Long.toString",
            "java.util.stream.StreamSupport.stream",
            "java.util.stream.Collectors.toMap",
            "java.util.regex.Pattern.splitAsStream",
            "java.util.Vector.toArray",
            "java.lang.String.getBytes",
            "java.util.Random.ints",
            "java.lang.String.valueOf",
            "java.lang.Long.valueOf",
            "java.util.Arrays.asList",
            "java.lang.Short.valueOf",
            "java.util.stream.Stream.forEach",
            "java.lang.Double.parseDouble",
            "java.lang.Integer.decode",
            "java.util.stream.IntStream.range",
            "java.util.stream.Collectors.toList",
            "java.util.Map.Entry.comparingByValue",
            "java.util.Comparator.comparing",
            "java.util.stream.Collectors.toSet",
            "java.util.function.Function.identity",
            "java.util.NavigableSet.descendingIterator",
            "java.util.NavigableSet.descendingSet",
            "java.io.File.listFiles",
            "java.util.Iterator.forEachRemaining",
            "java.lang.System.lineSeparator",
            "java.util.Collection.removeIf",
            "java.util.regex.Pattern.compile"
        ]
    },
    {
        "query": "How do I efficiently iterate over each entry in a Java Map?",
        "biker_result": [
            "java.util.HashMap.values",
            "java.util.Map.entrySet",
            "java.util.List.iterator",
            "java.util.List.listIterator",
            "java.util.HashMap.keySet",
            "java.util.HashMap.entrySet",
            "java.util.Map.keySet",
            "java.util.Map.values",
            "java.util.Map.Entry.getValue",
            "java.util.Iterator.remove",
            "java.util.Map.Entry.getKey",
            "java.io.File.list",
            "java.nio.file.Files.walk",
            "java.util.Arrays.sort",
            "java.util.List.subList",
            "java.util.ArrayList.set",
            "java.util.Arrays.asList",
            "java.util.ArrayList.retainAll",
            "java.util.Arrays.binarySearch",
            "java.util.stream.Stream.map",
            "java.time.temporal.WeekFields.weekOfWeekBasedYear",
            "java.lang.String.join",
            "java.time.temporal.WeekFields.weekBasedYear",
            "java.lang.reflect.Field.get",
            "java.time.temporal.TemporalField.rangeRefinedBy",
            "java.lang.String.contains",
            "java.time.LocalDate.plusWeeks"
        ]
    },
    {
        "query": "How can I concatenate two arrays in Java?",
        "biker_result": [
            "java.util.Arrays.equals",
            "java.util.stream.Stream.concat",
            "java.util.Arrays.sort",
            "java.lang.String.valueOf",
            "java.lang.System.arraycopy",
            "java.util.Arrays.toString",
            "java.util.Arrays.deepToString",
            "java.util.Arrays.deepEquals",
            "java.util.regex.Pattern.quote",
            "java.util.Collections.sort",
            "java.util.List.subList",
            "java.lang.Integer.toString",
            "java.lang.Double.toString",
            "java.lang.String.concat",
            "java.lang.String.charAt",
            "java.util.Collections.shuffle",
            "java.lang.String.split",
            "java.util.Arrays.asList",
            "java.util.regex.Pattern.split",
            "java.text.MessageFormat.format",
            "java.lang.String.format",
            "java.lang.Float.valueOf",
            "java.lang.Byte.parseByte",
            "java.lang.String.contains",
            "java.lang.Short.parseShort",
            "java.lang.Float.parseFloat",
            "java.lang.Object.equals",
            "java.util.Random.nextInt",
            "java.lang.String.matches",
            "java.lang.String.join",
            "java.lang.Long.parseLong",
            "java.lang.Math.floor"
        ]
    },
    {
        "query": "How do I remove repeated elements from ArrayList?",
        "biker_result": [
            "java.util.List.remove",
            "java.util.ArrayList.remove",
            "java.util.ArrayList.removeAll",
            "java.util.Iterator.remove",
            "java.util.Map.entrySet",
            "java.util.Collection.remove",
            "java.util.ArrayList.removeRange",
            "java.util.List.toArray",
            "java.util.Set.removeAll",
            "java.util.Arrays.asList",
            "java.util.Collections.unmodifiableList",
            "java.lang.System.arraycopy",
            "java.util.Arrays.sort",
            "java.lang.Object.hashCode",
            "java.util.Set.iterator",
            "java.util.Collection.contains",
            "java.util.Collections.frequency",
            "java.util.Map.containsValue",
            "java.util.LinkedList.contains",
            "java.util.Collections.singleton",
            "java.lang.Object.equals",
            "java.util.Map.containsKey"
        ]
    },
    {
        "query": "How to filter a Java Collection (based on predicate)?",
        "biker_result": [
            "java.util.Collection.removeIf",
            "java.util.function.Predicate.and",
            "java.util.Collection.retainAll",
            "java.util.Collections.emptyList",
            "java.util.Collections.sort",
            "java.util.stream.Stream.filter",
            "java.util.List.subList",
            "java.util.stream.Collectors.toCollection",
            "java.util.stream.Stream.reduce",
            "java.util.Map.computeIfAbsent",
            "java.util.Map.get",
            "java.util.List.contains",
            "java.util.List.remove",
            "java.util.Collections.synchronizedMap",
            "java.util.Arrays.binarySearch",
            "java.util.Arrays.sort",
            "java.util.Arrays.toString",
            "java.util.Comparator.comparing",
            "java.util.Comparator.comparingInt",
            "java.util.HashSet.contains",
            "java.util.Collections.reverse",
            "java.lang.System.arraycopy",
            "java.util.TreeSet.subSet"
        ]
    },
    {
        "query": "How do I check if a file exists in Java?",
        "biker_result": [
            "java.io.File.exists",
            "java.nio.file.Files.notExists",
            "java.nio.file.Files.write",
            "java.nio.file.Files.newBufferedWriter",
            "java.nio.file.Files.exists",
            "java.nio.file.Files.isDirectory",
            "java.nio.file.Files.createDirectories",
            "java.io.File.renameTo",
            "java.io.File.listFiles",
            "java.nio.file.Files.walk",
            "java.lang.Class.forName",
            "java.nio.file.Paths.get",
            "java.nio.file.Path.toFile",
            "java.lang.Class.getResourceAsStream",
            "java.io.File.canRead",
            "java.nio.file.Files.readAllLines",
            "java.io.File.lastModified",
            "java.nio.file.FileSystem.getPathMatcher",
            "java.lang.Class.getMethod",
            "java.io.File.getParentFile",
            "java.lang.String.contains",
            "javax.swing.JOptionPane.showInputDialog",
            "java.lang.ClassLoader.getResourceAsStream",
            "java.lang.ClassLoader.getSystemResourceAsStream",
            "java.util.EnumSet.allOf",
            "java.util.Map.containsKey",
            "java.util.Arrays.asList",
            "java.lang.String.replaceAll",
            "java.util.List.contains",
            "java.sql.ResultSet.next",
            "org.w3c.dom.Element.getElementsByTagName",
            "java.nio.charset.Charset.forName",
            "java.lang.Integer.parseInt",
            "java.util.Hashtable.size",
            "java.net.URL.toString",
            "org.w3c.dom.NodeList.getLength"
        ]
    },
    {
        "query": "How to append text to an existing file in Java",
        "biker_result": [
            "java.nio.file.Files.newBufferedWriter",
            "java.nio.file.Files.write",
            "java.nio.file.Files.newOutputStream",
            "java.nio.channels.FileChannel.open",
            "java.nio.file.Files.newByteChannel",
            "java.nio.file.Files.copy",
            "java.nio.file.Files.move",
            "org.w3c.dom.Document.getElementById",
            "java.awt.Desktop.open",
            "java.util.List.add",
            "java.io.File.renameTo",
            "java.nio.file.Files.readAllLines",
            "java.nio.file.Files.lines",
            "java.lang.String.indexOf",
            "java.lang.String.split",
            "java.lang.Integer.valueOf",
            "java.util.Base64.Encoder.wrap",
            "java.io.InputStream.available",
            "java.util.List.get",
            "java.lang.String.format",
            "java.util.List.set",
            "java.lang.System.getProperty",
            "java.lang.System.lineSeparator",
            "java.lang.Runtime.getRuntime",
            "java.lang.Integer.toHexString",
            "java.lang.System.setErr"
        ]
    },
    {
        "query": "How to get the current working directory in Java?",
        "biker_result": [
            "java.io.File.list",
            "java.io.File.mkdirs",
            "java.lang.Runtime.exec",
            "java.nio.file.Files.copy",
            "java.io.File.mkdir",
            "java.nio.file.Files.createDirectories",
            "java.io.File.getCanonicalPath",
            "java.nio.file.Files.createTempDirectory",
            "java.io.File.listFiles",
            "java.nio.file.Files.newDirectoryStream",
            "java.nio.file.Files.createDirectory",
            "java.nio.file.Files.walk",
            "java.nio.file.Files.walkFileTree",
            "java.lang.Class.getPackage",
            "java.io.File.createTempFile",
            "java.nio.file.Paths.get",
            "java.security.CodeSource.getLocation",
            "java.io.File.getName",
            "java.io.File.length",
            "java.lang.Runtime.getRuntime",
            "java.time.Instant.now",
            "java.lang.System.getProperty",
            "java.util.Calendar.getInstance",
            "java.time.LocalDateTime.now",
            "java.io.File.lastModified",
            "java.time.ZonedDateTime.now",
            "java.lang.Class.getProtectionDomain",
            "java.lang.ClassLoader.getResourceAsStream",
            "java.security.ProtectionDomain.getCodeSource",
            "java.lang.System.setProperty",
            "java.util.Date.getHours",
            "javax.imageio.ImageIO.write",
            "java.lang.Class.isInstance",
            "java.lang.System.currentTimeMillis",
            "java.io.File.getCanonicalFile",
            "java.lang.String.replaceAll",
            "java.lang.String.lastIndexOf"
        ]
    },
    {
        "query": "How to create a temporary directory/folder in Java?",
        "biker_result": [
            "java.io.File.createTempFile",
            "java.io.File.mkdir",
            "java.io.File.mkdirs",
            "java.nio.file.Files.createDirectories",
            "java.nio.file.Files.createDirectory",
            "java.nio.file.Files.copy",
            "java.nio.file.Files.deleteIfExists",
            "java.nio.file.Paths.get",
            "java.io.File.delete",
            "java.nio.file.Files.newDirectoryStream",
            "java.io.File.getAbsolutePath",
            "java.io.File.listFiles",
            "java.nio.file.Files.walkFileTree",
            "java.nio.file.Path.resolve",
            "java.nio.file.Files.write",
            "java.io.File.createNewFile",
            "java.nio.file.Files.newBufferedWriter",
            "java.lang.Runtime.exec",
            "java.nio.file.Files.walk",
            "java.nio.file.Files.isWritable",
            "java.util.Arrays.sort",
            "java.lang.ClassLoader.getResourceAsStream",
            "java.security.AccessController.checkPermission"
        ]
    },
    {
        "query": "How to really read text file from classpath in Java",
        "biker_result": [
            "java.nio.file.Files.readAllLines",
            "java.nio.file.Files.lines",
            "java.lang.ClassLoader.getSystemResourceAsStream",
            "java.io.FileInputStream.read",
            "java.lang.ClassLoader.getResource",
            "java.nio.file.Files.walk",
            "java.lang.Class.getResourceAsStream",
            "java.awt.Desktop.open",
            "java.io.File.listFiles",
            "java.nio.file.Files.walkFileTree",
            "java.io.BufferedReader.readLine",
            "java.io.InputStream.read",
            "java.util.Base64.Encoder.wrap",
            "java.util.Scanner.nextInt",
            "java.util.Scanner.nextLong",
            "java.lang.Integer.valueOf",
            "java.lang.Integer.parseInt",
            "java.lang.String.split",
            "java.util.List.add",
            "java.util.List.toArray",
            "java.lang.System.getProperty",
            "java.lang.String.format",
            "java.io.File.compareTo",
            "java.util.Date.toString",
            "java.lang.String.indexOf",
            "java.net.URL.toString",
            "java.lang.Runtime.getRuntime",
            "java.util.Collections.sort"
        ]
    },
    {
        "query": "File to byte[] in Java",
        "biker_result": [
            "java.nio.file.Files.write",
            "java.lang.String.toCharArray",
            "java.util.Arrays.toString",
            "java.lang.String.getBytes",
            "java.lang.Byte.parseByte",
            "java.io.File.list",
            "java.nio.file.Files.readAllBytes",
            "java.nio.ByteBuffer.wrap",
            "java.io.OutputStream.write",
            "java.lang.Class.getName",
            "java.math.BigInteger.toString",
            "java.io.File.listFiles",
            "java.lang.Integer.parseInt",
            "java.io.PrintStream.println",
            "java.io.PrintWriter.println",
            "java.util.Arrays.equals",
            "java.lang.Integer.toString",
            "java.sql.Blob.setBinaryStream",
            "java.lang.Byte.decode",
            "java.nio.file.Paths.get",
            "java.lang.Object.toString",
            "java.lang.String.format",
            "java.util.Arrays.deepEquals",
            "java.lang.Object.hashCode",
            "java.lang.String.split",
            "java.io.PrintStream.printf",
            "java.nio.charset.CharsetEncoder.onUnmappableCharacter",
            "java.lang.Object.equals"
        ]
    },
    {
        "query": "How can I lock a file using java",
        "biker_result": [
            "java.nio.channels.FileChannel.tryLock",
            "java.io.File.createNewFile",
            "java.util.concurrent.locks.Lock.tryLock",
            "java.lang.Object.notifyAll",
            "java.lang.Object.notify",
            "java.nio.file.Files.deleteIfExists",
            "java.util.concurrent.locks.ReentrantLock.isLocked",
            "java.util.concurrent.locks.ReentrantLock.lockInterruptibly",
            "java.nio.file.Files.newBufferedWriter",
            "java.lang.Object.wait",
            "java.nio.file.Files.write",
            "java.io.File.delete",
            "java.awt.Desktop.open",
            "java.lang.Class.getResourceAsStream",
            "java.nio.file.Files.walkFileTree",
            "java.io.RandomAccessFile.getChannel",
            "java.lang.Thread.start",
            "java.util.concurrent.locks.LockSupport.unpark",
            "java.util.concurrent.locks.LockSupport.park",
            "java.lang.Thread.run",
            "java.util.Properties.load",
            "java.lang.Runtime.getRuntime",
            "java.lang.ClassLoader.getSystemResourceAsStream",
            "java.net.URLConnection.getInputStream",
            "java.io.File.mkdir",
            "java.util.Arrays.sort",
            "java.lang.ClassLoader.getResourceAsStream",
            "java.util.concurrent.ConcurrentMap.putIfAbsent",
            "java.lang.System.getProperty",
            "java.net.URL.toString"
        ]
    },
    {
        "query": "How can I read a large text file line by line using Java?",
        "biker_result": [
            "java.io.Console.readLine",
            "java.nio.file.Files.lines",
            "java.nio.file.Files.readAllLines",
            "java.io.File.createNewFile",
            "java.lang.String.split",
            "java.lang.Math.random",
            "java.util.List.add",
            "java.io.Reader.skip",
            "java.lang.System.lineSeparator",
            "java.lang.Integer.valueOf",
            "java.lang.Integer.parseInt",
            "java.lang.System.getProperty",
            "java.lang.String.startsWith"
        ]
    },
    {
        "query": "How to get a file's Media Type (MIME type)?",
        "biker_result": [
            "java.nio.file.Files.probeContentType",
            "java.nio.file.spi.FileTypeDetector.probeContentType",
            "javax.sound.midi.MidiSystem.getMidiFileFormat",
            "java.net.URLConnection.getFileNameMap",
            "java.lang.Class.isInstance",
            "java.lang.reflect.ParameterizedType.getRawType",
            "java.io.File.listFiles",
            "java.lang.Class.getName",
            "java.io.PrintWriter.println",
            "java.lang.Class.isAssignableFrom",
            "java.lang.Class.getResourceAsStream",
            "java.lang.Character.getName",
            "java.lang.Class.getTypeParameters",
            "java.io.File.getParent",
            "javax.activation.FileTypeMap.getDefaultFileTypeMap",
            "java.lang.Object.getClass",
            "java.io.FileOutputStream.write",
            "java.lang.Character.getType",
            "java.lang.ClassLoader.getSystemResourceAsStream",
            "java.util.Collections.unmodifiableList",
            "java.lang.System.getProperty",
            "java.io.PrintWriter.write"
        ]
    },
    {
        "query": "Connect Java to a MySQL database",
        "biker_result": [
            "java.sql.DriverManager.getConnection",
            "javax.sql.DataSource.getConnection",
            "java.sql.Connection.setCatalog",
            "java.lang.Class.forName",
            "java.lang.Runtime.exec",
            "java.util.Arrays.toString"
        ]
    },
    {
        "query": "How to get the insert ID in JDBC?",
        "biker_result": [
            "java.sql.Connection.prepareStatement",
            "java.sql.Statement.getGeneratedKeys",
            "java.sql.PreparedStatement.setTime",
            "java.sql.Statement.executeUpdate",
            "java.sql.PreparedStatement.setTimestamp",
            "java.sql.DatabaseMetaData.getUserName",
            "java.sql.Connection.getSchema",
            "java.sql.PreparedStatement.setObject",
            "java.sql.PreparedStatement.setDate",
            "java.sql.Connection.getMetaData",
            "java.sql.Statement.executeBatch",
            "java.sql.Connection.getCatalog",
            "java.sql.DatabaseMetaData.getTables",
            "java.sql.Statement.executeQuery",
            "java.sql.DatabaseMetaData.getColumns",
            "java.sql.Connection.commit",
            "java.sql.Connection.abort"
        ]
    },
    {
        "query": "How to read XML using XPath in Java",
        "biker_result": [
            "javax.xml.stream.events.StartElement.getNamespaceContext",
            "javax.xml.bind.JAXBContext.newInstance",
            "javax.xml.stream.XMLStreamReader.getNamespaceContext",
            "org.w3c.dom.Element.getElementsByTagName",
            "java.lang.Class.getResourceAsStream",
            "org.w3c.dom.Node.getAttributes",
            "org.w3c.dom.NodeList.getLength"
        ]
    },
    {
        "query": "Java 256-bit AES Password-Based Encryption",
        "biker_result": [
            "javax.crypto.Cipher.init",
            "javax.crypto.Cipher.doFinal",
            "java.util.Base64.getDecoder",
            "java.lang.String.getBytes",
            "javax.crypto.SecretKeyFactory.getInstance",
            "java.lang.Object.toString",
            "javax.crypto.Cipher.getInstance",
            "java.io.DataInputStream.readFully",
            "java.io.InputStream.available",
            "java.security.Security.addProvider",
            "org.omg.CORBA.portable.InputStream.read"
        ]
    },
    {
        "query": "Decode Base64 data in Java",
        "biker_result": [
            "java.util.Base64.getMimeDecoder",
            "java.util.Base64.getDecoder",
            "java.util.Base64.getEncoder",
            "java.util.Base64.getMimeEncoder",
            "java.net.URLDecoder.decode",
            "java.lang.String.getBytes",
            "javax.xml.bind.DatatypeConverter.parseBase64Binary",
            "java.security.cert.CertificateFactory.generateCertificate",
            "java.io.FileOutputStream.write",
            "org.omg.CORBA.portable.InputStream.read",
            "java.net.URL.openStream",
            "javax.sound.sampled.AudioSystem.getClip",
            "javax.sound.sampled.DataLine.start",
            "java.io.PrintStream.println",
            "java.util.HashMap.get"
        ]
    },
    {
        "query": "How can I hash a password in Java?",
        "biker_result": [
            "java.lang.Object.hashCode",
            "java.lang.Double.hashCode",
            "javax.crypto.SecretKeyFactory.generateSecret",
            "java.util.Arrays.hashCode",
            "java.lang.Object.toString",
            "java.security.MessageDigest.getInstance",
            "java.util.Arrays.equals",
            "java.lang.String.hashCode",
            "java.lang.String.getBytes",
            "java.math.BigInteger.toString",
            "java.util.Arrays.sort",
            "java.lang.Object.equals",
            "java.util.Arrays.toString",
            "java.lang.Integer.parseInt",
            "javax.naming.ldap.LdapContext.reconnect",
            "java.lang.Enum.valueOf",
            "java.util.Hashtable.entrySet",
            "java.util.Map.entrySet",
            "java.lang.Integer.toString",
            "java.io.InputStream.available",
            "java.lang.Double.valueOf",
            "java.lang.String.valueOf",
            "java.util.prefs.Preferences.userNodeForPackage",
            "java.lang.Double.doubleToLongBits",
            "java.lang.String.format"
        ]
    },
    {
        "query": "How can I generate an MD5 hash in Java?",
        "biker_result": [
            "java.lang.Object.hashCode",
            "javax.crypto.SecretKeyFactory.generateSecret",
            "java.security.MessageDigest.getInstance",
            "java.util.Collection.hashCode",
            "java.util.Arrays.hashCode",
            "java.util.Objects.hashCode",
            "java.lang.String.getBytes",
            "java.math.BigInteger.toString",
            "javax.xml.bind.DatatypeConverter.parseHexBinary",
            "java.util.Arrays.equals",
            "java.util.Collections.sort",
            "javax.crypto.Cipher.getInstance",
            "java.net.URLEncoder.encode",
            "java.util.Hashtable.entrySet",
            "java.util.Map.entrySet",
            "java.io.InputStream.read",
            "java.lang.String.format",
            "java.io.InputStream.available",
            "javax.swing.text.JTextComponent.read",
            "java.security.Security.addProvider",
            "org.omg.CORBA.portable.InputStream.read"
        ]
    },
    {
        "query": "Get current stack trace in Java",
        "biker_result": [
            "java.lang.Thread.dumpStack",
            "java.lang.Throwable.fillInStackTrace",
            "java.lang.Thread.getAllStackTraces",
            "java.lang.Throwable.printStackTrace",
            "java.lang.Throwable.getStackTrace",
            "java.lang.Thread.getStackTrace",
            "java.lang.Thread.currentThread",
            "java.lang.StackTraceElement.getFileName",
            "java.lang.Runtime.traceMethodCalls",
            "java.lang.System.gc",
            "java.util.logging.SimpleFormatter.format",
            "java.lang.Class.forName",
            "java.util.concurrent.locks.Condition.await",
            "java.lang.Throwable.getSuppressed",
            "java.util.Collections.synchronizedList",
            "java.util.List.subList",
            "java.lang.System.setErr"
        ]
    },
    {
        "query": "How do you kill a Thread in Java?",
        "biker_result": [
            "java.lang.Process.destroy",
            "java.lang.Thread.stop",
            "java.lang.Thread.join",
            "java.lang.Thread.suspend",
            "java.util.concurrent.ExecutorService.shutdownNow",
            "java.util.concurrent.ThreadPoolExecutor.shutdownNow",
            "java.lang.Thread.isInterrupted",
            "java.lang.Thread.interrupt",
            "java.lang.Thread.resume",
            "java.lang.Object.wait",
            "java.lang.Thread.destroy",
            "java.lang.Thread.interrupted",
            "java.lang.Thread.sleep",
            "java.lang.Thread.currentThread",
            "java.util.concurrent.ExecutorService.shutdown",
            "java.net.DatagramSocket.close",
            "javax.swing.SwingUtilities.invokeLater",
            "java.lang.System.exit",
            "java.net.ServerSocket.close",
            "java.lang.Runtime.runFinalizersOnExit",
            "java.net.DatagramSocket.setSoTimeout",
            "java.lang.Runtime.exec",
            "java.lang.ProcessBuilder.start",
            "java.net.DatagramSocket.receive",
            "java.lang.Runtime.getRuntime",
            "java.lang.System.currentTimeMillis",
            "java.lang.System.setOut"
        ]
    },
    {
        "query": "How do I time a method's execution in Java?",
        "biker_result": [
            "java.lang.System.nanoTime",
            "java.lang.Thread.start",
            "java.lang.reflect.Method.getModifiers",
            "java.lang.Runtime.exec",
            "java.lang.Class.getMethod",
            "java.lang.Thread.join",
            "java.lang.Thread.stop",
            "java.lang.reflect.Method.invoke",
            "java.lang.Thread.interrupt",
            "java.lang.Thread.currentThread",
            "java.lang.System.currentTimeMillis",
            "java.lang.Runtime.getRuntime",
            "java.time.LocalDate.now",
            "java.util.concurrent.Future.get",
            "java.awt.Container.addImpl",
            "javax.sound.midi.MidiSystem.getMidiFileFormat",
            "java.awt.Desktop.getDesktop",
            "java.lang.Math.log",
            "java.lang.reflect.Modifier.isPublic",
            "javax.sound.midi.MidiSystem.getMidiFileTypes",
            "java.time.LocalDate.toString"
        ]
    },
    {
        "query": "How to timeout a thread",
        "biker_result": [
            "java.lang.Thread.join",
            "java.lang.Object.wait",
            "java.lang.Thread.interrupt",
            "java.net.ServerSocket.setSoTimeout",
            "java.net.Socket.setSoTimeout",
            "java.lang.Thread.stop",
            "java.lang.Thread.sleep",
            "java.util.concurrent.ThreadPoolExecutor.shutdownNow",
            "java.lang.Thread.isInterrupted",
            "java.util.concurrent.Future.cancel",
            "java.lang.Thread.currentThread",
            "java.lang.Object.notify",
            "java.lang.Thread.suspend",
            "java.util.concurrent.Executors.newSingleThreadExecutor",
            "java.lang.Thread.interrupted",
            "java.util.concurrent.ScheduledExecutorService.scheduleWithFixedDelay",
            "java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate",
            "java.lang.Thread.getState",
            "java.lang.Thread.resume",
            "java.sql.Connection.close",
            "java.lang.System.nanoTime",
            "javax.swing.SwingUtilities.invokeLater",
            "java.util.concurrent.ExecutorService.submit",
            "java.net.ServerSocket.accept",
            "java.util.concurrent.Future.get",
            "java.lang.System.currentTimeMillis",
            "java.lang.System.exit",
            "java.io.BufferedReader.ready"
        ]
    },
    {
        "query": "How to set a Timer in Java?",
        "biker_result": [
            "java.util.Timer.scheduleAtFixedRate",
            "java.lang.Thread.sleep",
            "javax.swing.SwingUtilities.invokeLater",
            "java.lang.Thread.join",
            "java.util.Calendar.getInstance",
            "java.lang.System.nanoTime",
            "java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate",
            "javax.swing.SwingUtilities.invokeAndWait",
            "java.util.concurrent.ScheduledExecutorService.scheduleWithFixedDelay",
            "java.lang.System.currentTimeMillis",
            "java.lang.Math.random",
            "java.lang.Object.hashCode",
            "java.awt.Container.setFocusTraversalPolicy",
            "java.util.Collections.shuffle",
            "java.awt.Toolkit.createImage",
            "java.lang.Object.equals",
            "java.util.Collections.sort",
            "java.util.Arrays.sort"
        ]
    },
    {
        "query": "Get a list of all threads currently running in Java",
        "biker_result": [
            "java.lang.Thread.currentThread",
            "java.lang.Thread.start",
            "java.lang.Thread.stop",
            "java.lang.Thread.activeCount",
            "java.lang.Thread.sleep",
            "java.lang.Thread.interrupt",
            "java.lang.management.ManagementFactory.getThreadMXBean",
            "java.lang.Thread.join",
            "java.util.concurrent.Executors.newScheduledThreadPool",
            "java.lang.Thread.getStackTrace",
            "java.util.concurrent.Executors.newCachedThreadPool",
            "java.lang.Thread.suspend",
            "java.lang.Thread.interrupted",
            "java.lang.Thread.run",
            "java.util.concurrent.Executors.newSingleThreadScheduledExecutor",
            "java.lang.System.nanoTime",
            "java.util.Collections.synchronizedMap",
            "javax.swing.SwingUtilities.invokeAndWait",
            "java.util.concurrent.ScheduledExecutorService.schedule",
            "java.util.stream.Stream.forEach",
            "java.lang.Thread.yield",
            "java.lang.reflect.Method.invoke",
            "java.util.AbstractCollection.toString",
            "java.lang.invoke.MethodHandles.lookup",
            "java.lang.Runtime.runFinalizersOnExit",
            "java.lang.Throwable.getStackTrace",
            "java.util.concurrent.Future.get",
            "java.lang.Thread.resume",
            "java.lang.System.getProperty",
            "java.lang.Object.toString",
            "java.lang.Class.isInterface",
            "java.io.File.getCanonicalPath",
            "java.lang.Class.getProtectionDomain",
            "java.security.ProtectionDomain.getCodeSource",
            "java.security.CodeSource.getLocation"
        ]
    },
    {
        "query": "How to get the current date/time in Java",
        "biker_result": [
            "java.util.Calendar.getInstance",
            "java.time.LocalDate.now",
            "java.time.ZonedDateTime.now",
            "java.time.Instant.now",
            "java.util.TimeZone.getTimeZone",
            "java.time.LocalTime.now",
            "java.util.TimeZone.getDefault",
            "java.util.GregorianCalendar.setGregorianChange",
            "java.lang.System.currentTimeMillis",
            "java.time.ZonedDateTime.of",
            "java.util.Date.toString",
            "java.time.LocalDateTime.from",
            "java.util.Date.getHours",
            "java.util.Calendar.getTime",
            "java.util.Date.before",
            "java.util.Date.setTime",
            "java.util.Calendar.set",
            "java.time.temporal.TemporalAdjusters.firstDayOfMonth",
            "java.time.LocalDate.toString",
            "java.util.Date.getTime",
            "java.util.Calendar.after",
            "java.util.Calendar.before",
            "java.text.DateFormat.setLenient",
            "java.util.Locale.getDefault",
            "java.util.TimeZone.setDefault",
            "java.lang.String.format",
            "java.time.format.DateTimeFormatter.withLocale",
            "java.lang.Object.toString"
        ]
    },
    {
        "query": "How to compare dates in Java?",
        "biker_result": [
            "java.util.Date.compareTo",
            "java.sql.Timestamp.compareTo",
            "java.time.LocalDate.compareTo",
            "java.time.LocalDate.equals",
            "java.util.Date.getTime",
            "java.util.Calendar.getTime",
            "java.util.Calendar.before",
            "java.util.Calendar.after",
            "java.text.DateFormat.parse",
            "java.time.LocalDate.now",
            "java.lang.String.equals",
            "java.util.TimeZone.getRawOffset",
            "java.time.ZoneId.systemDefault",
            "java.util.Collections.sort",
            "java.lang.System.nanoTime",
            "java.lang.String.intern",
            "java.text.DateFormat.setLenient",
            "java.util.Arrays.sort",
            "java.util.Arrays.equals",
            "java.lang.System.currentTimeMillis",
            "java.lang.Math.abs",
            "java.lang.Object.equals",
            "java.time.DayOfWeek.getDisplayName",
            "java.util.Arrays.deepEquals",
            "java.util.Objects.equals",
            "java.lang.Enum.toString",
            "java.util.Locale.getDefault"
        ]
    },
    {
        "query": "Convert Date to String",
        "biker_result": [
            "java.time.LocalDate.parse",
            "java.text.DateFormat.format",
            "java.text.DateFormat.parse",
            "java.time.Instant.toString",
            "java.time.ZoneId.systemDefault",
            "java.time.ZonedDateTime.withNano",
            "java.text.DateFormat.getDateInstance",
            "java.time.format.DateTimeFormatter.ofLocalizedDate",
            "java.time.ZonedDateTime.toString",
            "java.time.Instant.ofEpochMilli",
            "java.time.LocalDate.now",
            "java.util.Date.from",
            "java.util.Date.getYear",
            "java.lang.Long.parseLong",
            "java.util.regex.Pattern.matcher"
        ]
    },
    {
        "query": "How can I increment a date by one day in Java?",
        "biker_result": [
            "java.util.GregorianCalendar.getWeekYear",
            "java.time.LocalDate.of",
            "java.util.Calendar.add",
            "java.time.YearMonth.lengthOfMonth",
            "java.time.Year.atDay",
            "java.util.Date.setDate",
            "java.time.LocalDate.minusDays",
            "java.time.temporal.TemporalAdjusters.nextOrSame",
            "java.time.LocalDate.plusDays",
            "java.util.Calendar.set",
            "java.util.Calendar.getTime",
            "java.time.LocalDate.getDayOfYear",
            "java.util.Calendar.setFirstDayOfWeek",
            "java.time.LocalDateTime.ofInstant",
            "java.time.LocalDate.withDayOfMonth",
            "java.time.LocalDate.now",
            "java.time.YearMonth.parse",
            "java.sql.Timestamp.getTime",
            "java.util.Calendar.getTimeInMillis",
            "java.time.LocalDate.parse",
            "java.time.LocalDateTime.from",
            "java.time.ZoneId.of",
            "java.time.LocalDate.isBefore",
            "java.time.Year.of",
            "java.util.Calendar.setTime",
            "java.util.Calendar.get",
            "java.time.Year.now",
            "java.lang.System.currentTimeMillis",
            "java.time.Instant.ofEpochMilli",
            "java.time.ZoneId.systemDefault",
            "java.time.temporal.TemporalField.getFrom",
            "java.util.Locale.getDefault"
        ]
    },
    {
        "query": "How do I invoke a Java method when given the method name as a string?",
        "biker_result": [
            "java.lang.reflect.Method.invoke",
            "java.lang.Class.getMethod",
            "java.lang.Class.getDeclaredMethod",
            "java.lang.Class.forName",
            "java.lang.Class.getInterfaces",
            "java.lang.Class.isAssignableFrom",
            "java.util.Objects.requireNonNull",
            "java.lang.Class.isInstance",
            "java.awt.Container.addImpl",
            "java.lang.Thread.currentThread",
            "java.util.ServiceLoader.iterator",
            "java.lang.String.toCharArray"
        ]
    },
    {
        "query": "Getting the name of the currently executing method",
        "biker_result": [
            "java.lang.Thread.currentThread",
            "java.lang.Class.forName",
            "java.lang.Thread.start",
            "java.lang.Class.getDeclaredMethods",
            "java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager",
            "java.lang.Class.getDeclaredMethod",
            "java.lang.SecurityManager.getThreadGroup",
            "java.lang.StackTraceElement.getMethodName",
            "java.lang.InheritableThreadLocal.childValue",
            "java.lang.Class.getMethod",
            "java.lang.reflect.Method.invoke",
            "java.lang.Class.getSimpleName",
            "java.lang.Class.getField",
            "java.lang.invoke.MethodHandles.lookup",
            "java.lang.Thread.stop",
            "java.lang.ThreadGroup.getParent",
            "java.lang.Thread.interrupt",
            "java.lang.Class.isInstance",
            "java.lang.Thread.getStackTrace",
            "java.lang.reflect.Proxy.getInvocationHandler",
            "java.lang.ThreadGroup.enumerate",
            "javax.lang.model.util.Types.directSupertypes",
            "java.lang.Class.isAssignableFrom",
            "java.lang.System.getSecurityManager",
            "java.lang.Object.getClass",
            "java.util.Objects.requireNonNull",
            "java.util.Collections.synchronizedMap"
        ]
    },
    {
        "query": "How can a Java program get its own process ID?",
        "biker_result": [
            "java.lang.Runtime.exec",
            "java.lang.Thread.getId",
            "java.lang.ProcessBuilder.start",
            "java.lang.management.ManagementFactory.getThreadMXBean",
            "java.lang.Thread.currentThread",
            "java.lang.Object.hashCode",
            "java.lang.Runtime.getRuntime",
            "java.lang.System.getProperties",
            "java.lang.Thread.activeCount",
            "java.util.concurrent.ThreadPoolExecutor.setCorePoolSize",
            "java.lang.System.exit",
            "java.lang.Thread.setName",
            "java.lang.System.getProperty",
            "java.util.ListIterator.add",
            "java.lang.Thread.sleep",
            "java.lang.System.identityHashCode",
            "javax.lang.model.util.Types.directSupertypes",
            "javax.tools.Tool.run",
            "java.util.Iterator.remove",
            "java.lang.reflect.Method.getAnnotation"
        ]
    },
    {
        "query": "Setting the default Java character encoding",
        "biker_result": [
            "java.lang.String.getBytes",
            "java.util.Base64.getEncoder",
            "java.nio.charset.Charset.defaultCharset",
            "java.lang.String.charAt",
            "java.nio.file.Files.write",
            "java.lang.Character.isLowSurrogate",
            "java.lang.Character.isHighSurrogate",
            "java.lang.String.indexOf",
            "java.nio.file.Files.newBufferedReader",
            "java.nio.charset.Charset.availableCharsets",
            "java.lang.Character.isLetter",
            "java.nio.charset.Charset.isSupported",
            "java.lang.String.substring",
            "java.lang.Character.codePointAt",
            "java.util.Arrays.copyOf",
            "java.io.Reader.read",
            "java.lang.System.setProperty",
            "java.util.Optional.of",
            "java.lang.System.getProperty",
            "java.lang.String.split",
            "java.nio.ByteBuffer.array",
            "javax.xml.parsers.DocumentBuilder.parse"
        ]
    },
    {
        "query": "How to add white space in a Swing GUI?",
        "biker_result": [
            "java.awt.FlowLayout.setHgap",
            "java.awt.FlowLayout.setVgap",
            "java.awt.BorderLayout.setHgap",
            "java.awt.BorderLayout.setVgap",
            "java.awt.GridLayout.setHgap",
            "java.awt.GridLayout.setVgap",
            "java.awt.FlowLayout.getHgap",
            "java.awt.FlowLayout.getVgap",
            "javax.swing.Box.createHorizontalStrut",
            "java.awt.GridLayout.getHgap",
            "java.awt.GridLayout.getVgap",
            "javax.swing.Box.createVerticalStrut",
            "java.awt.BorderLayout.getHgap",
            "java.awt.BorderLayout.getVgap",
            "javax.swing.Box.createVerticalGlue",
            "javax.swing.Box.createHorizontalGlue",
            "javax.swing.BorderFactory.createEmptyBorder",
            "javax.swing.Box.createRigidArea",
            "javax.swing.JMenu.addSeparator",
            "javax.swing.SwingUtilities.invokeLater",
            "javax.swing.AbstractButton.setContentAreaFilled",
            "javax.swing.JToolBar.addSeparator",
            "javax.swing.SwingUtilities.invokeAndWait",
            "java.lang.String.replace",
            "javax.swing.JTable.getPreferredScrollableViewportSize",
            "javax.imageio.ImageIO.read",
            "javax.imageio.ImageIO.write"
        ]
    },
    {
        "query": "Maintaining aspect ratio of JPanel background image",
        "biker_result": [
            "java.awt.Image.getScaledInstance",
            "java.awt.Graphics.drawImage",
            "javax.swing.JComponent.setOpaque",
            "java.awt.Graphics.setClip",
            "javax.swing.JComponent.paintComponent",
            "javax.imageio.ImageIO.read",
            "java.lang.Math.floor"
        ]
    },
    {
        "query": "How to add an image to a JPanel?",
        "biker_result": [
            "java.awt.Graphics.drawImage",
            "java.awt.Image.getScaledInstance",
            "javax.imageio.ImageIO.write",
            "javax.swing.SwingUtilities.paintComponent",
            "java.awt.Toolkit.getImage",
            "javax.swing.JComponent.paintComponent",
            "javax.swing.JLabel.setIcon",
            "java.lang.ClassLoader.getResource"
        ]
    },
    {
        "query": "How to send HTTP request in java? ",
        "biker_result": [
            "java.net.URL.openConnection",
            "java.net.URLStreamHandler.openConnection",
            "java.net.CookieHandler.setDefault",
            "java.net.Authenticator.setDefault",
            "java.net.CookieHandler.getDefault",
            "java.net.URLConnection.connect",
            "java.lang.Runtime.addShutdownHook",
            "java.nio.file.Files.getAttribute",
            "java.util.concurrent.CountDownLatch.countDown",
            "java.lang.Integer.parseInt",
            "java.io.File.exists"
        ]
    },
    {
        "query": "Java socket API: How to tell if a connection has been closed?",
        "biker_result": [
            "java.net.Socket.isConnected",
            "java.net.Socket.close",
            "java.net.Socket.isClosed",
            "java.net.Socket.connect",
            "java.net.ServerSocket.close",
            "java.sql.Connection.close",
            "java.io.PrintWriter.checkError",
            "java.io.FileInputStream.close",
            "java.net.Socket.setSoTimeout",
            "java.net.Socket.getLocalAddress",
            "java.net.ServerSocket.accept",
            "java.net.ServerSocket.setSoTimeout",
            "java.lang.Runtime.addShutdownHook",
            "java.lang.Thread.join",
            "java.lang.System.exit",
            "java.sql.ResultSet.setFetchSize",
            "java.lang.Thread.sleep",
            "java.io.PrintWriter.println",
            "java.io.BufferedReader.readLine"
        ]
    },
    {
        "query": "Getting the IP address of the current machine using Java",
        "biker_result": [
            "java.net.InetAddress.getByName",
            "java.net.NetworkInterface.getNetworkInterfaces",
            "java.net.InetAddress.getHostAddress",
            "java.net.InetAddress.getLocalHost",
            "java.net.InetSocketAddress.getAddress",
            "java.net.InetAddress.getCanonicalHostName",
            "java.net.InetAddress.getAllByName",
            "java.net.InetAddress.getHostName",
            "java.rmi.registry.LocateRegistry.getRegistry",
            "java.rmi.server.RemoteServer.getClientHost",
            "java.net.InetAddress.toString",
            "java.net.DatagramSocket.getInetAddress",
            "java.net.NetworkInterface.getHardwareAddress",
            "java.net.InetAddress.isReachable",
            "java.lang.Runtime.getRuntime",
            "java.net.NetworkInterface.getByName",
            "java.net.Socket.connect",
            "java.lang.Runtime.exec",
            "java.lang.System.currentTimeMillis",
            "java.lang.String.split",
            "java.util.regex.Pattern.matches",
            "java.lang.System.identityHashCode",
            "java.util.Collections.sort",
            "java.util.regex.Pattern.compile"
        ]
    }
]